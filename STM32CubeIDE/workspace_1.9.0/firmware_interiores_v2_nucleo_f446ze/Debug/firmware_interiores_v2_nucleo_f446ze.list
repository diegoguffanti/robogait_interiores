
firmware_interiores_v2_nucleo_f446ze.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012fbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08013190  08013190  00023190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013990  08013990  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  08013990  08013990  00023990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013998  08013998  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013998  08013998  00023998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801399c  0801399c  0002399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  080139a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002130  20000308  08013ca8  00030308  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002438  08013ca8  00032438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5f0  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c6  00000000  00000000  0004f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00053bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  000555f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002853c  00000000  00000000  00056e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002111b  00000000  00000000  0007f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6763  00000000  00000000  000a04a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008640  00000000  00000000  00186c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000308 	.word	0x20000308
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013174 	.word	0x08013174

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000030c 	.word	0x2000030c
 800020c:	08013174 	.word	0x08013174

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <MPU9250_beginAccel>:
char accelBuf[6],gyroBuf[6];
uint8_t magBuf[7];
int i;
int16_t magXOffset, magYOffset, magZOffset;
//start Accelerometer
void MPU9250_beginAccel(uint8_t mode) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  switch(mode) {
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b18      	cmp	r3, #24
 8001066:	d859      	bhi.n	800111c <MPU9250_beginAccel+0xc4>
 8001068:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <MPU9250_beginAccel+0x18>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	080010d5 	.word	0x080010d5
 8001074:	0800111d 	.word	0x0800111d
 8001078:	0800111d 	.word	0x0800111d
 800107c:	0800111d 	.word	0x0800111d
 8001080:	0800111d 	.word	0x0800111d
 8001084:	0800111d 	.word	0x0800111d
 8001088:	0800111d 	.word	0x0800111d
 800108c:	0800111d 	.word	0x0800111d
 8001090:	080010e5 	.word	0x080010e5
 8001094:	0800111d 	.word	0x0800111d
 8001098:	0800111d 	.word	0x0800111d
 800109c:	0800111d 	.word	0x0800111d
 80010a0:	0800111d 	.word	0x0800111d
 80010a4:	0800111d 	.word	0x0800111d
 80010a8:	0800111d 	.word	0x0800111d
 80010ac:	0800111d 	.word	0x0800111d
 80010b0:	080010f3 	.word	0x080010f3
 80010b4:	0800111d 	.word	0x0800111d
 80010b8:	0800111d 	.word	0x0800111d
 80010bc:	0800111d 	.word	0x0800111d
 80010c0:	0800111d 	.word	0x0800111d
 80010c4:	0800111d 	.word	0x0800111d
 80010c8:	0800111d 	.word	0x0800111d
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	08001101 	.word	0x08001101
  case ACC_FULL_SCALE_2_G:
    accelRange = 2.0;
 80010d4:	4913      	ldr	r1, [pc, #76]	; (8001124 <MPU9250_beginAccel+0xcc>)
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010de:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80010e2:	e014      	b.n	800110e <MPU9250_beginAccel+0xb6>
  case ACC_FULL_SCALE_4_G:
    accelRange = 4.0;
 80010e4:	490f      	ldr	r1, [pc, #60]	; (8001124 <MPU9250_beginAccel+0xcc>)
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MPU9250_beginAccel+0xd0>)
 80010ec:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80010f0:	e00d      	b.n	800110e <MPU9250_beginAccel+0xb6>
  case ACC_FULL_SCALE_8_G:
    accelRange = 8.0;
 80010f2:	490c      	ldr	r1, [pc, #48]	; (8001124 <MPU9250_beginAccel+0xcc>)
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MPU9250_beginAccel+0xd4>)
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80010fe:	e006      	b.n	800110e <MPU9250_beginAccel+0xb6>
  case ACC_FULL_SCALE_16_G:
    accelRange = 16.0;
 8001100:	4908      	ldr	r1, [pc, #32]	; (8001124 <MPU9250_beginAccel+0xcc>)
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MPU9250_beginAccel+0xd8>)
 8001108:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 800110c:	bf00      	nop
  default:
    return; // Return without writing invalid mode
  }
  i2c_writeByte(address, MPU9250_ADDR_ACCELCONFIG, mode);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	461a      	mov	r2, r3
 8001112:	211c      	movs	r1, #28
 8001114:	2068      	movs	r0, #104	; 0x68
 8001116:	f000 fb6d 	bl	80017f4 <i2c_writeByte>
 800111a:	e000      	b.n	800111e <MPU9250_beginAccel+0xc6>
    return; // Return without writing invalid mode
 800111c:	bf00      	nop
	
}
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000328 	.word	0x20000328
 8001128:	40100000 	.word	0x40100000
 800112c:	40200000 	.word	0x40200000
 8001130:	40300000 	.word	0x40300000

08001134 <MPU9250_beginGyro>:

//start gyroscope
void MPU9250_beginGyro(uint8_t mode) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  
  switch (mode) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b18      	cmp	r3, #24
 8001142:	d858      	bhi.n	80011f6 <MPU9250_beginGyro+0xc2>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <MPU9250_beginGyro+0x18>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	080011b1 	.word	0x080011b1
 8001150:	080011f7 	.word	0x080011f7
 8001154:	080011f7 	.word	0x080011f7
 8001158:	080011f7 	.word	0x080011f7
 800115c:	080011f7 	.word	0x080011f7
 8001160:	080011f7 	.word	0x080011f7
 8001164:	080011f7 	.word	0x080011f7
 8001168:	080011f7 	.word	0x080011f7
 800116c:	080011bf 	.word	0x080011bf
 8001170:	080011f7 	.word	0x080011f7
 8001174:	080011f7 	.word	0x080011f7
 8001178:	080011f7 	.word	0x080011f7
 800117c:	080011f7 	.word	0x080011f7
 8001180:	080011f7 	.word	0x080011f7
 8001184:	080011f7 	.word	0x080011f7
 8001188:	080011f7 	.word	0x080011f7
 800118c:	080011cd 	.word	0x080011cd
 8001190:	080011f7 	.word	0x080011f7
 8001194:	080011f7 	.word	0x080011f7
 8001198:	080011f7 	.word	0x080011f7
 800119c:	080011f7 	.word	0x080011f7
 80011a0:	080011f7 	.word	0x080011f7
 80011a4:	080011f7 	.word	0x080011f7
 80011a8:	080011f7 	.word	0x080011f7
 80011ac:	080011db 	.word	0x080011db
  case GYRO_FULL_SCALE_250_DPS:
    gyroRange = 250.0;
 80011b0:	4913      	ldr	r1, [pc, #76]	; (8001200 <MPU9250_beginGyro+0xcc>)
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MPU9250_beginGyro+0xd0>)
 80011b8:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80011bc:	e014      	b.n	80011e8 <MPU9250_beginGyro+0xb4>
  case GYRO_FULL_SCALE_500_DPS:
    gyroRange = 500.0;
 80011be:	4910      	ldr	r1, [pc, #64]	; (8001200 <MPU9250_beginGyro+0xcc>)
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MPU9250_beginGyro+0xd4>)
 80011c6:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80011ca:	e00d      	b.n	80011e8 <MPU9250_beginGyro+0xb4>
  case GYRO_FULL_SCALE_1000_DPS:
    gyroRange = 1000.0;
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <MPU9250_beginGyro+0xcc>)
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MPU9250_beginGyro+0xd8>)
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80011d8:	e006      	b.n	80011e8 <MPU9250_beginGyro+0xb4>
  case GYRO_FULL_SCALE_2000_DPS:
    gyroRange = 2000.0;
 80011da:	4909      	ldr	r1, [pc, #36]	; (8001200 <MPU9250_beginGyro+0xcc>)
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MPU9250_beginGyro+0xdc>)
 80011e2:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80011e6:	bf00      	nop
  default:
    return; // Return without writing invalid mode
  }
  i2c_writeByte(address, 27, mode);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	461a      	mov	r2, r3
 80011ec:	211b      	movs	r1, #27
 80011ee:	2068      	movs	r0, #104	; 0x68
 80011f0:	f000 fb00 	bl	80017f4 <i2c_writeByte>
 80011f4:	e000      	b.n	80011f8 <MPU9250_beginGyro+0xc4>
    return; // Return without writing invalid mode
 80011f6:	bf00      	nop

}
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000330 	.word	0x20000330
 8001204:	406f4000 	.word	0x406f4000
 8001208:	407f4000 	.word	0x407f4000
 800120c:	408f4000 	.word	0x408f4000
 8001210:	409f4000 	.word	0x409f4000

08001214 <MPU9250_accelUpdate>:
//start compass




uint8_t MPU9250_accelUpdate(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	i2c_ReadMulti(address,0x3B,6,accelBuf);
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <MPU9250_accelUpdate+0x18>)
 800121a:	2206      	movs	r2, #6
 800121c:	213b      	movs	r1, #59	; 0x3b
 800121e:	2068      	movs	r0, #104	; 0x68
 8001220:	f000 fb3c 	bl	800189c <i2c_ReadMulti>
//	i2c_readByte(address,0x3C,&accelBuf[1]);
//	i2c_readByte(address,0x3D,&accelBuf[2]);
//	i2c_readByte(address,0x3E,&accelBuf[3]);
//	i2c_readByte(address,0x3F,&accelBuf[4]);
//	i2c_readByte(address,0x40,&accelBuf[5]);	
	return 0;
 8001224:	2300      	movs	r3, #0
 
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000344 	.word	0x20000344

08001230 <MPU9250_accelGet>:

float MPU9250_accelGet(uint8_t highIndex, uint8_t lowIndex) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
  int16_t v = ((int16_t) accelBuf[highIndex]) << 8 | accelBuf[lowIndex];
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <MPU9250_accelGet+0x74>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b21a      	sxth	r2, r3
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	4915      	ldr	r1, [pc, #84]	; (80012a4 <MPU9250_accelGet+0x74>)
 800124e:	5ccb      	ldrb	r3, [r1, r3]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	81fb      	strh	r3, [r7, #14]
  return ((float) -v) * accelRange / (float) 0x8000; // (float) 0x8000 == 32768.0
 8001256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800125a:	425b      	negs	r3, r3
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001264:	ee17 0a90 	vmov	r0, s15
 8001268:	f7ff f99e 	bl	80005a8 <__aeabi_f2d>
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MPU9250_accelGet+0x78>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff f9f1 	bl	8000658 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MPU9250_accelGet+0x7c>)
 8001284:	f7ff fb12 	bl	80008ac <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fcda 	bl	8000c48 <__aeabi_d2f>
 8001294:	4603      	mov	r3, r0
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000344 	.word	0x20000344
 80012a8:	20000328 	.word	0x20000328
 80012ac:	40e00000 	.word	0x40e00000

080012b0 <MPU9250_accelX>:
  return sqrt(pow(MPU9250_accelGet(0, 1), 2) +
              pow(MPU9250_accelGet(2, 3), 2) +
              pow(MPU9250_accelGet(4, 5), 2));
}

float MPU9250_accelX(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  return MPU9250_accelGet(0, 1);
 80012b4:	2101      	movs	r1, #1
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff ffba 	bl	8001230 <MPU9250_accelGet>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
}
 80012c0:	eeb0 0a67 	vmov.f32	s0, s15
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <MPU9250_accelY>:

float MPU9250_accelY(void) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  return MPU9250_accelGet(2, 3);
 80012ca:	2103      	movs	r1, #3
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff ffaf 	bl	8001230 <MPU9250_accelGet>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80012d6:	eeb0 0a67 	vmov.f32	s0, s15
 80012da:	bd80      	pop	{r7, pc}

080012dc <MPU9250_accelZ>:

float MPU9250_accelZ(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  return MPU9250_accelGet(4, 5);
 80012e0:	2105      	movs	r1, #5
 80012e2:	2004      	movs	r0, #4
 80012e4:	f7ff ffa4 	bl	8001230 <MPU9250_accelGet>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <MPU9250_gyroUpdate>:


uint8_t MPU9250_gyroUpdate(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	i2c_ReadMulti(address,0x43,6,gyroBuf);
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <MPU9250_gyroUpdate+0x18>)
 80012fa:	2206      	movs	r2, #6
 80012fc:	2143      	movs	r1, #67	; 0x43
 80012fe:	2068      	movs	r0, #104	; 0x68
 8001300:	f000 facc 	bl	800189c <i2c_ReadMulti>
//	i2c_readByte(address,0x44,&gyroBuf[1]);
//	i2c_readByte(address,0x45,&gyroBuf[2]);
//	i2c_readByte(address,0x46,&gyroBuf[3]);
//	i2c_readByte(address,0x47,&gyroBuf[4]);
//	i2c_readByte(address,0x48,&gyroBuf[5]);
  return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000034c 	.word	0x2000034c

08001310 <MPU9250_gyroGet>:

float MPU9250_gyroGet(uint8_t highIndex, uint8_t lowIndex) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	460a      	mov	r2, r1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	4613      	mov	r3, r2
 800131e:	71bb      	strb	r3, [r7, #6]
  int16_t v = ((int16_t) gyroBuf[highIndex]) << 8 | gyroBuf[lowIndex];
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MPU9250_gyroGet+0x74>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	4915      	ldr	r1, [pc, #84]	; (8001384 <MPU9250_gyroGet+0x74>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	81fb      	strh	r3, [r7, #14]
  return ((float) -v) * gyroRange / (float) 0x8000;
 8001336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133a:	425b      	negs	r3, r3
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001344:	ee17 0a90 	vmov	r0, s15
 8001348:	f7ff f92e 	bl	80005a8 <__aeabi_f2d>
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MPU9250_gyroGet+0x78>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f981 	bl	8000658 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <MPU9250_gyroGet+0x7c>)
 8001364:	f7ff faa2 	bl	80008ac <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc6a 	bl	8000c48 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	ee07 3a90 	vmov	s15, r3
}
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000034c 	.word	0x2000034c
 8001388:	20000330 	.word	0x20000330
 800138c:	40e00000 	.word	0x40e00000

08001390 <MPU9250_gyroX>:

float MPU9250_gyroX(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  return MPU9250_gyroGet(0, 1);
 8001394:	2101      	movs	r1, #1
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff ffba 	bl	8001310 <MPU9250_gyroGet>
 800139c:	eef0 7a40 	vmov.f32	s15, s0
}
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <MPU9250_gyroY>:

float MPU9250_gyroY(void) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  return MPU9250_gyroGet(2, 3);
 80013aa:	2103      	movs	r1, #3
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff ffaf 	bl	8001310 <MPU9250_gyroGet>
 80013b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	bd80      	pop	{r7, pc}

080013bc <MPU9250_gyroZ>:

float MPU9250_gyroZ(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  return MPU9250_gyroGet(4, 5);
 80013c0:	2105      	movs	r1, #5
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff ffa4 	bl	8001310 <MPU9250_gyroGet>
 80013c8:	eef0 7a40 	vmov.f32	s15, s0
}
 80013cc:	eeb0 0a67 	vmov.f32	s0, s15
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <MPU9250_magGet>:


//compass section 
int16_t MPU9250_magGet(uint8_t highIndex, uint8_t lowIndex) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
  return (((int16_t) magBuf[highIndex]) << 8) | magBuf[lowIndex];
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <MPU9250_magGet+0x34>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	4905      	ldr	r1, [pc, #20]	; (8001408 <MPU9250_magGet+0x34>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21b      	sxth	r3, r3
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000338 	.word	0x20000338

0800140c <magSetMode>:


void magSetMode(uint8_t mode) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  i2c_writeByte(AK8963_ADDRESS, AK8963_RA_CNTL1, mode);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	461a      	mov	r2, r3
 800141a:	210a      	movs	r1, #10
 800141c:	200c      	movs	r0, #12
 800141e:	f000 f9e9 	bl	80017f4 <i2c_writeByte>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <magReadAdjustValues>:

void magReadAdjustValues(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  magSetMode(MAG_MODE_POWERDOWN);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ffea 	bl	800140c <magSetMode>
  magSetMode(MAG_MODE_FUSEROM);
 8001438:	200f      	movs	r0, #15
 800143a:	f7ff ffe7 	bl	800140c <magSetMode>
  char buff[3];
	i2c_ReadMulti(AK8963_ADDRESS,0x10,3,buff);
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2203      	movs	r2, #3
 8001442:	2110      	movs	r1, #16
 8001444:	200c      	movs	r0, #12
 8001446:	f000 fa29 	bl	800189c <i2c_ReadMulti>
//	i2c_readByte(AK8963_ADDRESS,0x10,&buff[0]);
//	i2c_readByte(AK8963_ADDRESS,0x11,&buff[1]);
//	i2c_readByte(AK8963_ADDRESS,0x12,&buff[2]);
  magXAdjust = buff[0];
 800144a:	793a      	ldrb	r2, [r7, #4]
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <magReadAdjustValues+0x38>)
 800144e:	701a      	strb	r2, [r3, #0]
  magYAdjust = buff[1];
 8001450:	797a      	ldrb	r2, [r7, #5]
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <magReadAdjustValues+0x3c>)
 8001454:	701a      	strb	r2, [r3, #0]
  magZAdjust = buff[2];
 8001456:	79ba      	ldrb	r2, [r7, #6]
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <magReadAdjustValues+0x40>)
 800145a:	701a      	strb	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000033f 	.word	0x2000033f
 8001468:	20000340 	.word	0x20000340
 800146c:	20000341 	.word	0x20000341

08001470 <magWakeup>:



void magWakeup(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
   char bits;
  i2c_readByte(address, MPU9250_ADDR_PWR_MGMT_1, &bits);
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	461a      	mov	r2, r3
 800147a:	216b      	movs	r1, #107	; 0x6b
 800147c:	2068      	movs	r0, #104	; 0x68
 800147e:	f000 f93d 	bl	80016fc <i2c_readByte>
  bits &= ~0b01110000; // Turn off SLEEP, STANDBY, CYCLE
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001488:	b2db      	uxtb	r3, r3
 800148a:	71fb      	strb	r3, [r7, #7]
  i2c_writeByte(address, MPU9250_ADDR_PWR_MGMT_1, bits);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	461a      	mov	r2, r3
 8001490:	216b      	movs	r1, #107	; 0x6b
 8001492:	2068      	movs	r0, #104	; 0x68
 8001494:	f000 f9ae 	bl	80017f4 <i2c_writeByte>

}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <magEnableSlaveMode>:

void magEnableSlaveMode(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
   char bits;
	
  i2c_readByte(address, MPU9250_ADDR_INT_PIN_CFG, &bits);
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	461a      	mov	r2, r3
 80014aa:	2137      	movs	r1, #55	; 0x37
 80014ac:	2068      	movs	r0, #104	; 0x68
 80014ae:	f000 f925 	bl	80016fc <i2c_readByte>
  bits |= 0b00000010; // Activate BYPASS_EN
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	71fb      	strb	r3, [r7, #7]
  i2c_writeByte(address, MPU9250_ADDR_INT_PIN_CFG, bits);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	461a      	mov	r2, r3
 80014c0:	2137      	movs	r1, #55	; 0x37
 80014c2:	2068      	movs	r0, #104	; 0x68
 80014c4:	f000 f996 	bl	80017f4 <i2c_writeByte>

}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <adjustMagValue>:

float adjustMagValue(int16_t value, uint8_t adjust) {
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	80fb      	strh	r3, [r7, #6]
 80014dc:	4613      	mov	r3, r2
 80014de:	717b      	strb	r3, [r7, #5]
  return ((float) value * (((((float) adjust - 128) * 0.5) / 128) + 1));
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ec:	ee17 0a90 	vmov	r0, s15
 80014f0:	f7ff f85a 	bl	80005a8 <__aeabi_f2d>
 80014f4:	4604      	mov	r4, r0
 80014f6:	460d      	mov	r5, r1
 80014f8:	797b      	ldrb	r3, [r7, #5]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001502:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001568 <adjustMagValue+0x98>
 8001506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800150a:	ee17 0a90 	vmov	r0, s15
 800150e:	f7ff f84b 	bl	80005a8 <__aeabi_f2d>
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <adjustMagValue+0x9c>)
 8001518:	f7ff f89e 	bl	8000658 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <adjustMagValue+0xa0>)
 800152a:	f7ff f9bf 	bl	80008ac <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <adjustMagValue+0xa4>)
 800153c:	f7fe fed6 	bl	80002ec <__adddf3>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7ff f886 	bl	8000658 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fb78 	bl	8000c48 <__aeabi_d2f>
 8001558:	4603      	mov	r3, r0
 800155a:	ee07 3a90 	vmov	s15, r3
}
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bdb0      	pop	{r4, r5, r7, pc}
 8001568:	43000000 	.word	0x43000000
 800156c:	3fe00000 	.word	0x3fe00000
 8001570:	40600000 	.word	0x40600000
 8001574:	3ff00000 	.word	0x3ff00000

08001578 <MPU9250_magX>:

float MPU9250_magX(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  return adjustMagValue(MPU9250_magGet(1, 0), magXAdjust) + magXOffset;
 800157c:	2100      	movs	r1, #0
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff ff28 	bl	80013d4 <MPU9250_magGet>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MPU9250_magX+0x38>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f7ff ff9e 	bl	80014d0 <adjustMagValue>
 8001594:	eeb0 7a40 	vmov.f32	s14, s0
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MPU9250_magX+0x3c>)
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000033f 	.word	0x2000033f
 80015b4:	20000352 	.word	0x20000352

080015b8 <MPU9250_magY>:

float MPU9250_magY(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  return adjustMagValue(MPU9250_magGet(3, 2), magYAdjust) + magYOffset;
 80015bc:	2102      	movs	r1, #2
 80015be:	2003      	movs	r0, #3
 80015c0:	f7ff ff08 	bl	80013d4 <MPU9250_magGet>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MPU9250_magY+0x38>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff ff7e 	bl	80014d0 <adjustMagValue>
 80015d4:	eeb0 7a40 	vmov.f32	s14, s0
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MPU9250_magY+0x3c>)
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000340 	.word	0x20000340
 80015f4:	20000354 	.word	0x20000354

080015f8 <MPU9250_magZ>:

float MPU9250_magZ(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  return adjustMagValue(MPU9250_magGet(5, 4), magZAdjust) + magZOffset;
 80015fc:	2104      	movs	r1, #4
 80015fe:	2005      	movs	r0, #5
 8001600:	f7ff fee8 	bl	80013d4 <MPU9250_magGet>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MPU9250_magZ+0x38>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff ff5e 	bl	80014d0 <adjustMagValue>
 8001614:	eeb0 7a40 	vmov.f32	s14, s0
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MPU9250_magZ+0x3c>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800162a:	eeb0 0a67 	vmov.f32	s0, s15
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000341 	.word	0x20000341
 8001634:	20000356 	.word	0x20000356

08001638 <MPU9250_magHorizDirection>:

float MPU9250_magHorizDirection(void) {
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	af00      	add	r7, sp, #0
  return atan2(MPU9250_magX(), MPU9250_magY()) * 180 / Pi;
 800163c:	f7ff ff9c 	bl	8001578 <MPU9250_magX>
 8001640:	ee10 3a10 	vmov	r3, s0
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ffaf 	bl	80005a8 <__aeabi_f2d>
 800164a:	4604      	mov	r4, r0
 800164c:	460d      	mov	r5, r1
 800164e:	f7ff ffb3 	bl	80015b8 <MPU9250_magY>
 8001652:	ee10 3a10 	vmov	r3, s0
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ffa6 	bl	80005a8 <__aeabi_f2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	ec43 2b11 	vmov	d1, r2, r3
 8001664:	ec45 4b10 	vmov	d0, r4, r5
 8001668:	f010 fb1e 	bl	8011ca8 <atan2>
 800166c:	ec51 0b10 	vmov	r0, r1, d0
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MPU9250_magHorizDirection+0x78>)
 8001676:	f7fe ffef 	bl	8000658 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	a309      	add	r3, pc, #36	; (adr r3, 80016a8 <MPU9250_magHorizDirection+0x70>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f910 	bl	80008ac <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fad8 	bl	8000c48 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	ee07 3a90 	vmov	s15, r3
}
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	f01b866e 	.word	0xf01b866e
 80016ac:	400921f9 	.word	0x400921f9
 80016b0:	40668000 	.word	0x40668000

080016b4 <MPU9250_magUpdate>:

uint8_t MPU9250_magUpdate(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	
	i2c_ReadMulti(AK8963_ADDRESS,0x03,7,(char*)magBuf);
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <MPU9250_magUpdate+0x18>)
 80016ba:	2207      	movs	r2, #7
 80016bc:	2103      	movs	r1, #3
 80016be:	200c      	movs	r0, #12
 80016c0:	f000 f8ec 	bl	800189c <i2c_ReadMulti>
//	i2c_readByte(AK8963_ADDRESS,0x05,(char*)&magBuf[2]);
//	i2c_readByte(AK8963_ADDRESS,0x06,(char*)&magBuf[3]);
//	i2c_readByte(AK8963_ADDRESS,0x07,(char*)&magBuf[4]);
//	i2c_readByte(AK8963_ADDRESS,0x08,(char*)&magBuf[5]);
//	i2c_readByte(AK8963_ADDRESS,0x09,(char*)&magBuf[6]);
  return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000338 	.word	0x20000338

080016d0 <MPU9250_beginMag>:

void MPU9250_beginMag(uint8_t mode) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  
  magWakeup();
 80016da:	f7ff fec9 	bl	8001470 <magWakeup>
  magEnableSlaveMode();
 80016de:	f7ff fedf 	bl	80014a0 <magEnableSlaveMode>
  magReadAdjustValues();
 80016e2:	f7ff fea3 	bl	800142c <magReadAdjustValues>
  magSetMode(MAG_MODE_POWERDOWN);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fe90 	bl	800140c <magSetMode>
  magSetMode(mode);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe8c 	bl	800140c <magSetMode>
 
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <i2c_readByte>:
//I2C1->CR1|=I2C_CR1_PE; //enable I2C	
	
}

char i2c_readByte(char saddr,char maddr, char *data)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	603a      	str	r2, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	460b      	mov	r3, r1
 800170a:	71bb      	strb	r3, [r7, #6]

volatile int tmp;
while(I2C1->SR2&I2C_SR2_BUSY){;}
 800170c:	bf00      	nop
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <i2c_readByte+0xf4>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f9      	bne.n	800170e <i2c_readByte+0x12>
I2C1->CR1|=I2C_CR1_START;
 800171a:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <i2c_readByte+0xf4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a34      	ldr	r2, [pc, #208]	; (80017f0 <i2c_readByte+0xf4>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6013      	str	r3, [r2, #0]
while(!(I2C1->SR1&I2C_SR1_SB)){;}
 8001726:	bf00      	nop
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <i2c_readByte+0xf4>)
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f9      	beq.n	8001728 <i2c_readByte+0x2c>
I2C1->DR=saddr<<1;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	005a      	lsls	r2, r3, #1
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <i2c_readByte+0xf4>)
 800173a:	611a      	str	r2, [r3, #16]
while(!(I2C1->SR1&I2C_SR1_ADDR)){;}
 800173c:	bf00      	nop
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <i2c_readByte+0xf4>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f9      	beq.n	800173e <i2c_readByte+0x42>
tmp=I2C1->SR2;
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <i2c_readByte+0xf4>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	60fb      	str	r3, [r7, #12]
while(!(I2C1->SR1&I2C_SR1_TXE)){;}
 8001750:	bf00      	nop
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <i2c_readByte+0xf4>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f9      	beq.n	8001752 <i2c_readByte+0x56>
I2C1->DR=maddr;
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <i2c_readByte+0xf4>)
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	6113      	str	r3, [r2, #16]
while(!(I2C1->SR1&I2C_SR1_TXE)){;}
 8001764:	bf00      	nop
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <i2c_readByte+0xf4>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f9      	beq.n	8001766 <i2c_readByte+0x6a>
I2C1->CR1|=I2C_CR1_START;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <i2c_readByte+0xf4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <i2c_readByte+0xf4>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]
while(!(I2C1->SR1&I2C_SR1_SB)){;}	
 800177e:	bf00      	nop
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <i2c_readByte+0xf4>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f9      	beq.n	8001780 <i2c_readByte+0x84>
I2C1->DR=saddr<<1|1;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <i2c_readByte+0xf4>)
 8001796:	611a      	str	r2, [r3, #16]
while(!(I2C1->SR1&I2C_SR1_ADDR)){;}
 8001798:	bf00      	nop
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <i2c_readByte+0xf4>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f9      	beq.n	800179a <i2c_readByte+0x9e>
I2C1->CR1&=~I2C_CR1_ACK;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <i2c_readByte+0xf4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <i2c_readByte+0xf4>)
 80017ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017b0:	6013      	str	r3, [r2, #0]
tmp =I2C1->SR2;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <i2c_readByte+0xf4>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	60fb      	str	r3, [r7, #12]
I2C1->CR1|=I2C_CR1_STOP;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <i2c_readByte+0xf4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <i2c_readByte+0xf4>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
while(!(I2C1->SR1&I2C_SR1_RXNE)){;}
 80017c4:	bf00      	nop
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <i2c_readByte+0xf4>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f9      	beq.n	80017c6 <i2c_readByte+0xca>
*data++=I2C1->DR;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <i2c_readByte+0xf4>)
 80017d4:	6919      	ldr	r1, [r3, #16]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	603a      	str	r2, [r7, #0]
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40005400 	.word	0x40005400

080017f4 <i2c_writeByte>:

void i2c_writeByte(char saddr,char maddr,char data){
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	460b      	mov	r3, r1
 8001800:	71bb      	strb	r3, [r7, #6]
 8001802:	4613      	mov	r3, r2
 8001804:	717b      	strb	r3, [r7, #5]


volatile int Temp;
while(I2C1->SR2&I2C_SR2_BUSY){;}          /*wait until bus not busy*/
 8001806:	bf00      	nop
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <i2c_writeByte+0xa4>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f9      	bne.n	8001808 <i2c_writeByte+0x14>
I2C1->CR1|=I2C_CR1_START;                 /*generate start*/
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <i2c_writeByte+0xa4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <i2c_writeByte+0xa4>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
while(!(I2C1->SR1&I2C_SR1_SB)){;}         /*wait until start bit is set*/
 8001820:	bf00      	nop
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <i2c_writeByte+0xa4>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f9      	beq.n	8001822 <i2c_writeByte+0x2e>
I2C1->DR = saddr<< 1;                 	 /* Send slave address*/
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <i2c_writeByte+0xa4>)
 8001834:	611a      	str	r2, [r3, #16]
while(!(I2C1->SR1&I2C_SR1_ADDR)){;}      /*wait until address flag is set*/
 8001836:	bf00      	nop
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <i2c_writeByte+0xa4>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f9      	beq.n	8001838 <i2c_writeByte+0x44>
Temp = I2C1->SR2; 											 /*clear SR2 by reading it */
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <i2c_writeByte+0xa4>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	60fb      	str	r3, [r7, #12]
while(!(I2C1->SR1&I2C_SR1_TXE)){;}       /*Wait until Data register empty*/
 800184a:	bf00      	nop
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <i2c_writeByte+0xa4>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f9      	beq.n	800184c <i2c_writeByte+0x58>
I2C1->DR = maddr;                        /* send memory address*/
 8001858:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <i2c_writeByte+0xa4>)
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	6113      	str	r3, [r2, #16]
while(!(I2C1->SR1&I2C_SR1_TXE)){;}       /*wait until data register empty*/
 800185e:	bf00      	nop
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <i2c_writeByte+0xa4>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f9      	beq.n	8001860 <i2c_writeByte+0x6c>
I2C1->DR = data; 	
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <i2c_writeByte+0xa4>)
 800186e:	797b      	ldrb	r3, [r7, #5]
 8001870:	6113      	str	r3, [r2, #16]
while (!(I2C1->SR1 & I2C_SR1_BTF));      /*wait until transfer finished*/
 8001872:	bf00      	nop
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <i2c_writeByte+0xa4>)
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f9      	beq.n	8001874 <i2c_writeByte+0x80>
I2C1->CR1 |=I2C_CR1_STOP;								 /*Generate Stop*/	
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <i2c_writeByte+0xa4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <i2c_writeByte+0xa4>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188a:	6013      	str	r3, [r2, #0]
	
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40005400 	.word	0x40005400

0800189c <i2c_ReadMulti>:
I2C1->CR1 |= I2C_CR1_STOP;										//wait until transfer finished
}


void i2c_ReadMulti(char saddr,char maddr, int n, char* data)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60ba      	str	r2, [r7, #8]
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4603      	mov	r3, r0
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	460b      	mov	r3, r1
 80018ac:	73bb      	strb	r3, [r7, #14]
	volatile int temp;
	while (I2C1->SR2 & I2C_SR2_BUSY){;}
 80018ae:	bf00      	nop
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <i2c_ReadMulti+0x134>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <i2c_ReadMulti+0x14>
	I2C1->CR1|=I2C_CR1_START;
 80018bc:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <i2c_ReadMulti+0x134>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <i2c_ReadMulti+0x134>)
 80018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c6:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB)){;}
 80018c8:	bf00      	nop
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <i2c_ReadMulti+0x134>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f9      	beq.n	80018ca <i2c_ReadMulti+0x2e>
	I2C1->DR=saddr<<1;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	005a      	lsls	r2, r3, #1
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <i2c_ReadMulti+0x134>)
 80018dc:	611a      	str	r2, [r3, #16]
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){;}
 80018de:	bf00      	nop
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <i2c_ReadMulti+0x134>)
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f9      	beq.n	80018e0 <i2c_ReadMulti+0x44>
	temp=I2C1->SR2;
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <i2c_ReadMulti+0x134>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	617b      	str	r3, [r7, #20]
	while(!(I2C1->SR1&I2C_SR1_TXE)){;}
 80018f2:	bf00      	nop
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <i2c_ReadMulti+0x134>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f9      	beq.n	80018f4 <i2c_ReadMulti+0x58>
	I2C1->DR = maddr;
 8001900:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1&I2C_SR1_TXE)){;}
 8001906:	bf00      	nop
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <i2c_ReadMulti+0x134>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f9      	beq.n	8001908 <i2c_ReadMulti+0x6c>
	I2C1->CR1|=I2C_CR1_START;
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <i2c_ReadMulti+0x134>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB)){;}
 8001920:	bf00      	nop
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f9      	beq.n	8001922 <i2c_ReadMulti+0x86>
	I2C1->DR=saddr<<1|1;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001938:	611a      	str	r2, [r3, #16]
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){;}
 800193a:	bf00      	nop
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <i2c_ReadMulti+0x134>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f9      	beq.n	800193c <i2c_ReadMulti+0xa0>
	temp=I2C1->SR2;
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <i2c_ReadMulti+0x134>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	617b      	str	r3, [r7, #20]
	I2C1->CR1|=I2C_CR1_ACK;
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001958:	6013      	str	r3, [r2, #0]
	while(n>0U)
 800195a:	e02e      	b.n	80019ba <i2c_ReadMulti+0x11e>
		{
		if(n==1U)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d11a      	bne.n	8001998 <i2c_ReadMulti+0xfc>
				{
				I2C1->CR1&=~I2C_CR1_ACK;
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800196c:	6013      	str	r3, [r2, #0]
					I2C1->CR1|=I2C_CR1_STOP;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <i2c_ReadMulti+0x134>)
 8001974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001978:	6013      	str	r3, [r2, #0]
					while(!(I2C1->SR1&I2C_SR1_RXNE)){;}
 800197a:	bf00      	nop
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <i2c_ReadMulti+0x134>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f9      	beq.n	800197c <i2c_ReadMulti+0xe0>
					*data++=I2C1->DR;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <i2c_ReadMulti+0x134>)
 800198a:	6919      	ldr	r1, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
						break;
 8001996:	e014      	b.n	80019c2 <i2c_ReadMulti+0x126>
				}
			else
					{
					
					while(!(I2C1->SR1&I2C_SR1_RXNE)){;}
 8001998:	bf00      	nop
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <i2c_ReadMulti+0x134>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f9      	beq.n	800199a <i2c_ReadMulti+0xfe>
						(*data++)=I2C1->DR;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <i2c_ReadMulti+0x134>)
 80019a8:	6919      	ldr	r1, [r3, #16]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
							n--;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
	while(n>0U)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1cd      	bne.n	800195c <i2c_ReadMulti+0xc0>
					}	
				
			
		}	
		
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40005400 	.word	0x40005400

080019d4 <HAL_TIM_IC_CaptureCallback>:
}*/




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e4:	d105      	bne.n	80019f2 <HAL_TIM_IC_CaptureCallback+0x1e>
			//count_tim1+=1;
			counter_M1=(int16_t)__HAL_TIM_GET_COUNTER(htim);//Encoder M1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80019f0:	801a      	strh	r2, [r3, #0]

		}
	if(htim->Instance==TIM3){
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_TIM_IC_CaptureCallback+0x70>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d105      	bne.n	8001a08 <HAL_TIM_IC_CaptureCallback+0x34>
			counter_M2=(int16_t)__HAL_TIM_GET_COUNTER(htim);//Encoder M2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_TIM_IC_CaptureCallback+0x74>)
 8001a06:	801a      	strh	r2, [r3, #0]
		}
	if(htim->Instance==TIM4){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_TIM_IC_CaptureCallback+0x78>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d105      	bne.n	8001a1e <HAL_TIM_IC_CaptureCallback+0x4a>
			counter_M3=(int16_t)__HAL_TIM_GET_COUNTER(htim);//Encoder M3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001a1c:	801a      	strh	r2, [r3, #0]
		}
	if(htim->Instance==TIM5){
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d105      	bne.n	8001a34 <HAL_TIM_IC_CaptureCallback+0x60>
			counter_M4=(int16_t)__HAL_TIM_GET_COUNTER(htim);//Encoder M4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001a32:	801a      	strh	r2, [r3, #0]
		}


}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	20000714 	.word	0x20000714
 8001a44:	40000400 	.word	0x40000400
 8001a48:	20000716 	.word	0x20000716
 8001a4c:	40000800 	.word	0x40000800
 8001a50:	20000718 	.word	0x20000718
 8001a54:	40000c00 	.word	0x40000c00
 8001a58:	2000071a 	.word	0x2000071a

08001a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a60:	f001 ffc4 	bl	80039ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a64:	f000 f8bc 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a68:	f000 fc0e 	bl	8002288 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a6c:	f000 fbb8 	bl	80021e0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001a70:	f000 fa66 	bl	8001f40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a74:	f000 fab8 	bl	8001fe8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a78:	f000 fb0a 	bl	8002090 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001a7c:	f000 fb5c 	bl	8002138 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001a80:	f000 fbd8 	bl	8002234 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001a84:	f000 f918 	bl	8001cb8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001a88:	f00a ffe8 	bl	800ca5c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001a8c:	f000 f994 	bl	8001db8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001a90:	f000 f964 	bl	8001d5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a94:	2100      	movs	r1, #0
 8001a96:	483f      	ldr	r0, [pc, #252]	; (8001b94 <main+0x138>)
 8001a98:	f005 fbca 	bl	8007230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	483d      	ldr	r0, [pc, #244]	; (8001b94 <main+0x138>)
 8001aa0:	f005 fbc6 	bl	8007230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	483b      	ldr	r0, [pc, #236]	; (8001b94 <main+0x138>)
 8001aa8:	f005 fbc2 	bl	8007230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001aac:	210c      	movs	r1, #12
 8001aae:	4839      	ldr	r0, [pc, #228]	; (8001b94 <main+0x138>)
 8001ab0:	f005 fbbe 	bl	8007230 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001ab4:	213c      	movs	r1, #60	; 0x3c
 8001ab6:	4838      	ldr	r0, [pc, #224]	; (8001b98 <main+0x13c>)
 8001ab8:	f005 fd28 	bl	800750c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001abc:	213c      	movs	r1, #60	; 0x3c
 8001abe:	4837      	ldr	r0, [pc, #220]	; (8001b9c <main+0x140>)
 8001ac0:	f005 fd24 	bl	800750c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001ac4:	213c      	movs	r1, #60	; 0x3c
 8001ac6:	4836      	ldr	r0, [pc, #216]	; (8001ba0 <main+0x144>)
 8001ac8:	f005 fd20 	bl	800750c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001acc:	213c      	movs	r1, #60	; 0x3c
 8001ace:	4835      	ldr	r0, [pc, #212]	; (8001ba4 <main+0x148>)
 8001ad0:	f005 fd1c 	bl	800750c <HAL_TIM_Encoder_Start_IT>



  MPU9250_beginAccel(ACC_FULL_SCALE_16_G);
 8001ad4:	2018      	movs	r0, #24
 8001ad6:	f7ff fabf 	bl	8001058 <MPU9250_beginAccel>

  MPU9250_beginGyro(GYRO_FULL_SCALE_2000_DPS);
 8001ada:	2018      	movs	r0, #24
 8001adc:	f7ff fb2a 	bl	8001134 <MPU9250_beginGyro>

  MPU9250_beginMag(MAG_MODE_CONTINUOUS_100HZ);
 8001ae0:	2006      	movs	r0, #6
 8001ae2:	f7ff fdf5 	bl	80016d0 <MPU9250_beginMag>
	  memcpy(&bufferaux,&buffer[intposw+1],sizeof(buffer)); w_in=(float)atof(bufferaux);*/


	  //*buffertest=(uint8_t)x1;

	  info[0]=1.14;
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <main+0x14c>)
 8001ae8:	4a30      	ldr	r2, [pc, #192]	; (8001bac <main+0x150>)
 8001aea:	601a      	str	r2, [r3, #0]
	  info[1]=2.14;
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <main+0x14c>)
 8001aee:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <main+0x154>)
 8001af0:	605a      	str	r2, [r3, #4]
	  info[2]=3.14;
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <main+0x14c>)
 8001af4:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <main+0x158>)
 8001af6:	609a      	str	r2, [r3, #8]
	  //M2=(int16_t)__HAL_TIM_GET_COUNTER(&htim3);//Encoder M2
	  //M3=(int16_t)__HAL_TIM_GET_COUNTER(&htim4);//Encoder M3
	  //M4=(int16_t)__HAL_TIM_GET_COUNTER(&htim5);//Encoder M4


	  MPU9250_accelUpdate();
 8001af8:	f7ff fb8c 	bl	8001214 <MPU9250_accelUpdate>
	  MPU9250_gyroUpdate();
 8001afc:	f7ff fbfa 	bl	80012f4 <MPU9250_gyroUpdate>
	  MPU9250_magUpdate();
 8001b00:	f7ff fdd8 	bl	80016b4 <MPU9250_magUpdate>



	  acc_x=MPU9250_accelX();
 8001b04:	f7ff fbd4 	bl	80012b0 <MPU9250_accelX>
 8001b08:	eef0 7a40 	vmov.f32	s15, s0
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <main+0x15c>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
	  acc_y=MPU9250_accelY();
 8001b12:	f7ff fbd8 	bl	80012c6 <MPU9250_accelY>
 8001b16:	eef0 7a40 	vmov.f32	s15, s0
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <main+0x160>)
 8001b1c:	edc3 7a00 	vstr	s15, [r3]
	  acc_z=MPU9250_accelZ();
 8001b20:	f7ff fbdc 	bl	80012dc <MPU9250_accelZ>
 8001b24:	eef0 7a40 	vmov.f32	s15, s0
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <main+0x164>)
 8001b2a:	edc3 7a00 	vstr	s15, [r3]

	  gyro_x=MPU9250_gyroX();
 8001b2e:	f7ff fc2f 	bl	8001390 <MPU9250_gyroX>
 8001b32:	eef0 7a40 	vmov.f32	s15, s0
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <main+0x168>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]
	  gyro_y=MPU9250_gyroY();
 8001b3c:	f7ff fc33 	bl	80013a6 <MPU9250_gyroY>
 8001b40:	eef0 7a40 	vmov.f32	s15, s0
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <main+0x16c>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]
	  gyro_z=MPU9250_gyroZ();
 8001b4a:	f7ff fc37 	bl	80013bc <MPU9250_gyroZ>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <main+0x170>)
 8001b54:	edc3 7a00 	vstr	s15, [r3]

	  mag_x=MPU9250_magX();
 8001b58:	f7ff fd0e 	bl	8001578 <MPU9250_magX>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <main+0x174>)
 8001b62:	edc3 7a00 	vstr	s15, [r3]
	  mag_y=MPU9250_magY();
 8001b66:	f7ff fd27 	bl	80015b8 <MPU9250_magY>
 8001b6a:	eef0 7a40 	vmov.f32	s15, s0
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <main+0x178>)
 8001b70:	edc3 7a00 	vstr	s15, [r3]
	  mag_z=MPU9250_magZ();
 8001b74:	f7ff fd40 	bl	80015f8 <MPU9250_magZ>
 8001b78:	eef0 7a40 	vmov.f32	s15, s0
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <main+0x17c>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
	  magHoriz=MPU9250_magHorizDirection();
 8001b82:	f7ff fd59 	bl	8001638 <MPU9250_magHorizDirection>
 8001b86:	eef0 7a40 	vmov.f32	s15, s0
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <main+0x180>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
	  info[0]=1.14;
 8001b90:	e7a9      	b.n	8001ae6 <main+0x8a>
 8001b92:	bf00      	nop
 8001b94:	200003f4 	.word	0x200003f4
 8001b98:	2000043c 	.word	0x2000043c
 8001b9c:	20000484 	.word	0x20000484
 8001ba0:	200004cc 	.word	0x200004cc
 8001ba4:	20000514 	.word	0x20000514
 8001ba8:	200005e4 	.word	0x200005e4
 8001bac:	3f91eb85 	.word	0x3f91eb85
 8001bb0:	4008f5c3 	.word	0x4008f5c3
 8001bb4:	4048f5c3 	.word	0x4048f5c3
 8001bb8:	20000798 	.word	0x20000798
 8001bbc:	2000079c 	.word	0x2000079c
 8001bc0:	200007a0 	.word	0x200007a0
 8001bc4:	200007a4 	.word	0x200007a4
 8001bc8:	200007a8 	.word	0x200007a8
 8001bcc:	200007ac 	.word	0x200007ac
 8001bd0:	200007b0 	.word	0x200007b0
 8001bd4:	200007b4 	.word	0x200007b4
 8001bd8:	200007b8 	.word	0x200007b8
 8001bdc:	200007bc 	.word	0x200007bc

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	2234      	movs	r2, #52	; 0x34
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00b fdbe 	bl	800d770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <SystemClock_Config+0xd0>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <SystemClock_Config+0xd4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a22      	ldr	r2, [pc, #136]	; (8001cb4 <SystemClock_Config+0xd4>)
 8001c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <SystemClock_Config+0xd4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c46:	2302      	movs	r3, #2
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c50:	2304      	movs	r3, #4
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c54:	23a8      	movs	r3, #168	; 0xa8
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 ff9b 	bl	8006ba4 <HAL_RCC_OscConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c74:	f000 fd02 	bl	800267c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c78:	230f      	movs	r3, #15
 8001c7a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	2105      	movs	r1, #5
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 f910 	bl	8005ebc <HAL_RCC_ClockConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ca2:	f000 fceb 	bl	800267c <Error_Handler>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3750      	adds	r7, #80	; 0x50
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001ccc:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <MX_ADC1_Init+0x9c>)
 8001cce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <MX_ADC1_Init+0xa0>)
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d1a:	f001 fefd 	bl	8003b18 <HAL_ADC_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d24:	f000 fcaa 	bl	800267c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d3a:	f001 ff31 	bl	8003ba0 <HAL_ADC_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d44:	f000 fc9a 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000358 	.word	0x20000358
 8001d54:	40012000 	.word	0x40012000
 8001d58:	0f000001 	.word	0x0f000001

08001d5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d62:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <MX_I2C1_Init+0x54>)
 8001d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <MX_I2C1_Init+0x58>)
 8001d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_I2C1_Init+0x50>)
 8001d9a:	f002 fc81 	bl	80046a0 <HAL_I2C_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001da4:	f000 fc6a 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200003a0 	.word	0x200003a0
 8001db0:	40005400 	.word	0x40005400
 8001db4:	000186a0 	.word	0x000186a0

08001db8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b096      	sub	sp, #88	; 0x58
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2220      	movs	r2, #32
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00b fcbd 	bl	800d770 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001df8:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <MX_TIM1_Init+0x184>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001dfe:	223b      	movs	r2, #59	; 0x3b
 8001e00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 56000;
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e0a:	f64d 22c0 	movw	r2, #56000	; 0xdac0
 8001e0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e16:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e22:	4845      	ldr	r0, [pc, #276]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e24:	f005 f95c 	bl	80070e0 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e2e:	f000 fc25 	bl	800267c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	483e      	ldr	r0, [pc, #248]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e40:	f005 fddc 	bl	80079fc <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e4a:	f000 fc17 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e4e:	483a      	ldr	r0, [pc, #232]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e50:	f005 f995 	bl	800717e <HAL_TIM_PWM_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e5a:	f000 fc0f 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4832      	ldr	r0, [pc, #200]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001e6e:	f006 f9c5 	bl	80081fc <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e78:	f000 fc00 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e7c:	2360      	movs	r3, #96	; 0x60
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4825      	ldr	r0, [pc, #148]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001ea2:	f005 fce9 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001eac:	f000 fbe6 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481f      	ldr	r0, [pc, #124]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001eba:	f005 fcdd 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001ec4:	f000 fbda 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	2208      	movs	r2, #8
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4819      	ldr	r0, [pc, #100]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001ed2:	f005 fcd1 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001edc:	f000 fbce 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	220c      	movs	r2, #12
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4813      	ldr	r0, [pc, #76]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001eea:	f005 fcc5 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001ef4:	f000 fbc2 	bl	800267c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001f1c:	f006 f9ea 	bl	80082f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001f26:	f000 fba9 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f2a:	4803      	ldr	r0, [pc, #12]	; (8001f38 <MX_TIM1_Init+0x180>)
 8001f2c:	f000 fda8 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 8001f30:	bf00      	nop
 8001f32:	3758      	adds	r7, #88	; 0x58
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200003f4 	.word	0x200003f4
 8001f3c:	40010000 	.word	0x40010000

08001f40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	2224      	movs	r2, #36	; 0x24
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00b fc0e 	bl	800d770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <MX_TIM2_Init+0xa4>)
 8001f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <MX_TIM2_Init+0xa4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <MX_TIM2_Init+0xa4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <MX_TIM2_Init+0xa4>)
 8001f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <MX_TIM2_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <MX_TIM2_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f84:	2303      	movs	r3, #3
 8001f86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	4619      	mov	r1, r3
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <MX_TIM2_Init+0xa4>)
 8001fb0:	f005 fa06 	bl	80073c0 <HAL_TIM_Encoder_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001fba:	f000 fb5f 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <MX_TIM2_Init+0xa4>)
 8001fcc:	f006 f916 	bl	80081fc <HAL_TIMEx_MasterConfigSynchronization>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001fd6:	f000 fb51 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	3730      	adds	r7, #48	; 0x30
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000043c 	.word	0x2000043c

08001fe8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00b fbba 	bl	800d770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <MX_TIM3_Init+0xa0>)
 8002006:	4a21      	ldr	r2, [pc, #132]	; (800208c <MX_TIM3_Init+0xa4>)
 8002008:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <MX_TIM3_Init+0xa0>)
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <MX_TIM3_Init+0xa0>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MX_TIM3_Init+0xa0>)
 8002018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_TIM3_Init+0xa0>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <MX_TIM3_Init+0xa0>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800202a:	2303      	movs	r3, #3
 800202c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002032:	2301      	movs	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002042:	2301      	movs	r3, #1
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	4619      	mov	r1, r3
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <MX_TIM3_Init+0xa0>)
 8002056:	f005 f9b3 	bl	80073c0 <HAL_TIM_Encoder_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002060:	f000 fb0c 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_TIM3_Init+0xa0>)
 8002072:	f006 f8c3 	bl	80081fc <HAL_TIMEx_MasterConfigSynchronization>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800207c:	f000 fafe 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	3730      	adds	r7, #48	; 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000484 	.word	0x20000484
 800208c:	40000400 	.word	0x40000400

08002090 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	2224      	movs	r2, #36	; 0x24
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f00b fb66 	bl	800d770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <MX_TIM4_Init+0xa0>)
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <MX_TIM4_Init+0xa4>)
 80020b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MX_TIM4_Init+0xa0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <MX_TIM4_Init+0xa0>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_TIM4_Init+0xa0>)
 80020c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_TIM4_Init+0xa0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_TIM4_Init+0xa0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020d2:	2303      	movs	r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020da:	2301      	movs	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ea:	2301      	movs	r3, #1
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	4619      	mov	r1, r3
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <MX_TIM4_Init+0xa0>)
 80020fe:	f005 f95f 	bl	80073c0 <HAL_TIM_Encoder_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002108:	f000 fab8 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_TIM4_Init+0xa0>)
 800211a:	f006 f86f 	bl	80081fc <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002124:	f000 faaa 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3730      	adds	r7, #48	; 0x30
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200004cc 	.word	0x200004cc
 8002134:	40000800 	.word	0x40000800

08002138 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	; 0x30
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2224      	movs	r2, #36	; 0x24
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f00b fb12 	bl	800d770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_TIM5_Init+0xa0>)
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <MX_TIM5_Init+0xa4>)
 8002158:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_TIM5_Init+0xa0>)
 800215c:	2200      	movs	r2, #0
 800215e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_TIM5_Init+0xa0>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_TIM5_Init+0xa0>)
 8002168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800216c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_TIM5_Init+0xa0>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_TIM5_Init+0xa0>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800217a:	2303      	movs	r3, #3
 800217c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002192:	2301      	movs	r3, #1
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <MX_TIM5_Init+0xa0>)
 80021a6:	f005 f90b 	bl	80073c0 <HAL_TIM_Encoder_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80021b0:	f000 fa64 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_TIM5_Init+0xa0>)
 80021c2:	f006 f81b 	bl	80081fc <HAL_TIMEx_MasterConfigSynchronization>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80021cc:	f000 fa56 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	3730      	adds	r7, #48	; 0x30
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000514 	.word	0x20000514
 80021dc:	40000c00 	.word	0x40000c00

080021e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_USART3_UART_Init+0x4c>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <MX_USART3_UART_Init+0x50>)
 80021e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <MX_USART3_UART_Init+0x4c>)
 80021ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_USART3_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_USART3_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <MX_USART3_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_USART3_UART_Init+0x4c>)
 8002206:	220c      	movs	r2, #12
 8002208:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MX_USART3_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_USART3_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_USART3_UART_Init+0x4c>)
 8002218:	f006 f8d2 	bl	80083c0 <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002222:	f000 fa2b 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000055c 	.word	0x2000055c
 8002230:	40004800 	.word	0x40004800

08002234 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <MX_USART6_UART_Init+0x50>)
 800223c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 8002240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002244:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 800225a:	220c      	movs	r2, #12
 800225c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_USART6_UART_Init+0x4c>)
 800226c:	f006 f8a8 	bl	80083c0 <HAL_UART_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002276:	f000 fa01 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200005a0 	.word	0x200005a0
 8002284:	40011400 	.word	0x40011400

08002288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	; 0x30
 800228c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	4b48      	ldr	r3, [pc, #288]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a47      	ldr	r2, [pc, #284]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b45      	ldr	r3, [pc, #276]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a40      	ldr	r2, [pc, #256]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a39      	ldr	r2, [pc, #228]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <MX_GPIO_Init+0x13c>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <MX_GPIO_Init+0x13c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <MX_GPIO_Init+0x13c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <MX_GPIO_Init+0x13c>)
 8002318:	f043 0310 	orr.w	r3, r3, #16
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <MX_GPIO_Init+0x13c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <MX_GPIO_Init+0x13c>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <MX_GPIO_Init+0x13c>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <MX_GPIO_Init+0x13c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_GPIO_Init+0x13c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <MX_GPIO_Init+0x13c>)
 8002350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_GPIO_Init+0x13c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2140      	movs	r1, #64	; 0x40
 8002366:	4818      	ldr	r0, [pc, #96]	; (80023c8 <MX_GPIO_Init+0x140>)
 8002368:	f002 f980 	bl	800466c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800236c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002372:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	4812      	ldr	r0, [pc, #72]	; (80023cc <MX_GPIO_Init+0x144>)
 8002384:	f001 ffde 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002388:	2340      	movs	r3, #64	; 0x40
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238c:	2301      	movs	r3, #1
 800238e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	480a      	ldr	r0, [pc, #40]	; (80023c8 <MX_GPIO_Init+0x140>)
 80023a0:	f001 ffd0 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4619      	mov	r1, r3
 80023b6:	4804      	ldr	r0, [pc, #16]	; (80023c8 <MX_GPIO_Init+0x140>)
 80023b8:	f001 ffc4 	bl	8004344 <HAL_GPIO_Init>

}
 80023bc:	bf00      	nop
 80023be:	3730      	adds	r7, #48	; 0x30
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40021800 	.word	0x40021800
 80023cc:	40020800 	.word	0x40020800

080023d0 <build_buffer>:

/* USER CODE BEGIN 4 */

char* build_buffer(float px,float py,float th ,float vx,float vy, float wz){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08e      	sub	sp, #56	; 0x38
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80023da:	edc7 0a04 	vstr	s1, [r7, #16]
 80023de:	ed87 1a03 	vstr	s2, [r7, #12]
 80023e2:	edc7 1a02 	vstr	s3, [r7, #8]
 80023e6:	ed87 2a01 	vstr	s4, [r7, #4]
 80023ea:	edc7 2a00 	vstr	s5, [r7]

	static char sz_buff[80];
	memset(sz_buff,'\0',80);
 80023ee:	2250      	movs	r2, #80	; 0x50
 80023f0:	2100      	movs	r1, #0
 80023f2:	483a      	ldr	r0, [pc, #232]	; (80024dc <build_buffer+0x10c>)
 80023f4:	f00b f9bc 	bl	800d770 <memset>
	char res[20];

	sprintf(res,"px%.6f%s",px,",");
 80023f8:	6978      	ldr	r0, [r7, #20]
 80023fa:	f7fe f8d5 	bl	80005a8 <__aeabi_f2d>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	f107 001c 	add.w	r0, r7, #28
 8002406:	4936      	ldr	r1, [pc, #216]	; (80024e0 <build_buffer+0x110>)
 8002408:	9100      	str	r1, [sp, #0]
 800240a:	4936      	ldr	r1, [pc, #216]	; (80024e4 <build_buffer+0x114>)
 800240c:	f00b fe22 	bl	800e054 <siprintf>
	strcat(sz_buff,res);
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	4831      	ldr	r0, [pc, #196]	; (80024dc <build_buffer+0x10c>)
 8002418:	f00b fe3c 	bl	800e094 <strcat>
	sprintf(res,"py%.6f%s",py,",");
 800241c:	6938      	ldr	r0, [r7, #16]
 800241e:	f7fe f8c3 	bl	80005a8 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	f107 001c 	add.w	r0, r7, #28
 800242a:	492d      	ldr	r1, [pc, #180]	; (80024e0 <build_buffer+0x110>)
 800242c:	9100      	str	r1, [sp, #0]
 800242e:	492e      	ldr	r1, [pc, #184]	; (80024e8 <build_buffer+0x118>)
 8002430:	f00b fe10 	bl	800e054 <siprintf>
	strcat(sz_buff,res);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4828      	ldr	r0, [pc, #160]	; (80024dc <build_buffer+0x10c>)
 800243c:	f00b fe2a 	bl	800e094 <strcat>
	sprintf(res,"th%.6f%s",th,",");
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7fe f8b1 	bl	80005a8 <__aeabi_f2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	f107 001c 	add.w	r0, r7, #28
 800244e:	4924      	ldr	r1, [pc, #144]	; (80024e0 <build_buffer+0x110>)
 8002450:	9100      	str	r1, [sp, #0]
 8002452:	4926      	ldr	r1, [pc, #152]	; (80024ec <build_buffer+0x11c>)
 8002454:	f00b fdfe 	bl	800e054 <siprintf>
	strcat(sz_buff,res);
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	4619      	mov	r1, r3
 800245e:	481f      	ldr	r0, [pc, #124]	; (80024dc <build_buffer+0x10c>)
 8002460:	f00b fe18 	bl	800e094 <strcat>
	sprintf(res,"vx%.6f%s",vx,",");
 8002464:	68b8      	ldr	r0, [r7, #8]
 8002466:	f7fe f89f 	bl	80005a8 <__aeabi_f2d>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	f107 001c 	add.w	r0, r7, #28
 8002472:	491b      	ldr	r1, [pc, #108]	; (80024e0 <build_buffer+0x110>)
 8002474:	9100      	str	r1, [sp, #0]
 8002476:	491e      	ldr	r1, [pc, #120]	; (80024f0 <build_buffer+0x120>)
 8002478:	f00b fdec 	bl	800e054 <siprintf>
	strcat(sz_buff,res);
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	4619      	mov	r1, r3
 8002482:	4816      	ldr	r0, [pc, #88]	; (80024dc <build_buffer+0x10c>)
 8002484:	f00b fe06 	bl	800e094 <strcat>
	sprintf(res,"vy%.6f%s",vy,",");
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7fe f88d 	bl	80005a8 <__aeabi_f2d>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	f107 001c 	add.w	r0, r7, #28
 8002496:	4912      	ldr	r1, [pc, #72]	; (80024e0 <build_buffer+0x110>)
 8002498:	9100      	str	r1, [sp, #0]
 800249a:	4916      	ldr	r1, [pc, #88]	; (80024f4 <build_buffer+0x124>)
 800249c:	f00b fdda 	bl	800e054 <siprintf>
	strcat(sz_buff,res);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	480d      	ldr	r0, [pc, #52]	; (80024dc <build_buffer+0x10c>)
 80024a8:	f00b fdf4 	bl	800e094 <strcat>
	sprintf(res,"wz%.6f%s",wz,"n");
 80024ac:	6838      	ldr	r0, [r7, #0]
 80024ae:	f7fe f87b 	bl	80005a8 <__aeabi_f2d>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	f107 001c 	add.w	r0, r7, #28
 80024ba:	490f      	ldr	r1, [pc, #60]	; (80024f8 <build_buffer+0x128>)
 80024bc:	9100      	str	r1, [sp, #0]
 80024be:	490f      	ldr	r1, [pc, #60]	; (80024fc <build_buffer+0x12c>)
 80024c0:	f00b fdc8 	bl	800e054 <siprintf>
	strcat(sz_buff,res);
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	4619      	mov	r1, r3
 80024ca:	4804      	ldr	r0, [pc, #16]	; (80024dc <build_buffer+0x10c>)
 80024cc:	f00b fde2 	bl	800e094 <strcat>





	return sz_buff;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <build_buffer+0x10c>)
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3730      	adds	r7, #48	; 0x30
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200007c0 	.word	0x200007c0
 80024e0:	080131fc 	.word	0x080131fc
 80024e4:	080131f0 	.word	0x080131f0
 80024e8:	08013200 	.word	0x08013200
 80024ec:	0801320c 	.word	0x0801320c
 80024f0:	08013218 	.word	0x08013218
 80024f4:	08013224 	.word	0x08013224
 80024f8:	0801323c 	.word	0x0801323c
 80024fc:	08013230 	.word	0x08013230

08002500 <setPower>:


void setPower(float power_M1, float power_M2, float power_M3, float power_M4)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	ed87 0a03 	vstr	s0, [r7, #12]
 800250a:	edc7 0a02 	vstr	s1, [r7, #8]
 800250e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002512:	edc7 1a00 	vstr	s3, [r7]
	M1_pwm = map(power_M1,min_speed,max_speed,min_pwm,max_pwm);
 8002516:	4b50      	ldr	r3, [pc, #320]	; (8002658 <setPower+0x158>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	4b4f      	ldr	r3, [pc, #316]	; (800265c <setPower+0x15c>)
 800251e:	ed93 7a00 	vldr	s14, [r3]
 8002522:	4b4f      	ldr	r3, [pc, #316]	; (8002660 <setPower+0x160>)
 8002524:	edd3 6a00 	vldr	s13, [r3]
 8002528:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <setPower+0x164>)
 800252a:	ed93 6a00 	vldr	s12, [r3]
 800252e:	eeb0 2a46 	vmov.f32	s4, s12
 8002532:	eef0 1a66 	vmov.f32	s3, s13
 8002536:	eeb0 1a47 	vmov.f32	s2, s14
 800253a:	eef0 0a67 	vmov.f32	s1, s15
 800253e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002542:	f001 f91f 	bl	8003784 <map>
 8002546:	eef0 7a40 	vmov.f32	s15, s0
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <setPower+0x168>)
 800254c:	edc3 7a00 	vstr	s15, [r3]
	M2_pwm = map(power_M2,min_speed,max_speed,min_pwm,max_pwm);
 8002550:	4b41      	ldr	r3, [pc, #260]	; (8002658 <setPower+0x158>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <setPower+0x15c>)
 8002558:	ed93 7a00 	vldr	s14, [r3]
 800255c:	4b40      	ldr	r3, [pc, #256]	; (8002660 <setPower+0x160>)
 800255e:	edd3 6a00 	vldr	s13, [r3]
 8002562:	4b40      	ldr	r3, [pc, #256]	; (8002664 <setPower+0x164>)
 8002564:	ed93 6a00 	vldr	s12, [r3]
 8002568:	eeb0 2a46 	vmov.f32	s4, s12
 800256c:	eef0 1a66 	vmov.f32	s3, s13
 8002570:	eeb0 1a47 	vmov.f32	s2, s14
 8002574:	eef0 0a67 	vmov.f32	s1, s15
 8002578:	ed97 0a02 	vldr	s0, [r7, #8]
 800257c:	f001 f902 	bl	8003784 <map>
 8002580:	eef0 7a40 	vmov.f32	s15, s0
 8002584:	4b39      	ldr	r3, [pc, #228]	; (800266c <setPower+0x16c>)
 8002586:	edc3 7a00 	vstr	s15, [r3]
	M3_pwm = map(power_M3,min_speed,max_speed,min_pwm,max_pwm);
 800258a:	4b33      	ldr	r3, [pc, #204]	; (8002658 <setPower+0x158>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <setPower+0x15c>)
 8002592:	ed93 7a00 	vldr	s14, [r3]
 8002596:	4b32      	ldr	r3, [pc, #200]	; (8002660 <setPower+0x160>)
 8002598:	edd3 6a00 	vldr	s13, [r3]
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <setPower+0x164>)
 800259e:	ed93 6a00 	vldr	s12, [r3]
 80025a2:	eeb0 2a46 	vmov.f32	s4, s12
 80025a6:	eef0 1a66 	vmov.f32	s3, s13
 80025aa:	eeb0 1a47 	vmov.f32	s2, s14
 80025ae:	eef0 0a67 	vmov.f32	s1, s15
 80025b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80025b6:	f001 f8e5 	bl	8003784 <map>
 80025ba:	eef0 7a40 	vmov.f32	s15, s0
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <setPower+0x170>)
 80025c0:	edc3 7a00 	vstr	s15, [r3]
	M4_pwm = map(power_M4,min_speed,max_speed,min_pwm,max_pwm);
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <setPower+0x158>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <setPower+0x15c>)
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	4b23      	ldr	r3, [pc, #140]	; (8002660 <setPower+0x160>)
 80025d2:	edd3 6a00 	vldr	s13, [r3]
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <setPower+0x164>)
 80025d8:	ed93 6a00 	vldr	s12, [r3]
 80025dc:	eeb0 2a46 	vmov.f32	s4, s12
 80025e0:	eef0 1a66 	vmov.f32	s3, s13
 80025e4:	eeb0 1a47 	vmov.f32	s2, s14
 80025e8:	eef0 0a67 	vmov.f32	s1, s15
 80025ec:	ed97 0a00 	vldr	s0, [r7]
 80025f0:	f001 f8c8 	bl	8003784 <map>
 80025f4:	eef0 7a40 	vmov.f32	s15, s0
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <setPower+0x174>)
 80025fa:	edc3 7a00 	vstr	s15, [r3]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, M1_pwm);
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <setPower+0x168>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <setPower+0x178>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260c:	ee17 2a90 	vmov	r2, s15
 8002610:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, M2_pwm);
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <setPower+0x16c>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <setPower+0x178>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002620:	ee17 2a90 	vmov	r2, s15
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, M3_pwm);
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <setPower+0x170>)
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <setPower+0x178>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002634:	ee17 2a90 	vmov	r2, s15
 8002638:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, M4_pwm);
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <setPower+0x174>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <setPower+0x178>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002648:	ee17 2a90 	vmov	r2, s15
 800264c:	641a      	str	r2, [r3, #64]	; 0x40


}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000001c 	.word	0x2000001c
 800265c:	20000018 	.word	0x20000018
 8002660:	20000020 	.word	0x20000020
 8002664:	20000024 	.word	0x20000024
 8002668:	20000788 	.word	0x20000788
 800266c:	2000078c 	.word	0x2000078c
 8002670:	20000790 	.word	0x20000790
 8002674:	20000794 	.word	0x20000794
 8002678:	200003f4 	.word	0x200003f4

0800267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002684:	e7fe      	b.n	8002684 <Error_Handler+0x8>
	...

08002688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_MspInit+0x4c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_MspInit+0x4c>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_MspInit+0x4c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_MspInit+0x4c>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <HAL_MspInit+0x4c>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_MspInit+0x4c>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a17      	ldr	r2, [pc, #92]	; (8002754 <HAL_ADC_MspInit+0x7c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d127      	bne.n	800274a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_ADC_MspInit+0x80>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_ADC_MspInit+0x80>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_ADC_MspInit+0x80>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_ADC_MspInit+0x80>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_ADC_MspInit+0x80>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_ADC_MspInit+0x80>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002732:	2310      	movs	r3, #16
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002736:	2303      	movs	r3, #3
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	; (800275c <HAL_ADC_MspInit+0x84>)
 8002746:	f001 fdfd 	bl	8004344 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800274a:	bf00      	nop
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012000 	.word	0x40012000
 8002758:	40023800 	.word	0x40023800
 800275c:	40020000 	.word	0x40020000

08002760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_I2C_MspInit+0x84>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d12b      	bne.n	80027da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800279e:	23c0      	movs	r3, #192	; 0xc0
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a2:	2312      	movs	r3, #18
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ae:	2304      	movs	r3, #4
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <HAL_I2C_MspInit+0x8c>)
 80027ba:	f001 fdc3 	bl	8004344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 80027c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_I2C_MspInit+0x88>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40005400 	.word	0x40005400
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020400 	.word	0x40020400

080027f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0b      	ldr	r2, [pc, #44]	; (800282c <HAL_TIM_Base_MspInit+0x3c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10d      	bne.n	800281e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_TIM_Base_MspInit+0x40>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_TIM_Base_MspInit+0x40>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_TIM_Base_MspInit+0x40>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40023800 	.word	0x40023800

08002834 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b090      	sub	sp, #64	; 0x40
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d135      	bne.n	80028c2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
 800285a:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a81      	ldr	r2, [pc, #516]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
 8002876:	4b7b      	ldr	r3, [pc, #492]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a7a      	ldr	r2, [pc, #488]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b78      	ldr	r3, [pc, #480]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800288e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2300      	movs	r3, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028a0:	2301      	movs	r3, #1
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a8:	4619      	mov	r1, r3
 80028aa:	486f      	ldr	r0, [pc, #444]	; (8002a68 <HAL_TIM_Encoder_MspInit+0x234>)
 80028ac:	f001 fd4a 	bl	8004344 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	201c      	movs	r0, #28
 80028b6:	f001 fc7c 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028ba:	201c      	movs	r0, #28
 80028bc:	f001 fc95 	bl	80041ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80028c0:	e0cb      	b.n	8002a5a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <HAL_TIM_Encoder_MspInit+0x238>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d152      	bne.n	8002972 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
 80028d0:	4b64      	ldr	r3, [pc, #400]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80028d6:	f043 0302 	orr.w	r3, r3, #2
 80028da:	6413      	str	r3, [r2, #64]	; 0x40
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a5c      	ldr	r2, [pc, #368]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b5a      	ldr	r3, [pc, #360]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a55      	ldr	r2, [pc, #340]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002920:	23c0      	movs	r3, #192	; 0xc0
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002930:	2302      	movs	r3, #2
 8002932:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002938:	4619      	mov	r1, r3
 800293a:	484d      	ldr	r0, [pc, #308]	; (8002a70 <HAL_TIM_Encoder_MspInit+0x23c>)
 800293c:	f001 fd02 	bl	8004344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002940:	2301      	movs	r3, #1
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002950:	2302      	movs	r3, #2
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002958:	4619      	mov	r1, r3
 800295a:	4843      	ldr	r0, [pc, #268]	; (8002a68 <HAL_TIM_Encoder_MspInit+0x234>)
 800295c:	f001 fcf2 	bl	8004344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	201d      	movs	r0, #29
 8002966:	f001 fc24 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800296a:	201d      	movs	r0, #29
 800296c:	f001 fc3d 	bl	80041ea <HAL_NVIC_EnableIRQ>
}
 8002970:	e073      	b.n	8002a5a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM4)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a3f      	ldr	r2, [pc, #252]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x240>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d135      	bne.n	80029e8 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a37      	ldr	r2, [pc, #220]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
 800298c:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80029a2:	f043 0308 	orr.w	r3, r3, #8
 80029a6:	6313      	str	r3, [r2, #48]	; 0x30
 80029a8:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80029b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	2300      	movs	r3, #0
 80029c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029c6:	2302      	movs	r3, #2
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ce:	4619      	mov	r1, r3
 80029d0:	4829      	ldr	r0, [pc, #164]	; (8002a78 <HAL_TIM_Encoder_MspInit+0x244>)
 80029d2:	f001 fcb7 	bl	8004344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	201e      	movs	r0, #30
 80029dc:	f001 fbe9 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029e0:	201e      	movs	r0, #30
 80029e2:	f001 fc02 	bl	80041ea <HAL_NVIC_EnableIRQ>
}
 80029e6:	e038      	b.n	8002a5a <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM5)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <HAL_TIM_Encoder_MspInit+0x248>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d133      	bne.n	8002a5a <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 80029fc:	f043 0308 	orr.w	r3, r3, #8
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_TIM_Encoder_MspInit+0x230>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a42:	4619      	mov	r1, r3
 8002a44:	480a      	ldr	r0, [pc, #40]	; (8002a70 <HAL_TIM_Encoder_MspInit+0x23c>)
 8002a46:	f001 fc7d 	bl	8004344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2032      	movs	r0, #50	; 0x32
 8002a50:	f001 fbaf 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a54:	2032      	movs	r0, #50	; 0x32
 8002a56:	f001 fbc8 	bl	80041ea <HAL_NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3740      	adds	r7, #64	; 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40000c00 	.word	0x40000c00

08002a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_TIM_MspPostInit+0x68>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d11e      	bne.n	8002ae0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002aac:	f043 0310 	orr.w	r3, r3, #16
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002abe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002ac2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_TIM_MspPostInit+0x70>)
 8002adc:	f001 fc32 	bl	8004344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <HAL_UART_MspInit+0xfc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12d      	bne.n	8002b72 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a35      	ldr	r2, [pc, #212]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b3c:	f043 0308 	orr.w	r3, r3, #8
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002b4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b60:	2307      	movs	r3, #7
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4823      	ldr	r0, [pc, #140]	; (8002bf8 <HAL_UART_MspInit+0x104>)
 8002b6c:	f001 fbea 	bl	8004344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b70:	e039      	b.n	8002be6 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_UART_MspInit+0x108>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d134      	bne.n	8002be6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b86:	f043 0320 	orr.w	r3, r3, #32
 8002b8a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_UART_MspInit+0x100>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002bb4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	4619      	mov	r1, r3
 8002bd0:	480b      	ldr	r0, [pc, #44]	; (8002c00 <HAL_UART_MspInit+0x10c>)
 8002bd2:	f001 fbb7 	bl	8004344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2047      	movs	r0, #71	; 0x47
 8002bdc:	f001 fae9 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002be0:	2047      	movs	r0, #71	; 0x47
 8002be2:	f001 fb02 	bl	80041ea <HAL_NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3730      	adds	r7, #48	; 0x30
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40004800 	.word	0x40004800
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40011400 	.word	0x40011400
 8002c00:	40021800 	.word	0x40021800

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <NMI_Handler+0x4>

08002c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <HardFault_Handler+0x4>

08002c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <MemManage_Handler+0x4>

08002c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <BusFault_Handler+0x4>

08002c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <UsageFault_Handler+0x4>

08002c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <SysTick_Handler+0x8c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <SysTick_Handler+0x8c>)
 8002c58:	6013      	str	r3, [r2, #0]
	if(indx==sampling_time){
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <SysTick_Handler+0x8c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <SysTick_Handler+0x90>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	d12c      	bne.n	8002cd0 <SysTick_Handler+0x84>
		vel_ang_M4=((wheel_ang_pos_M4-old_wheel_ang_pos_M4)/(sampling_time/1000));
		old_wheel_ang_pos_M4=wheel_ang_pos_M4;*/



		odometryUpdater(counter_M1,counter_M2,counter_M3,counter_M4);
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <SysTick_Handler+0x94>)
 8002c78:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <SysTick_Handler+0x98>)
 8002c7e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <SysTick_Handler+0x9c>)
 8002c84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <SysTick_Handler+0xa0>)
 8002c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c8e:	f000 f873 	bl	8002d78 <odometryUpdater>
	    __HAL_TIM_SET_COUNTER(&htim2,0);
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <SysTick_Handler+0xa4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2200      	movs	r2, #0
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <SysTick_Handler+0xa8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SET_COUNTER(&htim4,0);
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <SysTick_Handler+0xac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SET_COUNTER(&htim5,0);
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <SysTick_Handler+0xb0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
	    counter_M1=0; counter_M2=0; counter_M3=0; counter_M4=0;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <SysTick_Handler+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	801a      	strh	r2, [r3, #0]
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <SysTick_Handler+0x98>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <SysTick_Handler+0x9c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <SysTick_Handler+0xa0>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	801a      	strh	r2, [r3, #0]

		//setSpeed(-1.55,0.0); //w(+)L wheels back R wheels forw.(turn right)//w(-)L wheels forw. R wheels back.(turn left)
		//out_map=map(5, 0, 10, 0, 100);
		indx=0;
 8002cca:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <SysTick_Handler+0x8c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd0:	f000 fede 	bl	8003a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000810 	.word	0x20000810
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	20000714 	.word	0x20000714
 8002ce4:	20000716 	.word	0x20000716
 8002ce8:	20000718 	.word	0x20000718
 8002cec:	2000071a 	.word	0x2000071a
 8002cf0:	2000043c 	.word	0x2000043c
 8002cf4:	20000484 	.word	0x20000484
 8002cf8:	200004cc 	.word	0x200004cc
 8002cfc:	20000514 	.word	0x20000514

08002d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <TIM2_IRQHandler+0x10>)
 8002d06:	f004 fcaf 	bl	8007668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000043c 	.word	0x2000043c

08002d14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <TIM3_IRQHandler+0x10>)
 8002d1a:	f004 fca5 	bl	8007668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000484 	.word	0x20000484

08002d28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <TIM4_IRQHandler+0x10>)
 8002d2e:	f004 fc9b 	bl	8007668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200004cc 	.word	0x200004cc

08002d3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <TIM5_IRQHandler+0x10>)
 8002d42:	f004 fc91 	bl	8007668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000514 	.word	0x20000514

08002d50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <OTG_FS_IRQHandler+0x10>)
 8002d56:	f001 ff3e 	bl	8004bd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20001cfc 	.word	0x20001cfc

08002d64 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <USART6_IRQHandler+0x10>)
 8002d6a:	f005 fb77 	bl	800845c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	200005a0 	.word	0x200005a0

08002d78 <odometryUpdater>:

/* USER CODE BEGIN 1 */

void odometryUpdater(int16_t enc_FL, int16_t enc_FR, int16_t enc_RR, int16_t enc_RL)
{
 8002d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4604      	mov	r4, r0
 8002d82:	4608      	mov	r0, r1
 8002d84:	4611      	mov	r1, r2
 8002d86:	461a      	mov	r2, r3
 8002d88:	4623      	mov	r3, r4
 8002d8a:	80fb      	strh	r3, [r7, #6]
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	80bb      	strh	r3, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	807b      	strh	r3, [r7, #2]
 8002d94:	4613      	mov	r3, r2
 8002d96:	803b      	strh	r3, [r7, #0]

    wheel_FL_ang_pos = 2 * 3.14 * enc_FL / enc_res;
 8002d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fbf1 	bl	8000584 <__aeabi_i2d>
 8002da2:	a3d3      	add	r3, pc, #844	; (adr r3, 80030f0 <odometryUpdater+0x378>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f7fd fc56 	bl	8000658 <__aeabi_dmul>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4614      	mov	r4, r2
 8002db2:	461d      	mov	r5, r3
 8002db4:	4bd0      	ldr	r3, [pc, #832]	; (80030f8 <odometryUpdater+0x380>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fbf5 	bl	80005a8 <__aeabi_f2d>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fd71 	bl	80008ac <__aeabi_ddiv>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd ff39 	bl	8000c48 <__aeabi_d2f>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4ac8      	ldr	r2, [pc, #800]	; (80030fc <odometryUpdater+0x384>)
 8002dda:	6013      	str	r3, [r2, #0]
    wheel_FR_ang_pos = 2 * 3.14 * enc_FR / enc_res;
 8002ddc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fbcf 	bl	8000584 <__aeabi_i2d>
 8002de6:	a3c2      	add	r3, pc, #776	; (adr r3, 80030f0 <odometryUpdater+0x378>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f7fd fc34 	bl	8000658 <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4614      	mov	r4, r2
 8002df6:	461d      	mov	r5, r3
 8002df8:	4bbf      	ldr	r3, [pc, #764]	; (80030f8 <odometryUpdater+0x380>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd fbd3 	bl	80005a8 <__aeabi_f2d>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4620      	mov	r0, r4
 8002e08:	4629      	mov	r1, r5
 8002e0a:	f7fd fd4f 	bl	80008ac <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f7fd ff17 	bl	8000c48 <__aeabi_d2f>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4ab8      	ldr	r2, [pc, #736]	; (8003100 <odometryUpdater+0x388>)
 8002e1e:	6013      	str	r3, [r2, #0]
    wheel_RL_ang_pos = 2 * 3.14 * enc_RL / enc_res;
 8002e20:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fbad 	bl	8000584 <__aeabi_i2d>
 8002e2a:	a3b1      	add	r3, pc, #708	; (adr r3, 80030f0 <odometryUpdater+0x378>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f7fd fc12 	bl	8000658 <__aeabi_dmul>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4614      	mov	r4, r2
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	4bae      	ldr	r3, [pc, #696]	; (80030f8 <odometryUpdater+0x380>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd fbb1 	bl	80005a8 <__aeabi_f2d>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	f7fd fd2d 	bl	80008ac <__aeabi_ddiv>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f7fd fef5 	bl	8000c48 <__aeabi_d2f>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4aa8      	ldr	r2, [pc, #672]	; (8003104 <odometryUpdater+0x38c>)
 8002e62:	6013      	str	r3, [r2, #0]
    wheel_RR_ang_pos = 2 * 3.14 * enc_RR / enc_res;
 8002e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb8b 	bl	8000584 <__aeabi_i2d>
 8002e6e:	a3a0      	add	r3, pc, #640	; (adr r3, 80030f0 <odometryUpdater+0x378>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbf0 	bl	8000658 <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	461d      	mov	r5, r3
 8002e80:	4b9d      	ldr	r3, [pc, #628]	; (80030f8 <odometryUpdater+0x380>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fb8f 	bl	80005a8 <__aeabi_f2d>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7fd fd0b 	bl	80008ac <__aeabi_ddiv>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd fed3 	bl	8000c48 <__aeabi_d2f>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4a98      	ldr	r2, [pc, #608]	; (8003108 <odometryUpdater+0x390>)
 8002ea6:	6013      	str	r3, [r2, #0]




    enc_L = (enc_FL + enc_RL) / (2 * tyre_deflection);
 8002ea8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002eac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eba:	4b94      	ldr	r3, [pc, #592]	; (800310c <odometryUpdater+0x394>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ec8:	4b91      	ldr	r3, [pc, #580]	; (8003110 <odometryUpdater+0x398>)
 8002eca:	edc3 7a00 	vstr	s15, [r3]
    enc_R = (enc_FR + enc_RR) / (2 * tyre_deflection);
 8002ece:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ed2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	ee07 3a90 	vmov	s15, r3
 8002edc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ee0:	4b8a      	ldr	r3, [pc, #552]	; (800310c <odometryUpdater+0x394>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eee:	4b89      	ldr	r3, [pc, #548]	; (8003114 <odometryUpdater+0x39c>)
 8002ef0:	edc3 7a00 	vstr	s15, [r3]

    wheel_L_ang_vel = ((2 * 3.14 * enc_L / enc_res)) / (sampling_time/1000);
 8002ef4:	4b86      	ldr	r3, [pc, #536]	; (8003110 <odometryUpdater+0x398>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fb55 	bl	80005a8 <__aeabi_f2d>
 8002efe:	a37c      	add	r3, pc, #496	; (adr r3, 80030f0 <odometryUpdater+0x378>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fba8 	bl	8000658 <__aeabi_dmul>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	461d      	mov	r5, r3
 8002f10:	4b79      	ldr	r3, [pc, #484]	; (80030f8 <odometryUpdater+0x380>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fb47 	bl	80005a8 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd fcc3 	bl	80008ac <__aeabi_ddiv>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	4b7a      	ldr	r3, [pc, #488]	; (8003118 <odometryUpdater+0x3a0>)
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800311c <odometryUpdater+0x3a4>
 8002f38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f3c:	ee16 0a90 	vmov	r0, s13
 8002f40:	f7fd fb32 	bl	80005a8 <__aeabi_f2d>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f7fd fcae 	bl	80008ac <__aeabi_ddiv>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fe76 	bl	8000c48 <__aeabi_d2f>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a70      	ldr	r2, [pc, #448]	; (8003120 <odometryUpdater+0x3a8>)
 8002f60:	6013      	str	r3, [r2, #0]
    wheel_R_ang_vel = ((2 * 3.14 * enc_R / enc_res)) / (sampling_time/1000);
 8002f62:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <odometryUpdater+0x39c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fb1e 	bl	80005a8 <__aeabi_f2d>
 8002f6c:	a360      	add	r3, pc, #384	; (adr r3, 80030f0 <odometryUpdater+0x378>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd fb71 	bl	8000658 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4614      	mov	r4, r2
 8002f7c:	461d      	mov	r5, r3
 8002f7e:	4b5e      	ldr	r3, [pc, #376]	; (80030f8 <odometryUpdater+0x380>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fb10 	bl	80005a8 <__aeabi_f2d>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	4629      	mov	r1, r5
 8002f90:	f7fd fc8c 	bl	80008ac <__aeabi_ddiv>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4614      	mov	r4, r2
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <odometryUpdater+0x3a0>)
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800311c <odometryUpdater+0x3a4>
 8002fa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002faa:	ee16 0a90 	vmov	r0, s13
 8002fae:	f7fd fafb 	bl	80005a8 <__aeabi_f2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	4629      	mov	r1, r5
 8002fba:	f7fd fc77 	bl	80008ac <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f7fd fe3f 	bl	8000c48 <__aeabi_d2f>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4a55      	ldr	r2, [pc, #340]	; (8003124 <odometryUpdater+0x3ac>)
 8002fce:	6013      	str	r3, [r2, #0]

    wheel_L_ang_pos = wheel_L_ang_pos+(2 * 3.14 * enc_L / enc_res);
 8002fd0:	4b55      	ldr	r3, [pc, #340]	; (8003128 <odometryUpdater+0x3b0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fae7 	bl	80005a8 <__aeabi_f2d>
 8002fda:	4604      	mov	r4, r0
 8002fdc:	460d      	mov	r5, r1
 8002fde:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <odometryUpdater+0x398>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fae0 	bl	80005a8 <__aeabi_f2d>
 8002fe8:	a341      	add	r3, pc, #260	; (adr r3, 80030f0 <odometryUpdater+0x378>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd fb33 	bl	8000658 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4690      	mov	r8, r2
 8002ff8:	4699      	mov	r9, r3
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <odometryUpdater+0x380>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fad2 	bl	80005a8 <__aeabi_f2d>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4640      	mov	r0, r8
 800300a:	4649      	mov	r1, r9
 800300c:	f7fd fc4e 	bl	80008ac <__aeabi_ddiv>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4620      	mov	r0, r4
 8003016:	4629      	mov	r1, r5
 8003018:	f7fd f968 	bl	80002ec <__adddf3>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f7fd fe10 	bl	8000c48 <__aeabi_d2f>
 8003028:	4603      	mov	r3, r0
 800302a:	4a3f      	ldr	r2, [pc, #252]	; (8003128 <odometryUpdater+0x3b0>)
 800302c:	6013      	str	r3, [r2, #0]
    wheel_R_ang_pos = wheel_R_ang_pos+(2 * 3.14 * enc_R / enc_res);
 800302e:	4b3f      	ldr	r3, [pc, #252]	; (800312c <odometryUpdater+0x3b4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fab8 	bl	80005a8 <__aeabi_f2d>
 8003038:	4604      	mov	r4, r0
 800303a:	460d      	mov	r5, r1
 800303c:	4b35      	ldr	r3, [pc, #212]	; (8003114 <odometryUpdater+0x39c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fab1 	bl	80005a8 <__aeabi_f2d>
 8003046:	a32a      	add	r3, pc, #168	; (adr r3, 80030f0 <odometryUpdater+0x378>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd fb04 	bl	8000658 <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4690      	mov	r8, r2
 8003056:	4699      	mov	r9, r3
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <odometryUpdater+0x380>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd faa3 	bl	80005a8 <__aeabi_f2d>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4640      	mov	r0, r8
 8003068:	4649      	mov	r1, r9
 800306a:	f7fd fc1f 	bl	80008ac <__aeabi_ddiv>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4620      	mov	r0, r4
 8003074:	4629      	mov	r1, r5
 8003076:	f7fd f939 	bl	80002ec <__adddf3>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	f7fd fde1 	bl	8000c48 <__aeabi_d2f>
 8003086:	4603      	mov	r3, r0
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <odometryUpdater+0x3b4>)
 800308a:	6013      	str	r3, [r2, #0]

    robot_angular_vel = (((wheel_R_ang_pos - wheel_L_ang_pos) * wheel_radius / (robot_width * diameter_mod)) - robot_angular_pos) / (sampling_time/1000);
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <odometryUpdater+0x3b4>)
 800308e:	ed93 7a00 	vldr	s14, [r3]
 8003092:	4b25      	ldr	r3, [pc, #148]	; (8003128 <odometryUpdater+0x3b0>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	ee37 7a67 	vsub.f32	s14, s14, s15
 800309c:	4b24      	ldr	r3, [pc, #144]	; (8003130 <odometryUpdater+0x3b8>)
 800309e:	edd3 7a00 	vldr	s15, [r3]
 80030a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <odometryUpdater+0x3bc>)
 80030a8:	ed93 7a00 	vldr	s14, [r3]
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <odometryUpdater+0x3c0>)
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <odometryUpdater+0x3c4>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <odometryUpdater+0x3a0>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800311c <odometryUpdater+0x3a4>
 80030ce:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80030d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <odometryUpdater+0x3c8>)
 80030d8:	edc3 7a00 	vstr	s15, [r3]
    //robot_angular_pos=(robot_angular_pos+(robot_angular_vel*(sampling_time/1000)))*(180/3.14);
    robot_angular_pos = (wheel_R_ang_pos - wheel_L_ang_pos) * wheel_radius / (robot_width * diameter_mod);
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <odometryUpdater+0x3b4>)
 80030de:	ed93 7a00 	vldr	s14, [r3]
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <odometryUpdater+0x3b0>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030ec:	e02a      	b.n	8003144 <odometryUpdater+0x3cc>
 80030ee:	bf00      	nop
 80030f0:	51eb851f 	.word	0x51eb851f
 80030f4:	40191eb8 	.word	0x40191eb8
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000758 	.word	0x20000758
 8003100:	2000075c 	.word	0x2000075c
 8003104:	20000760 	.word	0x20000760
 8003108:	20000764 	.word	0x20000764
 800310c:	20000008 	.word	0x20000008
 8003110:	20000768 	.word	0x20000768
 8003114:	2000076c 	.word	0x2000076c
 8003118:	20000004 	.word	0x20000004
 800311c:	447a0000 	.word	0x447a0000
 8003120:	20000748 	.word	0x20000748
 8003124:	2000074c 	.word	0x2000074c
 8003128:	20000750 	.word	0x20000750
 800312c:	20000754 	.word	0x20000754
 8003130:	2000000c 	.word	0x2000000c
 8003134:	20000010 	.word	0x20000010
 8003138:	20000014 	.word	0x20000014
 800313c:	20000774 	.word	0x20000774
 8003140:	20000770 	.word	0x20000770
 8003144:	4b6e      	ldr	r3, [pc, #440]	; (8003300 <odometryUpdater+0x588>)
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800314e:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <odometryUpdater+0x58c>)
 8003150:	ed93 7a00 	vldr	s14, [r3]
 8003154:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <odometryUpdater+0x590>)
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800315e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <odometryUpdater+0x594>)
 8003164:	edc3 7a00 	vstr	s15, [r3]
    robot_x_vel = (wheel_L_ang_vel * wheel_radius + robot_angular_vel * robot_width / 2) * cos(robot_angular_pos);
 8003168:	4b69      	ldr	r3, [pc, #420]	; (8003310 <odometryUpdater+0x598>)
 800316a:	ed93 7a00 	vldr	s14, [r3]
 800316e:	4b64      	ldr	r3, [pc, #400]	; (8003300 <odometryUpdater+0x588>)
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003178:	4b66      	ldr	r3, [pc, #408]	; (8003314 <odometryUpdater+0x59c>)
 800317a:	edd3 6a00 	vldr	s13, [r3]
 800317e:	4b61      	ldr	r3, [pc, #388]	; (8003304 <odometryUpdater+0x58c>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003188:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800318c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	ee17 0a90 	vmov	r0, s15
 8003198:	f7fd fa06 	bl	80005a8 <__aeabi_f2d>
 800319c:	4604      	mov	r4, r0
 800319e:	460d      	mov	r5, r1
 80031a0:	4b5a      	ldr	r3, [pc, #360]	; (800330c <odometryUpdater+0x594>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f9ff 	bl	80005a8 <__aeabi_f2d>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	ec43 2b10 	vmov	d0, r2, r3
 80031b2:	f00e fccd 	bl	8011b50 <cos>
 80031b6:	ec53 2b10 	vmov	r2, r3, d0
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	f7fd fa4b 	bl	8000658 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	f7fd fd3d 	bl	8000c48 <__aeabi_d2f>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a51      	ldr	r2, [pc, #324]	; (8003318 <odometryUpdater+0x5a0>)
 80031d2:	6013      	str	r3, [r2, #0]
    robot_y_vel = (wheel_L_ang_vel * wheel_radius + robot_angular_vel * robot_width / 2) * sin(robot_angular_pos);
 80031d4:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <odometryUpdater+0x598>)
 80031d6:	ed93 7a00 	vldr	s14, [r3]
 80031da:	4b49      	ldr	r3, [pc, #292]	; (8003300 <odometryUpdater+0x588>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e4:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <odometryUpdater+0x59c>)
 80031e6:	edd3 6a00 	vldr	s13, [r3]
 80031ea:	4b46      	ldr	r3, [pc, #280]	; (8003304 <odometryUpdater+0x58c>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031f4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80031f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003200:	ee17 0a90 	vmov	r0, s15
 8003204:	f7fd f9d0 	bl	80005a8 <__aeabi_f2d>
 8003208:	4604      	mov	r4, r0
 800320a:	460d      	mov	r5, r1
 800320c:	4b3f      	ldr	r3, [pc, #252]	; (800330c <odometryUpdater+0x594>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f9c9 	bl	80005a8 <__aeabi_f2d>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	ec43 2b10 	vmov	d0, r2, r3
 800321e:	f00e fceb 	bl	8011bf8 <sin>
 8003222:	ec53 2b10 	vmov	r2, r3, d0
 8003226:	4620      	mov	r0, r4
 8003228:	4629      	mov	r1, r5
 800322a:	f7fd fa15 	bl	8000658 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	f7fd fd07 	bl	8000c48 <__aeabi_d2f>
 800323a:	4603      	mov	r3, r0
 800323c:	4a37      	ldr	r2, [pc, #220]	; (800331c <odometryUpdater+0x5a4>)
 800323e:	6013      	str	r3, [r2, #0]
    robot_x_pos = robot_x_pos + robot_x_vel * (sampling_time/1000);
 8003240:	4b37      	ldr	r3, [pc, #220]	; (8003320 <odometryUpdater+0x5a8>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003324 <odometryUpdater+0x5ac>
 800324a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800324e:	4b32      	ldr	r3, [pc, #200]	; (8003318 <odometryUpdater+0x5a0>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <odometryUpdater+0x5b0>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <odometryUpdater+0x5b0>)
 8003264:	edc3 7a00 	vstr	s15, [r3]
    robot_y_pos = robot_y_pos + robot_y_vel * (sampling_time/1000);
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <odometryUpdater+0x5a8>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003324 <odometryUpdater+0x5ac>
 8003272:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <odometryUpdater+0x5a4>)
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <odometryUpdater+0x5b4>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328a:	4b28      	ldr	r3, [pc, #160]	; (800332c <odometryUpdater+0x5b4>)
 800328c:	edc3 7a00 	vstr	s15, [r3]
    //char sz1[64];
    //strcpy(sztxt,);

    //sz1=build_buffer(robot_x_pos,robot_y_pos,robot_angular_pos,robot_x_vel,robot_y_vel,robot_angular_vel,txt_resolution);

    memset(buffer_txt,'\0',80);
 8003290:	2250      	movs	r2, #80	; 0x50
 8003292:	2100      	movs	r1, #0
 8003294:	4826      	ldr	r0, [pc, #152]	; (8003330 <odometryUpdater+0x5b8>)
 8003296:	f00a fa6b 	bl	800d770 <memset>
    char *sztxt;
    sztxt=build_buffer(robot_x_pos,robot_y_pos,robot_angular_pos,robot_x_vel,robot_y_vel,robot_angular_vel);
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <odometryUpdater+0x5b0>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <odometryUpdater+0x5b4>)
 80032a2:	ed93 7a00 	vldr	s14, [r3]
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <odometryUpdater+0x594>)
 80032a8:	edd3 6a00 	vldr	s13, [r3]
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <odometryUpdater+0x5a0>)
 80032ae:	ed93 6a00 	vldr	s12, [r3]
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <odometryUpdater+0x5a4>)
 80032b4:	edd3 5a00 	vldr	s11, [r3]
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <odometryUpdater+0x59c>)
 80032ba:	ed93 5a00 	vldr	s10, [r3]
 80032be:	eef0 2a45 	vmov.f32	s5, s10
 80032c2:	eeb0 2a65 	vmov.f32	s4, s11
 80032c6:	eef0 1a46 	vmov.f32	s3, s12
 80032ca:	eeb0 1a66 	vmov.f32	s2, s13
 80032ce:	eef0 0a47 	vmov.f32	s1, s14
 80032d2:	eeb0 0a67 	vmov.f32	s0, s15
 80032d6:	f7ff f87b 	bl	80023d0 <build_buffer>
 80032da:	60f8      	str	r0, [r7, #12]
    strcpy(buffer_txt,sztxt);
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	4814      	ldr	r0, [pc, #80]	; (8003330 <odometryUpdater+0x5b8>)
 80032e0:	f00a fee7 	bl	800e0b2 <strcpy>
    CDC_Transmit_FS((uint8_t *) buffer_txt, strlen (buffer_txt));
 80032e4:	4812      	ldr	r0, [pc, #72]	; (8003330 <odometryUpdater+0x5b8>)
 80032e6:	f7fc ff9d 	bl	8000224 <strlen>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4619      	mov	r1, r3
 80032ee:	4810      	ldr	r0, [pc, #64]	; (8003330 <odometryUpdater+0x5b8>)
 80032f0:	f009 fd22 	bl	800cd38 <CDC_Transmit_FS>





}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032fe:	bf00      	nop
 8003300:	2000000c 	.word	0x2000000c
 8003304:	20000010 	.word	0x20000010
 8003308:	20000014 	.word	0x20000014
 800330c:	20000774 	.word	0x20000774
 8003310:	20000748 	.word	0x20000748
 8003314:	20000770 	.word	0x20000770
 8003318:	20000778 	.word	0x20000778
 800331c:	2000077c 	.word	0x2000077c
 8003320:	20000004 	.word	0x20000004
 8003324:	447a0000 	.word	0x447a0000
 8003328:	20000780 	.word	0x20000780
 800332c:	20000784 	.word	0x20000784
 8003330:	200005f0 	.word	0x200005f0
 8003334:	00000000 	.word	0x00000000

08003338 <setSpeed>:

void setSpeed(float linear, float angular)
{
 8003338:	b5b0      	push	{r4, r5, r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003342:	edc7 0a00 	vstr	s1, [r7]
    lin = linear;
 8003346:	4abe      	ldr	r2, [pc, #760]	; (8003640 <setSpeed+0x308>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6013      	str	r3, [r2, #0]
    ang = angular;
 800334c:	4abd      	ldr	r2, [pc, #756]	; (8003644 <setSpeed+0x30c>)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6013      	str	r3, [r2, #0]
    if(fabs(lin)>1.5386) 	lin=(linear/fabs(linear))*1.5386;
 8003352:	4bbb      	ldr	r3, [pc, #748]	; (8003640 <setSpeed+0x308>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	eef0 7ae7 	vabs.f32	s15, s15
 800335c:	ee17 0a90 	vmov	r0, s15
 8003360:	f7fd f922 	bl	80005a8 <__aeabi_f2d>
 8003364:	a3b0      	add	r3, pc, #704	; (adr r3, 8003628 <setSpeed+0x2f0>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f7fd fc05 	bl	8000b78 <__aeabi_dcmpgt>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d024      	beq.n	80033be <setSpeed+0x86>
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fd f917 	bl	80005a8 <__aeabi_f2d>
 800337a:	4604      	mov	r4, r0
 800337c:	460d      	mov	r5, r1
 800337e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003382:	eef0 7ae7 	vabs.f32	s15, s15
 8003386:	ee17 0a90 	vmov	r0, s15
 800338a:	f7fd f90d 	bl	80005a8 <__aeabi_f2d>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4620      	mov	r0, r4
 8003394:	4629      	mov	r1, r5
 8003396:	f7fd fa89 	bl	80008ac <__aeabi_ddiv>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	a3a1      	add	r3, pc, #644	; (adr r3, 8003628 <setSpeed+0x2f0>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fd f956 	bl	8000658 <__aeabi_dmul>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f7fd fc48 	bl	8000c48 <__aeabi_d2f>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4aa1      	ldr	r2, [pc, #644]	; (8003640 <setSpeed+0x308>)
 80033bc:	6013      	str	r3, [r2, #0]
    if(fabs(ang)>14.65) 	ang=(angular/fabs(angular))*14.65;
 80033be:	4ba1      	ldr	r3, [pc, #644]	; (8003644 <setSpeed+0x30c>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	eef0 7ae7 	vabs.f32	s15, s15
 80033c8:	ee17 0a90 	vmov	r0, s15
 80033cc:	f7fd f8ec 	bl	80005a8 <__aeabi_f2d>
 80033d0:	a397      	add	r3, pc, #604	; (adr r3, 8003630 <setSpeed+0x2f8>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f7fd fbcf 	bl	8000b78 <__aeabi_dcmpgt>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d024      	beq.n	800342a <setSpeed+0xf2>
 80033e0:	6838      	ldr	r0, [r7, #0]
 80033e2:	f7fd f8e1 	bl	80005a8 <__aeabi_f2d>
 80033e6:	4604      	mov	r4, r0
 80033e8:	460d      	mov	r5, r1
 80033ea:	edd7 7a00 	vldr	s15, [r7]
 80033ee:	eef0 7ae7 	vabs.f32	s15, s15
 80033f2:	ee17 0a90 	vmov	r0, s15
 80033f6:	f7fd f8d7 	bl	80005a8 <__aeabi_f2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4620      	mov	r0, r4
 8003400:	4629      	mov	r1, r5
 8003402:	f7fd fa53 	bl	80008ac <__aeabi_ddiv>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	a388      	add	r3, pc, #544	; (adr r3, 8003630 <setSpeed+0x2f8>)
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f7fd f920 	bl	8000658 <__aeabi_dmul>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f7fd fc12 	bl	8000c48 <__aeabi_d2f>
 8003424:	4603      	mov	r3, r0
 8003426:	4a87      	ldr	r2, [pc, #540]	; (8003644 <setSpeed+0x30c>)
 8003428:	6013      	str	r3, [r2, #0]

    L_wheel_lin_speed = lin - (ang * robot_width / 2);
 800342a:	4b85      	ldr	r3, [pc, #532]	; (8003640 <setSpeed+0x308>)
 800342c:	ed93 7a00 	vldr	s14, [r3]
 8003430:	4b84      	ldr	r3, [pc, #528]	; (8003644 <setSpeed+0x30c>)
 8003432:	edd3 6a00 	vldr	s13, [r3]
 8003436:	4b84      	ldr	r3, [pc, #528]	; (8003648 <setSpeed+0x310>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003440:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003444:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344c:	4b7f      	ldr	r3, [pc, #508]	; (800364c <setSpeed+0x314>)
 800344e:	edc3 7a00 	vstr	s15, [r3]
    R_wheel_lin_speed = lin + (ang * robot_width / 2);
 8003452:	4b7c      	ldr	r3, [pc, #496]	; (8003644 <setSpeed+0x30c>)
 8003454:	ed93 7a00 	vldr	s14, [r3]
 8003458:	4b7b      	ldr	r3, [pc, #492]	; (8003648 <setSpeed+0x310>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003466:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800346a:	4b75      	ldr	r3, [pc, #468]	; (8003640 <setSpeed+0x308>)
 800346c:	edd3 7a00 	vldr	s15, [r3]
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	4b76      	ldr	r3, [pc, #472]	; (8003650 <setSpeed+0x318>)
 8003476:	edc3 7a00 	vstr	s15, [r3]
    L_wheel_angular_velocity = L_wheel_lin_speed / wheel_radius;
 800347a:	4b74      	ldr	r3, [pc, #464]	; (800364c <setSpeed+0x314>)
 800347c:	edd3 6a00 	vldr	s13, [r3]
 8003480:	4b74      	ldr	r3, [pc, #464]	; (8003654 <setSpeed+0x31c>)
 8003482:	ed93 7a00 	vldr	s14, [r3]
 8003486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800348a:	4b73      	ldr	r3, [pc, #460]	; (8003658 <setSpeed+0x320>)
 800348c:	edc3 7a00 	vstr	s15, [r3]
    R_wheel_angular_velocity = R_wheel_lin_speed / wheel_radius;
 8003490:	4b6f      	ldr	r3, [pc, #444]	; (8003650 <setSpeed+0x318>)
 8003492:	edd3 6a00 	vldr	s13, [r3]
 8003496:	4b6f      	ldr	r3, [pc, #444]	; (8003654 <setSpeed+0x31c>)
 8003498:	ed93 7a00 	vldr	s14, [r3]
 800349c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a0:	4b6e      	ldr	r3, [pc, #440]	; (800365c <setSpeed+0x324>)
 80034a2:	edc3 7a00 	vstr	s15, [r3]
    L_enc_speed = enc_res * L_wheel_angular_velocity / (2 * M_PI);
 80034a6:	4b6e      	ldr	r3, [pc, #440]	; (8003660 <setSpeed+0x328>)
 80034a8:	ed93 7a00 	vldr	s14, [r3]
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <setSpeed+0x320>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	ee17 0a90 	vmov	r0, s15
 80034ba:	f7fd f875 	bl	80005a8 <__aeabi_f2d>
 80034be:	a35e      	add	r3, pc, #376	; (adr r3, 8003638 <setSpeed+0x300>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fd f9f2 	bl	80008ac <__aeabi_ddiv>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd fbba 	bl	8000c48 <__aeabi_d2f>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4a63      	ldr	r2, [pc, #396]	; (8003664 <setSpeed+0x32c>)
 80034d8:	6013      	str	r3, [r2, #0]
    R_enc_speed = enc_res * R_wheel_angular_velocity / (2 * M_PI);
 80034da:	4b61      	ldr	r3, [pc, #388]	; (8003660 <setSpeed+0x328>)
 80034dc:	ed93 7a00 	vldr	s14, [r3]
 80034e0:	4b5e      	ldr	r3, [pc, #376]	; (800365c <setSpeed+0x324>)
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ea:	ee17 0a90 	vmov	r0, s15
 80034ee:	f7fd f85b 	bl	80005a8 <__aeabi_f2d>
 80034f2:	a351      	add	r3, pc, #324	; (adr r3, 8003638 <setSpeed+0x300>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fd f9d8 	bl	80008ac <__aeabi_ddiv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	f7fd fba0 	bl	8000c48 <__aeabi_d2f>
 8003508:	4603      	mov	r3, r0
 800350a:	4a57      	ldr	r2, [pc, #348]	; (8003668 <setSpeed+0x330>)
 800350c:	6013      	str	r3, [r2, #0]


    if(abs(L_enc_speed)>max_speed || abs(R_enc_speed)>max_speed)
 800350e:	4b55      	ldr	r3, [pc, #340]	; (8003664 <setSpeed+0x32c>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003518:	ee17 3a90 	vmov	r3, s15
 800351c:	2b00      	cmp	r3, #0
 800351e:	bfb8      	it	lt
 8003520:	425b      	neglt	r3, r3
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800352a:	4b50      	ldr	r3, [pc, #320]	; (800366c <setSpeed+0x334>)
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003538:	dc16      	bgt.n	8003568 <setSpeed+0x230>
 800353a:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <setSpeed+0x330>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003544:	ee17 3a90 	vmov	r3, s15
 8003548:	2b00      	cmp	r3, #0
 800354a:	bfb8      	it	lt
 800354c:	425b      	neglt	r3, r3
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003556:	4b45      	ldr	r3, [pc, #276]	; (800366c <setSpeed+0x334>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	f340 80e7 	ble.w	8003736 <setSpeed+0x3fe>
    {
    	if(abs(R_enc_speed)>abs(L_enc_speed))
 8003568:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <setSpeed+0x330>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003572:	ee17 3a90 	vmov	r3, s15
 8003576:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800357a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800357e:	4b39      	ldr	r3, [pc, #228]	; (8003664 <setSpeed+0x32c>)
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003588:	ee17 3a90 	vmov	r3, s15
 800358c:	2b00      	cmp	r3, #0
 800358e:	bfb8      	it	lt
 8003590:	425b      	neglt	r3, r3
 8003592:	429a      	cmp	r2, r3
 8003594:	dd72      	ble.n	800367c <setSpeed+0x344>
    	{
    		rot_radio= fabs(R_enc_speed/max_speed);
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <setSpeed+0x330>)
 8003598:	edd3 6a00 	vldr	s13, [r3]
 800359c:	4b33      	ldr	r3, [pc, #204]	; (800366c <setSpeed+0x334>)
 800359e:	ed93 7a00 	vldr	s14, [r3]
 80035a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a6:	eef0 7ae7 	vabs.f32	s15, s15
 80035aa:	4b31      	ldr	r3, [pc, #196]	; (8003670 <setSpeed+0x338>)
 80035ac:	edc3 7a00 	vstr	s15, [r3]
    		new_R_enc_speed=(R_enc_speed/fabs(R_enc_speed))*max_speed;  //(R_enc_speed/fabs(R_enc_speed)) is to get the sign of the original command
 80035b0:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <setSpeed+0x330>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc fff7 	bl	80005a8 <__aeabi_f2d>
 80035ba:	4604      	mov	r4, r0
 80035bc:	460d      	mov	r5, r1
 80035be:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <setSpeed+0x330>)
 80035c0:	edd3 7a00 	vldr	s15, [r3]
 80035c4:	eef0 7ae7 	vabs.f32	s15, s15
 80035c8:	ee17 0a90 	vmov	r0, s15
 80035cc:	f7fc ffec 	bl	80005a8 <__aeabi_f2d>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4620      	mov	r0, r4
 80035d6:	4629      	mov	r1, r5
 80035d8:	f7fd f968 	bl	80008ac <__aeabi_ddiv>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4614      	mov	r4, r2
 80035e2:	461d      	mov	r5, r3
 80035e4:	4b21      	ldr	r3, [pc, #132]	; (800366c <setSpeed+0x334>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ffdd 	bl	80005a8 <__aeabi_f2d>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fd f82f 	bl	8000658 <__aeabi_dmul>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	f7fd fb21 	bl	8000c48 <__aeabi_d2f>
 8003606:	4603      	mov	r3, r0
 8003608:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <setSpeed+0x33c>)
 800360a:	6013      	str	r3, [r2, #0]
    		new_L_enc_speed=L_enc_speed/rot_radio;
 800360c:	4b15      	ldr	r3, [pc, #84]	; (8003664 <setSpeed+0x32c>)
 800360e:	edd3 6a00 	vldr	s13, [r3]
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <setSpeed+0x338>)
 8003614:	ed93 7a00 	vldr	s14, [r3]
 8003618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361c:	4b16      	ldr	r3, [pc, #88]	; (8003678 <setSpeed+0x340>)
 800361e:	edc3 7a00 	vstr	s15, [r3]
 8003622:	e071      	b.n	8003708 <setSpeed+0x3d0>
 8003624:	f3af 8000 	nop.w
 8003628:	089a0275 	.word	0x089a0275
 800362c:	3ff89e1b 	.word	0x3ff89e1b
 8003630:	cccccccd 	.word	0xcccccccd
 8003634:	402d4ccc 	.word	0x402d4ccc
 8003638:	54442d18 	.word	0x54442d18
 800363c:	401921fb 	.word	0x401921fb
 8003640:	2000071c 	.word	0x2000071c
 8003644:	20000720 	.word	0x20000720
 8003648:	20000010 	.word	0x20000010
 800364c:	20000724 	.word	0x20000724
 8003650:	20000728 	.word	0x20000728
 8003654:	2000000c 	.word	0x2000000c
 8003658:	2000072c 	.word	0x2000072c
 800365c:	20000730 	.word	0x20000730
 8003660:	20000000 	.word	0x20000000
 8003664:	20000734 	.word	0x20000734
 8003668:	20000738 	.word	0x20000738
 800366c:	20000018 	.word	0x20000018
 8003670:	2000073c 	.word	0x2000073c
 8003674:	20000744 	.word	0x20000744
 8003678:	20000740 	.word	0x20000740
    	}else{
    		rot_radio= fabs(L_enc_speed/max_speed);
 800367c:	4b3b      	ldr	r3, [pc, #236]	; (800376c <setSpeed+0x434>)
 800367e:	edd3 6a00 	vldr	s13, [r3]
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <setSpeed+0x438>)
 8003684:	ed93 7a00 	vldr	s14, [r3]
 8003688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800368c:	eef0 7ae7 	vabs.f32	s15, s15
 8003690:	4b38      	ldr	r3, [pc, #224]	; (8003774 <setSpeed+0x43c>)
 8003692:	edc3 7a00 	vstr	s15, [r3]
    		new_L_enc_speed=(R_enc_speed/fabs(R_enc_speed))*max_speed;
 8003696:	4b38      	ldr	r3, [pc, #224]	; (8003778 <setSpeed+0x440>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff84 	bl	80005a8 <__aeabi_f2d>
 80036a0:	4604      	mov	r4, r0
 80036a2:	460d      	mov	r5, r1
 80036a4:	4b34      	ldr	r3, [pc, #208]	; (8003778 <setSpeed+0x440>)
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	eef0 7ae7 	vabs.f32	s15, s15
 80036ae:	ee17 0a90 	vmov	r0, s15
 80036b2:	f7fc ff79 	bl	80005a8 <__aeabi_f2d>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4620      	mov	r0, r4
 80036bc:	4629      	mov	r1, r5
 80036be:	f7fd f8f5 	bl	80008ac <__aeabi_ddiv>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4614      	mov	r4, r2
 80036c8:	461d      	mov	r5, r3
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <setSpeed+0x438>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fc ff6a 	bl	80005a8 <__aeabi_f2d>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4620      	mov	r0, r4
 80036da:	4629      	mov	r1, r5
 80036dc:	f7fc ffbc 	bl	8000658 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7fd faae 	bl	8000c48 <__aeabi_d2f>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4a23      	ldr	r2, [pc, #140]	; (800377c <setSpeed+0x444>)
 80036f0:	6013      	str	r3, [r2, #0]
    		new_R_enc_speed=R_enc_speed/rot_radio;
 80036f2:	4b21      	ldr	r3, [pc, #132]	; (8003778 <setSpeed+0x440>)
 80036f4:	edd3 6a00 	vldr	s13, [r3]
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <setSpeed+0x43c>)
 80036fa:	ed93 7a00 	vldr	s14, [r3]
 80036fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <setSpeed+0x448>)
 8003704:	edc3 7a00 	vstr	s15, [r3]
    	}
    	setPower(new_L_enc_speed, new_R_enc_speed, new_R_enc_speed, new_L_enc_speed);  //M1-M2-M3-M4
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <setSpeed+0x444>)
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <setSpeed+0x448>)
 8003710:	ed93 7a00 	vldr	s14, [r3]
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <setSpeed+0x448>)
 8003716:	edd3 6a00 	vldr	s13, [r3]
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <setSpeed+0x444>)
 800371c:	ed93 6a00 	vldr	s12, [r3]
 8003720:	eef0 1a46 	vmov.f32	s3, s12
 8003724:	eeb0 1a66 	vmov.f32	s2, s13
 8003728:	eef0 0a47 	vmov.f32	s1, s14
 800372c:	eeb0 0a67 	vmov.f32	s0, s15
 8003730:	f7fe fee6 	bl	8002500 <setPower>
 8003734:	e016      	b.n	8003764 <setSpeed+0x42c>
    }else
    {
    	setPower(L_enc_speed, R_enc_speed, R_enc_speed, L_enc_speed);  //M1-M2-M3-M4
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <setSpeed+0x434>)
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <setSpeed+0x440>)
 800373e:	ed93 7a00 	vldr	s14, [r3]
 8003742:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <setSpeed+0x440>)
 8003744:	edd3 6a00 	vldr	s13, [r3]
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <setSpeed+0x434>)
 800374a:	ed93 6a00 	vldr	s12, [r3]
 800374e:	eef0 1a46 	vmov.f32	s3, s12
 8003752:	eeb0 1a66 	vmov.f32	s2, s13
 8003756:	eef0 0a47 	vmov.f32	s1, s14
 800375a:	eeb0 0a67 	vmov.f32	s0, s15
 800375e:	f7fe fecf 	bl	8002500 <setPower>
    }



}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bdb0      	pop	{r4, r5, r7, pc}
 800376c:	20000734 	.word	0x20000734
 8003770:	20000018 	.word	0x20000018
 8003774:	2000073c 	.word	0x2000073c
 8003778:	20000738 	.word	0x20000738
 800377c:	20000740 	.word	0x20000740
 8003780:	20000744 	.word	0x20000744

08003784 <map>:



float map(float value, float in_low, float in_high, float out_low, float out_high)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	; 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	ed87 0a05 	vstr	s0, [r7, #20]
 800378e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003792:	ed87 1a03 	vstr	s2, [r7, #12]
 8003796:	edc7 1a02 	vstr	s3, [r7, #8]
 800379a:	ed87 2a01 	vstr	s4, [r7, #4]
    float outgoing = out_low + (out_high - out_low) * ((value - in_low) / (in_high - in_low));
 800379e:	ed97 7a01 	vldr	s14, [r7, #4]
 80037a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80037ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80037b2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80037b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80037ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80037be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80037c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80037c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80037ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d2:	edc7 7a07 	vstr	s15, [r7, #28]
    return outgoing;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	ee07 3a90 	vmov	s15, r3
  }
 80037dc:	eeb0 0a67 	vmov.f32	s0, s15
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
	return 1;
 80037ee:	2301      	movs	r3, #1
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <_kill>:

int _kill(int pid, int sig)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003804:	f009 ff7c 	bl	800d700 <__errno>
 8003808:	4603      	mov	r3, r0
 800380a:	2216      	movs	r2, #22
 800380c:	601a      	str	r2, [r3, #0]
	return -1;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <_exit>:

void _exit (int status)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003822:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ffe7 	bl	80037fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800382c:	e7fe      	b.n	800382c <_exit+0x12>

0800382e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e00a      	b.n	8003856 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003840:	f3af 8000 	nop.w
 8003844:	4601      	mov	r1, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	60ba      	str	r2, [r7, #8]
 800384c:	b2ca      	uxtb	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	dbf0      	blt.n	8003840 <_read+0x12>
	}

return len;
 800385e:	687b      	ldr	r3, [r7, #4]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e009      	b.n	800388e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	60ba      	str	r2, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3301      	adds	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	dbf1      	blt.n	800387a <_write+0x12>
	}
	return len;
 8003896:	687b      	ldr	r3, [r7, #4]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_close>:

int _close(int file)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	return -1;
 80038a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038c8:	605a      	str	r2, [r3, #4]
	return 0;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <_isatty>:

int _isatty(int file)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	return 1;
 80038e0:	2301      	movs	r3, #1
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
	return 0;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003910:	4a14      	ldr	r2, [pc, #80]	; (8003964 <_sbrk+0x5c>)
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <_sbrk+0x60>)
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800391c:	4b13      	ldr	r3, [pc, #76]	; (800396c <_sbrk+0x64>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <_sbrk+0x64>)
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <_sbrk+0x68>)
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <_sbrk+0x64>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	429a      	cmp	r2, r3
 8003936:	d207      	bcs.n	8003948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003938:	f009 fee2 	bl	800d700 <__errno>
 800393c:	4603      	mov	r3, r0
 800393e:	220c      	movs	r2, #12
 8003940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003946:	e009      	b.n	800395c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <_sbrk+0x64>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	4a05      	ldr	r2, [pc, #20]	; (800396c <_sbrk+0x64>)
 8003958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20020000 	.word	0x20020000
 8003968:	00000400 	.word	0x00000400
 800396c:	20000814 	.word	0x20000814
 8003970:	20002438 	.word	0x20002438

08003974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <SystemInit+0x20>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	4a05      	ldr	r2, [pc, #20]	; (8003994 <SystemInit+0x20>)
 8003980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800399c:	480d      	ldr	r0, [pc, #52]	; (80039d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800399e:	490e      	ldr	r1, [pc, #56]	; (80039d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a4:	e002      	b.n	80039ac <LoopCopyDataInit>

080039a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039aa:	3304      	adds	r3, #4

080039ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039b0:	d3f9      	bcc.n	80039a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039b4:	4c0b      	ldr	r4, [pc, #44]	; (80039e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b8:	e001      	b.n	80039be <LoopFillZerobss>

080039ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039bc:	3204      	adds	r2, #4

080039be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039c0:	d3fb      	bcc.n	80039ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039c2:	f7ff ffd7 	bl	8003974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039c6:	f009 fea1 	bl	800d70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ca:	f7fe f847 	bl	8001a5c <main>
  bx  lr    
 80039ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039d8:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80039dc:	080139a0 	.word	0x080139a0
  ldr r2, =_sbss
 80039e0:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80039e4:	20002438 	.word	0x20002438

080039e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039e8:	e7fe      	b.n	80039e8 <ADC_IRQHandler>
	...

080039ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_Init+0x40>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <HAL_Init+0x40>)
 80039f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_Init+0x40>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <HAL_Init+0x40>)
 8003a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <HAL_Init+0x40>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a14:	2003      	movs	r0, #3
 8003a16:	f000 fbc1 	bl	800419c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f000 f808 	bl	8003a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a20:	f7fe fe32 	bl	8002688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00

08003a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_InitTick+0x54>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_InitTick+0x58>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fbd9 	bl	8004206 <HAL_SYSTICK_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00e      	b.n	8003a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d80a      	bhi.n	8003a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a64:	2200      	movs	r2, #0
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a6c:	f000 fba1 	bl	80041b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a70:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <HAL_InitTick+0x5c>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000028 	.word	0x20000028
 8003a88:	20000030 	.word	0x20000030
 8003a8c:	2000002c 	.word	0x2000002c

08003a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_IncTick+0x20>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x24>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <HAL_IncTick+0x24>)
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000030 	.word	0x20000030
 8003ab4:	20000818 	.word	0x20000818

08003ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return uwTick;
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_GetTick+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000818 	.word	0x20000818

08003ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ad8:	f7ff ffee 	bl	8003ab8 <HAL_GetTick>
 8003adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae8:	d005      	beq.n	8003af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_Delay+0x44>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003af6:	bf00      	nop
 8003af8:	f7ff ffde 	bl	8003ab8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d8f7      	bhi.n	8003af8 <HAL_Delay+0x28>
  {
  }
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000030 	.word	0x20000030

08003b18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e033      	b.n	8003b96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe fdce 	bl	80026d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b5e:	f023 0302 	bic.w	r3, r3, #2
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f94a 	bl	8003e04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
 8003b86:	e001      	b.n	8003b8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x1c>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e113      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x244>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	d925      	bls.n	8003c18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68d9      	ldr	r1, [r3, #12]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	3b1e      	subs	r3, #30
 8003be2:	2207      	movs	r2, #7
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43da      	mvns	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	400a      	ands	r2, r1
 8003bf0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68d9      	ldr	r1, [r3, #12]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4403      	add	r3, r0
 8003c0a:	3b1e      	subs	r3, #30
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	e022      	b.n	8003c5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6919      	ldr	r1, [r3, #16]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43da      	mvns	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	400a      	ands	r2, r1
 8003c3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6919      	ldr	r1, [r3, #16]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4403      	add	r3, r0
 8003c54:	409a      	lsls	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d824      	bhi.n	8003cb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	3b05      	subs	r3, #5
 8003c78:	221f      	movs	r2, #31
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	400a      	ands	r2, r1
 8003c86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4618      	mov	r0, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3b05      	subs	r3, #5
 8003ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
 8003cae:	e04c      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d824      	bhi.n	8003d02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b23      	subs	r3, #35	; 0x23
 8003cca:	221f      	movs	r2, #31
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3b23      	subs	r3, #35	; 0x23
 8003cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8003d00:	e023      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	3b41      	subs	r3, #65	; 0x41
 8003d14:	221f      	movs	r2, #31
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	400a      	ands	r2, r1
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4618      	mov	r0, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3b41      	subs	r3, #65	; 0x41
 8003d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <HAL_ADC_ConfigChannel+0x250>)
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a28      	ldr	r2, [pc, #160]	; (8003df4 <HAL_ADC_ConfigChannel+0x254>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10f      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x1d8>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b12      	cmp	r3, #18
 8003d5e:	d10b      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_ADC_ConfigChannel+0x254>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12b      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x23a>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_ADC_ConfigChannel+0x258>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x1f4>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b11      	cmp	r3, #17
 8003d92:	d122      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <HAL_ADC_ConfigChannel+0x258>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d111      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_ADC_ConfigChannel+0x25c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <HAL_ADC_ConfigChannel+0x260>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	0c9a      	lsrs	r2, r3, #18
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dcc:	e002      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f9      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40012300 	.word	0x40012300
 8003df4:	40012000 	.word	0x40012000
 8003df8:	10000012 	.word	0x10000012
 8003dfc:	20000028 	.word	0x20000028
 8003e00:	431bde83 	.word	0x431bde83

08003e04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e0c:	4b79      	ldr	r3, [pc, #484]	; (8003ff4 <ADC_Init+0x1f0>)
 8003e0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6899      	ldr	r1, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	4a58      	ldr	r2, [pc, #352]	; (8003ff8 <ADC_Init+0x1f4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d022      	beq.n	8003ee2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	e00f      	b.n	8003f02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ef0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0202 	bic.w	r2, r2, #2
 8003f10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7e1b      	ldrb	r3, [r3, #24]
 8003f1c:	005a      	lsls	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01b      	beq.n	8003f68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	035a      	lsls	r2, r3, #13
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	e007      	b.n	8003f78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	051a      	lsls	r2, r3, #20
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6899      	ldr	r1, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fba:	025a      	lsls	r2, r3, #9
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6899      	ldr	r1, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	029a      	lsls	r2, r3, #10
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	609a      	str	r2, [r3, #8]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40012300 	.word	0x40012300
 8003ff8:	0f000001 	.word	0x0f000001

08003ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402e:	4a04      	ldr	r2, [pc, #16]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60d3      	str	r3, [r2, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <__NVIC_GetPriorityGrouping+0x18>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 0307 	and.w	r3, r3, #7
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db0b      	blt.n	800408a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4907      	ldr	r1, [pc, #28]	; (8004098 <__NVIC_EnableIRQ+0x38>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2001      	movs	r0, #1
 8004082:	fa00 f202 	lsl.w	r2, r0, r2
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000e100 	.word	0xe000e100

0800409c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	db0a      	blt.n	80040c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	490c      	ldr	r1, [pc, #48]	; (80040e8 <__NVIC_SetPriority+0x4c>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	440b      	add	r3, r1
 80040c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c4:	e00a      	b.n	80040dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <__NVIC_SetPriority+0x50>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	3b04      	subs	r3, #4
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	440b      	add	r3, r1
 80040da:	761a      	strb	r2, [r3, #24]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000e100 	.word	0xe000e100
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f1c3 0307 	rsb	r3, r3, #7
 800410a:	2b04      	cmp	r3, #4
 800410c:	bf28      	it	cs
 800410e:	2304      	movcs	r3, #4
 8004110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3304      	adds	r3, #4
 8004116:	2b06      	cmp	r3, #6
 8004118:	d902      	bls.n	8004120 <NVIC_EncodePriority+0x30>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3b03      	subs	r3, #3
 800411e:	e000      	b.n	8004122 <NVIC_EncodePriority+0x32>
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	401a      	ands	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	43d9      	mvns	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	4313      	orrs	r3, r2
         );
}
 800414a:	4618      	mov	r0, r3
 800414c:	3724      	adds	r7, #36	; 0x24
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3b01      	subs	r3, #1
 8004164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004168:	d301      	bcc.n	800416e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800416a:	2301      	movs	r3, #1
 800416c:	e00f      	b.n	800418e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <SysTick_Config+0x40>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3b01      	subs	r3, #1
 8004174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004176:	210f      	movs	r1, #15
 8004178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800417c:	f7ff ff8e 	bl	800409c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <SysTick_Config+0x40>)
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004186:	4b04      	ldr	r3, [pc, #16]	; (8004198 <SysTick_Config+0x40>)
 8004188:	2207      	movs	r2, #7
 800418a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	e000e010 	.word	0xe000e010

0800419c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff29 	bl	8003ffc <__NVIC_SetPriorityGrouping>
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041c4:	f7ff ff3e 	bl	8004044 <__NVIC_GetPriorityGrouping>
 80041c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	f7ff ff8e 	bl	80040f0 <NVIC_EncodePriority>
 80041d4:	4602      	mov	r2, r0
 80041d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff ff5d 	bl	800409c <__NVIC_SetPriority>
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	4603      	mov	r3, r0
 80041f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ff31 	bl	8004060 <__NVIC_EnableIRQ>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ffa2 	bl	8004158 <SysTick_Config>
 8004214:	4603      	mov	r3, r0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800422c:	f7ff fc44 	bl	8003ab8 <HAL_GetTick>
 8004230:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d008      	beq.n	8004250 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2280      	movs	r2, #128	; 0x80
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e052      	b.n	80042f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0216 	bic.w	r2, r2, #22
 800425e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800426e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <HAL_DMA_Abort+0x62>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0208 	bic.w	r2, r2, #8
 800428e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a0:	e013      	b.n	80042ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042a2:	f7ff fc09 	bl	8003ab8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d90c      	bls.n	80042ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2203      	movs	r2, #3
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e015      	b.n	80042f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e4      	bne.n	80042a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	223f      	movs	r2, #63	; 0x3f
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d004      	beq.n	800431c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e00c      	b.n	8004336 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2205      	movs	r2, #5
 8004320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	; 0x24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	e165      	b.n	800462c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004360:	2201      	movs	r2, #1
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	429a      	cmp	r2, r3
 800437a:	f040 8154 	bne.w	8004626 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b01      	cmp	r3, #1
 8004388:	d005      	beq.n	8004396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004392:	2b02      	cmp	r3, #2
 8004394:	d130      	bne.n	80043f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	2203      	movs	r2, #3
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043cc:	2201      	movs	r2, #1
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 0201 	and.w	r2, r3, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b03      	cmp	r3, #3
 8004402:	d017      	beq.n	8004434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	2203      	movs	r2, #3
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d123      	bne.n	8004488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	08da      	lsrs	r2, r3, #3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3208      	adds	r2, #8
 8004448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	220f      	movs	r2, #15
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	08da      	lsrs	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3208      	adds	r2, #8
 8004482:	69b9      	ldr	r1, [r7, #24]
 8004484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0203 	and.w	r2, r3, #3
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80ae 	beq.w	8004626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <HAL_GPIO_Init+0x300>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	4a5c      	ldr	r2, [pc, #368]	; (8004644 <HAL_GPIO_Init+0x300>)
 80044d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d8:	6453      	str	r3, [r2, #68]	; 0x44
 80044da:	4b5a      	ldr	r3, [pc, #360]	; (8004644 <HAL_GPIO_Init+0x300>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044e6:	4a58      	ldr	r2, [pc, #352]	; (8004648 <HAL_GPIO_Init+0x304>)
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	089b      	lsrs	r3, r3, #2
 80044ec:	3302      	adds	r3, #2
 80044ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	220f      	movs	r2, #15
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4f      	ldr	r2, [pc, #316]	; (800464c <HAL_GPIO_Init+0x308>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d025      	beq.n	800455e <HAL_GPIO_Init+0x21a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4e      	ldr	r2, [pc, #312]	; (8004650 <HAL_GPIO_Init+0x30c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01f      	beq.n	800455a <HAL_GPIO_Init+0x216>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4d      	ldr	r2, [pc, #308]	; (8004654 <HAL_GPIO_Init+0x310>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d019      	beq.n	8004556 <HAL_GPIO_Init+0x212>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4c      	ldr	r2, [pc, #304]	; (8004658 <HAL_GPIO_Init+0x314>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_GPIO_Init+0x20e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4b      	ldr	r2, [pc, #300]	; (800465c <HAL_GPIO_Init+0x318>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00d      	beq.n	800454e <HAL_GPIO_Init+0x20a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4a      	ldr	r2, [pc, #296]	; (8004660 <HAL_GPIO_Init+0x31c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <HAL_GPIO_Init+0x206>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a49      	ldr	r2, [pc, #292]	; (8004664 <HAL_GPIO_Init+0x320>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <HAL_GPIO_Init+0x202>
 8004542:	2306      	movs	r3, #6
 8004544:	e00c      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 8004546:	2307      	movs	r3, #7
 8004548:	e00a      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 800454a:	2305      	movs	r3, #5
 800454c:	e008      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 800454e:	2304      	movs	r3, #4
 8004550:	e006      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 8004552:	2303      	movs	r3, #3
 8004554:	e004      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 8004556:	2302      	movs	r3, #2
 8004558:	e002      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 800455e:	2300      	movs	r3, #0
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	f002 0203 	and.w	r2, r2, #3
 8004566:	0092      	lsls	r2, r2, #2
 8004568:	4093      	lsls	r3, r2
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004570:	4935      	ldr	r1, [pc, #212]	; (8004648 <HAL_GPIO_Init+0x304>)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	089b      	lsrs	r3, r3, #2
 8004576:	3302      	adds	r3, #2
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_GPIO_Init+0x324>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045a2:	4a31      	ldr	r2, [pc, #196]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a8:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045cc:	4a26      	ldr	r2, [pc, #152]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045d2:	4b25      	ldr	r3, [pc, #148]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045fc:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004620:	4a11      	ldr	r2, [pc, #68]	; (8004668 <HAL_GPIO_Init+0x324>)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3301      	adds	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	f67f ae96 	bls.w	8004360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3724      	adds	r7, #36	; 0x24
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	40013800 	.word	0x40013800
 800464c:	40020000 	.word	0x40020000
 8004650:	40020400 	.word	0x40020400
 8004654:	40020800 	.word	0x40020800
 8004658:	40020c00 	.word	0x40020c00
 800465c:	40021000 	.word	0x40021000
 8004660:	40021400 	.word	0x40021400
 8004664:	40021800 	.word	0x40021800
 8004668:	40013c00 	.word	0x40013c00

0800466c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
 8004678:	4613      	mov	r3, r2
 800467a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800467c:	787b      	ldrb	r3, [r7, #1]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004688:	e003      	b.n	8004692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800468a:	887b      	ldrh	r3, [r7, #2]
 800468c:	041a      	lsls	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	619a      	str	r2, [r3, #24]
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e12b      	b.n	800490a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fe f84a 	bl	8002760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2224      	movs	r2, #36	; 0x24
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004704:	f001 fccc 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8004708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4a81      	ldr	r2, [pc, #516]	; (8004914 <HAL_I2C_Init+0x274>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d807      	bhi.n	8004724 <HAL_I2C_Init+0x84>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a80      	ldr	r2, [pc, #512]	; (8004918 <HAL_I2C_Init+0x278>)
 8004718:	4293      	cmp	r3, r2
 800471a:	bf94      	ite	ls
 800471c:	2301      	movls	r3, #1
 800471e:	2300      	movhi	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e006      	b.n	8004732 <HAL_I2C_Init+0x92>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a7d      	ldr	r2, [pc, #500]	; (800491c <HAL_I2C_Init+0x27c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	bf94      	ite	ls
 800472c:	2301      	movls	r3, #1
 800472e:	2300      	movhi	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0e7      	b.n	800490a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a78      	ldr	r2, [pc, #480]	; (8004920 <HAL_I2C_Init+0x280>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	0c9b      	lsrs	r3, r3, #18
 8004744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <HAL_I2C_Init+0x274>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d802      	bhi.n	8004774 <HAL_I2C_Init+0xd4>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3301      	adds	r3, #1
 8004772:	e009      	b.n	8004788 <HAL_I2C_Init+0xe8>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	4a69      	ldr	r2, [pc, #420]	; (8004924 <HAL_I2C_Init+0x284>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	3301      	adds	r3, #1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	430b      	orrs	r3, r1
 800478e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800479a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	495c      	ldr	r1, [pc, #368]	; (8004914 <HAL_I2C_Init+0x274>)
 80047a4:	428b      	cmp	r3, r1
 80047a6:	d819      	bhi.n	80047dc <HAL_I2C_Init+0x13c>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e59      	subs	r1, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b6:	1c59      	adds	r1, r3, #1
 80047b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047bc:	400b      	ands	r3, r1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_I2C_Init+0x138>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1e59      	subs	r1, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d0:	3301      	adds	r3, #1
 80047d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d6:	e051      	b.n	800487c <HAL_I2C_Init+0x1dc>
 80047d8:	2304      	movs	r3, #4
 80047da:	e04f      	b.n	800487c <HAL_I2C_Init+0x1dc>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d111      	bne.n	8004808 <HAL_I2C_Init+0x168>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e58      	subs	r0, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	440b      	add	r3, r1
 80047f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e012      	b.n	800482e <HAL_I2C_Init+0x18e>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1e58      	subs	r0, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	0099      	lsls	r1, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	fbb0 f3f3 	udiv	r3, r0, r3
 800481e:	3301      	adds	r3, #1
 8004820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_Init+0x196>
 8004832:	2301      	movs	r3, #1
 8004834:	e022      	b.n	800487c <HAL_I2C_Init+0x1dc>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10e      	bne.n	800485c <HAL_I2C_Init+0x1bc>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1e58      	subs	r0, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	440b      	add	r3, r1
 800484c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004850:	3301      	adds	r3, #1
 8004852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	e00f      	b.n	800487c <HAL_I2C_Init+0x1dc>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1e58      	subs	r0, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	0099      	lsls	r1, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004872:	3301      	adds	r3, #1
 8004874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	6809      	ldr	r1, [r1, #0]
 8004880:	4313      	orrs	r3, r2
 8004882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69da      	ldr	r2, [r3, #28]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6911      	ldr	r1, [r2, #16]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68d2      	ldr	r2, [r2, #12]
 80048b6:	4311      	orrs	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	000186a0 	.word	0x000186a0
 8004918:	001e847f 	.word	0x001e847f
 800491c:	003d08ff 	.word	0x003d08ff
 8004920:	431bde83 	.word	0x431bde83
 8004924:	10624dd3 	.word	0x10624dd3

08004928 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492a:	b08f      	sub	sp, #60	; 0x3c
 800492c:	af0a      	add	r7, sp, #40	; 0x28
 800492e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e116      	b.n	8004b68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f008 fb49 	bl	800cfec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2203      	movs	r2, #3
 800495e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f004 fd4a 	bl	8009412 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	687e      	ldr	r6, [r7, #4]
 8004986:	466d      	mov	r5, sp
 8004988:	f106 0410 	add.w	r4, r6, #16
 800498c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800498e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004994:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004998:	e885 0003 	stmia.w	r5, {r0, r1}
 800499c:	1d33      	adds	r3, r6, #4
 800499e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049a0:	6838      	ldr	r0, [r7, #0]
 80049a2:	f004 fc21 	bl	80091e8 <USB_CoreInit>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0d7      	b.n	8004b68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f004 fd38 	bl	8009434 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	e04a      	b.n	8004a60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049ca:	7bfa      	ldrb	r2, [r7, #15]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	333d      	adds	r3, #61	; 0x3d
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	333c      	adds	r3, #60	; 0x3c
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	b298      	uxth	r0, r3
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3344      	adds	r3, #68	; 0x44
 8004a06:	4602      	mov	r2, r0
 8004a08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	3340      	adds	r3, #64	; 0x40
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3348      	adds	r3, #72	; 0x48
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	334c      	adds	r3, #76	; 0x4c
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3354      	adds	r3, #84	; 0x54
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3af      	bcc.n	80049ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]
 8004a6e:	e044      	b.n	8004afa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a70:	7bfa      	ldrb	r2, [r7, #15]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a9c:	7bfa      	ldrb	r2, [r7, #15]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ab2:	7bfa      	ldrb	r2, [r7, #15]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ade:	7bfa      	ldrb	r2, [r7, #15]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	3301      	adds	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d3b5      	bcc.n	8004a70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	687e      	ldr	r6, [r7, #4]
 8004b0c:	466d      	mov	r5, sp
 8004b0e:	f106 0410 	add.w	r4, r6, #16
 8004b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b22:	1d33      	adds	r3, r6, #4
 8004b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b26:	6838      	ldr	r0, [r7, #0]
 8004b28:	f004 fcd0 	bl	80094cc <USB_DevInit>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e014      	b.n	8004b68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d102      	bne.n	8004b5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 f98c 	bl	8005e74 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f005 fe12 	bl	800a78a <USB_DevDisconnect>

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_PCD_Start+0x1c>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e020      	b.n	8004bce <HAL_PCD_Start+0x5e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d109      	bne.n	8004bb0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d005      	beq.n	8004bb0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f004 fc1b 	bl	80093f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f005 fdc2 	bl	800a748 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bd6:	b590      	push	{r4, r7, lr}
 8004bd8:	b08d      	sub	sp, #52	; 0x34
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f005 fe80 	bl	800a8f2 <USB_GetMode>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 84b7 	bne.w	8005568 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f005 fde4 	bl	800a7cc <USB_ReadInterrupts>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 84ad 	beq.w	8005566 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f005 fdd1 	bl	800a7cc <USB_ReadInterrupts>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f002 0202 	and.w	r2, r2, #2
 8004c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f005 fdbf 	bl	800a7cc <USB_ReadInterrupts>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d161      	bne.n	8004d1c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0210 	bic.w	r2, r2, #16
 8004c66:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	3304      	adds	r3, #4
 8004c86:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	0c5b      	lsrs	r3, r3, #17
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d124      	bne.n	8004cde <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d035      	beq.n	8004d0c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6a38      	ldr	r0, [r7, #32]
 8004cb4:	f005 fbf6 	bl	800a4a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cc4:	441a      	add	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cd6:	441a      	add	r2, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	621a      	str	r2, [r3, #32]
 8004cdc:	e016      	b.n	8004d0c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	0c5b      	lsrs	r3, r3, #17
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d110      	bne.n	8004d0c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6a38      	ldr	r0, [r7, #32]
 8004cf6:	f005 fbd5 	bl	800a4a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6a1a      	ldr	r2, [r3, #32]
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d06:	441a      	add	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0210 	orr.w	r2, r2, #16
 8004d1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f005 fd53 	bl	800a7cc <USB_ReadInterrupts>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d30:	f040 80a7 	bne.w	8004e82 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f005 fd58 	bl	800a7f2 <USB_ReadDevAllOutEpInterrupt>
 8004d42:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d44:	e099      	b.n	8004e7a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 808e 	beq.w	8004e6e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f005 fd7c 	bl	800a85a <USB_ReadDevOutEPInterrupt>
 8004d62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fef0 	bl	8005b68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2308      	movs	r3, #8
 8004da2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 ffc6 	bl	8005d38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d030      	beq.n	8004e34 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b80      	cmp	r3, #128	; 0x80
 8004ddc:	d109      	bne.n	8004df2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004df0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	3304      	adds	r3, #4
 8004e06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	78db      	ldrb	r3, [r3, #3]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d108      	bne.n	8004e22 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f008 fa0f 	bl	800d240 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2302      	movs	r3, #2
 8004e32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	461a      	mov	r2, r3
 8004e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	3301      	adds	r3, #1
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f47f af62 	bne.w	8004d46 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f005 fca0 	bl	800a7cc <USB_ReadInterrupts>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e96:	f040 80db 	bne.w	8005050 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f005 fcc1 	bl	800a826 <USB_ReadDevAllInEpInterrupt>
 8004ea4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004eaa:	e0cd      	b.n	8005048 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80c2 	beq.w	800503c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f005 fce7 	bl	800a896 <USB_ReadDevInEPInterrupt>
 8004ec8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d057      	beq.n	8004f84 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	2201      	movs	r2, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69f9      	ldr	r1, [r7, #28]
 8004ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	461a      	mov	r2, r3
 8004f06:	2301      	movs	r3, #1
 8004f08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d132      	bne.n	8004f78 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f16:	4613      	mov	r3, r2
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	334c      	adds	r3, #76	; 0x4c
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4403      	add	r3, r0
 8004f32:	3348      	adds	r3, #72	; 0x48
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4419      	add	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4403      	add	r3, r0
 8004f46:	334c      	adds	r3, #76	; 0x4c
 8004f48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d113      	bne.n	8004f78 <HAL_PCD_IRQHandler+0x3a2>
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3354      	adds	r3, #84	; 0x54
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f70:	461a      	mov	r2, r3
 8004f72:	2101      	movs	r1, #1
 8004f74:	f005 fcee 	bl	800a954 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f008 f8d9 	bl	800d136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2310      	movs	r3, #16
 8004fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2340      	movs	r3, #64	; 0x40
 8004fd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d023      	beq.n	800502a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004fe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fe4:	6a38      	ldr	r0, [r7, #32]
 8004fe6:	f004 fbcf 	bl	8009788 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	3338      	adds	r3, #56	; 0x38
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d108      	bne.n	8005018 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f008 f926 	bl	800d264 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	461a      	mov	r2, r3
 8005026:	2302      	movs	r3, #2
 8005028:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fd08 	bl	8005a4c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	3301      	adds	r3, #1
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	f47f af2e 	bne.w	8004eac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f005 fbb9 	bl	800a7cc <USB_ReadInterrupts>
 800505a:	4603      	mov	r3, r0
 800505c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005064:	d122      	bne.n	80050ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005080:	2b01      	cmp	r3, #1
 8005082:	d108      	bne.n	8005096 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800508c:	2100      	movs	r1, #0
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f008 faa0 	bl	800d5d4 <HAL_PCDEx_LPM_Callback>
 8005094:	e002      	b.n	800509c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f008 f8c4 	bl	800d224 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80050aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f005 fb8b 	bl	800a7cc <USB_ReadInterrupts>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c0:	d112      	bne.n	80050e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d102      	bne.n	80050d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f008 f880 	bl	800d1d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80050e6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f005 fb6d 	bl	800a7cc <USB_ReadInterrupts>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050fc:	d121      	bne.n	8005142 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695a      	ldr	r2, [r3, #20]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800510c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d111      	bne.n	800513c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005132:	2101      	movs	r1, #1
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f008 fa4d 	bl	800d5d4 <HAL_PCDEx_LPM_Callback>
 800513a:	e002      	b.n	8005142 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f008 f84b 	bl	800d1d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f005 fb40 	bl	800a7cc <USB_ReadInterrupts>
 800514c:	4603      	mov	r3, r0
 800514e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005156:	f040 80b7 	bne.w	80052c8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2110      	movs	r1, #16
 8005174:	4618      	mov	r0, r3
 8005176:	f004 fb07 	bl	8009788 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517e:	e046      	b.n	800520e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	461a      	mov	r2, r3
 800518e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005192:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a4:	0151      	lsls	r1, r2, #5
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	440a      	add	r2, r1
 80051aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	461a      	mov	r2, r3
 80051c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005206:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520a:	3301      	adds	r3, #1
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005214:	429a      	cmp	r2, r3
 8005216:	d3b3      	bcc.n	8005180 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005226:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800522a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	2b00      	cmp	r3, #0
 8005232:	d016      	beq.n	8005262 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005244:	f043 030b 	orr.w	r3, r3, #11
 8005248:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800525a:	f043 030b 	orr.w	r3, r3, #11
 800525e:	6453      	str	r3, [r2, #68]	; 0x44
 8005260:	e015      	b.n	800528e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005274:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005278:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005288:	f043 030b 	orr.w	r3, r3, #11
 800528c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800529c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052b2:	461a      	mov	r2, r3
 80052b4:	f005 fb4e 	bl	800a954 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80052c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f005 fa7d 	bl	800a7cc <USB_ReadInterrupts>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052dc:	d124      	bne.n	8005328 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f005 fb13 	bl	800a90e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f004 fac8 	bl	8009882 <USB_GetDevSpeed>
 80052f2:	4603      	mov	r3, r0
 80052f4:	461a      	mov	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681c      	ldr	r4, [r3, #0]
 80052fe:	f000 fec3 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 8005302:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	4620      	mov	r0, r4
 800530e:	f003 ffcd 	bl	80092ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f007 ff37 	bl	800d186 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005326:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f005 fa4d 	bl	800a7cc <USB_ReadInterrupts>
 8005332:	4603      	mov	r3, r0
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d10a      	bne.n	8005352 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f007 ff14 	bl	800d16a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f002 0208 	and.w	r2, r2, #8
 8005350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f005 fa38 	bl	800a7cc <USB_ReadInterrupts>
 800535c:	4603      	mov	r3, r0
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d122      	bne.n	80053ac <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005372:	2301      	movs	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
 8005376:	e014      	b.n	80053a2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	4613      	mov	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d105      	bne.n	800539c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	b2db      	uxtb	r3, r3
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fb27 	bl	80059ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	3301      	adds	r3, #1
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3e5      	bcc.n	8005378 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f005 fa0b 	bl	800a7cc <USB_ReadInterrupts>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c0:	d13b      	bne.n	800543a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053c2:	2301      	movs	r3, #1
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
 80053c6:	e02b      	b.n	8005420 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3340      	adds	r3, #64	; 0x40
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d115      	bne.n	800541a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80053ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da12      	bge.n	800541a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	333f      	adds	r3, #63	; 0x3f
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005410:	b2db      	uxtb	r3, r3
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fae8 	bl	80059ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	3301      	adds	r3, #1
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005426:	429a      	cmp	r2, r3
 8005428:	d3ce      	bcc.n	80053c8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f005 f9c4 	bl	800a7cc <USB_ReadInterrupts>
 8005444:	4603      	mov	r3, r0
 8005446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800544a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800544e:	d155      	bne.n	80054fc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005450:	2301      	movs	r3, #1
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
 8005454:	e045      	b.n	80054e2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d12e      	bne.n	80054dc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800547e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005480:	2b00      	cmp	r3, #0
 8005482:	da2b      	bge.n	80054dc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005490:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005494:	429a      	cmp	r2, r3
 8005496:	d121      	bne.n	80054dc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054d8:	6053      	str	r3, [r2, #4]
            break;
 80054da:	e007      	b.n	80054ec <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	3301      	adds	r3, #1
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d3b4      	bcc.n	8005456 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695a      	ldr	r2, [r3, #20]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80054fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f005 f963 	bl	800a7cc <USB_ReadInterrupts>
 8005506:	4603      	mov	r3, r0
 8005508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d10a      	bne.n	8005528 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f007 feb8 	bl	800d288 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695a      	ldr	r2, [r3, #20]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f005 f94d 	bl	800a7cc <USB_ReadInterrupts>
 8005532:	4603      	mov	r3, r0
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d115      	bne.n	8005568 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f007 fea8 	bl	800d2a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	e000      	b.n	8005568 <HAL_PCD_IRQHandler+0x992>
      return;
 8005566:	bf00      	nop
    }
  }
}
 8005568:	3734      	adds	r7, #52	; 0x34
 800556a:	46bd      	mov	sp, r7
 800556c:	bd90      	pop	{r4, r7, pc}

0800556e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_PCD_SetAddress+0x1a>
 8005584:	2302      	movs	r3, #2
 8005586:	e013      	b.n	80055b0 <HAL_PCD_SetAddress+0x42>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	78fa      	ldrb	r2, [r7, #3]
 8005594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	78fa      	ldrb	r2, [r7, #3]
 800559e:	4611      	mov	r1, r2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f005 f8ab 	bl	800a6fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	70fb      	strb	r3, [r7, #3]
 80055ca:	460b      	mov	r3, r1
 80055cc:	803b      	strh	r3, [r7, #0]
 80055ce:	4613      	mov	r3, r2
 80055d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da0f      	bge.n	80055fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	f003 020f 	and.w	r2, r3, #15
 80055e4:	4613      	mov	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	3338      	adds	r3, #56	; 0x38
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	4413      	add	r3, r2
 80055f2:	3304      	adds	r3, #4
 80055f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	705a      	strb	r2, [r3, #1]
 80055fc:	e00f      	b.n	800561e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4413      	add	r3, r2
 8005614:	3304      	adds	r3, #4
 8005616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800562a:	883a      	ldrh	r2, [r7, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	78ba      	ldrb	r2, [r7, #2]
 8005634:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005648:	78bb      	ldrb	r3, [r7, #2]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d102      	bne.n	8005654 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_PCD_EP_Open+0xaa>
 800565e:	2302      	movs	r3, #2
 8005660:	e00e      	b.n	8005680 <HAL_PCD_EP_Open+0xc8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	4618      	mov	r0, r3
 8005672:	f004 f92b 	bl	80098cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800567e:	7afb      	ldrb	r3, [r7, #11]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005698:	2b00      	cmp	r3, #0
 800569a:	da0f      	bge.n	80056bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	f003 020f 	and.w	r2, r3, #15
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	3338      	adds	r3, #56	; 0x38
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	3304      	adds	r3, #4
 80056b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	705a      	strb	r2, [r3, #1]
 80056ba:	e00f      	b.n	80056dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	3304      	adds	r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_PCD_EP_Close+0x6e>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e00e      	b.n	8005714 <HAL_PCD_EP_Close+0x8c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	4618      	mov	r0, r3
 8005706:	f004 f969 	bl	80099dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	460b      	mov	r3, r1
 800572a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800572c:	7afb      	ldrb	r3, [r7, #11]
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	3304      	adds	r3, #4
 8005744:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2200      	movs	r2, #0
 800575c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800575e:	7afb      	ldrb	r3, [r7, #11]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	b2da      	uxtb	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d102      	bne.n	8005778 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	6979      	ldr	r1, [r7, #20]
 8005790:	f004 fc48 	bl	800a024 <USB_EP0StartXfer>
 8005794:	e008      	b.n	80057a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	f004 f9f6 	bl	8009b94 <USB_EPStartXfer>
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80057d4:	681b      	ldr	r3, [r3, #0]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b086      	sub	sp, #24
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	460b      	mov	r3, r1
 80057f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057f2:	7afb      	ldrb	r3, [r7, #11]
 80057f4:	f003 020f 	and.w	r2, r3, #15
 80057f8:	4613      	mov	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	3338      	adds	r3, #56	; 0x38
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	3304      	adds	r3, #4
 8005808:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2201      	movs	r2, #1
 8005820:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	b2da      	uxtb	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d102      	bne.n	800583c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	6979      	ldr	r1, [r7, #20]
 8005854:	f004 fbe6 	bl	800a024 <USB_EP0StartXfer>
 8005858:	e008      	b.n	800586c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	6979      	ldr	r1, [r7, #20]
 8005868:	f004 f994 	bl	8009b94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	429a      	cmp	r2, r3
 800588e:	d901      	bls.n	8005894 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e050      	b.n	8005936 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005898:	2b00      	cmp	r3, #0
 800589a:	da0f      	bge.n	80058bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	f003 020f 	and.w	r2, r3, #15
 80058a2:	4613      	mov	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	3338      	adds	r3, #56	; 0x38
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	4413      	add	r3, r2
 80058b0:	3304      	adds	r3, #4
 80058b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	705a      	strb	r2, [r3, #1]
 80058ba:	e00d      	b.n	80058d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058bc:	78fa      	ldrb	r2, [r7, #3]
 80058be:	4613      	mov	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4413      	add	r3, r2
 80058ce:	3304      	adds	r3, #4
 80058d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_PCD_EP_SetStall+0x82>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e01e      	b.n	8005936 <HAL_PCD_EP_SetStall+0xc0>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	4618      	mov	r0, r3
 8005908:	f004 fe24 	bl	800a554 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	b2d9      	uxtb	r1, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005926:	461a      	mov	r2, r3
 8005928:	f005 f814 	bl	800a954 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	f003 020f 	and.w	r2, r3, #15
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d901      	bls.n	800595c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e042      	b.n	80059e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800595c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005960:	2b00      	cmp	r3, #0
 8005962:	da0f      	bge.n	8005984 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	f003 020f 	and.w	r2, r3, #15
 800596a:	4613      	mov	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	3338      	adds	r3, #56	; 0x38
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	4413      	add	r3, r2
 8005978:	3304      	adds	r3, #4
 800597a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	705a      	strb	r2, [r3, #1]
 8005982:	e00f      	b.n	80059a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 020f 	and.w	r2, r3, #15
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	3304      	adds	r3, #4
 800599c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_PCD_EP_ClrStall+0x86>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e00e      	b.n	80059e2 <HAL_PCD_EP_ClrStall+0xa4>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f004 fe2c 	bl	800a630 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80059f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da0c      	bge.n	8005a18 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	3338      	adds	r3, #56	; 0x38
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4413      	add	r3, r2
 8005a12:	3304      	adds	r3, #4
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e00c      	b.n	8005a32 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	f003 020f 	and.w	r2, r3, #15
 8005a1e:	4613      	mov	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3304      	adds	r3, #4
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f004 fc4b 	bl	800a2d4 <USB_EPStopXfer>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005a42:	7afb      	ldrb	r3, [r7, #11]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	3338      	adds	r3, #56	; 0x38
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	4413      	add	r3, r2
 8005a70:	3304      	adds	r3, #4
 8005a72:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1a      	ldr	r2, [r3, #32]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d901      	bls.n	8005a84 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e06c      	b.n	8005b5e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d902      	bls.n	8005aa0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	3303      	adds	r3, #3
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aa8:	e02b      	b.n	8005b02 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d902      	bls.n	8005ac6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3303      	adds	r3, #3
 8005aca:	089b      	lsrs	r3, r3, #2
 8005acc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6919      	ldr	r1, [r3, #16]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	6978      	ldr	r0, [r7, #20]
 8005ae6:	f004 fc9f 	bl	800a428 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	441a      	add	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	441a      	add	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d809      	bhi.n	8005b2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d203      	bcs.n	8005b2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1be      	bne.n	8005aaa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d811      	bhi.n	8005b5c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	2201      	movs	r2, #1
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	6939      	ldr	r1, [r7, #16]
 8005b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b58:	4013      	ands	r3, r2
 8005b5a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	333c      	adds	r3, #60	; 0x3c
 8005b80:	3304      	adds	r3, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d17b      	bne.n	8005c96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d015      	beq.n	8005bd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4a61      	ldr	r2, [pc, #388]	; (8005d30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	f240 80b9 	bls.w	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80b3 	beq.w	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd0:	6093      	str	r3, [r2, #8]
 8005bd2:	e0a7      	b.n	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	461a      	mov	r2, r3
 8005bec:	2320      	movs	r3, #32
 8005bee:	6093      	str	r3, [r2, #8]
 8005bf0:	e098      	b.n	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f040 8093 	bne.w	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4a4b      	ldr	r2, [pc, #300]	; (8005d30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d90f      	bls.n	8005c26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c22:	6093      	str	r3, [r2, #8]
 8005c24:	e07e      	b.n	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	3304      	adds	r3, #4
 8005c3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	0159      	lsls	r1, r3, #5
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	440b      	add	r3, r1
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d114      	bne.n	8005c88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c70:	461a      	mov	r2, r3
 8005c72:	2101      	movs	r1, #1
 8005c74:	f004 fe6e 	bl	800a954 <USB_EP0_OutStart>
 8005c78:	e006      	b.n	8005c88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	441a      	add	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f007 fa36 	bl	800d100 <HAL_PCD_DataOutStageCallback>
 8005c94:	e046      	b.n	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4a26      	ldr	r2, [pc, #152]	; (8005d34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d124      	bne.n	8005ce8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cba:	6093      	str	r3, [r2, #8]
 8005cbc:	e032      	b.n	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f007 fa0d 	bl	800d100 <HAL_PCD_DataOutStageCallback>
 8005ce6:	e01d      	b.n	8005d24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d114      	bne.n	8005d18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d108      	bne.n	8005d18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d10:	461a      	mov	r2, r3
 8005d12:	2100      	movs	r1, #0
 8005d14:	f004 fe1e 	bl	800a954 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f007 f9ee 	bl	800d100 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	4f54300a 	.word	0x4f54300a
 8005d34:	4f54310a 	.word	0x4f54310a

08005d38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	333c      	adds	r3, #60	; 0x3c
 8005d50:	3304      	adds	r3, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d90e      	bls.n	8005d8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d009      	beq.n	8005d8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	461a      	mov	r2, r3
 8005d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f007 f9a5 	bl	800d0dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a0a      	ldr	r2, [pc, #40]	; (8005dc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d90c      	bls.n	8005db4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d108      	bne.n	8005db4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005dac:	461a      	mov	r2, r3
 8005dae:	2101      	movs	r1, #1
 8005db0:	f004 fdd0 	bl	800a954 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	4f54300a 	.word	0x4f54300a

08005dc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d107      	bne.n	8005df2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005de2:	883b      	ldrh	r3, [r7, #0]
 8005de4:	0419      	lsls	r1, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28
 8005df0:	e028      	b.n	8005e44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
 8005e04:	e00d      	b.n	8005e22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	3340      	adds	r3, #64	; 0x40
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	0c1b      	lsrs	r3, r3, #16
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4413      	add	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
 8005e22:	7bfa      	ldrb	r2, [r7, #15]
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d3ec      	bcc.n	8005e06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e2c:	883b      	ldrh	r3, [r7, #0]
 8005e2e:	0418      	lsls	r0, r3, #16
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	4302      	orrs	r2, r0
 8005e3c:	3340      	adds	r3, #64	; 0x40
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	887a      	ldrh	r2, [r7, #2]
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	f043 0303 	orr.w	r3, r3, #3
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0cc      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b68      	ldr	r3, [pc, #416]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d90c      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b65      	ldr	r3, [pc, #404]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	4b63      	ldr	r3, [pc, #396]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0b8      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d020      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f10:	4b59      	ldr	r3, [pc, #356]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a58      	ldr	r2, [pc, #352]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f28:	4b53      	ldr	r3, [pc, #332]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a52      	ldr	r2, [pc, #328]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f34:	4b50      	ldr	r3, [pc, #320]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	494d      	ldr	r1, [pc, #308]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d044      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5a:	4b47      	ldr	r3, [pc, #284]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d119      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e07f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d003      	beq.n	8005f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d107      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7a:	4b3f      	ldr	r3, [pc, #252]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e06f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8a:	4b3b      	ldr	r3, [pc, #236]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e067      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f9a:	4b37      	ldr	r3, [pc, #220]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f023 0203 	bic.w	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4934      	ldr	r1, [pc, #208]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fac:	f7fd fd84 	bl	8003ab8 <HAL_GetTick>
 8005fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb4:	f7fd fd80 	bl	8003ab8 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e04f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 020c 	and.w	r2, r3, #12
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d1eb      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d20c      	bcs.n	8006004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b22      	ldr	r3, [pc, #136]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b20      	ldr	r3, [pc, #128]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e032      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4916      	ldr	r1, [pc, #88]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602e:	4b12      	ldr	r3, [pc, #72]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	490e      	ldr	r1, [pc, #56]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006042:	f000 fb7f 	bl	8006744 <HAL_RCC_GetSysClockFreq>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	490a      	ldr	r1, [pc, #40]	; (800607c <HAL_RCC_ClockConfig+0x1c0>)
 8006054:	5ccb      	ldrb	r3, [r1, r3]
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_RCC_ClockConfig+0x1c8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd fce4 	bl	8003a30 <HAL_InitTick>

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023c00 	.word	0x40023c00
 8006078:	40023800 	.word	0x40023800
 800607c:	08013290 	.word	0x08013290
 8006080:	20000028 	.word	0x20000028
 8006084:	2000002c 	.word	0x2000002c

08006088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800608c:	4b03      	ldr	r3, [pc, #12]	; (800609c <HAL_RCC_GetHCLKFreq+0x14>)
 800608e:	681b      	ldr	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000028 	.word	0x20000028

080060a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060a4:	f7ff fff0 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	0a9b      	lsrs	r3, r3, #10
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4903      	ldr	r1, [pc, #12]	; (80060c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40023800 	.word	0x40023800
 80060c4:	080132a0 	.word	0x080132a0

080060c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060cc:	f7ff ffdc 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	0b5b      	lsrs	r3, r3, #13
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80060de:	5ccb      	ldrb	r3, [r1, r3]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	080132a0 	.word	0x080132a0

080060f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d010      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006128:	4b6f      	ldr	r3, [pc, #444]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800612a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	496c      	ldr	r1, [pc, #432]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006146:	2301      	movs	r3, #1
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d010      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006156:	4b64      	ldr	r3, [pc, #400]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800615c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006164:	4960      	ldr	r1, [pc, #384]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006174:	2301      	movs	r3, #1
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d017      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006184:	4b58      	ldr	r3, [pc, #352]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	4955      	ldr	r1, [pc, #340]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006194:	4313      	orrs	r3, r2
 8006196:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a2:	d101      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80061a4:	2301      	movs	r3, #1
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80061b0:	2301      	movs	r3, #1
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d017      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061c0:	4b49      	ldr	r3, [pc, #292]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ce:	4946      	ldr	r1, [pc, #280]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061de:	d101      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80061e0:	2301      	movs	r3, #1
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80061ec:	2301      	movs	r3, #1
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 808a 	beq.w	8006312 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	4a38      	ldr	r2, [pc, #224]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800620c:	6413      	str	r3, [r2, #64]	; 0x40
 800620e:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	60bb      	str	r3, [r7, #8]
 8006218:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800621a:	4b34      	ldr	r3, [pc, #208]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a33      	ldr	r2, [pc, #204]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006224:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006226:	f7fd fc47 	bl	8003ab8 <HAL_GetTick>
 800622a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800622e:	f7fd fc43 	bl	8003ab8 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e278      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006240:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800624c:	4b26      	ldr	r3, [pc, #152]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006254:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d02f      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	429a      	cmp	r2, r3
 8006268:	d028      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800626a:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006274:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006276:	2201      	movs	r2, #1
 8006278:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800627a:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006280:	4a19      	ldr	r2, [pc, #100]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006286:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d114      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006292:	f7fd fc11 	bl	8003ab8 <HAL_GetTick>
 8006296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006298:	e00a      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fd fc0d 	bl	8003ab8 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e240      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b0:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0ee      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c8:	d114      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80062ca:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062de:	4902      	ldr	r1, [pc, #8]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	608b      	str	r3, [r1, #8]
 80062e4:	e00c      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80062e6:	bf00      	nop
 80062e8:	40023800 	.word	0x40023800
 80062ec:	40007000 	.word	0x40007000
 80062f0:	42470e40 	.word	0x42470e40
 80062f4:	4b4a      	ldr	r3, [pc, #296]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4a49      	ldr	r2, [pc, #292]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062fe:	6093      	str	r3, [r2, #8]
 8006300:	4b47      	ldr	r3, [pc, #284]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630c:	4944      	ldr	r1, [pc, #272]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800630e:	4313      	orrs	r3, r2
 8006310:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006324:	4b3f      	ldr	r3, [pc, #252]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006326:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006334:	4b3a      	ldr	r3, [pc, #232]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800633a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006342:	4937      	ldr	r1, [pc, #220]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006356:	4b32      	ldr	r3, [pc, #200]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006364:	492e      	ldr	r1, [pc, #184]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d011      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006378:	4b29      	ldr	r3, [pc, #164]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800637a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800637e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006386:	4926      	ldr	r1, [pc, #152]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006396:	d101      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006398:	2301      	movs	r3, #1
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80063a8:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80063aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	491a      	ldr	r1, [pc, #104]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d011      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80063ca:	4b15      	ldr	r3, [pc, #84]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80063cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	4911      	ldr	r1, [pc, #68]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e8:	d101      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80063ea:	2301      	movs	r3, #1
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d005      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fc:	f040 80ff 	bne.w	80065fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006400:	4b09      	ldr	r3, [pc, #36]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006406:	f7fd fb57 	bl	8003ab8 <HAL_GetTick>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800640c:	e00e      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800640e:	f7fd fb53 	bl	8003ab8 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d907      	bls.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e188      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006420:	40023800 	.word	0x40023800
 8006424:	424711e0 	.word	0x424711e0
 8006428:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800642c:	4b7e      	ldr	r3, [pc, #504]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ea      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006454:	2b00      	cmp	r3, #0
 8006456:	d028      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d124      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006460:	4b71      	ldr	r3, [pc, #452]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006466:	0c1b      	lsrs	r3, r3, #16
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	3301      	adds	r3, #1
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006472:	4b6d      	ldr	r3, [pc, #436]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006478:	0e1b      	lsrs	r3, r3, #24
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	019b      	lsls	r3, r3, #6
 800648a:	431a      	orrs	r2, r3
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	3b01      	subs	r3, #1
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	431a      	orrs	r2, r3
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	061b      	lsls	r3, r3, #24
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	071b      	lsls	r3, r3, #28
 80064a2:	4961      	ldr	r1, [pc, #388]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d035      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064d4:	d130      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80064d6:	4b54      	ldr	r3, [pc, #336]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064dc:	0c1b      	lsrs	r3, r3, #16
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	3301      	adds	r3, #1
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064e8:	4b4f      	ldr	r3, [pc, #316]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ee:	0f1b      	lsrs	r3, r3, #28
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	019b      	lsls	r3, r3, #6
 8006500:	431a      	orrs	r2, r3
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	085b      	lsrs	r3, r3, #1
 8006506:	3b01      	subs	r3, #1
 8006508:	041b      	lsls	r3, r3, #16
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	061b      	lsls	r3, r3, #24
 8006512:	431a      	orrs	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	071b      	lsls	r3, r3, #28
 8006518:	4943      	ldr	r1, [pc, #268]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006520:	4b41      	ldr	r3, [pc, #260]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006526:	f023 021f 	bic.w	r2, r3, #31
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	3b01      	subs	r3, #1
 8006530:	493d      	ldr	r1, [pc, #244]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006540:	2b00      	cmp	r3, #0
 8006542:	d029      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654c:	d124      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800654e:	4b36      	ldr	r3, [pc, #216]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	3301      	adds	r3, #1
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006560:	4b31      	ldr	r3, [pc, #196]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006566:	0f1b      	lsrs	r3, r3, #28
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	019b      	lsls	r3, r3, #6
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	3b01      	subs	r3, #1
 8006582:	041b      	lsls	r3, r3, #16
 8006584:	431a      	orrs	r2, r3
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	061b      	lsls	r3, r3, #24
 800658a:	431a      	orrs	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	071b      	lsls	r3, r3, #28
 8006590:	4925      	ldr	r1, [pc, #148]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d016      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	3b01      	subs	r3, #1
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	071b      	lsls	r3, r3, #28
 80065ca:	4917      	ldr	r1, [pc, #92]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065d2:	4b16      	ldr	r3, [pc, #88]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065d8:	f7fd fa6e 	bl	8003ab8 <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065e0:	f7fd fa6a 	bl	8003ab8 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e09f      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065f2:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f0      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	2b01      	cmp	r3, #1
 8006602:	f040 8095 	bne.w	8006730 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800660c:	f7fd fa54 	bl	8003ab8 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006612:	e00f      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006614:	f7fd fa50 	bl	8003ab8 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d908      	bls.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e085      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800
 800662c:	42470068 	.word	0x42470068
 8006630:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006634:	4b41      	ldr	r3, [pc, #260]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800663c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006640:	d0e8      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800665e:	2b00      	cmp	r3, #0
 8006660:	d02b      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	2b00      	cmp	r3, #0
 8006668:	d127      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800666a:	4b34      	ldr	r3, [pc, #208]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	3301      	adds	r3, #1
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	019b      	lsls	r3, r3, #6
 8006686:	431a      	orrs	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	3b01      	subs	r3, #1
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	061b      	lsls	r3, r3, #24
 8006698:	4928      	ldr	r1, [pc, #160]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066a0:	4b26      	ldr	r3, [pc, #152]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	3b01      	subs	r3, #1
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	4922      	ldr	r1, [pc, #136]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01d      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ce:	d118      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	0e1b      	lsrs	r3, r3, #24
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	019b      	lsls	r3, r3, #6
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	3b01      	subs	r3, #1
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	431a      	orrs	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	061b      	lsls	r3, r3, #24
 80066fa:	4910      	ldr	r1, [pc, #64]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006708:	f7fd f9d6 	bl	8003ab8 <HAL_GetTick>
 800670c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006710:	f7fd f9d2 	bl	8003ab8 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e007      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800672a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800672e:	d1ef      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3730      	adds	r7, #48	; 0x30
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40023800 	.word	0x40023800
 8006740:	42470070 	.word	0x42470070

08006744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006748:	b0ae      	sub	sp, #184	; 0xb8
 800674a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800676a:	4bcb      	ldr	r3, [pc, #812]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	2b0c      	cmp	r3, #12
 8006774:	f200 8206 	bhi.w	8006b84 <HAL_RCC_GetSysClockFreq+0x440>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <HAL_RCC_GetSysClockFreq+0x3c>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067b5 	.word	0x080067b5
 8006784:	08006b85 	.word	0x08006b85
 8006788:	08006b85 	.word	0x08006b85
 800678c:	08006b85 	.word	0x08006b85
 8006790:	080067bd 	.word	0x080067bd
 8006794:	08006b85 	.word	0x08006b85
 8006798:	08006b85 	.word	0x08006b85
 800679c:	08006b85 	.word	0x08006b85
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	08006b85 	.word	0x08006b85
 80067a8:	08006b85 	.word	0x08006b85
 80067ac:	08006b85 	.word	0x08006b85
 80067b0:	080069b5 	.word	0x080069b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067b4:	4bb9      	ldr	r3, [pc, #740]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x358>)
 80067b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80067ba:	e1e7      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067bc:	4bb8      	ldr	r3, [pc, #736]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80067be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80067c2:	e1e3      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067c4:	4bb4      	ldr	r3, [pc, #720]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067d0:	4bb1      	ldr	r3, [pc, #708]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d071      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067dc:	4bae      	ldr	r3, [pc, #696]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	099b      	lsrs	r3, r3, #6
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80067ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006802:	4622      	mov	r2, r4
 8006804:	462b      	mov	r3, r5
 8006806:	f04f 0000 	mov.w	r0, #0
 800680a:	f04f 0100 	mov.w	r1, #0
 800680e:	0159      	lsls	r1, r3, #5
 8006810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006814:	0150      	lsls	r0, r2, #5
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4621      	mov	r1, r4
 800681c:	1a51      	subs	r1, r2, r1
 800681e:	6439      	str	r1, [r7, #64]	; 0x40
 8006820:	4629      	mov	r1, r5
 8006822:	eb63 0301 	sbc.w	r3, r3, r1
 8006826:	647b      	str	r3, [r7, #68]	; 0x44
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006834:	4649      	mov	r1, r9
 8006836:	018b      	lsls	r3, r1, #6
 8006838:	4641      	mov	r1, r8
 800683a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800683e:	4641      	mov	r1, r8
 8006840:	018a      	lsls	r2, r1, #6
 8006842:	4641      	mov	r1, r8
 8006844:	1a51      	subs	r1, r2, r1
 8006846:	63b9      	str	r1, [r7, #56]	; 0x38
 8006848:	4649      	mov	r1, r9
 800684a:	eb63 0301 	sbc.w	r3, r3, r1
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800685c:	4649      	mov	r1, r9
 800685e:	00cb      	lsls	r3, r1, #3
 8006860:	4641      	mov	r1, r8
 8006862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006866:	4641      	mov	r1, r8
 8006868:	00ca      	lsls	r2, r1, #3
 800686a:	4610      	mov	r0, r2
 800686c:	4619      	mov	r1, r3
 800686e:	4603      	mov	r3, r0
 8006870:	4622      	mov	r2, r4
 8006872:	189b      	adds	r3, r3, r2
 8006874:	633b      	str	r3, [r7, #48]	; 0x30
 8006876:	462b      	mov	r3, r5
 8006878:	460a      	mov	r2, r1
 800687a:	eb42 0303 	adc.w	r3, r2, r3
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800688c:	4629      	mov	r1, r5
 800688e:	024b      	lsls	r3, r1, #9
 8006890:	4621      	mov	r1, r4
 8006892:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006896:	4621      	mov	r1, r4
 8006898:	024a      	lsls	r2, r1, #9
 800689a:	4610      	mov	r0, r2
 800689c:	4619      	mov	r1, r3
 800689e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80068b0:	f7fa fa1a 	bl	8000ce8 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4613      	mov	r3, r2
 80068ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068be:	e067      	b.n	8006990 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068c0:	4b75      	ldr	r3, [pc, #468]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80068d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068da:	2300      	movs	r3, #0
 80068dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80068e2:	4622      	mov	r2, r4
 80068e4:	462b      	mov	r3, r5
 80068e6:	f04f 0000 	mov.w	r0, #0
 80068ea:	f04f 0100 	mov.w	r1, #0
 80068ee:	0159      	lsls	r1, r3, #5
 80068f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068f4:	0150      	lsls	r0, r2, #5
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4621      	mov	r1, r4
 80068fc:	1a51      	subs	r1, r2, r1
 80068fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8006900:	4629      	mov	r1, r5
 8006902:	eb63 0301 	sbc.w	r3, r3, r1
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006914:	4649      	mov	r1, r9
 8006916:	018b      	lsls	r3, r1, #6
 8006918:	4641      	mov	r1, r8
 800691a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800691e:	4641      	mov	r1, r8
 8006920:	018a      	lsls	r2, r1, #6
 8006922:	4641      	mov	r1, r8
 8006924:	ebb2 0a01 	subs.w	sl, r2, r1
 8006928:	4649      	mov	r1, r9
 800692a:	eb63 0b01 	sbc.w	fp, r3, r1
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800693a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800693e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006942:	4692      	mov	sl, r2
 8006944:	469b      	mov	fp, r3
 8006946:	4623      	mov	r3, r4
 8006948:	eb1a 0303 	adds.w	r3, sl, r3
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	462b      	mov	r3, r5
 8006950:	eb4b 0303 	adc.w	r3, fp, r3
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006962:	4629      	mov	r1, r5
 8006964:	028b      	lsls	r3, r1, #10
 8006966:	4621      	mov	r1, r4
 8006968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800696c:	4621      	mov	r1, r4
 800696e:	028a      	lsls	r2, r1, #10
 8006970:	4610      	mov	r0, r2
 8006972:	4619      	mov	r1, r3
 8006974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006978:	2200      	movs	r2, #0
 800697a:	673b      	str	r3, [r7, #112]	; 0x70
 800697c:	677a      	str	r2, [r7, #116]	; 0x74
 800697e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006982:	f7fa f9b1 	bl	8000ce8 <__aeabi_uldivmod>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4613      	mov	r3, r2
 800698c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006990:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	3301      	adds	r3, #1
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80069a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80069b2:	e0eb      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069b4:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069c0:	4b35      	ldr	r3, [pc, #212]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d06b      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069cc:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x354>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	099b      	lsrs	r3, r3, #6
 80069d2:	2200      	movs	r2, #0
 80069d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069de:	663b      	str	r3, [r7, #96]	; 0x60
 80069e0:	2300      	movs	r3, #0
 80069e2:	667b      	str	r3, [r7, #100]	; 0x64
 80069e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80069e8:	4622      	mov	r2, r4
 80069ea:	462b      	mov	r3, r5
 80069ec:	f04f 0000 	mov.w	r0, #0
 80069f0:	f04f 0100 	mov.w	r1, #0
 80069f4:	0159      	lsls	r1, r3, #5
 80069f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069fa:	0150      	lsls	r0, r2, #5
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4621      	mov	r1, r4
 8006a02:	1a51      	subs	r1, r2, r1
 8006a04:	61b9      	str	r1, [r7, #24]
 8006a06:	4629      	mov	r1, r5
 8006a08:	eb63 0301 	sbc.w	r3, r3, r1
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	018b      	lsls	r3, r1, #6
 8006a1e:	4651      	mov	r1, sl
 8006a20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a24:	4651      	mov	r1, sl
 8006a26:	018a      	lsls	r2, r1, #6
 8006a28:	4651      	mov	r1, sl
 8006a2a:	ebb2 0801 	subs.w	r8, r2, r1
 8006a2e:	4659      	mov	r1, fp
 8006a30:	eb63 0901 	sbc.w	r9, r3, r1
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a48:	4690      	mov	r8, r2
 8006a4a:	4699      	mov	r9, r3
 8006a4c:	4623      	mov	r3, r4
 8006a4e:	eb18 0303 	adds.w	r3, r8, r3
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	462b      	mov	r3, r5
 8006a56:	eb49 0303 	adc.w	r3, r9, r3
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006a68:	4629      	mov	r1, r5
 8006a6a:	024b      	lsls	r3, r1, #9
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a72:	4621      	mov	r1, r4
 8006a74:	024a      	lsls	r2, r1, #9
 8006a76:	4610      	mov	r0, r2
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a7e:	2200      	movs	r2, #0
 8006a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006a84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a88:	f7fa f92e 	bl	8000ce8 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4613      	mov	r3, r2
 8006a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a96:	e065      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x420>
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	00f42400 	.word	0x00f42400
 8006aa0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa4:	4b3d      	ldr	r3, [pc, #244]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x458>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	099b      	lsrs	r3, r3, #6
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	4611      	mov	r1, r2
 8006ab0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	657b      	str	r3, [r7, #84]	; 0x54
 8006aba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006abe:	4642      	mov	r2, r8
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f04f 0100 	mov.w	r1, #0
 8006aca:	0159      	lsls	r1, r3, #5
 8006acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ad0:	0150      	lsls	r0, r2, #5
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4641      	mov	r1, r8
 8006ad8:	1a51      	subs	r1, r2, r1
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	4649      	mov	r1, r9
 8006ade:	eb63 0301 	sbc.w	r3, r3, r1
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006af0:	4659      	mov	r1, fp
 8006af2:	018b      	lsls	r3, r1, #6
 8006af4:	4651      	mov	r1, sl
 8006af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006afa:	4651      	mov	r1, sl
 8006afc:	018a      	lsls	r2, r1, #6
 8006afe:	4651      	mov	r1, sl
 8006b00:	1a54      	subs	r4, r2, r1
 8006b02:	4659      	mov	r1, fp
 8006b04:	eb63 0501 	sbc.w	r5, r3, r1
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	00eb      	lsls	r3, r5, #3
 8006b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b16:	00e2      	lsls	r2, r4, #3
 8006b18:	4614      	mov	r4, r2
 8006b1a:	461d      	mov	r5, r3
 8006b1c:	4643      	mov	r3, r8
 8006b1e:	18e3      	adds	r3, r4, r3
 8006b20:	603b      	str	r3, [r7, #0]
 8006b22:	464b      	mov	r3, r9
 8006b24:	eb45 0303 	adc.w	r3, r5, r3
 8006b28:	607b      	str	r3, [r7, #4]
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b36:	4629      	mov	r1, r5
 8006b38:	028b      	lsls	r3, r1, #10
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b40:	4621      	mov	r1, r4
 8006b42:	028a      	lsls	r2, r1, #10
 8006b44:	4610      	mov	r0, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b50:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006b52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b56:	f7fa f8c7 	bl	8000ce8 <__aeabi_uldivmod>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4613      	mov	r3, r2
 8006b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x458>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	0f1b      	lsrs	r3, r3, #28
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b82:	e003      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	37b8      	adds	r7, #184	; 0xb8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	00f42400 	.word	0x00f42400

08006ba4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e28d      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8083 	beq.w	8006cca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bc4:	4b94      	ldr	r3, [pc, #592]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 030c 	and.w	r3, r3, #12
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d019      	beq.n	8006c04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bd0:	4b91      	ldr	r3, [pc, #580]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d106      	bne.n	8006bea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bdc:	4b8e      	ldr	r3, [pc, #568]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006be8:	d00c      	beq.n	8006c04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bea:	4b8b      	ldr	r3, [pc, #556]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	d112      	bne.n	8006c1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bf6:	4b88      	ldr	r3, [pc, #544]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c02:	d10b      	bne.n	8006c1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c04:	4b84      	ldr	r3, [pc, #528]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d05b      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x124>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d157      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e25a      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c24:	d106      	bne.n	8006c34 <HAL_RCC_OscConfig+0x90>
 8006c26:	4b7c      	ldr	r3, [pc, #496]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a7b      	ldr	r2, [pc, #492]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	e01d      	b.n	8006c70 <HAL_RCC_OscConfig+0xcc>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c3c:	d10c      	bne.n	8006c58 <HAL_RCC_OscConfig+0xb4>
 8006c3e:	4b76      	ldr	r3, [pc, #472]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a75      	ldr	r2, [pc, #468]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	4b73      	ldr	r3, [pc, #460]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a72      	ldr	r2, [pc, #456]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	e00b      	b.n	8006c70 <HAL_RCC_OscConfig+0xcc>
 8006c58:	4b6f      	ldr	r3, [pc, #444]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a6e      	ldr	r2, [pc, #440]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	4b6c      	ldr	r3, [pc, #432]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a6b      	ldr	r2, [pc, #428]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d013      	beq.n	8006ca0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fc ff1e 	bl	8003ab8 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c80:	f7fc ff1a 	bl	8003ab8 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b64      	cmp	r3, #100	; 0x64
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e21f      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c92:	4b61      	ldr	r3, [pc, #388]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCC_OscConfig+0xdc>
 8006c9e:	e014      	b.n	8006cca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca0:	f7fc ff0a 	bl	8003ab8 <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ca8:	f7fc ff06 	bl	8003ab8 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b64      	cmp	r3, #100	; 0x64
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e20b      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cba:	4b57      	ldr	r3, [pc, #348]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1f0      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x104>
 8006cc6:	e000      	b.n	8006cca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d06f      	beq.n	8006db6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006cd6:	4b50      	ldr	r3, [pc, #320]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 030c 	and.w	r3, r3, #12
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d017      	beq.n	8006d12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ce2:	4b4d      	ldr	r3, [pc, #308]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006cea:	2b08      	cmp	r3, #8
 8006cec:	d105      	bne.n	8006cfa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006cee:	4b4a      	ldr	r3, [pc, #296]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00b      	beq.n	8006d12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cfa:	4b47      	ldr	r3, [pc, #284]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d02:	2b0c      	cmp	r3, #12
 8006d04:	d11c      	bne.n	8006d40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d06:	4b44      	ldr	r3, [pc, #272]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d116      	bne.n	8006d40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d12:	4b41      	ldr	r3, [pc, #260]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <HAL_RCC_OscConfig+0x186>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d001      	beq.n	8006d2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e1d3      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2a:	4b3b      	ldr	r3, [pc, #236]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	4937      	ldr	r1, [pc, #220]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d3e:	e03a      	b.n	8006db6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d020      	beq.n	8006d8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d48:	4b34      	ldr	r3, [pc, #208]	; (8006e1c <HAL_RCC_OscConfig+0x278>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4e:	f7fc feb3 	bl	8003ab8 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d56:	f7fc feaf 	bl	8003ab8 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e1b4      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d68:	4b2b      	ldr	r3, [pc, #172]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d74:	4b28      	ldr	r3, [pc, #160]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	4925      	ldr	r1, [pc, #148]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	600b      	str	r3, [r1, #0]
 8006d88:	e015      	b.n	8006db6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d8a:	4b24      	ldr	r3, [pc, #144]	; (8006e1c <HAL_RCC_OscConfig+0x278>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d90:	f7fc fe92 	bl	8003ab8 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d98:	f7fc fe8e 	bl	8003ab8 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e193      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006daa:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d036      	beq.n	8006e30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d016      	beq.n	8006df8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dca:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <HAL_RCC_OscConfig+0x27c>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd0:	f7fc fe72 	bl	8003ab8 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd8:	f7fc fe6e 	bl	8003ab8 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e173      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dea:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <HAL_RCC_OscConfig+0x274>)
 8006dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x234>
 8006df6:	e01b      	b.n	8006e30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006df8:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <HAL_RCC_OscConfig+0x27c>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfe:	f7fc fe5b 	bl	8003ab8 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e04:	e00e      	b.n	8006e24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e06:	f7fc fe57 	bl	8003ab8 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d907      	bls.n	8006e24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e15c      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	42470000 	.word	0x42470000
 8006e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e24:	4b8a      	ldr	r3, [pc, #552]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ea      	bne.n	8006e06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 8097 	beq.w	8006f6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e42:	4b83      	ldr	r3, [pc, #524]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10f      	bne.n	8006e6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	4b7f      	ldr	r3, [pc, #508]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	4a7e      	ldr	r2, [pc, #504]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e5e:	4b7c      	ldr	r3, [pc, #496]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e66:	60bb      	str	r3, [r7, #8]
 8006e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6e:	4b79      	ldr	r3, [pc, #484]	; (8007054 <HAL_RCC_OscConfig+0x4b0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d118      	bne.n	8006eac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e7a:	4b76      	ldr	r3, [pc, #472]	; (8007054 <HAL_RCC_OscConfig+0x4b0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a75      	ldr	r2, [pc, #468]	; (8007054 <HAL_RCC_OscConfig+0x4b0>)
 8006e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e86:	f7fc fe17 	bl	8003ab8 <HAL_GetTick>
 8006e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8c:	e008      	b.n	8006ea0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e8e:	f7fc fe13 	bl	8003ab8 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e118      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea0:	4b6c      	ldr	r3, [pc, #432]	; (8007054 <HAL_RCC_OscConfig+0x4b0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0f0      	beq.n	8006e8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d106      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x31e>
 8006eb4:	4b66      	ldr	r3, [pc, #408]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb8:	4a65      	ldr	r2, [pc, #404]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec0:	e01c      	b.n	8006efc <HAL_RCC_OscConfig+0x358>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x340>
 8006eca:	4b61      	ldr	r3, [pc, #388]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	4a60      	ldr	r2, [pc, #384]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006ed0:	f043 0304 	orr.w	r3, r3, #4
 8006ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed6:	4b5e      	ldr	r3, [pc, #376]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	4a5d      	ldr	r2, [pc, #372]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee2:	e00b      	b.n	8006efc <HAL_RCC_OscConfig+0x358>
 8006ee4:	4b5a      	ldr	r3, [pc, #360]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee8:	4a59      	ldr	r2, [pc, #356]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef0:	4b57      	ldr	r3, [pc, #348]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	4a56      	ldr	r2, [pc, #344]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006ef6:	f023 0304 	bic.w	r3, r3, #4
 8006efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d015      	beq.n	8006f30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f04:	f7fc fdd8 	bl	8003ab8 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f0a:	e00a      	b.n	8006f22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f0c:	f7fc fdd4 	bl	8003ab8 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e0d7      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f22:	4b4b      	ldr	r3, [pc, #300]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0ee      	beq.n	8006f0c <HAL_RCC_OscConfig+0x368>
 8006f2e:	e014      	b.n	8006f5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f30:	f7fc fdc2 	bl	8003ab8 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f36:	e00a      	b.n	8006f4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f38:	f7fc fdbe 	bl	8003ab8 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e0c1      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f4e:	4b40      	ldr	r3, [pc, #256]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1ee      	bne.n	8006f38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d105      	bne.n	8006f6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f60:	4b3b      	ldr	r3, [pc, #236]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	4a3a      	ldr	r2, [pc, #232]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 80ad 	beq.w	80070d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f76:	4b36      	ldr	r3, [pc, #216]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d060      	beq.n	8007044 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d145      	bne.n	8007016 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f8a:	4b33      	ldr	r3, [pc, #204]	; (8007058 <HAL_RCC_OscConfig+0x4b4>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f90:	f7fc fd92 	bl	8003ab8 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f98:	f7fc fd8e 	bl	8003ab8 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e093      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006faa:	4b29      	ldr	r3, [pc, #164]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f0      	bne.n	8006f98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69da      	ldr	r2, [r3, #28]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	019b      	lsls	r3, r3, #6
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	061b      	lsls	r3, r3, #24
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	071b      	lsls	r3, r3, #28
 8006fe2:	491b      	ldr	r1, [pc, #108]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fe8:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <HAL_RCC_OscConfig+0x4b4>)
 8006fea:	2201      	movs	r2, #1
 8006fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fee:	f7fc fd63 	bl	8003ab8 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff6:	f7fc fd5f 	bl	8003ab8 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e064      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007008:	4b11      	ldr	r3, [pc, #68]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x452>
 8007014:	e05c      	b.n	80070d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007016:	4b10      	ldr	r3, [pc, #64]	; (8007058 <HAL_RCC_OscConfig+0x4b4>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fc fd4c 	bl	8003ab8 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007024:	f7fc fd48 	bl	8003ab8 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e04d      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007036:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_RCC_OscConfig+0x4ac>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x480>
 8007042:	e045      	b.n	80070d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d107      	bne.n	800705c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e040      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
 8007050:	40023800 	.word	0x40023800
 8007054:	40007000 	.word	0x40007000
 8007058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800705c:	4b1f      	ldr	r3, [pc, #124]	; (80070dc <HAL_RCC_OscConfig+0x538>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d030      	beq.n	80070cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007074:	429a      	cmp	r2, r3
 8007076:	d129      	bne.n	80070cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007082:	429a      	cmp	r2, r3
 8007084:	d122      	bne.n	80070cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800708c:	4013      	ands	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007094:	4293      	cmp	r3, r2
 8007096:	d119      	bne.n	80070cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	3b01      	subs	r3, #1
 80070a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d10f      	bne.n	80070cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d107      	bne.n	80070cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d001      	beq.n	80070d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40023800 	.word	0x40023800

080070e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e041      	b.n	8007176 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fb fb72 	bl	80027f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f000 fd5c 	bl	8007bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e041      	b.n	8007214 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d106      	bne.n	80071aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f839 	bl	800721c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f000 fd0d 	bl	8007bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d109      	bne.n	8007254 <HAL_TIM_PWM_Start+0x24>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	e022      	b.n	800729a <HAL_TIM_PWM_Start+0x6a>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b04      	cmp	r3, #4
 8007258:	d109      	bne.n	800726e <HAL_TIM_PWM_Start+0x3e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b01      	cmp	r3, #1
 8007264:	bf14      	ite	ne
 8007266:	2301      	movne	r3, #1
 8007268:	2300      	moveq	r3, #0
 800726a:	b2db      	uxtb	r3, r3
 800726c:	e015      	b.n	800729a <HAL_TIM_PWM_Start+0x6a>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b08      	cmp	r3, #8
 8007272:	d109      	bne.n	8007288 <HAL_TIM_PWM_Start+0x58>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b01      	cmp	r3, #1
 800727e:	bf14      	ite	ne
 8007280:	2301      	movne	r3, #1
 8007282:	2300      	moveq	r3, #0
 8007284:	b2db      	uxtb	r3, r3
 8007286:	e008      	b.n	800729a <HAL_TIM_PWM_Start+0x6a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e07c      	b.n	800739c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <HAL_TIM_PWM_Start+0x82>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072b0:	e013      	b.n	80072da <HAL_TIM_PWM_Start+0xaa>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d104      	bne.n	80072c2 <HAL_TIM_PWM_Start+0x92>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072c0:	e00b      	b.n	80072da <HAL_TIM_PWM_Start+0xaa>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d104      	bne.n	80072d2 <HAL_TIM_PWM_Start+0xa2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072d0:	e003      	b.n	80072da <HAL_TIM_PWM_Start+0xaa>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2201      	movs	r2, #1
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 ff64 	bl	80081b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a2d      	ldr	r2, [pc, #180]	; (80073a4 <HAL_TIM_PWM_Start+0x174>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d004      	beq.n	80072fc <HAL_TIM_PWM_Start+0xcc>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a2c      	ldr	r2, [pc, #176]	; (80073a8 <HAL_TIM_PWM_Start+0x178>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d101      	bne.n	8007300 <HAL_TIM_PWM_Start+0xd0>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <HAL_TIM_PWM_Start+0xd2>
 8007300:	2300      	movs	r3, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a22      	ldr	r2, [pc, #136]	; (80073a4 <HAL_TIM_PWM_Start+0x174>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d022      	beq.n	8007366 <HAL_TIM_PWM_Start+0x136>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007328:	d01d      	beq.n	8007366 <HAL_TIM_PWM_Start+0x136>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a1f      	ldr	r2, [pc, #124]	; (80073ac <HAL_TIM_PWM_Start+0x17c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d018      	beq.n	8007366 <HAL_TIM_PWM_Start+0x136>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1d      	ldr	r2, [pc, #116]	; (80073b0 <HAL_TIM_PWM_Start+0x180>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d013      	beq.n	8007366 <HAL_TIM_PWM_Start+0x136>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <HAL_TIM_PWM_Start+0x184>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00e      	beq.n	8007366 <HAL_TIM_PWM_Start+0x136>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a16      	ldr	r2, [pc, #88]	; (80073a8 <HAL_TIM_PWM_Start+0x178>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d009      	beq.n	8007366 <HAL_TIM_PWM_Start+0x136>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a18      	ldr	r2, [pc, #96]	; (80073b8 <HAL_TIM_PWM_Start+0x188>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d004      	beq.n	8007366 <HAL_TIM_PWM_Start+0x136>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a16      	ldr	r2, [pc, #88]	; (80073bc <HAL_TIM_PWM_Start+0x18c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d111      	bne.n	800738a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b06      	cmp	r3, #6
 8007376:	d010      	beq.n	800739a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007388:	e007      	b.n	800739a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0201 	orr.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40010400 	.word	0x40010400
 80073ac:	40000400 	.word	0x40000400
 80073b0:	40000800 	.word	0x40000800
 80073b4:	40000c00 	.word	0x40000c00
 80073b8:	40014000 	.word	0x40014000
 80073bc:	40001800 	.word	0x40001800

080073c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e097      	b.n	8007504 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fb fa23 	bl	8002834 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2202      	movs	r2, #2
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6812      	ldr	r2, [r2, #0]
 8007400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007404:	f023 0307 	bic.w	r3, r3, #7
 8007408:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3304      	adds	r3, #4
 8007412:	4619      	mov	r1, r3
 8007414:	4610      	mov	r0, r2
 8007416:	f000 fbe1 	bl	8007bdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	4313      	orrs	r3, r2
 800743a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007442:	f023 0303 	bic.w	r3, r3, #3
 8007446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	4313      	orrs	r3, r2
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007460:	f023 030c 	bic.w	r3, r3, #12
 8007464:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800746c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	4313      	orrs	r3, r2
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	011a      	lsls	r2, r3, #4
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	031b      	lsls	r3, r3, #12
 8007490:	4313      	orrs	r3, r2
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800749e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80074a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	4313      	orrs	r3, r2
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800751c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007524:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800752c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007534:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d110      	bne.n	800755e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d102      	bne.n	8007548 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007542:	7b7b      	ldrb	r3, [r7, #13]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d001      	beq.n	800754c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e089      	b.n	8007660 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800755c:	e031      	b.n	80075c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b04      	cmp	r3, #4
 8007562:	d110      	bne.n	8007586 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d102      	bne.n	8007570 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800756a:	7b3b      	ldrb	r3, [r7, #12]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d001      	beq.n	8007574 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e075      	b.n	8007660 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007584:	e01d      	b.n	80075c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d108      	bne.n	800759e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d105      	bne.n	800759e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007592:	7b7b      	ldrb	r3, [r7, #13]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d102      	bne.n	800759e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007598:	7b3b      	ldrb	r3, [r7, #12]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d001      	beq.n	80075a2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e05e      	b.n	8007660 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2202      	movs	r2, #2
 80075ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2202      	movs	r2, #2
 80075b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d010      	beq.n	80075f0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80075ce:	e01f      	b.n	8007610 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2201      	movs	r2, #1
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fde9 	bl	80081b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0202 	orr.w	r2, r2, #2
 80075ec:	60da      	str	r2, [r3, #12]
      break;
 80075ee:	e02e      	b.n	800764e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2201      	movs	r2, #1
 80075f6:	2104      	movs	r1, #4
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fdd9 	bl	80081b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0204 	orr.w	r2, r2, #4
 800760c:	60da      	str	r2, [r3, #12]
      break;
 800760e:	e01e      	b.n	800764e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2201      	movs	r2, #1
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fdc9 	bl	80081b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2201      	movs	r2, #1
 8007624:	2104      	movs	r1, #4
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fdc2 	bl	80081b0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0202 	orr.w	r2, r2, #2
 800763a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0204 	orr.w	r2, r2, #4
 800764a:	60da      	str	r2, [r3, #12]
      break;
 800764c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0201 	orr.w	r2, r2, #1
 800765c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b02      	cmp	r3, #2
 800767c:	d122      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b02      	cmp	r3, #2
 800768a:	d11b      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0202 	mvn.w	r2, #2
 8007694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fa f992 	bl	80019d4 <HAL_TIM_IC_CaptureCallback>
 80076b0:	e005      	b.n	80076be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa73 	bl	8007b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fa7a 	bl	8007bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d122      	bne.n	8007718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d11b      	bne.n	8007718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0204 	mvn.w	r2, #4
 80076e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fa f968 	bl	80019d4 <HAL_TIM_IC_CaptureCallback>
 8007704:	e005      	b.n	8007712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa49 	bl	8007b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa50 	bl	8007bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b08      	cmp	r3, #8
 8007724:	d122      	bne.n	800776c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d11b      	bne.n	800776c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0208 	mvn.w	r2, #8
 800773c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2204      	movs	r2, #4
 8007742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fa f93e 	bl	80019d4 <HAL_TIM_IC_CaptureCallback>
 8007758:	e005      	b.n	8007766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa1f 	bl	8007b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fa26 	bl	8007bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b10      	cmp	r3, #16
 8007778:	d122      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b10      	cmp	r3, #16
 8007786:	d11b      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0210 	mvn.w	r2, #16
 8007790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2208      	movs	r2, #8
 8007796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fa f914 	bl	80019d4 <HAL_TIM_IC_CaptureCallback>
 80077ac:	e005      	b.n	80077ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9f5 	bl	8007b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f9fc 	bl	8007bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d10e      	bne.n	80077ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d107      	bne.n	80077ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0201 	mvn.w	r2, #1
 80077e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f9cf 	bl	8007b8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b80      	cmp	r3, #128	; 0x80
 80077f8:	d10e      	bne.n	8007818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007804:	2b80      	cmp	r3, #128	; 0x80
 8007806:	d107      	bne.n	8007818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fdca 	bl	80083ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	d10e      	bne.n	8007844 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d107      	bne.n	8007844 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9c1 	bl	8007bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b20      	cmp	r3, #32
 8007850:	d10e      	bne.n	8007870 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b20      	cmp	r3, #32
 800785e:	d107      	bne.n	8007870 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0220 	mvn.w	r2, #32
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fd94 	bl	8008398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007892:	2302      	movs	r3, #2
 8007894:	e0ae      	b.n	80079f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b0c      	cmp	r3, #12
 80078a2:	f200 809f 	bhi.w	80079e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078e1 	.word	0x080078e1
 80078b0:	080079e5 	.word	0x080079e5
 80078b4:	080079e5 	.word	0x080079e5
 80078b8:	080079e5 	.word	0x080079e5
 80078bc:	08007921 	.word	0x08007921
 80078c0:	080079e5 	.word	0x080079e5
 80078c4:	080079e5 	.word	0x080079e5
 80078c8:	080079e5 	.word	0x080079e5
 80078cc:	08007963 	.word	0x08007963
 80078d0:	080079e5 	.word	0x080079e5
 80078d4:	080079e5 	.word	0x080079e5
 80078d8:	080079e5 	.word	0x080079e5
 80078dc:	080079a3 	.word	0x080079a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fa18 	bl	8007d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699a      	ldr	r2, [r3, #24]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0208 	orr.w	r2, r2, #8
 80078fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0204 	bic.w	r2, r2, #4
 800790a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6999      	ldr	r1, [r3, #24]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	619a      	str	r2, [r3, #24]
      break;
 800791e:	e064      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fa68 	bl	8007dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699a      	ldr	r2, [r3, #24]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800793a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6999      	ldr	r1, [r3, #24]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	021a      	lsls	r2, r3, #8
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	619a      	str	r2, [r3, #24]
      break;
 8007960:	e043      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fabd 	bl	8007ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0208 	orr.w	r2, r2, #8
 800797c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69da      	ldr	r2, [r3, #28]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 0204 	bic.w	r2, r2, #4
 800798c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69d9      	ldr	r1, [r3, #28]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	691a      	ldr	r2, [r3, #16]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	61da      	str	r2, [r3, #28]
      break;
 80079a0:	e023      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fb11 	bl	8007fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69d9      	ldr	r1, [r3, #28]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	021a      	lsls	r2, r3, #8
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	61da      	str	r2, [r3, #28]
      break;
 80079e2:	e002      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_TIM_ConfigClockSource+0x1c>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e0b4      	b.n	8007b82 <HAL_TIM_ConfigClockSource+0x186>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a50:	d03e      	beq.n	8007ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a56:	f200 8087 	bhi.w	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	f000 8086 	beq.w	8007b6e <HAL_TIM_ConfigClockSource+0x172>
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a66:	d87f      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
 8007a68:	2b70      	cmp	r3, #112	; 0x70
 8007a6a:	d01a      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8007a6c:	2b70      	cmp	r3, #112	; 0x70
 8007a6e:	d87b      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
 8007a70:	2b60      	cmp	r3, #96	; 0x60
 8007a72:	d050      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x11a>
 8007a74:	2b60      	cmp	r3, #96	; 0x60
 8007a76:	d877      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
 8007a78:	2b50      	cmp	r3, #80	; 0x50
 8007a7a:	d03c      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0xfa>
 8007a7c:	2b50      	cmp	r3, #80	; 0x50
 8007a7e:	d873      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d058      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x13a>
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	d86f      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
 8007a88:	2b30      	cmp	r3, #48	; 0x30
 8007a8a:	d064      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x15a>
 8007a8c:	2b30      	cmp	r3, #48	; 0x30
 8007a8e:	d86b      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d060      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x15a>
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d867      	bhi.n	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d05c      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x15a>
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d05a      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x15a>
 8007aa0:	e062      	b.n	8007b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6899      	ldr	r1, [r3, #8]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f000 fb5d 	bl	8008170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	609a      	str	r2, [r3, #8]
      break;
 8007ace:	e04f      	b.n	8007b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	6899      	ldr	r1, [r3, #8]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f000 fb46 	bl	8008170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689a      	ldr	r2, [r3, #8]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af2:	609a      	str	r2, [r3, #8]
      break;
 8007af4:	e03c      	b.n	8007b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6859      	ldr	r1, [r3, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f000 faba 	bl	800807c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2150      	movs	r1, #80	; 0x50
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fb13 	bl	800813a <TIM_ITRx_SetConfig>
      break;
 8007b14:	e02c      	b.n	8007b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6859      	ldr	r1, [r3, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f000 fad9 	bl	80080da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2160      	movs	r1, #96	; 0x60
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fb03 	bl	800813a <TIM_ITRx_SetConfig>
      break;
 8007b34:	e01c      	b.n	8007b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6859      	ldr	r1, [r3, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f000 fa9a 	bl	800807c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2140      	movs	r1, #64	; 0x40
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 faf3 	bl	800813a <TIM_ITRx_SetConfig>
      break;
 8007b54:	e00c      	b.n	8007b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f000 faea 	bl	800813a <TIM_ITRx_SetConfig>
      break;
 8007b66:	e003      	b.n	8007b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b6c:	e000      	b.n	8007b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
	...

08007bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a40      	ldr	r2, [pc, #256]	; (8007cf0 <TIM_Base_SetConfig+0x114>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d013      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfa:	d00f      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a3d      	ldr	r2, [pc, #244]	; (8007cf4 <TIM_Base_SetConfig+0x118>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00b      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a3c      	ldr	r2, [pc, #240]	; (8007cf8 <TIM_Base_SetConfig+0x11c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d007      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a3b      	ldr	r2, [pc, #236]	; (8007cfc <TIM_Base_SetConfig+0x120>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d003      	beq.n	8007c1c <TIM_Base_SetConfig+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a3a      	ldr	r2, [pc, #232]	; (8007d00 <TIM_Base_SetConfig+0x124>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d108      	bne.n	8007c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a2f      	ldr	r2, [pc, #188]	; (8007cf0 <TIM_Base_SetConfig+0x114>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d02b      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3c:	d027      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a2c      	ldr	r2, [pc, #176]	; (8007cf4 <TIM_Base_SetConfig+0x118>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d023      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a2b      	ldr	r2, [pc, #172]	; (8007cf8 <TIM_Base_SetConfig+0x11c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d01f      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a2a      	ldr	r2, [pc, #168]	; (8007cfc <TIM_Base_SetConfig+0x120>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01b      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a29      	ldr	r2, [pc, #164]	; (8007d00 <TIM_Base_SetConfig+0x124>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d017      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a28      	ldr	r2, [pc, #160]	; (8007d04 <TIM_Base_SetConfig+0x128>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a27      	ldr	r2, [pc, #156]	; (8007d08 <TIM_Base_SetConfig+0x12c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00f      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a26      	ldr	r2, [pc, #152]	; (8007d0c <TIM_Base_SetConfig+0x130>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00b      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a25      	ldr	r2, [pc, #148]	; (8007d10 <TIM_Base_SetConfig+0x134>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d007      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a24      	ldr	r2, [pc, #144]	; (8007d14 <TIM_Base_SetConfig+0x138>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d003      	beq.n	8007c8e <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a23      	ldr	r2, [pc, #140]	; (8007d18 <TIM_Base_SetConfig+0x13c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d108      	bne.n	8007ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a0a      	ldr	r2, [pc, #40]	; (8007cf0 <TIM_Base_SetConfig+0x114>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d003      	beq.n	8007cd4 <TIM_Base_SetConfig+0xf8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a0c      	ldr	r2, [pc, #48]	; (8007d00 <TIM_Base_SetConfig+0x124>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d103      	bne.n	8007cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	615a      	str	r2, [r3, #20]
}
 8007ce2:	bf00      	nop
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40010000 	.word	0x40010000
 8007cf4:	40000400 	.word	0x40000400
 8007cf8:	40000800 	.word	0x40000800
 8007cfc:	40000c00 	.word	0x40000c00
 8007d00:	40010400 	.word	0x40010400
 8007d04:	40014000 	.word	0x40014000
 8007d08:	40014400 	.word	0x40014400
 8007d0c:	40014800 	.word	0x40014800
 8007d10:	40001800 	.word	0x40001800
 8007d14:	40001c00 	.word	0x40001c00
 8007d18:	40002000 	.word	0x40002000

08007d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	f023 0201 	bic.w	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f023 0302 	bic.w	r3, r3, #2
 8007d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a20      	ldr	r2, [pc, #128]	; (8007df4 <TIM_OC1_SetConfig+0xd8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d003      	beq.n	8007d80 <TIM_OC1_SetConfig+0x64>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a1f      	ldr	r2, [pc, #124]	; (8007df8 <TIM_OC1_SetConfig+0xdc>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d10c      	bne.n	8007d9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f023 0308 	bic.w	r3, r3, #8
 8007d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f023 0304 	bic.w	r3, r3, #4
 8007d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <TIM_OC1_SetConfig+0xd8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d003      	beq.n	8007daa <TIM_OC1_SetConfig+0x8e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a14      	ldr	r2, [pc, #80]	; (8007df8 <TIM_OC1_SetConfig+0xdc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d111      	bne.n	8007dce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	621a      	str	r2, [r3, #32]
}
 8007de8:	bf00      	nop
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	40010000 	.word	0x40010000
 8007df8:	40010400 	.word	0x40010400

08007dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	f023 0210 	bic.w	r2, r3, #16
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f023 0320 	bic.w	r3, r3, #32
 8007e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	011b      	lsls	r3, r3, #4
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a22      	ldr	r2, [pc, #136]	; (8007ee0 <TIM_OC2_SetConfig+0xe4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_OC2_SetConfig+0x68>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a21      	ldr	r2, [pc, #132]	; (8007ee4 <TIM_OC2_SetConfig+0xe8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d10d      	bne.n	8007e80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a17      	ldr	r2, [pc, #92]	; (8007ee0 <TIM_OC2_SetConfig+0xe4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d003      	beq.n	8007e90 <TIM_OC2_SetConfig+0x94>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <TIM_OC2_SetConfig+0xe8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d113      	bne.n	8007eb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	621a      	str	r2, [r3, #32]
}
 8007ed2:	bf00      	nop
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40010000 	.word	0x40010000
 8007ee4:	40010400 	.word	0x40010400

08007ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0303 	bic.w	r3, r3, #3
 8007f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	021b      	lsls	r3, r3, #8
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a21      	ldr	r2, [pc, #132]	; (8007fc8 <TIM_OC3_SetConfig+0xe0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d003      	beq.n	8007f4e <TIM_OC3_SetConfig+0x66>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a20      	ldr	r2, [pc, #128]	; (8007fcc <TIM_OC3_SetConfig+0xe4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d10d      	bne.n	8007f6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a16      	ldr	r2, [pc, #88]	; (8007fc8 <TIM_OC3_SetConfig+0xe0>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_OC3_SetConfig+0x92>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <TIM_OC3_SetConfig+0xe4>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d113      	bne.n	8007fa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	011b      	lsls	r3, r3, #4
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	011b      	lsls	r3, r3, #4
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	621a      	str	r2, [r3, #32]
}
 8007fbc:	bf00      	nop
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	40010000 	.word	0x40010000
 8007fcc:	40010400 	.word	0x40010400

08007fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800801a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	031b      	lsls	r3, r3, #12
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <TIM_OC4_SetConfig+0xa4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d003      	beq.n	8008038 <TIM_OC4_SetConfig+0x68>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a11      	ldr	r2, [pc, #68]	; (8008078 <TIM_OC4_SetConfig+0xa8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d109      	bne.n	800804c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800803e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	019b      	lsls	r3, r3, #6
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40010000 	.word	0x40010000
 8008078:	40010400 	.word	0x40010400

0800807c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	f023 0201 	bic.w	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f023 030a 	bic.w	r3, r3, #10
 80080b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	621a      	str	r2, [r3, #32]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080da:	b480      	push	{r7}
 80080dc:	b087      	sub	sp, #28
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f023 0210 	bic.w	r2, r3, #16
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	031b      	lsls	r3, r3, #12
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800813a:	b480      	push	{r7}
 800813c:	b085      	sub	sp, #20
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	f043 0307 	orr.w	r3, r3, #7
 800815c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	609a      	str	r2, [r3, #8]
}
 8008164:	bf00      	nop
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800818a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	021a      	lsls	r2, r3, #8
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	431a      	orrs	r2, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4313      	orrs	r3, r2
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	609a      	str	r2, [r3, #8]
}
 80081a4:	bf00      	nop
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f003 031f 	and.w	r3, r3, #31
 80081c2:	2201      	movs	r2, #1
 80081c4:	fa02 f303 	lsl.w	r3, r2, r3
 80081c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6a1a      	ldr	r2, [r3, #32]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	43db      	mvns	r3, r3
 80081d2:	401a      	ands	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a1a      	ldr	r2, [r3, #32]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f003 031f 	and.w	r3, r3, #31
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	fa01 f303 	lsl.w	r3, r1, r3
 80081e8:	431a      	orrs	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	621a      	str	r2, [r3, #32]
}
 80081ee:	bf00      	nop
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008210:	2302      	movs	r3, #2
 8008212:	e05a      	b.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a21      	ldr	r2, [pc, #132]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d022      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008260:	d01d      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d018      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1b      	ldr	r2, [pc, #108]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d013      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a1a      	ldr	r2, [pc, #104]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00e      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a18      	ldr	r2, [pc, #96]	; (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d009      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a17      	ldr	r2, [pc, #92]	; (80082ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d004      	beq.n	800829e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a15      	ldr	r2, [pc, #84]	; (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d10c      	bne.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	40010000 	.word	0x40010000
 80082dc:	40000400 	.word	0x40000400
 80082e0:	40000800 	.word	0x40000800
 80082e4:	40000c00 	.word	0x40000c00
 80082e8:	40010400 	.word	0x40010400
 80082ec:	40014000 	.word	0x40014000
 80082f0:	40001800 	.word	0x40001800

080082f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800830c:	2302      	movs	r3, #2
 800830e:	e03d      	b.n	800838c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e03f      	b.n	8008452 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fa fb84 	bl	8002af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2224      	movs	r2, #36	; 0x24
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fc7b 	bl	8008d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691a      	ldr	r2, [r3, #16]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695a      	ldr	r2, [r3, #20]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68da      	ldr	r2, [r3, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2220      	movs	r2, #32
 800844c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b0ba      	sub	sp, #232	; 0xe8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008482:	2300      	movs	r3, #0
 8008484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008488:	2300      	movs	r3, #0
 800848a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800848e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800849a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10f      	bne.n	80084c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d009      	beq.n	80084c2 <HAL_UART_IRQHandler+0x66>
 80084ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fb65 	bl	8008b8a <UART_Receive_IT>
      return;
 80084c0:	e256      	b.n	8008970 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 80de 	beq.w	8008688 <HAL_UART_IRQHandler+0x22c>
 80084cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80d1 	beq.w	8008688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <HAL_UART_IRQHandler+0xae>
 80084f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	f043 0201 	orr.w	r2, r3, #1
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800850a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <HAL_UART_IRQHandler+0xd2>
 8008516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f043 0202 	orr.w	r2, r3, #2
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800852e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00b      	beq.n	8008552 <HAL_UART_IRQHandler+0xf6>
 800853a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	f043 0204 	orr.w	r2, r3, #4
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b00      	cmp	r3, #0
 800855c:	d011      	beq.n	8008582 <HAL_UART_IRQHandler+0x126>
 800855e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d105      	bne.n	8008576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800856a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	f043 0208 	orr.w	r2, r3, #8
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 81ed 	beq.w	8008966 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800858c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <HAL_UART_IRQHandler+0x14e>
 8008598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 faf0 	bl	8008b8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b40      	cmp	r3, #64	; 0x40
 80085b6:	bf0c      	ite	eq
 80085b8:	2301      	moveq	r3, #1
 80085ba:	2300      	movne	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <HAL_UART_IRQHandler+0x17a>
 80085ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d04f      	beq.n	8008676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f9f8 	bl	80089cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e6:	2b40      	cmp	r3, #64	; 0x40
 80085e8:	d141      	bne.n	800866e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3314      	adds	r3, #20
 80085f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3314      	adds	r3, #20
 8008612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008616:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800861a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800862e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1d9      	bne.n	80085ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	2b00      	cmp	r3, #0
 800863c:	d013      	beq.n	8008666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	4a7d      	ldr	r2, [pc, #500]	; (8008838 <HAL_UART_IRQHandler+0x3dc>)
 8008644:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	4618      	mov	r0, r3
 800864c:	f7fb fe57 	bl	80042fe <HAL_DMA_Abort_IT>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d016      	beq.n	8008684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008664:	e00e      	b.n	8008684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f99a 	bl	80089a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866c:	e00a      	b.n	8008684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f996 	bl	80089a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008674:	e006      	b.n	8008684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f992 	bl	80089a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008682:	e170      	b.n	8008966 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008684:	bf00      	nop
    return;
 8008686:	e16e      	b.n	8008966 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	2b01      	cmp	r3, #1
 800868e:	f040 814a 	bne.w	8008926 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008696:	f003 0310 	and.w	r3, r3, #16
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 8143 	beq.w	8008926 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 813c 	beq.w	8008926 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086ae:	2300      	movs	r3, #0
 80086b0:	60bb      	str	r3, [r7, #8]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60bb      	str	r3, [r7, #8]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b40      	cmp	r3, #64	; 0x40
 80086d0:	f040 80b4 	bne.w	800883c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8140 	beq.w	800896a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086f2:	429a      	cmp	r2, r3
 80086f4:	f080 8139 	bcs.w	800896a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800870a:	f000 8088 	beq.w	800881e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800872c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	330c      	adds	r3, #12
 8008736:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800873a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800873e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008746:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1d9      	bne.n	800870e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3314      	adds	r3, #20
 8008760:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800876a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3314      	adds	r3, #20
 800877a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800877e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008782:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e1      	bne.n	800875a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3314      	adds	r3, #20
 800879c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3314      	adds	r3, #20
 80087b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e3      	bne.n	8008796 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	330c      	adds	r3, #12
 80087e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ee:	f023 0310 	bic.w	r3, r3, #16
 80087f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	330c      	adds	r3, #12
 80087fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008800:	65ba      	str	r2, [r7, #88]	; 0x58
 8008802:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800880e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e3      	bne.n	80087dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	4618      	mov	r0, r3
 800881a:	f7fb fd00 	bl	800421e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008826:	b29b      	uxth	r3, r3
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	b29b      	uxth	r3, r3
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f8c0 	bl	80089b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008834:	e099      	b.n	800896a <HAL_UART_IRQHandler+0x50e>
 8008836:	bf00      	nop
 8008838:	08008a93 	.word	0x08008a93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008844:	b29b      	uxth	r3, r3
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 808b 	beq.w	800896e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 8086 	beq.w	800896e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	330c      	adds	r3, #12
 8008868:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008878:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	330c      	adds	r3, #12
 8008882:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008886:	647a      	str	r2, [r7, #68]	; 0x44
 8008888:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800888c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e3      	bne.n	8008862 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3314      	adds	r3, #20
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	623b      	str	r3, [r7, #32]
   return(result);
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	f023 0301 	bic.w	r3, r3, #1
 80088b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3314      	adds	r3, #20
 80088ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088be:	633a      	str	r2, [r7, #48]	; 0x30
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e3      	bne.n	800889a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	330c      	adds	r3, #12
 80088e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0310 	bic.w	r3, r3, #16
 80088f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	330c      	adds	r3, #12
 8008900:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008904:	61fa      	str	r2, [r7, #28]
 8008906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	69b9      	ldr	r1, [r7, #24]
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	617b      	str	r3, [r7, #20]
   return(result);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e3      	bne.n	80088e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f848 	bl	80089b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008924:	e023      	b.n	800896e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <HAL_UART_IRQHandler+0x4ea>
 8008932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8bb 	bl	8008aba <UART_Transmit_IT>
    return;
 8008944:	e014      	b.n	8008970 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00e      	beq.n	8008970 <HAL_UART_IRQHandler+0x514>
 8008952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8fb 	bl	8008b5a <UART_EndTransmit_IT>
    return;
 8008964:	e004      	b.n	8008970 <HAL_UART_IRQHandler+0x514>
    return;
 8008966:	bf00      	nop
 8008968:	e002      	b.n	8008970 <HAL_UART_IRQHandler+0x514>
      return;
 800896a:	bf00      	nop
 800896c:	e000      	b.n	8008970 <HAL_UART_IRQHandler+0x514>
      return;
 800896e:	bf00      	nop
  }
}
 8008970:	37e8      	adds	r7, #232	; 0xe8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop

08008978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b095      	sub	sp, #84	; 0x54
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	330c      	adds	r3, #12
 80089da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	330c      	adds	r3, #12
 80089f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089f4:	643a      	str	r2, [r7, #64]	; 0x40
 80089f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e5      	bne.n	80089d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3314      	adds	r3, #20
 8008a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	f023 0301 	bic.w	r3, r3, #1
 8008a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3314      	adds	r3, #20
 8008a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e5      	bne.n	8008a08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d119      	bne.n	8008a78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f023 0310 	bic.w	r3, r3, #16
 8008a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a64:	61ba      	str	r2, [r7, #24]
 8008a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6979      	ldr	r1, [r7, #20]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	613b      	str	r3, [r7, #16]
   return(result);
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e5      	bne.n	8008a44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a86:	bf00      	nop
 8008a88:	3754      	adds	r7, #84	; 0x54
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff ff77 	bl	80089a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ab2:	bf00      	nop
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b21      	cmp	r3, #33	; 0x21
 8008acc:	d13e      	bne.n	8008b4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad6:	d114      	bne.n	8008b02 <UART_Transmit_IT+0x48>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d110      	bne.n	8008b02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008af4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	1c9a      	adds	r2, r3, #2
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	621a      	str	r2, [r3, #32]
 8008b00:	e008      	b.n	8008b14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	1c59      	adds	r1, r3, #1
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	6211      	str	r1, [r2, #32]
 8008b0c:	781a      	ldrb	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	4619      	mov	r1, r3
 8008b22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10f      	bne.n	8008b48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e000      	b.n	8008b4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b4c:	2302      	movs	r3, #2
  }
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff fefc 	bl	8008978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b08c      	sub	sp, #48	; 0x30
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b22      	cmp	r3, #34	; 0x22
 8008b9c:	f040 80ab 	bne.w	8008cf6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba8:	d117      	bne.n	8008bda <UART_Receive_IT+0x50>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d113      	bne.n	8008bda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	1c9a      	adds	r2, r3, #2
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8008bd8:	e026      	b.n	8008c28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bec:	d007      	beq.n	8008bfe <UART_Receive_IT+0x74>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <UART_Receive_IT+0x82>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	e008      	b.n	8008c1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	4619      	mov	r1, r3
 8008c36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d15a      	bne.n	8008cf2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0220 	bic.w	r2, r2, #32
 8008c4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	695a      	ldr	r2, [r3, #20]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0201 	bic.w	r2, r2, #1
 8008c6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d135      	bne.n	8008ce8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	330c      	adds	r3, #12
 8008c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	613b      	str	r3, [r7, #16]
   return(result);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f023 0310 	bic.w	r3, r3, #16
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	330c      	adds	r3, #12
 8008ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca2:	623a      	str	r2, [r7, #32]
 8008ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	69f9      	ldr	r1, [r7, #28]
 8008ca8:	6a3a      	ldr	r2, [r7, #32]
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e5      	bne.n	8008c82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0310 	and.w	r3, r3, #16
 8008cc0:	2b10      	cmp	r3, #16
 8008cc2:	d10a      	bne.n	8008cda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff fe67 	bl	80089b4 <HAL_UARTEx_RxEventCallback>
 8008ce6:	e002      	b.n	8008cee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff fe4f 	bl	800898c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e002      	b.n	8008cf8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e000      	b.n	8008cf8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008cf6:	2302      	movs	r3, #2
  }
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3730      	adds	r7, #48	; 0x30
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d04:	b0c0      	sub	sp, #256	; 0x100
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1c:	68d9      	ldr	r1, [r3, #12]
 8008d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	ea40 0301 	orr.w	r3, r0, r1
 8008d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	431a      	orrs	r2, r3
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d58:	f021 010c 	bic.w	r1, r1, #12
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d66:	430b      	orrs	r3, r1
 8008d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d7a:	6999      	ldr	r1, [r3, #24]
 8008d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	ea40 0301 	orr.w	r3, r0, r1
 8008d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4b8f      	ldr	r3, [pc, #572]	; (8008fcc <UART_SetConfig+0x2cc>)
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d005      	beq.n	8008da0 <UART_SetConfig+0xa0>
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b8d      	ldr	r3, [pc, #564]	; (8008fd0 <UART_SetConfig+0x2d0>)
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d104      	bne.n	8008daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008da0:	f7fd f992 	bl	80060c8 <HAL_RCC_GetPCLK2Freq>
 8008da4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008da8:	e003      	b.n	8008db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008daa:	f7fd f979 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8008dae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dbc:	f040 810c 	bne.w	8008fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008dca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	1891      	adds	r1, r2, r2
 8008dd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008dda:	415b      	adcs	r3, r3
 8008ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008de2:	4621      	mov	r1, r4
 8008de4:	eb12 0801 	adds.w	r8, r2, r1
 8008de8:	4629      	mov	r1, r5
 8008dea:	eb43 0901 	adc.w	r9, r3, r1
 8008dee:	f04f 0200 	mov.w	r2, #0
 8008df2:	f04f 0300 	mov.w	r3, #0
 8008df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e02:	4690      	mov	r8, r2
 8008e04:	4699      	mov	r9, r3
 8008e06:	4623      	mov	r3, r4
 8008e08:	eb18 0303 	adds.w	r3, r8, r3
 8008e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e10:	462b      	mov	r3, r5
 8008e12:	eb49 0303 	adc.w	r3, r9, r3
 8008e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e2e:	460b      	mov	r3, r1
 8008e30:	18db      	adds	r3, r3, r3
 8008e32:	653b      	str	r3, [r7, #80]	; 0x50
 8008e34:	4613      	mov	r3, r2
 8008e36:	eb42 0303 	adc.w	r3, r2, r3
 8008e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e44:	f7f7 ff50 	bl	8000ce8 <__aeabi_uldivmod>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4b61      	ldr	r3, [pc, #388]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e52:	095b      	lsrs	r3, r3, #5
 8008e54:	011c      	lsls	r4, r3, #4
 8008e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	1891      	adds	r1, r2, r2
 8008e6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e70:	415b      	adcs	r3, r3
 8008e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e78:	4641      	mov	r1, r8
 8008e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8008e7e:	4649      	mov	r1, r9
 8008e80:	eb43 0b01 	adc.w	fp, r3, r1
 8008e84:	f04f 0200 	mov.w	r2, #0
 8008e88:	f04f 0300 	mov.w	r3, #0
 8008e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e98:	4692      	mov	sl, r2
 8008e9a:	469b      	mov	fp, r3
 8008e9c:	4643      	mov	r3, r8
 8008e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8008ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8008eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	18db      	adds	r3, r3, r3
 8008ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8008eca:	4613      	mov	r3, r2
 8008ecc:	eb42 0303 	adc.w	r3, r2, r3
 8008ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008eda:	f7f7 ff05 	bl	8000ce8 <__aeabi_uldivmod>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4b3b      	ldr	r3, [pc, #236]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8008eea:	095b      	lsrs	r3, r3, #5
 8008eec:	2264      	movs	r2, #100	; 0x64
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
 8008ef2:	1acb      	subs	r3, r1, r3
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008efa:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008efc:	fba3 2302 	umull	r2, r3, r3, r2
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f08:	441c      	add	r4, r3
 8008f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	1891      	adds	r1, r2, r2
 8008f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f24:	415b      	adcs	r3, r3
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f2c:	4641      	mov	r1, r8
 8008f2e:	1851      	adds	r1, r2, r1
 8008f30:	6339      	str	r1, [r7, #48]	; 0x30
 8008f32:	4649      	mov	r1, r9
 8008f34:	414b      	adcs	r3, r1
 8008f36:	637b      	str	r3, [r7, #52]	; 0x34
 8008f38:	f04f 0200 	mov.w	r2, #0
 8008f3c:	f04f 0300 	mov.w	r3, #0
 8008f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f44:	4659      	mov	r1, fp
 8008f46:	00cb      	lsls	r3, r1, #3
 8008f48:	4651      	mov	r1, sl
 8008f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f4e:	4651      	mov	r1, sl
 8008f50:	00ca      	lsls	r2, r1, #3
 8008f52:	4610      	mov	r0, r2
 8008f54:	4619      	mov	r1, r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	4642      	mov	r2, r8
 8008f5a:	189b      	adds	r3, r3, r2
 8008f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f60:	464b      	mov	r3, r9
 8008f62:	460a      	mov	r2, r1
 8008f64:	eb42 0303 	adc.w	r3, r2, r3
 8008f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f80:	460b      	mov	r3, r1
 8008f82:	18db      	adds	r3, r3, r3
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f86:	4613      	mov	r3, r2
 8008f88:	eb42 0303 	adc.w	r3, r2, r3
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f96:	f7f7 fea7 	bl	8000ce8 <__aeabi_uldivmod>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa4:	095b      	lsrs	r3, r3, #5
 8008fa6:	2164      	movs	r1, #100	; 0x64
 8008fa8:	fb01 f303 	mul.w	r3, r1, r3
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	3332      	adds	r3, #50	; 0x32
 8008fb2:	4a08      	ldr	r2, [pc, #32]	; (8008fd4 <UART_SetConfig+0x2d4>)
 8008fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	f003 0207 	and.w	r2, r3, #7
 8008fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4422      	add	r2, r4
 8008fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fc8:	e105      	b.n	80091d6 <UART_SetConfig+0x4d6>
 8008fca:	bf00      	nop
 8008fcc:	40011000 	.word	0x40011000
 8008fd0:	40011400 	.word	0x40011400
 8008fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008fea:	4642      	mov	r2, r8
 8008fec:	464b      	mov	r3, r9
 8008fee:	1891      	adds	r1, r2, r2
 8008ff0:	6239      	str	r1, [r7, #32]
 8008ff2:	415b      	adcs	r3, r3
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	1854      	adds	r4, r2, r1
 8008ffe:	4649      	mov	r1, r9
 8009000:	eb43 0501 	adc.w	r5, r3, r1
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	f04f 0300 	mov.w	r3, #0
 800900c:	00eb      	lsls	r3, r5, #3
 800900e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009012:	00e2      	lsls	r2, r4, #3
 8009014:	4614      	mov	r4, r2
 8009016:	461d      	mov	r5, r3
 8009018:	4643      	mov	r3, r8
 800901a:	18e3      	adds	r3, r4, r3
 800901c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009020:	464b      	mov	r3, r9
 8009022:	eb45 0303 	adc.w	r3, r5, r3
 8009026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800902a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800903a:	f04f 0200 	mov.w	r2, #0
 800903e:	f04f 0300 	mov.w	r3, #0
 8009042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009046:	4629      	mov	r1, r5
 8009048:	008b      	lsls	r3, r1, #2
 800904a:	4621      	mov	r1, r4
 800904c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009050:	4621      	mov	r1, r4
 8009052:	008a      	lsls	r2, r1, #2
 8009054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009058:	f7f7 fe46 	bl	8000ce8 <__aeabi_uldivmod>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4b60      	ldr	r3, [pc, #384]	; (80091e4 <UART_SetConfig+0x4e4>)
 8009062:	fba3 2302 	umull	r2, r3, r3, r2
 8009066:	095b      	lsrs	r3, r3, #5
 8009068:	011c      	lsls	r4, r3, #4
 800906a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800906e:	2200      	movs	r2, #0
 8009070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009074:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800907c:	4642      	mov	r2, r8
 800907e:	464b      	mov	r3, r9
 8009080:	1891      	adds	r1, r2, r2
 8009082:	61b9      	str	r1, [r7, #24]
 8009084:	415b      	adcs	r3, r3
 8009086:	61fb      	str	r3, [r7, #28]
 8009088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800908c:	4641      	mov	r1, r8
 800908e:	1851      	adds	r1, r2, r1
 8009090:	6139      	str	r1, [r7, #16]
 8009092:	4649      	mov	r1, r9
 8009094:	414b      	adcs	r3, r1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	f04f 0300 	mov.w	r3, #0
 80090a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090a4:	4659      	mov	r1, fp
 80090a6:	00cb      	lsls	r3, r1, #3
 80090a8:	4651      	mov	r1, sl
 80090aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090ae:	4651      	mov	r1, sl
 80090b0:	00ca      	lsls	r2, r1, #3
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	4603      	mov	r3, r0
 80090b8:	4642      	mov	r2, r8
 80090ba:	189b      	adds	r3, r3, r2
 80090bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090c0:	464b      	mov	r3, r9
 80090c2:	460a      	mov	r2, r1
 80090c4:	eb42 0303 	adc.w	r3, r2, r3
 80090c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80090d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090e4:	4649      	mov	r1, r9
 80090e6:	008b      	lsls	r3, r1, #2
 80090e8:	4641      	mov	r1, r8
 80090ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090ee:	4641      	mov	r1, r8
 80090f0:	008a      	lsls	r2, r1, #2
 80090f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090f6:	f7f7 fdf7 	bl	8000ce8 <__aeabi_uldivmod>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4b39      	ldr	r3, [pc, #228]	; (80091e4 <UART_SetConfig+0x4e4>)
 8009100:	fba3 1302 	umull	r1, r3, r3, r2
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	2164      	movs	r1, #100	; 0x64
 8009108:	fb01 f303 	mul.w	r3, r1, r3
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	3332      	adds	r3, #50	; 0x32
 8009112:	4a34      	ldr	r2, [pc, #208]	; (80091e4 <UART_SetConfig+0x4e4>)
 8009114:	fba2 2303 	umull	r2, r3, r2, r3
 8009118:	095b      	lsrs	r3, r3, #5
 800911a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800911e:	441c      	add	r4, r3
 8009120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009124:	2200      	movs	r2, #0
 8009126:	673b      	str	r3, [r7, #112]	; 0x70
 8009128:	677a      	str	r2, [r7, #116]	; 0x74
 800912a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800912e:	4642      	mov	r2, r8
 8009130:	464b      	mov	r3, r9
 8009132:	1891      	adds	r1, r2, r2
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	415b      	adcs	r3, r3
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800913e:	4641      	mov	r1, r8
 8009140:	1851      	adds	r1, r2, r1
 8009142:	6039      	str	r1, [r7, #0]
 8009144:	4649      	mov	r1, r9
 8009146:	414b      	adcs	r3, r1
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009156:	4659      	mov	r1, fp
 8009158:	00cb      	lsls	r3, r1, #3
 800915a:	4651      	mov	r1, sl
 800915c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009160:	4651      	mov	r1, sl
 8009162:	00ca      	lsls	r2, r1, #3
 8009164:	4610      	mov	r0, r2
 8009166:	4619      	mov	r1, r3
 8009168:	4603      	mov	r3, r0
 800916a:	4642      	mov	r2, r8
 800916c:	189b      	adds	r3, r3, r2
 800916e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009170:	464b      	mov	r3, r9
 8009172:	460a      	mov	r2, r1
 8009174:	eb42 0303 	adc.w	r3, r2, r3
 8009178:	66fb      	str	r3, [r7, #108]	; 0x6c
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	663b      	str	r3, [r7, #96]	; 0x60
 8009184:	667a      	str	r2, [r7, #100]	; 0x64
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009192:	4649      	mov	r1, r9
 8009194:	008b      	lsls	r3, r1, #2
 8009196:	4641      	mov	r1, r8
 8009198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800919c:	4641      	mov	r1, r8
 800919e:	008a      	lsls	r2, r1, #2
 80091a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80091a4:	f7f7 fda0 	bl	8000ce8 <__aeabi_uldivmod>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <UART_SetConfig+0x4e4>)
 80091ae:	fba3 1302 	umull	r1, r3, r3, r2
 80091b2:	095b      	lsrs	r3, r3, #5
 80091b4:	2164      	movs	r1, #100	; 0x64
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	011b      	lsls	r3, r3, #4
 80091be:	3332      	adds	r3, #50	; 0x32
 80091c0:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <UART_SetConfig+0x4e4>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	095b      	lsrs	r3, r3, #5
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4422      	add	r2, r4
 80091d4:	609a      	str	r2, [r3, #8]
}
 80091d6:	bf00      	nop
 80091d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091dc:	46bd      	mov	sp, r7
 80091de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091e2:	bf00      	nop
 80091e4:	51eb851f 	.word	0x51eb851f

080091e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091e8:	b084      	sub	sp, #16
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	f107 001c 	add.w	r0, r7, #28
 80091f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d122      	bne.n	8009246 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d105      	bne.n	800923a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 fbe8 	bl	800aa10 <USB_CoreReset>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]
 8009244:	e01a      	b.n	800927c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fbdc 	bl	800aa10 <USB_CoreReset>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800925c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	639a      	str	r2, [r3, #56]	; 0x38
 800926e:	e005      	b.n	800927c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	2b01      	cmp	r3, #1
 8009280:	d10b      	bne.n	800929a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f043 0206 	orr.w	r2, r3, #6
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f043 0220 	orr.w	r2, r3, #32
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092a6:	b004      	add	sp, #16
 80092a8:	4770      	bx	lr
	...

080092ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d165      	bne.n	800938c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4a41      	ldr	r2, [pc, #260]	; (80093c8 <USB_SetTurnaroundTime+0x11c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d906      	bls.n	80092d6 <USB_SetTurnaroundTime+0x2a>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4a40      	ldr	r2, [pc, #256]	; (80093cc <USB_SetTurnaroundTime+0x120>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d202      	bcs.n	80092d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80092d0:	230f      	movs	r3, #15
 80092d2:	617b      	str	r3, [r7, #20]
 80092d4:	e062      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	4a3c      	ldr	r2, [pc, #240]	; (80093cc <USB_SetTurnaroundTime+0x120>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d306      	bcc.n	80092ec <USB_SetTurnaroundTime+0x40>
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	4a3b      	ldr	r2, [pc, #236]	; (80093d0 <USB_SetTurnaroundTime+0x124>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d202      	bcs.n	80092ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80092e6:	230e      	movs	r3, #14
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	e057      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	4a38      	ldr	r2, [pc, #224]	; (80093d0 <USB_SetTurnaroundTime+0x124>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d306      	bcc.n	8009302 <USB_SetTurnaroundTime+0x56>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4a37      	ldr	r2, [pc, #220]	; (80093d4 <USB_SetTurnaroundTime+0x128>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d202      	bcs.n	8009302 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80092fc:	230d      	movs	r3, #13
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	e04c      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	4a33      	ldr	r2, [pc, #204]	; (80093d4 <USB_SetTurnaroundTime+0x128>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d306      	bcc.n	8009318 <USB_SetTurnaroundTime+0x6c>
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	4a32      	ldr	r2, [pc, #200]	; (80093d8 <USB_SetTurnaroundTime+0x12c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d802      	bhi.n	8009318 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009312:	230c      	movs	r3, #12
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	e041      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4a2f      	ldr	r2, [pc, #188]	; (80093d8 <USB_SetTurnaroundTime+0x12c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d906      	bls.n	800932e <USB_SetTurnaroundTime+0x82>
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	4a2e      	ldr	r2, [pc, #184]	; (80093dc <USB_SetTurnaroundTime+0x130>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d802      	bhi.n	800932e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009328:	230b      	movs	r3, #11
 800932a:	617b      	str	r3, [r7, #20]
 800932c:	e036      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	4a2a      	ldr	r2, [pc, #168]	; (80093dc <USB_SetTurnaroundTime+0x130>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d906      	bls.n	8009344 <USB_SetTurnaroundTime+0x98>
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	4a29      	ldr	r2, [pc, #164]	; (80093e0 <USB_SetTurnaroundTime+0x134>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d802      	bhi.n	8009344 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800933e:	230a      	movs	r3, #10
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e02b      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4a26      	ldr	r2, [pc, #152]	; (80093e0 <USB_SetTurnaroundTime+0x134>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d906      	bls.n	800935a <USB_SetTurnaroundTime+0xae>
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	4a25      	ldr	r2, [pc, #148]	; (80093e4 <USB_SetTurnaroundTime+0x138>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d202      	bcs.n	800935a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009354:	2309      	movs	r3, #9
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	e020      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	4a21      	ldr	r2, [pc, #132]	; (80093e4 <USB_SetTurnaroundTime+0x138>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d306      	bcc.n	8009370 <USB_SetTurnaroundTime+0xc4>
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	4a20      	ldr	r2, [pc, #128]	; (80093e8 <USB_SetTurnaroundTime+0x13c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d802      	bhi.n	8009370 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800936a:	2308      	movs	r3, #8
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	e015      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4a1d      	ldr	r2, [pc, #116]	; (80093e8 <USB_SetTurnaroundTime+0x13c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d906      	bls.n	8009386 <USB_SetTurnaroundTime+0xda>
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	4a1c      	ldr	r2, [pc, #112]	; (80093ec <USB_SetTurnaroundTime+0x140>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d202      	bcs.n	8009386 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009380:	2307      	movs	r3, #7
 8009382:	617b      	str	r3, [r7, #20]
 8009384:	e00a      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009386:	2306      	movs	r3, #6
 8009388:	617b      	str	r3, [r7, #20]
 800938a:	e007      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d102      	bne.n	8009398 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009392:	2309      	movs	r3, #9
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	e001      	b.n	800939c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009398:	2309      	movs	r3, #9
 800939a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68da      	ldr	r2, [r3, #12]
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	029b      	lsls	r3, r3, #10
 80093b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80093b4:	431a      	orrs	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	371c      	adds	r7, #28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	00d8acbf 	.word	0x00d8acbf
 80093cc:	00e4e1c0 	.word	0x00e4e1c0
 80093d0:	00f42400 	.word	0x00f42400
 80093d4:	01067380 	.word	0x01067380
 80093d8:	011a499f 	.word	0x011a499f
 80093dc:	01312cff 	.word	0x01312cff
 80093e0:	014ca43f 	.word	0x014ca43f
 80093e4:	016e3600 	.word	0x016e3600
 80093e8:	01a6ab1f 	.word	0x01a6ab1f
 80093ec:	01e84800 	.word	0x01e84800

080093f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f043 0201 	orr.w	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f023 0201 	bic.w	r2, r3, #1
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d115      	bne.n	8009482 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009462:	2001      	movs	r0, #1
 8009464:	f7fa fb34 	bl	8003ad0 <HAL_Delay>
      ms++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 fa3f 	bl	800a8f2 <USB_GetMode>
 8009474:	4603      	mov	r3, r0
 8009476:	2b01      	cmp	r3, #1
 8009478:	d01e      	beq.n	80094b8 <USB_SetCurrentMode+0x84>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b31      	cmp	r3, #49	; 0x31
 800947e:	d9f0      	bls.n	8009462 <USB_SetCurrentMode+0x2e>
 8009480:	e01a      	b.n	80094b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d115      	bne.n	80094b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009494:	2001      	movs	r0, #1
 8009496:	f7fa fb1b 	bl	8003ad0 <HAL_Delay>
      ms++;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 fa26 	bl	800a8f2 <USB_GetMode>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <USB_SetCurrentMode+0x84>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b31      	cmp	r3, #49	; 0x31
 80094b0:	d9f0      	bls.n	8009494 <USB_SetCurrentMode+0x60>
 80094b2:	e001      	b.n	80094b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e005      	b.n	80094c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b32      	cmp	r3, #50	; 0x32
 80094bc:	d101      	bne.n	80094c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094cc:	b084      	sub	sp, #16
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b086      	sub	sp, #24
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80094e6:	2300      	movs	r3, #0
 80094e8:	613b      	str	r3, [r7, #16]
 80094ea:	e009      	b.n	8009500 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	3340      	adds	r3, #64	; 0x40
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	2200      	movs	r2, #0
 80094f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	3301      	adds	r3, #1
 80094fe:	613b      	str	r3, [r7, #16]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	2b0e      	cmp	r3, #14
 8009504:	d9f2      	bls.n	80094ec <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009508:	2b00      	cmp	r3, #0
 800950a:	d11c      	bne.n	8009546 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800951a:	f043 0302 	orr.w	r3, r3, #2
 800951e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009524:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	e005      	b.n	8009552 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009558:	461a      	mov	r2, r3
 800955a:	2300      	movs	r3, #0
 800955c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009564:	4619      	mov	r1, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956c:	461a      	mov	r2, r3
 800956e:	680b      	ldr	r3, [r1, #0]
 8009570:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	2b01      	cmp	r3, #1
 8009576:	d10c      	bne.n	8009592 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f965 	bl	8009850 <USB_SetDevSpeed>
 8009586:	e008      	b.n	800959a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009588:	2101      	movs	r1, #1
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f960 	bl	8009850 <USB_SetDevSpeed>
 8009590:	e003      	b.n	800959a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009592:	2103      	movs	r1, #3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f95b 	bl	8009850 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800959a:	2110      	movs	r1, #16
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f8f3 	bl	8009788 <USB_FlushTxFifo>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f91f 	bl	80097f0 <USB_FlushRxFifo>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c2:	461a      	mov	r2, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ce:	461a      	mov	r2, r3
 80095d0:	2300      	movs	r3, #0
 80095d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095da:	461a      	mov	r2, r3
 80095dc:	2300      	movs	r3, #0
 80095de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095e0:	2300      	movs	r3, #0
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	e043      	b.n	800966e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095fc:	d118      	bne.n	8009630 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10a      	bne.n	800961a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009610:	461a      	mov	r2, r3
 8009612:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	e013      	b.n	8009642 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009626:	461a      	mov	r2, r3
 8009628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	e008      	b.n	8009642 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963c:	461a      	mov	r2, r3
 800963e:	2300      	movs	r3, #0
 8009640:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800964e:	461a      	mov	r2, r3
 8009650:	2300      	movs	r3, #0
 8009652:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009660:	461a      	mov	r2, r3
 8009662:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009666:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	3301      	adds	r3, #1
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	429a      	cmp	r2, r3
 8009674:	d3b7      	bcc.n	80095e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009676:	2300      	movs	r3, #0
 8009678:	613b      	str	r3, [r7, #16]
 800967a:	e043      	b.n	8009704 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800968e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009692:	d118      	bne.n	80096c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10a      	bne.n	80096b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a6:	461a      	mov	r2, r3
 80096a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	e013      	b.n	80096d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096bc:	461a      	mov	r2, r3
 80096be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	e008      	b.n	80096d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d2:	461a      	mov	r2, r3
 80096d4:	2300      	movs	r3, #0
 80096d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e4:	461a      	mov	r2, r3
 80096e6:	2300      	movs	r3, #0
 80096e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f6:	461a      	mov	r2, r3
 80096f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	3301      	adds	r3, #1
 8009702:	613b      	str	r3, [r7, #16]
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	429a      	cmp	r2, r3
 800970a:	d3b7      	bcc.n	800967c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800971a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800971e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800972c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	2b00      	cmp	r3, #0
 8009732:	d105      	bne.n	8009740 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	f043 0210 	orr.w	r2, r3, #16
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	699a      	ldr	r2, [r3, #24]
 8009744:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <USB_DevInit+0x2b8>)
 8009746:	4313      	orrs	r3, r2
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800974c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d005      	beq.n	800975e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f043 0208 	orr.w	r2, r3, #8
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800975e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009760:	2b01      	cmp	r3, #1
 8009762:	d107      	bne.n	8009774 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800976c:	f043 0304 	orr.w	r3, r3, #4
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009780:	b004      	add	sp, #16
 8009782:	4770      	bx	lr
 8009784:	803c3800 	.word	0x803c3800

08009788 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009792:	2300      	movs	r3, #0
 8009794:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3301      	adds	r3, #1
 800979a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a13      	ldr	r2, [pc, #76]	; (80097ec <USB_FlushTxFifo+0x64>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d901      	bls.n	80097a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e01b      	b.n	80097e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	daf2      	bge.n	8009796 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	019b      	lsls	r3, r3, #6
 80097b8:	f043 0220 	orr.w	r2, r3, #32
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4a08      	ldr	r2, [pc, #32]	; (80097ec <USB_FlushTxFifo+0x64>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d901      	bls.n	80097d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e006      	b.n	80097e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d0f0      	beq.n	80097c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	00030d40 	.word	0x00030d40

080097f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3301      	adds	r3, #1
 8009800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4a11      	ldr	r2, [pc, #68]	; (800984c <USB_FlushRxFifo+0x5c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d901      	bls.n	800980e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e018      	b.n	8009840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	daf2      	bge.n	80097fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2210      	movs	r2, #16
 800981e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3301      	adds	r3, #1
 8009824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4a08      	ldr	r2, [pc, #32]	; (800984c <USB_FlushRxFifo+0x5c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d901      	bls.n	8009832 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e006      	b.n	8009840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f003 0310 	and.w	r3, r3, #16
 800983a:	2b10      	cmp	r3, #16
 800983c:	d0f0      	beq.n	8009820 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	00030d40 	.word	0x00030d40

08009850 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009870:	4313      	orrs	r3, r2
 8009872:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009882:	b480      	push	{r7}
 8009884:	b087      	sub	sp, #28
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f003 0306 	and.w	r3, r3, #6
 800989a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80098a2:	2300      	movs	r3, #0
 80098a4:	75fb      	strb	r3, [r7, #23]
 80098a6:	e00a      	b.n	80098be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d002      	beq.n	80098b4 <USB_GetDevSpeed+0x32>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b06      	cmp	r3, #6
 80098b2:	d102      	bne.n	80098ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80098b4:	2302      	movs	r3, #2
 80098b6:	75fb      	strb	r3, [r7, #23]
 80098b8:	e001      	b.n	80098be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80098ba:	230f      	movs	r3, #15
 80098bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	371c      	adds	r7, #28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	785b      	ldrb	r3, [r3, #1]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d13a      	bne.n	800995e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	f003 030f 	and.w	r3, r3, #15
 80098f8:	2101      	movs	r1, #1
 80098fa:	fa01 f303 	lsl.w	r3, r1, r3
 80098fe:	b29b      	uxth	r3, r3
 8009900:	68f9      	ldr	r1, [r7, #12]
 8009902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009906:	4313      	orrs	r3, r2
 8009908:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d155      	bne.n	80099cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	791b      	ldrb	r3, [r3, #4]
 800993a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800993c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	059b      	lsls	r3, r3, #22
 8009942:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009944:	4313      	orrs	r3, r2
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	440a      	add	r2, r1
 800994e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800995a:	6013      	str	r3, [r2, #0]
 800995c:	e036      	b.n	80099cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009964:	69da      	ldr	r2, [r3, #28]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	2101      	movs	r1, #1
 8009970:	fa01 f303 	lsl.w	r3, r1, r3
 8009974:	041b      	lsls	r3, r3, #16
 8009976:	68f9      	ldr	r1, [r7, #12]
 8009978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800997c:	4313      	orrs	r3, r2
 800997e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d11a      	bne.n	80099cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	791b      	ldrb	r3, [r3, #4]
 80099b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099b2:	430b      	orrs	r3, r1
 80099b4:	4313      	orrs	r3, r2
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	0151      	lsls	r1, r2, #5
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	440a      	add	r2, r1
 80099be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	785b      	ldrb	r3, [r3, #1]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d161      	bne.n	8009abc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a0e:	d11f      	bne.n	8009a50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	0151      	lsls	r1, r2, #5
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	440a      	add	r2, r1
 8009a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	0151      	lsls	r1, r2, #5
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	440a      	add	r2, r1
 8009a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	2101      	movs	r1, #1
 8009a62:	fa01 f303 	lsl.w	r3, r1, r3
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	43db      	mvns	r3, r3
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a70:	4013      	ands	r3, r2
 8009a72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7a:	69da      	ldr	r2, [r3, #28]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	2101      	movs	r1, #1
 8009a86:	fa01 f303 	lsl.w	r3, r1, r3
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	43db      	mvns	r3, r3
 8009a8e:	68f9      	ldr	r1, [r7, #12]
 8009a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a94:	4013      	ands	r3, r2
 8009a96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	0159      	lsls	r1, r3, #5
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	440b      	add	r3, r1
 8009aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4b35      	ldr	r3, [pc, #212]	; (8009b8c <USB_DeactivateEndpoint+0x1b0>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	600b      	str	r3, [r1, #0]
 8009aba:	e060      	b.n	8009b7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	015a      	lsls	r2, r3, #5
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ad2:	d11f      	bne.n	8009b14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	0151      	lsls	r1, r2, #5
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	440a      	add	r2, r1
 8009aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009af2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	0151      	lsls	r1, r2, #5
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	440a      	add	r2, r1
 8009b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	f003 030f 	and.w	r3, r3, #15
 8009b24:	2101      	movs	r1, #1
 8009b26:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2a:	041b      	lsls	r3, r3, #16
 8009b2c:	43db      	mvns	r3, r3
 8009b2e:	68f9      	ldr	r1, [r7, #12]
 8009b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b34:	4013      	ands	r3, r2
 8009b36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	f003 030f 	and.w	r3, r3, #15
 8009b48:	2101      	movs	r1, #1
 8009b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4e:	041b      	lsls	r3, r3, #16
 8009b50:	43db      	mvns	r3, r3
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b58:	4013      	ands	r3, r2
 8009b5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	0159      	lsls	r1, r3, #5
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	440b      	add	r3, r1
 8009b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b76:	4619      	mov	r1, r3
 8009b78:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <USB_DeactivateEndpoint+0x1b4>)
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	ec337800 	.word	0xec337800
 8009b90:	eff37800 	.word	0xeff37800

08009b94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	f040 815c 	bne.w	8009e6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d132      	bne.n	8009c24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	0151      	lsls	r1, r2, #5
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	440a      	add	r2, r1
 8009bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	69fa      	ldr	r2, [r7, #28]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	0151      	lsls	r1, r2, #5
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	440a      	add	r2, r1
 8009c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1c:	0cdb      	lsrs	r3, r3, #19
 8009c1e:	04db      	lsls	r3, r3, #19
 8009c20:	6113      	str	r3, [r2, #16]
 8009c22:	e074      	b.n	8009d0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3e:	0cdb      	lsrs	r3, r3, #19
 8009c40:	04db      	lsls	r3, r3, #19
 8009c42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	69ba      	ldr	r2, [r7, #24]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	69fa      	ldr	r2, [r7, #28]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	6999      	ldr	r1, [r3, #24]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	440b      	add	r3, r1
 8009c80:	1e59      	subs	r1, r3, #1
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c8a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c8c:	4b9d      	ldr	r3, [pc, #628]	; (8009f04 <USB_EPStartXfer+0x370>)
 8009c8e:	400b      	ands	r3, r1
 8009c90:	69b9      	ldr	r1, [r7, #24]
 8009c92:	0148      	lsls	r0, r1, #5
 8009c94:	69f9      	ldr	r1, [r7, #28]
 8009c96:	4401      	add	r1, r0
 8009c98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cb6:	69b9      	ldr	r1, [r7, #24]
 8009cb8:	0148      	lsls	r0, r1, #5
 8009cba:	69f9      	ldr	r1, [r7, #28]
 8009cbc:	4401      	add	r1, r0
 8009cbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	791b      	ldrb	r3, [r3, #4]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d11f      	bne.n	8009d0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	69ba      	ldr	r2, [r7, #24]
 8009cde:	0151      	lsls	r1, r2, #5
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	440a      	add	r2, r1
 8009ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009cec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	69ba      	ldr	r2, [r7, #24]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d14b      	bne.n	8009dac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d009      	beq.n	8009d30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	791b      	ldrb	r3, [r3, #4]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d128      	bne.n	8009d8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d110      	bne.n	8009d6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	e00f      	b.n	8009d8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69ba      	ldr	r2, [r7, #24]
 8009d7a:	0151      	lsls	r1, r2, #5
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	440a      	add	r2, r1
 8009d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	0151      	lsls	r1, r2, #5
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	440a      	add	r2, r1
 8009da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	e133      	b.n	800a014 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	0151      	lsls	r1, r2, #5
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	791b      	ldrb	r3, [r3, #4]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d015      	beq.n	8009e00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 811b 	beq.w	800a014 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	2101      	movs	r1, #1
 8009df0:	fa01 f303 	lsl.w	r3, r1, r3
 8009df4:	69f9      	ldr	r1, [r7, #28]
 8009df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	634b      	str	r3, [r1, #52]	; 0x34
 8009dfe:	e109      	b.n	800a014 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d110      	bne.n	8009e32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	0151      	lsls	r1, r2, #5
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	440a      	add	r2, r1
 8009e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	e00f      	b.n	8009e52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	0151      	lsls	r1, r2, #5
 8009e44:	69fa      	ldr	r2, [r7, #28]
 8009e46:	440a      	add	r2, r1
 8009e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6919      	ldr	r1, [r3, #16]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	b298      	uxth	r0, r3
 8009e60:	79fb      	ldrb	r3, [r7, #7]
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	4603      	mov	r3, r0
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 fade 	bl	800a428 <USB_WritePacket>
 8009e6c:	e0d2      	b.n	800a014 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	0151      	lsls	r1, r2, #5
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	440a      	add	r2, r1
 8009e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e88:	0cdb      	lsrs	r3, r3, #19
 8009e8a:	04db      	lsls	r3, r3, #19
 8009e8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	0151      	lsls	r1, r2, #5
 8009ea0:	69fa      	ldr	r2, [r7, #28]
 8009ea2:	440a      	add	r2, r1
 8009ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ea8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009eac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009eb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d126      	bne.n	8009f08 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ed0:	69b9      	ldr	r1, [r7, #24]
 8009ed2:	0148      	lsls	r0, r1, #5
 8009ed4:	69f9      	ldr	r1, [r7, #28]
 8009ed6:	4401      	add	r1, r0
 8009ed8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009edc:	4313      	orrs	r3, r2
 8009ede:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	0151      	lsls	r1, r2, #5
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	440a      	add	r2, r1
 8009ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009efa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009efe:	6113      	str	r3, [r2, #16]
 8009f00:	e03a      	b.n	8009f78 <USB_EPStartXfer+0x3e4>
 8009f02:	bf00      	nop
 8009f04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	699a      	ldr	r2, [r3, #24]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	1e5a      	subs	r2, r3, #1
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	8afa      	ldrh	r2, [r7, #22]
 8009f24:	fb03 f202 	mul.w	r2, r3, r2
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f38:	691a      	ldr	r2, [r3, #16]
 8009f3a:	8afb      	ldrh	r3, [r7, #22]
 8009f3c:	04d9      	lsls	r1, r3, #19
 8009f3e:	4b38      	ldr	r3, [pc, #224]	; (800a020 <USB_EPStartXfer+0x48c>)
 8009f40:	400b      	ands	r3, r1
 8009f42:	69b9      	ldr	r1, [r7, #24]
 8009f44:	0148      	lsls	r0, r1, #5
 8009f46:	69f9      	ldr	r1, [r7, #28]
 8009f48:	4401      	add	r1, r0
 8009f4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f68:	69b9      	ldr	r1, [r7, #24]
 8009f6a:	0148      	lsls	r0, r1, #5
 8009f6c:	69f9      	ldr	r1, [r7, #28]
 8009f6e:	4401      	add	r1, r0
 8009f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f74:	4313      	orrs	r3, r2
 8009f76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10d      	bne.n	8009f9a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d009      	beq.n	8009f9a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	6919      	ldr	r1, [r3, #16]
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f96:	460a      	mov	r2, r1
 8009f98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	791b      	ldrb	r3, [r3, #4]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d128      	bne.n	8009ff4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d110      	bne.n	8009fd4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	0151      	lsls	r1, r2, #5
 8009fc4:	69fa      	ldr	r2, [r7, #28]
 8009fc6:	440a      	add	r2, r1
 8009fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	e00f      	b.n	8009ff4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	69ba      	ldr	r2, [r7, #24]
 8009fe4:	0151      	lsls	r1, r2, #5
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	440a      	add	r2, r1
 8009fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ff2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	0151      	lsls	r1, r2, #5
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	440a      	add	r2, r1
 800a00a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a00e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a012:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3720      	adds	r7, #32
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	1ff80000 	.word	0x1ff80000

0800a024 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	785b      	ldrb	r3, [r3, #1]
 800a040:	2b01      	cmp	r3, #1
 800a042:	f040 80ce 	bne.w	800a1e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d132      	bne.n	800a0b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	015a      	lsls	r2, r3, #5
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	4413      	add	r3, r2
 800a056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	0151      	lsls	r1, r2, #5
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	440a      	add	r2, r1
 800a064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a06c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	0151      	lsls	r1, r2, #5
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	440a      	add	r2, r1
 800a088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a08c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ac:	0cdb      	lsrs	r3, r3, #19
 800a0ae:	04db      	lsls	r3, r3, #19
 800a0b0:	6113      	str	r3, [r2, #16]
 800a0b2:	e04e      	b.n	800a152 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	0151      	lsls	r1, r2, #5
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	440a      	add	r2, r1
 800a0ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ce:	0cdb      	lsrs	r3, r3, #19
 800a0d0:	04db      	lsls	r3, r3, #19
 800a0d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	699a      	ldr	r2, [r3, #24]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	429a      	cmp	r2, r3
 800a102:	d903      	bls.n	800a10c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	0151      	lsls	r1, r2, #5
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	440a      	add	r2, r1
 800a122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a12a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	4413      	add	r3, r2
 800a134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a138:	691a      	ldr	r2, [r3, #16]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a142:	6939      	ldr	r1, [r7, #16]
 800a144:	0148      	lsls	r0, r1, #5
 800a146:	6979      	ldr	r1, [r7, #20]
 800a148:	4401      	add	r1, r0
 800a14a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a14e:	4313      	orrs	r3, r2
 800a150:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a152:	79fb      	ldrb	r3, [r7, #7]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d11e      	bne.n	800a196 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d009      	beq.n	800a174 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	461a      	mov	r2, r3
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	0151      	lsls	r1, r2, #5
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	440a      	add	r2, r1
 800a18a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a18e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	e097      	b.n	800a2c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	0151      	lsls	r1, r2, #5
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	440a      	add	r2, r1
 800a1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8083 	beq.w	800a2c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f003 030f 	and.w	r3, r3, #15
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d6:	6979      	ldr	r1, [r7, #20]
 800a1d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	634b      	str	r3, [r1, #52]	; 0x34
 800a1e0:	e071      	b.n	800a2c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	0151      	lsls	r1, r2, #5
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	440a      	add	r2, r1
 800a1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1fc:	0cdb      	lsrs	r3, r3, #19
 800a1fe:	04db      	lsls	r3, r3, #19
 800a200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	015a      	lsls	r2, r3, #5
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	4413      	add	r3, r2
 800a20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	0151      	lsls	r1, r2, #5
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	440a      	add	r2, r1
 800a218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a21c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a220:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a224:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	68da      	ldr	r2, [r3, #12]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a258:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a25c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a274:	6939      	ldr	r1, [r7, #16]
 800a276:	0148      	lsls	r0, r1, #5
 800a278:	6979      	ldr	r1, [r7, #20]
 800a27a:	4401      	add	r1, r0
 800a27c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a280:	4313      	orrs	r3, r2
 800a282:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d10d      	bne.n	800a2a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d009      	beq.n	800a2a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6919      	ldr	r1, [r3, #16]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a2:	460a      	mov	r2, r1
 800a2a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d14a      	bne.n	800a388 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a30a:	f040 8086 	bne.w	800a41a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	7812      	ldrb	r2, [r2, #0]
 800a322:	0151      	lsls	r1, r2, #5
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	440a      	add	r2, r1
 800a328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a32c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a330:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	7812      	ldrb	r2, [r2, #0]
 800a346:	0151      	lsls	r1, r2, #5
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	440a      	add	r2, r1
 800a34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a354:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3301      	adds	r3, #1
 800a35a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a362:	4293      	cmp	r3, r2
 800a364:	d902      	bls.n	800a36c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	75fb      	strb	r3, [r7, #23]
          break;
 800a36a:	e056      	b.n	800a41a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a384:	d0e7      	beq.n	800a356 <USB_EPStopXfer+0x82>
 800a386:	e048      	b.n	800a41a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a39c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3a0:	d13b      	bne.n	800a41a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	7812      	ldrb	r2, [r2, #0]
 800a3b6:	0151      	lsls	r1, r2, #5
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	440a      	add	r2, r1
 800a3bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	7812      	ldrb	r2, [r2, #0]
 800a3da:	0151      	lsls	r1, r2, #5
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	440a      	add	r2, r1
 800a3e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d902      	bls.n	800a400 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a3fe:	e00c      	b.n	800a41a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a418:	d0e7      	beq.n	800a3ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a428:	b480      	push	{r7}
 800a42a:	b089      	sub	sp, #36	; 0x24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4611      	mov	r1, r2
 800a434:	461a      	mov	r2, r3
 800a436:	460b      	mov	r3, r1
 800a438:	71fb      	strb	r3, [r7, #7]
 800a43a:	4613      	mov	r3, r2
 800a43c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d123      	bne.n	800a496 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a44e:	88bb      	ldrh	r3, [r7, #4]
 800a450:	3303      	adds	r3, #3
 800a452:	089b      	lsrs	r3, r3, #2
 800a454:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a456:	2300      	movs	r3, #0
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	e018      	b.n	800a48e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	031a      	lsls	r2, r3, #12
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	4413      	add	r3, r2
 800a464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a468:	461a      	mov	r2, r3
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	3301      	adds	r3, #1
 800a474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	3301      	adds	r3, #1
 800a47a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	3301      	adds	r3, #1
 800a480:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	3301      	adds	r3, #1
 800a486:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	3301      	adds	r3, #1
 800a48c:	61bb      	str	r3, [r7, #24]
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	429a      	cmp	r2, r3
 800a494:	d3e2      	bcc.n	800a45c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3724      	adds	r7, #36	; 0x24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b08b      	sub	sp, #44	; 0x2c
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4ba:	88fb      	ldrh	r3, [r7, #6]
 800a4bc:	089b      	lsrs	r3, r3, #2
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4c2:	88fb      	ldrh	r3, [r7, #6]
 800a4c4:	f003 0303 	and.w	r3, r3, #3
 800a4c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	623b      	str	r3, [r7, #32]
 800a4ce:	e014      	b.n	800a4fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	3301      	adds	r3, #1
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	623b      	str	r3, [r7, #32]
 800a4fa:	6a3a      	ldr	r2, [r7, #32]
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d3e6      	bcc.n	800a4d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a502:	8bfb      	ldrh	r3, [r7, #30]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d01e      	beq.n	800a546 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a508:	2300      	movs	r3, #0
 800a50a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a512:	461a      	mov	r2, r3
 800a514:	f107 0310 	add.w	r3, r7, #16
 800a518:	6812      	ldr	r2, [r2, #0]
 800a51a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	fa22 f303 	lsr.w	r3, r2, r3
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	701a      	strb	r2, [r3, #0]
      i++;
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	3301      	adds	r3, #1
 800a532:	623b      	str	r3, [r7, #32]
      pDest++;
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	3301      	adds	r3, #1
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a53a:	8bfb      	ldrh	r3, [r7, #30]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a540:	8bfb      	ldrh	r3, [r7, #30]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1ea      	bne.n	800a51c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a548:	4618      	mov	r0, r3
 800a54a:	372c      	adds	r7, #44	; 0x2c
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	785b      	ldrb	r3, [r3, #1]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d12c      	bne.n	800a5ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	db12      	blt.n	800a5a8 <USB_EPSetStall+0x54>
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00f      	beq.n	800a5a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	0151      	lsls	r1, r2, #5
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	440a      	add	r2, r1
 800a59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	e02b      	b.n	800a622 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	db12      	blt.n	800a602 <USB_EPSetStall+0xae>
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00f      	beq.n	800a602 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	0151      	lsls	r1, r2, #5
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	440a      	add	r2, r1
 800a5f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a600:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	440a      	add	r2, r1
 800a618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a61c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a620:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	785b      	ldrb	r3, [r3, #1]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d128      	bne.n	800a69e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	015a      	lsls	r2, r3, #5
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4413      	add	r3, r2
 800a654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	0151      	lsls	r1, r2, #5
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	440a      	add	r2, r1
 800a662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a66a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	791b      	ldrb	r3, [r3, #4]
 800a670:	2b03      	cmp	r3, #3
 800a672:	d003      	beq.n	800a67c <USB_EPClearStall+0x4c>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	791b      	ldrb	r3, [r3, #4]
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d138      	bne.n	800a6ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	0151      	lsls	r1, r2, #5
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	440a      	add	r2, r1
 800a692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	e027      	b.n	800a6ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	0151      	lsls	r1, r2, #5
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	440a      	add	r2, r1
 800a6b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	791b      	ldrb	r3, [r3, #4]
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d003      	beq.n	800a6ce <USB_EPClearStall+0x9e>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	791b      	ldrb	r3, [r3, #4]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d10f      	bne.n	800a6ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	015a      	lsls	r2, r3, #5
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	0151      	lsls	r1, r2, #5
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	440a      	add	r2, r1
 800a6e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a71a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a71e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a730:	68f9      	ldr	r1, [r7, #12]
 800a732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a736:	4313      	orrs	r3, r2
 800a738:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3714      	adds	r7, #20
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a776:	f023 0302 	bic.w	r3, r3, #2
 800a77a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b085      	sub	sp, #20
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7a4:	f023 0303 	bic.w	r3, r3, #3
 800a7a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7b8:	f043 0302 	orr.w	r3, r3, #2
 800a7bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b085      	sub	sp, #20
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	4013      	ands	r3, r2
 800a814:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	0c1b      	lsrs	r3, r3, #16
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	4013      	ands	r3, r2
 800a848:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	b29b      	uxth	r3, r3
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b085      	sub	sp, #20
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a86a:	78fb      	ldrb	r3, [r7, #3]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4413      	add	r3, r2
 800a872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	4013      	ands	r3, r2
 800a886:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a888:	68bb      	ldr	r3, [r7, #8]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a896:	b480      	push	{r7}
 800a898:	b087      	sub	sp, #28
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a8ba:	78fb      	ldrb	r3, [r7, #3]
 800a8bc:	f003 030f 	and.w	r3, r3, #15
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c6:	01db      	lsls	r3, r3, #7
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8d0:	78fb      	ldrb	r3, [r7, #3]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	371c      	adds	r7, #28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a928:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a92c:	f023 0307 	bic.w	r3, r3, #7
 800a930:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a944:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3714      	adds	r7, #20
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	460b      	mov	r3, r1
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	333c      	adds	r3, #60	; 0x3c
 800a96a:	3304      	adds	r3, #4
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	4a26      	ldr	r2, [pc, #152]	; (800aa0c <USB_EP0_OutStart+0xb8>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d90a      	bls.n	800a98e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a988:	d101      	bne.n	800a98e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	e037      	b.n	800a9fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a994:	461a      	mov	r2, r3
 800a996:	2300      	movs	r3, #0
 800a998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	697a      	ldr	r2, [r7, #20]
 800a9b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9bc:	f043 0318 	orr.w	r3, r3, #24
 800a9c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a9d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d10f      	bne.n	800a9fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a9fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	4f54300a 	.word	0x4f54300a

0800aa10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4a13      	ldr	r2, [pc, #76]	; (800aa74 <USB_CoreReset+0x64>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d901      	bls.n	800aa2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e01b      	b.n	800aa66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	daf2      	bge.n	800aa1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	f043 0201 	orr.w	r2, r3, #1
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <USB_CoreReset+0x64>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d901      	bls.n	800aa58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e006      	b.n	800aa66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d0f0      	beq.n	800aa46 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	00030d40 	.word	0x00030d40

0800aa78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aa88:	f002 fdf2 	bl	800d670 <USBD_static_malloc>
 800aa8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d109      	bne.n	800aaa8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	32b0      	adds	r2, #176	; 0xb0
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	e0d4      	b.n	800ac52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aaa8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aaac:	2100      	movs	r1, #0
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f002 fe5e 	bl	800d770 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	32b0      	adds	r2, #176	; 0xb0
 800aabe:	68f9      	ldr	r1, [r7, #12]
 800aac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	32b0      	adds	r2, #176	; 0xb0
 800aace:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	7c1b      	ldrb	r3, [r3, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d138      	bne.n	800ab52 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aae0:	4b5e      	ldr	r3, [pc, #376]	; (800ac5c <USBD_CDC_Init+0x1e4>)
 800aae2:	7819      	ldrb	r1, [r3, #0]
 800aae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aae8:	2202      	movs	r2, #2
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f002 fc4f 	bl	800d38e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aaf0:	4b5a      	ldr	r3, [pc, #360]	; (800ac5c <USBD_CDC_Init+0x1e4>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f003 020f 	and.w	r2, r3, #15
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	3324      	adds	r3, #36	; 0x24
 800ab06:	2201      	movs	r2, #1
 800ab08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab0a:	4b55      	ldr	r3, [pc, #340]	; (800ac60 <USBD_CDC_Init+0x1e8>)
 800ab0c:	7819      	ldrb	r1, [r3, #0]
 800ab0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab12:	2202      	movs	r2, #2
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f002 fc3a 	bl	800d38e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab1a:	4b51      	ldr	r3, [pc, #324]	; (800ac60 <USBD_CDC_Init+0x1e8>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	f003 020f 	and.w	r2, r3, #15
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab32:	2201      	movs	r2, #1
 800ab34:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab36:	4b4b      	ldr	r3, [pc, #300]	; (800ac64 <USBD_CDC_Init+0x1ec>)
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	f003 020f 	and.w	r2, r3, #15
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	440b      	add	r3, r1
 800ab4a:	3326      	adds	r3, #38	; 0x26
 800ab4c:	2210      	movs	r2, #16
 800ab4e:	801a      	strh	r2, [r3, #0]
 800ab50:	e035      	b.n	800abbe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab52:	4b42      	ldr	r3, [pc, #264]	; (800ac5c <USBD_CDC_Init+0x1e4>)
 800ab54:	7819      	ldrb	r1, [r3, #0]
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	2202      	movs	r2, #2
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f002 fc17 	bl	800d38e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab60:	4b3e      	ldr	r3, [pc, #248]	; (800ac5c <USBD_CDC_Init+0x1e4>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f003 020f 	and.w	r2, r3, #15
 800ab68:	6879      	ldr	r1, [r7, #4]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4413      	add	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	440b      	add	r3, r1
 800ab74:	3324      	adds	r3, #36	; 0x24
 800ab76:	2201      	movs	r2, #1
 800ab78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab7a:	4b39      	ldr	r3, [pc, #228]	; (800ac60 <USBD_CDC_Init+0x1e8>)
 800ab7c:	7819      	ldrb	r1, [r3, #0]
 800ab7e:	2340      	movs	r3, #64	; 0x40
 800ab80:	2202      	movs	r2, #2
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f002 fc03 	bl	800d38e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab88:	4b35      	ldr	r3, [pc, #212]	; (800ac60 <USBD_CDC_Init+0x1e8>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 020f 	and.w	r2, r3, #15
 800ab90:	6879      	ldr	r1, [r7, #4]
 800ab92:	4613      	mov	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aba0:	2201      	movs	r2, #1
 800aba2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aba4:	4b2f      	ldr	r3, [pc, #188]	; (800ac64 <USBD_CDC_Init+0x1ec>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	f003 020f 	and.w	r2, r3, #15
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	4613      	mov	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	440b      	add	r3, r1
 800abb8:	3326      	adds	r3, #38	; 0x26
 800abba:	2210      	movs	r2, #16
 800abbc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800abbe:	4b29      	ldr	r3, [pc, #164]	; (800ac64 <USBD_CDC_Init+0x1ec>)
 800abc0:	7819      	ldrb	r1, [r3, #0]
 800abc2:	2308      	movs	r3, #8
 800abc4:	2203      	movs	r2, #3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f002 fbe1 	bl	800d38e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800abcc:	4b25      	ldr	r3, [pc, #148]	; (800ac64 <USBD_CDC_Init+0x1ec>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	f003 020f 	and.w	r2, r3, #15
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	440b      	add	r3, r1
 800abe0:	3324      	adds	r3, #36	; 0x24
 800abe2:	2201      	movs	r2, #1
 800abe4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	33b0      	adds	r3, #176	; 0xb0
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	e018      	b.n	800ac52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	7c1b      	ldrb	r3, [r3, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac28:	4b0d      	ldr	r3, [pc, #52]	; (800ac60 <USBD_CDC_Init+0x1e8>)
 800ac2a:	7819      	ldrb	r1, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f002 fc98 	bl	800d56c <USBD_LL_PrepareReceive>
 800ac3c:	e008      	b.n	800ac50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac3e:	4b08      	ldr	r3, [pc, #32]	; (800ac60 <USBD_CDC_Init+0x1e8>)
 800ac40:	7819      	ldrb	r1, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac48:	2340      	movs	r3, #64	; 0x40
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f002 fc8e 	bl	800d56c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	200000bb 	.word	0x200000bb
 800ac60:	200000bc 	.word	0x200000bc
 800ac64:	200000bd 	.word	0x200000bd

0800ac68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac74:	4b3a      	ldr	r3, [pc, #232]	; (800ad60 <USBD_CDC_DeInit+0xf8>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f002 fbad 	bl	800d3da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac80:	4b37      	ldr	r3, [pc, #220]	; (800ad60 <USBD_CDC_DeInit+0xf8>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f003 020f 	and.w	r2, r3, #15
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	3324      	adds	r3, #36	; 0x24
 800ac96:	2200      	movs	r2, #0
 800ac98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac9a:	4b32      	ldr	r3, [pc, #200]	; (800ad64 <USBD_CDC_DeInit+0xfc>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f002 fb9a 	bl	800d3da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aca6:	4b2f      	ldr	r3, [pc, #188]	; (800ad64 <USBD_CDC_DeInit+0xfc>)
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	f003 020f 	and.w	r2, r3, #15
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	440b      	add	r3, r1
 800acba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acbe:	2200      	movs	r2, #0
 800acc0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800acc2:	4b29      	ldr	r3, [pc, #164]	; (800ad68 <USBD_CDC_DeInit+0x100>)
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f002 fb86 	bl	800d3da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800acce:	4b26      	ldr	r3, [pc, #152]	; (800ad68 <USBD_CDC_DeInit+0x100>)
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	f003 020f 	and.w	r2, r3, #15
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	4613      	mov	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	440b      	add	r3, r1
 800ace2:	3324      	adds	r3, #36	; 0x24
 800ace4:	2200      	movs	r2, #0
 800ace6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ace8:	4b1f      	ldr	r3, [pc, #124]	; (800ad68 <USBD_CDC_DeInit+0x100>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	f003 020f 	and.w	r2, r3, #15
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	4613      	mov	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	440b      	add	r3, r1
 800acfc:	3326      	adds	r3, #38	; 0x26
 800acfe:	2200      	movs	r2, #0
 800ad00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	32b0      	adds	r2, #176	; 0xb0
 800ad0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d01f      	beq.n	800ad54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	33b0      	adds	r3, #176	; 0xb0
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	32b0      	adds	r2, #176	; 0xb0
 800ad32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 fca8 	bl	800d68c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	32b0      	adds	r2, #176	; 0xb0
 800ad46:	2100      	movs	r1, #0
 800ad48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	200000bb 	.word	0x200000bb
 800ad64:	200000bc 	.word	0x200000bc
 800ad68:	200000bd 	.word	0x200000bd

0800ad6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	32b0      	adds	r2, #176	; 0xb0
 800ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	e0bf      	b.n	800af1c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d050      	beq.n	800ae4a <USBD_CDC_Setup+0xde>
 800ada8:	2b20      	cmp	r3, #32
 800adaa:	f040 80af 	bne.w	800af0c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	88db      	ldrh	r3, [r3, #6]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d03a      	beq.n	800ae2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	b25b      	sxtb	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da1b      	bge.n	800adf8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	33b0      	adds	r3, #176	; 0xb0
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800add6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	88d2      	ldrh	r2, [r2, #6]
 800addc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	88db      	ldrh	r3, [r3, #6]
 800ade2:	2b07      	cmp	r3, #7
 800ade4:	bf28      	it	cs
 800ade6:	2307      	movcs	r3, #7
 800ade8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	89fa      	ldrh	r2, [r7, #14]
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f001 fdb3 	bl	800c95c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800adf6:	e090      	b.n	800af1a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	785a      	ldrb	r2, [r3, #1]
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	88db      	ldrh	r3, [r3, #6]
 800ae06:	2b3f      	cmp	r3, #63	; 0x3f
 800ae08:	d803      	bhi.n	800ae12 <USBD_CDC_Setup+0xa6>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	88db      	ldrh	r3, [r3, #6]
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	e000      	b.n	800ae14 <USBD_CDC_Setup+0xa8>
 800ae12:	2240      	movs	r2, #64	; 0x40
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ae1a:	6939      	ldr	r1, [r7, #16]
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ae22:	461a      	mov	r2, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 fdc5 	bl	800c9b4 <USBD_CtlPrepareRx>
      break;
 800ae2a:	e076      	b.n	800af1a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	33b0      	adds	r3, #176	; 0xb0
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	7850      	ldrb	r0, [r2, #1]
 800ae42:	2200      	movs	r2, #0
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	4798      	blx	r3
      break;
 800ae48:	e067      	b.n	800af1a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	785b      	ldrb	r3, [r3, #1]
 800ae4e:	2b0b      	cmp	r3, #11
 800ae50:	d851      	bhi.n	800aef6 <USBD_CDC_Setup+0x18a>
 800ae52:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <USBD_CDC_Setup+0xec>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800ae89 	.word	0x0800ae89
 800ae5c:	0800af05 	.word	0x0800af05
 800ae60:	0800aef7 	.word	0x0800aef7
 800ae64:	0800aef7 	.word	0x0800aef7
 800ae68:	0800aef7 	.word	0x0800aef7
 800ae6c:	0800aef7 	.word	0x0800aef7
 800ae70:	0800aef7 	.word	0x0800aef7
 800ae74:	0800aef7 	.word	0x0800aef7
 800ae78:	0800aef7 	.word	0x0800aef7
 800ae7c:	0800aef7 	.word	0x0800aef7
 800ae80:	0800aeb3 	.word	0x0800aeb3
 800ae84:	0800aedd 	.word	0x0800aedd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d107      	bne.n	800aea4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae94:	f107 030a 	add.w	r3, r7, #10
 800ae98:	2202      	movs	r2, #2
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f001 fd5d 	bl	800c95c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aea2:	e032      	b.n	800af0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f001 fce7 	bl	800c87a <USBD_CtlError>
            ret = USBD_FAIL;
 800aeac:	2303      	movs	r3, #3
 800aeae:	75fb      	strb	r3, [r7, #23]
          break;
 800aeb0:	e02b      	b.n	800af0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b03      	cmp	r3, #3
 800aebc:	d107      	bne.n	800aece <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aebe:	f107 030d 	add.w	r3, r7, #13
 800aec2:	2201      	movs	r2, #1
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f001 fd48 	bl	800c95c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aecc:	e01d      	b.n	800af0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f001 fcd2 	bl	800c87a <USBD_CtlError>
            ret = USBD_FAIL;
 800aed6:	2303      	movs	r3, #3
 800aed8:	75fb      	strb	r3, [r7, #23]
          break;
 800aeda:	e016      	b.n	800af0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d00f      	beq.n	800af08 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 fcc5 	bl	800c87a <USBD_CtlError>
            ret = USBD_FAIL;
 800aef0:	2303      	movs	r3, #3
 800aef2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aef4:	e008      	b.n	800af08 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f001 fcbe 	bl	800c87a <USBD_CtlError>
          ret = USBD_FAIL;
 800aefe:	2303      	movs	r3, #3
 800af00:	75fb      	strb	r3, [r7, #23]
          break;
 800af02:	e002      	b.n	800af0a <USBD_CDC_Setup+0x19e>
          break;
 800af04:	bf00      	nop
 800af06:	e008      	b.n	800af1a <USBD_CDC_Setup+0x1ae>
          break;
 800af08:	bf00      	nop
      }
      break;
 800af0a:	e006      	b.n	800af1a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 fcb3 	bl	800c87a <USBD_CtlError>
      ret = USBD_FAIL;
 800af14:	2303      	movs	r3, #3
 800af16:	75fb      	strb	r3, [r7, #23]
      break;
 800af18:	bf00      	nop
  }

  return (uint8_t)ret;
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	32b0      	adds	r2, #176	; 0xb0
 800af42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e065      	b.n	800b01a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	32b0      	adds	r2, #176	; 0xb0
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af5e:	78fb      	ldrb	r3, [r7, #3]
 800af60:	f003 020f 	and.w	r2, r3, #15
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	3318      	adds	r3, #24
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d02f      	beq.n	800afd8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af78:	78fb      	ldrb	r3, [r7, #3]
 800af7a:	f003 020f 	and.w	r2, r3, #15
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	4613      	mov	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	440b      	add	r3, r1
 800af8a:	3318      	adds	r3, #24
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	78fb      	ldrb	r3, [r7, #3]
 800af90:	f003 010f 	and.w	r1, r3, #15
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	460b      	mov	r3, r1
 800af98:	00db      	lsls	r3, r3, #3
 800af9a:	440b      	add	r3, r1
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4403      	add	r3, r0
 800afa0:	3348      	adds	r3, #72	; 0x48
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	fbb2 f1f3 	udiv	r1, r2, r3
 800afa8:	fb01 f303 	mul.w	r3, r1, r3
 800afac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d112      	bne.n	800afd8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800afb2:	78fb      	ldrb	r3, [r7, #3]
 800afb4:	f003 020f 	and.w	r2, r3, #15
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	4613      	mov	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	440b      	add	r3, r1
 800afc4:	3318      	adds	r3, #24
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800afca:	78f9      	ldrb	r1, [r7, #3]
 800afcc:	2300      	movs	r3, #0
 800afce:	2200      	movs	r2, #0
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f002 faaa 	bl	800d52a <USBD_LL_Transmit>
 800afd6:	e01f      	b.n	800b018 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2200      	movs	r2, #0
 800afdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	33b0      	adds	r3, #176	; 0xb0
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d010      	beq.n	800b018 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	33b0      	adds	r3, #176	; 0xb0
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b014:	78fa      	ldrb	r2, [r7, #3]
 800b016:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	32b0      	adds	r2, #176	; 0xb0
 800b038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	32b0      	adds	r2, #176	; 0xb0
 800b048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b050:	2303      	movs	r3, #3
 800b052:	e01a      	b.n	800b08a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b054:	78fb      	ldrb	r3, [r7, #3]
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f002 faa8 	bl	800d5ae <USBD_LL_GetRxDataSize>
 800b05e:	4602      	mov	r2, r0
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	33b0      	adds	r3, #176	; 0xb0
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4413      	add	r3, r2
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b084:	4611      	mov	r1, r2
 800b086:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	32b0      	adds	r2, #176	; 0xb0
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e025      	b.n	800b100 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	33b0      	adds	r3, #176	; 0xb0
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01a      	beq.n	800b0fe <USBD_CDC_EP0_RxReady+0x6c>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b0ce:	2bff      	cmp	r3, #255	; 0xff
 800b0d0:	d015      	beq.n	800b0fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	33b0      	adds	r3, #176	; 0xb0
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b0ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0f2:	b292      	uxth	r2, r2
 800b0f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	22ff      	movs	r2, #255	; 0xff
 800b0fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b110:	2182      	movs	r1, #130	; 0x82
 800b112:	4818      	ldr	r0, [pc, #96]	; (800b174 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b114:	f000 fd4f 	bl	800bbb6 <USBD_GetEpDesc>
 800b118:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b11a:	2101      	movs	r1, #1
 800b11c:	4815      	ldr	r0, [pc, #84]	; (800b174 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b11e:	f000 fd4a 	bl	800bbb6 <USBD_GetEpDesc>
 800b122:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b124:	2181      	movs	r1, #129	; 0x81
 800b126:	4813      	ldr	r0, [pc, #76]	; (800b174 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b128:	f000 fd45 	bl	800bbb6 <USBD_GetEpDesc>
 800b12c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2210      	movs	r2, #16
 800b138:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d006      	beq.n	800b14e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2200      	movs	r2, #0
 800b144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b148:	711a      	strb	r2, [r3, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d006      	beq.n	800b162 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b15c:	711a      	strb	r2, [r3, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2243      	movs	r2, #67	; 0x43
 800b166:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b168:	4b02      	ldr	r3, [pc, #8]	; (800b174 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000078 	.word	0x20000078

0800b178 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b180:	2182      	movs	r1, #130	; 0x82
 800b182:	4818      	ldr	r0, [pc, #96]	; (800b1e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b184:	f000 fd17 	bl	800bbb6 <USBD_GetEpDesc>
 800b188:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b18a:	2101      	movs	r1, #1
 800b18c:	4815      	ldr	r0, [pc, #84]	; (800b1e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b18e:	f000 fd12 	bl	800bbb6 <USBD_GetEpDesc>
 800b192:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b194:	2181      	movs	r1, #129	; 0x81
 800b196:	4813      	ldr	r0, [pc, #76]	; (800b1e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b198:	f000 fd0d 	bl	800bbb6 <USBD_GetEpDesc>
 800b19c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2210      	movs	r2, #16
 800b1a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d006      	beq.n	800b1be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	711a      	strb	r2, [r3, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f042 0202 	orr.w	r2, r2, #2
 800b1bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d006      	beq.n	800b1d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	711a      	strb	r2, [r3, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f042 0202 	orr.w	r2, r2, #2
 800b1d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2243      	movs	r2, #67	; 0x43
 800b1d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1d8:	4b02      	ldr	r3, [pc, #8]	; (800b1e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000078 	.word	0x20000078

0800b1e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1f0:	2182      	movs	r1, #130	; 0x82
 800b1f2:	4818      	ldr	r0, [pc, #96]	; (800b254 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1f4:	f000 fcdf 	bl	800bbb6 <USBD_GetEpDesc>
 800b1f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	4815      	ldr	r0, [pc, #84]	; (800b254 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1fe:	f000 fcda 	bl	800bbb6 <USBD_GetEpDesc>
 800b202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b204:	2181      	movs	r1, #129	; 0x81
 800b206:	4813      	ldr	r0, [pc, #76]	; (800b254 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b208:	f000 fcd5 	bl	800bbb6 <USBD_GetEpDesc>
 800b20c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2210      	movs	r2, #16
 800b218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d006      	beq.n	800b22e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	2200      	movs	r2, #0
 800b224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b228:	711a      	strb	r2, [r3, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d006      	beq.n	800b242 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b23c:	711a      	strb	r2, [r3, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2243      	movs	r2, #67	; 0x43
 800b246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b248:	4b02      	ldr	r3, [pc, #8]	; (800b254 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000078 	.word	0x20000078

0800b258 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	220a      	movs	r2, #10
 800b264:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b266:	4b03      	ldr	r3, [pc, #12]	; (800b274 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b268:	4618      	mov	r0, r3
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	20000034 	.word	0x20000034

0800b278 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d101      	bne.n	800b28c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b288:	2303      	movs	r3, #3
 800b28a:	e009      	b.n	800b2a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	33b0      	adds	r3, #176	; 0xb0
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	32b0      	adds	r2, #176	; 0xb0
 800b2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	e008      	b.n	800b2e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	371c      	adds	r7, #28
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	32b0      	adds	r2, #176	; 0xb0
 800b304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b308:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b310:	2303      	movs	r3, #3
 800b312:	e004      	b.n	800b31e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3714      	adds	r7, #20
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
	...

0800b32c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	32b0      	adds	r2, #176	; 0xb0
 800b33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b342:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b344:	2301      	movs	r3, #1
 800b346:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	32b0      	adds	r2, #176	; 0xb0
 800b352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e025      	b.n	800b3aa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b364:	2b00      	cmp	r3, #0
 800b366:	d11f      	bne.n	800b3a8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b370:	4b10      	ldr	r3, [pc, #64]	; (800b3b4 <USBD_CDC_TransmitPacket+0x88>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	f003 020f 	and.w	r2, r3, #15
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4403      	add	r3, r0
 800b38a:	3318      	adds	r3, #24
 800b38c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b38e:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <USBD_CDC_TransmitPacket+0x88>)
 800b390:	7819      	ldrb	r1, [r3, #0]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f002 f8c3 	bl	800d52a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	200000bb 	.word	0x200000bb

0800b3b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	32b0      	adds	r2, #176	; 0xb0
 800b3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	32b0      	adds	r2, #176	; 0xb0
 800b3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e018      	b.n	800b418 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10a      	bne.n	800b404 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <USBD_CDC_ReceivePacket+0x68>)
 800b3f0:	7819      	ldrb	r1, [r3, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f002 f8b5 	bl	800d56c <USBD_LL_PrepareReceive>
 800b402:	e008      	b.n	800b416 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b404:	4b06      	ldr	r3, [pc, #24]	; (800b420 <USBD_CDC_ReceivePacket+0x68>)
 800b406:	7819      	ldrb	r1, [r3, #0]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b40e:	2340      	movs	r3, #64	; 0x40
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f002 f8ab 	bl	800d56c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	200000bc 	.word	0x200000bc

0800b424 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	4613      	mov	r3, r2
 800b430:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	e01f      	b.n	800b47c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	79fa      	ldrb	r2, [r7, #7]
 800b46e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f001 ff25 	bl	800d2c0 <USBD_LL_Init>
 800b476:	4603      	mov	r3, r0
 800b478:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b48e:	2300      	movs	r3, #0
 800b490:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b498:	2303      	movs	r3, #3
 800b49a:	e025      	b.n	800b4e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	32ae      	adds	r2, #174	; 0xae
 800b4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00f      	beq.n	800b4d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	32ae      	adds	r2, #174	; 0xae
 800b4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	f107 020e 	add.w	r2, r7, #14
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b4de:	1c5a      	adds	r2, r3, #1
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f001 ff2d 	bl	800d358 <USBD_LL_Start>
 800b4fe:	4603      	mov	r3, r0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b510:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	460b      	mov	r3, r1
 800b528:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b534:	2b00      	cmp	r3, #0
 800b536:	d009      	beq.n	800b54c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	78fa      	ldrb	r2, [r7, #3]
 800b542:	4611      	mov	r1, r2
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	4798      	blx	r3
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	78fa      	ldrb	r2, [r7, #3]
 800b570:	4611      	mov	r1, r2
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	4798      	blx	r3
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b57c:	2303      	movs	r3, #3
 800b57e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b580:	7bfb      	ldrb	r3, [r7, #15]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 f932 	bl	800c806 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5be:	f003 031f 	and.w	r3, r3, #31
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d01a      	beq.n	800b5fc <USBD_LL_SetupStage+0x72>
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d822      	bhi.n	800b610 <USBD_LL_SetupStage+0x86>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <USBD_LL_SetupStage+0x4a>
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d00a      	beq.n	800b5e8 <USBD_LL_SetupStage+0x5e>
 800b5d2:	e01d      	b.n	800b610 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fb5f 	bl	800bca0 <USBD_StdDevReq>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e6:	e020      	b.n	800b62a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fbc7 	bl	800bd84 <USBD_StdItfReq>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5fa:	e016      	b.n	800b62a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fc29 	bl	800be5c <USBD_StdEPReq>
 800b60a:	4603      	mov	r3, r0
 800b60c:	73fb      	strb	r3, [r7, #15]
      break;
 800b60e:	e00c      	b.n	800b62a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b616:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f001 fefa 	bl	800d418 <USBD_LL_StallEP>
 800b624:	4603      	mov	r3, r0
 800b626:	73fb      	strb	r3, [r7, #15]
      break;
 800b628:	bf00      	nop
  }

  return ret;
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	460b      	mov	r3, r1
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b646:	7afb      	ldrb	r3, [r7, #11]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d16e      	bne.n	800b72a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b652:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	f040 8098 	bne.w	800b790 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d913      	bls.n	800b694 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	1ad2      	subs	r2, r2, r3
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	4293      	cmp	r3, r2
 800b684:	bf28      	it	cs
 800b686:	4613      	movcs	r3, r2
 800b688:	461a      	mov	r2, r3
 800b68a:	6879      	ldr	r1, [r7, #4]
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f001 f9ae 	bl	800c9ee <USBD_CtlContinueRx>
 800b692:	e07d      	b.n	800b790 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b69a:	f003 031f 	and.w	r3, r3, #31
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d014      	beq.n	800b6cc <USBD_LL_DataOutStage+0x98>
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d81d      	bhi.n	800b6e2 <USBD_LL_DataOutStage+0xae>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <USBD_LL_DataOutStage+0x7c>
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d003      	beq.n	800b6b6 <USBD_LL_DataOutStage+0x82>
 800b6ae:	e018      	b.n	800b6e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	75bb      	strb	r3, [r7, #22]
            break;
 800b6b4:	e018      	b.n	800b6e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	4619      	mov	r1, r3
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 fa5e 	bl	800bb82 <USBD_CoreFindIF>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	75bb      	strb	r3, [r7, #22]
            break;
 800b6ca:	e00d      	b.n	800b6e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f000 fa60 	bl	800bb9c <USBD_CoreFindEP>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	75bb      	strb	r3, [r7, #22]
            break;
 800b6e0:	e002      	b.n	800b6e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	75bb      	strb	r3, [r7, #22]
            break;
 800b6e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b6e8:	7dbb      	ldrb	r3, [r7, #22]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d119      	bne.n	800b722 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d113      	bne.n	800b722 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b6fa:	7dba      	ldrb	r2, [r7, #22]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	32ae      	adds	r2, #174	; 0xae
 800b700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00b      	beq.n	800b722 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b70a:	7dba      	ldrb	r2, [r7, #22]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b712:	7dba      	ldrb	r2, [r7, #22]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	32ae      	adds	r2, #174	; 0xae
 800b718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f001 f974 	bl	800ca10 <USBD_CtlSendStatus>
 800b728:	e032      	b.n	800b790 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b72a:	7afb      	ldrb	r3, [r7, #11]
 800b72c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b730:	b2db      	uxtb	r3, r3
 800b732:	4619      	mov	r1, r3
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f000 fa31 	bl	800bb9c <USBD_CoreFindEP>
 800b73a:	4603      	mov	r3, r0
 800b73c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b73e:	7dbb      	ldrb	r3, [r7, #22]
 800b740:	2bff      	cmp	r3, #255	; 0xff
 800b742:	d025      	beq.n	800b790 <USBD_LL_DataOutStage+0x15c>
 800b744:	7dbb      	ldrb	r3, [r7, #22]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d122      	bne.n	800b790 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b03      	cmp	r3, #3
 800b754:	d117      	bne.n	800b786 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b756:	7dba      	ldrb	r2, [r7, #22]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	32ae      	adds	r2, #174	; 0xae
 800b75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00f      	beq.n	800b786 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b766:	7dba      	ldrb	r2, [r7, #22]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b76e:	7dba      	ldrb	r2, [r7, #22]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	32ae      	adds	r2, #174	; 0xae
 800b774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	7afa      	ldrb	r2, [r7, #11]
 800b77c:	4611      	mov	r1, r2
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	4798      	blx	r3
 800b782:	4603      	mov	r3, r0
 800b784:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
 800b78e:	e000      	b.n	800b792 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b086      	sub	sp, #24
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	607a      	str	r2, [r7, #4]
 800b7a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b7a8:	7afb      	ldrb	r3, [r7, #11]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d16f      	bne.n	800b88e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3314      	adds	r3, #20
 800b7b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d15a      	bne.n	800b874 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	689a      	ldr	r2, [r3, #8]
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d914      	bls.n	800b7f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	689a      	ldr	r2, [r3, #8]
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	1ad2      	subs	r2, r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	6879      	ldr	r1, [r7, #4]
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f001 f8d6 	bl	800c992 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f001 febd 	bl	800d56c <USBD_LL_PrepareReceive>
 800b7f2:	e03f      	b.n	800b874 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	68da      	ldr	r2, [r3, #12]
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d11c      	bne.n	800b83a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b808:	429a      	cmp	r2, r3
 800b80a:	d316      	bcc.n	800b83a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b816:	429a      	cmp	r2, r3
 800b818:	d20f      	bcs.n	800b83a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b81a:	2200      	movs	r2, #0
 800b81c:	2100      	movs	r1, #0
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f001 f8b7 	bl	800c992 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b82c:	2300      	movs	r3, #0
 800b82e:	2200      	movs	r2, #0
 800b830:	2100      	movs	r1, #0
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f001 fe9a 	bl	800d56c <USBD_LL_PrepareReceive>
 800b838:	e01c      	b.n	800b874 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b03      	cmp	r3, #3
 800b844:	d10f      	bne.n	800b866 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d009      	beq.n	800b866 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2200      	movs	r2, #0
 800b856:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b866:	2180      	movs	r1, #128	; 0x80
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f001 fdd5 	bl	800d418 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f001 f8e1 	bl	800ca36 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d03a      	beq.n	800b8f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff fe42 	bl	800b508 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b88c:	e032      	b.n	800b8f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b88e:	7afb      	ldrb	r3, [r7, #11]
 800b890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b894:	b2db      	uxtb	r3, r3
 800b896:	4619      	mov	r1, r3
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 f97f 	bl	800bb9c <USBD_CoreFindEP>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	2bff      	cmp	r3, #255	; 0xff
 800b8a6:	d025      	beq.n	800b8f4 <USBD_LL_DataInStage+0x15a>
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d122      	bne.n	800b8f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b03      	cmp	r3, #3
 800b8b8:	d11c      	bne.n	800b8f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b8ba:	7dfa      	ldrb	r2, [r7, #23]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	32ae      	adds	r2, #174	; 0xae
 800b8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d014      	beq.n	800b8f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b8ca:	7dfa      	ldrb	r2, [r7, #23]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b8d2:	7dfa      	ldrb	r2, [r7, #23]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	32ae      	adds	r2, #174	; 0xae
 800b8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	7afa      	ldrb	r2, [r7, #11]
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	4798      	blx	r3
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b8ea:	7dbb      	ldrb	r3, [r7, #22]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b8f0:	7dbb      	ldrb	r3, [r7, #22]
 800b8f2:	e000      	b.n	800b8f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b936:	2b00      	cmp	r3, #0
 800b938:	d014      	beq.n	800b964 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00e      	beq.n	800b964 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	6852      	ldr	r2, [r2, #4]
 800b952:	b2d2      	uxtb	r2, r2
 800b954:	4611      	mov	r1, r2
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d001      	beq.n	800b964 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b960:	2303      	movs	r3, #3
 800b962:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b964:	2340      	movs	r3, #64	; 0x40
 800b966:	2200      	movs	r2, #0
 800b968:	2100      	movs	r1, #0
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f001 fd0f 	bl	800d38e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2240      	movs	r2, #64	; 0x40
 800b97c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b980:	2340      	movs	r3, #64	; 0x40
 800b982:	2200      	movs	r2, #0
 800b984:	2180      	movs	r1, #128	; 0x80
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f001 fd01 	bl	800d38e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2240      	movs	r2, #64	; 0x40
 800b996:	621a      	str	r2, [r3, #32]

  return ret;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b083      	sub	sp, #12
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	78fa      	ldrb	r2, [r7, #3]
 800b9b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2204      	movs	r2, #4
 800b9dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	d106      	bne.n	800ba10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d110      	bne.n	800ba54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00b      	beq.n	800ba54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba4e:	69db      	ldr	r3, [r3, #28]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	460b      	mov	r3, r1
 800ba68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	32ae      	adds	r2, #174	; 0xae
 800ba74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e01c      	b.n	800baba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d115      	bne.n	800bab8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	32ae      	adds	r2, #174	; 0xae
 800ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	32ae      	adds	r2, #174	; 0xae
 800baaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baae:	6a1b      	ldr	r3, [r3, #32]
 800bab0:	78fa      	ldrb	r2, [r7, #3]
 800bab2:	4611      	mov	r1, r2
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b082      	sub	sp, #8
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	460b      	mov	r3, r1
 800bacc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	32ae      	adds	r2, #174	; 0xae
 800bad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bae0:	2303      	movs	r3, #3
 800bae2:	e01c      	b.n	800bb1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b03      	cmp	r3, #3
 800baee:	d115      	bne.n	800bb1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	32ae      	adds	r2, #174	; 0xae
 800bafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00b      	beq.n	800bb1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	32ae      	adds	r2, #174	; 0xae
 800bb0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb14:	78fa      	ldrb	r2, [r7, #3]
 800bb16:	4611      	mov	r1, r2
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b083      	sub	sp, #12
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00e      	beq.n	800bb78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	6852      	ldr	r2, [r2, #4]
 800bb66:	b2d2      	uxtb	r2, r2
 800bb68:	4611      	mov	r1, r2
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	4798      	blx	r3
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bb74:	2303      	movs	r3, #3
 800bb76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb82:	b480      	push	{r7}
 800bb84:	b083      	sub	sp, #12
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bba8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	370c      	adds	r7, #12
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b086      	sub	sp, #24
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	885b      	ldrh	r3, [r3, #2]
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d920      	bls.n	800bc20 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bbe6:	e013      	b.n	800bc10 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bbe8:	f107 030a 	add.w	r3, r7, #10
 800bbec:	4619      	mov	r1, r3
 800bbee:	6978      	ldr	r0, [r7, #20]
 800bbf0:	f000 f81b 	bl	800bc2a <USBD_GetNextDesc>
 800bbf4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	785b      	ldrb	r3, [r3, #1]
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	d108      	bne.n	800bc10 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	789b      	ldrb	r3, [r3, #2]
 800bc06:	78fa      	ldrb	r2, [r7, #3]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d008      	beq.n	800bc1e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	885b      	ldrh	r3, [r3, #2]
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	897b      	ldrh	r3, [r7, #10]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d8e5      	bhi.n	800bbe8 <USBD_GetEpDesc+0x32>
 800bc1c:	e000      	b.n	800bc20 <USBD_GetEpDesc+0x6a>
          break;
 800bc1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bc20:	693b      	ldr	r3, [r7, #16]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3718      	adds	r7, #24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	881a      	ldrh	r2, [r3, #0]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	4413      	add	r3, r2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4413      	add	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc56:	68fb      	ldr	r3, [r7, #12]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc82:	8a3b      	ldrh	r3, [r7, #16]
 800bc84:	021b      	lsls	r3, r3, #8
 800bc86:	b21a      	sxth	r2, r3
 800bc88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	b21b      	sxth	r3, r3
 800bc90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc92:	89fb      	ldrh	r3, [r7, #14]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	371c      	adds	r7, #28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcb6:	2b40      	cmp	r3, #64	; 0x40
 800bcb8:	d005      	beq.n	800bcc6 <USBD_StdDevReq+0x26>
 800bcba:	2b40      	cmp	r3, #64	; 0x40
 800bcbc:	d857      	bhi.n	800bd6e <USBD_StdDevReq+0xce>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00f      	beq.n	800bce2 <USBD_StdDevReq+0x42>
 800bcc2:	2b20      	cmp	r3, #32
 800bcc4:	d153      	bne.n	800bd6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	32ae      	adds	r2, #174	; 0xae
 800bcd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	4798      	blx	r3
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]
      break;
 800bce0:	e04a      	b.n	800bd78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	785b      	ldrb	r3, [r3, #1]
 800bce6:	2b09      	cmp	r3, #9
 800bce8:	d83b      	bhi.n	800bd62 <USBD_StdDevReq+0xc2>
 800bcea:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <USBD_StdDevReq+0x50>)
 800bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800bd59 	.word	0x0800bd59
 800bcf8:	0800bd63 	.word	0x0800bd63
 800bcfc:	0800bd4f 	.word	0x0800bd4f
 800bd00:	0800bd63 	.word	0x0800bd63
 800bd04:	0800bd23 	.word	0x0800bd23
 800bd08:	0800bd19 	.word	0x0800bd19
 800bd0c:	0800bd63 	.word	0x0800bd63
 800bd10:	0800bd3b 	.word	0x0800bd3b
 800bd14:	0800bd2d 	.word	0x0800bd2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fa3c 	bl	800c198 <USBD_GetDescriptor>
          break;
 800bd20:	e024      	b.n	800bd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fbcb 	bl	800c4c0 <USBD_SetAddress>
          break;
 800bd2a:	e01f      	b.n	800bd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fc0a 	bl	800c548 <USBD_SetConfig>
 800bd34:	4603      	mov	r3, r0
 800bd36:	73fb      	strb	r3, [r7, #15]
          break;
 800bd38:	e018      	b.n	800bd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd3a:	6839      	ldr	r1, [r7, #0]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fcad 	bl	800c69c <USBD_GetConfig>
          break;
 800bd42:	e013      	b.n	800bd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fcde 	bl	800c708 <USBD_GetStatus>
          break;
 800bd4c:	e00e      	b.n	800bd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 fd0d 	bl	800c770 <USBD_SetFeature>
          break;
 800bd56:	e009      	b.n	800bd6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fd31 	bl	800c7c2 <USBD_ClrFeature>
          break;
 800bd60:	e004      	b.n	800bd6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bd62:	6839      	ldr	r1, [r7, #0]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fd88 	bl	800c87a <USBD_CtlError>
          break;
 800bd6a:	bf00      	nop
      }
      break;
 800bd6c:	e004      	b.n	800bd78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fd82 	bl	800c87a <USBD_CtlError>
      break;
 800bd76:	bf00      	nop
  }

  return ret;
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop

0800bd84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd9a:	2b40      	cmp	r3, #64	; 0x40
 800bd9c:	d005      	beq.n	800bdaa <USBD_StdItfReq+0x26>
 800bd9e:	2b40      	cmp	r3, #64	; 0x40
 800bda0:	d852      	bhi.n	800be48 <USBD_StdItfReq+0xc4>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <USBD_StdItfReq+0x26>
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	d14e      	bne.n	800be48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d840      	bhi.n	800be3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	889b      	ldrh	r3, [r3, #4]
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d836      	bhi.n	800be30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	889b      	ldrh	r3, [r3, #4]
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff fed9 	bl	800bb82 <USBD_CoreFindIF>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	2bff      	cmp	r3, #255	; 0xff
 800bdd8:	d01d      	beq.n	800be16 <USBD_StdItfReq+0x92>
 800bdda:	7bbb      	ldrb	r3, [r7, #14]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d11a      	bne.n	800be16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bde0:	7bba      	ldrb	r2, [r7, #14]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	32ae      	adds	r2, #174	; 0xae
 800bde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00f      	beq.n	800be10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bdf0:	7bba      	ldrb	r2, [r7, #14]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bdf8:	7bba      	ldrb	r2, [r7, #14]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	32ae      	adds	r2, #174	; 0xae
 800bdfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	4798      	blx	r3
 800be0a:	4603      	mov	r3, r0
 800be0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be0e:	e004      	b.n	800be1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be14:	e001      	b.n	800be1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800be16:	2303      	movs	r3, #3
 800be18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	88db      	ldrh	r3, [r3, #6]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d110      	bne.n	800be44 <USBD_StdItfReq+0xc0>
 800be22:	7bfb      	ldrb	r3, [r7, #15]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10d      	bne.n	800be44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fdf1 	bl	800ca10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be2e:	e009      	b.n	800be44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fd21 	bl	800c87a <USBD_CtlError>
          break;
 800be38:	e004      	b.n	800be44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fd1c 	bl	800c87a <USBD_CtlError>
          break;
 800be42:	e000      	b.n	800be46 <USBD_StdItfReq+0xc2>
          break;
 800be44:	bf00      	nop
      }
      break;
 800be46:	e004      	b.n	800be52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fd15 	bl	800c87a <USBD_CtlError>
      break;
 800be50:	bf00      	nop
  }

  return ret;
 800be52:	7bfb      	ldrb	r3, [r7, #15]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	889b      	ldrh	r3, [r3, #4]
 800be6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be78:	2b40      	cmp	r3, #64	; 0x40
 800be7a:	d007      	beq.n	800be8c <USBD_StdEPReq+0x30>
 800be7c:	2b40      	cmp	r3, #64	; 0x40
 800be7e:	f200 817f 	bhi.w	800c180 <USBD_StdEPReq+0x324>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d02a      	beq.n	800bedc <USBD_StdEPReq+0x80>
 800be86:	2b20      	cmp	r3, #32
 800be88:	f040 817a 	bne.w	800c180 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff fe83 	bl	800bb9c <USBD_CoreFindEP>
 800be96:	4603      	mov	r3, r0
 800be98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be9a:	7b7b      	ldrb	r3, [r7, #13]
 800be9c:	2bff      	cmp	r3, #255	; 0xff
 800be9e:	f000 8174 	beq.w	800c18a <USBD_StdEPReq+0x32e>
 800bea2:	7b7b      	ldrb	r3, [r7, #13]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	f040 8170 	bne.w	800c18a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800beaa:	7b7a      	ldrb	r2, [r7, #13]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800beb2:	7b7a      	ldrb	r2, [r7, #13]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	32ae      	adds	r2, #174	; 0xae
 800beb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 8163 	beq.w	800c18a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bec4:	7b7a      	ldrb	r2, [r7, #13]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	32ae      	adds	r2, #174	; 0xae
 800beca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	4798      	blx	r3
 800bed6:	4603      	mov	r3, r0
 800bed8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800beda:	e156      	b.n	800c18a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	785b      	ldrb	r3, [r3, #1]
 800bee0:	2b03      	cmp	r3, #3
 800bee2:	d008      	beq.n	800bef6 <USBD_StdEPReq+0x9a>
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	f300 8145 	bgt.w	800c174 <USBD_StdEPReq+0x318>
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 809b 	beq.w	800c026 <USBD_StdEPReq+0x1ca>
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d03c      	beq.n	800bf6e <USBD_StdEPReq+0x112>
 800bef4:	e13e      	b.n	800c174 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b02      	cmp	r3, #2
 800bf00:	d002      	beq.n	800bf08 <USBD_StdEPReq+0xac>
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d016      	beq.n	800bf34 <USBD_StdEPReq+0xd8>
 800bf06:	e02c      	b.n	800bf62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf08:	7bbb      	ldrb	r3, [r7, #14]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00d      	beq.n	800bf2a <USBD_StdEPReq+0xce>
 800bf0e:	7bbb      	ldrb	r3, [r7, #14]
 800bf10:	2b80      	cmp	r3, #128	; 0x80
 800bf12:	d00a      	beq.n	800bf2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf14:	7bbb      	ldrb	r3, [r7, #14]
 800bf16:	4619      	mov	r1, r3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f001 fa7d 	bl	800d418 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf1e:	2180      	movs	r1, #128	; 0x80
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f001 fa79 	bl	800d418 <USBD_LL_StallEP>
 800bf26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf28:	e020      	b.n	800bf6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fca4 	bl	800c87a <USBD_CtlError>
              break;
 800bf32:	e01b      	b.n	800bf6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	885b      	ldrh	r3, [r3, #2]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10e      	bne.n	800bf5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00b      	beq.n	800bf5a <USBD_StdEPReq+0xfe>
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
 800bf44:	2b80      	cmp	r3, #128	; 0x80
 800bf46:	d008      	beq.n	800bf5a <USBD_StdEPReq+0xfe>
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	88db      	ldrh	r3, [r3, #6]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 fa5f 	bl	800d418 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fd58 	bl	800ca10 <USBD_CtlSendStatus>

              break;
 800bf60:	e004      	b.n	800bf6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bf62:	6839      	ldr	r1, [r7, #0]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fc88 	bl	800c87a <USBD_CtlError>
              break;
 800bf6a:	bf00      	nop
          }
          break;
 800bf6c:	e107      	b.n	800c17e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d002      	beq.n	800bf80 <USBD_StdEPReq+0x124>
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d016      	beq.n	800bfac <USBD_StdEPReq+0x150>
 800bf7e:	e04b      	b.n	800c018 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00d      	beq.n	800bfa2 <USBD_StdEPReq+0x146>
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	2b80      	cmp	r3, #128	; 0x80
 800bf8a:	d00a      	beq.n	800bfa2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 fa41 	bl	800d418 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf96:	2180      	movs	r1, #128	; 0x80
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f001 fa3d 	bl	800d418 <USBD_LL_StallEP>
 800bf9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfa0:	e040      	b.n	800c024 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fc68 	bl	800c87a <USBD_CtlError>
              break;
 800bfaa:	e03b      	b.n	800c024 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	885b      	ldrh	r3, [r3, #2]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d136      	bne.n	800c022 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bfb4:	7bbb      	ldrb	r3, [r7, #14]
 800bfb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d004      	beq.n	800bfc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f001 fa47 	bl	800d456 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fd21 	bl	800ca10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fde2 	bl	800bb9c <USBD_CoreFindEP>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfdc:	7b7b      	ldrb	r3, [r7, #13]
 800bfde:	2bff      	cmp	r3, #255	; 0xff
 800bfe0:	d01f      	beq.n	800c022 <USBD_StdEPReq+0x1c6>
 800bfe2:	7b7b      	ldrb	r3, [r7, #13]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d11c      	bne.n	800c022 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bfe8:	7b7a      	ldrb	r2, [r7, #13]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bff0:	7b7a      	ldrb	r2, [r7, #13]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	32ae      	adds	r2, #174	; 0xae
 800bff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d010      	beq.n	800c022 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c000:	7b7a      	ldrb	r2, [r7, #13]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	32ae      	adds	r2, #174	; 0xae
 800c006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	4798      	blx	r3
 800c012:	4603      	mov	r3, r0
 800c014:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c016:	e004      	b.n	800c022 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fc2d 	bl	800c87a <USBD_CtlError>
              break;
 800c020:	e000      	b.n	800c024 <USBD_StdEPReq+0x1c8>
              break;
 800c022:	bf00      	nop
          }
          break;
 800c024:	e0ab      	b.n	800c17e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d002      	beq.n	800c038 <USBD_StdEPReq+0x1dc>
 800c032:	2b03      	cmp	r3, #3
 800c034:	d032      	beq.n	800c09c <USBD_StdEPReq+0x240>
 800c036:	e097      	b.n	800c168 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d007      	beq.n	800c04e <USBD_StdEPReq+0x1f2>
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b80      	cmp	r3, #128	; 0x80
 800c042:	d004      	beq.n	800c04e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fc17 	bl	800c87a <USBD_CtlError>
                break;
 800c04c:	e091      	b.n	800c172 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c04e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c052:	2b00      	cmp	r3, #0
 800c054:	da0b      	bge.n	800c06e <USBD_StdEPReq+0x212>
 800c056:	7bbb      	ldrb	r3, [r7, #14]
 800c058:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c05c:	4613      	mov	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	3310      	adds	r3, #16
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	4413      	add	r3, r2
 800c06a:	3304      	adds	r3, #4
 800c06c:	e00b      	b.n	800c086 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c06e:	7bbb      	ldrb	r3, [r7, #14]
 800c070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c074:	4613      	mov	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	4413      	add	r3, r2
 800c084:	3304      	adds	r3, #4
 800c086:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2202      	movs	r2, #2
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fc61 	bl	800c95c <USBD_CtlSendData>
              break;
 800c09a:	e06a      	b.n	800c172 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c09c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	da11      	bge.n	800c0c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0a4:	7bbb      	ldrb	r3, [r7, #14]
 800c0a6:	f003 020f 	and.w	r2, r3, #15
 800c0aa:	6879      	ldr	r1, [r7, #4]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	440b      	add	r3, r1
 800c0b6:	3324      	adds	r3, #36	; 0x24
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d117      	bne.n	800c0ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fbda 	bl	800c87a <USBD_CtlError>
                  break;
 800c0c6:	e054      	b.n	800c172 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	f003 020f 	and.w	r2, r3, #15
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	440b      	add	r3, r1
 800c0da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d104      	bne.n	800c0ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fbc7 	bl	800c87a <USBD_CtlError>
                  break;
 800c0ec:	e041      	b.n	800c172 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	da0b      	bge.n	800c10e <USBD_StdEPReq+0x2b2>
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	3310      	adds	r3, #16
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	4413      	add	r3, r2
 800c10a:	3304      	adds	r3, #4
 800c10c:	e00b      	b.n	800c126 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
 800c110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c114:	4613      	mov	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	4413      	add	r3, r2
 800c124:	3304      	adds	r3, #4
 800c126:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <USBD_StdEPReq+0x2d8>
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b80      	cmp	r3, #128	; 0x80
 800c132:	d103      	bne.n	800c13c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2200      	movs	r2, #0
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	e00e      	b.n	800c15a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 f9a7 	bl	800d494 <USBD_LL_IsStallEP>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2201      	movs	r2, #1
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	e002      	b.n	800c15a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2200      	movs	r2, #0
 800c158:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2202      	movs	r2, #2
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fbfb 	bl	800c95c <USBD_CtlSendData>
              break;
 800c166:	e004      	b.n	800c172 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fb85 	bl	800c87a <USBD_CtlError>
              break;
 800c170:	bf00      	nop
          }
          break;
 800c172:	e004      	b.n	800c17e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fb7f 	bl	800c87a <USBD_CtlError>
          break;
 800c17c:	bf00      	nop
      }
      break;
 800c17e:	e005      	b.n	800c18c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fb79 	bl	800c87a <USBD_CtlError>
      break;
 800c188:	e000      	b.n	800c18c <USBD_StdEPReq+0x330>
      break;
 800c18a:	bf00      	nop
  }

  return ret;
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
	...

0800c198 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	0a1b      	lsrs	r3, r3, #8
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	2b0e      	cmp	r3, #14
 800c1ba:	f200 8152 	bhi.w	800c462 <USBD_GetDescriptor+0x2ca>
 800c1be:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <USBD_GetDescriptor+0x2c>)
 800c1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c4:	0800c235 	.word	0x0800c235
 800c1c8:	0800c24d 	.word	0x0800c24d
 800c1cc:	0800c28d 	.word	0x0800c28d
 800c1d0:	0800c463 	.word	0x0800c463
 800c1d4:	0800c463 	.word	0x0800c463
 800c1d8:	0800c403 	.word	0x0800c403
 800c1dc:	0800c42f 	.word	0x0800c42f
 800c1e0:	0800c463 	.word	0x0800c463
 800c1e4:	0800c463 	.word	0x0800c463
 800c1e8:	0800c463 	.word	0x0800c463
 800c1ec:	0800c463 	.word	0x0800c463
 800c1f0:	0800c463 	.word	0x0800c463
 800c1f4:	0800c463 	.word	0x0800c463
 800c1f8:	0800c463 	.word	0x0800c463
 800c1fc:	0800c201 	.word	0x0800c201
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c206:	69db      	ldr	r3, [r3, #28]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00b      	beq.n	800c224 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c212:	69db      	ldr	r3, [r3, #28]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	7c12      	ldrb	r2, [r2, #16]
 800c218:	f107 0108 	add.w	r1, r7, #8
 800c21c:	4610      	mov	r0, r2
 800c21e:	4798      	blx	r3
 800c220:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c222:	e126      	b.n	800c472 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fb27 	bl	800c87a <USBD_CtlError>
        err++;
 800c22c:	7afb      	ldrb	r3, [r7, #11]
 800c22e:	3301      	adds	r3, #1
 800c230:	72fb      	strb	r3, [r7, #11]
      break;
 800c232:	e11e      	b.n	800c472 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	7c12      	ldrb	r2, [r2, #16]
 800c240:	f107 0108 	add.w	r1, r7, #8
 800c244:	4610      	mov	r0, r2
 800c246:	4798      	blx	r3
 800c248:	60f8      	str	r0, [r7, #12]
      break;
 800c24a:	e112      	b.n	800c472 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	7c1b      	ldrb	r3, [r3, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10d      	bne.n	800c270 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c25c:	f107 0208 	add.w	r2, r7, #8
 800c260:	4610      	mov	r0, r2
 800c262:	4798      	blx	r3
 800c264:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	2202      	movs	r2, #2
 800c26c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c26e:	e100      	b.n	800c472 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	f107 0208 	add.w	r2, r7, #8
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
 800c280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3301      	adds	r3, #1
 800c286:	2202      	movs	r2, #2
 800c288:	701a      	strb	r2, [r3, #0]
      break;
 800c28a:	e0f2      	b.n	800c472 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	885b      	ldrh	r3, [r3, #2]
 800c290:	b2db      	uxtb	r3, r3
 800c292:	2b05      	cmp	r3, #5
 800c294:	f200 80ac 	bhi.w	800c3f0 <USBD_GetDescriptor+0x258>
 800c298:	a201      	add	r2, pc, #4	; (adr r2, 800c2a0 <USBD_GetDescriptor+0x108>)
 800c29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29e:	bf00      	nop
 800c2a0:	0800c2b9 	.word	0x0800c2b9
 800c2a4:	0800c2ed 	.word	0x0800c2ed
 800c2a8:	0800c321 	.word	0x0800c321
 800c2ac:	0800c355 	.word	0x0800c355
 800c2b0:	0800c389 	.word	0x0800c389
 800c2b4:	0800c3bd 	.word	0x0800c3bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00b      	beq.n	800c2dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	7c12      	ldrb	r2, [r2, #16]
 800c2d0:	f107 0108 	add.w	r1, r7, #8
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	4798      	blx	r3
 800c2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2da:	e091      	b.n	800c400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 facb 	bl	800c87a <USBD_CtlError>
            err++;
 800c2e4:	7afb      	ldrb	r3, [r7, #11]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ea:	e089      	b.n	800c400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00b      	beq.n	800c310 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	7c12      	ldrb	r2, [r2, #16]
 800c304:	f107 0108 	add.w	r1, r7, #8
 800c308:	4610      	mov	r0, r2
 800c30a:	4798      	blx	r3
 800c30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c30e:	e077      	b.n	800c400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fab1 	bl	800c87a <USBD_CtlError>
            err++;
 800c318:	7afb      	ldrb	r3, [r7, #11]
 800c31a:	3301      	adds	r3, #1
 800c31c:	72fb      	strb	r3, [r7, #11]
          break;
 800c31e:	e06f      	b.n	800c400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	7c12      	ldrb	r2, [r2, #16]
 800c338:	f107 0108 	add.w	r1, r7, #8
 800c33c:	4610      	mov	r0, r2
 800c33e:	4798      	blx	r3
 800c340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c342:	e05d      	b.n	800c400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c344:	6839      	ldr	r1, [r7, #0]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa97 	bl	800c87a <USBD_CtlError>
            err++;
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	3301      	adds	r3, #1
 800c350:	72fb      	strb	r3, [r7, #11]
          break;
 800c352:	e055      	b.n	800c400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00b      	beq.n	800c378 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	7c12      	ldrb	r2, [r2, #16]
 800c36c:	f107 0108 	add.w	r1, r7, #8
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
 800c374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c376:	e043      	b.n	800c400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c378:	6839      	ldr	r1, [r7, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fa7d 	bl	800c87a <USBD_CtlError>
            err++;
 800c380:	7afb      	ldrb	r3, [r7, #11]
 800c382:	3301      	adds	r3, #1
 800c384:	72fb      	strb	r3, [r7, #11]
          break;
 800c386:	e03b      	b.n	800c400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00b      	beq.n	800c3ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39a:	695b      	ldr	r3, [r3, #20]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	7c12      	ldrb	r2, [r2, #16]
 800c3a0:	f107 0108 	add.w	r1, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3aa:	e029      	b.n	800c400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fa63 	bl	800c87a <USBD_CtlError>
            err++;
 800c3b4:	7afb      	ldrb	r3, [r7, #11]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ba:	e021      	b.n	800c400 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00b      	beq.n	800c3e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	7c12      	ldrb	r2, [r2, #16]
 800c3d4:	f107 0108 	add.w	r1, r7, #8
 800c3d8:	4610      	mov	r0, r2
 800c3da:	4798      	blx	r3
 800c3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3de:	e00f      	b.n	800c400 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fa49 	bl	800c87a <USBD_CtlError>
            err++;
 800c3e8:	7afb      	ldrb	r3, [r7, #11]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ee:	e007      	b.n	800c400 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fa41 	bl	800c87a <USBD_CtlError>
          err++;
 800c3f8:	7afb      	ldrb	r3, [r7, #11]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c3fe:	bf00      	nop
      }
      break;
 800c400:	e037      	b.n	800c472 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	7c1b      	ldrb	r3, [r3, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d109      	bne.n	800c41e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c412:	f107 0208 	add.w	r2, r7, #8
 800c416:	4610      	mov	r0, r2
 800c418:	4798      	blx	r3
 800c41a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c41c:	e029      	b.n	800c472 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 fa2a 	bl	800c87a <USBD_CtlError>
        err++;
 800c426:	7afb      	ldrb	r3, [r7, #11]
 800c428:	3301      	adds	r3, #1
 800c42a:	72fb      	strb	r3, [r7, #11]
      break;
 800c42c:	e021      	b.n	800c472 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	7c1b      	ldrb	r3, [r3, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10d      	bne.n	800c452 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43e:	f107 0208 	add.w	r2, r7, #8
 800c442:	4610      	mov	r0, r2
 800c444:	4798      	blx	r3
 800c446:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3301      	adds	r3, #1
 800c44c:	2207      	movs	r2, #7
 800c44e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c450:	e00f      	b.n	800c472 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fa10 	bl	800c87a <USBD_CtlError>
        err++;
 800c45a:	7afb      	ldrb	r3, [r7, #11]
 800c45c:	3301      	adds	r3, #1
 800c45e:	72fb      	strb	r3, [r7, #11]
      break;
 800c460:	e007      	b.n	800c472 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fa08 	bl	800c87a <USBD_CtlError>
      err++;
 800c46a:	7afb      	ldrb	r3, [r7, #11]
 800c46c:	3301      	adds	r3, #1
 800c46e:	72fb      	strb	r3, [r7, #11]
      break;
 800c470:	bf00      	nop
  }

  if (err != 0U)
 800c472:	7afb      	ldrb	r3, [r7, #11]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d11e      	bne.n	800c4b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	88db      	ldrh	r3, [r3, #6]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d016      	beq.n	800c4ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c480:	893b      	ldrh	r3, [r7, #8]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00e      	beq.n	800c4a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	88da      	ldrh	r2, [r3, #6]
 800c48a:	893b      	ldrh	r3, [r7, #8]
 800c48c:	4293      	cmp	r3, r2
 800c48e:	bf28      	it	cs
 800c490:	4613      	movcs	r3, r2
 800c492:	b29b      	uxth	r3, r3
 800c494:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c496:	893b      	ldrh	r3, [r7, #8]
 800c498:	461a      	mov	r2, r3
 800c49a:	68f9      	ldr	r1, [r7, #12]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fa5d 	bl	800c95c <USBD_CtlSendData>
 800c4a2:	e009      	b.n	800c4b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f9e7 	bl	800c87a <USBD_CtlError>
 800c4ac:	e004      	b.n	800c4b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 faae 	bl	800ca10 <USBD_CtlSendStatus>
 800c4b4:	e000      	b.n	800c4b8 <USBD_GetDescriptor+0x320>
    return;
 800c4b6:	bf00      	nop
  }
}
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop

0800c4c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	889b      	ldrh	r3, [r3, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d131      	bne.n	800c536 <USBD_SetAddress+0x76>
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	88db      	ldrh	r3, [r3, #6]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d12d      	bne.n	800c536 <USBD_SetAddress+0x76>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	885b      	ldrh	r3, [r3, #2]
 800c4de:	2b7f      	cmp	r3, #127	; 0x7f
 800c4e0:	d829      	bhi.n	800c536 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	885b      	ldrh	r3, [r3, #2]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d104      	bne.n	800c504 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f9bc 	bl	800c87a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c502:	e01d      	b.n	800c540 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7bfa      	ldrb	r2, [r7, #15]
 800c508:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 ffeb 	bl	800d4ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fa7a 	bl	800ca10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d004      	beq.n	800c52c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2202      	movs	r2, #2
 800c526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c52a:	e009      	b.n	800c540 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c534:	e004      	b.n	800c540 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f99e 	bl	800c87a <USBD_CtlError>
  }
}
 800c53e:	bf00      	nop
 800c540:	bf00      	nop
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	885b      	ldrh	r3, [r3, #2]
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	4b4e      	ldr	r3, [pc, #312]	; (800c698 <USBD_SetConfig+0x150>)
 800c55e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c560:	4b4d      	ldr	r3, [pc, #308]	; (800c698 <USBD_SetConfig+0x150>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d905      	bls.n	800c574 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f985 	bl	800c87a <USBD_CtlError>
    return USBD_FAIL;
 800c570:	2303      	movs	r3, #3
 800c572:	e08c      	b.n	800c68e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d002      	beq.n	800c586 <USBD_SetConfig+0x3e>
 800c580:	2b03      	cmp	r3, #3
 800c582:	d029      	beq.n	800c5d8 <USBD_SetConfig+0x90>
 800c584:	e075      	b.n	800c672 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c586:	4b44      	ldr	r3, [pc, #272]	; (800c698 <USBD_SetConfig+0x150>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d020      	beq.n	800c5d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c58e:	4b42      	ldr	r3, [pc, #264]	; (800c698 <USBD_SetConfig+0x150>)
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	461a      	mov	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c598:	4b3f      	ldr	r3, [pc, #252]	; (800c698 <USBD_SetConfig+0x150>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7fe ffbd 	bl	800b51e <USBD_SetClassConfig>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d008      	beq.n	800c5c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c5ae:	6839      	ldr	r1, [r7, #0]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f962 	bl	800c87a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5be:	e065      	b.n	800c68c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fa25 	bl	800ca10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5ce:	e05d      	b.n	800c68c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f000 fa1d 	bl	800ca10 <USBD_CtlSendStatus>
      break;
 800c5d6:	e059      	b.n	800c68c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5d8:	4b2f      	ldr	r3, [pc, #188]	; (800c698 <USBD_SetConfig+0x150>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d112      	bne.n	800c606 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c5e8:	4b2b      	ldr	r3, [pc, #172]	; (800c698 <USBD_SetConfig+0x150>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5f2:	4b29      	ldr	r3, [pc, #164]	; (800c698 <USBD_SetConfig+0x150>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7fe ffac 	bl	800b556 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fa06 	bl	800ca10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c604:	e042      	b.n	800c68c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c606:	4b24      	ldr	r3, [pc, #144]	; (800c698 <USBD_SetConfig+0x150>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	429a      	cmp	r2, r3
 800c612:	d02a      	beq.n	800c66a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	4619      	mov	r1, r3
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7fe ff9a 	bl	800b556 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c622:	4b1d      	ldr	r3, [pc, #116]	; (800c698 <USBD_SetConfig+0x150>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	461a      	mov	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c62c:	4b1a      	ldr	r3, [pc, #104]	; (800c698 <USBD_SetConfig+0x150>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7fe ff73 	bl	800b51e <USBD_SetClassConfig>
 800c638:	4603      	mov	r3, r0
 800c63a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00f      	beq.n	800c662 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f918 	bl	800c87a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7fe ff7f 	bl	800b556 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c660:	e014      	b.n	800c68c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f9d4 	bl	800ca10 <USBD_CtlSendStatus>
      break;
 800c668:	e010      	b.n	800c68c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f9d0 	bl	800ca10 <USBD_CtlSendStatus>
      break;
 800c670:	e00c      	b.n	800c68c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f900 	bl	800c87a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c67a:	4b07      	ldr	r3, [pc, #28]	; (800c698 <USBD_SetConfig+0x150>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7fe ff68 	bl	800b556 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c686:	2303      	movs	r3, #3
 800c688:	73fb      	strb	r3, [r7, #15]
      break;
 800c68a:	bf00      	nop
  }

  return ret;
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	2000081c 	.word	0x2000081c

0800c69c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	88db      	ldrh	r3, [r3, #6]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d004      	beq.n	800c6b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f8e2 	bl	800c87a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6b6:	e023      	b.n	800c700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	dc02      	bgt.n	800c6ca <USBD_GetConfig+0x2e>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	dc03      	bgt.n	800c6d0 <USBD_GetConfig+0x34>
 800c6c8:	e015      	b.n	800c6f6 <USBD_GetConfig+0x5a>
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d00b      	beq.n	800c6e6 <USBD_GetConfig+0x4a>
 800c6ce:	e012      	b.n	800c6f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3308      	adds	r3, #8
 800c6da:	2201      	movs	r2, #1
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f93c 	bl	800c95c <USBD_CtlSendData>
        break;
 800c6e4:	e00c      	b.n	800c700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f934 	bl	800c95c <USBD_CtlSendData>
        break;
 800c6f4:	e004      	b.n	800c700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6f6:	6839      	ldr	r1, [r7, #0]
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f8be 	bl	800c87a <USBD_CtlError>
        break;
 800c6fe:	bf00      	nop
}
 800c700:	bf00      	nop
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	3b01      	subs	r3, #1
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d81e      	bhi.n	800c75e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	88db      	ldrh	r3, [r3, #6]
 800c724:	2b02      	cmp	r3, #2
 800c726:	d004      	beq.n	800c732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f8a5 	bl	800c87a <USBD_CtlError>
        break;
 800c730:	e01a      	b.n	800c768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d005      	beq.n	800c74e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	f043 0202 	orr.w	r2, r3, #2
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	330c      	adds	r3, #12
 800c752:	2202      	movs	r2, #2
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f900 	bl	800c95c <USBD_CtlSendData>
      break;
 800c75c:	e004      	b.n	800c768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f88a 	bl	800c87a <USBD_CtlError>
      break;
 800c766:	bf00      	nop
  }
}
 800c768:	bf00      	nop
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	885b      	ldrh	r3, [r3, #2]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d107      	bne.n	800c792 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2201      	movs	r2, #1
 800c786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f940 	bl	800ca10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c790:	e013      	b.n	800c7ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	885b      	ldrh	r3, [r3, #2]
 800c796:	2b02      	cmp	r3, #2
 800c798:	d10b      	bne.n	800c7b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	889b      	ldrh	r3, [r3, #4]
 800c79e:	0a1b      	lsrs	r3, r3, #8
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f930 	bl	800ca10 <USBD_CtlSendStatus>
}
 800c7b0:	e003      	b.n	800c7ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f860 	bl	800c87a <USBD_CtlError>
}
 800c7ba:	bf00      	nop
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b082      	sub	sp, #8
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d80b      	bhi.n	800c7f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	885b      	ldrh	r3, [r3, #2]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d10c      	bne.n	800c7fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f910 	bl	800ca10 <USBD_CtlSendStatus>
      }
      break;
 800c7f0:	e004      	b.n	800c7fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f840 	bl	800c87a <USBD_CtlError>
      break;
 800c7fa:	e000      	b.n	800c7fe <USBD_ClrFeature+0x3c>
      break;
 800c7fc:	bf00      	nop
  }
}
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b084      	sub	sp, #16
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	781a      	ldrb	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3301      	adds	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	781a      	ldrb	r2, [r3, #0]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3301      	adds	r3, #1
 800c82e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f7ff fa17 	bl	800bc64 <SWAPBYTE>
 800c836:	4603      	mov	r3, r0
 800c838:	461a      	mov	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3301      	adds	r3, #1
 800c842:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3301      	adds	r3, #1
 800c848:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7ff fa0a 	bl	800bc64 <SWAPBYTE>
 800c850:	4603      	mov	r3, r0
 800c852:	461a      	mov	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	3301      	adds	r3, #1
 800c85c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3301      	adds	r3, #1
 800c862:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f7ff f9fd 	bl	800bc64 <SWAPBYTE>
 800c86a:	4603      	mov	r3, r0
 800c86c:	461a      	mov	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	80da      	strh	r2, [r3, #6]
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b082      	sub	sp, #8
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c884:	2180      	movs	r1, #128	; 0x80
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fdc6 	bl	800d418 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c88c:	2100      	movs	r1, #0
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fdc2 	bl	800d418 <USBD_LL_StallEP>
}
 800c894:	bf00      	nop
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d036      	beq.n	800c920 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c8b6:	6938      	ldr	r0, [r7, #16]
 800c8b8:	f000 f836 	bl	800c928 <USBD_GetLen>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	3301      	adds	r3, #1
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	005b      	lsls	r3, r3, #1
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	7812      	ldrb	r2, [r2, #0]
 800c8d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
 800c8de:	68ba      	ldr	r2, [r7, #8]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8ec:	e013      	b.n	800c916 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	7812      	ldrb	r2, [r2, #0]
 800c8f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	613b      	str	r3, [r7, #16]
    idx++;
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	3301      	adds	r3, #1
 800c904:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	4413      	add	r3, r2
 800c90c:	2200      	movs	r2, #0
 800c90e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	3301      	adds	r3, #1
 800c914:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e7      	bne.n	800c8ee <USBD_GetString+0x52>
 800c91e:	e000      	b.n	800c922 <USBD_GetString+0x86>
    return;
 800c920:	bf00      	nop
  }
}
 800c922:	3718      	adds	r7, #24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c930:	2300      	movs	r3, #0
 800c932:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c938:	e005      	b.n	800c946 <USBD_GetLen+0x1e>
  {
    len++;
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
 800c93c:	3301      	adds	r3, #1
 800c93e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	3301      	adds	r3, #1
 800c944:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1f5      	bne.n	800c93a <USBD_GetLen+0x12>
  }

  return len;
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2202      	movs	r2, #2
 800c96c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	2100      	movs	r1, #0
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 fdd1 	bl	800d52a <USBD_LL_Transmit>

  return USBD_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b084      	sub	sp, #16
 800c996:	af00      	add	r7, sp, #0
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f000 fdc0 	bl	800d52a <USBD_LL_Transmit>

  return USBD_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2203      	movs	r2, #3
 800c9c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	2100      	movs	r1, #0
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 fdc4 	bl	800d56c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	2100      	movs	r1, #0
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f000 fdb3 	bl	800d56c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2204      	movs	r2, #4
 800ca1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca20:	2300      	movs	r3, #0
 800ca22:	2200      	movs	r2, #0
 800ca24:	2100      	movs	r1, #0
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fd7f 	bl	800d52a <USBD_LL_Transmit>

  return USBD_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b082      	sub	sp, #8
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2205      	movs	r2, #5
 800ca42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca46:	2300      	movs	r3, #0
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fd8d 	bl	800d56c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca60:	2200      	movs	r2, #0
 800ca62:	4912      	ldr	r1, [pc, #72]	; (800caac <MX_USB_DEVICE_Init+0x50>)
 800ca64:	4812      	ldr	r0, [pc, #72]	; (800cab0 <MX_USB_DEVICE_Init+0x54>)
 800ca66:	f7fe fcdd 	bl	800b424 <USBD_Init>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca70:	f7f5 fe04 	bl	800267c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca74:	490f      	ldr	r1, [pc, #60]	; (800cab4 <MX_USB_DEVICE_Init+0x58>)
 800ca76:	480e      	ldr	r0, [pc, #56]	; (800cab0 <MX_USB_DEVICE_Init+0x54>)
 800ca78:	f7fe fd04 	bl	800b484 <USBD_RegisterClass>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca82:	f7f5 fdfb 	bl	800267c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca86:	490c      	ldr	r1, [pc, #48]	; (800cab8 <MX_USB_DEVICE_Init+0x5c>)
 800ca88:	4809      	ldr	r0, [pc, #36]	; (800cab0 <MX_USB_DEVICE_Init+0x54>)
 800ca8a:	f7fe fbf5 	bl	800b278 <USBD_CDC_RegisterInterface>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca94:	f7f5 fdf2 	bl	800267c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca98:	4805      	ldr	r0, [pc, #20]	; (800cab0 <MX_USB_DEVICE_Init+0x54>)
 800ca9a:	f7fe fd29 	bl	800b4f0 <USBD_Start>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d001      	beq.n	800caa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800caa4:	f7f5 fdea 	bl	800267c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800caa8:	bf00      	nop
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	200000d4 	.word	0x200000d4
 800cab0:	20000820 	.word	0x20000820
 800cab4:	20000040 	.word	0x20000040
 800cab8:	200000c0 	.word	0x200000c0

0800cabc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cac0:	2200      	movs	r2, #0
 800cac2:	4905      	ldr	r1, [pc, #20]	; (800cad8 <CDC_Init_FS+0x1c>)
 800cac4:	4805      	ldr	r0, [pc, #20]	; (800cadc <CDC_Init_FS+0x20>)
 800cac6:	f7fe fbf1 	bl	800b2ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800caca:	4905      	ldr	r1, [pc, #20]	; (800cae0 <CDC_Init_FS+0x24>)
 800cacc:	4803      	ldr	r0, [pc, #12]	; (800cadc <CDC_Init_FS+0x20>)
 800cace:	f7fe fc0f 	bl	800b2f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cad2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	200012fc 	.word	0x200012fc
 800cadc:	20000820 	.word	0x20000820
 800cae0:	20000afc 	.word	0x20000afc

0800cae4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cae8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800caea:	4618      	mov	r0, r3
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	6039      	str	r1, [r7, #0]
 800cafe:	71fb      	strb	r3, [r7, #7]
 800cb00:	4613      	mov	r3, r2
 800cb02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb04:	79fb      	ldrb	r3, [r7, #7]
 800cb06:	2b23      	cmp	r3, #35	; 0x23
 800cb08:	d84a      	bhi.n	800cba0 <CDC_Control_FS+0xac>
 800cb0a:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <CDC_Control_FS+0x1c>)
 800cb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb10:	0800cba1 	.word	0x0800cba1
 800cb14:	0800cba1 	.word	0x0800cba1
 800cb18:	0800cba1 	.word	0x0800cba1
 800cb1c:	0800cba1 	.word	0x0800cba1
 800cb20:	0800cba1 	.word	0x0800cba1
 800cb24:	0800cba1 	.word	0x0800cba1
 800cb28:	0800cba1 	.word	0x0800cba1
 800cb2c:	0800cba1 	.word	0x0800cba1
 800cb30:	0800cba1 	.word	0x0800cba1
 800cb34:	0800cba1 	.word	0x0800cba1
 800cb38:	0800cba1 	.word	0x0800cba1
 800cb3c:	0800cba1 	.word	0x0800cba1
 800cb40:	0800cba1 	.word	0x0800cba1
 800cb44:	0800cba1 	.word	0x0800cba1
 800cb48:	0800cba1 	.word	0x0800cba1
 800cb4c:	0800cba1 	.word	0x0800cba1
 800cb50:	0800cba1 	.word	0x0800cba1
 800cb54:	0800cba1 	.word	0x0800cba1
 800cb58:	0800cba1 	.word	0x0800cba1
 800cb5c:	0800cba1 	.word	0x0800cba1
 800cb60:	0800cba1 	.word	0x0800cba1
 800cb64:	0800cba1 	.word	0x0800cba1
 800cb68:	0800cba1 	.word	0x0800cba1
 800cb6c:	0800cba1 	.word	0x0800cba1
 800cb70:	0800cba1 	.word	0x0800cba1
 800cb74:	0800cba1 	.word	0x0800cba1
 800cb78:	0800cba1 	.word	0x0800cba1
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cba1 	.word	0x0800cba1
 800cb84:	0800cba1 	.word	0x0800cba1
 800cb88:	0800cba1 	.word	0x0800cba1
 800cb8c:	0800cba1 	.word	0x0800cba1
 800cb90:	0800cba1 	.word	0x0800cba1
 800cb94:	0800cba1 	.word	0x0800cba1
 800cb98:	0800cba1 	.word	0x0800cba1
 800cb9c:	0800cba1 	.word	0x0800cba1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cba0:	bf00      	nop
  }

  return (USBD_OK);
 800cba2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b088      	sub	sp, #32
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	4853      	ldr	r0, [pc, #332]	; (800cd0c <CDC_Receive_FS+0x15c>)
 800cbbe:	f7fe fb97 	bl	800b2f0 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbc2:	4852      	ldr	r0, [pc, #328]	; (800cd0c <CDC_Receive_FS+0x15c>)
 800cbc4:	f7fe fbf8 	bl	800b3b8 <USBD_CDC_ReceivePacket>
	  uint8_t len=(uint8_t)*Len;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	73fb      	strb	r3, [r7, #15]
	  memset(buffer,'\0',64);
 800cbce:	2240      	movs	r2, #64	; 0x40
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	484f      	ldr	r0, [pc, #316]	; (800cd10 <CDC_Receive_FS+0x160>)
 800cbd4:	f000 fdcc 	bl	800d770 <memset>
	  memcpy(buffer,Buf,len);
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6879      	ldr	r1, [r7, #4]
 800cbde:	484c      	ldr	r0, [pc, #304]	; (800cd10 <CDC_Receive_FS+0x160>)
 800cbe0:	f000 fdb8 	bl	800d754 <memcpy>
	  memset(Buf,'\0',len);
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	2100      	movs	r1, #0
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fdc0 	bl	800d770 <memset>




	  memset(bufferaux_v,'\0',64);
 800cbf0:	2240      	movs	r2, #64	; 0x40
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	4847      	ldr	r0, [pc, #284]	; (800cd14 <CDC_Receive_FS+0x164>)
 800cbf6:	f000 fdbb 	bl	800d770 <memset>
	  memset(bufferaux_w,'\0',64);
 800cbfa:	2240      	movs	r2, #64	; 0x40
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	4846      	ldr	r0, [pc, #280]	; (800cd18 <CDC_Receive_FS+0x168>)
 800cc00:	f000 fdb6 	bl	800d770 <memset>

	  for(int i=0;i<sizeof(buffer);i++)
 800cc04:	2300      	movs	r3, #0
 800cc06:	61fb      	str	r3, [r7, #28]
 800cc08:	e01c      	b.n	800cc44 <CDC_Receive_FS+0x94>
	  {
		  test1=buffer[i];
 800cc0a:	4a41      	ldr	r2, [pc, #260]	; (800cd10 <CDC_Receive_FS+0x160>)
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	4413      	add	r3, r2
 800cc10:	781a      	ldrb	r2, [r3, #0]
 800cc12:	4b42      	ldr	r3, [pc, #264]	; (800cd1c <CDC_Receive_FS+0x16c>)
 800cc14:	701a      	strb	r2, [r3, #0]
		  if(strcmp(&test1,"v")==0) intposv=i;
 800cc16:	4942      	ldr	r1, [pc, #264]	; (800cd20 <CDC_Receive_FS+0x170>)
 800cc18:	4840      	ldr	r0, [pc, #256]	; (800cd1c <CDC_Receive_FS+0x16c>)
 800cc1a:	f7f3 faf9 	bl	8000210 <strcmp>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d102      	bne.n	800cc2a <CDC_Receive_FS+0x7a>
 800cc24:	4a3f      	ldr	r2, [pc, #252]	; (800cd24 <CDC_Receive_FS+0x174>)
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	6013      	str	r3, [r2, #0]
		  if(strcmp(&test1, "w")==0) intposw=i;
 800cc2a:	493f      	ldr	r1, [pc, #252]	; (800cd28 <CDC_Receive_FS+0x178>)
 800cc2c:	483b      	ldr	r0, [pc, #236]	; (800cd1c <CDC_Receive_FS+0x16c>)
 800cc2e:	f7f3 faef 	bl	8000210 <strcmp>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d102      	bne.n	800cc3e <CDC_Receive_FS+0x8e>
 800cc38:	4a3c      	ldr	r2, [pc, #240]	; (800cd2c <CDC_Receive_FS+0x17c>)
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	6013      	str	r3, [r2, #0]
	  for(int i=0;i<sizeof(buffer);i++)
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	3301      	adds	r3, #1
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	2b3f      	cmp	r3, #63	; 0x3f
 800cc48:	d9df      	bls.n	800cc0a <CDC_Receive_FS+0x5a>
	  }


	  int j=0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61bb      	str	r3, [r7, #24]
	  for(int i=intposv+1;i<intposw-intposv;i++){
 800cc4e:	4b35      	ldr	r3, [pc, #212]	; (800cd24 <CDC_Receive_FS+0x174>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	3301      	adds	r3, #1
 800cc54:	617b      	str	r3, [r7, #20]
 800cc56:	e00e      	b.n	800cc76 <CDC_Receive_FS+0xc6>
	  		  bufferaux_v[j]=buffer[i];
 800cc58:	4a2d      	ldr	r2, [pc, #180]	; (800cd10 <CDC_Receive_FS+0x160>)
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	7819      	ldrb	r1, [r3, #0]
 800cc60:	4a2c      	ldr	r2, [pc, #176]	; (800cd14 <CDC_Receive_FS+0x164>)
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	4413      	add	r3, r2
 800cc66:	460a      	mov	r2, r1
 800cc68:	701a      	strb	r2, [r3, #0]
	  		  j++;
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	61bb      	str	r3, [r7, #24]
	  for(int i=intposv+1;i<intposw-intposv;i++){
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	3301      	adds	r3, #1
 800cc74:	617b      	str	r3, [r7, #20]
 800cc76:	4b2d      	ldr	r3, [pc, #180]	; (800cd2c <CDC_Receive_FS+0x17c>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	4b2a      	ldr	r3, [pc, #168]	; (800cd24 <CDC_Receive_FS+0x174>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	dbe8      	blt.n	800cc58 <CDC_Receive_FS+0xa8>
	  }

	  j=0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61bb      	str	r3, [r7, #24]
	  for(int i=intposw+1;i<sizeof(buffer);i++){
 800cc8a:	4b28      	ldr	r3, [pc, #160]	; (800cd2c <CDC_Receive_FS+0x17c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	613b      	str	r3, [r7, #16]
 800cc92:	e00e      	b.n	800ccb2 <CDC_Receive_FS+0x102>
	   		  bufferaux_w[j]=buffer[i];
 800cc94:	4a1e      	ldr	r2, [pc, #120]	; (800cd10 <CDC_Receive_FS+0x160>)
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	4413      	add	r3, r2
 800cc9a:	7819      	ldrb	r1, [r3, #0]
 800cc9c:	4a1e      	ldr	r2, [pc, #120]	; (800cd18 <CDC_Receive_FS+0x168>)
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	4413      	add	r3, r2
 800cca2:	460a      	mov	r2, r1
 800cca4:	701a      	strb	r2, [r3, #0]
	   		  j++;
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	61bb      	str	r3, [r7, #24]
	  for(int i=intposw+1;i<sizeof(buffer);i++){
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	613b      	str	r3, [r7, #16]
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b3f      	cmp	r3, #63	; 0x3f
 800ccb6:	d9ed      	bls.n	800cc94 <CDC_Receive_FS+0xe4>
	  }
	  v_in=(float)atof(bufferaux_v);
 800ccb8:	4816      	ldr	r0, [pc, #88]	; (800cd14 <CDC_Receive_FS+0x164>)
 800ccba:	f000 fd1d 	bl	800d6f8 <atof>
 800ccbe:	ec53 2b10 	vmov	r2, r3, d0
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	f7f3 ffbf 	bl	8000c48 <__aeabi_d2f>
 800ccca:	4603      	mov	r3, r0
 800cccc:	4a18      	ldr	r2, [pc, #96]	; (800cd30 <CDC_Receive_FS+0x180>)
 800ccce:	6013      	str	r3, [r2, #0]
	  w_in=(float)atof(bufferaux_w);
 800ccd0:	4811      	ldr	r0, [pc, #68]	; (800cd18 <CDC_Receive_FS+0x168>)
 800ccd2:	f000 fd11 	bl	800d6f8 <atof>
 800ccd6:	ec53 2b10 	vmov	r2, r3, d0
 800ccda:	4610      	mov	r0, r2
 800ccdc:	4619      	mov	r1, r3
 800ccde:	f7f3 ffb3 	bl	8000c48 <__aeabi_d2f>
 800cce2:	4603      	mov	r3, r0
 800cce4:	4a13      	ldr	r2, [pc, #76]	; (800cd34 <CDC_Receive_FS+0x184>)
 800cce6:	6013      	str	r3, [r2, #0]

	  setSpeed(v_in, w_in);
 800cce8:	4b11      	ldr	r3, [pc, #68]	; (800cd30 <CDC_Receive_FS+0x180>)
 800ccea:	edd3 7a00 	vldr	s15, [r3]
 800ccee:	4b11      	ldr	r3, [pc, #68]	; (800cd34 <CDC_Receive_FS+0x184>)
 800ccf0:	ed93 7a00 	vldr	s14, [r3]
 800ccf4:	eef0 0a47 	vmov.f32	s1, s14
 800ccf8:	eeb0 0a67 	vmov.f32	s0, s15
 800ccfc:	f7f6 fb1c 	bl	8003338 <setSpeed>

	  //CDC_Transmit_FS(Buf, *Len);
	  return (USBD_OK);
 800cd00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3720      	adds	r7, #32
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	20000820 	.word	0x20000820
 800cd10:	20000640 	.word	0x20000640
 800cd14:	20000680 	.word	0x20000680
 800cd18:	200006c0 	.word	0x200006c0
 800cd1c:	20000708 	.word	0x20000708
 800cd20:	08013240 	.word	0x08013240
 800cd24:	2000070c 	.word	0x2000070c
 800cd28:	08013244 	.word	0x08013244
 800cd2c:	20000710 	.word	0x20000710
 800cd30:	20000700 	.word	0x20000700
 800cd34:	20000704 	.word	0x20000704

0800cd38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	460b      	mov	r3, r1
 800cd42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd44:	2300      	movs	r3, #0
 800cd46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd48:	4b0d      	ldr	r3, [pc, #52]	; (800cd80 <CDC_Transmit_FS+0x48>)
 800cd4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e00b      	b.n	800cd76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd5e:	887b      	ldrh	r3, [r7, #2]
 800cd60:	461a      	mov	r2, r3
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	4806      	ldr	r0, [pc, #24]	; (800cd80 <CDC_Transmit_FS+0x48>)
 800cd66:	f7fe faa1 	bl	800b2ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd6a:	4805      	ldr	r0, [pc, #20]	; (800cd80 <CDC_Transmit_FS+0x48>)
 800cd6c:	f7fe fade 	bl	800b32c <USBD_CDC_TransmitPacket>
 800cd70:	4603      	mov	r3, r0
 800cd72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	20000820 	.word	0x20000820

0800cd84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b087      	sub	sp, #28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	371c      	adds	r7, #28
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
	...

0800cda8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	4603      	mov	r3, r0
 800cdb0:	6039      	str	r1, [r7, #0]
 800cdb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	2212      	movs	r2, #18
 800cdb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cdba:	4b03      	ldr	r3, [pc, #12]	; (800cdc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	200000f4 	.word	0x200000f4

0800cdcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	6039      	str	r1, [r7, #0]
 800cdd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	2204      	movs	r2, #4
 800cddc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdde:	4b03      	ldr	r3, [pc, #12]	; (800cdec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr
 800cdec:	20000114 	.word	0x20000114

0800cdf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	6039      	str	r1, [r7, #0]
 800cdfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdfc:	79fb      	ldrb	r3, [r7, #7]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d105      	bne.n	800ce0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	4907      	ldr	r1, [pc, #28]	; (800ce24 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce06:	4808      	ldr	r0, [pc, #32]	; (800ce28 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce08:	f7ff fd48 	bl	800c89c <USBD_GetString>
 800ce0c:	e004      	b.n	800ce18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	4904      	ldr	r1, [pc, #16]	; (800ce24 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce12:	4805      	ldr	r0, [pc, #20]	; (800ce28 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce14:	f7ff fd42 	bl	800c89c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce18:	4b02      	ldr	r3, [pc, #8]	; (800ce24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	20001afc 	.word	0x20001afc
 800ce28:	08013248 	.word	0x08013248

0800ce2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	4603      	mov	r3, r0
 800ce34:	6039      	str	r1, [r7, #0]
 800ce36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce38:	683a      	ldr	r2, [r7, #0]
 800ce3a:	4904      	ldr	r1, [pc, #16]	; (800ce4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce3c:	4804      	ldr	r0, [pc, #16]	; (800ce50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce3e:	f7ff fd2d 	bl	800c89c <USBD_GetString>
  return USBD_StrDesc;
 800ce42:	4b02      	ldr	r3, [pc, #8]	; (800ce4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	20001afc 	.word	0x20001afc
 800ce50:	08013260 	.word	0x08013260

0800ce54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	6039      	str	r1, [r7, #0]
 800ce5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	221a      	movs	r2, #26
 800ce64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce66:	f000 f855 	bl	800cf14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce6a:	4b02      	ldr	r3, [pc, #8]	; (800ce74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	20000118 	.word	0x20000118

0800ce78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	6039      	str	r1, [r7, #0]
 800ce82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d105      	bne.n	800ce96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	4907      	ldr	r1, [pc, #28]	; (800ceac <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce8e:	4808      	ldr	r0, [pc, #32]	; (800ceb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce90:	f7ff fd04 	bl	800c89c <USBD_GetString>
 800ce94:	e004      	b.n	800cea0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	4904      	ldr	r1, [pc, #16]	; (800ceac <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce9a:	4805      	ldr	r0, [pc, #20]	; (800ceb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce9c:	f7ff fcfe 	bl	800c89c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cea0:	4b02      	ldr	r3, [pc, #8]	; (800ceac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20001afc 	.word	0x20001afc
 800ceb0:	08013274 	.word	0x08013274

0800ceb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	6039      	str	r1, [r7, #0]
 800cebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cec0:	79fb      	ldrb	r3, [r7, #7]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d105      	bne.n	800ced2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	4907      	ldr	r1, [pc, #28]	; (800cee8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceca:	4808      	ldr	r0, [pc, #32]	; (800ceec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cecc:	f7ff fce6 	bl	800c89c <USBD_GetString>
 800ced0:	e004      	b.n	800cedc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	4904      	ldr	r1, [pc, #16]	; (800cee8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ced6:	4805      	ldr	r0, [pc, #20]	; (800ceec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ced8:	f7ff fce0 	bl	800c89c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cedc:	4b02      	ldr	r3, [pc, #8]	; (800cee8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20001afc 	.word	0x20001afc
 800ceec:	08013280 	.word	0x08013280

0800cef0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	4603      	mov	r3, r0
 800cef8:	6039      	str	r1, [r7, #0]
 800cefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	220c      	movs	r2, #12
 800cf00:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cf02:	4b03      	ldr	r3, [pc, #12]	; (800cf10 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	20000108 	.word	0x20000108

0800cf14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf1a:	4b0f      	ldr	r3, [pc, #60]	; (800cf58 <Get_SerialNum+0x44>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf20:	4b0e      	ldr	r3, [pc, #56]	; (800cf5c <Get_SerialNum+0x48>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf26:	4b0e      	ldr	r3, [pc, #56]	; (800cf60 <Get_SerialNum+0x4c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4413      	add	r3, r2
 800cf32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d009      	beq.n	800cf4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf3a:	2208      	movs	r2, #8
 800cf3c:	4909      	ldr	r1, [pc, #36]	; (800cf64 <Get_SerialNum+0x50>)
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f000 f814 	bl	800cf6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf44:	2204      	movs	r2, #4
 800cf46:	4908      	ldr	r1, [pc, #32]	; (800cf68 <Get_SerialNum+0x54>)
 800cf48:	68b8      	ldr	r0, [r7, #8]
 800cf4a:	f000 f80f 	bl	800cf6c <IntToUnicode>
  }
}
 800cf4e:	bf00      	nop
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	1fff7a10 	.word	0x1fff7a10
 800cf5c:	1fff7a14 	.word	0x1fff7a14
 800cf60:	1fff7a18 	.word	0x1fff7a18
 800cf64:	2000011a 	.word	0x2000011a
 800cf68:	2000012a 	.word	0x2000012a

0800cf6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	4613      	mov	r3, r2
 800cf78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf7e:	2300      	movs	r3, #0
 800cf80:	75fb      	strb	r3, [r7, #23]
 800cf82:	e027      	b.n	800cfd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	0f1b      	lsrs	r3, r3, #28
 800cf88:	2b09      	cmp	r3, #9
 800cf8a:	d80b      	bhi.n	800cfa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	0f1b      	lsrs	r3, r3, #28
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	4619      	mov	r1, r3
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	440b      	add	r3, r1
 800cf9c:	3230      	adds	r2, #48	; 0x30
 800cf9e:	b2d2      	uxtb	r2, r2
 800cfa0:	701a      	strb	r2, [r3, #0]
 800cfa2:	e00a      	b.n	800cfba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	0f1b      	lsrs	r3, r3, #28
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	7dfb      	ldrb	r3, [r7, #23]
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	4619      	mov	r1, r3
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	440b      	add	r3, r1
 800cfb4:	3237      	adds	r2, #55	; 0x37
 800cfb6:	b2d2      	uxtb	r2, r2
 800cfb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	011b      	lsls	r3, r3, #4
 800cfbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfc0:	7dfb      	ldrb	r3, [r7, #23]
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	4413      	add	r3, r2
 800cfca:	2200      	movs	r2, #0
 800cfcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfce:	7dfb      	ldrb	r3, [r7, #23]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	75fb      	strb	r3, [r7, #23]
 800cfd4:	7dfa      	ldrb	r2, [r7, #23]
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d3d3      	bcc.n	800cf84 <IntToUnicode+0x18>
  }
}
 800cfdc:	bf00      	nop
 800cfde:	bf00      	nop
 800cfe0:	371c      	adds	r7, #28
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
	...

0800cfec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b0a0      	sub	sp, #128	; 0x80
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cff4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cff8:	2200      	movs	r2, #0
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	605a      	str	r2, [r3, #4]
 800cffe:	609a      	str	r2, [r3, #8]
 800d000:	60da      	str	r2, [r3, #12]
 800d002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d004:	f107 0310 	add.w	r3, r7, #16
 800d008:	225c      	movs	r2, #92	; 0x5c
 800d00a:	2100      	movs	r1, #0
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fbaf 	bl	800d770 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d01a:	d156      	bne.n	800d0ca <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d01c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d020:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800d022:	2300      	movs	r3, #0
 800d024:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d026:	f107 0310 	add.w	r3, r7, #16
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7f9 f860 	bl	80060f0 <HAL_RCCEx_PeriphCLKConfig>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d001      	beq.n	800d03a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800d036:	f7f5 fb21 	bl	800267c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d03a:	2300      	movs	r3, #0
 800d03c:	60fb      	str	r3, [r7, #12]
 800d03e:	4b25      	ldr	r3, [pc, #148]	; (800d0d4 <HAL_PCD_MspInit+0xe8>)
 800d040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d042:	4a24      	ldr	r2, [pc, #144]	; (800d0d4 <HAL_PCD_MspInit+0xe8>)
 800d044:	f043 0301 	orr.w	r3, r3, #1
 800d048:	6313      	str	r3, [r2, #48]	; 0x30
 800d04a:	4b22      	ldr	r3, [pc, #136]	; (800d0d4 <HAL_PCD_MspInit+0xe8>)
 800d04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800d056:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d05a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d05c:	2302      	movs	r3, #2
 800d05e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d060:	2300      	movs	r3, #0
 800d062:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d064:	2303      	movs	r3, #3
 800d066:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d068:	230a      	movs	r3, #10
 800d06a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d06c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d070:	4619      	mov	r1, r3
 800d072:	4819      	ldr	r0, [pc, #100]	; (800d0d8 <HAL_PCD_MspInit+0xec>)
 800d074:	f7f7 f966 	bl	8004344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d07c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d07e:	2300      	movs	r3, #0
 800d080:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d082:	2300      	movs	r3, #0
 800d084:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d086:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d08a:	4619      	mov	r1, r3
 800d08c:	4812      	ldr	r0, [pc, #72]	; (800d0d8 <HAL_PCD_MspInit+0xec>)
 800d08e:	f7f7 f959 	bl	8004344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d092:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <HAL_PCD_MspInit+0xe8>)
 800d094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d096:	4a0f      	ldr	r2, [pc, #60]	; (800d0d4 <HAL_PCD_MspInit+0xe8>)
 800d098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d09c:	6353      	str	r3, [r2, #52]	; 0x34
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60bb      	str	r3, [r7, #8]
 800d0a2:	4b0c      	ldr	r3, [pc, #48]	; (800d0d4 <HAL_PCD_MspInit+0xe8>)
 800d0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a6:	4a0b      	ldr	r2, [pc, #44]	; (800d0d4 <HAL_PCD_MspInit+0xe8>)
 800d0a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0ac:	6453      	str	r3, [r2, #68]	; 0x44
 800d0ae:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <HAL_PCD_MspInit+0xe8>)
 800d0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0b6:	60bb      	str	r3, [r7, #8]
 800d0b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	2100      	movs	r1, #0
 800d0be:	2043      	movs	r0, #67	; 0x43
 800d0c0:	f7f7 f877 	bl	80041b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0c4:	2043      	movs	r0, #67	; 0x43
 800d0c6:	f7f7 f890 	bl	80041ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0ca:	bf00      	nop
 800d0cc:	3780      	adds	r7, #128	; 0x80
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	40023800 	.word	0x40023800
 800d0d8:	40020000 	.word	0x40020000

0800d0dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4610      	mov	r0, r2
 800d0f4:	f7fe fa49 	bl	800b58a <USBD_LL_SetupStage>
}
 800d0f8:	bf00      	nop
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d112:	78fa      	ldrb	r2, [r7, #3]
 800d114:	6879      	ldr	r1, [r7, #4]
 800d116:	4613      	mov	r3, r2
 800d118:	00db      	lsls	r3, r3, #3
 800d11a:	4413      	add	r3, r2
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	440b      	add	r3, r1
 800d120:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	78fb      	ldrb	r3, [r7, #3]
 800d128:	4619      	mov	r1, r3
 800d12a:	f7fe fa83 	bl	800b634 <USBD_LL_DataOutStage>
}
 800d12e:	bf00      	nop
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b082      	sub	sp, #8
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	460b      	mov	r3, r1
 800d140:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d148:	78fa      	ldrb	r2, [r7, #3]
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	4613      	mov	r3, r2
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	4413      	add	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	440b      	add	r3, r1
 800d156:	334c      	adds	r3, #76	; 0x4c
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	78fb      	ldrb	r3, [r7, #3]
 800d15c:	4619      	mov	r1, r3
 800d15e:	f7fe fb1c 	bl	800b79a <USBD_LL_DataInStage>
}
 800d162:	bf00      	nop
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b082      	sub	sp, #8
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d178:	4618      	mov	r0, r3
 800d17a:	f7fe fc50 	bl	800ba1e <USBD_LL_SOF>
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b084      	sub	sp, #16
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d18e:	2301      	movs	r3, #1
 800d190:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d102      	bne.n	800d1a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
 800d19e:	e008      	b.n	800d1b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d102      	bne.n	800d1ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	73fb      	strb	r3, [r7, #15]
 800d1ac:	e001      	b.n	800d1b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d1ae:	f7f5 fa65 	bl	800267c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1b8:	7bfa      	ldrb	r2, [r7, #15]
 800d1ba:	4611      	mov	r1, r2
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe fbf0 	bl	800b9a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fe fb98 	bl	800b8fe <USBD_LL_Reset>
}
 800d1ce:	bf00      	nop
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
	...

0800d1d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fe fbeb 	bl	800b9c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	6812      	ldr	r2, [r2, #0]
 800d1fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d1fe:	f043 0301 	orr.w	r3, r3, #1
 800d202:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a1b      	ldr	r3, [r3, #32]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d20c:	4b04      	ldr	r3, [pc, #16]	; (800d220 <HAL_PCD_SuspendCallback+0x48>)
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	4a03      	ldr	r2, [pc, #12]	; (800d220 <HAL_PCD_SuspendCallback+0x48>)
 800d212:	f043 0306 	orr.w	r3, r3, #6
 800d216:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d218:	bf00      	nop
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	e000ed00 	.word	0xe000ed00

0800d224 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d232:	4618      	mov	r0, r3
 800d234:	f7fe fbdb 	bl	800b9ee <USBD_LL_Resume>
}
 800d238:	bf00      	nop
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	460b      	mov	r3, r1
 800d24a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d252:	78fa      	ldrb	r2, [r7, #3]
 800d254:	4611      	mov	r1, r2
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fc33 	bl	800bac2 <USBD_LL_IsoOUTIncomplete>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	460b      	mov	r3, r1
 800d26e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d276:	78fa      	ldrb	r2, [r7, #3]
 800d278:	4611      	mov	r1, r2
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fe fbef 	bl	800ba5e <USBD_LL_IsoINIncomplete>
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d296:	4618      	mov	r0, r3
 800d298:	f7fe fc45 	bl	800bb26 <USBD_LL_DevConnected>
}
 800d29c:	bf00      	nop
 800d29e:	3708      	adds	r7, #8
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fc42 	bl	800bb3c <USBD_LL_DevDisconnected>
}
 800d2b8:	bf00      	nop
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d13c      	bne.n	800d34a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2d0:	4a20      	ldr	r2, [pc, #128]	; (800d354 <USBD_LL_Init+0x94>)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4a1e      	ldr	r2, [pc, #120]	; (800d354 <USBD_LL_Init+0x94>)
 800d2dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2e0:	4b1c      	ldr	r3, [pc, #112]	; (800d354 <USBD_LL_Init+0x94>)
 800d2e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d2e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d2e8:	4b1a      	ldr	r3, [pc, #104]	; (800d354 <USBD_LL_Init+0x94>)
 800d2ea:	2206      	movs	r2, #6
 800d2ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2ee:	4b19      	ldr	r3, [pc, #100]	; (800d354 <USBD_LL_Init+0x94>)
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2f4:	4b17      	ldr	r3, [pc, #92]	; (800d354 <USBD_LL_Init+0x94>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2fa:	4b16      	ldr	r3, [pc, #88]	; (800d354 <USBD_LL_Init+0x94>)
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d300:	4b14      	ldr	r3, [pc, #80]	; (800d354 <USBD_LL_Init+0x94>)
 800d302:	2200      	movs	r2, #0
 800d304:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d306:	4b13      	ldr	r3, [pc, #76]	; (800d354 <USBD_LL_Init+0x94>)
 800d308:	2200      	movs	r2, #0
 800d30a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d30c:	4b11      	ldr	r3, [pc, #68]	; (800d354 <USBD_LL_Init+0x94>)
 800d30e:	2200      	movs	r2, #0
 800d310:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d312:	4b10      	ldr	r3, [pc, #64]	; (800d354 <USBD_LL_Init+0x94>)
 800d314:	2200      	movs	r2, #0
 800d316:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d318:	4b0e      	ldr	r3, [pc, #56]	; (800d354 <USBD_LL_Init+0x94>)
 800d31a:	2200      	movs	r2, #0
 800d31c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d31e:	480d      	ldr	r0, [pc, #52]	; (800d354 <USBD_LL_Init+0x94>)
 800d320:	f7f7 fb02 	bl	8004928 <HAL_PCD_Init>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d001      	beq.n	800d32e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d32a:	f7f5 f9a7 	bl	800267c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d32e:	2180      	movs	r1, #128	; 0x80
 800d330:	4808      	ldr	r0, [pc, #32]	; (800d354 <USBD_LL_Init+0x94>)
 800d332:	f7f8 fd8e 	bl	8005e52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d336:	2240      	movs	r2, #64	; 0x40
 800d338:	2100      	movs	r1, #0
 800d33a:	4806      	ldr	r0, [pc, #24]	; (800d354 <USBD_LL_Init+0x94>)
 800d33c:	f7f8 fd42 	bl	8005dc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d340:	2280      	movs	r2, #128	; 0x80
 800d342:	2101      	movs	r1, #1
 800d344:	4803      	ldr	r0, [pc, #12]	; (800d354 <USBD_LL_Init+0x94>)
 800d346:	f7f8 fd3d 	bl	8005dc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d34a:	2300      	movs	r3, #0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20001cfc 	.word	0x20001cfc

0800d358 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d360:	2300      	movs	r3, #0
 800d362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d364:	2300      	movs	r3, #0
 800d366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d36e:	4618      	mov	r0, r3
 800d370:	f7f7 fbfe 	bl	8004b70 <HAL_PCD_Start>
 800d374:	4603      	mov	r3, r0
 800d376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d378:	7bfb      	ldrb	r3, [r7, #15]
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 f990 	bl	800d6a0 <USBD_Get_USB_Status>
 800d380:	4603      	mov	r3, r0
 800d382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d384:	7bbb      	ldrb	r3, [r7, #14]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b084      	sub	sp, #16
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	4608      	mov	r0, r1
 800d398:	4611      	mov	r1, r2
 800d39a:	461a      	mov	r2, r3
 800d39c:	4603      	mov	r3, r0
 800d39e:	70fb      	strb	r3, [r7, #3]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	70bb      	strb	r3, [r7, #2]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d3b6:	78bb      	ldrb	r3, [r7, #2]
 800d3b8:	883a      	ldrh	r2, [r7, #0]
 800d3ba:	78f9      	ldrb	r1, [r7, #3]
 800d3bc:	f7f8 f8fc 	bl	80055b8 <HAL_PCD_EP_Open>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 f96a 	bl	800d6a0 <USBD_Get_USB_Status>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b084      	sub	sp, #16
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3f4:	78fa      	ldrb	r2, [r7, #3]
 800d3f6:	4611      	mov	r1, r2
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7f8 f945 	bl	8005688 <HAL_PCD_EP_Close>
 800d3fe:	4603      	mov	r3, r0
 800d400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d402:	7bfb      	ldrb	r3, [r7, #15]
 800d404:	4618      	mov	r0, r3
 800d406:	f000 f94b 	bl	800d6a0 <USBD_Get_USB_Status>
 800d40a:	4603      	mov	r3, r0
 800d40c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d432:	78fa      	ldrb	r2, [r7, #3]
 800d434:	4611      	mov	r1, r2
 800d436:	4618      	mov	r0, r3
 800d438:	f7f8 fa1d 	bl	8005876 <HAL_PCD_EP_SetStall>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 f92c 	bl	800d6a0 <USBD_Get_USB_Status>
 800d448:	4603      	mov	r3, r0
 800d44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	460b      	mov	r3, r1
 800d460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d470:	78fa      	ldrb	r2, [r7, #3]
 800d472:	4611      	mov	r1, r2
 800d474:	4618      	mov	r0, r3
 800d476:	f7f8 fa62 	bl	800593e <HAL_PCD_EP_ClrStall>
 800d47a:	4603      	mov	r3, r0
 800d47c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	4618      	mov	r0, r3
 800d482:	f000 f90d 	bl	800d6a0 <USBD_Get_USB_Status>
 800d486:	4603      	mov	r3, r0
 800d488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	da0b      	bge.n	800d4c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	4413      	add	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	440b      	add	r3, r1
 800d4c2:	333e      	adds	r3, #62	; 0x3e
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	e00b      	b.n	800d4e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4c8:	78fb      	ldrb	r3, [r7, #3]
 800d4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4ce:	68f9      	ldr	r1, [r7, #12]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	00db      	lsls	r3, r3, #3
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	440b      	add	r3, r1
 800d4da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d4de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3714      	adds	r7, #20
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d506:	78fa      	ldrb	r2, [r7, #3]
 800d508:	4611      	mov	r1, r2
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7f8 f82f 	bl	800556e <HAL_PCD_SetAddress>
 800d510:	4603      	mov	r3, r0
 800d512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d514:	7bfb      	ldrb	r3, [r7, #15]
 800d516:	4618      	mov	r0, r3
 800d518:	f000 f8c2 	bl	800d6a0 <USBD_Get_USB_Status>
 800d51c:	4603      	mov	r3, r0
 800d51e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d520:	7bbb      	ldrb	r3, [r7, #14]
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b086      	sub	sp, #24
 800d52e:	af00      	add	r7, sp, #0
 800d530:	60f8      	str	r0, [r7, #12]
 800d532:	607a      	str	r2, [r7, #4]
 800d534:	603b      	str	r3, [r7, #0]
 800d536:	460b      	mov	r3, r1
 800d538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d53e:	2300      	movs	r3, #0
 800d540:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d548:	7af9      	ldrb	r1, [r7, #11]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	f7f8 f948 	bl	80057e2 <HAL_PCD_EP_Transmit>
 800d552:	4603      	mov	r3, r0
 800d554:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d556:	7dfb      	ldrb	r3, [r7, #23]
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 f8a1 	bl	800d6a0 <USBD_Get_USB_Status>
 800d55e:	4603      	mov	r3, r0
 800d560:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d562:	7dbb      	ldrb	r3, [r7, #22]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	607a      	str	r2, [r7, #4]
 800d576:	603b      	str	r3, [r7, #0]
 800d578:	460b      	mov	r3, r1
 800d57a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d580:	2300      	movs	r3, #0
 800d582:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d58a:	7af9      	ldrb	r1, [r7, #11]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	f7f8 f8c4 	bl	800571c <HAL_PCD_EP_Receive>
 800d594:	4603      	mov	r3, r0
 800d596:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d598:	7dfb      	ldrb	r3, [r7, #23]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 f880 	bl	800d6a0 <USBD_Get_USB_Status>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3718      	adds	r7, #24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b082      	sub	sp, #8
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5c0:	78fa      	ldrb	r2, [r7, #3]
 800d5c2:	4611      	mov	r1, r2
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7f8 f8f4 	bl	80057b2 <HAL_PCD_EP_GetRxCount>
 800d5ca:	4603      	mov	r3, r0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d5e0:	78fb      	ldrb	r3, [r7, #3]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d002      	beq.n	800d5ec <HAL_PCDEx_LPM_Callback+0x18>
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d01f      	beq.n	800d62a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d5ea:	e03b      	b.n	800d664 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d007      	beq.n	800d604 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d5f4:	f7f4 faf4 	bl	8001be0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5f8:	4b1c      	ldr	r3, [pc, #112]	; (800d66c <HAL_PCDEx_LPM_Callback+0x98>)
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	4a1b      	ldr	r2, [pc, #108]	; (800d66c <HAL_PCDEx_LPM_Callback+0x98>)
 800d5fe:	f023 0306 	bic.w	r3, r3, #6
 800d602:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	6812      	ldr	r2, [r2, #0]
 800d612:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d616:	f023 0301 	bic.w	r3, r3, #1
 800d61a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d622:	4618      	mov	r0, r3
 800d624:	f7fe f9e3 	bl	800b9ee <USBD_LL_Resume>
    break;
 800d628:	e01c      	b.n	800d664 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	6812      	ldr	r2, [r2, #0]
 800d638:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d63c:	f043 0301 	orr.w	r3, r3, #1
 800d640:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe f9ba 	bl	800b9c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d005      	beq.n	800d662 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d656:	4b05      	ldr	r3, [pc, #20]	; (800d66c <HAL_PCDEx_LPM_Callback+0x98>)
 800d658:	691b      	ldr	r3, [r3, #16]
 800d65a:	4a04      	ldr	r2, [pc, #16]	; (800d66c <HAL_PCDEx_LPM_Callback+0x98>)
 800d65c:	f043 0306 	orr.w	r3, r3, #6
 800d660:	6113      	str	r3, [r2, #16]
    break;
 800d662:	bf00      	nop
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	e000ed00 	.word	0xe000ed00

0800d670 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d678:	4b03      	ldr	r3, [pc, #12]	; (800d688 <USBD_static_malloc+0x18>)
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	20002208 	.word	0x20002208

0800d68c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]

}
 800d694:	bf00      	nop
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d6ae:	79fb      	ldrb	r3, [r7, #7]
 800d6b0:	2b03      	cmp	r3, #3
 800d6b2:	d817      	bhi.n	800d6e4 <USBD_Get_USB_Status+0x44>
 800d6b4:	a201      	add	r2, pc, #4	; (adr r2, 800d6bc <USBD_Get_USB_Status+0x1c>)
 800d6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ba:	bf00      	nop
 800d6bc:	0800d6cd 	.word	0x0800d6cd
 800d6c0:	0800d6d3 	.word	0x0800d6d3
 800d6c4:	0800d6d9 	.word	0x0800d6d9
 800d6c8:	0800d6df 	.word	0x0800d6df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d0:	e00b      	b.n	800d6ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d6:	e008      	b.n	800d6ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	73fb      	strb	r3, [r7, #15]
    break;
 800d6dc:	e005      	b.n	800d6ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e2:	e002      	b.n	800d6ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e8:	bf00      	nop
  }
  return usb_status;
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3714      	adds	r7, #20
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <atof>:
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	f001 bb07 	b.w	800ed0c <strtod>
	...

0800d700 <__errno>:
 800d700:	4b01      	ldr	r3, [pc, #4]	; (800d708 <__errno+0x8>)
 800d702:	6818      	ldr	r0, [r3, #0]
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	20000134 	.word	0x20000134

0800d70c <__libc_init_array>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	4d0d      	ldr	r5, [pc, #52]	; (800d744 <__libc_init_array+0x38>)
 800d710:	4c0d      	ldr	r4, [pc, #52]	; (800d748 <__libc_init_array+0x3c>)
 800d712:	1b64      	subs	r4, r4, r5
 800d714:	10a4      	asrs	r4, r4, #2
 800d716:	2600      	movs	r6, #0
 800d718:	42a6      	cmp	r6, r4
 800d71a:	d109      	bne.n	800d730 <__libc_init_array+0x24>
 800d71c:	4d0b      	ldr	r5, [pc, #44]	; (800d74c <__libc_init_array+0x40>)
 800d71e:	4c0c      	ldr	r4, [pc, #48]	; (800d750 <__libc_init_array+0x44>)
 800d720:	f005 fd28 	bl	8013174 <_init>
 800d724:	1b64      	subs	r4, r4, r5
 800d726:	10a4      	asrs	r4, r4, #2
 800d728:	2600      	movs	r6, #0
 800d72a:	42a6      	cmp	r6, r4
 800d72c:	d105      	bne.n	800d73a <__libc_init_array+0x2e>
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	f855 3b04 	ldr.w	r3, [r5], #4
 800d734:	4798      	blx	r3
 800d736:	3601      	adds	r6, #1
 800d738:	e7ee      	b.n	800d718 <__libc_init_array+0xc>
 800d73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d73e:	4798      	blx	r3
 800d740:	3601      	adds	r6, #1
 800d742:	e7f2      	b.n	800d72a <__libc_init_array+0x1e>
 800d744:	08013998 	.word	0x08013998
 800d748:	08013998 	.word	0x08013998
 800d74c:	08013998 	.word	0x08013998
 800d750:	0801399c 	.word	0x0801399c

0800d754 <memcpy>:
 800d754:	440a      	add	r2, r1
 800d756:	4291      	cmp	r1, r2
 800d758:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d75c:	d100      	bne.n	800d760 <memcpy+0xc>
 800d75e:	4770      	bx	lr
 800d760:	b510      	push	{r4, lr}
 800d762:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d76a:	4291      	cmp	r1, r2
 800d76c:	d1f9      	bne.n	800d762 <memcpy+0xe>
 800d76e:	bd10      	pop	{r4, pc}

0800d770 <memset>:
 800d770:	4402      	add	r2, r0
 800d772:	4603      	mov	r3, r0
 800d774:	4293      	cmp	r3, r2
 800d776:	d100      	bne.n	800d77a <memset+0xa>
 800d778:	4770      	bx	lr
 800d77a:	f803 1b01 	strb.w	r1, [r3], #1
 800d77e:	e7f9      	b.n	800d774 <memset+0x4>

0800d780 <__cvt>:
 800d780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d784:	ec55 4b10 	vmov	r4, r5, d0
 800d788:	2d00      	cmp	r5, #0
 800d78a:	460e      	mov	r6, r1
 800d78c:	4619      	mov	r1, r3
 800d78e:	462b      	mov	r3, r5
 800d790:	bfbb      	ittet	lt
 800d792:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d796:	461d      	movlt	r5, r3
 800d798:	2300      	movge	r3, #0
 800d79a:	232d      	movlt	r3, #45	; 0x2d
 800d79c:	700b      	strb	r3, [r1, #0]
 800d79e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d7a4:	4691      	mov	r9, r2
 800d7a6:	f023 0820 	bic.w	r8, r3, #32
 800d7aa:	bfbc      	itt	lt
 800d7ac:	4622      	movlt	r2, r4
 800d7ae:	4614      	movlt	r4, r2
 800d7b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7b4:	d005      	beq.n	800d7c2 <__cvt+0x42>
 800d7b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d7ba:	d100      	bne.n	800d7be <__cvt+0x3e>
 800d7bc:	3601      	adds	r6, #1
 800d7be:	2102      	movs	r1, #2
 800d7c0:	e000      	b.n	800d7c4 <__cvt+0x44>
 800d7c2:	2103      	movs	r1, #3
 800d7c4:	ab03      	add	r3, sp, #12
 800d7c6:	9301      	str	r3, [sp, #4]
 800d7c8:	ab02      	add	r3, sp, #8
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	ec45 4b10 	vmov	d0, r4, r5
 800d7d0:	4653      	mov	r3, sl
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	f001 fb34 	bl	800ee40 <_dtoa_r>
 800d7d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d7dc:	4607      	mov	r7, r0
 800d7de:	d102      	bne.n	800d7e6 <__cvt+0x66>
 800d7e0:	f019 0f01 	tst.w	r9, #1
 800d7e4:	d022      	beq.n	800d82c <__cvt+0xac>
 800d7e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7ea:	eb07 0906 	add.w	r9, r7, r6
 800d7ee:	d110      	bne.n	800d812 <__cvt+0x92>
 800d7f0:	783b      	ldrb	r3, [r7, #0]
 800d7f2:	2b30      	cmp	r3, #48	; 0x30
 800d7f4:	d10a      	bne.n	800d80c <__cvt+0x8c>
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	f7f3 f993 	bl	8000b28 <__aeabi_dcmpeq>
 800d802:	b918      	cbnz	r0, 800d80c <__cvt+0x8c>
 800d804:	f1c6 0601 	rsb	r6, r6, #1
 800d808:	f8ca 6000 	str.w	r6, [sl]
 800d80c:	f8da 3000 	ldr.w	r3, [sl]
 800d810:	4499      	add	r9, r3
 800d812:	2200      	movs	r2, #0
 800d814:	2300      	movs	r3, #0
 800d816:	4620      	mov	r0, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	f7f3 f985 	bl	8000b28 <__aeabi_dcmpeq>
 800d81e:	b108      	cbz	r0, 800d824 <__cvt+0xa4>
 800d820:	f8cd 900c 	str.w	r9, [sp, #12]
 800d824:	2230      	movs	r2, #48	; 0x30
 800d826:	9b03      	ldr	r3, [sp, #12]
 800d828:	454b      	cmp	r3, r9
 800d82a:	d307      	bcc.n	800d83c <__cvt+0xbc>
 800d82c:	9b03      	ldr	r3, [sp, #12]
 800d82e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d830:	1bdb      	subs	r3, r3, r7
 800d832:	4638      	mov	r0, r7
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	b004      	add	sp, #16
 800d838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d83c:	1c59      	adds	r1, r3, #1
 800d83e:	9103      	str	r1, [sp, #12]
 800d840:	701a      	strb	r2, [r3, #0]
 800d842:	e7f0      	b.n	800d826 <__cvt+0xa6>

0800d844 <__exponent>:
 800d844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d846:	4603      	mov	r3, r0
 800d848:	2900      	cmp	r1, #0
 800d84a:	bfb8      	it	lt
 800d84c:	4249      	neglt	r1, r1
 800d84e:	f803 2b02 	strb.w	r2, [r3], #2
 800d852:	bfb4      	ite	lt
 800d854:	222d      	movlt	r2, #45	; 0x2d
 800d856:	222b      	movge	r2, #43	; 0x2b
 800d858:	2909      	cmp	r1, #9
 800d85a:	7042      	strb	r2, [r0, #1]
 800d85c:	dd2a      	ble.n	800d8b4 <__exponent+0x70>
 800d85e:	f10d 0407 	add.w	r4, sp, #7
 800d862:	46a4      	mov	ip, r4
 800d864:	270a      	movs	r7, #10
 800d866:	46a6      	mov	lr, r4
 800d868:	460a      	mov	r2, r1
 800d86a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d86e:	fb07 1516 	mls	r5, r7, r6, r1
 800d872:	3530      	adds	r5, #48	; 0x30
 800d874:	2a63      	cmp	r2, #99	; 0x63
 800d876:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d87a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d87e:	4631      	mov	r1, r6
 800d880:	dcf1      	bgt.n	800d866 <__exponent+0x22>
 800d882:	3130      	adds	r1, #48	; 0x30
 800d884:	f1ae 0502 	sub.w	r5, lr, #2
 800d888:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d88c:	1c44      	adds	r4, r0, #1
 800d88e:	4629      	mov	r1, r5
 800d890:	4561      	cmp	r1, ip
 800d892:	d30a      	bcc.n	800d8aa <__exponent+0x66>
 800d894:	f10d 0209 	add.w	r2, sp, #9
 800d898:	eba2 020e 	sub.w	r2, r2, lr
 800d89c:	4565      	cmp	r5, ip
 800d89e:	bf88      	it	hi
 800d8a0:	2200      	movhi	r2, #0
 800d8a2:	4413      	add	r3, r2
 800d8a4:	1a18      	subs	r0, r3, r0
 800d8a6:	b003      	add	sp, #12
 800d8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d8b2:	e7ed      	b.n	800d890 <__exponent+0x4c>
 800d8b4:	2330      	movs	r3, #48	; 0x30
 800d8b6:	3130      	adds	r1, #48	; 0x30
 800d8b8:	7083      	strb	r3, [r0, #2]
 800d8ba:	70c1      	strb	r1, [r0, #3]
 800d8bc:	1d03      	adds	r3, r0, #4
 800d8be:	e7f1      	b.n	800d8a4 <__exponent+0x60>

0800d8c0 <_printf_float>:
 800d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	ed2d 8b02 	vpush	{d8}
 800d8c8:	b08d      	sub	sp, #52	; 0x34
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d8d0:	4616      	mov	r6, r2
 800d8d2:	461f      	mov	r7, r3
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	f002 fc11 	bl	80100fc <_localeconv_r>
 800d8da:	f8d0 a000 	ldr.w	sl, [r0]
 800d8de:	4650      	mov	r0, sl
 800d8e0:	f7f2 fca0 	bl	8000224 <strlen>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	9305      	str	r3, [sp, #20]
 800d8ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d8f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d8f4:	3307      	adds	r3, #7
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	f103 0208 	add.w	r2, r3, #8
 800d8fe:	f8c8 2000 	str.w	r2, [r8]
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d90a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d90e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d912:	9307      	str	r3, [sp, #28]
 800d914:	f8cd 8018 	str.w	r8, [sp, #24]
 800d918:	ee08 0a10 	vmov	s16, r0
 800d91c:	4b9f      	ldr	r3, [pc, #636]	; (800db9c <_printf_float+0x2dc>)
 800d91e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d926:	f7f3 f931 	bl	8000b8c <__aeabi_dcmpun>
 800d92a:	bb88      	cbnz	r0, 800d990 <_printf_float+0xd0>
 800d92c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d930:	4b9a      	ldr	r3, [pc, #616]	; (800db9c <_printf_float+0x2dc>)
 800d932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d936:	f7f3 f90b 	bl	8000b50 <__aeabi_dcmple>
 800d93a:	bb48      	cbnz	r0, 800d990 <_printf_float+0xd0>
 800d93c:	2200      	movs	r2, #0
 800d93e:	2300      	movs	r3, #0
 800d940:	4640      	mov	r0, r8
 800d942:	4649      	mov	r1, r9
 800d944:	f7f3 f8fa 	bl	8000b3c <__aeabi_dcmplt>
 800d948:	b110      	cbz	r0, 800d950 <_printf_float+0x90>
 800d94a:	232d      	movs	r3, #45	; 0x2d
 800d94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d950:	4b93      	ldr	r3, [pc, #588]	; (800dba0 <_printf_float+0x2e0>)
 800d952:	4894      	ldr	r0, [pc, #592]	; (800dba4 <_printf_float+0x2e4>)
 800d954:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d958:	bf94      	ite	ls
 800d95a:	4698      	movls	r8, r3
 800d95c:	4680      	movhi	r8, r0
 800d95e:	2303      	movs	r3, #3
 800d960:	6123      	str	r3, [r4, #16]
 800d962:	9b05      	ldr	r3, [sp, #20]
 800d964:	f023 0204 	bic.w	r2, r3, #4
 800d968:	6022      	str	r2, [r4, #0]
 800d96a:	f04f 0900 	mov.w	r9, #0
 800d96e:	9700      	str	r7, [sp, #0]
 800d970:	4633      	mov	r3, r6
 800d972:	aa0b      	add	r2, sp, #44	; 0x2c
 800d974:	4621      	mov	r1, r4
 800d976:	4628      	mov	r0, r5
 800d978:	f000 f9d8 	bl	800dd2c <_printf_common>
 800d97c:	3001      	adds	r0, #1
 800d97e:	f040 8090 	bne.w	800daa2 <_printf_float+0x1e2>
 800d982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d986:	b00d      	add	sp, #52	; 0x34
 800d988:	ecbd 8b02 	vpop	{d8}
 800d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d990:	4642      	mov	r2, r8
 800d992:	464b      	mov	r3, r9
 800d994:	4640      	mov	r0, r8
 800d996:	4649      	mov	r1, r9
 800d998:	f7f3 f8f8 	bl	8000b8c <__aeabi_dcmpun>
 800d99c:	b140      	cbz	r0, 800d9b0 <_printf_float+0xf0>
 800d99e:	464b      	mov	r3, r9
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	bfbc      	itt	lt
 800d9a4:	232d      	movlt	r3, #45	; 0x2d
 800d9a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d9aa:	487f      	ldr	r0, [pc, #508]	; (800dba8 <_printf_float+0x2e8>)
 800d9ac:	4b7f      	ldr	r3, [pc, #508]	; (800dbac <_printf_float+0x2ec>)
 800d9ae:	e7d1      	b.n	800d954 <_printf_float+0x94>
 800d9b0:	6863      	ldr	r3, [r4, #4]
 800d9b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d9b6:	9206      	str	r2, [sp, #24]
 800d9b8:	1c5a      	adds	r2, r3, #1
 800d9ba:	d13f      	bne.n	800da3c <_printf_float+0x17c>
 800d9bc:	2306      	movs	r3, #6
 800d9be:	6063      	str	r3, [r4, #4]
 800d9c0:	9b05      	ldr	r3, [sp, #20]
 800d9c2:	6861      	ldr	r1, [r4, #4]
 800d9c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9303      	str	r3, [sp, #12]
 800d9cc:	ab0a      	add	r3, sp, #40	; 0x28
 800d9ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d9d2:	ab09      	add	r3, sp, #36	; 0x24
 800d9d4:	ec49 8b10 	vmov	d0, r8, r9
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	6022      	str	r2, [r4, #0]
 800d9dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	f7ff fecd 	bl	800d780 <__cvt>
 800d9e6:	9b06      	ldr	r3, [sp, #24]
 800d9e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9ea:	2b47      	cmp	r3, #71	; 0x47
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	d108      	bne.n	800da02 <_printf_float+0x142>
 800d9f0:	1cc8      	adds	r0, r1, #3
 800d9f2:	db02      	blt.n	800d9fa <_printf_float+0x13a>
 800d9f4:	6863      	ldr	r3, [r4, #4]
 800d9f6:	4299      	cmp	r1, r3
 800d9f8:	dd41      	ble.n	800da7e <_printf_float+0x1be>
 800d9fa:	f1ab 0b02 	sub.w	fp, fp, #2
 800d9fe:	fa5f fb8b 	uxtb.w	fp, fp
 800da02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da06:	d820      	bhi.n	800da4a <_printf_float+0x18a>
 800da08:	3901      	subs	r1, #1
 800da0a:	465a      	mov	r2, fp
 800da0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da10:	9109      	str	r1, [sp, #36]	; 0x24
 800da12:	f7ff ff17 	bl	800d844 <__exponent>
 800da16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da18:	1813      	adds	r3, r2, r0
 800da1a:	2a01      	cmp	r2, #1
 800da1c:	4681      	mov	r9, r0
 800da1e:	6123      	str	r3, [r4, #16]
 800da20:	dc02      	bgt.n	800da28 <_printf_float+0x168>
 800da22:	6822      	ldr	r2, [r4, #0]
 800da24:	07d2      	lsls	r2, r2, #31
 800da26:	d501      	bpl.n	800da2c <_printf_float+0x16c>
 800da28:	3301      	adds	r3, #1
 800da2a:	6123      	str	r3, [r4, #16]
 800da2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800da30:	2b00      	cmp	r3, #0
 800da32:	d09c      	beq.n	800d96e <_printf_float+0xae>
 800da34:	232d      	movs	r3, #45	; 0x2d
 800da36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da3a:	e798      	b.n	800d96e <_printf_float+0xae>
 800da3c:	9a06      	ldr	r2, [sp, #24]
 800da3e:	2a47      	cmp	r2, #71	; 0x47
 800da40:	d1be      	bne.n	800d9c0 <_printf_float+0x100>
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1bc      	bne.n	800d9c0 <_printf_float+0x100>
 800da46:	2301      	movs	r3, #1
 800da48:	e7b9      	b.n	800d9be <_printf_float+0xfe>
 800da4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800da4e:	d118      	bne.n	800da82 <_printf_float+0x1c2>
 800da50:	2900      	cmp	r1, #0
 800da52:	6863      	ldr	r3, [r4, #4]
 800da54:	dd0b      	ble.n	800da6e <_printf_float+0x1ae>
 800da56:	6121      	str	r1, [r4, #16]
 800da58:	b913      	cbnz	r3, 800da60 <_printf_float+0x1a0>
 800da5a:	6822      	ldr	r2, [r4, #0]
 800da5c:	07d0      	lsls	r0, r2, #31
 800da5e:	d502      	bpl.n	800da66 <_printf_float+0x1a6>
 800da60:	3301      	adds	r3, #1
 800da62:	440b      	add	r3, r1
 800da64:	6123      	str	r3, [r4, #16]
 800da66:	65a1      	str	r1, [r4, #88]	; 0x58
 800da68:	f04f 0900 	mov.w	r9, #0
 800da6c:	e7de      	b.n	800da2c <_printf_float+0x16c>
 800da6e:	b913      	cbnz	r3, 800da76 <_printf_float+0x1b6>
 800da70:	6822      	ldr	r2, [r4, #0]
 800da72:	07d2      	lsls	r2, r2, #31
 800da74:	d501      	bpl.n	800da7a <_printf_float+0x1ba>
 800da76:	3302      	adds	r3, #2
 800da78:	e7f4      	b.n	800da64 <_printf_float+0x1a4>
 800da7a:	2301      	movs	r3, #1
 800da7c:	e7f2      	b.n	800da64 <_printf_float+0x1a4>
 800da7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800da82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da84:	4299      	cmp	r1, r3
 800da86:	db05      	blt.n	800da94 <_printf_float+0x1d4>
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	6121      	str	r1, [r4, #16]
 800da8c:	07d8      	lsls	r0, r3, #31
 800da8e:	d5ea      	bpl.n	800da66 <_printf_float+0x1a6>
 800da90:	1c4b      	adds	r3, r1, #1
 800da92:	e7e7      	b.n	800da64 <_printf_float+0x1a4>
 800da94:	2900      	cmp	r1, #0
 800da96:	bfd4      	ite	le
 800da98:	f1c1 0202 	rsble	r2, r1, #2
 800da9c:	2201      	movgt	r2, #1
 800da9e:	4413      	add	r3, r2
 800daa0:	e7e0      	b.n	800da64 <_printf_float+0x1a4>
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	055a      	lsls	r2, r3, #21
 800daa6:	d407      	bmi.n	800dab8 <_printf_float+0x1f8>
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	4642      	mov	r2, r8
 800daac:	4631      	mov	r1, r6
 800daae:	4628      	mov	r0, r5
 800dab0:	47b8      	blx	r7
 800dab2:	3001      	adds	r0, #1
 800dab4:	d12c      	bne.n	800db10 <_printf_float+0x250>
 800dab6:	e764      	b.n	800d982 <_printf_float+0xc2>
 800dab8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dabc:	f240 80e0 	bls.w	800dc80 <_printf_float+0x3c0>
 800dac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dac4:	2200      	movs	r2, #0
 800dac6:	2300      	movs	r3, #0
 800dac8:	f7f3 f82e 	bl	8000b28 <__aeabi_dcmpeq>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d034      	beq.n	800db3a <_printf_float+0x27a>
 800dad0:	4a37      	ldr	r2, [pc, #220]	; (800dbb0 <_printf_float+0x2f0>)
 800dad2:	2301      	movs	r3, #1
 800dad4:	4631      	mov	r1, r6
 800dad6:	4628      	mov	r0, r5
 800dad8:	47b8      	blx	r7
 800dada:	3001      	adds	r0, #1
 800dadc:	f43f af51 	beq.w	800d982 <_printf_float+0xc2>
 800dae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dae4:	429a      	cmp	r2, r3
 800dae6:	db02      	blt.n	800daee <_printf_float+0x22e>
 800dae8:	6823      	ldr	r3, [r4, #0]
 800daea:	07d8      	lsls	r0, r3, #31
 800daec:	d510      	bpl.n	800db10 <_printf_float+0x250>
 800daee:	ee18 3a10 	vmov	r3, s16
 800daf2:	4652      	mov	r2, sl
 800daf4:	4631      	mov	r1, r6
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b8      	blx	r7
 800dafa:	3001      	adds	r0, #1
 800dafc:	f43f af41 	beq.w	800d982 <_printf_float+0xc2>
 800db00:	f04f 0800 	mov.w	r8, #0
 800db04:	f104 091a 	add.w	r9, r4, #26
 800db08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db0a:	3b01      	subs	r3, #1
 800db0c:	4543      	cmp	r3, r8
 800db0e:	dc09      	bgt.n	800db24 <_printf_float+0x264>
 800db10:	6823      	ldr	r3, [r4, #0]
 800db12:	079b      	lsls	r3, r3, #30
 800db14:	f100 8105 	bmi.w	800dd22 <_printf_float+0x462>
 800db18:	68e0      	ldr	r0, [r4, #12]
 800db1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db1c:	4298      	cmp	r0, r3
 800db1e:	bfb8      	it	lt
 800db20:	4618      	movlt	r0, r3
 800db22:	e730      	b.n	800d986 <_printf_float+0xc6>
 800db24:	2301      	movs	r3, #1
 800db26:	464a      	mov	r2, r9
 800db28:	4631      	mov	r1, r6
 800db2a:	4628      	mov	r0, r5
 800db2c:	47b8      	blx	r7
 800db2e:	3001      	adds	r0, #1
 800db30:	f43f af27 	beq.w	800d982 <_printf_float+0xc2>
 800db34:	f108 0801 	add.w	r8, r8, #1
 800db38:	e7e6      	b.n	800db08 <_printf_float+0x248>
 800db3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	dc39      	bgt.n	800dbb4 <_printf_float+0x2f4>
 800db40:	4a1b      	ldr	r2, [pc, #108]	; (800dbb0 <_printf_float+0x2f0>)
 800db42:	2301      	movs	r3, #1
 800db44:	4631      	mov	r1, r6
 800db46:	4628      	mov	r0, r5
 800db48:	47b8      	blx	r7
 800db4a:	3001      	adds	r0, #1
 800db4c:	f43f af19 	beq.w	800d982 <_printf_float+0xc2>
 800db50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db54:	4313      	orrs	r3, r2
 800db56:	d102      	bne.n	800db5e <_printf_float+0x29e>
 800db58:	6823      	ldr	r3, [r4, #0]
 800db5a:	07d9      	lsls	r1, r3, #31
 800db5c:	d5d8      	bpl.n	800db10 <_printf_float+0x250>
 800db5e:	ee18 3a10 	vmov	r3, s16
 800db62:	4652      	mov	r2, sl
 800db64:	4631      	mov	r1, r6
 800db66:	4628      	mov	r0, r5
 800db68:	47b8      	blx	r7
 800db6a:	3001      	adds	r0, #1
 800db6c:	f43f af09 	beq.w	800d982 <_printf_float+0xc2>
 800db70:	f04f 0900 	mov.w	r9, #0
 800db74:	f104 0a1a 	add.w	sl, r4, #26
 800db78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db7a:	425b      	negs	r3, r3
 800db7c:	454b      	cmp	r3, r9
 800db7e:	dc01      	bgt.n	800db84 <_printf_float+0x2c4>
 800db80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db82:	e792      	b.n	800daaa <_printf_float+0x1ea>
 800db84:	2301      	movs	r3, #1
 800db86:	4652      	mov	r2, sl
 800db88:	4631      	mov	r1, r6
 800db8a:	4628      	mov	r0, r5
 800db8c:	47b8      	blx	r7
 800db8e:	3001      	adds	r0, #1
 800db90:	f43f aef7 	beq.w	800d982 <_printf_float+0xc2>
 800db94:	f109 0901 	add.w	r9, r9, #1
 800db98:	e7ee      	b.n	800db78 <_printf_float+0x2b8>
 800db9a:	bf00      	nop
 800db9c:	7fefffff 	.word	0x7fefffff
 800dba0:	080132ac 	.word	0x080132ac
 800dba4:	080132b0 	.word	0x080132b0
 800dba8:	080132b8 	.word	0x080132b8
 800dbac:	080132b4 	.word	0x080132b4
 800dbb0:	080132bc 	.word	0x080132bc
 800dbb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	bfa8      	it	ge
 800dbbc:	461a      	movge	r2, r3
 800dbbe:	2a00      	cmp	r2, #0
 800dbc0:	4691      	mov	r9, r2
 800dbc2:	dc37      	bgt.n	800dc34 <_printf_float+0x374>
 800dbc4:	f04f 0b00 	mov.w	fp, #0
 800dbc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbcc:	f104 021a 	add.w	r2, r4, #26
 800dbd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbd2:	9305      	str	r3, [sp, #20]
 800dbd4:	eba3 0309 	sub.w	r3, r3, r9
 800dbd8:	455b      	cmp	r3, fp
 800dbda:	dc33      	bgt.n	800dc44 <_printf_float+0x384>
 800dbdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	db3b      	blt.n	800dc5c <_printf_float+0x39c>
 800dbe4:	6823      	ldr	r3, [r4, #0]
 800dbe6:	07da      	lsls	r2, r3, #31
 800dbe8:	d438      	bmi.n	800dc5c <_printf_float+0x39c>
 800dbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbec:	9a05      	ldr	r2, [sp, #20]
 800dbee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbf0:	1a9a      	subs	r2, r3, r2
 800dbf2:	eba3 0901 	sub.w	r9, r3, r1
 800dbf6:	4591      	cmp	r9, r2
 800dbf8:	bfa8      	it	ge
 800dbfa:	4691      	movge	r9, r2
 800dbfc:	f1b9 0f00 	cmp.w	r9, #0
 800dc00:	dc35      	bgt.n	800dc6e <_printf_float+0x3ae>
 800dc02:	f04f 0800 	mov.w	r8, #0
 800dc06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc0a:	f104 0a1a 	add.w	sl, r4, #26
 800dc0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc12:	1a9b      	subs	r3, r3, r2
 800dc14:	eba3 0309 	sub.w	r3, r3, r9
 800dc18:	4543      	cmp	r3, r8
 800dc1a:	f77f af79 	ble.w	800db10 <_printf_float+0x250>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	4652      	mov	r2, sl
 800dc22:	4631      	mov	r1, r6
 800dc24:	4628      	mov	r0, r5
 800dc26:	47b8      	blx	r7
 800dc28:	3001      	adds	r0, #1
 800dc2a:	f43f aeaa 	beq.w	800d982 <_printf_float+0xc2>
 800dc2e:	f108 0801 	add.w	r8, r8, #1
 800dc32:	e7ec      	b.n	800dc0e <_printf_float+0x34e>
 800dc34:	4613      	mov	r3, r2
 800dc36:	4631      	mov	r1, r6
 800dc38:	4642      	mov	r2, r8
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	47b8      	blx	r7
 800dc3e:	3001      	adds	r0, #1
 800dc40:	d1c0      	bne.n	800dbc4 <_printf_float+0x304>
 800dc42:	e69e      	b.n	800d982 <_printf_float+0xc2>
 800dc44:	2301      	movs	r3, #1
 800dc46:	4631      	mov	r1, r6
 800dc48:	4628      	mov	r0, r5
 800dc4a:	9205      	str	r2, [sp, #20]
 800dc4c:	47b8      	blx	r7
 800dc4e:	3001      	adds	r0, #1
 800dc50:	f43f ae97 	beq.w	800d982 <_printf_float+0xc2>
 800dc54:	9a05      	ldr	r2, [sp, #20]
 800dc56:	f10b 0b01 	add.w	fp, fp, #1
 800dc5a:	e7b9      	b.n	800dbd0 <_printf_float+0x310>
 800dc5c:	ee18 3a10 	vmov	r3, s16
 800dc60:	4652      	mov	r2, sl
 800dc62:	4631      	mov	r1, r6
 800dc64:	4628      	mov	r0, r5
 800dc66:	47b8      	blx	r7
 800dc68:	3001      	adds	r0, #1
 800dc6a:	d1be      	bne.n	800dbea <_printf_float+0x32a>
 800dc6c:	e689      	b.n	800d982 <_printf_float+0xc2>
 800dc6e:	9a05      	ldr	r2, [sp, #20]
 800dc70:	464b      	mov	r3, r9
 800dc72:	4442      	add	r2, r8
 800dc74:	4631      	mov	r1, r6
 800dc76:	4628      	mov	r0, r5
 800dc78:	47b8      	blx	r7
 800dc7a:	3001      	adds	r0, #1
 800dc7c:	d1c1      	bne.n	800dc02 <_printf_float+0x342>
 800dc7e:	e680      	b.n	800d982 <_printf_float+0xc2>
 800dc80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc82:	2a01      	cmp	r2, #1
 800dc84:	dc01      	bgt.n	800dc8a <_printf_float+0x3ca>
 800dc86:	07db      	lsls	r3, r3, #31
 800dc88:	d538      	bpl.n	800dcfc <_printf_float+0x43c>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	4642      	mov	r2, r8
 800dc8e:	4631      	mov	r1, r6
 800dc90:	4628      	mov	r0, r5
 800dc92:	47b8      	blx	r7
 800dc94:	3001      	adds	r0, #1
 800dc96:	f43f ae74 	beq.w	800d982 <_printf_float+0xc2>
 800dc9a:	ee18 3a10 	vmov	r3, s16
 800dc9e:	4652      	mov	r2, sl
 800dca0:	4631      	mov	r1, r6
 800dca2:	4628      	mov	r0, r5
 800dca4:	47b8      	blx	r7
 800dca6:	3001      	adds	r0, #1
 800dca8:	f43f ae6b 	beq.w	800d982 <_printf_float+0xc2>
 800dcac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	f7f2 ff38 	bl	8000b28 <__aeabi_dcmpeq>
 800dcb8:	b9d8      	cbnz	r0, 800dcf2 <_printf_float+0x432>
 800dcba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcbc:	f108 0201 	add.w	r2, r8, #1
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	4631      	mov	r1, r6
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	47b8      	blx	r7
 800dcc8:	3001      	adds	r0, #1
 800dcca:	d10e      	bne.n	800dcea <_printf_float+0x42a>
 800dccc:	e659      	b.n	800d982 <_printf_float+0xc2>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	4652      	mov	r2, sl
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	47b8      	blx	r7
 800dcd8:	3001      	adds	r0, #1
 800dcda:	f43f ae52 	beq.w	800d982 <_printf_float+0xc2>
 800dcde:	f108 0801 	add.w	r8, r8, #1
 800dce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dce4:	3b01      	subs	r3, #1
 800dce6:	4543      	cmp	r3, r8
 800dce8:	dcf1      	bgt.n	800dcce <_printf_float+0x40e>
 800dcea:	464b      	mov	r3, r9
 800dcec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dcf0:	e6dc      	b.n	800daac <_printf_float+0x1ec>
 800dcf2:	f04f 0800 	mov.w	r8, #0
 800dcf6:	f104 0a1a 	add.w	sl, r4, #26
 800dcfa:	e7f2      	b.n	800dce2 <_printf_float+0x422>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	4642      	mov	r2, r8
 800dd00:	e7df      	b.n	800dcc2 <_printf_float+0x402>
 800dd02:	2301      	movs	r3, #1
 800dd04:	464a      	mov	r2, r9
 800dd06:	4631      	mov	r1, r6
 800dd08:	4628      	mov	r0, r5
 800dd0a:	47b8      	blx	r7
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	f43f ae38 	beq.w	800d982 <_printf_float+0xc2>
 800dd12:	f108 0801 	add.w	r8, r8, #1
 800dd16:	68e3      	ldr	r3, [r4, #12]
 800dd18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd1a:	1a5b      	subs	r3, r3, r1
 800dd1c:	4543      	cmp	r3, r8
 800dd1e:	dcf0      	bgt.n	800dd02 <_printf_float+0x442>
 800dd20:	e6fa      	b.n	800db18 <_printf_float+0x258>
 800dd22:	f04f 0800 	mov.w	r8, #0
 800dd26:	f104 0919 	add.w	r9, r4, #25
 800dd2a:	e7f4      	b.n	800dd16 <_printf_float+0x456>

0800dd2c <_printf_common>:
 800dd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd30:	4616      	mov	r6, r2
 800dd32:	4699      	mov	r9, r3
 800dd34:	688a      	ldr	r2, [r1, #8]
 800dd36:	690b      	ldr	r3, [r1, #16]
 800dd38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	bfb8      	it	lt
 800dd40:	4613      	movlt	r3, r2
 800dd42:	6033      	str	r3, [r6, #0]
 800dd44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd48:	4607      	mov	r7, r0
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	b10a      	cbz	r2, 800dd52 <_printf_common+0x26>
 800dd4e:	3301      	adds	r3, #1
 800dd50:	6033      	str	r3, [r6, #0]
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	0699      	lsls	r1, r3, #26
 800dd56:	bf42      	ittt	mi
 800dd58:	6833      	ldrmi	r3, [r6, #0]
 800dd5a:	3302      	addmi	r3, #2
 800dd5c:	6033      	strmi	r3, [r6, #0]
 800dd5e:	6825      	ldr	r5, [r4, #0]
 800dd60:	f015 0506 	ands.w	r5, r5, #6
 800dd64:	d106      	bne.n	800dd74 <_printf_common+0x48>
 800dd66:	f104 0a19 	add.w	sl, r4, #25
 800dd6a:	68e3      	ldr	r3, [r4, #12]
 800dd6c:	6832      	ldr	r2, [r6, #0]
 800dd6e:	1a9b      	subs	r3, r3, r2
 800dd70:	42ab      	cmp	r3, r5
 800dd72:	dc26      	bgt.n	800ddc2 <_printf_common+0x96>
 800dd74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd78:	1e13      	subs	r3, r2, #0
 800dd7a:	6822      	ldr	r2, [r4, #0]
 800dd7c:	bf18      	it	ne
 800dd7e:	2301      	movne	r3, #1
 800dd80:	0692      	lsls	r2, r2, #26
 800dd82:	d42b      	bmi.n	800dddc <_printf_common+0xb0>
 800dd84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd88:	4649      	mov	r1, r9
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	47c0      	blx	r8
 800dd8e:	3001      	adds	r0, #1
 800dd90:	d01e      	beq.n	800ddd0 <_printf_common+0xa4>
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	68e5      	ldr	r5, [r4, #12]
 800dd96:	6832      	ldr	r2, [r6, #0]
 800dd98:	f003 0306 	and.w	r3, r3, #6
 800dd9c:	2b04      	cmp	r3, #4
 800dd9e:	bf08      	it	eq
 800dda0:	1aad      	subeq	r5, r5, r2
 800dda2:	68a3      	ldr	r3, [r4, #8]
 800dda4:	6922      	ldr	r2, [r4, #16]
 800dda6:	bf0c      	ite	eq
 800dda8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddac:	2500      	movne	r5, #0
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	bfc4      	itt	gt
 800ddb2:	1a9b      	subgt	r3, r3, r2
 800ddb4:	18ed      	addgt	r5, r5, r3
 800ddb6:	2600      	movs	r6, #0
 800ddb8:	341a      	adds	r4, #26
 800ddba:	42b5      	cmp	r5, r6
 800ddbc:	d11a      	bne.n	800ddf4 <_printf_common+0xc8>
 800ddbe:	2000      	movs	r0, #0
 800ddc0:	e008      	b.n	800ddd4 <_printf_common+0xa8>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	4652      	mov	r2, sl
 800ddc6:	4649      	mov	r1, r9
 800ddc8:	4638      	mov	r0, r7
 800ddca:	47c0      	blx	r8
 800ddcc:	3001      	adds	r0, #1
 800ddce:	d103      	bne.n	800ddd8 <_printf_common+0xac>
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd8:	3501      	adds	r5, #1
 800ddda:	e7c6      	b.n	800dd6a <_printf_common+0x3e>
 800dddc:	18e1      	adds	r1, r4, r3
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	2030      	movs	r0, #48	; 0x30
 800dde2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dde6:	4422      	add	r2, r4
 800dde8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	e7c7      	b.n	800dd84 <_printf_common+0x58>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	4649      	mov	r1, r9
 800ddfa:	4638      	mov	r0, r7
 800ddfc:	47c0      	blx	r8
 800ddfe:	3001      	adds	r0, #1
 800de00:	d0e6      	beq.n	800ddd0 <_printf_common+0xa4>
 800de02:	3601      	adds	r6, #1
 800de04:	e7d9      	b.n	800ddba <_printf_common+0x8e>
	...

0800de08 <_printf_i>:
 800de08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de0c:	7e0f      	ldrb	r7, [r1, #24]
 800de0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de10:	2f78      	cmp	r7, #120	; 0x78
 800de12:	4691      	mov	r9, r2
 800de14:	4680      	mov	r8, r0
 800de16:	460c      	mov	r4, r1
 800de18:	469a      	mov	sl, r3
 800de1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800de1e:	d807      	bhi.n	800de30 <_printf_i+0x28>
 800de20:	2f62      	cmp	r7, #98	; 0x62
 800de22:	d80a      	bhi.n	800de3a <_printf_i+0x32>
 800de24:	2f00      	cmp	r7, #0
 800de26:	f000 80d8 	beq.w	800dfda <_printf_i+0x1d2>
 800de2a:	2f58      	cmp	r7, #88	; 0x58
 800de2c:	f000 80a3 	beq.w	800df76 <_printf_i+0x16e>
 800de30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de38:	e03a      	b.n	800deb0 <_printf_i+0xa8>
 800de3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de3e:	2b15      	cmp	r3, #21
 800de40:	d8f6      	bhi.n	800de30 <_printf_i+0x28>
 800de42:	a101      	add	r1, pc, #4	; (adr r1, 800de48 <_printf_i+0x40>)
 800de44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de48:	0800dea1 	.word	0x0800dea1
 800de4c:	0800deb5 	.word	0x0800deb5
 800de50:	0800de31 	.word	0x0800de31
 800de54:	0800de31 	.word	0x0800de31
 800de58:	0800de31 	.word	0x0800de31
 800de5c:	0800de31 	.word	0x0800de31
 800de60:	0800deb5 	.word	0x0800deb5
 800de64:	0800de31 	.word	0x0800de31
 800de68:	0800de31 	.word	0x0800de31
 800de6c:	0800de31 	.word	0x0800de31
 800de70:	0800de31 	.word	0x0800de31
 800de74:	0800dfc1 	.word	0x0800dfc1
 800de78:	0800dee5 	.word	0x0800dee5
 800de7c:	0800dfa3 	.word	0x0800dfa3
 800de80:	0800de31 	.word	0x0800de31
 800de84:	0800de31 	.word	0x0800de31
 800de88:	0800dfe3 	.word	0x0800dfe3
 800de8c:	0800de31 	.word	0x0800de31
 800de90:	0800dee5 	.word	0x0800dee5
 800de94:	0800de31 	.word	0x0800de31
 800de98:	0800de31 	.word	0x0800de31
 800de9c:	0800dfab 	.word	0x0800dfab
 800dea0:	682b      	ldr	r3, [r5, #0]
 800dea2:	1d1a      	adds	r2, r3, #4
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	602a      	str	r2, [r5, #0]
 800dea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800deac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800deb0:	2301      	movs	r3, #1
 800deb2:	e0a3      	b.n	800dffc <_printf_i+0x1f4>
 800deb4:	6820      	ldr	r0, [r4, #0]
 800deb6:	6829      	ldr	r1, [r5, #0]
 800deb8:	0606      	lsls	r6, r0, #24
 800deba:	f101 0304 	add.w	r3, r1, #4
 800debe:	d50a      	bpl.n	800ded6 <_printf_i+0xce>
 800dec0:	680e      	ldr	r6, [r1, #0]
 800dec2:	602b      	str	r3, [r5, #0]
 800dec4:	2e00      	cmp	r6, #0
 800dec6:	da03      	bge.n	800ded0 <_printf_i+0xc8>
 800dec8:	232d      	movs	r3, #45	; 0x2d
 800deca:	4276      	negs	r6, r6
 800decc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ded0:	485e      	ldr	r0, [pc, #376]	; (800e04c <_printf_i+0x244>)
 800ded2:	230a      	movs	r3, #10
 800ded4:	e019      	b.n	800df0a <_printf_i+0x102>
 800ded6:	680e      	ldr	r6, [r1, #0]
 800ded8:	602b      	str	r3, [r5, #0]
 800deda:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dede:	bf18      	it	ne
 800dee0:	b236      	sxthne	r6, r6
 800dee2:	e7ef      	b.n	800dec4 <_printf_i+0xbc>
 800dee4:	682b      	ldr	r3, [r5, #0]
 800dee6:	6820      	ldr	r0, [r4, #0]
 800dee8:	1d19      	adds	r1, r3, #4
 800deea:	6029      	str	r1, [r5, #0]
 800deec:	0601      	lsls	r1, r0, #24
 800deee:	d501      	bpl.n	800def4 <_printf_i+0xec>
 800def0:	681e      	ldr	r6, [r3, #0]
 800def2:	e002      	b.n	800defa <_printf_i+0xf2>
 800def4:	0646      	lsls	r6, r0, #25
 800def6:	d5fb      	bpl.n	800def0 <_printf_i+0xe8>
 800def8:	881e      	ldrh	r6, [r3, #0]
 800defa:	4854      	ldr	r0, [pc, #336]	; (800e04c <_printf_i+0x244>)
 800defc:	2f6f      	cmp	r7, #111	; 0x6f
 800defe:	bf0c      	ite	eq
 800df00:	2308      	moveq	r3, #8
 800df02:	230a      	movne	r3, #10
 800df04:	2100      	movs	r1, #0
 800df06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df0a:	6865      	ldr	r5, [r4, #4]
 800df0c:	60a5      	str	r5, [r4, #8]
 800df0e:	2d00      	cmp	r5, #0
 800df10:	bfa2      	ittt	ge
 800df12:	6821      	ldrge	r1, [r4, #0]
 800df14:	f021 0104 	bicge.w	r1, r1, #4
 800df18:	6021      	strge	r1, [r4, #0]
 800df1a:	b90e      	cbnz	r6, 800df20 <_printf_i+0x118>
 800df1c:	2d00      	cmp	r5, #0
 800df1e:	d04d      	beq.n	800dfbc <_printf_i+0x1b4>
 800df20:	4615      	mov	r5, r2
 800df22:	fbb6 f1f3 	udiv	r1, r6, r3
 800df26:	fb03 6711 	mls	r7, r3, r1, r6
 800df2a:	5dc7      	ldrb	r7, [r0, r7]
 800df2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df30:	4637      	mov	r7, r6
 800df32:	42bb      	cmp	r3, r7
 800df34:	460e      	mov	r6, r1
 800df36:	d9f4      	bls.n	800df22 <_printf_i+0x11a>
 800df38:	2b08      	cmp	r3, #8
 800df3a:	d10b      	bne.n	800df54 <_printf_i+0x14c>
 800df3c:	6823      	ldr	r3, [r4, #0]
 800df3e:	07de      	lsls	r6, r3, #31
 800df40:	d508      	bpl.n	800df54 <_printf_i+0x14c>
 800df42:	6923      	ldr	r3, [r4, #16]
 800df44:	6861      	ldr	r1, [r4, #4]
 800df46:	4299      	cmp	r1, r3
 800df48:	bfde      	ittt	le
 800df4a:	2330      	movle	r3, #48	; 0x30
 800df4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800df54:	1b52      	subs	r2, r2, r5
 800df56:	6122      	str	r2, [r4, #16]
 800df58:	f8cd a000 	str.w	sl, [sp]
 800df5c:	464b      	mov	r3, r9
 800df5e:	aa03      	add	r2, sp, #12
 800df60:	4621      	mov	r1, r4
 800df62:	4640      	mov	r0, r8
 800df64:	f7ff fee2 	bl	800dd2c <_printf_common>
 800df68:	3001      	adds	r0, #1
 800df6a:	d14c      	bne.n	800e006 <_printf_i+0x1fe>
 800df6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df70:	b004      	add	sp, #16
 800df72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df76:	4835      	ldr	r0, [pc, #212]	; (800e04c <_printf_i+0x244>)
 800df78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800df7c:	6829      	ldr	r1, [r5, #0]
 800df7e:	6823      	ldr	r3, [r4, #0]
 800df80:	f851 6b04 	ldr.w	r6, [r1], #4
 800df84:	6029      	str	r1, [r5, #0]
 800df86:	061d      	lsls	r5, r3, #24
 800df88:	d514      	bpl.n	800dfb4 <_printf_i+0x1ac>
 800df8a:	07df      	lsls	r7, r3, #31
 800df8c:	bf44      	itt	mi
 800df8e:	f043 0320 	orrmi.w	r3, r3, #32
 800df92:	6023      	strmi	r3, [r4, #0]
 800df94:	b91e      	cbnz	r6, 800df9e <_printf_i+0x196>
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	f023 0320 	bic.w	r3, r3, #32
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	2310      	movs	r3, #16
 800dfa0:	e7b0      	b.n	800df04 <_printf_i+0xfc>
 800dfa2:	6823      	ldr	r3, [r4, #0]
 800dfa4:	f043 0320 	orr.w	r3, r3, #32
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	2378      	movs	r3, #120	; 0x78
 800dfac:	4828      	ldr	r0, [pc, #160]	; (800e050 <_printf_i+0x248>)
 800dfae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfb2:	e7e3      	b.n	800df7c <_printf_i+0x174>
 800dfb4:	0659      	lsls	r1, r3, #25
 800dfb6:	bf48      	it	mi
 800dfb8:	b2b6      	uxthmi	r6, r6
 800dfba:	e7e6      	b.n	800df8a <_printf_i+0x182>
 800dfbc:	4615      	mov	r5, r2
 800dfbe:	e7bb      	b.n	800df38 <_printf_i+0x130>
 800dfc0:	682b      	ldr	r3, [r5, #0]
 800dfc2:	6826      	ldr	r6, [r4, #0]
 800dfc4:	6961      	ldr	r1, [r4, #20]
 800dfc6:	1d18      	adds	r0, r3, #4
 800dfc8:	6028      	str	r0, [r5, #0]
 800dfca:	0635      	lsls	r5, r6, #24
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	d501      	bpl.n	800dfd4 <_printf_i+0x1cc>
 800dfd0:	6019      	str	r1, [r3, #0]
 800dfd2:	e002      	b.n	800dfda <_printf_i+0x1d2>
 800dfd4:	0670      	lsls	r0, r6, #25
 800dfd6:	d5fb      	bpl.n	800dfd0 <_printf_i+0x1c8>
 800dfd8:	8019      	strh	r1, [r3, #0]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	6123      	str	r3, [r4, #16]
 800dfde:	4615      	mov	r5, r2
 800dfe0:	e7ba      	b.n	800df58 <_printf_i+0x150>
 800dfe2:	682b      	ldr	r3, [r5, #0]
 800dfe4:	1d1a      	adds	r2, r3, #4
 800dfe6:	602a      	str	r2, [r5, #0]
 800dfe8:	681d      	ldr	r5, [r3, #0]
 800dfea:	6862      	ldr	r2, [r4, #4]
 800dfec:	2100      	movs	r1, #0
 800dfee:	4628      	mov	r0, r5
 800dff0:	f7f2 f926 	bl	8000240 <memchr>
 800dff4:	b108      	cbz	r0, 800dffa <_printf_i+0x1f2>
 800dff6:	1b40      	subs	r0, r0, r5
 800dff8:	6060      	str	r0, [r4, #4]
 800dffa:	6863      	ldr	r3, [r4, #4]
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	2300      	movs	r3, #0
 800e000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e004:	e7a8      	b.n	800df58 <_printf_i+0x150>
 800e006:	6923      	ldr	r3, [r4, #16]
 800e008:	462a      	mov	r2, r5
 800e00a:	4649      	mov	r1, r9
 800e00c:	4640      	mov	r0, r8
 800e00e:	47d0      	blx	sl
 800e010:	3001      	adds	r0, #1
 800e012:	d0ab      	beq.n	800df6c <_printf_i+0x164>
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	079b      	lsls	r3, r3, #30
 800e018:	d413      	bmi.n	800e042 <_printf_i+0x23a>
 800e01a:	68e0      	ldr	r0, [r4, #12]
 800e01c:	9b03      	ldr	r3, [sp, #12]
 800e01e:	4298      	cmp	r0, r3
 800e020:	bfb8      	it	lt
 800e022:	4618      	movlt	r0, r3
 800e024:	e7a4      	b.n	800df70 <_printf_i+0x168>
 800e026:	2301      	movs	r3, #1
 800e028:	4632      	mov	r2, r6
 800e02a:	4649      	mov	r1, r9
 800e02c:	4640      	mov	r0, r8
 800e02e:	47d0      	blx	sl
 800e030:	3001      	adds	r0, #1
 800e032:	d09b      	beq.n	800df6c <_printf_i+0x164>
 800e034:	3501      	adds	r5, #1
 800e036:	68e3      	ldr	r3, [r4, #12]
 800e038:	9903      	ldr	r1, [sp, #12]
 800e03a:	1a5b      	subs	r3, r3, r1
 800e03c:	42ab      	cmp	r3, r5
 800e03e:	dcf2      	bgt.n	800e026 <_printf_i+0x21e>
 800e040:	e7eb      	b.n	800e01a <_printf_i+0x212>
 800e042:	2500      	movs	r5, #0
 800e044:	f104 0619 	add.w	r6, r4, #25
 800e048:	e7f5      	b.n	800e036 <_printf_i+0x22e>
 800e04a:	bf00      	nop
 800e04c:	080132be 	.word	0x080132be
 800e050:	080132cf 	.word	0x080132cf

0800e054 <siprintf>:
 800e054:	b40e      	push	{r1, r2, r3}
 800e056:	b500      	push	{lr}
 800e058:	b09c      	sub	sp, #112	; 0x70
 800e05a:	ab1d      	add	r3, sp, #116	; 0x74
 800e05c:	9002      	str	r0, [sp, #8]
 800e05e:	9006      	str	r0, [sp, #24]
 800e060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e064:	4809      	ldr	r0, [pc, #36]	; (800e08c <siprintf+0x38>)
 800e066:	9107      	str	r1, [sp, #28]
 800e068:	9104      	str	r1, [sp, #16]
 800e06a:	4909      	ldr	r1, [pc, #36]	; (800e090 <siprintf+0x3c>)
 800e06c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e070:	9105      	str	r1, [sp, #20]
 800e072:	6800      	ldr	r0, [r0, #0]
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	a902      	add	r1, sp, #8
 800e078:	f002 fe72 	bl	8010d60 <_svfiprintf_r>
 800e07c:	9b02      	ldr	r3, [sp, #8]
 800e07e:	2200      	movs	r2, #0
 800e080:	701a      	strb	r2, [r3, #0]
 800e082:	b01c      	add	sp, #112	; 0x70
 800e084:	f85d eb04 	ldr.w	lr, [sp], #4
 800e088:	b003      	add	sp, #12
 800e08a:	4770      	bx	lr
 800e08c:	20000134 	.word	0x20000134
 800e090:	ffff0208 	.word	0xffff0208

0800e094 <strcat>:
 800e094:	b510      	push	{r4, lr}
 800e096:	4602      	mov	r2, r0
 800e098:	7814      	ldrb	r4, [r2, #0]
 800e09a:	4613      	mov	r3, r2
 800e09c:	3201      	adds	r2, #1
 800e09e:	2c00      	cmp	r4, #0
 800e0a0:	d1fa      	bne.n	800e098 <strcat+0x4>
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0ac:	2a00      	cmp	r2, #0
 800e0ae:	d1f9      	bne.n	800e0a4 <strcat+0x10>
 800e0b0:	bd10      	pop	{r4, pc}

0800e0b2 <strcpy>:
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0b8:	f803 2b01 	strb.w	r2, [r3], #1
 800e0bc:	2a00      	cmp	r2, #0
 800e0be:	d1f9      	bne.n	800e0b4 <strcpy+0x2>
 800e0c0:	4770      	bx	lr

0800e0c2 <sulp>:
 800e0c2:	b570      	push	{r4, r5, r6, lr}
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	460d      	mov	r5, r1
 800e0c8:	ec45 4b10 	vmov	d0, r4, r5
 800e0cc:	4616      	mov	r6, r2
 800e0ce:	f002 fba5 	bl	801081c <__ulp>
 800e0d2:	ec51 0b10 	vmov	r0, r1, d0
 800e0d6:	b17e      	cbz	r6, 800e0f8 <sulp+0x36>
 800e0d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e0dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	dd09      	ble.n	800e0f8 <sulp+0x36>
 800e0e4:	051b      	lsls	r3, r3, #20
 800e0e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e0ea:	2400      	movs	r4, #0
 800e0ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e0f0:	4622      	mov	r2, r4
 800e0f2:	462b      	mov	r3, r5
 800e0f4:	f7f2 fab0 	bl	8000658 <__aeabi_dmul>
 800e0f8:	bd70      	pop	{r4, r5, r6, pc}
 800e0fa:	0000      	movs	r0, r0
 800e0fc:	0000      	movs	r0, r0
	...

0800e100 <_strtod_l>:
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	ed2d 8b02 	vpush	{d8}
 800e108:	b09d      	sub	sp, #116	; 0x74
 800e10a:	461f      	mov	r7, r3
 800e10c:	2300      	movs	r3, #0
 800e10e:	9318      	str	r3, [sp, #96]	; 0x60
 800e110:	4ba2      	ldr	r3, [pc, #648]	; (800e39c <_strtod_l+0x29c>)
 800e112:	9213      	str	r2, [sp, #76]	; 0x4c
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	9305      	str	r3, [sp, #20]
 800e118:	4604      	mov	r4, r0
 800e11a:	4618      	mov	r0, r3
 800e11c:	4688      	mov	r8, r1
 800e11e:	f7f2 f881 	bl	8000224 <strlen>
 800e122:	f04f 0a00 	mov.w	sl, #0
 800e126:	4605      	mov	r5, r0
 800e128:	f04f 0b00 	mov.w	fp, #0
 800e12c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e132:	781a      	ldrb	r2, [r3, #0]
 800e134:	2a2b      	cmp	r2, #43	; 0x2b
 800e136:	d04e      	beq.n	800e1d6 <_strtod_l+0xd6>
 800e138:	d83b      	bhi.n	800e1b2 <_strtod_l+0xb2>
 800e13a:	2a0d      	cmp	r2, #13
 800e13c:	d834      	bhi.n	800e1a8 <_strtod_l+0xa8>
 800e13e:	2a08      	cmp	r2, #8
 800e140:	d834      	bhi.n	800e1ac <_strtod_l+0xac>
 800e142:	2a00      	cmp	r2, #0
 800e144:	d03e      	beq.n	800e1c4 <_strtod_l+0xc4>
 800e146:	2300      	movs	r3, #0
 800e148:	930a      	str	r3, [sp, #40]	; 0x28
 800e14a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e14c:	7833      	ldrb	r3, [r6, #0]
 800e14e:	2b30      	cmp	r3, #48	; 0x30
 800e150:	f040 80b0 	bne.w	800e2b4 <_strtod_l+0x1b4>
 800e154:	7873      	ldrb	r3, [r6, #1]
 800e156:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e15a:	2b58      	cmp	r3, #88	; 0x58
 800e15c:	d168      	bne.n	800e230 <_strtod_l+0x130>
 800e15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	ab18      	add	r3, sp, #96	; 0x60
 800e164:	9702      	str	r7, [sp, #8]
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	4a8d      	ldr	r2, [pc, #564]	; (800e3a0 <_strtod_l+0x2a0>)
 800e16a:	ab19      	add	r3, sp, #100	; 0x64
 800e16c:	a917      	add	r1, sp, #92	; 0x5c
 800e16e:	4620      	mov	r0, r4
 800e170:	f001 fcbc 	bl	800faec <__gethex>
 800e174:	f010 0707 	ands.w	r7, r0, #7
 800e178:	4605      	mov	r5, r0
 800e17a:	d005      	beq.n	800e188 <_strtod_l+0x88>
 800e17c:	2f06      	cmp	r7, #6
 800e17e:	d12c      	bne.n	800e1da <_strtod_l+0xda>
 800e180:	3601      	adds	r6, #1
 800e182:	2300      	movs	r3, #0
 800e184:	9617      	str	r6, [sp, #92]	; 0x5c
 800e186:	930a      	str	r3, [sp, #40]	; 0x28
 800e188:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f040 8590 	bne.w	800ecb0 <_strtod_l+0xbb0>
 800e190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e192:	b1eb      	cbz	r3, 800e1d0 <_strtod_l+0xd0>
 800e194:	4652      	mov	r2, sl
 800e196:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e19a:	ec43 2b10 	vmov	d0, r2, r3
 800e19e:	b01d      	add	sp, #116	; 0x74
 800e1a0:	ecbd 8b02 	vpop	{d8}
 800e1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a8:	2a20      	cmp	r2, #32
 800e1aa:	d1cc      	bne.n	800e146 <_strtod_l+0x46>
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800e1b0:	e7be      	b.n	800e130 <_strtod_l+0x30>
 800e1b2:	2a2d      	cmp	r2, #45	; 0x2d
 800e1b4:	d1c7      	bne.n	800e146 <_strtod_l+0x46>
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	920a      	str	r2, [sp, #40]	; 0x28
 800e1ba:	1c5a      	adds	r2, r3, #1
 800e1bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800e1be:	785b      	ldrb	r3, [r3, #1]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1c2      	bne.n	800e14a <_strtod_l+0x4a>
 800e1c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f040 856e 	bne.w	800ecac <_strtod_l+0xbac>
 800e1d0:	4652      	mov	r2, sl
 800e1d2:	465b      	mov	r3, fp
 800e1d4:	e7e1      	b.n	800e19a <_strtod_l+0x9a>
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	e7ee      	b.n	800e1b8 <_strtod_l+0xb8>
 800e1da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e1dc:	b13a      	cbz	r2, 800e1ee <_strtod_l+0xee>
 800e1de:	2135      	movs	r1, #53	; 0x35
 800e1e0:	a81a      	add	r0, sp, #104	; 0x68
 800e1e2:	f002 fc26 	bl	8010a32 <__copybits>
 800e1e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f001 ffe5 	bl	80101b8 <_Bfree>
 800e1ee:	3f01      	subs	r7, #1
 800e1f0:	2f04      	cmp	r7, #4
 800e1f2:	d806      	bhi.n	800e202 <_strtod_l+0x102>
 800e1f4:	e8df f007 	tbb	[pc, r7]
 800e1f8:	1714030a 	.word	0x1714030a
 800e1fc:	0a          	.byte	0x0a
 800e1fd:	00          	.byte	0x00
 800e1fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e202:	0728      	lsls	r0, r5, #28
 800e204:	d5c0      	bpl.n	800e188 <_strtod_l+0x88>
 800e206:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e20a:	e7bd      	b.n	800e188 <_strtod_l+0x88>
 800e20c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e210:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e212:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e216:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e21a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e21e:	e7f0      	b.n	800e202 <_strtod_l+0x102>
 800e220:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e3a4 <_strtod_l+0x2a4>
 800e224:	e7ed      	b.n	800e202 <_strtod_l+0x102>
 800e226:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e22a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e22e:	e7e8      	b.n	800e202 <_strtod_l+0x102>
 800e230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	9217      	str	r2, [sp, #92]	; 0x5c
 800e236:	785b      	ldrb	r3, [r3, #1]
 800e238:	2b30      	cmp	r3, #48	; 0x30
 800e23a:	d0f9      	beq.n	800e230 <_strtod_l+0x130>
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d0a3      	beq.n	800e188 <_strtod_l+0x88>
 800e240:	2301      	movs	r3, #1
 800e242:	f04f 0900 	mov.w	r9, #0
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e24a:	9308      	str	r3, [sp, #32]
 800e24c:	f8cd 901c 	str.w	r9, [sp, #28]
 800e250:	464f      	mov	r7, r9
 800e252:	220a      	movs	r2, #10
 800e254:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e256:	7806      	ldrb	r6, [r0, #0]
 800e258:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e25c:	b2d9      	uxtb	r1, r3
 800e25e:	2909      	cmp	r1, #9
 800e260:	d92a      	bls.n	800e2b8 <_strtod_l+0x1b8>
 800e262:	9905      	ldr	r1, [sp, #20]
 800e264:	462a      	mov	r2, r5
 800e266:	f002 fe93 	bl	8010f90 <strncmp>
 800e26a:	b398      	cbz	r0, 800e2d4 <_strtod_l+0x1d4>
 800e26c:	2000      	movs	r0, #0
 800e26e:	4632      	mov	r2, r6
 800e270:	463d      	mov	r5, r7
 800e272:	9005      	str	r0, [sp, #20]
 800e274:	4603      	mov	r3, r0
 800e276:	2a65      	cmp	r2, #101	; 0x65
 800e278:	d001      	beq.n	800e27e <_strtod_l+0x17e>
 800e27a:	2a45      	cmp	r2, #69	; 0x45
 800e27c:	d118      	bne.n	800e2b0 <_strtod_l+0x1b0>
 800e27e:	b91d      	cbnz	r5, 800e288 <_strtod_l+0x188>
 800e280:	9a04      	ldr	r2, [sp, #16]
 800e282:	4302      	orrs	r2, r0
 800e284:	d09e      	beq.n	800e1c4 <_strtod_l+0xc4>
 800e286:	2500      	movs	r5, #0
 800e288:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e28c:	f108 0201 	add.w	r2, r8, #1
 800e290:	9217      	str	r2, [sp, #92]	; 0x5c
 800e292:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e296:	2a2b      	cmp	r2, #43	; 0x2b
 800e298:	d075      	beq.n	800e386 <_strtod_l+0x286>
 800e29a:	2a2d      	cmp	r2, #45	; 0x2d
 800e29c:	d07b      	beq.n	800e396 <_strtod_l+0x296>
 800e29e:	f04f 0c00 	mov.w	ip, #0
 800e2a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e2a6:	2909      	cmp	r1, #9
 800e2a8:	f240 8082 	bls.w	800e3b0 <_strtod_l+0x2b0>
 800e2ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e2b0:	2600      	movs	r6, #0
 800e2b2:	e09d      	b.n	800e3f0 <_strtod_l+0x2f0>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	e7c4      	b.n	800e242 <_strtod_l+0x142>
 800e2b8:	2f08      	cmp	r7, #8
 800e2ba:	bfd8      	it	le
 800e2bc:	9907      	ldrle	r1, [sp, #28]
 800e2be:	f100 0001 	add.w	r0, r0, #1
 800e2c2:	bfda      	itte	le
 800e2c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800e2c8:	9307      	strle	r3, [sp, #28]
 800e2ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e2ce:	3701      	adds	r7, #1
 800e2d0:	9017      	str	r0, [sp, #92]	; 0x5c
 800e2d2:	e7bf      	b.n	800e254 <_strtod_l+0x154>
 800e2d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e2d6:	195a      	adds	r2, r3, r5
 800e2d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800e2da:	5d5a      	ldrb	r2, [r3, r5]
 800e2dc:	2f00      	cmp	r7, #0
 800e2de:	d037      	beq.n	800e350 <_strtod_l+0x250>
 800e2e0:	9005      	str	r0, [sp, #20]
 800e2e2:	463d      	mov	r5, r7
 800e2e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e2e8:	2b09      	cmp	r3, #9
 800e2ea:	d912      	bls.n	800e312 <_strtod_l+0x212>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e7c2      	b.n	800e276 <_strtod_l+0x176>
 800e2f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800e2f6:	785a      	ldrb	r2, [r3, #1]
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	2a30      	cmp	r2, #48	; 0x30
 800e2fc:	d0f8      	beq.n	800e2f0 <_strtod_l+0x1f0>
 800e2fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e302:	2b08      	cmp	r3, #8
 800e304:	f200 84d9 	bhi.w	800ecba <_strtod_l+0xbba>
 800e308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e30a:	9005      	str	r0, [sp, #20]
 800e30c:	2000      	movs	r0, #0
 800e30e:	9308      	str	r3, [sp, #32]
 800e310:	4605      	mov	r5, r0
 800e312:	3a30      	subs	r2, #48	; 0x30
 800e314:	f100 0301 	add.w	r3, r0, #1
 800e318:	d014      	beq.n	800e344 <_strtod_l+0x244>
 800e31a:	9905      	ldr	r1, [sp, #20]
 800e31c:	4419      	add	r1, r3
 800e31e:	9105      	str	r1, [sp, #20]
 800e320:	462b      	mov	r3, r5
 800e322:	eb00 0e05 	add.w	lr, r0, r5
 800e326:	210a      	movs	r1, #10
 800e328:	4573      	cmp	r3, lr
 800e32a:	d113      	bne.n	800e354 <_strtod_l+0x254>
 800e32c:	182b      	adds	r3, r5, r0
 800e32e:	2b08      	cmp	r3, #8
 800e330:	f105 0501 	add.w	r5, r5, #1
 800e334:	4405      	add	r5, r0
 800e336:	dc1c      	bgt.n	800e372 <_strtod_l+0x272>
 800e338:	9907      	ldr	r1, [sp, #28]
 800e33a:	230a      	movs	r3, #10
 800e33c:	fb03 2301 	mla	r3, r3, r1, r2
 800e340:	9307      	str	r3, [sp, #28]
 800e342:	2300      	movs	r3, #0
 800e344:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e346:	1c51      	adds	r1, r2, #1
 800e348:	9117      	str	r1, [sp, #92]	; 0x5c
 800e34a:	7852      	ldrb	r2, [r2, #1]
 800e34c:	4618      	mov	r0, r3
 800e34e:	e7c9      	b.n	800e2e4 <_strtod_l+0x1e4>
 800e350:	4638      	mov	r0, r7
 800e352:	e7d2      	b.n	800e2fa <_strtod_l+0x1fa>
 800e354:	2b08      	cmp	r3, #8
 800e356:	dc04      	bgt.n	800e362 <_strtod_l+0x262>
 800e358:	9e07      	ldr	r6, [sp, #28]
 800e35a:	434e      	muls	r6, r1
 800e35c:	9607      	str	r6, [sp, #28]
 800e35e:	3301      	adds	r3, #1
 800e360:	e7e2      	b.n	800e328 <_strtod_l+0x228>
 800e362:	f103 0c01 	add.w	ip, r3, #1
 800e366:	f1bc 0f10 	cmp.w	ip, #16
 800e36a:	bfd8      	it	le
 800e36c:	fb01 f909 	mulle.w	r9, r1, r9
 800e370:	e7f5      	b.n	800e35e <_strtod_l+0x25e>
 800e372:	2d10      	cmp	r5, #16
 800e374:	bfdc      	itt	le
 800e376:	230a      	movle	r3, #10
 800e378:	fb03 2909 	mlale	r9, r3, r9, r2
 800e37c:	e7e1      	b.n	800e342 <_strtod_l+0x242>
 800e37e:	2300      	movs	r3, #0
 800e380:	9305      	str	r3, [sp, #20]
 800e382:	2301      	movs	r3, #1
 800e384:	e77c      	b.n	800e280 <_strtod_l+0x180>
 800e386:	f04f 0c00 	mov.w	ip, #0
 800e38a:	f108 0202 	add.w	r2, r8, #2
 800e38e:	9217      	str	r2, [sp, #92]	; 0x5c
 800e390:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e394:	e785      	b.n	800e2a2 <_strtod_l+0x1a2>
 800e396:	f04f 0c01 	mov.w	ip, #1
 800e39a:	e7f6      	b.n	800e38a <_strtod_l+0x28a>
 800e39c:	08013428 	.word	0x08013428
 800e3a0:	080132e0 	.word	0x080132e0
 800e3a4:	7ff00000 	.word	0x7ff00000
 800e3a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e3aa:	1c51      	adds	r1, r2, #1
 800e3ac:	9117      	str	r1, [sp, #92]	; 0x5c
 800e3ae:	7852      	ldrb	r2, [r2, #1]
 800e3b0:	2a30      	cmp	r2, #48	; 0x30
 800e3b2:	d0f9      	beq.n	800e3a8 <_strtod_l+0x2a8>
 800e3b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e3b8:	2908      	cmp	r1, #8
 800e3ba:	f63f af79 	bhi.w	800e2b0 <_strtod_l+0x1b0>
 800e3be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e3c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e3c4:	9206      	str	r2, [sp, #24]
 800e3c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e3c8:	1c51      	adds	r1, r2, #1
 800e3ca:	9117      	str	r1, [sp, #92]	; 0x5c
 800e3cc:	7852      	ldrb	r2, [r2, #1]
 800e3ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e3d2:	2e09      	cmp	r6, #9
 800e3d4:	d937      	bls.n	800e446 <_strtod_l+0x346>
 800e3d6:	9e06      	ldr	r6, [sp, #24]
 800e3d8:	1b89      	subs	r1, r1, r6
 800e3da:	2908      	cmp	r1, #8
 800e3dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e3e0:	dc02      	bgt.n	800e3e8 <_strtod_l+0x2e8>
 800e3e2:	4576      	cmp	r6, lr
 800e3e4:	bfa8      	it	ge
 800e3e6:	4676      	movge	r6, lr
 800e3e8:	f1bc 0f00 	cmp.w	ip, #0
 800e3ec:	d000      	beq.n	800e3f0 <_strtod_l+0x2f0>
 800e3ee:	4276      	negs	r6, r6
 800e3f0:	2d00      	cmp	r5, #0
 800e3f2:	d14d      	bne.n	800e490 <_strtod_l+0x390>
 800e3f4:	9904      	ldr	r1, [sp, #16]
 800e3f6:	4301      	orrs	r1, r0
 800e3f8:	f47f aec6 	bne.w	800e188 <_strtod_l+0x88>
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f47f aee1 	bne.w	800e1c4 <_strtod_l+0xc4>
 800e402:	2a69      	cmp	r2, #105	; 0x69
 800e404:	d027      	beq.n	800e456 <_strtod_l+0x356>
 800e406:	dc24      	bgt.n	800e452 <_strtod_l+0x352>
 800e408:	2a49      	cmp	r2, #73	; 0x49
 800e40a:	d024      	beq.n	800e456 <_strtod_l+0x356>
 800e40c:	2a4e      	cmp	r2, #78	; 0x4e
 800e40e:	f47f aed9 	bne.w	800e1c4 <_strtod_l+0xc4>
 800e412:	499f      	ldr	r1, [pc, #636]	; (800e690 <_strtod_l+0x590>)
 800e414:	a817      	add	r0, sp, #92	; 0x5c
 800e416:	f001 fdc1 	bl	800ff9c <__match>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	f43f aed2 	beq.w	800e1c4 <_strtod_l+0xc4>
 800e420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	2b28      	cmp	r3, #40	; 0x28
 800e426:	d12d      	bne.n	800e484 <_strtod_l+0x384>
 800e428:	499a      	ldr	r1, [pc, #616]	; (800e694 <_strtod_l+0x594>)
 800e42a:	aa1a      	add	r2, sp, #104	; 0x68
 800e42c:	a817      	add	r0, sp, #92	; 0x5c
 800e42e:	f001 fdc9 	bl	800ffc4 <__hexnan>
 800e432:	2805      	cmp	r0, #5
 800e434:	d126      	bne.n	800e484 <_strtod_l+0x384>
 800e436:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e438:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e43c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e440:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e444:	e6a0      	b.n	800e188 <_strtod_l+0x88>
 800e446:	210a      	movs	r1, #10
 800e448:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e44c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e450:	e7b9      	b.n	800e3c6 <_strtod_l+0x2c6>
 800e452:	2a6e      	cmp	r2, #110	; 0x6e
 800e454:	e7db      	b.n	800e40e <_strtod_l+0x30e>
 800e456:	4990      	ldr	r1, [pc, #576]	; (800e698 <_strtod_l+0x598>)
 800e458:	a817      	add	r0, sp, #92	; 0x5c
 800e45a:	f001 fd9f 	bl	800ff9c <__match>
 800e45e:	2800      	cmp	r0, #0
 800e460:	f43f aeb0 	beq.w	800e1c4 <_strtod_l+0xc4>
 800e464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e466:	498d      	ldr	r1, [pc, #564]	; (800e69c <_strtod_l+0x59c>)
 800e468:	3b01      	subs	r3, #1
 800e46a:	a817      	add	r0, sp, #92	; 0x5c
 800e46c:	9317      	str	r3, [sp, #92]	; 0x5c
 800e46e:	f001 fd95 	bl	800ff9c <__match>
 800e472:	b910      	cbnz	r0, 800e47a <_strtod_l+0x37a>
 800e474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e476:	3301      	adds	r3, #1
 800e478:	9317      	str	r3, [sp, #92]	; 0x5c
 800e47a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e6ac <_strtod_l+0x5ac>
 800e47e:	f04f 0a00 	mov.w	sl, #0
 800e482:	e681      	b.n	800e188 <_strtod_l+0x88>
 800e484:	4886      	ldr	r0, [pc, #536]	; (800e6a0 <_strtod_l+0x5a0>)
 800e486:	f002 fd6b 	bl	8010f60 <nan>
 800e48a:	ec5b ab10 	vmov	sl, fp, d0
 800e48e:	e67b      	b.n	800e188 <_strtod_l+0x88>
 800e490:	9b05      	ldr	r3, [sp, #20]
 800e492:	9807      	ldr	r0, [sp, #28]
 800e494:	1af3      	subs	r3, r6, r3
 800e496:	2f00      	cmp	r7, #0
 800e498:	bf08      	it	eq
 800e49a:	462f      	moveq	r7, r5
 800e49c:	2d10      	cmp	r5, #16
 800e49e:	9306      	str	r3, [sp, #24]
 800e4a0:	46a8      	mov	r8, r5
 800e4a2:	bfa8      	it	ge
 800e4a4:	f04f 0810 	movge.w	r8, #16
 800e4a8:	f7f2 f85c 	bl	8000564 <__aeabi_ui2d>
 800e4ac:	2d09      	cmp	r5, #9
 800e4ae:	4682      	mov	sl, r0
 800e4b0:	468b      	mov	fp, r1
 800e4b2:	dd13      	ble.n	800e4dc <_strtod_l+0x3dc>
 800e4b4:	4b7b      	ldr	r3, [pc, #492]	; (800e6a4 <_strtod_l+0x5a4>)
 800e4b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e4ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e4be:	f7f2 f8cb 	bl	8000658 <__aeabi_dmul>
 800e4c2:	4682      	mov	sl, r0
 800e4c4:	4648      	mov	r0, r9
 800e4c6:	468b      	mov	fp, r1
 800e4c8:	f7f2 f84c 	bl	8000564 <__aeabi_ui2d>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	4650      	mov	r0, sl
 800e4d2:	4659      	mov	r1, fp
 800e4d4:	f7f1 ff0a 	bl	80002ec <__adddf3>
 800e4d8:	4682      	mov	sl, r0
 800e4da:	468b      	mov	fp, r1
 800e4dc:	2d0f      	cmp	r5, #15
 800e4de:	dc38      	bgt.n	800e552 <_strtod_l+0x452>
 800e4e0:	9b06      	ldr	r3, [sp, #24]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f43f ae50 	beq.w	800e188 <_strtod_l+0x88>
 800e4e8:	dd24      	ble.n	800e534 <_strtod_l+0x434>
 800e4ea:	2b16      	cmp	r3, #22
 800e4ec:	dc0b      	bgt.n	800e506 <_strtod_l+0x406>
 800e4ee:	496d      	ldr	r1, [pc, #436]	; (800e6a4 <_strtod_l+0x5a4>)
 800e4f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e4f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f8:	4652      	mov	r2, sl
 800e4fa:	465b      	mov	r3, fp
 800e4fc:	f7f2 f8ac 	bl	8000658 <__aeabi_dmul>
 800e500:	4682      	mov	sl, r0
 800e502:	468b      	mov	fp, r1
 800e504:	e640      	b.n	800e188 <_strtod_l+0x88>
 800e506:	9a06      	ldr	r2, [sp, #24]
 800e508:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e50c:	4293      	cmp	r3, r2
 800e50e:	db20      	blt.n	800e552 <_strtod_l+0x452>
 800e510:	4c64      	ldr	r4, [pc, #400]	; (800e6a4 <_strtod_l+0x5a4>)
 800e512:	f1c5 050f 	rsb	r5, r5, #15
 800e516:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e51a:	4652      	mov	r2, sl
 800e51c:	465b      	mov	r3, fp
 800e51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e522:	f7f2 f899 	bl	8000658 <__aeabi_dmul>
 800e526:	9b06      	ldr	r3, [sp, #24]
 800e528:	1b5d      	subs	r5, r3, r5
 800e52a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e52e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e532:	e7e3      	b.n	800e4fc <_strtod_l+0x3fc>
 800e534:	9b06      	ldr	r3, [sp, #24]
 800e536:	3316      	adds	r3, #22
 800e538:	db0b      	blt.n	800e552 <_strtod_l+0x452>
 800e53a:	9b05      	ldr	r3, [sp, #20]
 800e53c:	1b9e      	subs	r6, r3, r6
 800e53e:	4b59      	ldr	r3, [pc, #356]	; (800e6a4 <_strtod_l+0x5a4>)
 800e540:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e544:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e548:	4650      	mov	r0, sl
 800e54a:	4659      	mov	r1, fp
 800e54c:	f7f2 f9ae 	bl	80008ac <__aeabi_ddiv>
 800e550:	e7d6      	b.n	800e500 <_strtod_l+0x400>
 800e552:	9b06      	ldr	r3, [sp, #24]
 800e554:	eba5 0808 	sub.w	r8, r5, r8
 800e558:	4498      	add	r8, r3
 800e55a:	f1b8 0f00 	cmp.w	r8, #0
 800e55e:	dd74      	ble.n	800e64a <_strtod_l+0x54a>
 800e560:	f018 030f 	ands.w	r3, r8, #15
 800e564:	d00a      	beq.n	800e57c <_strtod_l+0x47c>
 800e566:	494f      	ldr	r1, [pc, #316]	; (800e6a4 <_strtod_l+0x5a4>)
 800e568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e56c:	4652      	mov	r2, sl
 800e56e:	465b      	mov	r3, fp
 800e570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e574:	f7f2 f870 	bl	8000658 <__aeabi_dmul>
 800e578:	4682      	mov	sl, r0
 800e57a:	468b      	mov	fp, r1
 800e57c:	f038 080f 	bics.w	r8, r8, #15
 800e580:	d04f      	beq.n	800e622 <_strtod_l+0x522>
 800e582:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e586:	dd22      	ble.n	800e5ce <_strtod_l+0x4ce>
 800e588:	2500      	movs	r5, #0
 800e58a:	462e      	mov	r6, r5
 800e58c:	9507      	str	r5, [sp, #28]
 800e58e:	9505      	str	r5, [sp, #20]
 800e590:	2322      	movs	r3, #34	; 0x22
 800e592:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e6ac <_strtod_l+0x5ac>
 800e596:	6023      	str	r3, [r4, #0]
 800e598:	f04f 0a00 	mov.w	sl, #0
 800e59c:	9b07      	ldr	r3, [sp, #28]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	f43f adf2 	beq.w	800e188 <_strtod_l+0x88>
 800e5a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f001 fe06 	bl	80101b8 <_Bfree>
 800e5ac:	9905      	ldr	r1, [sp, #20]
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f001 fe02 	bl	80101b8 <_Bfree>
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f001 fdfe 	bl	80101b8 <_Bfree>
 800e5bc:	9907      	ldr	r1, [sp, #28]
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f001 fdfa 	bl	80101b8 <_Bfree>
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f001 fdf6 	bl	80101b8 <_Bfree>
 800e5cc:	e5dc      	b.n	800e188 <_strtod_l+0x88>
 800e5ce:	4b36      	ldr	r3, [pc, #216]	; (800e6a8 <_strtod_l+0x5a8>)
 800e5d0:	9304      	str	r3, [sp, #16]
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e5d8:	4650      	mov	r0, sl
 800e5da:	4659      	mov	r1, fp
 800e5dc:	4699      	mov	r9, r3
 800e5de:	f1b8 0f01 	cmp.w	r8, #1
 800e5e2:	dc21      	bgt.n	800e628 <_strtod_l+0x528>
 800e5e4:	b10b      	cbz	r3, 800e5ea <_strtod_l+0x4ea>
 800e5e6:	4682      	mov	sl, r0
 800e5e8:	468b      	mov	fp, r1
 800e5ea:	4b2f      	ldr	r3, [pc, #188]	; (800e6a8 <_strtod_l+0x5a8>)
 800e5ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e5f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e5f4:	4652      	mov	r2, sl
 800e5f6:	465b      	mov	r3, fp
 800e5f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e5fc:	f7f2 f82c 	bl	8000658 <__aeabi_dmul>
 800e600:	4b2a      	ldr	r3, [pc, #168]	; (800e6ac <_strtod_l+0x5ac>)
 800e602:	460a      	mov	r2, r1
 800e604:	400b      	ands	r3, r1
 800e606:	492a      	ldr	r1, [pc, #168]	; (800e6b0 <_strtod_l+0x5b0>)
 800e608:	428b      	cmp	r3, r1
 800e60a:	4682      	mov	sl, r0
 800e60c:	d8bc      	bhi.n	800e588 <_strtod_l+0x488>
 800e60e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e612:	428b      	cmp	r3, r1
 800e614:	bf86      	itte	hi
 800e616:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e6b4 <_strtod_l+0x5b4>
 800e61a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e61e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e622:	2300      	movs	r3, #0
 800e624:	9304      	str	r3, [sp, #16]
 800e626:	e084      	b.n	800e732 <_strtod_l+0x632>
 800e628:	f018 0f01 	tst.w	r8, #1
 800e62c:	d005      	beq.n	800e63a <_strtod_l+0x53a>
 800e62e:	9b04      	ldr	r3, [sp, #16]
 800e630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e634:	f7f2 f810 	bl	8000658 <__aeabi_dmul>
 800e638:	2301      	movs	r3, #1
 800e63a:	9a04      	ldr	r2, [sp, #16]
 800e63c:	3208      	adds	r2, #8
 800e63e:	f109 0901 	add.w	r9, r9, #1
 800e642:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e646:	9204      	str	r2, [sp, #16]
 800e648:	e7c9      	b.n	800e5de <_strtod_l+0x4de>
 800e64a:	d0ea      	beq.n	800e622 <_strtod_l+0x522>
 800e64c:	f1c8 0800 	rsb	r8, r8, #0
 800e650:	f018 020f 	ands.w	r2, r8, #15
 800e654:	d00a      	beq.n	800e66c <_strtod_l+0x56c>
 800e656:	4b13      	ldr	r3, [pc, #76]	; (800e6a4 <_strtod_l+0x5a4>)
 800e658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e65c:	4650      	mov	r0, sl
 800e65e:	4659      	mov	r1, fp
 800e660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e664:	f7f2 f922 	bl	80008ac <__aeabi_ddiv>
 800e668:	4682      	mov	sl, r0
 800e66a:	468b      	mov	fp, r1
 800e66c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e670:	d0d7      	beq.n	800e622 <_strtod_l+0x522>
 800e672:	f1b8 0f1f 	cmp.w	r8, #31
 800e676:	dd1f      	ble.n	800e6b8 <_strtod_l+0x5b8>
 800e678:	2500      	movs	r5, #0
 800e67a:	462e      	mov	r6, r5
 800e67c:	9507      	str	r5, [sp, #28]
 800e67e:	9505      	str	r5, [sp, #20]
 800e680:	2322      	movs	r3, #34	; 0x22
 800e682:	f04f 0a00 	mov.w	sl, #0
 800e686:	f04f 0b00 	mov.w	fp, #0
 800e68a:	6023      	str	r3, [r4, #0]
 800e68c:	e786      	b.n	800e59c <_strtod_l+0x49c>
 800e68e:	bf00      	nop
 800e690:	080132b9 	.word	0x080132b9
 800e694:	080132f4 	.word	0x080132f4
 800e698:	080132b1 	.word	0x080132b1
 800e69c:	08013333 	.word	0x08013333
 800e6a0:	080135e0 	.word	0x080135e0
 800e6a4:	080134c0 	.word	0x080134c0
 800e6a8:	08013498 	.word	0x08013498
 800e6ac:	7ff00000 	.word	0x7ff00000
 800e6b0:	7ca00000 	.word	0x7ca00000
 800e6b4:	7fefffff 	.word	0x7fefffff
 800e6b8:	f018 0310 	ands.w	r3, r8, #16
 800e6bc:	bf18      	it	ne
 800e6be:	236a      	movne	r3, #106	; 0x6a
 800e6c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ea70 <_strtod_l+0x970>
 800e6c4:	9304      	str	r3, [sp, #16]
 800e6c6:	4650      	mov	r0, sl
 800e6c8:	4659      	mov	r1, fp
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	f018 0f01 	tst.w	r8, #1
 800e6d0:	d004      	beq.n	800e6dc <_strtod_l+0x5dc>
 800e6d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e6d6:	f7f1 ffbf 	bl	8000658 <__aeabi_dmul>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e6e0:	f109 0908 	add.w	r9, r9, #8
 800e6e4:	d1f2      	bne.n	800e6cc <_strtod_l+0x5cc>
 800e6e6:	b10b      	cbz	r3, 800e6ec <_strtod_l+0x5ec>
 800e6e8:	4682      	mov	sl, r0
 800e6ea:	468b      	mov	fp, r1
 800e6ec:	9b04      	ldr	r3, [sp, #16]
 800e6ee:	b1c3      	cbz	r3, 800e722 <_strtod_l+0x622>
 800e6f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e6f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	4659      	mov	r1, fp
 800e6fc:	dd11      	ble.n	800e722 <_strtod_l+0x622>
 800e6fe:	2b1f      	cmp	r3, #31
 800e700:	f340 8124 	ble.w	800e94c <_strtod_l+0x84c>
 800e704:	2b34      	cmp	r3, #52	; 0x34
 800e706:	bfde      	ittt	le
 800e708:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e70c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800e710:	fa03 f202 	lslle.w	r2, r3, r2
 800e714:	f04f 0a00 	mov.w	sl, #0
 800e718:	bfcc      	ite	gt
 800e71a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e71e:	ea02 0b01 	andle.w	fp, r2, r1
 800e722:	2200      	movs	r2, #0
 800e724:	2300      	movs	r3, #0
 800e726:	4650      	mov	r0, sl
 800e728:	4659      	mov	r1, fp
 800e72a:	f7f2 f9fd 	bl	8000b28 <__aeabi_dcmpeq>
 800e72e:	2800      	cmp	r0, #0
 800e730:	d1a2      	bne.n	800e678 <_strtod_l+0x578>
 800e732:	9b07      	ldr	r3, [sp, #28]
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	9908      	ldr	r1, [sp, #32]
 800e738:	462b      	mov	r3, r5
 800e73a:	463a      	mov	r2, r7
 800e73c:	4620      	mov	r0, r4
 800e73e:	f001 fda3 	bl	8010288 <__s2b>
 800e742:	9007      	str	r0, [sp, #28]
 800e744:	2800      	cmp	r0, #0
 800e746:	f43f af1f 	beq.w	800e588 <_strtod_l+0x488>
 800e74a:	9b05      	ldr	r3, [sp, #20]
 800e74c:	1b9e      	subs	r6, r3, r6
 800e74e:	9b06      	ldr	r3, [sp, #24]
 800e750:	2b00      	cmp	r3, #0
 800e752:	bfb4      	ite	lt
 800e754:	4633      	movlt	r3, r6
 800e756:	2300      	movge	r3, #0
 800e758:	930c      	str	r3, [sp, #48]	; 0x30
 800e75a:	9b06      	ldr	r3, [sp, #24]
 800e75c:	2500      	movs	r5, #0
 800e75e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e762:	9312      	str	r3, [sp, #72]	; 0x48
 800e764:	462e      	mov	r6, r5
 800e766:	9b07      	ldr	r3, [sp, #28]
 800e768:	4620      	mov	r0, r4
 800e76a:	6859      	ldr	r1, [r3, #4]
 800e76c:	f001 fce4 	bl	8010138 <_Balloc>
 800e770:	9005      	str	r0, [sp, #20]
 800e772:	2800      	cmp	r0, #0
 800e774:	f43f af0c 	beq.w	800e590 <_strtod_l+0x490>
 800e778:	9b07      	ldr	r3, [sp, #28]
 800e77a:	691a      	ldr	r2, [r3, #16]
 800e77c:	3202      	adds	r2, #2
 800e77e:	f103 010c 	add.w	r1, r3, #12
 800e782:	0092      	lsls	r2, r2, #2
 800e784:	300c      	adds	r0, #12
 800e786:	f7fe ffe5 	bl	800d754 <memcpy>
 800e78a:	ec4b ab10 	vmov	d0, sl, fp
 800e78e:	aa1a      	add	r2, sp, #104	; 0x68
 800e790:	a919      	add	r1, sp, #100	; 0x64
 800e792:	4620      	mov	r0, r4
 800e794:	f002 f8be 	bl	8010914 <__d2b>
 800e798:	ec4b ab18 	vmov	d8, sl, fp
 800e79c:	9018      	str	r0, [sp, #96]	; 0x60
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	f43f aef6 	beq.w	800e590 <_strtod_l+0x490>
 800e7a4:	2101      	movs	r1, #1
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f001 fe08 	bl	80103bc <__i2b>
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	f43f aeee 	beq.w	800e590 <_strtod_l+0x490>
 800e7b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e7b6:	9904      	ldr	r1, [sp, #16]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	bfab      	itete	ge
 800e7bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e7be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e7c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e7c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e7c6:	bfac      	ite	ge
 800e7c8:	eb03 0902 	addge.w	r9, r3, r2
 800e7cc:	1ad7      	sublt	r7, r2, r3
 800e7ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e7d0:	eba3 0801 	sub.w	r8, r3, r1
 800e7d4:	4490      	add	r8, r2
 800e7d6:	4ba1      	ldr	r3, [pc, #644]	; (800ea5c <_strtod_l+0x95c>)
 800e7d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e7dc:	4598      	cmp	r8, r3
 800e7de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e7e2:	f280 80c7 	bge.w	800e974 <_strtod_l+0x874>
 800e7e6:	eba3 0308 	sub.w	r3, r3, r8
 800e7ea:	2b1f      	cmp	r3, #31
 800e7ec:	eba2 0203 	sub.w	r2, r2, r3
 800e7f0:	f04f 0101 	mov.w	r1, #1
 800e7f4:	f300 80b1 	bgt.w	800e95a <_strtod_l+0x85a>
 800e7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7fc:	930d      	str	r3, [sp, #52]	; 0x34
 800e7fe:	2300      	movs	r3, #0
 800e800:	9308      	str	r3, [sp, #32]
 800e802:	eb09 0802 	add.w	r8, r9, r2
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	45c1      	cmp	r9, r8
 800e80a:	4417      	add	r7, r2
 800e80c:	441f      	add	r7, r3
 800e80e:	464b      	mov	r3, r9
 800e810:	bfa8      	it	ge
 800e812:	4643      	movge	r3, r8
 800e814:	42bb      	cmp	r3, r7
 800e816:	bfa8      	it	ge
 800e818:	463b      	movge	r3, r7
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	bfc2      	ittt	gt
 800e81e:	eba8 0803 	subgt.w	r8, r8, r3
 800e822:	1aff      	subgt	r7, r7, r3
 800e824:	eba9 0903 	subgt.w	r9, r9, r3
 800e828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	dd17      	ble.n	800e85e <_strtod_l+0x75e>
 800e82e:	4631      	mov	r1, r6
 800e830:	461a      	mov	r2, r3
 800e832:	4620      	mov	r0, r4
 800e834:	f001 fe82 	bl	801053c <__pow5mult>
 800e838:	4606      	mov	r6, r0
 800e83a:	2800      	cmp	r0, #0
 800e83c:	f43f aea8 	beq.w	800e590 <_strtod_l+0x490>
 800e840:	4601      	mov	r1, r0
 800e842:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e844:	4620      	mov	r0, r4
 800e846:	f001 fdcf 	bl	80103e8 <__multiply>
 800e84a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f43f ae9f 	beq.w	800e590 <_strtod_l+0x490>
 800e852:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e854:	4620      	mov	r0, r4
 800e856:	f001 fcaf 	bl	80101b8 <_Bfree>
 800e85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e85c:	9318      	str	r3, [sp, #96]	; 0x60
 800e85e:	f1b8 0f00 	cmp.w	r8, #0
 800e862:	f300 808c 	bgt.w	800e97e <_strtod_l+0x87e>
 800e866:	9b06      	ldr	r3, [sp, #24]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	dd08      	ble.n	800e87e <_strtod_l+0x77e>
 800e86c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e86e:	9905      	ldr	r1, [sp, #20]
 800e870:	4620      	mov	r0, r4
 800e872:	f001 fe63 	bl	801053c <__pow5mult>
 800e876:	9005      	str	r0, [sp, #20]
 800e878:	2800      	cmp	r0, #0
 800e87a:	f43f ae89 	beq.w	800e590 <_strtod_l+0x490>
 800e87e:	2f00      	cmp	r7, #0
 800e880:	dd08      	ble.n	800e894 <_strtod_l+0x794>
 800e882:	9905      	ldr	r1, [sp, #20]
 800e884:	463a      	mov	r2, r7
 800e886:	4620      	mov	r0, r4
 800e888:	f001 feb2 	bl	80105f0 <__lshift>
 800e88c:	9005      	str	r0, [sp, #20]
 800e88e:	2800      	cmp	r0, #0
 800e890:	f43f ae7e 	beq.w	800e590 <_strtod_l+0x490>
 800e894:	f1b9 0f00 	cmp.w	r9, #0
 800e898:	dd08      	ble.n	800e8ac <_strtod_l+0x7ac>
 800e89a:	4631      	mov	r1, r6
 800e89c:	464a      	mov	r2, r9
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f001 fea6 	bl	80105f0 <__lshift>
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	f43f ae72 	beq.w	800e590 <_strtod_l+0x490>
 800e8ac:	9a05      	ldr	r2, [sp, #20]
 800e8ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f001 ff29 	bl	8010708 <__mdiff>
 800e8b6:	4605      	mov	r5, r0
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	f43f ae69 	beq.w	800e590 <_strtod_l+0x490>
 800e8be:	68c3      	ldr	r3, [r0, #12]
 800e8c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	60c3      	str	r3, [r0, #12]
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	f001 ff02 	bl	80106d0 <__mcmp>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	da60      	bge.n	800e992 <_strtod_l+0x892>
 800e8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8d2:	ea53 030a 	orrs.w	r3, r3, sl
 800e8d6:	f040 8082 	bne.w	800e9de <_strtod_l+0x8de>
 800e8da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d17d      	bne.n	800e9de <_strtod_l+0x8de>
 800e8e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8e6:	0d1b      	lsrs	r3, r3, #20
 800e8e8:	051b      	lsls	r3, r3, #20
 800e8ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e8ee:	d976      	bls.n	800e9de <_strtod_l+0x8de>
 800e8f0:	696b      	ldr	r3, [r5, #20]
 800e8f2:	b913      	cbnz	r3, 800e8fa <_strtod_l+0x7fa>
 800e8f4:	692b      	ldr	r3, [r5, #16]
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	dd71      	ble.n	800e9de <_strtod_l+0x8de>
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	4620      	mov	r0, r4
 800e900:	f001 fe76 	bl	80105f0 <__lshift>
 800e904:	4631      	mov	r1, r6
 800e906:	4605      	mov	r5, r0
 800e908:	f001 fee2 	bl	80106d0 <__mcmp>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	dd66      	ble.n	800e9de <_strtod_l+0x8de>
 800e910:	9904      	ldr	r1, [sp, #16]
 800e912:	4a53      	ldr	r2, [pc, #332]	; (800ea60 <_strtod_l+0x960>)
 800e914:	465b      	mov	r3, fp
 800e916:	2900      	cmp	r1, #0
 800e918:	f000 8081 	beq.w	800ea1e <_strtod_l+0x91e>
 800e91c:	ea02 010b 	and.w	r1, r2, fp
 800e920:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e924:	dc7b      	bgt.n	800ea1e <_strtod_l+0x91e>
 800e926:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e92a:	f77f aea9 	ble.w	800e680 <_strtod_l+0x580>
 800e92e:	4b4d      	ldr	r3, [pc, #308]	; (800ea64 <_strtod_l+0x964>)
 800e930:	4650      	mov	r0, sl
 800e932:	4659      	mov	r1, fp
 800e934:	2200      	movs	r2, #0
 800e936:	f7f1 fe8f 	bl	8000658 <__aeabi_dmul>
 800e93a:	460b      	mov	r3, r1
 800e93c:	4303      	orrs	r3, r0
 800e93e:	bf08      	it	eq
 800e940:	2322      	moveq	r3, #34	; 0x22
 800e942:	4682      	mov	sl, r0
 800e944:	468b      	mov	fp, r1
 800e946:	bf08      	it	eq
 800e948:	6023      	streq	r3, [r4, #0]
 800e94a:	e62b      	b.n	800e5a4 <_strtod_l+0x4a4>
 800e94c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e950:	fa02 f303 	lsl.w	r3, r2, r3
 800e954:	ea03 0a0a 	and.w	sl, r3, sl
 800e958:	e6e3      	b.n	800e722 <_strtod_l+0x622>
 800e95a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e95e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e962:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e966:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e96a:	fa01 f308 	lsl.w	r3, r1, r8
 800e96e:	9308      	str	r3, [sp, #32]
 800e970:	910d      	str	r1, [sp, #52]	; 0x34
 800e972:	e746      	b.n	800e802 <_strtod_l+0x702>
 800e974:	2300      	movs	r3, #0
 800e976:	9308      	str	r3, [sp, #32]
 800e978:	2301      	movs	r3, #1
 800e97a:	930d      	str	r3, [sp, #52]	; 0x34
 800e97c:	e741      	b.n	800e802 <_strtod_l+0x702>
 800e97e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e980:	4642      	mov	r2, r8
 800e982:	4620      	mov	r0, r4
 800e984:	f001 fe34 	bl	80105f0 <__lshift>
 800e988:	9018      	str	r0, [sp, #96]	; 0x60
 800e98a:	2800      	cmp	r0, #0
 800e98c:	f47f af6b 	bne.w	800e866 <_strtod_l+0x766>
 800e990:	e5fe      	b.n	800e590 <_strtod_l+0x490>
 800e992:	465f      	mov	r7, fp
 800e994:	d16e      	bne.n	800ea74 <_strtod_l+0x974>
 800e996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e99c:	b342      	cbz	r2, 800e9f0 <_strtod_l+0x8f0>
 800e99e:	4a32      	ldr	r2, [pc, #200]	; (800ea68 <_strtod_l+0x968>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d128      	bne.n	800e9f6 <_strtod_l+0x8f6>
 800e9a4:	9b04      	ldr	r3, [sp, #16]
 800e9a6:	4651      	mov	r1, sl
 800e9a8:	b1eb      	cbz	r3, 800e9e6 <_strtod_l+0x8e6>
 800e9aa:	4b2d      	ldr	r3, [pc, #180]	; (800ea60 <_strtod_l+0x960>)
 800e9ac:	403b      	ands	r3, r7
 800e9ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e9b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9b6:	d819      	bhi.n	800e9ec <_strtod_l+0x8ec>
 800e9b8:	0d1b      	lsrs	r3, r3, #20
 800e9ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e9be:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c2:	4299      	cmp	r1, r3
 800e9c4:	d117      	bne.n	800e9f6 <_strtod_l+0x8f6>
 800e9c6:	4b29      	ldr	r3, [pc, #164]	; (800ea6c <_strtod_l+0x96c>)
 800e9c8:	429f      	cmp	r7, r3
 800e9ca:	d102      	bne.n	800e9d2 <_strtod_l+0x8d2>
 800e9cc:	3101      	adds	r1, #1
 800e9ce:	f43f addf 	beq.w	800e590 <_strtod_l+0x490>
 800e9d2:	4b23      	ldr	r3, [pc, #140]	; (800ea60 <_strtod_l+0x960>)
 800e9d4:	403b      	ands	r3, r7
 800e9d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e9da:	f04f 0a00 	mov.w	sl, #0
 800e9de:	9b04      	ldr	r3, [sp, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1a4      	bne.n	800e92e <_strtod_l+0x82e>
 800e9e4:	e5de      	b.n	800e5a4 <_strtod_l+0x4a4>
 800e9e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9ea:	e7ea      	b.n	800e9c2 <_strtod_l+0x8c2>
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	e7e8      	b.n	800e9c2 <_strtod_l+0x8c2>
 800e9f0:	ea53 030a 	orrs.w	r3, r3, sl
 800e9f4:	d08c      	beq.n	800e910 <_strtod_l+0x810>
 800e9f6:	9b08      	ldr	r3, [sp, #32]
 800e9f8:	b1db      	cbz	r3, 800ea32 <_strtod_l+0x932>
 800e9fa:	423b      	tst	r3, r7
 800e9fc:	d0ef      	beq.n	800e9de <_strtod_l+0x8de>
 800e9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea00:	9a04      	ldr	r2, [sp, #16]
 800ea02:	4650      	mov	r0, sl
 800ea04:	4659      	mov	r1, fp
 800ea06:	b1c3      	cbz	r3, 800ea3a <_strtod_l+0x93a>
 800ea08:	f7ff fb5b 	bl	800e0c2 <sulp>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	ec51 0b18 	vmov	r0, r1, d8
 800ea14:	f7f1 fc6a 	bl	80002ec <__adddf3>
 800ea18:	4682      	mov	sl, r0
 800ea1a:	468b      	mov	fp, r1
 800ea1c:	e7df      	b.n	800e9de <_strtod_l+0x8de>
 800ea1e:	4013      	ands	r3, r2
 800ea20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ea24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ea28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ea2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ea30:	e7d5      	b.n	800e9de <_strtod_l+0x8de>
 800ea32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea34:	ea13 0f0a 	tst.w	r3, sl
 800ea38:	e7e0      	b.n	800e9fc <_strtod_l+0x8fc>
 800ea3a:	f7ff fb42 	bl	800e0c2 <sulp>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	ec51 0b18 	vmov	r0, r1, d8
 800ea46:	f7f1 fc4f 	bl	80002e8 <__aeabi_dsub>
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	4682      	mov	sl, r0
 800ea50:	468b      	mov	fp, r1
 800ea52:	f7f2 f869 	bl	8000b28 <__aeabi_dcmpeq>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d0c1      	beq.n	800e9de <_strtod_l+0x8de>
 800ea5a:	e611      	b.n	800e680 <_strtod_l+0x580>
 800ea5c:	fffffc02 	.word	0xfffffc02
 800ea60:	7ff00000 	.word	0x7ff00000
 800ea64:	39500000 	.word	0x39500000
 800ea68:	000fffff 	.word	0x000fffff
 800ea6c:	7fefffff 	.word	0x7fefffff
 800ea70:	08013308 	.word	0x08013308
 800ea74:	4631      	mov	r1, r6
 800ea76:	4628      	mov	r0, r5
 800ea78:	f001 ffa8 	bl	80109cc <__ratio>
 800ea7c:	ec59 8b10 	vmov	r8, r9, d0
 800ea80:	ee10 0a10 	vmov	r0, s0
 800ea84:	2200      	movs	r2, #0
 800ea86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea8a:	4649      	mov	r1, r9
 800ea8c:	f7f2 f860 	bl	8000b50 <__aeabi_dcmple>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	d07a      	beq.n	800eb8a <_strtod_l+0xa8a>
 800ea94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d04a      	beq.n	800eb30 <_strtod_l+0xa30>
 800ea9a:	4b95      	ldr	r3, [pc, #596]	; (800ecf0 <_strtod_l+0xbf0>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eaa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ecf0 <_strtod_l+0xbf0>
 800eaa6:	f04f 0800 	mov.w	r8, #0
 800eaaa:	4b92      	ldr	r3, [pc, #584]	; (800ecf4 <_strtod_l+0xbf4>)
 800eaac:	403b      	ands	r3, r7
 800eaae:	930d      	str	r3, [sp, #52]	; 0x34
 800eab0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eab2:	4b91      	ldr	r3, [pc, #580]	; (800ecf8 <_strtod_l+0xbf8>)
 800eab4:	429a      	cmp	r2, r3
 800eab6:	f040 80b0 	bne.w	800ec1a <_strtod_l+0xb1a>
 800eaba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eabe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800eac2:	ec4b ab10 	vmov	d0, sl, fp
 800eac6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eaca:	f001 fea7 	bl	801081c <__ulp>
 800eace:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ead2:	ec53 2b10 	vmov	r2, r3, d0
 800ead6:	f7f1 fdbf 	bl	8000658 <__aeabi_dmul>
 800eada:	4652      	mov	r2, sl
 800eadc:	465b      	mov	r3, fp
 800eade:	f7f1 fc05 	bl	80002ec <__adddf3>
 800eae2:	460b      	mov	r3, r1
 800eae4:	4983      	ldr	r1, [pc, #524]	; (800ecf4 <_strtod_l+0xbf4>)
 800eae6:	4a85      	ldr	r2, [pc, #532]	; (800ecfc <_strtod_l+0xbfc>)
 800eae8:	4019      	ands	r1, r3
 800eaea:	4291      	cmp	r1, r2
 800eaec:	4682      	mov	sl, r0
 800eaee:	d960      	bls.n	800ebb2 <_strtod_l+0xab2>
 800eaf0:	ee18 3a90 	vmov	r3, s17
 800eaf4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d104      	bne.n	800eb06 <_strtod_l+0xa06>
 800eafc:	ee18 3a10 	vmov	r3, s16
 800eb00:	3301      	adds	r3, #1
 800eb02:	f43f ad45 	beq.w	800e590 <_strtod_l+0x490>
 800eb06:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ed08 <_strtod_l+0xc08>
 800eb0a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800eb0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eb10:	4620      	mov	r0, r4
 800eb12:	f001 fb51 	bl	80101b8 <_Bfree>
 800eb16:	9905      	ldr	r1, [sp, #20]
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f001 fb4d 	bl	80101b8 <_Bfree>
 800eb1e:	4631      	mov	r1, r6
 800eb20:	4620      	mov	r0, r4
 800eb22:	f001 fb49 	bl	80101b8 <_Bfree>
 800eb26:	4629      	mov	r1, r5
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f001 fb45 	bl	80101b8 <_Bfree>
 800eb2e:	e61a      	b.n	800e766 <_strtod_l+0x666>
 800eb30:	f1ba 0f00 	cmp.w	sl, #0
 800eb34:	d11b      	bne.n	800eb6e <_strtod_l+0xa6e>
 800eb36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb3a:	b9f3      	cbnz	r3, 800eb7a <_strtod_l+0xa7a>
 800eb3c:	4b6c      	ldr	r3, [pc, #432]	; (800ecf0 <_strtod_l+0xbf0>)
 800eb3e:	2200      	movs	r2, #0
 800eb40:	4640      	mov	r0, r8
 800eb42:	4649      	mov	r1, r9
 800eb44:	f7f1 fffa 	bl	8000b3c <__aeabi_dcmplt>
 800eb48:	b9d0      	cbnz	r0, 800eb80 <_strtod_l+0xa80>
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	4b6c      	ldr	r3, [pc, #432]	; (800ed00 <_strtod_l+0xc00>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	f7f1 fd81 	bl	8000658 <__aeabi_dmul>
 800eb56:	4680      	mov	r8, r0
 800eb58:	4689      	mov	r9, r1
 800eb5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eb5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800eb62:	9315      	str	r3, [sp, #84]	; 0x54
 800eb64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800eb68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eb6c:	e79d      	b.n	800eaaa <_strtod_l+0x9aa>
 800eb6e:	f1ba 0f01 	cmp.w	sl, #1
 800eb72:	d102      	bne.n	800eb7a <_strtod_l+0xa7a>
 800eb74:	2f00      	cmp	r7, #0
 800eb76:	f43f ad83 	beq.w	800e680 <_strtod_l+0x580>
 800eb7a:	4b62      	ldr	r3, [pc, #392]	; (800ed04 <_strtod_l+0xc04>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	e78e      	b.n	800ea9e <_strtod_l+0x99e>
 800eb80:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ed00 <_strtod_l+0xc00>
 800eb84:	f04f 0800 	mov.w	r8, #0
 800eb88:	e7e7      	b.n	800eb5a <_strtod_l+0xa5a>
 800eb8a:	4b5d      	ldr	r3, [pc, #372]	; (800ed00 <_strtod_l+0xc00>)
 800eb8c:	4640      	mov	r0, r8
 800eb8e:	4649      	mov	r1, r9
 800eb90:	2200      	movs	r2, #0
 800eb92:	f7f1 fd61 	bl	8000658 <__aeabi_dmul>
 800eb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb98:	4680      	mov	r8, r0
 800eb9a:	4689      	mov	r9, r1
 800eb9c:	b933      	cbnz	r3, 800ebac <_strtod_l+0xaac>
 800eb9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eba2:	900e      	str	r0, [sp, #56]	; 0x38
 800eba4:	930f      	str	r3, [sp, #60]	; 0x3c
 800eba6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ebaa:	e7dd      	b.n	800eb68 <_strtod_l+0xa68>
 800ebac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ebb0:	e7f9      	b.n	800eba6 <_strtod_l+0xaa6>
 800ebb2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1a8      	bne.n	800eb0e <_strtod_l+0xa0e>
 800ebbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ebc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebc2:	0d1b      	lsrs	r3, r3, #20
 800ebc4:	051b      	lsls	r3, r3, #20
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d1a1      	bne.n	800eb0e <_strtod_l+0xa0e>
 800ebca:	4640      	mov	r0, r8
 800ebcc:	4649      	mov	r1, r9
 800ebce:	f7f2 f8a3 	bl	8000d18 <__aeabi_d2lz>
 800ebd2:	f7f1 fd13 	bl	80005fc <__aeabi_l2d>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	4640      	mov	r0, r8
 800ebdc:	4649      	mov	r1, r9
 800ebde:	f7f1 fb83 	bl	80002e8 <__aeabi_dsub>
 800ebe2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebe4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebe8:	ea43 030a 	orr.w	r3, r3, sl
 800ebec:	4313      	orrs	r3, r2
 800ebee:	4680      	mov	r8, r0
 800ebf0:	4689      	mov	r9, r1
 800ebf2:	d055      	beq.n	800eca0 <_strtod_l+0xba0>
 800ebf4:	a336      	add	r3, pc, #216	; (adr r3, 800ecd0 <_strtod_l+0xbd0>)
 800ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfa:	f7f1 ff9f 	bl	8000b3c <__aeabi_dcmplt>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	f47f acd0 	bne.w	800e5a4 <_strtod_l+0x4a4>
 800ec04:	a334      	add	r3, pc, #208	; (adr r3, 800ecd8 <_strtod_l+0xbd8>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	4640      	mov	r0, r8
 800ec0c:	4649      	mov	r1, r9
 800ec0e:	f7f1 ffb3 	bl	8000b78 <__aeabi_dcmpgt>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	f43f af7b 	beq.w	800eb0e <_strtod_l+0xa0e>
 800ec18:	e4c4      	b.n	800e5a4 <_strtod_l+0x4a4>
 800ec1a:	9b04      	ldr	r3, [sp, #16]
 800ec1c:	b333      	cbz	r3, 800ec6c <_strtod_l+0xb6c>
 800ec1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ec24:	d822      	bhi.n	800ec6c <_strtod_l+0xb6c>
 800ec26:	a32e      	add	r3, pc, #184	; (adr r3, 800ece0 <_strtod_l+0xbe0>)
 800ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	4649      	mov	r1, r9
 800ec30:	f7f1 ff8e 	bl	8000b50 <__aeabi_dcmple>
 800ec34:	b1a0      	cbz	r0, 800ec60 <_strtod_l+0xb60>
 800ec36:	4649      	mov	r1, r9
 800ec38:	4640      	mov	r0, r8
 800ec3a:	f7f1 ffe5 	bl	8000c08 <__aeabi_d2uiz>
 800ec3e:	2801      	cmp	r0, #1
 800ec40:	bf38      	it	cc
 800ec42:	2001      	movcc	r0, #1
 800ec44:	f7f1 fc8e 	bl	8000564 <__aeabi_ui2d>
 800ec48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec4a:	4680      	mov	r8, r0
 800ec4c:	4689      	mov	r9, r1
 800ec4e:	bb23      	cbnz	r3, 800ec9a <_strtod_l+0xb9a>
 800ec50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec54:	9010      	str	r0, [sp, #64]	; 0x40
 800ec56:	9311      	str	r3, [sp, #68]	; 0x44
 800ec58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ec5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ec60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ec68:	1a9b      	subs	r3, r3, r2
 800ec6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ec70:	eeb0 0a48 	vmov.f32	s0, s16
 800ec74:	eef0 0a68 	vmov.f32	s1, s17
 800ec78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ec7c:	f001 fdce 	bl	801081c <__ulp>
 800ec80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ec84:	ec53 2b10 	vmov	r2, r3, d0
 800ec88:	f7f1 fce6 	bl	8000658 <__aeabi_dmul>
 800ec8c:	ec53 2b18 	vmov	r2, r3, d8
 800ec90:	f7f1 fb2c 	bl	80002ec <__adddf3>
 800ec94:	4682      	mov	sl, r0
 800ec96:	468b      	mov	fp, r1
 800ec98:	e78d      	b.n	800ebb6 <_strtod_l+0xab6>
 800ec9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ec9e:	e7db      	b.n	800ec58 <_strtod_l+0xb58>
 800eca0:	a311      	add	r3, pc, #68	; (adr r3, 800ece8 <_strtod_l+0xbe8>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	f7f1 ff49 	bl	8000b3c <__aeabi_dcmplt>
 800ecaa:	e7b2      	b.n	800ec12 <_strtod_l+0xb12>
 800ecac:	2300      	movs	r3, #0
 800ecae:	930a      	str	r3, [sp, #40]	; 0x28
 800ecb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ecb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecb4:	6013      	str	r3, [r2, #0]
 800ecb6:	f7ff ba6b 	b.w	800e190 <_strtod_l+0x90>
 800ecba:	2a65      	cmp	r2, #101	; 0x65
 800ecbc:	f43f ab5f 	beq.w	800e37e <_strtod_l+0x27e>
 800ecc0:	2a45      	cmp	r2, #69	; 0x45
 800ecc2:	f43f ab5c 	beq.w	800e37e <_strtod_l+0x27e>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	f7ff bb94 	b.w	800e3f4 <_strtod_l+0x2f4>
 800eccc:	f3af 8000 	nop.w
 800ecd0:	94a03595 	.word	0x94a03595
 800ecd4:	3fdfffff 	.word	0x3fdfffff
 800ecd8:	35afe535 	.word	0x35afe535
 800ecdc:	3fe00000 	.word	0x3fe00000
 800ece0:	ffc00000 	.word	0xffc00000
 800ece4:	41dfffff 	.word	0x41dfffff
 800ece8:	94a03595 	.word	0x94a03595
 800ecec:	3fcfffff 	.word	0x3fcfffff
 800ecf0:	3ff00000 	.word	0x3ff00000
 800ecf4:	7ff00000 	.word	0x7ff00000
 800ecf8:	7fe00000 	.word	0x7fe00000
 800ecfc:	7c9fffff 	.word	0x7c9fffff
 800ed00:	3fe00000 	.word	0x3fe00000
 800ed04:	bff00000 	.word	0xbff00000
 800ed08:	7fefffff 	.word	0x7fefffff

0800ed0c <strtod>:
 800ed0c:	460a      	mov	r2, r1
 800ed0e:	4601      	mov	r1, r0
 800ed10:	4802      	ldr	r0, [pc, #8]	; (800ed1c <strtod+0x10>)
 800ed12:	4b03      	ldr	r3, [pc, #12]	; (800ed20 <strtod+0x14>)
 800ed14:	6800      	ldr	r0, [r0, #0]
 800ed16:	f7ff b9f3 	b.w	800e100 <_strtod_l>
 800ed1a:	bf00      	nop
 800ed1c:	20000134 	.word	0x20000134
 800ed20:	2000019c 	.word	0x2000019c

0800ed24 <quorem>:
 800ed24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed28:	6903      	ldr	r3, [r0, #16]
 800ed2a:	690c      	ldr	r4, [r1, #16]
 800ed2c:	42a3      	cmp	r3, r4
 800ed2e:	4607      	mov	r7, r0
 800ed30:	f2c0 8081 	blt.w	800ee36 <quorem+0x112>
 800ed34:	3c01      	subs	r4, #1
 800ed36:	f101 0814 	add.w	r8, r1, #20
 800ed3a:	f100 0514 	add.w	r5, r0, #20
 800ed3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed42:	9301      	str	r3, [sp, #4]
 800ed44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ed54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed58:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed5c:	d331      	bcc.n	800edc2 <quorem+0x9e>
 800ed5e:	f04f 0e00 	mov.w	lr, #0
 800ed62:	4640      	mov	r0, r8
 800ed64:	46ac      	mov	ip, r5
 800ed66:	46f2      	mov	sl, lr
 800ed68:	f850 2b04 	ldr.w	r2, [r0], #4
 800ed6c:	b293      	uxth	r3, r2
 800ed6e:	fb06 e303 	mla	r3, r6, r3, lr
 800ed72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	ebaa 0303 	sub.w	r3, sl, r3
 800ed7c:	f8dc a000 	ldr.w	sl, [ip]
 800ed80:	0c12      	lsrs	r2, r2, #16
 800ed82:	fa13 f38a 	uxtah	r3, r3, sl
 800ed86:	fb06 e202 	mla	r2, r6, r2, lr
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	9b00      	ldr	r3, [sp, #0]
 800ed8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ed92:	b292      	uxth	r2, r2
 800ed94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ed98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed9c:	f8bd 3000 	ldrh.w	r3, [sp]
 800eda0:	4581      	cmp	r9, r0
 800eda2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eda6:	f84c 3b04 	str.w	r3, [ip], #4
 800edaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800edae:	d2db      	bcs.n	800ed68 <quorem+0x44>
 800edb0:	f855 300b 	ldr.w	r3, [r5, fp]
 800edb4:	b92b      	cbnz	r3, 800edc2 <quorem+0x9e>
 800edb6:	9b01      	ldr	r3, [sp, #4]
 800edb8:	3b04      	subs	r3, #4
 800edba:	429d      	cmp	r5, r3
 800edbc:	461a      	mov	r2, r3
 800edbe:	d32e      	bcc.n	800ee1e <quorem+0xfa>
 800edc0:	613c      	str	r4, [r7, #16]
 800edc2:	4638      	mov	r0, r7
 800edc4:	f001 fc84 	bl	80106d0 <__mcmp>
 800edc8:	2800      	cmp	r0, #0
 800edca:	db24      	blt.n	800ee16 <quorem+0xf2>
 800edcc:	3601      	adds	r6, #1
 800edce:	4628      	mov	r0, r5
 800edd0:	f04f 0c00 	mov.w	ip, #0
 800edd4:	f858 2b04 	ldr.w	r2, [r8], #4
 800edd8:	f8d0 e000 	ldr.w	lr, [r0]
 800eddc:	b293      	uxth	r3, r2
 800edde:	ebac 0303 	sub.w	r3, ip, r3
 800ede2:	0c12      	lsrs	r2, r2, #16
 800ede4:	fa13 f38e 	uxtah	r3, r3, lr
 800ede8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800edec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edf6:	45c1      	cmp	r9, r8
 800edf8:	f840 3b04 	str.w	r3, [r0], #4
 800edfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ee00:	d2e8      	bcs.n	800edd4 <quorem+0xb0>
 800ee02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee0a:	b922      	cbnz	r2, 800ee16 <quorem+0xf2>
 800ee0c:	3b04      	subs	r3, #4
 800ee0e:	429d      	cmp	r5, r3
 800ee10:	461a      	mov	r2, r3
 800ee12:	d30a      	bcc.n	800ee2a <quorem+0x106>
 800ee14:	613c      	str	r4, [r7, #16]
 800ee16:	4630      	mov	r0, r6
 800ee18:	b003      	add	sp, #12
 800ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1e:	6812      	ldr	r2, [r2, #0]
 800ee20:	3b04      	subs	r3, #4
 800ee22:	2a00      	cmp	r2, #0
 800ee24:	d1cc      	bne.n	800edc0 <quorem+0x9c>
 800ee26:	3c01      	subs	r4, #1
 800ee28:	e7c7      	b.n	800edba <quorem+0x96>
 800ee2a:	6812      	ldr	r2, [r2, #0]
 800ee2c:	3b04      	subs	r3, #4
 800ee2e:	2a00      	cmp	r2, #0
 800ee30:	d1f0      	bne.n	800ee14 <quorem+0xf0>
 800ee32:	3c01      	subs	r4, #1
 800ee34:	e7eb      	b.n	800ee0e <quorem+0xea>
 800ee36:	2000      	movs	r0, #0
 800ee38:	e7ee      	b.n	800ee18 <quorem+0xf4>
 800ee3a:	0000      	movs	r0, r0
 800ee3c:	0000      	movs	r0, r0
	...

0800ee40 <_dtoa_r>:
 800ee40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee44:	ed2d 8b04 	vpush	{d8-d9}
 800ee48:	ec57 6b10 	vmov	r6, r7, d0
 800ee4c:	b093      	sub	sp, #76	; 0x4c
 800ee4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ee50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ee54:	9106      	str	r1, [sp, #24]
 800ee56:	ee10 aa10 	vmov	sl, s0
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ee5e:	930c      	str	r3, [sp, #48]	; 0x30
 800ee60:	46bb      	mov	fp, r7
 800ee62:	b975      	cbnz	r5, 800ee82 <_dtoa_r+0x42>
 800ee64:	2010      	movs	r0, #16
 800ee66:	f001 f94d 	bl	8010104 <malloc>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	6260      	str	r0, [r4, #36]	; 0x24
 800ee6e:	b920      	cbnz	r0, 800ee7a <_dtoa_r+0x3a>
 800ee70:	4ba7      	ldr	r3, [pc, #668]	; (800f110 <_dtoa_r+0x2d0>)
 800ee72:	21ea      	movs	r1, #234	; 0xea
 800ee74:	48a7      	ldr	r0, [pc, #668]	; (800f114 <_dtoa_r+0x2d4>)
 800ee76:	f002 f8ad 	bl	8010fd4 <__assert_func>
 800ee7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ee7e:	6005      	str	r5, [r0, #0]
 800ee80:	60c5      	str	r5, [r0, #12]
 800ee82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee84:	6819      	ldr	r1, [r3, #0]
 800ee86:	b151      	cbz	r1, 800ee9e <_dtoa_r+0x5e>
 800ee88:	685a      	ldr	r2, [r3, #4]
 800ee8a:	604a      	str	r2, [r1, #4]
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	4093      	lsls	r3, r2
 800ee90:	608b      	str	r3, [r1, #8]
 800ee92:	4620      	mov	r0, r4
 800ee94:	f001 f990 	bl	80101b8 <_Bfree>
 800ee98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	601a      	str	r2, [r3, #0]
 800ee9e:	1e3b      	subs	r3, r7, #0
 800eea0:	bfaa      	itet	ge
 800eea2:	2300      	movge	r3, #0
 800eea4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800eea8:	f8c8 3000 	strge.w	r3, [r8]
 800eeac:	4b9a      	ldr	r3, [pc, #616]	; (800f118 <_dtoa_r+0x2d8>)
 800eeae:	bfbc      	itt	lt
 800eeb0:	2201      	movlt	r2, #1
 800eeb2:	f8c8 2000 	strlt.w	r2, [r8]
 800eeb6:	ea33 030b 	bics.w	r3, r3, fp
 800eeba:	d11b      	bne.n	800eef4 <_dtoa_r+0xb4>
 800eebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eebe:	f242 730f 	movw	r3, #9999	; 0x270f
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eec8:	4333      	orrs	r3, r6
 800eeca:	f000 8592 	beq.w	800f9f2 <_dtoa_r+0xbb2>
 800eece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eed0:	b963      	cbnz	r3, 800eeec <_dtoa_r+0xac>
 800eed2:	4b92      	ldr	r3, [pc, #584]	; (800f11c <_dtoa_r+0x2dc>)
 800eed4:	e022      	b.n	800ef1c <_dtoa_r+0xdc>
 800eed6:	4b92      	ldr	r3, [pc, #584]	; (800f120 <_dtoa_r+0x2e0>)
 800eed8:	9301      	str	r3, [sp, #4]
 800eeda:	3308      	adds	r3, #8
 800eedc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eede:	6013      	str	r3, [r2, #0]
 800eee0:	9801      	ldr	r0, [sp, #4]
 800eee2:	b013      	add	sp, #76	; 0x4c
 800eee4:	ecbd 8b04 	vpop	{d8-d9}
 800eee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeec:	4b8b      	ldr	r3, [pc, #556]	; (800f11c <_dtoa_r+0x2dc>)
 800eeee:	9301      	str	r3, [sp, #4]
 800eef0:	3303      	adds	r3, #3
 800eef2:	e7f3      	b.n	800eedc <_dtoa_r+0x9c>
 800eef4:	2200      	movs	r2, #0
 800eef6:	2300      	movs	r3, #0
 800eef8:	4650      	mov	r0, sl
 800eefa:	4659      	mov	r1, fp
 800eefc:	f7f1 fe14 	bl	8000b28 <__aeabi_dcmpeq>
 800ef00:	ec4b ab19 	vmov	d9, sl, fp
 800ef04:	4680      	mov	r8, r0
 800ef06:	b158      	cbz	r0, 800ef20 <_dtoa_r+0xe0>
 800ef08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	6013      	str	r3, [r2, #0]
 800ef0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f000 856b 	beq.w	800f9ec <_dtoa_r+0xbac>
 800ef16:	4883      	ldr	r0, [pc, #524]	; (800f124 <_dtoa_r+0x2e4>)
 800ef18:	6018      	str	r0, [r3, #0]
 800ef1a:	1e43      	subs	r3, r0, #1
 800ef1c:	9301      	str	r3, [sp, #4]
 800ef1e:	e7df      	b.n	800eee0 <_dtoa_r+0xa0>
 800ef20:	ec4b ab10 	vmov	d0, sl, fp
 800ef24:	aa10      	add	r2, sp, #64	; 0x40
 800ef26:	a911      	add	r1, sp, #68	; 0x44
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f001 fcf3 	bl	8010914 <__d2b>
 800ef2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ef32:	ee08 0a10 	vmov	s16, r0
 800ef36:	2d00      	cmp	r5, #0
 800ef38:	f000 8084 	beq.w	800f044 <_dtoa_r+0x204>
 800ef3c:	ee19 3a90 	vmov	r3, s19
 800ef40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ef48:	4656      	mov	r6, sl
 800ef4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ef4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ef52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ef56:	4b74      	ldr	r3, [pc, #464]	; (800f128 <_dtoa_r+0x2e8>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	4639      	mov	r1, r7
 800ef5e:	f7f1 f9c3 	bl	80002e8 <__aeabi_dsub>
 800ef62:	a365      	add	r3, pc, #404	; (adr r3, 800f0f8 <_dtoa_r+0x2b8>)
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	f7f1 fb76 	bl	8000658 <__aeabi_dmul>
 800ef6c:	a364      	add	r3, pc, #400	; (adr r3, 800f100 <_dtoa_r+0x2c0>)
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	f7f1 f9bb 	bl	80002ec <__adddf3>
 800ef76:	4606      	mov	r6, r0
 800ef78:	4628      	mov	r0, r5
 800ef7a:	460f      	mov	r7, r1
 800ef7c:	f7f1 fb02 	bl	8000584 <__aeabi_i2d>
 800ef80:	a361      	add	r3, pc, #388	; (adr r3, 800f108 <_dtoa_r+0x2c8>)
 800ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef86:	f7f1 fb67 	bl	8000658 <__aeabi_dmul>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	4630      	mov	r0, r6
 800ef90:	4639      	mov	r1, r7
 800ef92:	f7f1 f9ab 	bl	80002ec <__adddf3>
 800ef96:	4606      	mov	r6, r0
 800ef98:	460f      	mov	r7, r1
 800ef9a:	f7f1 fe0d 	bl	8000bb8 <__aeabi_d2iz>
 800ef9e:	2200      	movs	r2, #0
 800efa0:	9000      	str	r0, [sp, #0]
 800efa2:	2300      	movs	r3, #0
 800efa4:	4630      	mov	r0, r6
 800efa6:	4639      	mov	r1, r7
 800efa8:	f7f1 fdc8 	bl	8000b3c <__aeabi_dcmplt>
 800efac:	b150      	cbz	r0, 800efc4 <_dtoa_r+0x184>
 800efae:	9800      	ldr	r0, [sp, #0]
 800efb0:	f7f1 fae8 	bl	8000584 <__aeabi_i2d>
 800efb4:	4632      	mov	r2, r6
 800efb6:	463b      	mov	r3, r7
 800efb8:	f7f1 fdb6 	bl	8000b28 <__aeabi_dcmpeq>
 800efbc:	b910      	cbnz	r0, 800efc4 <_dtoa_r+0x184>
 800efbe:	9b00      	ldr	r3, [sp, #0]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	9b00      	ldr	r3, [sp, #0]
 800efc6:	2b16      	cmp	r3, #22
 800efc8:	d85a      	bhi.n	800f080 <_dtoa_r+0x240>
 800efca:	9a00      	ldr	r2, [sp, #0]
 800efcc:	4b57      	ldr	r3, [pc, #348]	; (800f12c <_dtoa_r+0x2ec>)
 800efce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	ec51 0b19 	vmov	r0, r1, d9
 800efda:	f7f1 fdaf 	bl	8000b3c <__aeabi_dcmplt>
 800efde:	2800      	cmp	r0, #0
 800efe0:	d050      	beq.n	800f084 <_dtoa_r+0x244>
 800efe2:	9b00      	ldr	r3, [sp, #0]
 800efe4:	3b01      	subs	r3, #1
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	2300      	movs	r3, #0
 800efea:	930b      	str	r3, [sp, #44]	; 0x2c
 800efec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efee:	1b5d      	subs	r5, r3, r5
 800eff0:	1e6b      	subs	r3, r5, #1
 800eff2:	9305      	str	r3, [sp, #20]
 800eff4:	bf45      	ittet	mi
 800eff6:	f1c5 0301 	rsbmi	r3, r5, #1
 800effa:	9304      	strmi	r3, [sp, #16]
 800effc:	2300      	movpl	r3, #0
 800effe:	2300      	movmi	r3, #0
 800f000:	bf4c      	ite	mi
 800f002:	9305      	strmi	r3, [sp, #20]
 800f004:	9304      	strpl	r3, [sp, #16]
 800f006:	9b00      	ldr	r3, [sp, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	db3d      	blt.n	800f088 <_dtoa_r+0x248>
 800f00c:	9b05      	ldr	r3, [sp, #20]
 800f00e:	9a00      	ldr	r2, [sp, #0]
 800f010:	920a      	str	r2, [sp, #40]	; 0x28
 800f012:	4413      	add	r3, r2
 800f014:	9305      	str	r3, [sp, #20]
 800f016:	2300      	movs	r3, #0
 800f018:	9307      	str	r3, [sp, #28]
 800f01a:	9b06      	ldr	r3, [sp, #24]
 800f01c:	2b09      	cmp	r3, #9
 800f01e:	f200 8089 	bhi.w	800f134 <_dtoa_r+0x2f4>
 800f022:	2b05      	cmp	r3, #5
 800f024:	bfc4      	itt	gt
 800f026:	3b04      	subgt	r3, #4
 800f028:	9306      	strgt	r3, [sp, #24]
 800f02a:	9b06      	ldr	r3, [sp, #24]
 800f02c:	f1a3 0302 	sub.w	r3, r3, #2
 800f030:	bfcc      	ite	gt
 800f032:	2500      	movgt	r5, #0
 800f034:	2501      	movle	r5, #1
 800f036:	2b03      	cmp	r3, #3
 800f038:	f200 8087 	bhi.w	800f14a <_dtoa_r+0x30a>
 800f03c:	e8df f003 	tbb	[pc, r3]
 800f040:	59383a2d 	.word	0x59383a2d
 800f044:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f048:	441d      	add	r5, r3
 800f04a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f04e:	2b20      	cmp	r3, #32
 800f050:	bfc1      	itttt	gt
 800f052:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f056:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f05a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f05e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f062:	bfda      	itte	le
 800f064:	f1c3 0320 	rsble	r3, r3, #32
 800f068:	fa06 f003 	lslle.w	r0, r6, r3
 800f06c:	4318      	orrgt	r0, r3
 800f06e:	f7f1 fa79 	bl	8000564 <__aeabi_ui2d>
 800f072:	2301      	movs	r3, #1
 800f074:	4606      	mov	r6, r0
 800f076:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f07a:	3d01      	subs	r5, #1
 800f07c:	930e      	str	r3, [sp, #56]	; 0x38
 800f07e:	e76a      	b.n	800ef56 <_dtoa_r+0x116>
 800f080:	2301      	movs	r3, #1
 800f082:	e7b2      	b.n	800efea <_dtoa_r+0x1aa>
 800f084:	900b      	str	r0, [sp, #44]	; 0x2c
 800f086:	e7b1      	b.n	800efec <_dtoa_r+0x1ac>
 800f088:	9b04      	ldr	r3, [sp, #16]
 800f08a:	9a00      	ldr	r2, [sp, #0]
 800f08c:	1a9b      	subs	r3, r3, r2
 800f08e:	9304      	str	r3, [sp, #16]
 800f090:	4253      	negs	r3, r2
 800f092:	9307      	str	r3, [sp, #28]
 800f094:	2300      	movs	r3, #0
 800f096:	930a      	str	r3, [sp, #40]	; 0x28
 800f098:	e7bf      	b.n	800f01a <_dtoa_r+0x1da>
 800f09a:	2300      	movs	r3, #0
 800f09c:	9308      	str	r3, [sp, #32]
 800f09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	dc55      	bgt.n	800f150 <_dtoa_r+0x310>
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	9209      	str	r2, [sp, #36]	; 0x24
 800f0ae:	e00c      	b.n	800f0ca <_dtoa_r+0x28a>
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e7f3      	b.n	800f09c <_dtoa_r+0x25c>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0b8:	9308      	str	r3, [sp, #32]
 800f0ba:	9b00      	ldr	r3, [sp, #0]
 800f0bc:	4413      	add	r3, r2
 800f0be:	9302      	str	r3, [sp, #8]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	9303      	str	r3, [sp, #12]
 800f0c6:	bfb8      	it	lt
 800f0c8:	2301      	movlt	r3, #1
 800f0ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	6042      	str	r2, [r0, #4]
 800f0d0:	2204      	movs	r2, #4
 800f0d2:	f102 0614 	add.w	r6, r2, #20
 800f0d6:	429e      	cmp	r6, r3
 800f0d8:	6841      	ldr	r1, [r0, #4]
 800f0da:	d93d      	bls.n	800f158 <_dtoa_r+0x318>
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f001 f82b 	bl	8010138 <_Balloc>
 800f0e2:	9001      	str	r0, [sp, #4]
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d13b      	bne.n	800f160 <_dtoa_r+0x320>
 800f0e8:	4b11      	ldr	r3, [pc, #68]	; (800f130 <_dtoa_r+0x2f0>)
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f0f0:	e6c0      	b.n	800ee74 <_dtoa_r+0x34>
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	e7df      	b.n	800f0b6 <_dtoa_r+0x276>
 800f0f6:	bf00      	nop
 800f0f8:	636f4361 	.word	0x636f4361
 800f0fc:	3fd287a7 	.word	0x3fd287a7
 800f100:	8b60c8b3 	.word	0x8b60c8b3
 800f104:	3fc68a28 	.word	0x3fc68a28
 800f108:	509f79fb 	.word	0x509f79fb
 800f10c:	3fd34413 	.word	0x3fd34413
 800f110:	0801333d 	.word	0x0801333d
 800f114:	08013354 	.word	0x08013354
 800f118:	7ff00000 	.word	0x7ff00000
 800f11c:	08013339 	.word	0x08013339
 800f120:	08013330 	.word	0x08013330
 800f124:	080132bd 	.word	0x080132bd
 800f128:	3ff80000 	.word	0x3ff80000
 800f12c:	080134c0 	.word	0x080134c0
 800f130:	080133af 	.word	0x080133af
 800f134:	2501      	movs	r5, #1
 800f136:	2300      	movs	r3, #0
 800f138:	9306      	str	r3, [sp, #24]
 800f13a:	9508      	str	r5, [sp, #32]
 800f13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f140:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f144:	2200      	movs	r2, #0
 800f146:	2312      	movs	r3, #18
 800f148:	e7b0      	b.n	800f0ac <_dtoa_r+0x26c>
 800f14a:	2301      	movs	r3, #1
 800f14c:	9308      	str	r3, [sp, #32]
 800f14e:	e7f5      	b.n	800f13c <_dtoa_r+0x2fc>
 800f150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f152:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f156:	e7b8      	b.n	800f0ca <_dtoa_r+0x28a>
 800f158:	3101      	adds	r1, #1
 800f15a:	6041      	str	r1, [r0, #4]
 800f15c:	0052      	lsls	r2, r2, #1
 800f15e:	e7b8      	b.n	800f0d2 <_dtoa_r+0x292>
 800f160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f162:	9a01      	ldr	r2, [sp, #4]
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	9b03      	ldr	r3, [sp, #12]
 800f168:	2b0e      	cmp	r3, #14
 800f16a:	f200 809d 	bhi.w	800f2a8 <_dtoa_r+0x468>
 800f16e:	2d00      	cmp	r5, #0
 800f170:	f000 809a 	beq.w	800f2a8 <_dtoa_r+0x468>
 800f174:	9b00      	ldr	r3, [sp, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	dd32      	ble.n	800f1e0 <_dtoa_r+0x3a0>
 800f17a:	4ab7      	ldr	r2, [pc, #732]	; (800f458 <_dtoa_r+0x618>)
 800f17c:	f003 030f 	and.w	r3, r3, #15
 800f180:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f184:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f188:	9b00      	ldr	r3, [sp, #0]
 800f18a:	05d8      	lsls	r0, r3, #23
 800f18c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f190:	d516      	bpl.n	800f1c0 <_dtoa_r+0x380>
 800f192:	4bb2      	ldr	r3, [pc, #712]	; (800f45c <_dtoa_r+0x61c>)
 800f194:	ec51 0b19 	vmov	r0, r1, d9
 800f198:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f19c:	f7f1 fb86 	bl	80008ac <__aeabi_ddiv>
 800f1a0:	f007 070f 	and.w	r7, r7, #15
 800f1a4:	4682      	mov	sl, r0
 800f1a6:	468b      	mov	fp, r1
 800f1a8:	2503      	movs	r5, #3
 800f1aa:	4eac      	ldr	r6, [pc, #688]	; (800f45c <_dtoa_r+0x61c>)
 800f1ac:	b957      	cbnz	r7, 800f1c4 <_dtoa_r+0x384>
 800f1ae:	4642      	mov	r2, r8
 800f1b0:	464b      	mov	r3, r9
 800f1b2:	4650      	mov	r0, sl
 800f1b4:	4659      	mov	r1, fp
 800f1b6:	f7f1 fb79 	bl	80008ac <__aeabi_ddiv>
 800f1ba:	4682      	mov	sl, r0
 800f1bc:	468b      	mov	fp, r1
 800f1be:	e028      	b.n	800f212 <_dtoa_r+0x3d2>
 800f1c0:	2502      	movs	r5, #2
 800f1c2:	e7f2      	b.n	800f1aa <_dtoa_r+0x36a>
 800f1c4:	07f9      	lsls	r1, r7, #31
 800f1c6:	d508      	bpl.n	800f1da <_dtoa_r+0x39a>
 800f1c8:	4640      	mov	r0, r8
 800f1ca:	4649      	mov	r1, r9
 800f1cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f1d0:	f7f1 fa42 	bl	8000658 <__aeabi_dmul>
 800f1d4:	3501      	adds	r5, #1
 800f1d6:	4680      	mov	r8, r0
 800f1d8:	4689      	mov	r9, r1
 800f1da:	107f      	asrs	r7, r7, #1
 800f1dc:	3608      	adds	r6, #8
 800f1de:	e7e5      	b.n	800f1ac <_dtoa_r+0x36c>
 800f1e0:	f000 809b 	beq.w	800f31a <_dtoa_r+0x4da>
 800f1e4:	9b00      	ldr	r3, [sp, #0]
 800f1e6:	4f9d      	ldr	r7, [pc, #628]	; (800f45c <_dtoa_r+0x61c>)
 800f1e8:	425e      	negs	r6, r3
 800f1ea:	4b9b      	ldr	r3, [pc, #620]	; (800f458 <_dtoa_r+0x618>)
 800f1ec:	f006 020f 	and.w	r2, r6, #15
 800f1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	ec51 0b19 	vmov	r0, r1, d9
 800f1fc:	f7f1 fa2c 	bl	8000658 <__aeabi_dmul>
 800f200:	1136      	asrs	r6, r6, #4
 800f202:	4682      	mov	sl, r0
 800f204:	468b      	mov	fp, r1
 800f206:	2300      	movs	r3, #0
 800f208:	2502      	movs	r5, #2
 800f20a:	2e00      	cmp	r6, #0
 800f20c:	d17a      	bne.n	800f304 <_dtoa_r+0x4c4>
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d1d3      	bne.n	800f1ba <_dtoa_r+0x37a>
 800f212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f214:	2b00      	cmp	r3, #0
 800f216:	f000 8082 	beq.w	800f31e <_dtoa_r+0x4de>
 800f21a:	4b91      	ldr	r3, [pc, #580]	; (800f460 <_dtoa_r+0x620>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	4650      	mov	r0, sl
 800f220:	4659      	mov	r1, fp
 800f222:	f7f1 fc8b 	bl	8000b3c <__aeabi_dcmplt>
 800f226:	2800      	cmp	r0, #0
 800f228:	d079      	beq.n	800f31e <_dtoa_r+0x4de>
 800f22a:	9b03      	ldr	r3, [sp, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d076      	beq.n	800f31e <_dtoa_r+0x4de>
 800f230:	9b02      	ldr	r3, [sp, #8]
 800f232:	2b00      	cmp	r3, #0
 800f234:	dd36      	ble.n	800f2a4 <_dtoa_r+0x464>
 800f236:	9b00      	ldr	r3, [sp, #0]
 800f238:	4650      	mov	r0, sl
 800f23a:	4659      	mov	r1, fp
 800f23c:	1e5f      	subs	r7, r3, #1
 800f23e:	2200      	movs	r2, #0
 800f240:	4b88      	ldr	r3, [pc, #544]	; (800f464 <_dtoa_r+0x624>)
 800f242:	f7f1 fa09 	bl	8000658 <__aeabi_dmul>
 800f246:	9e02      	ldr	r6, [sp, #8]
 800f248:	4682      	mov	sl, r0
 800f24a:	468b      	mov	fp, r1
 800f24c:	3501      	adds	r5, #1
 800f24e:	4628      	mov	r0, r5
 800f250:	f7f1 f998 	bl	8000584 <__aeabi_i2d>
 800f254:	4652      	mov	r2, sl
 800f256:	465b      	mov	r3, fp
 800f258:	f7f1 f9fe 	bl	8000658 <__aeabi_dmul>
 800f25c:	4b82      	ldr	r3, [pc, #520]	; (800f468 <_dtoa_r+0x628>)
 800f25e:	2200      	movs	r2, #0
 800f260:	f7f1 f844 	bl	80002ec <__adddf3>
 800f264:	46d0      	mov	r8, sl
 800f266:	46d9      	mov	r9, fp
 800f268:	4682      	mov	sl, r0
 800f26a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f26e:	2e00      	cmp	r6, #0
 800f270:	d158      	bne.n	800f324 <_dtoa_r+0x4e4>
 800f272:	4b7e      	ldr	r3, [pc, #504]	; (800f46c <_dtoa_r+0x62c>)
 800f274:	2200      	movs	r2, #0
 800f276:	4640      	mov	r0, r8
 800f278:	4649      	mov	r1, r9
 800f27a:	f7f1 f835 	bl	80002e8 <__aeabi_dsub>
 800f27e:	4652      	mov	r2, sl
 800f280:	465b      	mov	r3, fp
 800f282:	4680      	mov	r8, r0
 800f284:	4689      	mov	r9, r1
 800f286:	f7f1 fc77 	bl	8000b78 <__aeabi_dcmpgt>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	f040 8295 	bne.w	800f7ba <_dtoa_r+0x97a>
 800f290:	4652      	mov	r2, sl
 800f292:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f296:	4640      	mov	r0, r8
 800f298:	4649      	mov	r1, r9
 800f29a:	f7f1 fc4f 	bl	8000b3c <__aeabi_dcmplt>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	f040 8289 	bne.w	800f7b6 <_dtoa_r+0x976>
 800f2a4:	ec5b ab19 	vmov	sl, fp, d9
 800f2a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f2c0 8148 	blt.w	800f540 <_dtoa_r+0x700>
 800f2b0:	9a00      	ldr	r2, [sp, #0]
 800f2b2:	2a0e      	cmp	r2, #14
 800f2b4:	f300 8144 	bgt.w	800f540 <_dtoa_r+0x700>
 800f2b8:	4b67      	ldr	r3, [pc, #412]	; (800f458 <_dtoa_r+0x618>)
 800f2ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	f280 80d5 	bge.w	800f474 <_dtoa_r+0x634>
 800f2ca:	9b03      	ldr	r3, [sp, #12]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f300 80d1 	bgt.w	800f474 <_dtoa_r+0x634>
 800f2d2:	f040 826f 	bne.w	800f7b4 <_dtoa_r+0x974>
 800f2d6:	4b65      	ldr	r3, [pc, #404]	; (800f46c <_dtoa_r+0x62c>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	4640      	mov	r0, r8
 800f2dc:	4649      	mov	r1, r9
 800f2de:	f7f1 f9bb 	bl	8000658 <__aeabi_dmul>
 800f2e2:	4652      	mov	r2, sl
 800f2e4:	465b      	mov	r3, fp
 800f2e6:	f7f1 fc3d 	bl	8000b64 <__aeabi_dcmpge>
 800f2ea:	9e03      	ldr	r6, [sp, #12]
 800f2ec:	4637      	mov	r7, r6
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f040 8245 	bne.w	800f77e <_dtoa_r+0x93e>
 800f2f4:	9d01      	ldr	r5, [sp, #4]
 800f2f6:	2331      	movs	r3, #49	; 0x31
 800f2f8:	f805 3b01 	strb.w	r3, [r5], #1
 800f2fc:	9b00      	ldr	r3, [sp, #0]
 800f2fe:	3301      	adds	r3, #1
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	e240      	b.n	800f786 <_dtoa_r+0x946>
 800f304:	07f2      	lsls	r2, r6, #31
 800f306:	d505      	bpl.n	800f314 <_dtoa_r+0x4d4>
 800f308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f30c:	f7f1 f9a4 	bl	8000658 <__aeabi_dmul>
 800f310:	3501      	adds	r5, #1
 800f312:	2301      	movs	r3, #1
 800f314:	1076      	asrs	r6, r6, #1
 800f316:	3708      	adds	r7, #8
 800f318:	e777      	b.n	800f20a <_dtoa_r+0x3ca>
 800f31a:	2502      	movs	r5, #2
 800f31c:	e779      	b.n	800f212 <_dtoa_r+0x3d2>
 800f31e:	9f00      	ldr	r7, [sp, #0]
 800f320:	9e03      	ldr	r6, [sp, #12]
 800f322:	e794      	b.n	800f24e <_dtoa_r+0x40e>
 800f324:	9901      	ldr	r1, [sp, #4]
 800f326:	4b4c      	ldr	r3, [pc, #304]	; (800f458 <_dtoa_r+0x618>)
 800f328:	4431      	add	r1, r6
 800f32a:	910d      	str	r1, [sp, #52]	; 0x34
 800f32c:	9908      	ldr	r1, [sp, #32]
 800f32e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f332:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f336:	2900      	cmp	r1, #0
 800f338:	d043      	beq.n	800f3c2 <_dtoa_r+0x582>
 800f33a:	494d      	ldr	r1, [pc, #308]	; (800f470 <_dtoa_r+0x630>)
 800f33c:	2000      	movs	r0, #0
 800f33e:	f7f1 fab5 	bl	80008ac <__aeabi_ddiv>
 800f342:	4652      	mov	r2, sl
 800f344:	465b      	mov	r3, fp
 800f346:	f7f0 ffcf 	bl	80002e8 <__aeabi_dsub>
 800f34a:	9d01      	ldr	r5, [sp, #4]
 800f34c:	4682      	mov	sl, r0
 800f34e:	468b      	mov	fp, r1
 800f350:	4649      	mov	r1, r9
 800f352:	4640      	mov	r0, r8
 800f354:	f7f1 fc30 	bl	8000bb8 <__aeabi_d2iz>
 800f358:	4606      	mov	r6, r0
 800f35a:	f7f1 f913 	bl	8000584 <__aeabi_i2d>
 800f35e:	4602      	mov	r2, r0
 800f360:	460b      	mov	r3, r1
 800f362:	4640      	mov	r0, r8
 800f364:	4649      	mov	r1, r9
 800f366:	f7f0 ffbf 	bl	80002e8 <__aeabi_dsub>
 800f36a:	3630      	adds	r6, #48	; 0x30
 800f36c:	f805 6b01 	strb.w	r6, [r5], #1
 800f370:	4652      	mov	r2, sl
 800f372:	465b      	mov	r3, fp
 800f374:	4680      	mov	r8, r0
 800f376:	4689      	mov	r9, r1
 800f378:	f7f1 fbe0 	bl	8000b3c <__aeabi_dcmplt>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d163      	bne.n	800f448 <_dtoa_r+0x608>
 800f380:	4642      	mov	r2, r8
 800f382:	464b      	mov	r3, r9
 800f384:	4936      	ldr	r1, [pc, #216]	; (800f460 <_dtoa_r+0x620>)
 800f386:	2000      	movs	r0, #0
 800f388:	f7f0 ffae 	bl	80002e8 <__aeabi_dsub>
 800f38c:	4652      	mov	r2, sl
 800f38e:	465b      	mov	r3, fp
 800f390:	f7f1 fbd4 	bl	8000b3c <__aeabi_dcmplt>
 800f394:	2800      	cmp	r0, #0
 800f396:	f040 80b5 	bne.w	800f504 <_dtoa_r+0x6c4>
 800f39a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f39c:	429d      	cmp	r5, r3
 800f39e:	d081      	beq.n	800f2a4 <_dtoa_r+0x464>
 800f3a0:	4b30      	ldr	r3, [pc, #192]	; (800f464 <_dtoa_r+0x624>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	4650      	mov	r0, sl
 800f3a6:	4659      	mov	r1, fp
 800f3a8:	f7f1 f956 	bl	8000658 <__aeabi_dmul>
 800f3ac:	4b2d      	ldr	r3, [pc, #180]	; (800f464 <_dtoa_r+0x624>)
 800f3ae:	4682      	mov	sl, r0
 800f3b0:	468b      	mov	fp, r1
 800f3b2:	4640      	mov	r0, r8
 800f3b4:	4649      	mov	r1, r9
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f7f1 f94e 	bl	8000658 <__aeabi_dmul>
 800f3bc:	4680      	mov	r8, r0
 800f3be:	4689      	mov	r9, r1
 800f3c0:	e7c6      	b.n	800f350 <_dtoa_r+0x510>
 800f3c2:	4650      	mov	r0, sl
 800f3c4:	4659      	mov	r1, fp
 800f3c6:	f7f1 f947 	bl	8000658 <__aeabi_dmul>
 800f3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3cc:	9d01      	ldr	r5, [sp, #4]
 800f3ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3d0:	4682      	mov	sl, r0
 800f3d2:	468b      	mov	fp, r1
 800f3d4:	4649      	mov	r1, r9
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	f7f1 fbee 	bl	8000bb8 <__aeabi_d2iz>
 800f3dc:	4606      	mov	r6, r0
 800f3de:	f7f1 f8d1 	bl	8000584 <__aeabi_i2d>
 800f3e2:	3630      	adds	r6, #48	; 0x30
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	4640      	mov	r0, r8
 800f3ea:	4649      	mov	r1, r9
 800f3ec:	f7f0 ff7c 	bl	80002e8 <__aeabi_dsub>
 800f3f0:	f805 6b01 	strb.w	r6, [r5], #1
 800f3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3f6:	429d      	cmp	r5, r3
 800f3f8:	4680      	mov	r8, r0
 800f3fa:	4689      	mov	r9, r1
 800f3fc:	f04f 0200 	mov.w	r2, #0
 800f400:	d124      	bne.n	800f44c <_dtoa_r+0x60c>
 800f402:	4b1b      	ldr	r3, [pc, #108]	; (800f470 <_dtoa_r+0x630>)
 800f404:	4650      	mov	r0, sl
 800f406:	4659      	mov	r1, fp
 800f408:	f7f0 ff70 	bl	80002ec <__adddf3>
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	4640      	mov	r0, r8
 800f412:	4649      	mov	r1, r9
 800f414:	f7f1 fbb0 	bl	8000b78 <__aeabi_dcmpgt>
 800f418:	2800      	cmp	r0, #0
 800f41a:	d173      	bne.n	800f504 <_dtoa_r+0x6c4>
 800f41c:	4652      	mov	r2, sl
 800f41e:	465b      	mov	r3, fp
 800f420:	4913      	ldr	r1, [pc, #76]	; (800f470 <_dtoa_r+0x630>)
 800f422:	2000      	movs	r0, #0
 800f424:	f7f0 ff60 	bl	80002e8 <__aeabi_dsub>
 800f428:	4602      	mov	r2, r0
 800f42a:	460b      	mov	r3, r1
 800f42c:	4640      	mov	r0, r8
 800f42e:	4649      	mov	r1, r9
 800f430:	f7f1 fb84 	bl	8000b3c <__aeabi_dcmplt>
 800f434:	2800      	cmp	r0, #0
 800f436:	f43f af35 	beq.w	800f2a4 <_dtoa_r+0x464>
 800f43a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f43c:	1e6b      	subs	r3, r5, #1
 800f43e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f440:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f444:	2b30      	cmp	r3, #48	; 0x30
 800f446:	d0f8      	beq.n	800f43a <_dtoa_r+0x5fa>
 800f448:	9700      	str	r7, [sp, #0]
 800f44a:	e049      	b.n	800f4e0 <_dtoa_r+0x6a0>
 800f44c:	4b05      	ldr	r3, [pc, #20]	; (800f464 <_dtoa_r+0x624>)
 800f44e:	f7f1 f903 	bl	8000658 <__aeabi_dmul>
 800f452:	4680      	mov	r8, r0
 800f454:	4689      	mov	r9, r1
 800f456:	e7bd      	b.n	800f3d4 <_dtoa_r+0x594>
 800f458:	080134c0 	.word	0x080134c0
 800f45c:	08013498 	.word	0x08013498
 800f460:	3ff00000 	.word	0x3ff00000
 800f464:	40240000 	.word	0x40240000
 800f468:	401c0000 	.word	0x401c0000
 800f46c:	40140000 	.word	0x40140000
 800f470:	3fe00000 	.word	0x3fe00000
 800f474:	9d01      	ldr	r5, [sp, #4]
 800f476:	4656      	mov	r6, sl
 800f478:	465f      	mov	r7, fp
 800f47a:	4642      	mov	r2, r8
 800f47c:	464b      	mov	r3, r9
 800f47e:	4630      	mov	r0, r6
 800f480:	4639      	mov	r1, r7
 800f482:	f7f1 fa13 	bl	80008ac <__aeabi_ddiv>
 800f486:	f7f1 fb97 	bl	8000bb8 <__aeabi_d2iz>
 800f48a:	4682      	mov	sl, r0
 800f48c:	f7f1 f87a 	bl	8000584 <__aeabi_i2d>
 800f490:	4642      	mov	r2, r8
 800f492:	464b      	mov	r3, r9
 800f494:	f7f1 f8e0 	bl	8000658 <__aeabi_dmul>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	4630      	mov	r0, r6
 800f49e:	4639      	mov	r1, r7
 800f4a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f4a4:	f7f0 ff20 	bl	80002e8 <__aeabi_dsub>
 800f4a8:	f805 6b01 	strb.w	r6, [r5], #1
 800f4ac:	9e01      	ldr	r6, [sp, #4]
 800f4ae:	9f03      	ldr	r7, [sp, #12]
 800f4b0:	1bae      	subs	r6, r5, r6
 800f4b2:	42b7      	cmp	r7, r6
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	d135      	bne.n	800f526 <_dtoa_r+0x6e6>
 800f4ba:	f7f0 ff17 	bl	80002ec <__adddf3>
 800f4be:	4642      	mov	r2, r8
 800f4c0:	464b      	mov	r3, r9
 800f4c2:	4606      	mov	r6, r0
 800f4c4:	460f      	mov	r7, r1
 800f4c6:	f7f1 fb57 	bl	8000b78 <__aeabi_dcmpgt>
 800f4ca:	b9d0      	cbnz	r0, 800f502 <_dtoa_r+0x6c2>
 800f4cc:	4642      	mov	r2, r8
 800f4ce:	464b      	mov	r3, r9
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	f7f1 fb28 	bl	8000b28 <__aeabi_dcmpeq>
 800f4d8:	b110      	cbz	r0, 800f4e0 <_dtoa_r+0x6a0>
 800f4da:	f01a 0f01 	tst.w	sl, #1
 800f4de:	d110      	bne.n	800f502 <_dtoa_r+0x6c2>
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	ee18 1a10 	vmov	r1, s16
 800f4e6:	f000 fe67 	bl	80101b8 <_Bfree>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	9800      	ldr	r0, [sp, #0]
 800f4ee:	702b      	strb	r3, [r5, #0]
 800f4f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	6018      	str	r0, [r3, #0]
 800f4f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f43f acf1 	beq.w	800eee0 <_dtoa_r+0xa0>
 800f4fe:	601d      	str	r5, [r3, #0]
 800f500:	e4ee      	b.n	800eee0 <_dtoa_r+0xa0>
 800f502:	9f00      	ldr	r7, [sp, #0]
 800f504:	462b      	mov	r3, r5
 800f506:	461d      	mov	r5, r3
 800f508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f50c:	2a39      	cmp	r2, #57	; 0x39
 800f50e:	d106      	bne.n	800f51e <_dtoa_r+0x6de>
 800f510:	9a01      	ldr	r2, [sp, #4]
 800f512:	429a      	cmp	r2, r3
 800f514:	d1f7      	bne.n	800f506 <_dtoa_r+0x6c6>
 800f516:	9901      	ldr	r1, [sp, #4]
 800f518:	2230      	movs	r2, #48	; 0x30
 800f51a:	3701      	adds	r7, #1
 800f51c:	700a      	strb	r2, [r1, #0]
 800f51e:	781a      	ldrb	r2, [r3, #0]
 800f520:	3201      	adds	r2, #1
 800f522:	701a      	strb	r2, [r3, #0]
 800f524:	e790      	b.n	800f448 <_dtoa_r+0x608>
 800f526:	4ba6      	ldr	r3, [pc, #664]	; (800f7c0 <_dtoa_r+0x980>)
 800f528:	2200      	movs	r2, #0
 800f52a:	f7f1 f895 	bl	8000658 <__aeabi_dmul>
 800f52e:	2200      	movs	r2, #0
 800f530:	2300      	movs	r3, #0
 800f532:	4606      	mov	r6, r0
 800f534:	460f      	mov	r7, r1
 800f536:	f7f1 faf7 	bl	8000b28 <__aeabi_dcmpeq>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	d09d      	beq.n	800f47a <_dtoa_r+0x63a>
 800f53e:	e7cf      	b.n	800f4e0 <_dtoa_r+0x6a0>
 800f540:	9a08      	ldr	r2, [sp, #32]
 800f542:	2a00      	cmp	r2, #0
 800f544:	f000 80d7 	beq.w	800f6f6 <_dtoa_r+0x8b6>
 800f548:	9a06      	ldr	r2, [sp, #24]
 800f54a:	2a01      	cmp	r2, #1
 800f54c:	f300 80ba 	bgt.w	800f6c4 <_dtoa_r+0x884>
 800f550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f552:	2a00      	cmp	r2, #0
 800f554:	f000 80b2 	beq.w	800f6bc <_dtoa_r+0x87c>
 800f558:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f55c:	9e07      	ldr	r6, [sp, #28]
 800f55e:	9d04      	ldr	r5, [sp, #16]
 800f560:	9a04      	ldr	r2, [sp, #16]
 800f562:	441a      	add	r2, r3
 800f564:	9204      	str	r2, [sp, #16]
 800f566:	9a05      	ldr	r2, [sp, #20]
 800f568:	2101      	movs	r1, #1
 800f56a:	441a      	add	r2, r3
 800f56c:	4620      	mov	r0, r4
 800f56e:	9205      	str	r2, [sp, #20]
 800f570:	f000 ff24 	bl	80103bc <__i2b>
 800f574:	4607      	mov	r7, r0
 800f576:	2d00      	cmp	r5, #0
 800f578:	dd0c      	ble.n	800f594 <_dtoa_r+0x754>
 800f57a:	9b05      	ldr	r3, [sp, #20]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dd09      	ble.n	800f594 <_dtoa_r+0x754>
 800f580:	42ab      	cmp	r3, r5
 800f582:	9a04      	ldr	r2, [sp, #16]
 800f584:	bfa8      	it	ge
 800f586:	462b      	movge	r3, r5
 800f588:	1ad2      	subs	r2, r2, r3
 800f58a:	9204      	str	r2, [sp, #16]
 800f58c:	9a05      	ldr	r2, [sp, #20]
 800f58e:	1aed      	subs	r5, r5, r3
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	9305      	str	r3, [sp, #20]
 800f594:	9b07      	ldr	r3, [sp, #28]
 800f596:	b31b      	cbz	r3, 800f5e0 <_dtoa_r+0x7a0>
 800f598:	9b08      	ldr	r3, [sp, #32]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f000 80af 	beq.w	800f6fe <_dtoa_r+0x8be>
 800f5a0:	2e00      	cmp	r6, #0
 800f5a2:	dd13      	ble.n	800f5cc <_dtoa_r+0x78c>
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	4632      	mov	r2, r6
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f000 ffc7 	bl	801053c <__pow5mult>
 800f5ae:	ee18 2a10 	vmov	r2, s16
 800f5b2:	4601      	mov	r1, r0
 800f5b4:	4607      	mov	r7, r0
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f000 ff16 	bl	80103e8 <__multiply>
 800f5bc:	ee18 1a10 	vmov	r1, s16
 800f5c0:	4680      	mov	r8, r0
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 fdf8 	bl	80101b8 <_Bfree>
 800f5c8:	ee08 8a10 	vmov	s16, r8
 800f5cc:	9b07      	ldr	r3, [sp, #28]
 800f5ce:	1b9a      	subs	r2, r3, r6
 800f5d0:	d006      	beq.n	800f5e0 <_dtoa_r+0x7a0>
 800f5d2:	ee18 1a10 	vmov	r1, s16
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f000 ffb0 	bl	801053c <__pow5mult>
 800f5dc:	ee08 0a10 	vmov	s16, r0
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f000 feea 	bl	80103bc <__i2b>
 800f5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	f340 8088 	ble.w	800f702 <_dtoa_r+0x8c2>
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	4601      	mov	r1, r0
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f000 ffa0 	bl	801053c <__pow5mult>
 800f5fc:	9b06      	ldr	r3, [sp, #24]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	4606      	mov	r6, r0
 800f602:	f340 8081 	ble.w	800f708 <_dtoa_r+0x8c8>
 800f606:	f04f 0800 	mov.w	r8, #0
 800f60a:	6933      	ldr	r3, [r6, #16]
 800f60c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f610:	6918      	ldr	r0, [r3, #16]
 800f612:	f000 fe83 	bl	801031c <__hi0bits>
 800f616:	f1c0 0020 	rsb	r0, r0, #32
 800f61a:	9b05      	ldr	r3, [sp, #20]
 800f61c:	4418      	add	r0, r3
 800f61e:	f010 001f 	ands.w	r0, r0, #31
 800f622:	f000 8092 	beq.w	800f74a <_dtoa_r+0x90a>
 800f626:	f1c0 0320 	rsb	r3, r0, #32
 800f62a:	2b04      	cmp	r3, #4
 800f62c:	f340 808a 	ble.w	800f744 <_dtoa_r+0x904>
 800f630:	f1c0 001c 	rsb	r0, r0, #28
 800f634:	9b04      	ldr	r3, [sp, #16]
 800f636:	4403      	add	r3, r0
 800f638:	9304      	str	r3, [sp, #16]
 800f63a:	9b05      	ldr	r3, [sp, #20]
 800f63c:	4403      	add	r3, r0
 800f63e:	4405      	add	r5, r0
 800f640:	9305      	str	r3, [sp, #20]
 800f642:	9b04      	ldr	r3, [sp, #16]
 800f644:	2b00      	cmp	r3, #0
 800f646:	dd07      	ble.n	800f658 <_dtoa_r+0x818>
 800f648:	ee18 1a10 	vmov	r1, s16
 800f64c:	461a      	mov	r2, r3
 800f64e:	4620      	mov	r0, r4
 800f650:	f000 ffce 	bl	80105f0 <__lshift>
 800f654:	ee08 0a10 	vmov	s16, r0
 800f658:	9b05      	ldr	r3, [sp, #20]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	dd05      	ble.n	800f66a <_dtoa_r+0x82a>
 800f65e:	4631      	mov	r1, r6
 800f660:	461a      	mov	r2, r3
 800f662:	4620      	mov	r0, r4
 800f664:	f000 ffc4 	bl	80105f0 <__lshift>
 800f668:	4606      	mov	r6, r0
 800f66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d06e      	beq.n	800f74e <_dtoa_r+0x90e>
 800f670:	ee18 0a10 	vmov	r0, s16
 800f674:	4631      	mov	r1, r6
 800f676:	f001 f82b 	bl	80106d0 <__mcmp>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	da67      	bge.n	800f74e <_dtoa_r+0x90e>
 800f67e:	9b00      	ldr	r3, [sp, #0]
 800f680:	3b01      	subs	r3, #1
 800f682:	ee18 1a10 	vmov	r1, s16
 800f686:	9300      	str	r3, [sp, #0]
 800f688:	220a      	movs	r2, #10
 800f68a:	2300      	movs	r3, #0
 800f68c:	4620      	mov	r0, r4
 800f68e:	f000 fdb5 	bl	80101fc <__multadd>
 800f692:	9b08      	ldr	r3, [sp, #32]
 800f694:	ee08 0a10 	vmov	s16, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f000 81b1 	beq.w	800fa00 <_dtoa_r+0xbc0>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	4639      	mov	r1, r7
 800f6a2:	220a      	movs	r2, #10
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f000 fda9 	bl	80101fc <__multadd>
 800f6aa:	9b02      	ldr	r3, [sp, #8]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	4607      	mov	r7, r0
 800f6b0:	f300 808e 	bgt.w	800f7d0 <_dtoa_r+0x990>
 800f6b4:	9b06      	ldr	r3, [sp, #24]
 800f6b6:	2b02      	cmp	r3, #2
 800f6b8:	dc51      	bgt.n	800f75e <_dtoa_r+0x91e>
 800f6ba:	e089      	b.n	800f7d0 <_dtoa_r+0x990>
 800f6bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f6c2:	e74b      	b.n	800f55c <_dtoa_r+0x71c>
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	1e5e      	subs	r6, r3, #1
 800f6c8:	9b07      	ldr	r3, [sp, #28]
 800f6ca:	42b3      	cmp	r3, r6
 800f6cc:	bfbf      	itttt	lt
 800f6ce:	9b07      	ldrlt	r3, [sp, #28]
 800f6d0:	9607      	strlt	r6, [sp, #28]
 800f6d2:	1af2      	sublt	r2, r6, r3
 800f6d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f6d6:	bfb6      	itet	lt
 800f6d8:	189b      	addlt	r3, r3, r2
 800f6da:	1b9e      	subge	r6, r3, r6
 800f6dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f6de:	9b03      	ldr	r3, [sp, #12]
 800f6e0:	bfb8      	it	lt
 800f6e2:	2600      	movlt	r6, #0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	bfb7      	itett	lt
 800f6e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f6ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f6f0:	1a9d      	sublt	r5, r3, r2
 800f6f2:	2300      	movlt	r3, #0
 800f6f4:	e734      	b.n	800f560 <_dtoa_r+0x720>
 800f6f6:	9e07      	ldr	r6, [sp, #28]
 800f6f8:	9d04      	ldr	r5, [sp, #16]
 800f6fa:	9f08      	ldr	r7, [sp, #32]
 800f6fc:	e73b      	b.n	800f576 <_dtoa_r+0x736>
 800f6fe:	9a07      	ldr	r2, [sp, #28]
 800f700:	e767      	b.n	800f5d2 <_dtoa_r+0x792>
 800f702:	9b06      	ldr	r3, [sp, #24]
 800f704:	2b01      	cmp	r3, #1
 800f706:	dc18      	bgt.n	800f73a <_dtoa_r+0x8fa>
 800f708:	f1ba 0f00 	cmp.w	sl, #0
 800f70c:	d115      	bne.n	800f73a <_dtoa_r+0x8fa>
 800f70e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f712:	b993      	cbnz	r3, 800f73a <_dtoa_r+0x8fa>
 800f714:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f718:	0d1b      	lsrs	r3, r3, #20
 800f71a:	051b      	lsls	r3, r3, #20
 800f71c:	b183      	cbz	r3, 800f740 <_dtoa_r+0x900>
 800f71e:	9b04      	ldr	r3, [sp, #16]
 800f720:	3301      	adds	r3, #1
 800f722:	9304      	str	r3, [sp, #16]
 800f724:	9b05      	ldr	r3, [sp, #20]
 800f726:	3301      	adds	r3, #1
 800f728:	9305      	str	r3, [sp, #20]
 800f72a:	f04f 0801 	mov.w	r8, #1
 800f72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f730:	2b00      	cmp	r3, #0
 800f732:	f47f af6a 	bne.w	800f60a <_dtoa_r+0x7ca>
 800f736:	2001      	movs	r0, #1
 800f738:	e76f      	b.n	800f61a <_dtoa_r+0x7da>
 800f73a:	f04f 0800 	mov.w	r8, #0
 800f73e:	e7f6      	b.n	800f72e <_dtoa_r+0x8ee>
 800f740:	4698      	mov	r8, r3
 800f742:	e7f4      	b.n	800f72e <_dtoa_r+0x8ee>
 800f744:	f43f af7d 	beq.w	800f642 <_dtoa_r+0x802>
 800f748:	4618      	mov	r0, r3
 800f74a:	301c      	adds	r0, #28
 800f74c:	e772      	b.n	800f634 <_dtoa_r+0x7f4>
 800f74e:	9b03      	ldr	r3, [sp, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	dc37      	bgt.n	800f7c4 <_dtoa_r+0x984>
 800f754:	9b06      	ldr	r3, [sp, #24]
 800f756:	2b02      	cmp	r3, #2
 800f758:	dd34      	ble.n	800f7c4 <_dtoa_r+0x984>
 800f75a:	9b03      	ldr	r3, [sp, #12]
 800f75c:	9302      	str	r3, [sp, #8]
 800f75e:	9b02      	ldr	r3, [sp, #8]
 800f760:	b96b      	cbnz	r3, 800f77e <_dtoa_r+0x93e>
 800f762:	4631      	mov	r1, r6
 800f764:	2205      	movs	r2, #5
 800f766:	4620      	mov	r0, r4
 800f768:	f000 fd48 	bl	80101fc <__multadd>
 800f76c:	4601      	mov	r1, r0
 800f76e:	4606      	mov	r6, r0
 800f770:	ee18 0a10 	vmov	r0, s16
 800f774:	f000 ffac 	bl	80106d0 <__mcmp>
 800f778:	2800      	cmp	r0, #0
 800f77a:	f73f adbb 	bgt.w	800f2f4 <_dtoa_r+0x4b4>
 800f77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f780:	9d01      	ldr	r5, [sp, #4]
 800f782:	43db      	mvns	r3, r3
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	f04f 0800 	mov.w	r8, #0
 800f78a:	4631      	mov	r1, r6
 800f78c:	4620      	mov	r0, r4
 800f78e:	f000 fd13 	bl	80101b8 <_Bfree>
 800f792:	2f00      	cmp	r7, #0
 800f794:	f43f aea4 	beq.w	800f4e0 <_dtoa_r+0x6a0>
 800f798:	f1b8 0f00 	cmp.w	r8, #0
 800f79c:	d005      	beq.n	800f7aa <_dtoa_r+0x96a>
 800f79e:	45b8      	cmp	r8, r7
 800f7a0:	d003      	beq.n	800f7aa <_dtoa_r+0x96a>
 800f7a2:	4641      	mov	r1, r8
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f000 fd07 	bl	80101b8 <_Bfree>
 800f7aa:	4639      	mov	r1, r7
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f000 fd03 	bl	80101b8 <_Bfree>
 800f7b2:	e695      	b.n	800f4e0 <_dtoa_r+0x6a0>
 800f7b4:	2600      	movs	r6, #0
 800f7b6:	4637      	mov	r7, r6
 800f7b8:	e7e1      	b.n	800f77e <_dtoa_r+0x93e>
 800f7ba:	9700      	str	r7, [sp, #0]
 800f7bc:	4637      	mov	r7, r6
 800f7be:	e599      	b.n	800f2f4 <_dtoa_r+0x4b4>
 800f7c0:	40240000 	.word	0x40240000
 800f7c4:	9b08      	ldr	r3, [sp, #32]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f000 80ca 	beq.w	800f960 <_dtoa_r+0xb20>
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	9302      	str	r3, [sp, #8]
 800f7d0:	2d00      	cmp	r5, #0
 800f7d2:	dd05      	ble.n	800f7e0 <_dtoa_r+0x9a0>
 800f7d4:	4639      	mov	r1, r7
 800f7d6:	462a      	mov	r2, r5
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f000 ff09 	bl	80105f0 <__lshift>
 800f7de:	4607      	mov	r7, r0
 800f7e0:	f1b8 0f00 	cmp.w	r8, #0
 800f7e4:	d05b      	beq.n	800f89e <_dtoa_r+0xa5e>
 800f7e6:	6879      	ldr	r1, [r7, #4]
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f000 fca5 	bl	8010138 <_Balloc>
 800f7ee:	4605      	mov	r5, r0
 800f7f0:	b928      	cbnz	r0, 800f7fe <_dtoa_r+0x9be>
 800f7f2:	4b87      	ldr	r3, [pc, #540]	; (800fa10 <_dtoa_r+0xbd0>)
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f7fa:	f7ff bb3b 	b.w	800ee74 <_dtoa_r+0x34>
 800f7fe:	693a      	ldr	r2, [r7, #16]
 800f800:	3202      	adds	r2, #2
 800f802:	0092      	lsls	r2, r2, #2
 800f804:	f107 010c 	add.w	r1, r7, #12
 800f808:	300c      	adds	r0, #12
 800f80a:	f7fd ffa3 	bl	800d754 <memcpy>
 800f80e:	2201      	movs	r2, #1
 800f810:	4629      	mov	r1, r5
 800f812:	4620      	mov	r0, r4
 800f814:	f000 feec 	bl	80105f0 <__lshift>
 800f818:	9b01      	ldr	r3, [sp, #4]
 800f81a:	f103 0901 	add.w	r9, r3, #1
 800f81e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f822:	4413      	add	r3, r2
 800f824:	9305      	str	r3, [sp, #20]
 800f826:	f00a 0301 	and.w	r3, sl, #1
 800f82a:	46b8      	mov	r8, r7
 800f82c:	9304      	str	r3, [sp, #16]
 800f82e:	4607      	mov	r7, r0
 800f830:	4631      	mov	r1, r6
 800f832:	ee18 0a10 	vmov	r0, s16
 800f836:	f7ff fa75 	bl	800ed24 <quorem>
 800f83a:	4641      	mov	r1, r8
 800f83c:	9002      	str	r0, [sp, #8]
 800f83e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f842:	ee18 0a10 	vmov	r0, s16
 800f846:	f000 ff43 	bl	80106d0 <__mcmp>
 800f84a:	463a      	mov	r2, r7
 800f84c:	9003      	str	r0, [sp, #12]
 800f84e:	4631      	mov	r1, r6
 800f850:	4620      	mov	r0, r4
 800f852:	f000 ff59 	bl	8010708 <__mdiff>
 800f856:	68c2      	ldr	r2, [r0, #12]
 800f858:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800f85c:	4605      	mov	r5, r0
 800f85e:	bb02      	cbnz	r2, 800f8a2 <_dtoa_r+0xa62>
 800f860:	4601      	mov	r1, r0
 800f862:	ee18 0a10 	vmov	r0, s16
 800f866:	f000 ff33 	bl	80106d0 <__mcmp>
 800f86a:	4602      	mov	r2, r0
 800f86c:	4629      	mov	r1, r5
 800f86e:	4620      	mov	r0, r4
 800f870:	9207      	str	r2, [sp, #28]
 800f872:	f000 fca1 	bl	80101b8 <_Bfree>
 800f876:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f87a:	ea43 0102 	orr.w	r1, r3, r2
 800f87e:	9b04      	ldr	r3, [sp, #16]
 800f880:	430b      	orrs	r3, r1
 800f882:	464d      	mov	r5, r9
 800f884:	d10f      	bne.n	800f8a6 <_dtoa_r+0xa66>
 800f886:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f88a:	d02a      	beq.n	800f8e2 <_dtoa_r+0xaa2>
 800f88c:	9b03      	ldr	r3, [sp, #12]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	dd02      	ble.n	800f898 <_dtoa_r+0xa58>
 800f892:	9b02      	ldr	r3, [sp, #8]
 800f894:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f898:	f88b a000 	strb.w	sl, [fp]
 800f89c:	e775      	b.n	800f78a <_dtoa_r+0x94a>
 800f89e:	4638      	mov	r0, r7
 800f8a0:	e7ba      	b.n	800f818 <_dtoa_r+0x9d8>
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	e7e2      	b.n	800f86c <_dtoa_r+0xa2c>
 800f8a6:	9b03      	ldr	r3, [sp, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	db04      	blt.n	800f8b6 <_dtoa_r+0xa76>
 800f8ac:	9906      	ldr	r1, [sp, #24]
 800f8ae:	430b      	orrs	r3, r1
 800f8b0:	9904      	ldr	r1, [sp, #16]
 800f8b2:	430b      	orrs	r3, r1
 800f8b4:	d122      	bne.n	800f8fc <_dtoa_r+0xabc>
 800f8b6:	2a00      	cmp	r2, #0
 800f8b8:	ddee      	ble.n	800f898 <_dtoa_r+0xa58>
 800f8ba:	ee18 1a10 	vmov	r1, s16
 800f8be:	2201      	movs	r2, #1
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f000 fe95 	bl	80105f0 <__lshift>
 800f8c6:	4631      	mov	r1, r6
 800f8c8:	ee08 0a10 	vmov	s16, r0
 800f8cc:	f000 ff00 	bl	80106d0 <__mcmp>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	dc03      	bgt.n	800f8dc <_dtoa_r+0xa9c>
 800f8d4:	d1e0      	bne.n	800f898 <_dtoa_r+0xa58>
 800f8d6:	f01a 0f01 	tst.w	sl, #1
 800f8da:	d0dd      	beq.n	800f898 <_dtoa_r+0xa58>
 800f8dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f8e0:	d1d7      	bne.n	800f892 <_dtoa_r+0xa52>
 800f8e2:	2339      	movs	r3, #57	; 0x39
 800f8e4:	f88b 3000 	strb.w	r3, [fp]
 800f8e8:	462b      	mov	r3, r5
 800f8ea:	461d      	mov	r5, r3
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f8f2:	2a39      	cmp	r2, #57	; 0x39
 800f8f4:	d071      	beq.n	800f9da <_dtoa_r+0xb9a>
 800f8f6:	3201      	adds	r2, #1
 800f8f8:	701a      	strb	r2, [r3, #0]
 800f8fa:	e746      	b.n	800f78a <_dtoa_r+0x94a>
 800f8fc:	2a00      	cmp	r2, #0
 800f8fe:	dd07      	ble.n	800f910 <_dtoa_r+0xad0>
 800f900:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f904:	d0ed      	beq.n	800f8e2 <_dtoa_r+0xaa2>
 800f906:	f10a 0301 	add.w	r3, sl, #1
 800f90a:	f88b 3000 	strb.w	r3, [fp]
 800f90e:	e73c      	b.n	800f78a <_dtoa_r+0x94a>
 800f910:	9b05      	ldr	r3, [sp, #20]
 800f912:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f916:	4599      	cmp	r9, r3
 800f918:	d047      	beq.n	800f9aa <_dtoa_r+0xb6a>
 800f91a:	ee18 1a10 	vmov	r1, s16
 800f91e:	2300      	movs	r3, #0
 800f920:	220a      	movs	r2, #10
 800f922:	4620      	mov	r0, r4
 800f924:	f000 fc6a 	bl	80101fc <__multadd>
 800f928:	45b8      	cmp	r8, r7
 800f92a:	ee08 0a10 	vmov	s16, r0
 800f92e:	f04f 0300 	mov.w	r3, #0
 800f932:	f04f 020a 	mov.w	r2, #10
 800f936:	4641      	mov	r1, r8
 800f938:	4620      	mov	r0, r4
 800f93a:	d106      	bne.n	800f94a <_dtoa_r+0xb0a>
 800f93c:	f000 fc5e 	bl	80101fc <__multadd>
 800f940:	4680      	mov	r8, r0
 800f942:	4607      	mov	r7, r0
 800f944:	f109 0901 	add.w	r9, r9, #1
 800f948:	e772      	b.n	800f830 <_dtoa_r+0x9f0>
 800f94a:	f000 fc57 	bl	80101fc <__multadd>
 800f94e:	4639      	mov	r1, r7
 800f950:	4680      	mov	r8, r0
 800f952:	2300      	movs	r3, #0
 800f954:	220a      	movs	r2, #10
 800f956:	4620      	mov	r0, r4
 800f958:	f000 fc50 	bl	80101fc <__multadd>
 800f95c:	4607      	mov	r7, r0
 800f95e:	e7f1      	b.n	800f944 <_dtoa_r+0xb04>
 800f960:	9b03      	ldr	r3, [sp, #12]
 800f962:	9302      	str	r3, [sp, #8]
 800f964:	9d01      	ldr	r5, [sp, #4]
 800f966:	ee18 0a10 	vmov	r0, s16
 800f96a:	4631      	mov	r1, r6
 800f96c:	f7ff f9da 	bl	800ed24 <quorem>
 800f970:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f974:	9b01      	ldr	r3, [sp, #4]
 800f976:	f805 ab01 	strb.w	sl, [r5], #1
 800f97a:	1aea      	subs	r2, r5, r3
 800f97c:	9b02      	ldr	r3, [sp, #8]
 800f97e:	4293      	cmp	r3, r2
 800f980:	dd09      	ble.n	800f996 <_dtoa_r+0xb56>
 800f982:	ee18 1a10 	vmov	r1, s16
 800f986:	2300      	movs	r3, #0
 800f988:	220a      	movs	r2, #10
 800f98a:	4620      	mov	r0, r4
 800f98c:	f000 fc36 	bl	80101fc <__multadd>
 800f990:	ee08 0a10 	vmov	s16, r0
 800f994:	e7e7      	b.n	800f966 <_dtoa_r+0xb26>
 800f996:	9b02      	ldr	r3, [sp, #8]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	bfc8      	it	gt
 800f99c:	461d      	movgt	r5, r3
 800f99e:	9b01      	ldr	r3, [sp, #4]
 800f9a0:	bfd8      	it	le
 800f9a2:	2501      	movle	r5, #1
 800f9a4:	441d      	add	r5, r3
 800f9a6:	f04f 0800 	mov.w	r8, #0
 800f9aa:	ee18 1a10 	vmov	r1, s16
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f000 fe1d 	bl	80105f0 <__lshift>
 800f9b6:	4631      	mov	r1, r6
 800f9b8:	ee08 0a10 	vmov	s16, r0
 800f9bc:	f000 fe88 	bl	80106d0 <__mcmp>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	dc91      	bgt.n	800f8e8 <_dtoa_r+0xaa8>
 800f9c4:	d102      	bne.n	800f9cc <_dtoa_r+0xb8c>
 800f9c6:	f01a 0f01 	tst.w	sl, #1
 800f9ca:	d18d      	bne.n	800f8e8 <_dtoa_r+0xaa8>
 800f9cc:	462b      	mov	r3, r5
 800f9ce:	461d      	mov	r5, r3
 800f9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9d4:	2a30      	cmp	r2, #48	; 0x30
 800f9d6:	d0fa      	beq.n	800f9ce <_dtoa_r+0xb8e>
 800f9d8:	e6d7      	b.n	800f78a <_dtoa_r+0x94a>
 800f9da:	9a01      	ldr	r2, [sp, #4]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d184      	bne.n	800f8ea <_dtoa_r+0xaaa>
 800f9e0:	9b00      	ldr	r3, [sp, #0]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	2331      	movs	r3, #49	; 0x31
 800f9e8:	7013      	strb	r3, [r2, #0]
 800f9ea:	e6ce      	b.n	800f78a <_dtoa_r+0x94a>
 800f9ec:	4b09      	ldr	r3, [pc, #36]	; (800fa14 <_dtoa_r+0xbd4>)
 800f9ee:	f7ff ba95 	b.w	800ef1c <_dtoa_r+0xdc>
 800f9f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f47f aa6e 	bne.w	800eed6 <_dtoa_r+0x96>
 800f9fa:	4b07      	ldr	r3, [pc, #28]	; (800fa18 <_dtoa_r+0xbd8>)
 800f9fc:	f7ff ba8e 	b.w	800ef1c <_dtoa_r+0xdc>
 800fa00:	9b02      	ldr	r3, [sp, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	dcae      	bgt.n	800f964 <_dtoa_r+0xb24>
 800fa06:	9b06      	ldr	r3, [sp, #24]
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	f73f aea8 	bgt.w	800f75e <_dtoa_r+0x91e>
 800fa0e:	e7a9      	b.n	800f964 <_dtoa_r+0xb24>
 800fa10:	080133af 	.word	0x080133af
 800fa14:	080132bc 	.word	0x080132bc
 800fa18:	08013330 	.word	0x08013330

0800fa1c <rshift>:
 800fa1c:	6903      	ldr	r3, [r0, #16]
 800fa1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fa22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fa2a:	f100 0414 	add.w	r4, r0, #20
 800fa2e:	dd45      	ble.n	800fabc <rshift+0xa0>
 800fa30:	f011 011f 	ands.w	r1, r1, #31
 800fa34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fa38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fa3c:	d10c      	bne.n	800fa58 <rshift+0x3c>
 800fa3e:	f100 0710 	add.w	r7, r0, #16
 800fa42:	4629      	mov	r1, r5
 800fa44:	42b1      	cmp	r1, r6
 800fa46:	d334      	bcc.n	800fab2 <rshift+0x96>
 800fa48:	1a9b      	subs	r3, r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	1eea      	subs	r2, r5, #3
 800fa4e:	4296      	cmp	r6, r2
 800fa50:	bf38      	it	cc
 800fa52:	2300      	movcc	r3, #0
 800fa54:	4423      	add	r3, r4
 800fa56:	e015      	b.n	800fa84 <rshift+0x68>
 800fa58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fa5c:	f1c1 0820 	rsb	r8, r1, #32
 800fa60:	40cf      	lsrs	r7, r1
 800fa62:	f105 0e04 	add.w	lr, r5, #4
 800fa66:	46a1      	mov	r9, r4
 800fa68:	4576      	cmp	r6, lr
 800fa6a:	46f4      	mov	ip, lr
 800fa6c:	d815      	bhi.n	800fa9a <rshift+0x7e>
 800fa6e:	1a9a      	subs	r2, r3, r2
 800fa70:	0092      	lsls	r2, r2, #2
 800fa72:	3a04      	subs	r2, #4
 800fa74:	3501      	adds	r5, #1
 800fa76:	42ae      	cmp	r6, r5
 800fa78:	bf38      	it	cc
 800fa7a:	2200      	movcc	r2, #0
 800fa7c:	18a3      	adds	r3, r4, r2
 800fa7e:	50a7      	str	r7, [r4, r2]
 800fa80:	b107      	cbz	r7, 800fa84 <rshift+0x68>
 800fa82:	3304      	adds	r3, #4
 800fa84:	1b1a      	subs	r2, r3, r4
 800fa86:	42a3      	cmp	r3, r4
 800fa88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa8c:	bf08      	it	eq
 800fa8e:	2300      	moveq	r3, #0
 800fa90:	6102      	str	r2, [r0, #16]
 800fa92:	bf08      	it	eq
 800fa94:	6143      	streq	r3, [r0, #20]
 800fa96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa9a:	f8dc c000 	ldr.w	ip, [ip]
 800fa9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800faa2:	ea4c 0707 	orr.w	r7, ip, r7
 800faa6:	f849 7b04 	str.w	r7, [r9], #4
 800faaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800faae:	40cf      	lsrs	r7, r1
 800fab0:	e7da      	b.n	800fa68 <rshift+0x4c>
 800fab2:	f851 cb04 	ldr.w	ip, [r1], #4
 800fab6:	f847 cf04 	str.w	ip, [r7, #4]!
 800faba:	e7c3      	b.n	800fa44 <rshift+0x28>
 800fabc:	4623      	mov	r3, r4
 800fabe:	e7e1      	b.n	800fa84 <rshift+0x68>

0800fac0 <__hexdig_fun>:
 800fac0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fac4:	2b09      	cmp	r3, #9
 800fac6:	d802      	bhi.n	800face <__hexdig_fun+0xe>
 800fac8:	3820      	subs	r0, #32
 800faca:	b2c0      	uxtb	r0, r0
 800facc:	4770      	bx	lr
 800face:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fad2:	2b05      	cmp	r3, #5
 800fad4:	d801      	bhi.n	800fada <__hexdig_fun+0x1a>
 800fad6:	3847      	subs	r0, #71	; 0x47
 800fad8:	e7f7      	b.n	800faca <__hexdig_fun+0xa>
 800fada:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fade:	2b05      	cmp	r3, #5
 800fae0:	d801      	bhi.n	800fae6 <__hexdig_fun+0x26>
 800fae2:	3827      	subs	r0, #39	; 0x27
 800fae4:	e7f1      	b.n	800faca <__hexdig_fun+0xa>
 800fae6:	2000      	movs	r0, #0
 800fae8:	4770      	bx	lr
	...

0800faec <__gethex>:
 800faec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf0:	ed2d 8b02 	vpush	{d8}
 800faf4:	b089      	sub	sp, #36	; 0x24
 800faf6:	ee08 0a10 	vmov	s16, r0
 800fafa:	9304      	str	r3, [sp, #16]
 800fafc:	4bb4      	ldr	r3, [pc, #720]	; (800fdd0 <__gethex+0x2e4>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	4618      	mov	r0, r3
 800fb04:	468b      	mov	fp, r1
 800fb06:	4690      	mov	r8, r2
 800fb08:	f7f0 fb8c 	bl	8000224 <strlen>
 800fb0c:	9b01      	ldr	r3, [sp, #4]
 800fb0e:	f8db 2000 	ldr.w	r2, [fp]
 800fb12:	4403      	add	r3, r0
 800fb14:	4682      	mov	sl, r0
 800fb16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fb1a:	9305      	str	r3, [sp, #20]
 800fb1c:	1c93      	adds	r3, r2, #2
 800fb1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fb22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fb26:	32fe      	adds	r2, #254	; 0xfe
 800fb28:	18d1      	adds	r1, r2, r3
 800fb2a:	461f      	mov	r7, r3
 800fb2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fb30:	9100      	str	r1, [sp, #0]
 800fb32:	2830      	cmp	r0, #48	; 0x30
 800fb34:	d0f8      	beq.n	800fb28 <__gethex+0x3c>
 800fb36:	f7ff ffc3 	bl	800fac0 <__hexdig_fun>
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	d13a      	bne.n	800fbb6 <__gethex+0xca>
 800fb40:	9901      	ldr	r1, [sp, #4]
 800fb42:	4652      	mov	r2, sl
 800fb44:	4638      	mov	r0, r7
 800fb46:	f001 fa23 	bl	8010f90 <strncmp>
 800fb4a:	4605      	mov	r5, r0
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d168      	bne.n	800fc22 <__gethex+0x136>
 800fb50:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fb54:	eb07 060a 	add.w	r6, r7, sl
 800fb58:	f7ff ffb2 	bl	800fac0 <__hexdig_fun>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	d062      	beq.n	800fc26 <__gethex+0x13a>
 800fb60:	4633      	mov	r3, r6
 800fb62:	7818      	ldrb	r0, [r3, #0]
 800fb64:	2830      	cmp	r0, #48	; 0x30
 800fb66:	461f      	mov	r7, r3
 800fb68:	f103 0301 	add.w	r3, r3, #1
 800fb6c:	d0f9      	beq.n	800fb62 <__gethex+0x76>
 800fb6e:	f7ff ffa7 	bl	800fac0 <__hexdig_fun>
 800fb72:	2301      	movs	r3, #1
 800fb74:	fab0 f480 	clz	r4, r0
 800fb78:	0964      	lsrs	r4, r4, #5
 800fb7a:	4635      	mov	r5, r6
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	463a      	mov	r2, r7
 800fb80:	4616      	mov	r6, r2
 800fb82:	3201      	adds	r2, #1
 800fb84:	7830      	ldrb	r0, [r6, #0]
 800fb86:	f7ff ff9b 	bl	800fac0 <__hexdig_fun>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d1f8      	bne.n	800fb80 <__gethex+0x94>
 800fb8e:	9901      	ldr	r1, [sp, #4]
 800fb90:	4652      	mov	r2, sl
 800fb92:	4630      	mov	r0, r6
 800fb94:	f001 f9fc 	bl	8010f90 <strncmp>
 800fb98:	b980      	cbnz	r0, 800fbbc <__gethex+0xd0>
 800fb9a:	b94d      	cbnz	r5, 800fbb0 <__gethex+0xc4>
 800fb9c:	eb06 050a 	add.w	r5, r6, sl
 800fba0:	462a      	mov	r2, r5
 800fba2:	4616      	mov	r6, r2
 800fba4:	3201      	adds	r2, #1
 800fba6:	7830      	ldrb	r0, [r6, #0]
 800fba8:	f7ff ff8a 	bl	800fac0 <__hexdig_fun>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d1f8      	bne.n	800fba2 <__gethex+0xb6>
 800fbb0:	1bad      	subs	r5, r5, r6
 800fbb2:	00ad      	lsls	r5, r5, #2
 800fbb4:	e004      	b.n	800fbc0 <__gethex+0xd4>
 800fbb6:	2400      	movs	r4, #0
 800fbb8:	4625      	mov	r5, r4
 800fbba:	e7e0      	b.n	800fb7e <__gethex+0x92>
 800fbbc:	2d00      	cmp	r5, #0
 800fbbe:	d1f7      	bne.n	800fbb0 <__gethex+0xc4>
 800fbc0:	7833      	ldrb	r3, [r6, #0]
 800fbc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fbc6:	2b50      	cmp	r3, #80	; 0x50
 800fbc8:	d13b      	bne.n	800fc42 <__gethex+0x156>
 800fbca:	7873      	ldrb	r3, [r6, #1]
 800fbcc:	2b2b      	cmp	r3, #43	; 0x2b
 800fbce:	d02c      	beq.n	800fc2a <__gethex+0x13e>
 800fbd0:	2b2d      	cmp	r3, #45	; 0x2d
 800fbd2:	d02e      	beq.n	800fc32 <__gethex+0x146>
 800fbd4:	1c71      	adds	r1, r6, #1
 800fbd6:	f04f 0900 	mov.w	r9, #0
 800fbda:	7808      	ldrb	r0, [r1, #0]
 800fbdc:	f7ff ff70 	bl	800fac0 <__hexdig_fun>
 800fbe0:	1e43      	subs	r3, r0, #1
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b18      	cmp	r3, #24
 800fbe6:	d82c      	bhi.n	800fc42 <__gethex+0x156>
 800fbe8:	f1a0 0210 	sub.w	r2, r0, #16
 800fbec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fbf0:	f7ff ff66 	bl	800fac0 <__hexdig_fun>
 800fbf4:	1e43      	subs	r3, r0, #1
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	2b18      	cmp	r3, #24
 800fbfa:	d91d      	bls.n	800fc38 <__gethex+0x14c>
 800fbfc:	f1b9 0f00 	cmp.w	r9, #0
 800fc00:	d000      	beq.n	800fc04 <__gethex+0x118>
 800fc02:	4252      	negs	r2, r2
 800fc04:	4415      	add	r5, r2
 800fc06:	f8cb 1000 	str.w	r1, [fp]
 800fc0a:	b1e4      	cbz	r4, 800fc46 <__gethex+0x15a>
 800fc0c:	9b00      	ldr	r3, [sp, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	bf14      	ite	ne
 800fc12:	2700      	movne	r7, #0
 800fc14:	2706      	moveq	r7, #6
 800fc16:	4638      	mov	r0, r7
 800fc18:	b009      	add	sp, #36	; 0x24
 800fc1a:	ecbd 8b02 	vpop	{d8}
 800fc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc22:	463e      	mov	r6, r7
 800fc24:	4625      	mov	r5, r4
 800fc26:	2401      	movs	r4, #1
 800fc28:	e7ca      	b.n	800fbc0 <__gethex+0xd4>
 800fc2a:	f04f 0900 	mov.w	r9, #0
 800fc2e:	1cb1      	adds	r1, r6, #2
 800fc30:	e7d3      	b.n	800fbda <__gethex+0xee>
 800fc32:	f04f 0901 	mov.w	r9, #1
 800fc36:	e7fa      	b.n	800fc2e <__gethex+0x142>
 800fc38:	230a      	movs	r3, #10
 800fc3a:	fb03 0202 	mla	r2, r3, r2, r0
 800fc3e:	3a10      	subs	r2, #16
 800fc40:	e7d4      	b.n	800fbec <__gethex+0x100>
 800fc42:	4631      	mov	r1, r6
 800fc44:	e7df      	b.n	800fc06 <__gethex+0x11a>
 800fc46:	1bf3      	subs	r3, r6, r7
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	4621      	mov	r1, r4
 800fc4c:	2b07      	cmp	r3, #7
 800fc4e:	dc0b      	bgt.n	800fc68 <__gethex+0x17c>
 800fc50:	ee18 0a10 	vmov	r0, s16
 800fc54:	f000 fa70 	bl	8010138 <_Balloc>
 800fc58:	4604      	mov	r4, r0
 800fc5a:	b940      	cbnz	r0, 800fc6e <__gethex+0x182>
 800fc5c:	4b5d      	ldr	r3, [pc, #372]	; (800fdd4 <__gethex+0x2e8>)
 800fc5e:	4602      	mov	r2, r0
 800fc60:	21de      	movs	r1, #222	; 0xde
 800fc62:	485d      	ldr	r0, [pc, #372]	; (800fdd8 <__gethex+0x2ec>)
 800fc64:	f001 f9b6 	bl	8010fd4 <__assert_func>
 800fc68:	3101      	adds	r1, #1
 800fc6a:	105b      	asrs	r3, r3, #1
 800fc6c:	e7ee      	b.n	800fc4c <__gethex+0x160>
 800fc6e:	f100 0914 	add.w	r9, r0, #20
 800fc72:	f04f 0b00 	mov.w	fp, #0
 800fc76:	f1ca 0301 	rsb	r3, sl, #1
 800fc7a:	f8cd 9008 	str.w	r9, [sp, #8]
 800fc7e:	f8cd b000 	str.w	fp, [sp]
 800fc82:	9306      	str	r3, [sp, #24]
 800fc84:	42b7      	cmp	r7, r6
 800fc86:	d340      	bcc.n	800fd0a <__gethex+0x21e>
 800fc88:	9802      	ldr	r0, [sp, #8]
 800fc8a:	9b00      	ldr	r3, [sp, #0]
 800fc8c:	f840 3b04 	str.w	r3, [r0], #4
 800fc90:	eba0 0009 	sub.w	r0, r0, r9
 800fc94:	1080      	asrs	r0, r0, #2
 800fc96:	0146      	lsls	r6, r0, #5
 800fc98:	6120      	str	r0, [r4, #16]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f000 fb3e 	bl	801031c <__hi0bits>
 800fca0:	1a30      	subs	r0, r6, r0
 800fca2:	f8d8 6000 	ldr.w	r6, [r8]
 800fca6:	42b0      	cmp	r0, r6
 800fca8:	dd63      	ble.n	800fd72 <__gethex+0x286>
 800fcaa:	1b87      	subs	r7, r0, r6
 800fcac:	4639      	mov	r1, r7
 800fcae:	4620      	mov	r0, r4
 800fcb0:	f000 fee2 	bl	8010a78 <__any_on>
 800fcb4:	4682      	mov	sl, r0
 800fcb6:	b1a8      	cbz	r0, 800fce4 <__gethex+0x1f8>
 800fcb8:	1e7b      	subs	r3, r7, #1
 800fcba:	1159      	asrs	r1, r3, #5
 800fcbc:	f003 021f 	and.w	r2, r3, #31
 800fcc0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fcc4:	f04f 0a01 	mov.w	sl, #1
 800fcc8:	fa0a f202 	lsl.w	r2, sl, r2
 800fccc:	420a      	tst	r2, r1
 800fcce:	d009      	beq.n	800fce4 <__gethex+0x1f8>
 800fcd0:	4553      	cmp	r3, sl
 800fcd2:	dd05      	ble.n	800fce0 <__gethex+0x1f4>
 800fcd4:	1eb9      	subs	r1, r7, #2
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f000 fece 	bl	8010a78 <__any_on>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d145      	bne.n	800fd6c <__gethex+0x280>
 800fce0:	f04f 0a02 	mov.w	sl, #2
 800fce4:	4639      	mov	r1, r7
 800fce6:	4620      	mov	r0, r4
 800fce8:	f7ff fe98 	bl	800fa1c <rshift>
 800fcec:	443d      	add	r5, r7
 800fcee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcf2:	42ab      	cmp	r3, r5
 800fcf4:	da4c      	bge.n	800fd90 <__gethex+0x2a4>
 800fcf6:	ee18 0a10 	vmov	r0, s16
 800fcfa:	4621      	mov	r1, r4
 800fcfc:	f000 fa5c 	bl	80101b8 <_Bfree>
 800fd00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd02:	2300      	movs	r3, #0
 800fd04:	6013      	str	r3, [r2, #0]
 800fd06:	27a3      	movs	r7, #163	; 0xa3
 800fd08:	e785      	b.n	800fc16 <__gethex+0x12a>
 800fd0a:	1e73      	subs	r3, r6, #1
 800fd0c:	9a05      	ldr	r2, [sp, #20]
 800fd0e:	9303      	str	r3, [sp, #12]
 800fd10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d019      	beq.n	800fd4c <__gethex+0x260>
 800fd18:	f1bb 0f20 	cmp.w	fp, #32
 800fd1c:	d107      	bne.n	800fd2e <__gethex+0x242>
 800fd1e:	9b02      	ldr	r3, [sp, #8]
 800fd20:	9a00      	ldr	r2, [sp, #0]
 800fd22:	f843 2b04 	str.w	r2, [r3], #4
 800fd26:	9302      	str	r3, [sp, #8]
 800fd28:	2300      	movs	r3, #0
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	469b      	mov	fp, r3
 800fd2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fd32:	f7ff fec5 	bl	800fac0 <__hexdig_fun>
 800fd36:	9b00      	ldr	r3, [sp, #0]
 800fd38:	f000 000f 	and.w	r0, r0, #15
 800fd3c:	fa00 f00b 	lsl.w	r0, r0, fp
 800fd40:	4303      	orrs	r3, r0
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	f10b 0b04 	add.w	fp, fp, #4
 800fd48:	9b03      	ldr	r3, [sp, #12]
 800fd4a:	e00d      	b.n	800fd68 <__gethex+0x27c>
 800fd4c:	9b03      	ldr	r3, [sp, #12]
 800fd4e:	9a06      	ldr	r2, [sp, #24]
 800fd50:	4413      	add	r3, r2
 800fd52:	42bb      	cmp	r3, r7
 800fd54:	d3e0      	bcc.n	800fd18 <__gethex+0x22c>
 800fd56:	4618      	mov	r0, r3
 800fd58:	9901      	ldr	r1, [sp, #4]
 800fd5a:	9307      	str	r3, [sp, #28]
 800fd5c:	4652      	mov	r2, sl
 800fd5e:	f001 f917 	bl	8010f90 <strncmp>
 800fd62:	9b07      	ldr	r3, [sp, #28]
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d1d7      	bne.n	800fd18 <__gethex+0x22c>
 800fd68:	461e      	mov	r6, r3
 800fd6a:	e78b      	b.n	800fc84 <__gethex+0x198>
 800fd6c:	f04f 0a03 	mov.w	sl, #3
 800fd70:	e7b8      	b.n	800fce4 <__gethex+0x1f8>
 800fd72:	da0a      	bge.n	800fd8a <__gethex+0x29e>
 800fd74:	1a37      	subs	r7, r6, r0
 800fd76:	4621      	mov	r1, r4
 800fd78:	ee18 0a10 	vmov	r0, s16
 800fd7c:	463a      	mov	r2, r7
 800fd7e:	f000 fc37 	bl	80105f0 <__lshift>
 800fd82:	1bed      	subs	r5, r5, r7
 800fd84:	4604      	mov	r4, r0
 800fd86:	f100 0914 	add.w	r9, r0, #20
 800fd8a:	f04f 0a00 	mov.w	sl, #0
 800fd8e:	e7ae      	b.n	800fcee <__gethex+0x202>
 800fd90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fd94:	42a8      	cmp	r0, r5
 800fd96:	dd72      	ble.n	800fe7e <__gethex+0x392>
 800fd98:	1b45      	subs	r5, r0, r5
 800fd9a:	42ae      	cmp	r6, r5
 800fd9c:	dc36      	bgt.n	800fe0c <__gethex+0x320>
 800fd9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fda2:	2b02      	cmp	r3, #2
 800fda4:	d02a      	beq.n	800fdfc <__gethex+0x310>
 800fda6:	2b03      	cmp	r3, #3
 800fda8:	d02c      	beq.n	800fe04 <__gethex+0x318>
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d11c      	bne.n	800fde8 <__gethex+0x2fc>
 800fdae:	42ae      	cmp	r6, r5
 800fdb0:	d11a      	bne.n	800fde8 <__gethex+0x2fc>
 800fdb2:	2e01      	cmp	r6, #1
 800fdb4:	d112      	bne.n	800fddc <__gethex+0x2f0>
 800fdb6:	9a04      	ldr	r2, [sp, #16]
 800fdb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fdbc:	6013      	str	r3, [r2, #0]
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	6123      	str	r3, [r4, #16]
 800fdc2:	f8c9 3000 	str.w	r3, [r9]
 800fdc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fdc8:	2762      	movs	r7, #98	; 0x62
 800fdca:	601c      	str	r4, [r3, #0]
 800fdcc:	e723      	b.n	800fc16 <__gethex+0x12a>
 800fdce:	bf00      	nop
 800fdd0:	08013428 	.word	0x08013428
 800fdd4:	080133af 	.word	0x080133af
 800fdd8:	080133c0 	.word	0x080133c0
 800fddc:	1e71      	subs	r1, r6, #1
 800fdde:	4620      	mov	r0, r4
 800fde0:	f000 fe4a 	bl	8010a78 <__any_on>
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d1e6      	bne.n	800fdb6 <__gethex+0x2ca>
 800fde8:	ee18 0a10 	vmov	r0, s16
 800fdec:	4621      	mov	r1, r4
 800fdee:	f000 f9e3 	bl	80101b8 <_Bfree>
 800fdf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	6013      	str	r3, [r2, #0]
 800fdf8:	2750      	movs	r7, #80	; 0x50
 800fdfa:	e70c      	b.n	800fc16 <__gethex+0x12a>
 800fdfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d1f2      	bne.n	800fde8 <__gethex+0x2fc>
 800fe02:	e7d8      	b.n	800fdb6 <__gethex+0x2ca>
 800fe04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d1d5      	bne.n	800fdb6 <__gethex+0x2ca>
 800fe0a:	e7ed      	b.n	800fde8 <__gethex+0x2fc>
 800fe0c:	1e6f      	subs	r7, r5, #1
 800fe0e:	f1ba 0f00 	cmp.w	sl, #0
 800fe12:	d131      	bne.n	800fe78 <__gethex+0x38c>
 800fe14:	b127      	cbz	r7, 800fe20 <__gethex+0x334>
 800fe16:	4639      	mov	r1, r7
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f000 fe2d 	bl	8010a78 <__any_on>
 800fe1e:	4682      	mov	sl, r0
 800fe20:	117b      	asrs	r3, r7, #5
 800fe22:	2101      	movs	r1, #1
 800fe24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fe28:	f007 071f 	and.w	r7, r7, #31
 800fe2c:	fa01 f707 	lsl.w	r7, r1, r7
 800fe30:	421f      	tst	r7, r3
 800fe32:	4629      	mov	r1, r5
 800fe34:	4620      	mov	r0, r4
 800fe36:	bf18      	it	ne
 800fe38:	f04a 0a02 	orrne.w	sl, sl, #2
 800fe3c:	1b76      	subs	r6, r6, r5
 800fe3e:	f7ff fded 	bl	800fa1c <rshift>
 800fe42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fe46:	2702      	movs	r7, #2
 800fe48:	f1ba 0f00 	cmp.w	sl, #0
 800fe4c:	d048      	beq.n	800fee0 <__gethex+0x3f4>
 800fe4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	d015      	beq.n	800fe82 <__gethex+0x396>
 800fe56:	2b03      	cmp	r3, #3
 800fe58:	d017      	beq.n	800fe8a <__gethex+0x39e>
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d109      	bne.n	800fe72 <__gethex+0x386>
 800fe5e:	f01a 0f02 	tst.w	sl, #2
 800fe62:	d006      	beq.n	800fe72 <__gethex+0x386>
 800fe64:	f8d9 0000 	ldr.w	r0, [r9]
 800fe68:	ea4a 0a00 	orr.w	sl, sl, r0
 800fe6c:	f01a 0f01 	tst.w	sl, #1
 800fe70:	d10e      	bne.n	800fe90 <__gethex+0x3a4>
 800fe72:	f047 0710 	orr.w	r7, r7, #16
 800fe76:	e033      	b.n	800fee0 <__gethex+0x3f4>
 800fe78:	f04f 0a01 	mov.w	sl, #1
 800fe7c:	e7d0      	b.n	800fe20 <__gethex+0x334>
 800fe7e:	2701      	movs	r7, #1
 800fe80:	e7e2      	b.n	800fe48 <__gethex+0x35c>
 800fe82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe84:	f1c3 0301 	rsb	r3, r3, #1
 800fe88:	9315      	str	r3, [sp, #84]	; 0x54
 800fe8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d0f0      	beq.n	800fe72 <__gethex+0x386>
 800fe90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe94:	f104 0314 	add.w	r3, r4, #20
 800fe98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fe9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fea0:	f04f 0c00 	mov.w	ip, #0
 800fea4:	4618      	mov	r0, r3
 800fea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800feaa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800feae:	d01c      	beq.n	800feea <__gethex+0x3fe>
 800feb0:	3201      	adds	r2, #1
 800feb2:	6002      	str	r2, [r0, #0]
 800feb4:	2f02      	cmp	r7, #2
 800feb6:	f104 0314 	add.w	r3, r4, #20
 800feba:	d13f      	bne.n	800ff3c <__gethex+0x450>
 800febc:	f8d8 2000 	ldr.w	r2, [r8]
 800fec0:	3a01      	subs	r2, #1
 800fec2:	42b2      	cmp	r2, r6
 800fec4:	d10a      	bne.n	800fedc <__gethex+0x3f0>
 800fec6:	1171      	asrs	r1, r6, #5
 800fec8:	2201      	movs	r2, #1
 800feca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fece:	f006 061f 	and.w	r6, r6, #31
 800fed2:	fa02 f606 	lsl.w	r6, r2, r6
 800fed6:	421e      	tst	r6, r3
 800fed8:	bf18      	it	ne
 800feda:	4617      	movne	r7, r2
 800fedc:	f047 0720 	orr.w	r7, r7, #32
 800fee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fee2:	601c      	str	r4, [r3, #0]
 800fee4:	9b04      	ldr	r3, [sp, #16]
 800fee6:	601d      	str	r5, [r3, #0]
 800fee8:	e695      	b.n	800fc16 <__gethex+0x12a>
 800feea:	4299      	cmp	r1, r3
 800feec:	f843 cc04 	str.w	ip, [r3, #-4]
 800fef0:	d8d8      	bhi.n	800fea4 <__gethex+0x3b8>
 800fef2:	68a3      	ldr	r3, [r4, #8]
 800fef4:	459b      	cmp	fp, r3
 800fef6:	db19      	blt.n	800ff2c <__gethex+0x440>
 800fef8:	6861      	ldr	r1, [r4, #4]
 800fefa:	ee18 0a10 	vmov	r0, s16
 800fefe:	3101      	adds	r1, #1
 800ff00:	f000 f91a 	bl	8010138 <_Balloc>
 800ff04:	4681      	mov	r9, r0
 800ff06:	b918      	cbnz	r0, 800ff10 <__gethex+0x424>
 800ff08:	4b1a      	ldr	r3, [pc, #104]	; (800ff74 <__gethex+0x488>)
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	2184      	movs	r1, #132	; 0x84
 800ff0e:	e6a8      	b.n	800fc62 <__gethex+0x176>
 800ff10:	6922      	ldr	r2, [r4, #16]
 800ff12:	3202      	adds	r2, #2
 800ff14:	f104 010c 	add.w	r1, r4, #12
 800ff18:	0092      	lsls	r2, r2, #2
 800ff1a:	300c      	adds	r0, #12
 800ff1c:	f7fd fc1a 	bl	800d754 <memcpy>
 800ff20:	4621      	mov	r1, r4
 800ff22:	ee18 0a10 	vmov	r0, s16
 800ff26:	f000 f947 	bl	80101b8 <_Bfree>
 800ff2a:	464c      	mov	r4, r9
 800ff2c:	6923      	ldr	r3, [r4, #16]
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff34:	6122      	str	r2, [r4, #16]
 800ff36:	2201      	movs	r2, #1
 800ff38:	615a      	str	r2, [r3, #20]
 800ff3a:	e7bb      	b.n	800feb4 <__gethex+0x3c8>
 800ff3c:	6922      	ldr	r2, [r4, #16]
 800ff3e:	455a      	cmp	r2, fp
 800ff40:	dd0b      	ble.n	800ff5a <__gethex+0x46e>
 800ff42:	2101      	movs	r1, #1
 800ff44:	4620      	mov	r0, r4
 800ff46:	f7ff fd69 	bl	800fa1c <rshift>
 800ff4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff4e:	3501      	adds	r5, #1
 800ff50:	42ab      	cmp	r3, r5
 800ff52:	f6ff aed0 	blt.w	800fcf6 <__gethex+0x20a>
 800ff56:	2701      	movs	r7, #1
 800ff58:	e7c0      	b.n	800fedc <__gethex+0x3f0>
 800ff5a:	f016 061f 	ands.w	r6, r6, #31
 800ff5e:	d0fa      	beq.n	800ff56 <__gethex+0x46a>
 800ff60:	4453      	add	r3, sl
 800ff62:	f1c6 0620 	rsb	r6, r6, #32
 800ff66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ff6a:	f000 f9d7 	bl	801031c <__hi0bits>
 800ff6e:	42b0      	cmp	r0, r6
 800ff70:	dbe7      	blt.n	800ff42 <__gethex+0x456>
 800ff72:	e7f0      	b.n	800ff56 <__gethex+0x46a>
 800ff74:	080133af 	.word	0x080133af

0800ff78 <L_shift>:
 800ff78:	f1c2 0208 	rsb	r2, r2, #8
 800ff7c:	0092      	lsls	r2, r2, #2
 800ff7e:	b570      	push	{r4, r5, r6, lr}
 800ff80:	f1c2 0620 	rsb	r6, r2, #32
 800ff84:	6843      	ldr	r3, [r0, #4]
 800ff86:	6804      	ldr	r4, [r0, #0]
 800ff88:	fa03 f506 	lsl.w	r5, r3, r6
 800ff8c:	432c      	orrs	r4, r5
 800ff8e:	40d3      	lsrs	r3, r2
 800ff90:	6004      	str	r4, [r0, #0]
 800ff92:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff96:	4288      	cmp	r0, r1
 800ff98:	d3f4      	bcc.n	800ff84 <L_shift+0xc>
 800ff9a:	bd70      	pop	{r4, r5, r6, pc}

0800ff9c <__match>:
 800ff9c:	b530      	push	{r4, r5, lr}
 800ff9e:	6803      	ldr	r3, [r0, #0]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffa6:	b914      	cbnz	r4, 800ffae <__match+0x12>
 800ffa8:	6003      	str	r3, [r0, #0]
 800ffaa:	2001      	movs	r0, #1
 800ffac:	bd30      	pop	{r4, r5, pc}
 800ffae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ffb6:	2d19      	cmp	r5, #25
 800ffb8:	bf98      	it	ls
 800ffba:	3220      	addls	r2, #32
 800ffbc:	42a2      	cmp	r2, r4
 800ffbe:	d0f0      	beq.n	800ffa2 <__match+0x6>
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	e7f3      	b.n	800ffac <__match+0x10>

0800ffc4 <__hexnan>:
 800ffc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc8:	680b      	ldr	r3, [r1, #0]
 800ffca:	115e      	asrs	r6, r3, #5
 800ffcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ffd0:	f013 031f 	ands.w	r3, r3, #31
 800ffd4:	b087      	sub	sp, #28
 800ffd6:	bf18      	it	ne
 800ffd8:	3604      	addne	r6, #4
 800ffda:	2500      	movs	r5, #0
 800ffdc:	1f37      	subs	r7, r6, #4
 800ffde:	4690      	mov	r8, r2
 800ffe0:	6802      	ldr	r2, [r0, #0]
 800ffe2:	9301      	str	r3, [sp, #4]
 800ffe4:	4682      	mov	sl, r0
 800ffe6:	f846 5c04 	str.w	r5, [r6, #-4]
 800ffea:	46b9      	mov	r9, r7
 800ffec:	463c      	mov	r4, r7
 800ffee:	9502      	str	r5, [sp, #8]
 800fff0:	46ab      	mov	fp, r5
 800fff2:	7851      	ldrb	r1, [r2, #1]
 800fff4:	1c53      	adds	r3, r2, #1
 800fff6:	9303      	str	r3, [sp, #12]
 800fff8:	b341      	cbz	r1, 801004c <__hexnan+0x88>
 800fffa:	4608      	mov	r0, r1
 800fffc:	9205      	str	r2, [sp, #20]
 800fffe:	9104      	str	r1, [sp, #16]
 8010000:	f7ff fd5e 	bl	800fac0 <__hexdig_fun>
 8010004:	2800      	cmp	r0, #0
 8010006:	d14f      	bne.n	80100a8 <__hexnan+0xe4>
 8010008:	9904      	ldr	r1, [sp, #16]
 801000a:	9a05      	ldr	r2, [sp, #20]
 801000c:	2920      	cmp	r1, #32
 801000e:	d818      	bhi.n	8010042 <__hexnan+0x7e>
 8010010:	9b02      	ldr	r3, [sp, #8]
 8010012:	459b      	cmp	fp, r3
 8010014:	dd13      	ble.n	801003e <__hexnan+0x7a>
 8010016:	454c      	cmp	r4, r9
 8010018:	d206      	bcs.n	8010028 <__hexnan+0x64>
 801001a:	2d07      	cmp	r5, #7
 801001c:	dc04      	bgt.n	8010028 <__hexnan+0x64>
 801001e:	462a      	mov	r2, r5
 8010020:	4649      	mov	r1, r9
 8010022:	4620      	mov	r0, r4
 8010024:	f7ff ffa8 	bl	800ff78 <L_shift>
 8010028:	4544      	cmp	r4, r8
 801002a:	d950      	bls.n	80100ce <__hexnan+0x10a>
 801002c:	2300      	movs	r3, #0
 801002e:	f1a4 0904 	sub.w	r9, r4, #4
 8010032:	f844 3c04 	str.w	r3, [r4, #-4]
 8010036:	f8cd b008 	str.w	fp, [sp, #8]
 801003a:	464c      	mov	r4, r9
 801003c:	461d      	mov	r5, r3
 801003e:	9a03      	ldr	r2, [sp, #12]
 8010040:	e7d7      	b.n	800fff2 <__hexnan+0x2e>
 8010042:	2929      	cmp	r1, #41	; 0x29
 8010044:	d156      	bne.n	80100f4 <__hexnan+0x130>
 8010046:	3202      	adds	r2, #2
 8010048:	f8ca 2000 	str.w	r2, [sl]
 801004c:	f1bb 0f00 	cmp.w	fp, #0
 8010050:	d050      	beq.n	80100f4 <__hexnan+0x130>
 8010052:	454c      	cmp	r4, r9
 8010054:	d206      	bcs.n	8010064 <__hexnan+0xa0>
 8010056:	2d07      	cmp	r5, #7
 8010058:	dc04      	bgt.n	8010064 <__hexnan+0xa0>
 801005a:	462a      	mov	r2, r5
 801005c:	4649      	mov	r1, r9
 801005e:	4620      	mov	r0, r4
 8010060:	f7ff ff8a 	bl	800ff78 <L_shift>
 8010064:	4544      	cmp	r4, r8
 8010066:	d934      	bls.n	80100d2 <__hexnan+0x10e>
 8010068:	f1a8 0204 	sub.w	r2, r8, #4
 801006c:	4623      	mov	r3, r4
 801006e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010072:	f842 1f04 	str.w	r1, [r2, #4]!
 8010076:	429f      	cmp	r7, r3
 8010078:	d2f9      	bcs.n	801006e <__hexnan+0xaa>
 801007a:	1b3b      	subs	r3, r7, r4
 801007c:	f023 0303 	bic.w	r3, r3, #3
 8010080:	3304      	adds	r3, #4
 8010082:	3401      	adds	r4, #1
 8010084:	3e03      	subs	r6, #3
 8010086:	42b4      	cmp	r4, r6
 8010088:	bf88      	it	hi
 801008a:	2304      	movhi	r3, #4
 801008c:	4443      	add	r3, r8
 801008e:	2200      	movs	r2, #0
 8010090:	f843 2b04 	str.w	r2, [r3], #4
 8010094:	429f      	cmp	r7, r3
 8010096:	d2fb      	bcs.n	8010090 <__hexnan+0xcc>
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	b91b      	cbnz	r3, 80100a4 <__hexnan+0xe0>
 801009c:	4547      	cmp	r7, r8
 801009e:	d127      	bne.n	80100f0 <__hexnan+0x12c>
 80100a0:	2301      	movs	r3, #1
 80100a2:	603b      	str	r3, [r7, #0]
 80100a4:	2005      	movs	r0, #5
 80100a6:	e026      	b.n	80100f6 <__hexnan+0x132>
 80100a8:	3501      	adds	r5, #1
 80100aa:	2d08      	cmp	r5, #8
 80100ac:	f10b 0b01 	add.w	fp, fp, #1
 80100b0:	dd06      	ble.n	80100c0 <__hexnan+0xfc>
 80100b2:	4544      	cmp	r4, r8
 80100b4:	d9c3      	bls.n	801003e <__hexnan+0x7a>
 80100b6:	2300      	movs	r3, #0
 80100b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80100bc:	2501      	movs	r5, #1
 80100be:	3c04      	subs	r4, #4
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	f000 000f 	and.w	r0, r0, #15
 80100c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80100ca:	6022      	str	r2, [r4, #0]
 80100cc:	e7b7      	b.n	801003e <__hexnan+0x7a>
 80100ce:	2508      	movs	r5, #8
 80100d0:	e7b5      	b.n	801003e <__hexnan+0x7a>
 80100d2:	9b01      	ldr	r3, [sp, #4]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d0df      	beq.n	8010098 <__hexnan+0xd4>
 80100d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100dc:	f1c3 0320 	rsb	r3, r3, #32
 80100e0:	fa22 f303 	lsr.w	r3, r2, r3
 80100e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80100e8:	401a      	ands	r2, r3
 80100ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80100ee:	e7d3      	b.n	8010098 <__hexnan+0xd4>
 80100f0:	3f04      	subs	r7, #4
 80100f2:	e7d1      	b.n	8010098 <__hexnan+0xd4>
 80100f4:	2004      	movs	r0, #4
 80100f6:	b007      	add	sp, #28
 80100f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100fc <_localeconv_r>:
 80100fc:	4800      	ldr	r0, [pc, #0]	; (8010100 <_localeconv_r+0x4>)
 80100fe:	4770      	bx	lr
 8010100:	2000028c 	.word	0x2000028c

08010104 <malloc>:
 8010104:	4b02      	ldr	r3, [pc, #8]	; (8010110 <malloc+0xc>)
 8010106:	4601      	mov	r1, r0
 8010108:	6818      	ldr	r0, [r3, #0]
 801010a:	f000 bd59 	b.w	8010bc0 <_malloc_r>
 801010e:	bf00      	nop
 8010110:	20000134 	.word	0x20000134

08010114 <__ascii_mbtowc>:
 8010114:	b082      	sub	sp, #8
 8010116:	b901      	cbnz	r1, 801011a <__ascii_mbtowc+0x6>
 8010118:	a901      	add	r1, sp, #4
 801011a:	b142      	cbz	r2, 801012e <__ascii_mbtowc+0x1a>
 801011c:	b14b      	cbz	r3, 8010132 <__ascii_mbtowc+0x1e>
 801011e:	7813      	ldrb	r3, [r2, #0]
 8010120:	600b      	str	r3, [r1, #0]
 8010122:	7812      	ldrb	r2, [r2, #0]
 8010124:	1e10      	subs	r0, r2, #0
 8010126:	bf18      	it	ne
 8010128:	2001      	movne	r0, #1
 801012a:	b002      	add	sp, #8
 801012c:	4770      	bx	lr
 801012e:	4610      	mov	r0, r2
 8010130:	e7fb      	b.n	801012a <__ascii_mbtowc+0x16>
 8010132:	f06f 0001 	mvn.w	r0, #1
 8010136:	e7f8      	b.n	801012a <__ascii_mbtowc+0x16>

08010138 <_Balloc>:
 8010138:	b570      	push	{r4, r5, r6, lr}
 801013a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801013c:	4604      	mov	r4, r0
 801013e:	460d      	mov	r5, r1
 8010140:	b976      	cbnz	r6, 8010160 <_Balloc+0x28>
 8010142:	2010      	movs	r0, #16
 8010144:	f7ff ffde 	bl	8010104 <malloc>
 8010148:	4602      	mov	r2, r0
 801014a:	6260      	str	r0, [r4, #36]	; 0x24
 801014c:	b920      	cbnz	r0, 8010158 <_Balloc+0x20>
 801014e:	4b18      	ldr	r3, [pc, #96]	; (80101b0 <_Balloc+0x78>)
 8010150:	4818      	ldr	r0, [pc, #96]	; (80101b4 <_Balloc+0x7c>)
 8010152:	2166      	movs	r1, #102	; 0x66
 8010154:	f000 ff3e 	bl	8010fd4 <__assert_func>
 8010158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801015c:	6006      	str	r6, [r0, #0]
 801015e:	60c6      	str	r6, [r0, #12]
 8010160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010162:	68f3      	ldr	r3, [r6, #12]
 8010164:	b183      	cbz	r3, 8010188 <_Balloc+0x50>
 8010166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801016e:	b9b8      	cbnz	r0, 80101a0 <_Balloc+0x68>
 8010170:	2101      	movs	r1, #1
 8010172:	fa01 f605 	lsl.w	r6, r1, r5
 8010176:	1d72      	adds	r2, r6, #5
 8010178:	0092      	lsls	r2, r2, #2
 801017a:	4620      	mov	r0, r4
 801017c:	f000 fc9d 	bl	8010aba <_calloc_r>
 8010180:	b160      	cbz	r0, 801019c <_Balloc+0x64>
 8010182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010186:	e00e      	b.n	80101a6 <_Balloc+0x6e>
 8010188:	2221      	movs	r2, #33	; 0x21
 801018a:	2104      	movs	r1, #4
 801018c:	4620      	mov	r0, r4
 801018e:	f000 fc94 	bl	8010aba <_calloc_r>
 8010192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010194:	60f0      	str	r0, [r6, #12]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d1e4      	bne.n	8010166 <_Balloc+0x2e>
 801019c:	2000      	movs	r0, #0
 801019e:	bd70      	pop	{r4, r5, r6, pc}
 80101a0:	6802      	ldr	r2, [r0, #0]
 80101a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80101a6:	2300      	movs	r3, #0
 80101a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101ac:	e7f7      	b.n	801019e <_Balloc+0x66>
 80101ae:	bf00      	nop
 80101b0:	0801333d 	.word	0x0801333d
 80101b4:	0801343c 	.word	0x0801343c

080101b8 <_Bfree>:
 80101b8:	b570      	push	{r4, r5, r6, lr}
 80101ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101bc:	4605      	mov	r5, r0
 80101be:	460c      	mov	r4, r1
 80101c0:	b976      	cbnz	r6, 80101e0 <_Bfree+0x28>
 80101c2:	2010      	movs	r0, #16
 80101c4:	f7ff ff9e 	bl	8010104 <malloc>
 80101c8:	4602      	mov	r2, r0
 80101ca:	6268      	str	r0, [r5, #36]	; 0x24
 80101cc:	b920      	cbnz	r0, 80101d8 <_Bfree+0x20>
 80101ce:	4b09      	ldr	r3, [pc, #36]	; (80101f4 <_Bfree+0x3c>)
 80101d0:	4809      	ldr	r0, [pc, #36]	; (80101f8 <_Bfree+0x40>)
 80101d2:	218a      	movs	r1, #138	; 0x8a
 80101d4:	f000 fefe 	bl	8010fd4 <__assert_func>
 80101d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101dc:	6006      	str	r6, [r0, #0]
 80101de:	60c6      	str	r6, [r0, #12]
 80101e0:	b13c      	cbz	r4, 80101f2 <_Bfree+0x3a>
 80101e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80101e4:	6862      	ldr	r2, [r4, #4]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101ec:	6021      	str	r1, [r4, #0]
 80101ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101f2:	bd70      	pop	{r4, r5, r6, pc}
 80101f4:	0801333d 	.word	0x0801333d
 80101f8:	0801343c 	.word	0x0801343c

080101fc <__multadd>:
 80101fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010200:	690d      	ldr	r5, [r1, #16]
 8010202:	4607      	mov	r7, r0
 8010204:	460c      	mov	r4, r1
 8010206:	461e      	mov	r6, r3
 8010208:	f101 0c14 	add.w	ip, r1, #20
 801020c:	2000      	movs	r0, #0
 801020e:	f8dc 3000 	ldr.w	r3, [ip]
 8010212:	b299      	uxth	r1, r3
 8010214:	fb02 6101 	mla	r1, r2, r1, r6
 8010218:	0c1e      	lsrs	r6, r3, #16
 801021a:	0c0b      	lsrs	r3, r1, #16
 801021c:	fb02 3306 	mla	r3, r2, r6, r3
 8010220:	b289      	uxth	r1, r1
 8010222:	3001      	adds	r0, #1
 8010224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010228:	4285      	cmp	r5, r0
 801022a:	f84c 1b04 	str.w	r1, [ip], #4
 801022e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010232:	dcec      	bgt.n	801020e <__multadd+0x12>
 8010234:	b30e      	cbz	r6, 801027a <__multadd+0x7e>
 8010236:	68a3      	ldr	r3, [r4, #8]
 8010238:	42ab      	cmp	r3, r5
 801023a:	dc19      	bgt.n	8010270 <__multadd+0x74>
 801023c:	6861      	ldr	r1, [r4, #4]
 801023e:	4638      	mov	r0, r7
 8010240:	3101      	adds	r1, #1
 8010242:	f7ff ff79 	bl	8010138 <_Balloc>
 8010246:	4680      	mov	r8, r0
 8010248:	b928      	cbnz	r0, 8010256 <__multadd+0x5a>
 801024a:	4602      	mov	r2, r0
 801024c:	4b0c      	ldr	r3, [pc, #48]	; (8010280 <__multadd+0x84>)
 801024e:	480d      	ldr	r0, [pc, #52]	; (8010284 <__multadd+0x88>)
 8010250:	21b5      	movs	r1, #181	; 0xb5
 8010252:	f000 febf 	bl	8010fd4 <__assert_func>
 8010256:	6922      	ldr	r2, [r4, #16]
 8010258:	3202      	adds	r2, #2
 801025a:	f104 010c 	add.w	r1, r4, #12
 801025e:	0092      	lsls	r2, r2, #2
 8010260:	300c      	adds	r0, #12
 8010262:	f7fd fa77 	bl	800d754 <memcpy>
 8010266:	4621      	mov	r1, r4
 8010268:	4638      	mov	r0, r7
 801026a:	f7ff ffa5 	bl	80101b8 <_Bfree>
 801026e:	4644      	mov	r4, r8
 8010270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010274:	3501      	adds	r5, #1
 8010276:	615e      	str	r6, [r3, #20]
 8010278:	6125      	str	r5, [r4, #16]
 801027a:	4620      	mov	r0, r4
 801027c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010280:	080133af 	.word	0x080133af
 8010284:	0801343c 	.word	0x0801343c

08010288 <__s2b>:
 8010288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801028c:	460c      	mov	r4, r1
 801028e:	4615      	mov	r5, r2
 8010290:	461f      	mov	r7, r3
 8010292:	2209      	movs	r2, #9
 8010294:	3308      	adds	r3, #8
 8010296:	4606      	mov	r6, r0
 8010298:	fb93 f3f2 	sdiv	r3, r3, r2
 801029c:	2100      	movs	r1, #0
 801029e:	2201      	movs	r2, #1
 80102a0:	429a      	cmp	r2, r3
 80102a2:	db09      	blt.n	80102b8 <__s2b+0x30>
 80102a4:	4630      	mov	r0, r6
 80102a6:	f7ff ff47 	bl	8010138 <_Balloc>
 80102aa:	b940      	cbnz	r0, 80102be <__s2b+0x36>
 80102ac:	4602      	mov	r2, r0
 80102ae:	4b19      	ldr	r3, [pc, #100]	; (8010314 <__s2b+0x8c>)
 80102b0:	4819      	ldr	r0, [pc, #100]	; (8010318 <__s2b+0x90>)
 80102b2:	21ce      	movs	r1, #206	; 0xce
 80102b4:	f000 fe8e 	bl	8010fd4 <__assert_func>
 80102b8:	0052      	lsls	r2, r2, #1
 80102ba:	3101      	adds	r1, #1
 80102bc:	e7f0      	b.n	80102a0 <__s2b+0x18>
 80102be:	9b08      	ldr	r3, [sp, #32]
 80102c0:	6143      	str	r3, [r0, #20]
 80102c2:	2d09      	cmp	r5, #9
 80102c4:	f04f 0301 	mov.w	r3, #1
 80102c8:	6103      	str	r3, [r0, #16]
 80102ca:	dd16      	ble.n	80102fa <__s2b+0x72>
 80102cc:	f104 0909 	add.w	r9, r4, #9
 80102d0:	46c8      	mov	r8, r9
 80102d2:	442c      	add	r4, r5
 80102d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80102d8:	4601      	mov	r1, r0
 80102da:	3b30      	subs	r3, #48	; 0x30
 80102dc:	220a      	movs	r2, #10
 80102de:	4630      	mov	r0, r6
 80102e0:	f7ff ff8c 	bl	80101fc <__multadd>
 80102e4:	45a0      	cmp	r8, r4
 80102e6:	d1f5      	bne.n	80102d4 <__s2b+0x4c>
 80102e8:	f1a5 0408 	sub.w	r4, r5, #8
 80102ec:	444c      	add	r4, r9
 80102ee:	1b2d      	subs	r5, r5, r4
 80102f0:	1963      	adds	r3, r4, r5
 80102f2:	42bb      	cmp	r3, r7
 80102f4:	db04      	blt.n	8010300 <__s2b+0x78>
 80102f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102fa:	340a      	adds	r4, #10
 80102fc:	2509      	movs	r5, #9
 80102fe:	e7f6      	b.n	80102ee <__s2b+0x66>
 8010300:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010304:	4601      	mov	r1, r0
 8010306:	3b30      	subs	r3, #48	; 0x30
 8010308:	220a      	movs	r2, #10
 801030a:	4630      	mov	r0, r6
 801030c:	f7ff ff76 	bl	80101fc <__multadd>
 8010310:	e7ee      	b.n	80102f0 <__s2b+0x68>
 8010312:	bf00      	nop
 8010314:	080133af 	.word	0x080133af
 8010318:	0801343c 	.word	0x0801343c

0801031c <__hi0bits>:
 801031c:	0c03      	lsrs	r3, r0, #16
 801031e:	041b      	lsls	r3, r3, #16
 8010320:	b9d3      	cbnz	r3, 8010358 <__hi0bits+0x3c>
 8010322:	0400      	lsls	r0, r0, #16
 8010324:	2310      	movs	r3, #16
 8010326:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801032a:	bf04      	itt	eq
 801032c:	0200      	lsleq	r0, r0, #8
 801032e:	3308      	addeq	r3, #8
 8010330:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010334:	bf04      	itt	eq
 8010336:	0100      	lsleq	r0, r0, #4
 8010338:	3304      	addeq	r3, #4
 801033a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801033e:	bf04      	itt	eq
 8010340:	0080      	lsleq	r0, r0, #2
 8010342:	3302      	addeq	r3, #2
 8010344:	2800      	cmp	r0, #0
 8010346:	db05      	blt.n	8010354 <__hi0bits+0x38>
 8010348:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801034c:	f103 0301 	add.w	r3, r3, #1
 8010350:	bf08      	it	eq
 8010352:	2320      	moveq	r3, #32
 8010354:	4618      	mov	r0, r3
 8010356:	4770      	bx	lr
 8010358:	2300      	movs	r3, #0
 801035a:	e7e4      	b.n	8010326 <__hi0bits+0xa>

0801035c <__lo0bits>:
 801035c:	6803      	ldr	r3, [r0, #0]
 801035e:	f013 0207 	ands.w	r2, r3, #7
 8010362:	4601      	mov	r1, r0
 8010364:	d00b      	beq.n	801037e <__lo0bits+0x22>
 8010366:	07da      	lsls	r2, r3, #31
 8010368:	d423      	bmi.n	80103b2 <__lo0bits+0x56>
 801036a:	0798      	lsls	r0, r3, #30
 801036c:	bf49      	itett	mi
 801036e:	085b      	lsrmi	r3, r3, #1
 8010370:	089b      	lsrpl	r3, r3, #2
 8010372:	2001      	movmi	r0, #1
 8010374:	600b      	strmi	r3, [r1, #0]
 8010376:	bf5c      	itt	pl
 8010378:	600b      	strpl	r3, [r1, #0]
 801037a:	2002      	movpl	r0, #2
 801037c:	4770      	bx	lr
 801037e:	b298      	uxth	r0, r3
 8010380:	b9a8      	cbnz	r0, 80103ae <__lo0bits+0x52>
 8010382:	0c1b      	lsrs	r3, r3, #16
 8010384:	2010      	movs	r0, #16
 8010386:	b2da      	uxtb	r2, r3
 8010388:	b90a      	cbnz	r2, 801038e <__lo0bits+0x32>
 801038a:	3008      	adds	r0, #8
 801038c:	0a1b      	lsrs	r3, r3, #8
 801038e:	071a      	lsls	r2, r3, #28
 8010390:	bf04      	itt	eq
 8010392:	091b      	lsreq	r3, r3, #4
 8010394:	3004      	addeq	r0, #4
 8010396:	079a      	lsls	r2, r3, #30
 8010398:	bf04      	itt	eq
 801039a:	089b      	lsreq	r3, r3, #2
 801039c:	3002      	addeq	r0, #2
 801039e:	07da      	lsls	r2, r3, #31
 80103a0:	d403      	bmi.n	80103aa <__lo0bits+0x4e>
 80103a2:	085b      	lsrs	r3, r3, #1
 80103a4:	f100 0001 	add.w	r0, r0, #1
 80103a8:	d005      	beq.n	80103b6 <__lo0bits+0x5a>
 80103aa:	600b      	str	r3, [r1, #0]
 80103ac:	4770      	bx	lr
 80103ae:	4610      	mov	r0, r2
 80103b0:	e7e9      	b.n	8010386 <__lo0bits+0x2a>
 80103b2:	2000      	movs	r0, #0
 80103b4:	4770      	bx	lr
 80103b6:	2020      	movs	r0, #32
 80103b8:	4770      	bx	lr
	...

080103bc <__i2b>:
 80103bc:	b510      	push	{r4, lr}
 80103be:	460c      	mov	r4, r1
 80103c0:	2101      	movs	r1, #1
 80103c2:	f7ff feb9 	bl	8010138 <_Balloc>
 80103c6:	4602      	mov	r2, r0
 80103c8:	b928      	cbnz	r0, 80103d6 <__i2b+0x1a>
 80103ca:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <__i2b+0x24>)
 80103cc:	4805      	ldr	r0, [pc, #20]	; (80103e4 <__i2b+0x28>)
 80103ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80103d2:	f000 fdff 	bl	8010fd4 <__assert_func>
 80103d6:	2301      	movs	r3, #1
 80103d8:	6144      	str	r4, [r0, #20]
 80103da:	6103      	str	r3, [r0, #16]
 80103dc:	bd10      	pop	{r4, pc}
 80103de:	bf00      	nop
 80103e0:	080133af 	.word	0x080133af
 80103e4:	0801343c 	.word	0x0801343c

080103e8 <__multiply>:
 80103e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ec:	4691      	mov	r9, r2
 80103ee:	690a      	ldr	r2, [r1, #16]
 80103f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	bfb8      	it	lt
 80103f8:	460b      	movlt	r3, r1
 80103fa:	460c      	mov	r4, r1
 80103fc:	bfbc      	itt	lt
 80103fe:	464c      	movlt	r4, r9
 8010400:	4699      	movlt	r9, r3
 8010402:	6927      	ldr	r7, [r4, #16]
 8010404:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010408:	68a3      	ldr	r3, [r4, #8]
 801040a:	6861      	ldr	r1, [r4, #4]
 801040c:	eb07 060a 	add.w	r6, r7, sl
 8010410:	42b3      	cmp	r3, r6
 8010412:	b085      	sub	sp, #20
 8010414:	bfb8      	it	lt
 8010416:	3101      	addlt	r1, #1
 8010418:	f7ff fe8e 	bl	8010138 <_Balloc>
 801041c:	b930      	cbnz	r0, 801042c <__multiply+0x44>
 801041e:	4602      	mov	r2, r0
 8010420:	4b44      	ldr	r3, [pc, #272]	; (8010534 <__multiply+0x14c>)
 8010422:	4845      	ldr	r0, [pc, #276]	; (8010538 <__multiply+0x150>)
 8010424:	f240 115d 	movw	r1, #349	; 0x15d
 8010428:	f000 fdd4 	bl	8010fd4 <__assert_func>
 801042c:	f100 0514 	add.w	r5, r0, #20
 8010430:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010434:	462b      	mov	r3, r5
 8010436:	2200      	movs	r2, #0
 8010438:	4543      	cmp	r3, r8
 801043a:	d321      	bcc.n	8010480 <__multiply+0x98>
 801043c:	f104 0314 	add.w	r3, r4, #20
 8010440:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010444:	f109 0314 	add.w	r3, r9, #20
 8010448:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801044c:	9202      	str	r2, [sp, #8]
 801044e:	1b3a      	subs	r2, r7, r4
 8010450:	3a15      	subs	r2, #21
 8010452:	f022 0203 	bic.w	r2, r2, #3
 8010456:	3204      	adds	r2, #4
 8010458:	f104 0115 	add.w	r1, r4, #21
 801045c:	428f      	cmp	r7, r1
 801045e:	bf38      	it	cc
 8010460:	2204      	movcc	r2, #4
 8010462:	9201      	str	r2, [sp, #4]
 8010464:	9a02      	ldr	r2, [sp, #8]
 8010466:	9303      	str	r3, [sp, #12]
 8010468:	429a      	cmp	r2, r3
 801046a:	d80c      	bhi.n	8010486 <__multiply+0x9e>
 801046c:	2e00      	cmp	r6, #0
 801046e:	dd03      	ble.n	8010478 <__multiply+0x90>
 8010470:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010474:	2b00      	cmp	r3, #0
 8010476:	d05a      	beq.n	801052e <__multiply+0x146>
 8010478:	6106      	str	r6, [r0, #16]
 801047a:	b005      	add	sp, #20
 801047c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010480:	f843 2b04 	str.w	r2, [r3], #4
 8010484:	e7d8      	b.n	8010438 <__multiply+0x50>
 8010486:	f8b3 a000 	ldrh.w	sl, [r3]
 801048a:	f1ba 0f00 	cmp.w	sl, #0
 801048e:	d024      	beq.n	80104da <__multiply+0xf2>
 8010490:	f104 0e14 	add.w	lr, r4, #20
 8010494:	46a9      	mov	r9, r5
 8010496:	f04f 0c00 	mov.w	ip, #0
 801049a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801049e:	f8d9 1000 	ldr.w	r1, [r9]
 80104a2:	fa1f fb82 	uxth.w	fp, r2
 80104a6:	b289      	uxth	r1, r1
 80104a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80104ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80104b0:	f8d9 2000 	ldr.w	r2, [r9]
 80104b4:	4461      	add	r1, ip
 80104b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80104ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80104be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80104c2:	b289      	uxth	r1, r1
 80104c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80104c8:	4577      	cmp	r7, lr
 80104ca:	f849 1b04 	str.w	r1, [r9], #4
 80104ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80104d2:	d8e2      	bhi.n	801049a <__multiply+0xb2>
 80104d4:	9a01      	ldr	r2, [sp, #4]
 80104d6:	f845 c002 	str.w	ip, [r5, r2]
 80104da:	9a03      	ldr	r2, [sp, #12]
 80104dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80104e0:	3304      	adds	r3, #4
 80104e2:	f1b9 0f00 	cmp.w	r9, #0
 80104e6:	d020      	beq.n	801052a <__multiply+0x142>
 80104e8:	6829      	ldr	r1, [r5, #0]
 80104ea:	f104 0c14 	add.w	ip, r4, #20
 80104ee:	46ae      	mov	lr, r5
 80104f0:	f04f 0a00 	mov.w	sl, #0
 80104f4:	f8bc b000 	ldrh.w	fp, [ip]
 80104f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80104fc:	fb09 220b 	mla	r2, r9, fp, r2
 8010500:	4492      	add	sl, r2
 8010502:	b289      	uxth	r1, r1
 8010504:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010508:	f84e 1b04 	str.w	r1, [lr], #4
 801050c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010510:	f8be 1000 	ldrh.w	r1, [lr]
 8010514:	0c12      	lsrs	r2, r2, #16
 8010516:	fb09 1102 	mla	r1, r9, r2, r1
 801051a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801051e:	4567      	cmp	r7, ip
 8010520:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010524:	d8e6      	bhi.n	80104f4 <__multiply+0x10c>
 8010526:	9a01      	ldr	r2, [sp, #4]
 8010528:	50a9      	str	r1, [r5, r2]
 801052a:	3504      	adds	r5, #4
 801052c:	e79a      	b.n	8010464 <__multiply+0x7c>
 801052e:	3e01      	subs	r6, #1
 8010530:	e79c      	b.n	801046c <__multiply+0x84>
 8010532:	bf00      	nop
 8010534:	080133af 	.word	0x080133af
 8010538:	0801343c 	.word	0x0801343c

0801053c <__pow5mult>:
 801053c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010540:	4615      	mov	r5, r2
 8010542:	f012 0203 	ands.w	r2, r2, #3
 8010546:	4606      	mov	r6, r0
 8010548:	460f      	mov	r7, r1
 801054a:	d007      	beq.n	801055c <__pow5mult+0x20>
 801054c:	4c25      	ldr	r4, [pc, #148]	; (80105e4 <__pow5mult+0xa8>)
 801054e:	3a01      	subs	r2, #1
 8010550:	2300      	movs	r3, #0
 8010552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010556:	f7ff fe51 	bl	80101fc <__multadd>
 801055a:	4607      	mov	r7, r0
 801055c:	10ad      	asrs	r5, r5, #2
 801055e:	d03d      	beq.n	80105dc <__pow5mult+0xa0>
 8010560:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010562:	b97c      	cbnz	r4, 8010584 <__pow5mult+0x48>
 8010564:	2010      	movs	r0, #16
 8010566:	f7ff fdcd 	bl	8010104 <malloc>
 801056a:	4602      	mov	r2, r0
 801056c:	6270      	str	r0, [r6, #36]	; 0x24
 801056e:	b928      	cbnz	r0, 801057c <__pow5mult+0x40>
 8010570:	4b1d      	ldr	r3, [pc, #116]	; (80105e8 <__pow5mult+0xac>)
 8010572:	481e      	ldr	r0, [pc, #120]	; (80105ec <__pow5mult+0xb0>)
 8010574:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010578:	f000 fd2c 	bl	8010fd4 <__assert_func>
 801057c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010580:	6004      	str	r4, [r0, #0]
 8010582:	60c4      	str	r4, [r0, #12]
 8010584:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801058c:	b94c      	cbnz	r4, 80105a2 <__pow5mult+0x66>
 801058e:	f240 2171 	movw	r1, #625	; 0x271
 8010592:	4630      	mov	r0, r6
 8010594:	f7ff ff12 	bl	80103bc <__i2b>
 8010598:	2300      	movs	r3, #0
 801059a:	f8c8 0008 	str.w	r0, [r8, #8]
 801059e:	4604      	mov	r4, r0
 80105a0:	6003      	str	r3, [r0, #0]
 80105a2:	f04f 0900 	mov.w	r9, #0
 80105a6:	07eb      	lsls	r3, r5, #31
 80105a8:	d50a      	bpl.n	80105c0 <__pow5mult+0x84>
 80105aa:	4639      	mov	r1, r7
 80105ac:	4622      	mov	r2, r4
 80105ae:	4630      	mov	r0, r6
 80105b0:	f7ff ff1a 	bl	80103e8 <__multiply>
 80105b4:	4639      	mov	r1, r7
 80105b6:	4680      	mov	r8, r0
 80105b8:	4630      	mov	r0, r6
 80105ba:	f7ff fdfd 	bl	80101b8 <_Bfree>
 80105be:	4647      	mov	r7, r8
 80105c0:	106d      	asrs	r5, r5, #1
 80105c2:	d00b      	beq.n	80105dc <__pow5mult+0xa0>
 80105c4:	6820      	ldr	r0, [r4, #0]
 80105c6:	b938      	cbnz	r0, 80105d8 <__pow5mult+0x9c>
 80105c8:	4622      	mov	r2, r4
 80105ca:	4621      	mov	r1, r4
 80105cc:	4630      	mov	r0, r6
 80105ce:	f7ff ff0b 	bl	80103e8 <__multiply>
 80105d2:	6020      	str	r0, [r4, #0]
 80105d4:	f8c0 9000 	str.w	r9, [r0]
 80105d8:	4604      	mov	r4, r0
 80105da:	e7e4      	b.n	80105a6 <__pow5mult+0x6a>
 80105dc:	4638      	mov	r0, r7
 80105de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105e2:	bf00      	nop
 80105e4:	08013588 	.word	0x08013588
 80105e8:	0801333d 	.word	0x0801333d
 80105ec:	0801343c 	.word	0x0801343c

080105f0 <__lshift>:
 80105f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f4:	460c      	mov	r4, r1
 80105f6:	6849      	ldr	r1, [r1, #4]
 80105f8:	6923      	ldr	r3, [r4, #16]
 80105fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105fe:	68a3      	ldr	r3, [r4, #8]
 8010600:	4607      	mov	r7, r0
 8010602:	4691      	mov	r9, r2
 8010604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010608:	f108 0601 	add.w	r6, r8, #1
 801060c:	42b3      	cmp	r3, r6
 801060e:	db0b      	blt.n	8010628 <__lshift+0x38>
 8010610:	4638      	mov	r0, r7
 8010612:	f7ff fd91 	bl	8010138 <_Balloc>
 8010616:	4605      	mov	r5, r0
 8010618:	b948      	cbnz	r0, 801062e <__lshift+0x3e>
 801061a:	4602      	mov	r2, r0
 801061c:	4b2a      	ldr	r3, [pc, #168]	; (80106c8 <__lshift+0xd8>)
 801061e:	482b      	ldr	r0, [pc, #172]	; (80106cc <__lshift+0xdc>)
 8010620:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010624:	f000 fcd6 	bl	8010fd4 <__assert_func>
 8010628:	3101      	adds	r1, #1
 801062a:	005b      	lsls	r3, r3, #1
 801062c:	e7ee      	b.n	801060c <__lshift+0x1c>
 801062e:	2300      	movs	r3, #0
 8010630:	f100 0114 	add.w	r1, r0, #20
 8010634:	f100 0210 	add.w	r2, r0, #16
 8010638:	4618      	mov	r0, r3
 801063a:	4553      	cmp	r3, sl
 801063c:	db37      	blt.n	80106ae <__lshift+0xbe>
 801063e:	6920      	ldr	r0, [r4, #16]
 8010640:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010644:	f104 0314 	add.w	r3, r4, #20
 8010648:	f019 091f 	ands.w	r9, r9, #31
 801064c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010650:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010654:	d02f      	beq.n	80106b6 <__lshift+0xc6>
 8010656:	f1c9 0e20 	rsb	lr, r9, #32
 801065a:	468a      	mov	sl, r1
 801065c:	f04f 0c00 	mov.w	ip, #0
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	fa02 f209 	lsl.w	r2, r2, r9
 8010666:	ea42 020c 	orr.w	r2, r2, ip
 801066a:	f84a 2b04 	str.w	r2, [sl], #4
 801066e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010672:	4298      	cmp	r0, r3
 8010674:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010678:	d8f2      	bhi.n	8010660 <__lshift+0x70>
 801067a:	1b03      	subs	r3, r0, r4
 801067c:	3b15      	subs	r3, #21
 801067e:	f023 0303 	bic.w	r3, r3, #3
 8010682:	3304      	adds	r3, #4
 8010684:	f104 0215 	add.w	r2, r4, #21
 8010688:	4290      	cmp	r0, r2
 801068a:	bf38      	it	cc
 801068c:	2304      	movcc	r3, #4
 801068e:	f841 c003 	str.w	ip, [r1, r3]
 8010692:	f1bc 0f00 	cmp.w	ip, #0
 8010696:	d001      	beq.n	801069c <__lshift+0xac>
 8010698:	f108 0602 	add.w	r6, r8, #2
 801069c:	3e01      	subs	r6, #1
 801069e:	4638      	mov	r0, r7
 80106a0:	612e      	str	r6, [r5, #16]
 80106a2:	4621      	mov	r1, r4
 80106a4:	f7ff fd88 	bl	80101b8 <_Bfree>
 80106a8:	4628      	mov	r0, r5
 80106aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80106b2:	3301      	adds	r3, #1
 80106b4:	e7c1      	b.n	801063a <__lshift+0x4a>
 80106b6:	3904      	subs	r1, #4
 80106b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80106bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80106c0:	4298      	cmp	r0, r3
 80106c2:	d8f9      	bhi.n	80106b8 <__lshift+0xc8>
 80106c4:	e7ea      	b.n	801069c <__lshift+0xac>
 80106c6:	bf00      	nop
 80106c8:	080133af 	.word	0x080133af
 80106cc:	0801343c 	.word	0x0801343c

080106d0 <__mcmp>:
 80106d0:	b530      	push	{r4, r5, lr}
 80106d2:	6902      	ldr	r2, [r0, #16]
 80106d4:	690c      	ldr	r4, [r1, #16]
 80106d6:	1b12      	subs	r2, r2, r4
 80106d8:	d10e      	bne.n	80106f8 <__mcmp+0x28>
 80106da:	f100 0314 	add.w	r3, r0, #20
 80106de:	3114      	adds	r1, #20
 80106e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80106e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80106e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80106ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80106f0:	42a5      	cmp	r5, r4
 80106f2:	d003      	beq.n	80106fc <__mcmp+0x2c>
 80106f4:	d305      	bcc.n	8010702 <__mcmp+0x32>
 80106f6:	2201      	movs	r2, #1
 80106f8:	4610      	mov	r0, r2
 80106fa:	bd30      	pop	{r4, r5, pc}
 80106fc:	4283      	cmp	r3, r0
 80106fe:	d3f3      	bcc.n	80106e8 <__mcmp+0x18>
 8010700:	e7fa      	b.n	80106f8 <__mcmp+0x28>
 8010702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010706:	e7f7      	b.n	80106f8 <__mcmp+0x28>

08010708 <__mdiff>:
 8010708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070c:	460c      	mov	r4, r1
 801070e:	4606      	mov	r6, r0
 8010710:	4611      	mov	r1, r2
 8010712:	4620      	mov	r0, r4
 8010714:	4690      	mov	r8, r2
 8010716:	f7ff ffdb 	bl	80106d0 <__mcmp>
 801071a:	1e05      	subs	r5, r0, #0
 801071c:	d110      	bne.n	8010740 <__mdiff+0x38>
 801071e:	4629      	mov	r1, r5
 8010720:	4630      	mov	r0, r6
 8010722:	f7ff fd09 	bl	8010138 <_Balloc>
 8010726:	b930      	cbnz	r0, 8010736 <__mdiff+0x2e>
 8010728:	4b3a      	ldr	r3, [pc, #232]	; (8010814 <__mdiff+0x10c>)
 801072a:	4602      	mov	r2, r0
 801072c:	f240 2132 	movw	r1, #562	; 0x232
 8010730:	4839      	ldr	r0, [pc, #228]	; (8010818 <__mdiff+0x110>)
 8010732:	f000 fc4f 	bl	8010fd4 <__assert_func>
 8010736:	2301      	movs	r3, #1
 8010738:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801073c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010740:	bfa4      	itt	ge
 8010742:	4643      	movge	r3, r8
 8010744:	46a0      	movge	r8, r4
 8010746:	4630      	mov	r0, r6
 8010748:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801074c:	bfa6      	itte	ge
 801074e:	461c      	movge	r4, r3
 8010750:	2500      	movge	r5, #0
 8010752:	2501      	movlt	r5, #1
 8010754:	f7ff fcf0 	bl	8010138 <_Balloc>
 8010758:	b920      	cbnz	r0, 8010764 <__mdiff+0x5c>
 801075a:	4b2e      	ldr	r3, [pc, #184]	; (8010814 <__mdiff+0x10c>)
 801075c:	4602      	mov	r2, r0
 801075e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010762:	e7e5      	b.n	8010730 <__mdiff+0x28>
 8010764:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010768:	6926      	ldr	r6, [r4, #16]
 801076a:	60c5      	str	r5, [r0, #12]
 801076c:	f104 0914 	add.w	r9, r4, #20
 8010770:	f108 0514 	add.w	r5, r8, #20
 8010774:	f100 0e14 	add.w	lr, r0, #20
 8010778:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801077c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010780:	f108 0210 	add.w	r2, r8, #16
 8010784:	46f2      	mov	sl, lr
 8010786:	2100      	movs	r1, #0
 8010788:	f859 3b04 	ldr.w	r3, [r9], #4
 801078c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010790:	fa1f f883 	uxth.w	r8, r3
 8010794:	fa11 f18b 	uxtah	r1, r1, fp
 8010798:	0c1b      	lsrs	r3, r3, #16
 801079a:	eba1 0808 	sub.w	r8, r1, r8
 801079e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80107a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80107a6:	fa1f f888 	uxth.w	r8, r8
 80107aa:	1419      	asrs	r1, r3, #16
 80107ac:	454e      	cmp	r6, r9
 80107ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80107b2:	f84a 3b04 	str.w	r3, [sl], #4
 80107b6:	d8e7      	bhi.n	8010788 <__mdiff+0x80>
 80107b8:	1b33      	subs	r3, r6, r4
 80107ba:	3b15      	subs	r3, #21
 80107bc:	f023 0303 	bic.w	r3, r3, #3
 80107c0:	3304      	adds	r3, #4
 80107c2:	3415      	adds	r4, #21
 80107c4:	42a6      	cmp	r6, r4
 80107c6:	bf38      	it	cc
 80107c8:	2304      	movcc	r3, #4
 80107ca:	441d      	add	r5, r3
 80107cc:	4473      	add	r3, lr
 80107ce:	469e      	mov	lr, r3
 80107d0:	462e      	mov	r6, r5
 80107d2:	4566      	cmp	r6, ip
 80107d4:	d30e      	bcc.n	80107f4 <__mdiff+0xec>
 80107d6:	f10c 0203 	add.w	r2, ip, #3
 80107da:	1b52      	subs	r2, r2, r5
 80107dc:	f022 0203 	bic.w	r2, r2, #3
 80107e0:	3d03      	subs	r5, #3
 80107e2:	45ac      	cmp	ip, r5
 80107e4:	bf38      	it	cc
 80107e6:	2200      	movcc	r2, #0
 80107e8:	441a      	add	r2, r3
 80107ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80107ee:	b17b      	cbz	r3, 8010810 <__mdiff+0x108>
 80107f0:	6107      	str	r7, [r0, #16]
 80107f2:	e7a3      	b.n	801073c <__mdiff+0x34>
 80107f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80107f8:	fa11 f288 	uxtah	r2, r1, r8
 80107fc:	1414      	asrs	r4, r2, #16
 80107fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010802:	b292      	uxth	r2, r2
 8010804:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010808:	f84e 2b04 	str.w	r2, [lr], #4
 801080c:	1421      	asrs	r1, r4, #16
 801080e:	e7e0      	b.n	80107d2 <__mdiff+0xca>
 8010810:	3f01      	subs	r7, #1
 8010812:	e7ea      	b.n	80107ea <__mdiff+0xe2>
 8010814:	080133af 	.word	0x080133af
 8010818:	0801343c 	.word	0x0801343c

0801081c <__ulp>:
 801081c:	b082      	sub	sp, #8
 801081e:	ed8d 0b00 	vstr	d0, [sp]
 8010822:	9b01      	ldr	r3, [sp, #4]
 8010824:	4912      	ldr	r1, [pc, #72]	; (8010870 <__ulp+0x54>)
 8010826:	4019      	ands	r1, r3
 8010828:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801082c:	2900      	cmp	r1, #0
 801082e:	dd05      	ble.n	801083c <__ulp+0x20>
 8010830:	2200      	movs	r2, #0
 8010832:	460b      	mov	r3, r1
 8010834:	ec43 2b10 	vmov	d0, r2, r3
 8010838:	b002      	add	sp, #8
 801083a:	4770      	bx	lr
 801083c:	4249      	negs	r1, r1
 801083e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010842:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010846:	f04f 0200 	mov.w	r2, #0
 801084a:	f04f 0300 	mov.w	r3, #0
 801084e:	da04      	bge.n	801085a <__ulp+0x3e>
 8010850:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010854:	fa41 f300 	asr.w	r3, r1, r0
 8010858:	e7ec      	b.n	8010834 <__ulp+0x18>
 801085a:	f1a0 0114 	sub.w	r1, r0, #20
 801085e:	291e      	cmp	r1, #30
 8010860:	bfda      	itte	le
 8010862:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010866:	fa20 f101 	lsrle.w	r1, r0, r1
 801086a:	2101      	movgt	r1, #1
 801086c:	460a      	mov	r2, r1
 801086e:	e7e1      	b.n	8010834 <__ulp+0x18>
 8010870:	7ff00000 	.word	0x7ff00000

08010874 <__b2d>:
 8010874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010876:	6905      	ldr	r5, [r0, #16]
 8010878:	f100 0714 	add.w	r7, r0, #20
 801087c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010880:	1f2e      	subs	r6, r5, #4
 8010882:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010886:	4620      	mov	r0, r4
 8010888:	f7ff fd48 	bl	801031c <__hi0bits>
 801088c:	f1c0 0320 	rsb	r3, r0, #32
 8010890:	280a      	cmp	r0, #10
 8010892:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010910 <__b2d+0x9c>
 8010896:	600b      	str	r3, [r1, #0]
 8010898:	dc14      	bgt.n	80108c4 <__b2d+0x50>
 801089a:	f1c0 0e0b 	rsb	lr, r0, #11
 801089e:	fa24 f10e 	lsr.w	r1, r4, lr
 80108a2:	42b7      	cmp	r7, r6
 80108a4:	ea41 030c 	orr.w	r3, r1, ip
 80108a8:	bf34      	ite	cc
 80108aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80108ae:	2100      	movcs	r1, #0
 80108b0:	3015      	adds	r0, #21
 80108b2:	fa04 f000 	lsl.w	r0, r4, r0
 80108b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80108ba:	ea40 0201 	orr.w	r2, r0, r1
 80108be:	ec43 2b10 	vmov	d0, r2, r3
 80108c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108c4:	42b7      	cmp	r7, r6
 80108c6:	bf3a      	itte	cc
 80108c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80108cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80108d0:	2100      	movcs	r1, #0
 80108d2:	380b      	subs	r0, #11
 80108d4:	d017      	beq.n	8010906 <__b2d+0x92>
 80108d6:	f1c0 0c20 	rsb	ip, r0, #32
 80108da:	fa04 f500 	lsl.w	r5, r4, r0
 80108de:	42be      	cmp	r6, r7
 80108e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80108e4:	ea45 0504 	orr.w	r5, r5, r4
 80108e8:	bf8c      	ite	hi
 80108ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80108ee:	2400      	movls	r4, #0
 80108f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80108f4:	fa01 f000 	lsl.w	r0, r1, r0
 80108f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80108fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010900:	ea40 0204 	orr.w	r2, r0, r4
 8010904:	e7db      	b.n	80108be <__b2d+0x4a>
 8010906:	ea44 030c 	orr.w	r3, r4, ip
 801090a:	460a      	mov	r2, r1
 801090c:	e7d7      	b.n	80108be <__b2d+0x4a>
 801090e:	bf00      	nop
 8010910:	3ff00000 	.word	0x3ff00000

08010914 <__d2b>:
 8010914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010918:	4689      	mov	r9, r1
 801091a:	2101      	movs	r1, #1
 801091c:	ec57 6b10 	vmov	r6, r7, d0
 8010920:	4690      	mov	r8, r2
 8010922:	f7ff fc09 	bl	8010138 <_Balloc>
 8010926:	4604      	mov	r4, r0
 8010928:	b930      	cbnz	r0, 8010938 <__d2b+0x24>
 801092a:	4602      	mov	r2, r0
 801092c:	4b25      	ldr	r3, [pc, #148]	; (80109c4 <__d2b+0xb0>)
 801092e:	4826      	ldr	r0, [pc, #152]	; (80109c8 <__d2b+0xb4>)
 8010930:	f240 310a 	movw	r1, #778	; 0x30a
 8010934:	f000 fb4e 	bl	8010fd4 <__assert_func>
 8010938:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801093c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010940:	bb35      	cbnz	r5, 8010990 <__d2b+0x7c>
 8010942:	2e00      	cmp	r6, #0
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	d028      	beq.n	801099a <__d2b+0x86>
 8010948:	4668      	mov	r0, sp
 801094a:	9600      	str	r6, [sp, #0]
 801094c:	f7ff fd06 	bl	801035c <__lo0bits>
 8010950:	9900      	ldr	r1, [sp, #0]
 8010952:	b300      	cbz	r0, 8010996 <__d2b+0x82>
 8010954:	9a01      	ldr	r2, [sp, #4]
 8010956:	f1c0 0320 	rsb	r3, r0, #32
 801095a:	fa02 f303 	lsl.w	r3, r2, r3
 801095e:	430b      	orrs	r3, r1
 8010960:	40c2      	lsrs	r2, r0
 8010962:	6163      	str	r3, [r4, #20]
 8010964:	9201      	str	r2, [sp, #4]
 8010966:	9b01      	ldr	r3, [sp, #4]
 8010968:	61a3      	str	r3, [r4, #24]
 801096a:	2b00      	cmp	r3, #0
 801096c:	bf14      	ite	ne
 801096e:	2202      	movne	r2, #2
 8010970:	2201      	moveq	r2, #1
 8010972:	6122      	str	r2, [r4, #16]
 8010974:	b1d5      	cbz	r5, 80109ac <__d2b+0x98>
 8010976:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801097a:	4405      	add	r5, r0
 801097c:	f8c9 5000 	str.w	r5, [r9]
 8010980:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010984:	f8c8 0000 	str.w	r0, [r8]
 8010988:	4620      	mov	r0, r4
 801098a:	b003      	add	sp, #12
 801098c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010994:	e7d5      	b.n	8010942 <__d2b+0x2e>
 8010996:	6161      	str	r1, [r4, #20]
 8010998:	e7e5      	b.n	8010966 <__d2b+0x52>
 801099a:	a801      	add	r0, sp, #4
 801099c:	f7ff fcde 	bl	801035c <__lo0bits>
 80109a0:	9b01      	ldr	r3, [sp, #4]
 80109a2:	6163      	str	r3, [r4, #20]
 80109a4:	2201      	movs	r2, #1
 80109a6:	6122      	str	r2, [r4, #16]
 80109a8:	3020      	adds	r0, #32
 80109aa:	e7e3      	b.n	8010974 <__d2b+0x60>
 80109ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80109b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80109b4:	f8c9 0000 	str.w	r0, [r9]
 80109b8:	6918      	ldr	r0, [r3, #16]
 80109ba:	f7ff fcaf 	bl	801031c <__hi0bits>
 80109be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80109c2:	e7df      	b.n	8010984 <__d2b+0x70>
 80109c4:	080133af 	.word	0x080133af
 80109c8:	0801343c 	.word	0x0801343c

080109cc <__ratio>:
 80109cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d0:	4688      	mov	r8, r1
 80109d2:	4669      	mov	r1, sp
 80109d4:	4681      	mov	r9, r0
 80109d6:	f7ff ff4d 	bl	8010874 <__b2d>
 80109da:	a901      	add	r1, sp, #4
 80109dc:	4640      	mov	r0, r8
 80109de:	ec55 4b10 	vmov	r4, r5, d0
 80109e2:	f7ff ff47 	bl	8010874 <__b2d>
 80109e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80109ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80109ee:	eba3 0c02 	sub.w	ip, r3, r2
 80109f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80109f6:	1a9b      	subs	r3, r3, r2
 80109f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80109fc:	ec51 0b10 	vmov	r0, r1, d0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	bfd6      	itet	le
 8010a04:	460a      	movle	r2, r1
 8010a06:	462a      	movgt	r2, r5
 8010a08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010a0c:	468b      	mov	fp, r1
 8010a0e:	462f      	mov	r7, r5
 8010a10:	bfd4      	ite	le
 8010a12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010a16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	ee10 2a10 	vmov	r2, s0
 8010a20:	465b      	mov	r3, fp
 8010a22:	4639      	mov	r1, r7
 8010a24:	f7ef ff42 	bl	80008ac <__aeabi_ddiv>
 8010a28:	ec41 0b10 	vmov	d0, r0, r1
 8010a2c:	b003      	add	sp, #12
 8010a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a32 <__copybits>:
 8010a32:	3901      	subs	r1, #1
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	1149      	asrs	r1, r1, #5
 8010a38:	6914      	ldr	r4, [r2, #16]
 8010a3a:	3101      	adds	r1, #1
 8010a3c:	f102 0314 	add.w	r3, r2, #20
 8010a40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010a44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a48:	1f05      	subs	r5, r0, #4
 8010a4a:	42a3      	cmp	r3, r4
 8010a4c:	d30c      	bcc.n	8010a68 <__copybits+0x36>
 8010a4e:	1aa3      	subs	r3, r4, r2
 8010a50:	3b11      	subs	r3, #17
 8010a52:	f023 0303 	bic.w	r3, r3, #3
 8010a56:	3211      	adds	r2, #17
 8010a58:	42a2      	cmp	r2, r4
 8010a5a:	bf88      	it	hi
 8010a5c:	2300      	movhi	r3, #0
 8010a5e:	4418      	add	r0, r3
 8010a60:	2300      	movs	r3, #0
 8010a62:	4288      	cmp	r0, r1
 8010a64:	d305      	bcc.n	8010a72 <__copybits+0x40>
 8010a66:	bd70      	pop	{r4, r5, r6, pc}
 8010a68:	f853 6b04 	ldr.w	r6, [r3], #4
 8010a6c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010a70:	e7eb      	b.n	8010a4a <__copybits+0x18>
 8010a72:	f840 3b04 	str.w	r3, [r0], #4
 8010a76:	e7f4      	b.n	8010a62 <__copybits+0x30>

08010a78 <__any_on>:
 8010a78:	f100 0214 	add.w	r2, r0, #20
 8010a7c:	6900      	ldr	r0, [r0, #16]
 8010a7e:	114b      	asrs	r3, r1, #5
 8010a80:	4298      	cmp	r0, r3
 8010a82:	b510      	push	{r4, lr}
 8010a84:	db11      	blt.n	8010aaa <__any_on+0x32>
 8010a86:	dd0a      	ble.n	8010a9e <__any_on+0x26>
 8010a88:	f011 011f 	ands.w	r1, r1, #31
 8010a8c:	d007      	beq.n	8010a9e <__any_on+0x26>
 8010a8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010a92:	fa24 f001 	lsr.w	r0, r4, r1
 8010a96:	fa00 f101 	lsl.w	r1, r0, r1
 8010a9a:	428c      	cmp	r4, r1
 8010a9c:	d10b      	bne.n	8010ab6 <__any_on+0x3e>
 8010a9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d803      	bhi.n	8010aae <__any_on+0x36>
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	bd10      	pop	{r4, pc}
 8010aaa:	4603      	mov	r3, r0
 8010aac:	e7f7      	b.n	8010a9e <__any_on+0x26>
 8010aae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ab2:	2900      	cmp	r1, #0
 8010ab4:	d0f5      	beq.n	8010aa2 <__any_on+0x2a>
 8010ab6:	2001      	movs	r0, #1
 8010ab8:	e7f6      	b.n	8010aa8 <__any_on+0x30>

08010aba <_calloc_r>:
 8010aba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010abc:	fba1 2402 	umull	r2, r4, r1, r2
 8010ac0:	b94c      	cbnz	r4, 8010ad6 <_calloc_r+0x1c>
 8010ac2:	4611      	mov	r1, r2
 8010ac4:	9201      	str	r2, [sp, #4]
 8010ac6:	f000 f87b 	bl	8010bc0 <_malloc_r>
 8010aca:	9a01      	ldr	r2, [sp, #4]
 8010acc:	4605      	mov	r5, r0
 8010ace:	b930      	cbnz	r0, 8010ade <_calloc_r+0x24>
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	b003      	add	sp, #12
 8010ad4:	bd30      	pop	{r4, r5, pc}
 8010ad6:	220c      	movs	r2, #12
 8010ad8:	6002      	str	r2, [r0, #0]
 8010ada:	2500      	movs	r5, #0
 8010adc:	e7f8      	b.n	8010ad0 <_calloc_r+0x16>
 8010ade:	4621      	mov	r1, r4
 8010ae0:	f7fc fe46 	bl	800d770 <memset>
 8010ae4:	e7f4      	b.n	8010ad0 <_calloc_r+0x16>
	...

08010ae8 <_free_r>:
 8010ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010aea:	2900      	cmp	r1, #0
 8010aec:	d044      	beq.n	8010b78 <_free_r+0x90>
 8010aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010af2:	9001      	str	r0, [sp, #4]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f1a1 0404 	sub.w	r4, r1, #4
 8010afa:	bfb8      	it	lt
 8010afc:	18e4      	addlt	r4, r4, r3
 8010afe:	f000 fab3 	bl	8011068 <__malloc_lock>
 8010b02:	4a1e      	ldr	r2, [pc, #120]	; (8010b7c <_free_r+0x94>)
 8010b04:	9801      	ldr	r0, [sp, #4]
 8010b06:	6813      	ldr	r3, [r2, #0]
 8010b08:	b933      	cbnz	r3, 8010b18 <_free_r+0x30>
 8010b0a:	6063      	str	r3, [r4, #4]
 8010b0c:	6014      	str	r4, [r2, #0]
 8010b0e:	b003      	add	sp, #12
 8010b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b14:	f000 baae 	b.w	8011074 <__malloc_unlock>
 8010b18:	42a3      	cmp	r3, r4
 8010b1a:	d908      	bls.n	8010b2e <_free_r+0x46>
 8010b1c:	6825      	ldr	r5, [r4, #0]
 8010b1e:	1961      	adds	r1, r4, r5
 8010b20:	428b      	cmp	r3, r1
 8010b22:	bf01      	itttt	eq
 8010b24:	6819      	ldreq	r1, [r3, #0]
 8010b26:	685b      	ldreq	r3, [r3, #4]
 8010b28:	1949      	addeq	r1, r1, r5
 8010b2a:	6021      	streq	r1, [r4, #0]
 8010b2c:	e7ed      	b.n	8010b0a <_free_r+0x22>
 8010b2e:	461a      	mov	r2, r3
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	b10b      	cbz	r3, 8010b38 <_free_r+0x50>
 8010b34:	42a3      	cmp	r3, r4
 8010b36:	d9fa      	bls.n	8010b2e <_free_r+0x46>
 8010b38:	6811      	ldr	r1, [r2, #0]
 8010b3a:	1855      	adds	r5, r2, r1
 8010b3c:	42a5      	cmp	r5, r4
 8010b3e:	d10b      	bne.n	8010b58 <_free_r+0x70>
 8010b40:	6824      	ldr	r4, [r4, #0]
 8010b42:	4421      	add	r1, r4
 8010b44:	1854      	adds	r4, r2, r1
 8010b46:	42a3      	cmp	r3, r4
 8010b48:	6011      	str	r1, [r2, #0]
 8010b4a:	d1e0      	bne.n	8010b0e <_free_r+0x26>
 8010b4c:	681c      	ldr	r4, [r3, #0]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	6053      	str	r3, [r2, #4]
 8010b52:	4421      	add	r1, r4
 8010b54:	6011      	str	r1, [r2, #0]
 8010b56:	e7da      	b.n	8010b0e <_free_r+0x26>
 8010b58:	d902      	bls.n	8010b60 <_free_r+0x78>
 8010b5a:	230c      	movs	r3, #12
 8010b5c:	6003      	str	r3, [r0, #0]
 8010b5e:	e7d6      	b.n	8010b0e <_free_r+0x26>
 8010b60:	6825      	ldr	r5, [r4, #0]
 8010b62:	1961      	adds	r1, r4, r5
 8010b64:	428b      	cmp	r3, r1
 8010b66:	bf04      	itt	eq
 8010b68:	6819      	ldreq	r1, [r3, #0]
 8010b6a:	685b      	ldreq	r3, [r3, #4]
 8010b6c:	6063      	str	r3, [r4, #4]
 8010b6e:	bf04      	itt	eq
 8010b70:	1949      	addeq	r1, r1, r5
 8010b72:	6021      	streq	r1, [r4, #0]
 8010b74:	6054      	str	r4, [r2, #4]
 8010b76:	e7ca      	b.n	8010b0e <_free_r+0x26>
 8010b78:	b003      	add	sp, #12
 8010b7a:	bd30      	pop	{r4, r5, pc}
 8010b7c:	20002428 	.word	0x20002428

08010b80 <sbrk_aligned>:
 8010b80:	b570      	push	{r4, r5, r6, lr}
 8010b82:	4e0e      	ldr	r6, [pc, #56]	; (8010bbc <sbrk_aligned+0x3c>)
 8010b84:	460c      	mov	r4, r1
 8010b86:	6831      	ldr	r1, [r6, #0]
 8010b88:	4605      	mov	r5, r0
 8010b8a:	b911      	cbnz	r1, 8010b92 <sbrk_aligned+0x12>
 8010b8c:	f000 f9f0 	bl	8010f70 <_sbrk_r>
 8010b90:	6030      	str	r0, [r6, #0]
 8010b92:	4621      	mov	r1, r4
 8010b94:	4628      	mov	r0, r5
 8010b96:	f000 f9eb 	bl	8010f70 <_sbrk_r>
 8010b9a:	1c43      	adds	r3, r0, #1
 8010b9c:	d00a      	beq.n	8010bb4 <sbrk_aligned+0x34>
 8010b9e:	1cc4      	adds	r4, r0, #3
 8010ba0:	f024 0403 	bic.w	r4, r4, #3
 8010ba4:	42a0      	cmp	r0, r4
 8010ba6:	d007      	beq.n	8010bb8 <sbrk_aligned+0x38>
 8010ba8:	1a21      	subs	r1, r4, r0
 8010baa:	4628      	mov	r0, r5
 8010bac:	f000 f9e0 	bl	8010f70 <_sbrk_r>
 8010bb0:	3001      	adds	r0, #1
 8010bb2:	d101      	bne.n	8010bb8 <sbrk_aligned+0x38>
 8010bb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010bb8:	4620      	mov	r0, r4
 8010bba:	bd70      	pop	{r4, r5, r6, pc}
 8010bbc:	2000242c 	.word	0x2000242c

08010bc0 <_malloc_r>:
 8010bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc4:	1ccd      	adds	r5, r1, #3
 8010bc6:	f025 0503 	bic.w	r5, r5, #3
 8010bca:	3508      	adds	r5, #8
 8010bcc:	2d0c      	cmp	r5, #12
 8010bce:	bf38      	it	cc
 8010bd0:	250c      	movcc	r5, #12
 8010bd2:	2d00      	cmp	r5, #0
 8010bd4:	4607      	mov	r7, r0
 8010bd6:	db01      	blt.n	8010bdc <_malloc_r+0x1c>
 8010bd8:	42a9      	cmp	r1, r5
 8010bda:	d905      	bls.n	8010be8 <_malloc_r+0x28>
 8010bdc:	230c      	movs	r3, #12
 8010bde:	603b      	str	r3, [r7, #0]
 8010be0:	2600      	movs	r6, #0
 8010be2:	4630      	mov	r0, r6
 8010be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010be8:	4e2e      	ldr	r6, [pc, #184]	; (8010ca4 <_malloc_r+0xe4>)
 8010bea:	f000 fa3d 	bl	8011068 <__malloc_lock>
 8010bee:	6833      	ldr	r3, [r6, #0]
 8010bf0:	461c      	mov	r4, r3
 8010bf2:	bb34      	cbnz	r4, 8010c42 <_malloc_r+0x82>
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	f7ff ffc2 	bl	8010b80 <sbrk_aligned>
 8010bfc:	1c43      	adds	r3, r0, #1
 8010bfe:	4604      	mov	r4, r0
 8010c00:	d14d      	bne.n	8010c9e <_malloc_r+0xde>
 8010c02:	6834      	ldr	r4, [r6, #0]
 8010c04:	4626      	mov	r6, r4
 8010c06:	2e00      	cmp	r6, #0
 8010c08:	d140      	bne.n	8010c8c <_malloc_r+0xcc>
 8010c0a:	6823      	ldr	r3, [r4, #0]
 8010c0c:	4631      	mov	r1, r6
 8010c0e:	4638      	mov	r0, r7
 8010c10:	eb04 0803 	add.w	r8, r4, r3
 8010c14:	f000 f9ac 	bl	8010f70 <_sbrk_r>
 8010c18:	4580      	cmp	r8, r0
 8010c1a:	d13a      	bne.n	8010c92 <_malloc_r+0xd2>
 8010c1c:	6821      	ldr	r1, [r4, #0]
 8010c1e:	3503      	adds	r5, #3
 8010c20:	1a6d      	subs	r5, r5, r1
 8010c22:	f025 0503 	bic.w	r5, r5, #3
 8010c26:	3508      	adds	r5, #8
 8010c28:	2d0c      	cmp	r5, #12
 8010c2a:	bf38      	it	cc
 8010c2c:	250c      	movcc	r5, #12
 8010c2e:	4629      	mov	r1, r5
 8010c30:	4638      	mov	r0, r7
 8010c32:	f7ff ffa5 	bl	8010b80 <sbrk_aligned>
 8010c36:	3001      	adds	r0, #1
 8010c38:	d02b      	beq.n	8010c92 <_malloc_r+0xd2>
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	442b      	add	r3, r5
 8010c3e:	6023      	str	r3, [r4, #0]
 8010c40:	e00e      	b.n	8010c60 <_malloc_r+0xa0>
 8010c42:	6822      	ldr	r2, [r4, #0]
 8010c44:	1b52      	subs	r2, r2, r5
 8010c46:	d41e      	bmi.n	8010c86 <_malloc_r+0xc6>
 8010c48:	2a0b      	cmp	r2, #11
 8010c4a:	d916      	bls.n	8010c7a <_malloc_r+0xba>
 8010c4c:	1961      	adds	r1, r4, r5
 8010c4e:	42a3      	cmp	r3, r4
 8010c50:	6025      	str	r5, [r4, #0]
 8010c52:	bf18      	it	ne
 8010c54:	6059      	strne	r1, [r3, #4]
 8010c56:	6863      	ldr	r3, [r4, #4]
 8010c58:	bf08      	it	eq
 8010c5a:	6031      	streq	r1, [r6, #0]
 8010c5c:	5162      	str	r2, [r4, r5]
 8010c5e:	604b      	str	r3, [r1, #4]
 8010c60:	4638      	mov	r0, r7
 8010c62:	f104 060b 	add.w	r6, r4, #11
 8010c66:	f000 fa05 	bl	8011074 <__malloc_unlock>
 8010c6a:	f026 0607 	bic.w	r6, r6, #7
 8010c6e:	1d23      	adds	r3, r4, #4
 8010c70:	1af2      	subs	r2, r6, r3
 8010c72:	d0b6      	beq.n	8010be2 <_malloc_r+0x22>
 8010c74:	1b9b      	subs	r3, r3, r6
 8010c76:	50a3      	str	r3, [r4, r2]
 8010c78:	e7b3      	b.n	8010be2 <_malloc_r+0x22>
 8010c7a:	6862      	ldr	r2, [r4, #4]
 8010c7c:	42a3      	cmp	r3, r4
 8010c7e:	bf0c      	ite	eq
 8010c80:	6032      	streq	r2, [r6, #0]
 8010c82:	605a      	strne	r2, [r3, #4]
 8010c84:	e7ec      	b.n	8010c60 <_malloc_r+0xa0>
 8010c86:	4623      	mov	r3, r4
 8010c88:	6864      	ldr	r4, [r4, #4]
 8010c8a:	e7b2      	b.n	8010bf2 <_malloc_r+0x32>
 8010c8c:	4634      	mov	r4, r6
 8010c8e:	6876      	ldr	r6, [r6, #4]
 8010c90:	e7b9      	b.n	8010c06 <_malloc_r+0x46>
 8010c92:	230c      	movs	r3, #12
 8010c94:	603b      	str	r3, [r7, #0]
 8010c96:	4638      	mov	r0, r7
 8010c98:	f000 f9ec 	bl	8011074 <__malloc_unlock>
 8010c9c:	e7a1      	b.n	8010be2 <_malloc_r+0x22>
 8010c9e:	6025      	str	r5, [r4, #0]
 8010ca0:	e7de      	b.n	8010c60 <_malloc_r+0xa0>
 8010ca2:	bf00      	nop
 8010ca4:	20002428 	.word	0x20002428

08010ca8 <__ssputs_r>:
 8010ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cac:	688e      	ldr	r6, [r1, #8]
 8010cae:	429e      	cmp	r6, r3
 8010cb0:	4682      	mov	sl, r0
 8010cb2:	460c      	mov	r4, r1
 8010cb4:	4690      	mov	r8, r2
 8010cb6:	461f      	mov	r7, r3
 8010cb8:	d838      	bhi.n	8010d2c <__ssputs_r+0x84>
 8010cba:	898a      	ldrh	r2, [r1, #12]
 8010cbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010cc0:	d032      	beq.n	8010d28 <__ssputs_r+0x80>
 8010cc2:	6825      	ldr	r5, [r4, #0]
 8010cc4:	6909      	ldr	r1, [r1, #16]
 8010cc6:	eba5 0901 	sub.w	r9, r5, r1
 8010cca:	6965      	ldr	r5, [r4, #20]
 8010ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	444b      	add	r3, r9
 8010cd8:	106d      	asrs	r5, r5, #1
 8010cda:	429d      	cmp	r5, r3
 8010cdc:	bf38      	it	cc
 8010cde:	461d      	movcc	r5, r3
 8010ce0:	0553      	lsls	r3, r2, #21
 8010ce2:	d531      	bpl.n	8010d48 <__ssputs_r+0xa0>
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	f7ff ff6b 	bl	8010bc0 <_malloc_r>
 8010cea:	4606      	mov	r6, r0
 8010cec:	b950      	cbnz	r0, 8010d04 <__ssputs_r+0x5c>
 8010cee:	230c      	movs	r3, #12
 8010cf0:	f8ca 3000 	str.w	r3, [sl]
 8010cf4:	89a3      	ldrh	r3, [r4, #12]
 8010cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cfa:	81a3      	strh	r3, [r4, #12]
 8010cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d04:	6921      	ldr	r1, [r4, #16]
 8010d06:	464a      	mov	r2, r9
 8010d08:	f7fc fd24 	bl	800d754 <memcpy>
 8010d0c:	89a3      	ldrh	r3, [r4, #12]
 8010d0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d16:	81a3      	strh	r3, [r4, #12]
 8010d18:	6126      	str	r6, [r4, #16]
 8010d1a:	6165      	str	r5, [r4, #20]
 8010d1c:	444e      	add	r6, r9
 8010d1e:	eba5 0509 	sub.w	r5, r5, r9
 8010d22:	6026      	str	r6, [r4, #0]
 8010d24:	60a5      	str	r5, [r4, #8]
 8010d26:	463e      	mov	r6, r7
 8010d28:	42be      	cmp	r6, r7
 8010d2a:	d900      	bls.n	8010d2e <__ssputs_r+0x86>
 8010d2c:	463e      	mov	r6, r7
 8010d2e:	6820      	ldr	r0, [r4, #0]
 8010d30:	4632      	mov	r2, r6
 8010d32:	4641      	mov	r1, r8
 8010d34:	f000 f97e 	bl	8011034 <memmove>
 8010d38:	68a3      	ldr	r3, [r4, #8]
 8010d3a:	1b9b      	subs	r3, r3, r6
 8010d3c:	60a3      	str	r3, [r4, #8]
 8010d3e:	6823      	ldr	r3, [r4, #0]
 8010d40:	4433      	add	r3, r6
 8010d42:	6023      	str	r3, [r4, #0]
 8010d44:	2000      	movs	r0, #0
 8010d46:	e7db      	b.n	8010d00 <__ssputs_r+0x58>
 8010d48:	462a      	mov	r2, r5
 8010d4a:	f000 f999 	bl	8011080 <_realloc_r>
 8010d4e:	4606      	mov	r6, r0
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d1e1      	bne.n	8010d18 <__ssputs_r+0x70>
 8010d54:	6921      	ldr	r1, [r4, #16]
 8010d56:	4650      	mov	r0, sl
 8010d58:	f7ff fec6 	bl	8010ae8 <_free_r>
 8010d5c:	e7c7      	b.n	8010cee <__ssputs_r+0x46>
	...

08010d60 <_svfiprintf_r>:
 8010d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d64:	4698      	mov	r8, r3
 8010d66:	898b      	ldrh	r3, [r1, #12]
 8010d68:	061b      	lsls	r3, r3, #24
 8010d6a:	b09d      	sub	sp, #116	; 0x74
 8010d6c:	4607      	mov	r7, r0
 8010d6e:	460d      	mov	r5, r1
 8010d70:	4614      	mov	r4, r2
 8010d72:	d50e      	bpl.n	8010d92 <_svfiprintf_r+0x32>
 8010d74:	690b      	ldr	r3, [r1, #16]
 8010d76:	b963      	cbnz	r3, 8010d92 <_svfiprintf_r+0x32>
 8010d78:	2140      	movs	r1, #64	; 0x40
 8010d7a:	f7ff ff21 	bl	8010bc0 <_malloc_r>
 8010d7e:	6028      	str	r0, [r5, #0]
 8010d80:	6128      	str	r0, [r5, #16]
 8010d82:	b920      	cbnz	r0, 8010d8e <_svfiprintf_r+0x2e>
 8010d84:	230c      	movs	r3, #12
 8010d86:	603b      	str	r3, [r7, #0]
 8010d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d8c:	e0d1      	b.n	8010f32 <_svfiprintf_r+0x1d2>
 8010d8e:	2340      	movs	r3, #64	; 0x40
 8010d90:	616b      	str	r3, [r5, #20]
 8010d92:	2300      	movs	r3, #0
 8010d94:	9309      	str	r3, [sp, #36]	; 0x24
 8010d96:	2320      	movs	r3, #32
 8010d98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010da0:	2330      	movs	r3, #48	; 0x30
 8010da2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010f4c <_svfiprintf_r+0x1ec>
 8010da6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010daa:	f04f 0901 	mov.w	r9, #1
 8010dae:	4623      	mov	r3, r4
 8010db0:	469a      	mov	sl, r3
 8010db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010db6:	b10a      	cbz	r2, 8010dbc <_svfiprintf_r+0x5c>
 8010db8:	2a25      	cmp	r2, #37	; 0x25
 8010dba:	d1f9      	bne.n	8010db0 <_svfiprintf_r+0x50>
 8010dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8010dc0:	d00b      	beq.n	8010dda <_svfiprintf_r+0x7a>
 8010dc2:	465b      	mov	r3, fp
 8010dc4:	4622      	mov	r2, r4
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	4638      	mov	r0, r7
 8010dca:	f7ff ff6d 	bl	8010ca8 <__ssputs_r>
 8010dce:	3001      	adds	r0, #1
 8010dd0:	f000 80aa 	beq.w	8010f28 <_svfiprintf_r+0x1c8>
 8010dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dd6:	445a      	add	r2, fp
 8010dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8010dda:	f89a 3000 	ldrb.w	r3, [sl]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f000 80a2 	beq.w	8010f28 <_svfiprintf_r+0x1c8>
 8010de4:	2300      	movs	r3, #0
 8010de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dee:	f10a 0a01 	add.w	sl, sl, #1
 8010df2:	9304      	str	r3, [sp, #16]
 8010df4:	9307      	str	r3, [sp, #28]
 8010df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8010dfc:	4654      	mov	r4, sl
 8010dfe:	2205      	movs	r2, #5
 8010e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e04:	4851      	ldr	r0, [pc, #324]	; (8010f4c <_svfiprintf_r+0x1ec>)
 8010e06:	f7ef fa1b 	bl	8000240 <memchr>
 8010e0a:	9a04      	ldr	r2, [sp, #16]
 8010e0c:	b9d8      	cbnz	r0, 8010e46 <_svfiprintf_r+0xe6>
 8010e0e:	06d0      	lsls	r0, r2, #27
 8010e10:	bf44      	itt	mi
 8010e12:	2320      	movmi	r3, #32
 8010e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e18:	0711      	lsls	r1, r2, #28
 8010e1a:	bf44      	itt	mi
 8010e1c:	232b      	movmi	r3, #43	; 0x2b
 8010e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e22:	f89a 3000 	ldrb.w	r3, [sl]
 8010e26:	2b2a      	cmp	r3, #42	; 0x2a
 8010e28:	d015      	beq.n	8010e56 <_svfiprintf_r+0xf6>
 8010e2a:	9a07      	ldr	r2, [sp, #28]
 8010e2c:	4654      	mov	r4, sl
 8010e2e:	2000      	movs	r0, #0
 8010e30:	f04f 0c0a 	mov.w	ip, #10
 8010e34:	4621      	mov	r1, r4
 8010e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e3a:	3b30      	subs	r3, #48	; 0x30
 8010e3c:	2b09      	cmp	r3, #9
 8010e3e:	d94e      	bls.n	8010ede <_svfiprintf_r+0x17e>
 8010e40:	b1b0      	cbz	r0, 8010e70 <_svfiprintf_r+0x110>
 8010e42:	9207      	str	r2, [sp, #28]
 8010e44:	e014      	b.n	8010e70 <_svfiprintf_r+0x110>
 8010e46:	eba0 0308 	sub.w	r3, r0, r8
 8010e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	9304      	str	r3, [sp, #16]
 8010e52:	46a2      	mov	sl, r4
 8010e54:	e7d2      	b.n	8010dfc <_svfiprintf_r+0x9c>
 8010e56:	9b03      	ldr	r3, [sp, #12]
 8010e58:	1d19      	adds	r1, r3, #4
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	9103      	str	r1, [sp, #12]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	bfbb      	ittet	lt
 8010e62:	425b      	neglt	r3, r3
 8010e64:	f042 0202 	orrlt.w	r2, r2, #2
 8010e68:	9307      	strge	r3, [sp, #28]
 8010e6a:	9307      	strlt	r3, [sp, #28]
 8010e6c:	bfb8      	it	lt
 8010e6e:	9204      	strlt	r2, [sp, #16]
 8010e70:	7823      	ldrb	r3, [r4, #0]
 8010e72:	2b2e      	cmp	r3, #46	; 0x2e
 8010e74:	d10c      	bne.n	8010e90 <_svfiprintf_r+0x130>
 8010e76:	7863      	ldrb	r3, [r4, #1]
 8010e78:	2b2a      	cmp	r3, #42	; 0x2a
 8010e7a:	d135      	bne.n	8010ee8 <_svfiprintf_r+0x188>
 8010e7c:	9b03      	ldr	r3, [sp, #12]
 8010e7e:	1d1a      	adds	r2, r3, #4
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	9203      	str	r2, [sp, #12]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	bfb8      	it	lt
 8010e88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010e8c:	3402      	adds	r4, #2
 8010e8e:	9305      	str	r3, [sp, #20]
 8010e90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010f5c <_svfiprintf_r+0x1fc>
 8010e94:	7821      	ldrb	r1, [r4, #0]
 8010e96:	2203      	movs	r2, #3
 8010e98:	4650      	mov	r0, sl
 8010e9a:	f7ef f9d1 	bl	8000240 <memchr>
 8010e9e:	b140      	cbz	r0, 8010eb2 <_svfiprintf_r+0x152>
 8010ea0:	2340      	movs	r3, #64	; 0x40
 8010ea2:	eba0 000a 	sub.w	r0, r0, sl
 8010ea6:	fa03 f000 	lsl.w	r0, r3, r0
 8010eaa:	9b04      	ldr	r3, [sp, #16]
 8010eac:	4303      	orrs	r3, r0
 8010eae:	3401      	adds	r4, #1
 8010eb0:	9304      	str	r3, [sp, #16]
 8010eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eb6:	4826      	ldr	r0, [pc, #152]	; (8010f50 <_svfiprintf_r+0x1f0>)
 8010eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ebc:	2206      	movs	r2, #6
 8010ebe:	f7ef f9bf 	bl	8000240 <memchr>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d038      	beq.n	8010f38 <_svfiprintf_r+0x1d8>
 8010ec6:	4b23      	ldr	r3, [pc, #140]	; (8010f54 <_svfiprintf_r+0x1f4>)
 8010ec8:	bb1b      	cbnz	r3, 8010f12 <_svfiprintf_r+0x1b2>
 8010eca:	9b03      	ldr	r3, [sp, #12]
 8010ecc:	3307      	adds	r3, #7
 8010ece:	f023 0307 	bic.w	r3, r3, #7
 8010ed2:	3308      	adds	r3, #8
 8010ed4:	9303      	str	r3, [sp, #12]
 8010ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ed8:	4433      	add	r3, r6
 8010eda:	9309      	str	r3, [sp, #36]	; 0x24
 8010edc:	e767      	b.n	8010dae <_svfiprintf_r+0x4e>
 8010ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ee2:	460c      	mov	r4, r1
 8010ee4:	2001      	movs	r0, #1
 8010ee6:	e7a5      	b.n	8010e34 <_svfiprintf_r+0xd4>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	3401      	adds	r4, #1
 8010eec:	9305      	str	r3, [sp, #20]
 8010eee:	4619      	mov	r1, r3
 8010ef0:	f04f 0c0a 	mov.w	ip, #10
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010efa:	3a30      	subs	r2, #48	; 0x30
 8010efc:	2a09      	cmp	r2, #9
 8010efe:	d903      	bls.n	8010f08 <_svfiprintf_r+0x1a8>
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d0c5      	beq.n	8010e90 <_svfiprintf_r+0x130>
 8010f04:	9105      	str	r1, [sp, #20]
 8010f06:	e7c3      	b.n	8010e90 <_svfiprintf_r+0x130>
 8010f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f0c:	4604      	mov	r4, r0
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e7f0      	b.n	8010ef4 <_svfiprintf_r+0x194>
 8010f12:	ab03      	add	r3, sp, #12
 8010f14:	9300      	str	r3, [sp, #0]
 8010f16:	462a      	mov	r2, r5
 8010f18:	4b0f      	ldr	r3, [pc, #60]	; (8010f58 <_svfiprintf_r+0x1f8>)
 8010f1a:	a904      	add	r1, sp, #16
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	f7fc fccf 	bl	800d8c0 <_printf_float>
 8010f22:	1c42      	adds	r2, r0, #1
 8010f24:	4606      	mov	r6, r0
 8010f26:	d1d6      	bne.n	8010ed6 <_svfiprintf_r+0x176>
 8010f28:	89ab      	ldrh	r3, [r5, #12]
 8010f2a:	065b      	lsls	r3, r3, #25
 8010f2c:	f53f af2c 	bmi.w	8010d88 <_svfiprintf_r+0x28>
 8010f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f32:	b01d      	add	sp, #116	; 0x74
 8010f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f38:	ab03      	add	r3, sp, #12
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	462a      	mov	r2, r5
 8010f3e:	4b06      	ldr	r3, [pc, #24]	; (8010f58 <_svfiprintf_r+0x1f8>)
 8010f40:	a904      	add	r1, sp, #16
 8010f42:	4638      	mov	r0, r7
 8010f44:	f7fc ff60 	bl	800de08 <_printf_i>
 8010f48:	e7eb      	b.n	8010f22 <_svfiprintf_r+0x1c2>
 8010f4a:	bf00      	nop
 8010f4c:	08013594 	.word	0x08013594
 8010f50:	0801359e 	.word	0x0801359e
 8010f54:	0800d8c1 	.word	0x0800d8c1
 8010f58:	08010ca9 	.word	0x08010ca9
 8010f5c:	0801359a 	.word	0x0801359a

08010f60 <nan>:
 8010f60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010f68 <nan+0x8>
 8010f64:	4770      	bx	lr
 8010f66:	bf00      	nop
 8010f68:	00000000 	.word	0x00000000
 8010f6c:	7ff80000 	.word	0x7ff80000

08010f70 <_sbrk_r>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	4d06      	ldr	r5, [pc, #24]	; (8010f8c <_sbrk_r+0x1c>)
 8010f74:	2300      	movs	r3, #0
 8010f76:	4604      	mov	r4, r0
 8010f78:	4608      	mov	r0, r1
 8010f7a:	602b      	str	r3, [r5, #0]
 8010f7c:	f7f2 fcc4 	bl	8003908 <_sbrk>
 8010f80:	1c43      	adds	r3, r0, #1
 8010f82:	d102      	bne.n	8010f8a <_sbrk_r+0x1a>
 8010f84:	682b      	ldr	r3, [r5, #0]
 8010f86:	b103      	cbz	r3, 8010f8a <_sbrk_r+0x1a>
 8010f88:	6023      	str	r3, [r4, #0]
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	20002430 	.word	0x20002430

08010f90 <strncmp>:
 8010f90:	b510      	push	{r4, lr}
 8010f92:	b17a      	cbz	r2, 8010fb4 <strncmp+0x24>
 8010f94:	4603      	mov	r3, r0
 8010f96:	3901      	subs	r1, #1
 8010f98:	1884      	adds	r4, r0, r2
 8010f9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010f9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010fa2:	4290      	cmp	r0, r2
 8010fa4:	d101      	bne.n	8010faa <strncmp+0x1a>
 8010fa6:	42a3      	cmp	r3, r4
 8010fa8:	d101      	bne.n	8010fae <strncmp+0x1e>
 8010faa:	1a80      	subs	r0, r0, r2
 8010fac:	bd10      	pop	{r4, pc}
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d1f3      	bne.n	8010f9a <strncmp+0xa>
 8010fb2:	e7fa      	b.n	8010faa <strncmp+0x1a>
 8010fb4:	4610      	mov	r0, r2
 8010fb6:	e7f9      	b.n	8010fac <strncmp+0x1c>

08010fb8 <__ascii_wctomb>:
 8010fb8:	b149      	cbz	r1, 8010fce <__ascii_wctomb+0x16>
 8010fba:	2aff      	cmp	r2, #255	; 0xff
 8010fbc:	bf85      	ittet	hi
 8010fbe:	238a      	movhi	r3, #138	; 0x8a
 8010fc0:	6003      	strhi	r3, [r0, #0]
 8010fc2:	700a      	strbls	r2, [r1, #0]
 8010fc4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010fc8:	bf98      	it	ls
 8010fca:	2001      	movls	r0, #1
 8010fcc:	4770      	bx	lr
 8010fce:	4608      	mov	r0, r1
 8010fd0:	4770      	bx	lr
	...

08010fd4 <__assert_func>:
 8010fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fd6:	4614      	mov	r4, r2
 8010fd8:	461a      	mov	r2, r3
 8010fda:	4b09      	ldr	r3, [pc, #36]	; (8011000 <__assert_func+0x2c>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	4605      	mov	r5, r0
 8010fe0:	68d8      	ldr	r0, [r3, #12]
 8010fe2:	b14c      	cbz	r4, 8010ff8 <__assert_func+0x24>
 8010fe4:	4b07      	ldr	r3, [pc, #28]	; (8011004 <__assert_func+0x30>)
 8010fe6:	9100      	str	r1, [sp, #0]
 8010fe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fec:	4906      	ldr	r1, [pc, #24]	; (8011008 <__assert_func+0x34>)
 8010fee:	462b      	mov	r3, r5
 8010ff0:	f000 f80e 	bl	8011010 <fiprintf>
 8010ff4:	f000 fa8c 	bl	8011510 <abort>
 8010ff8:	4b04      	ldr	r3, [pc, #16]	; (801100c <__assert_func+0x38>)
 8010ffa:	461c      	mov	r4, r3
 8010ffc:	e7f3      	b.n	8010fe6 <__assert_func+0x12>
 8010ffe:	bf00      	nop
 8011000:	20000134 	.word	0x20000134
 8011004:	080135a5 	.word	0x080135a5
 8011008:	080135b2 	.word	0x080135b2
 801100c:	080135e0 	.word	0x080135e0

08011010 <fiprintf>:
 8011010:	b40e      	push	{r1, r2, r3}
 8011012:	b503      	push	{r0, r1, lr}
 8011014:	4601      	mov	r1, r0
 8011016:	ab03      	add	r3, sp, #12
 8011018:	4805      	ldr	r0, [pc, #20]	; (8011030 <fiprintf+0x20>)
 801101a:	f853 2b04 	ldr.w	r2, [r3], #4
 801101e:	6800      	ldr	r0, [r0, #0]
 8011020:	9301      	str	r3, [sp, #4]
 8011022:	f000 f885 	bl	8011130 <_vfiprintf_r>
 8011026:	b002      	add	sp, #8
 8011028:	f85d eb04 	ldr.w	lr, [sp], #4
 801102c:	b003      	add	sp, #12
 801102e:	4770      	bx	lr
 8011030:	20000134 	.word	0x20000134

08011034 <memmove>:
 8011034:	4288      	cmp	r0, r1
 8011036:	b510      	push	{r4, lr}
 8011038:	eb01 0402 	add.w	r4, r1, r2
 801103c:	d902      	bls.n	8011044 <memmove+0x10>
 801103e:	4284      	cmp	r4, r0
 8011040:	4623      	mov	r3, r4
 8011042:	d807      	bhi.n	8011054 <memmove+0x20>
 8011044:	1e43      	subs	r3, r0, #1
 8011046:	42a1      	cmp	r1, r4
 8011048:	d008      	beq.n	801105c <memmove+0x28>
 801104a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801104e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011052:	e7f8      	b.n	8011046 <memmove+0x12>
 8011054:	4402      	add	r2, r0
 8011056:	4601      	mov	r1, r0
 8011058:	428a      	cmp	r2, r1
 801105a:	d100      	bne.n	801105e <memmove+0x2a>
 801105c:	bd10      	pop	{r4, pc}
 801105e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011066:	e7f7      	b.n	8011058 <memmove+0x24>

08011068 <__malloc_lock>:
 8011068:	4801      	ldr	r0, [pc, #4]	; (8011070 <__malloc_lock+0x8>)
 801106a:	f000 bc11 	b.w	8011890 <__retarget_lock_acquire_recursive>
 801106e:	bf00      	nop
 8011070:	20002434 	.word	0x20002434

08011074 <__malloc_unlock>:
 8011074:	4801      	ldr	r0, [pc, #4]	; (801107c <__malloc_unlock+0x8>)
 8011076:	f000 bc0c 	b.w	8011892 <__retarget_lock_release_recursive>
 801107a:	bf00      	nop
 801107c:	20002434 	.word	0x20002434

08011080 <_realloc_r>:
 8011080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011084:	4680      	mov	r8, r0
 8011086:	4614      	mov	r4, r2
 8011088:	460e      	mov	r6, r1
 801108a:	b921      	cbnz	r1, 8011096 <_realloc_r+0x16>
 801108c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011090:	4611      	mov	r1, r2
 8011092:	f7ff bd95 	b.w	8010bc0 <_malloc_r>
 8011096:	b92a      	cbnz	r2, 80110a4 <_realloc_r+0x24>
 8011098:	f7ff fd26 	bl	8010ae8 <_free_r>
 801109c:	4625      	mov	r5, r4
 801109e:	4628      	mov	r0, r5
 80110a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a4:	f000 fc5c 	bl	8011960 <_malloc_usable_size_r>
 80110a8:	4284      	cmp	r4, r0
 80110aa:	4607      	mov	r7, r0
 80110ac:	d802      	bhi.n	80110b4 <_realloc_r+0x34>
 80110ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80110b2:	d812      	bhi.n	80110da <_realloc_r+0x5a>
 80110b4:	4621      	mov	r1, r4
 80110b6:	4640      	mov	r0, r8
 80110b8:	f7ff fd82 	bl	8010bc0 <_malloc_r>
 80110bc:	4605      	mov	r5, r0
 80110be:	2800      	cmp	r0, #0
 80110c0:	d0ed      	beq.n	801109e <_realloc_r+0x1e>
 80110c2:	42bc      	cmp	r4, r7
 80110c4:	4622      	mov	r2, r4
 80110c6:	4631      	mov	r1, r6
 80110c8:	bf28      	it	cs
 80110ca:	463a      	movcs	r2, r7
 80110cc:	f7fc fb42 	bl	800d754 <memcpy>
 80110d0:	4631      	mov	r1, r6
 80110d2:	4640      	mov	r0, r8
 80110d4:	f7ff fd08 	bl	8010ae8 <_free_r>
 80110d8:	e7e1      	b.n	801109e <_realloc_r+0x1e>
 80110da:	4635      	mov	r5, r6
 80110dc:	e7df      	b.n	801109e <_realloc_r+0x1e>

080110de <__sfputc_r>:
 80110de:	6893      	ldr	r3, [r2, #8]
 80110e0:	3b01      	subs	r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	b410      	push	{r4}
 80110e6:	6093      	str	r3, [r2, #8]
 80110e8:	da08      	bge.n	80110fc <__sfputc_r+0x1e>
 80110ea:	6994      	ldr	r4, [r2, #24]
 80110ec:	42a3      	cmp	r3, r4
 80110ee:	db01      	blt.n	80110f4 <__sfputc_r+0x16>
 80110f0:	290a      	cmp	r1, #10
 80110f2:	d103      	bne.n	80110fc <__sfputc_r+0x1e>
 80110f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110f8:	f000 b94a 	b.w	8011390 <__swbuf_r>
 80110fc:	6813      	ldr	r3, [r2, #0]
 80110fe:	1c58      	adds	r0, r3, #1
 8011100:	6010      	str	r0, [r2, #0]
 8011102:	7019      	strb	r1, [r3, #0]
 8011104:	4608      	mov	r0, r1
 8011106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801110a:	4770      	bx	lr

0801110c <__sfputs_r>:
 801110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801110e:	4606      	mov	r6, r0
 8011110:	460f      	mov	r7, r1
 8011112:	4614      	mov	r4, r2
 8011114:	18d5      	adds	r5, r2, r3
 8011116:	42ac      	cmp	r4, r5
 8011118:	d101      	bne.n	801111e <__sfputs_r+0x12>
 801111a:	2000      	movs	r0, #0
 801111c:	e007      	b.n	801112e <__sfputs_r+0x22>
 801111e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011122:	463a      	mov	r2, r7
 8011124:	4630      	mov	r0, r6
 8011126:	f7ff ffda 	bl	80110de <__sfputc_r>
 801112a:	1c43      	adds	r3, r0, #1
 801112c:	d1f3      	bne.n	8011116 <__sfputs_r+0xa>
 801112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011130 <_vfiprintf_r>:
 8011130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011134:	460d      	mov	r5, r1
 8011136:	b09d      	sub	sp, #116	; 0x74
 8011138:	4614      	mov	r4, r2
 801113a:	4698      	mov	r8, r3
 801113c:	4606      	mov	r6, r0
 801113e:	b118      	cbz	r0, 8011148 <_vfiprintf_r+0x18>
 8011140:	6983      	ldr	r3, [r0, #24]
 8011142:	b90b      	cbnz	r3, 8011148 <_vfiprintf_r+0x18>
 8011144:	f000 fb06 	bl	8011754 <__sinit>
 8011148:	4b89      	ldr	r3, [pc, #548]	; (8011370 <_vfiprintf_r+0x240>)
 801114a:	429d      	cmp	r5, r3
 801114c:	d11b      	bne.n	8011186 <_vfiprintf_r+0x56>
 801114e:	6875      	ldr	r5, [r6, #4]
 8011150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011152:	07d9      	lsls	r1, r3, #31
 8011154:	d405      	bmi.n	8011162 <_vfiprintf_r+0x32>
 8011156:	89ab      	ldrh	r3, [r5, #12]
 8011158:	059a      	lsls	r2, r3, #22
 801115a:	d402      	bmi.n	8011162 <_vfiprintf_r+0x32>
 801115c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801115e:	f000 fb97 	bl	8011890 <__retarget_lock_acquire_recursive>
 8011162:	89ab      	ldrh	r3, [r5, #12]
 8011164:	071b      	lsls	r3, r3, #28
 8011166:	d501      	bpl.n	801116c <_vfiprintf_r+0x3c>
 8011168:	692b      	ldr	r3, [r5, #16]
 801116a:	b9eb      	cbnz	r3, 80111a8 <_vfiprintf_r+0x78>
 801116c:	4629      	mov	r1, r5
 801116e:	4630      	mov	r0, r6
 8011170:	f000 f960 	bl	8011434 <__swsetup_r>
 8011174:	b1c0      	cbz	r0, 80111a8 <_vfiprintf_r+0x78>
 8011176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011178:	07dc      	lsls	r4, r3, #31
 801117a:	d50e      	bpl.n	801119a <_vfiprintf_r+0x6a>
 801117c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011180:	b01d      	add	sp, #116	; 0x74
 8011182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011186:	4b7b      	ldr	r3, [pc, #492]	; (8011374 <_vfiprintf_r+0x244>)
 8011188:	429d      	cmp	r5, r3
 801118a:	d101      	bne.n	8011190 <_vfiprintf_r+0x60>
 801118c:	68b5      	ldr	r5, [r6, #8]
 801118e:	e7df      	b.n	8011150 <_vfiprintf_r+0x20>
 8011190:	4b79      	ldr	r3, [pc, #484]	; (8011378 <_vfiprintf_r+0x248>)
 8011192:	429d      	cmp	r5, r3
 8011194:	bf08      	it	eq
 8011196:	68f5      	ldreq	r5, [r6, #12]
 8011198:	e7da      	b.n	8011150 <_vfiprintf_r+0x20>
 801119a:	89ab      	ldrh	r3, [r5, #12]
 801119c:	0598      	lsls	r0, r3, #22
 801119e:	d4ed      	bmi.n	801117c <_vfiprintf_r+0x4c>
 80111a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111a2:	f000 fb76 	bl	8011892 <__retarget_lock_release_recursive>
 80111a6:	e7e9      	b.n	801117c <_vfiprintf_r+0x4c>
 80111a8:	2300      	movs	r3, #0
 80111aa:	9309      	str	r3, [sp, #36]	; 0x24
 80111ac:	2320      	movs	r3, #32
 80111ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80111b6:	2330      	movs	r3, #48	; 0x30
 80111b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801137c <_vfiprintf_r+0x24c>
 80111bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111c0:	f04f 0901 	mov.w	r9, #1
 80111c4:	4623      	mov	r3, r4
 80111c6:	469a      	mov	sl, r3
 80111c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111cc:	b10a      	cbz	r2, 80111d2 <_vfiprintf_r+0xa2>
 80111ce:	2a25      	cmp	r2, #37	; 0x25
 80111d0:	d1f9      	bne.n	80111c6 <_vfiprintf_r+0x96>
 80111d2:	ebba 0b04 	subs.w	fp, sl, r4
 80111d6:	d00b      	beq.n	80111f0 <_vfiprintf_r+0xc0>
 80111d8:	465b      	mov	r3, fp
 80111da:	4622      	mov	r2, r4
 80111dc:	4629      	mov	r1, r5
 80111de:	4630      	mov	r0, r6
 80111e0:	f7ff ff94 	bl	801110c <__sfputs_r>
 80111e4:	3001      	adds	r0, #1
 80111e6:	f000 80aa 	beq.w	801133e <_vfiprintf_r+0x20e>
 80111ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111ec:	445a      	add	r2, fp
 80111ee:	9209      	str	r2, [sp, #36]	; 0x24
 80111f0:	f89a 3000 	ldrb.w	r3, [sl]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f000 80a2 	beq.w	801133e <_vfiprintf_r+0x20e>
 80111fa:	2300      	movs	r3, #0
 80111fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011204:	f10a 0a01 	add.w	sl, sl, #1
 8011208:	9304      	str	r3, [sp, #16]
 801120a:	9307      	str	r3, [sp, #28]
 801120c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011210:	931a      	str	r3, [sp, #104]	; 0x68
 8011212:	4654      	mov	r4, sl
 8011214:	2205      	movs	r2, #5
 8011216:	f814 1b01 	ldrb.w	r1, [r4], #1
 801121a:	4858      	ldr	r0, [pc, #352]	; (801137c <_vfiprintf_r+0x24c>)
 801121c:	f7ef f810 	bl	8000240 <memchr>
 8011220:	9a04      	ldr	r2, [sp, #16]
 8011222:	b9d8      	cbnz	r0, 801125c <_vfiprintf_r+0x12c>
 8011224:	06d1      	lsls	r1, r2, #27
 8011226:	bf44      	itt	mi
 8011228:	2320      	movmi	r3, #32
 801122a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801122e:	0713      	lsls	r3, r2, #28
 8011230:	bf44      	itt	mi
 8011232:	232b      	movmi	r3, #43	; 0x2b
 8011234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011238:	f89a 3000 	ldrb.w	r3, [sl]
 801123c:	2b2a      	cmp	r3, #42	; 0x2a
 801123e:	d015      	beq.n	801126c <_vfiprintf_r+0x13c>
 8011240:	9a07      	ldr	r2, [sp, #28]
 8011242:	4654      	mov	r4, sl
 8011244:	2000      	movs	r0, #0
 8011246:	f04f 0c0a 	mov.w	ip, #10
 801124a:	4621      	mov	r1, r4
 801124c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011250:	3b30      	subs	r3, #48	; 0x30
 8011252:	2b09      	cmp	r3, #9
 8011254:	d94e      	bls.n	80112f4 <_vfiprintf_r+0x1c4>
 8011256:	b1b0      	cbz	r0, 8011286 <_vfiprintf_r+0x156>
 8011258:	9207      	str	r2, [sp, #28]
 801125a:	e014      	b.n	8011286 <_vfiprintf_r+0x156>
 801125c:	eba0 0308 	sub.w	r3, r0, r8
 8011260:	fa09 f303 	lsl.w	r3, r9, r3
 8011264:	4313      	orrs	r3, r2
 8011266:	9304      	str	r3, [sp, #16]
 8011268:	46a2      	mov	sl, r4
 801126a:	e7d2      	b.n	8011212 <_vfiprintf_r+0xe2>
 801126c:	9b03      	ldr	r3, [sp, #12]
 801126e:	1d19      	adds	r1, r3, #4
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	9103      	str	r1, [sp, #12]
 8011274:	2b00      	cmp	r3, #0
 8011276:	bfbb      	ittet	lt
 8011278:	425b      	neglt	r3, r3
 801127a:	f042 0202 	orrlt.w	r2, r2, #2
 801127e:	9307      	strge	r3, [sp, #28]
 8011280:	9307      	strlt	r3, [sp, #28]
 8011282:	bfb8      	it	lt
 8011284:	9204      	strlt	r2, [sp, #16]
 8011286:	7823      	ldrb	r3, [r4, #0]
 8011288:	2b2e      	cmp	r3, #46	; 0x2e
 801128a:	d10c      	bne.n	80112a6 <_vfiprintf_r+0x176>
 801128c:	7863      	ldrb	r3, [r4, #1]
 801128e:	2b2a      	cmp	r3, #42	; 0x2a
 8011290:	d135      	bne.n	80112fe <_vfiprintf_r+0x1ce>
 8011292:	9b03      	ldr	r3, [sp, #12]
 8011294:	1d1a      	adds	r2, r3, #4
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	9203      	str	r2, [sp, #12]
 801129a:	2b00      	cmp	r3, #0
 801129c:	bfb8      	it	lt
 801129e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80112a2:	3402      	adds	r4, #2
 80112a4:	9305      	str	r3, [sp, #20]
 80112a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801138c <_vfiprintf_r+0x25c>
 80112aa:	7821      	ldrb	r1, [r4, #0]
 80112ac:	2203      	movs	r2, #3
 80112ae:	4650      	mov	r0, sl
 80112b0:	f7ee ffc6 	bl	8000240 <memchr>
 80112b4:	b140      	cbz	r0, 80112c8 <_vfiprintf_r+0x198>
 80112b6:	2340      	movs	r3, #64	; 0x40
 80112b8:	eba0 000a 	sub.w	r0, r0, sl
 80112bc:	fa03 f000 	lsl.w	r0, r3, r0
 80112c0:	9b04      	ldr	r3, [sp, #16]
 80112c2:	4303      	orrs	r3, r0
 80112c4:	3401      	adds	r4, #1
 80112c6:	9304      	str	r3, [sp, #16]
 80112c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112cc:	482c      	ldr	r0, [pc, #176]	; (8011380 <_vfiprintf_r+0x250>)
 80112ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112d2:	2206      	movs	r2, #6
 80112d4:	f7ee ffb4 	bl	8000240 <memchr>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d03f      	beq.n	801135c <_vfiprintf_r+0x22c>
 80112dc:	4b29      	ldr	r3, [pc, #164]	; (8011384 <_vfiprintf_r+0x254>)
 80112de:	bb1b      	cbnz	r3, 8011328 <_vfiprintf_r+0x1f8>
 80112e0:	9b03      	ldr	r3, [sp, #12]
 80112e2:	3307      	adds	r3, #7
 80112e4:	f023 0307 	bic.w	r3, r3, #7
 80112e8:	3308      	adds	r3, #8
 80112ea:	9303      	str	r3, [sp, #12]
 80112ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112ee:	443b      	add	r3, r7
 80112f0:	9309      	str	r3, [sp, #36]	; 0x24
 80112f2:	e767      	b.n	80111c4 <_vfiprintf_r+0x94>
 80112f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80112f8:	460c      	mov	r4, r1
 80112fa:	2001      	movs	r0, #1
 80112fc:	e7a5      	b.n	801124a <_vfiprintf_r+0x11a>
 80112fe:	2300      	movs	r3, #0
 8011300:	3401      	adds	r4, #1
 8011302:	9305      	str	r3, [sp, #20]
 8011304:	4619      	mov	r1, r3
 8011306:	f04f 0c0a 	mov.w	ip, #10
 801130a:	4620      	mov	r0, r4
 801130c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011310:	3a30      	subs	r2, #48	; 0x30
 8011312:	2a09      	cmp	r2, #9
 8011314:	d903      	bls.n	801131e <_vfiprintf_r+0x1ee>
 8011316:	2b00      	cmp	r3, #0
 8011318:	d0c5      	beq.n	80112a6 <_vfiprintf_r+0x176>
 801131a:	9105      	str	r1, [sp, #20]
 801131c:	e7c3      	b.n	80112a6 <_vfiprintf_r+0x176>
 801131e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011322:	4604      	mov	r4, r0
 8011324:	2301      	movs	r3, #1
 8011326:	e7f0      	b.n	801130a <_vfiprintf_r+0x1da>
 8011328:	ab03      	add	r3, sp, #12
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	462a      	mov	r2, r5
 801132e:	4b16      	ldr	r3, [pc, #88]	; (8011388 <_vfiprintf_r+0x258>)
 8011330:	a904      	add	r1, sp, #16
 8011332:	4630      	mov	r0, r6
 8011334:	f7fc fac4 	bl	800d8c0 <_printf_float>
 8011338:	4607      	mov	r7, r0
 801133a:	1c78      	adds	r0, r7, #1
 801133c:	d1d6      	bne.n	80112ec <_vfiprintf_r+0x1bc>
 801133e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011340:	07d9      	lsls	r1, r3, #31
 8011342:	d405      	bmi.n	8011350 <_vfiprintf_r+0x220>
 8011344:	89ab      	ldrh	r3, [r5, #12]
 8011346:	059a      	lsls	r2, r3, #22
 8011348:	d402      	bmi.n	8011350 <_vfiprintf_r+0x220>
 801134a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801134c:	f000 faa1 	bl	8011892 <__retarget_lock_release_recursive>
 8011350:	89ab      	ldrh	r3, [r5, #12]
 8011352:	065b      	lsls	r3, r3, #25
 8011354:	f53f af12 	bmi.w	801117c <_vfiprintf_r+0x4c>
 8011358:	9809      	ldr	r0, [sp, #36]	; 0x24
 801135a:	e711      	b.n	8011180 <_vfiprintf_r+0x50>
 801135c:	ab03      	add	r3, sp, #12
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	462a      	mov	r2, r5
 8011362:	4b09      	ldr	r3, [pc, #36]	; (8011388 <_vfiprintf_r+0x258>)
 8011364:	a904      	add	r1, sp, #16
 8011366:	4630      	mov	r0, r6
 8011368:	f7fc fd4e 	bl	800de08 <_printf_i>
 801136c:	e7e4      	b.n	8011338 <_vfiprintf_r+0x208>
 801136e:	bf00      	nop
 8011370:	08013704 	.word	0x08013704
 8011374:	08013724 	.word	0x08013724
 8011378:	080136e4 	.word	0x080136e4
 801137c:	08013594 	.word	0x08013594
 8011380:	0801359e 	.word	0x0801359e
 8011384:	0800d8c1 	.word	0x0800d8c1
 8011388:	0801110d 	.word	0x0801110d
 801138c:	0801359a 	.word	0x0801359a

08011390 <__swbuf_r>:
 8011390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011392:	460e      	mov	r6, r1
 8011394:	4614      	mov	r4, r2
 8011396:	4605      	mov	r5, r0
 8011398:	b118      	cbz	r0, 80113a2 <__swbuf_r+0x12>
 801139a:	6983      	ldr	r3, [r0, #24]
 801139c:	b90b      	cbnz	r3, 80113a2 <__swbuf_r+0x12>
 801139e:	f000 f9d9 	bl	8011754 <__sinit>
 80113a2:	4b21      	ldr	r3, [pc, #132]	; (8011428 <__swbuf_r+0x98>)
 80113a4:	429c      	cmp	r4, r3
 80113a6:	d12b      	bne.n	8011400 <__swbuf_r+0x70>
 80113a8:	686c      	ldr	r4, [r5, #4]
 80113aa:	69a3      	ldr	r3, [r4, #24]
 80113ac:	60a3      	str	r3, [r4, #8]
 80113ae:	89a3      	ldrh	r3, [r4, #12]
 80113b0:	071a      	lsls	r2, r3, #28
 80113b2:	d52f      	bpl.n	8011414 <__swbuf_r+0x84>
 80113b4:	6923      	ldr	r3, [r4, #16]
 80113b6:	b36b      	cbz	r3, 8011414 <__swbuf_r+0x84>
 80113b8:	6923      	ldr	r3, [r4, #16]
 80113ba:	6820      	ldr	r0, [r4, #0]
 80113bc:	1ac0      	subs	r0, r0, r3
 80113be:	6963      	ldr	r3, [r4, #20]
 80113c0:	b2f6      	uxtb	r6, r6
 80113c2:	4283      	cmp	r3, r0
 80113c4:	4637      	mov	r7, r6
 80113c6:	dc04      	bgt.n	80113d2 <__swbuf_r+0x42>
 80113c8:	4621      	mov	r1, r4
 80113ca:	4628      	mov	r0, r5
 80113cc:	f000 f92e 	bl	801162c <_fflush_r>
 80113d0:	bb30      	cbnz	r0, 8011420 <__swbuf_r+0x90>
 80113d2:	68a3      	ldr	r3, [r4, #8]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	60a3      	str	r3, [r4, #8]
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	1c5a      	adds	r2, r3, #1
 80113dc:	6022      	str	r2, [r4, #0]
 80113de:	701e      	strb	r6, [r3, #0]
 80113e0:	6963      	ldr	r3, [r4, #20]
 80113e2:	3001      	adds	r0, #1
 80113e4:	4283      	cmp	r3, r0
 80113e6:	d004      	beq.n	80113f2 <__swbuf_r+0x62>
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	07db      	lsls	r3, r3, #31
 80113ec:	d506      	bpl.n	80113fc <__swbuf_r+0x6c>
 80113ee:	2e0a      	cmp	r6, #10
 80113f0:	d104      	bne.n	80113fc <__swbuf_r+0x6c>
 80113f2:	4621      	mov	r1, r4
 80113f4:	4628      	mov	r0, r5
 80113f6:	f000 f919 	bl	801162c <_fflush_r>
 80113fa:	b988      	cbnz	r0, 8011420 <__swbuf_r+0x90>
 80113fc:	4638      	mov	r0, r7
 80113fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011400:	4b0a      	ldr	r3, [pc, #40]	; (801142c <__swbuf_r+0x9c>)
 8011402:	429c      	cmp	r4, r3
 8011404:	d101      	bne.n	801140a <__swbuf_r+0x7a>
 8011406:	68ac      	ldr	r4, [r5, #8]
 8011408:	e7cf      	b.n	80113aa <__swbuf_r+0x1a>
 801140a:	4b09      	ldr	r3, [pc, #36]	; (8011430 <__swbuf_r+0xa0>)
 801140c:	429c      	cmp	r4, r3
 801140e:	bf08      	it	eq
 8011410:	68ec      	ldreq	r4, [r5, #12]
 8011412:	e7ca      	b.n	80113aa <__swbuf_r+0x1a>
 8011414:	4621      	mov	r1, r4
 8011416:	4628      	mov	r0, r5
 8011418:	f000 f80c 	bl	8011434 <__swsetup_r>
 801141c:	2800      	cmp	r0, #0
 801141e:	d0cb      	beq.n	80113b8 <__swbuf_r+0x28>
 8011420:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011424:	e7ea      	b.n	80113fc <__swbuf_r+0x6c>
 8011426:	bf00      	nop
 8011428:	08013704 	.word	0x08013704
 801142c:	08013724 	.word	0x08013724
 8011430:	080136e4 	.word	0x080136e4

08011434 <__swsetup_r>:
 8011434:	4b32      	ldr	r3, [pc, #200]	; (8011500 <__swsetup_r+0xcc>)
 8011436:	b570      	push	{r4, r5, r6, lr}
 8011438:	681d      	ldr	r5, [r3, #0]
 801143a:	4606      	mov	r6, r0
 801143c:	460c      	mov	r4, r1
 801143e:	b125      	cbz	r5, 801144a <__swsetup_r+0x16>
 8011440:	69ab      	ldr	r3, [r5, #24]
 8011442:	b913      	cbnz	r3, 801144a <__swsetup_r+0x16>
 8011444:	4628      	mov	r0, r5
 8011446:	f000 f985 	bl	8011754 <__sinit>
 801144a:	4b2e      	ldr	r3, [pc, #184]	; (8011504 <__swsetup_r+0xd0>)
 801144c:	429c      	cmp	r4, r3
 801144e:	d10f      	bne.n	8011470 <__swsetup_r+0x3c>
 8011450:	686c      	ldr	r4, [r5, #4]
 8011452:	89a3      	ldrh	r3, [r4, #12]
 8011454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011458:	0719      	lsls	r1, r3, #28
 801145a:	d42c      	bmi.n	80114b6 <__swsetup_r+0x82>
 801145c:	06dd      	lsls	r5, r3, #27
 801145e:	d411      	bmi.n	8011484 <__swsetup_r+0x50>
 8011460:	2309      	movs	r3, #9
 8011462:	6033      	str	r3, [r6, #0]
 8011464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011468:	81a3      	strh	r3, [r4, #12]
 801146a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801146e:	e03e      	b.n	80114ee <__swsetup_r+0xba>
 8011470:	4b25      	ldr	r3, [pc, #148]	; (8011508 <__swsetup_r+0xd4>)
 8011472:	429c      	cmp	r4, r3
 8011474:	d101      	bne.n	801147a <__swsetup_r+0x46>
 8011476:	68ac      	ldr	r4, [r5, #8]
 8011478:	e7eb      	b.n	8011452 <__swsetup_r+0x1e>
 801147a:	4b24      	ldr	r3, [pc, #144]	; (801150c <__swsetup_r+0xd8>)
 801147c:	429c      	cmp	r4, r3
 801147e:	bf08      	it	eq
 8011480:	68ec      	ldreq	r4, [r5, #12]
 8011482:	e7e6      	b.n	8011452 <__swsetup_r+0x1e>
 8011484:	0758      	lsls	r0, r3, #29
 8011486:	d512      	bpl.n	80114ae <__swsetup_r+0x7a>
 8011488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801148a:	b141      	cbz	r1, 801149e <__swsetup_r+0x6a>
 801148c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011490:	4299      	cmp	r1, r3
 8011492:	d002      	beq.n	801149a <__swsetup_r+0x66>
 8011494:	4630      	mov	r0, r6
 8011496:	f7ff fb27 	bl	8010ae8 <_free_r>
 801149a:	2300      	movs	r3, #0
 801149c:	6363      	str	r3, [r4, #52]	; 0x34
 801149e:	89a3      	ldrh	r3, [r4, #12]
 80114a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80114a4:	81a3      	strh	r3, [r4, #12]
 80114a6:	2300      	movs	r3, #0
 80114a8:	6063      	str	r3, [r4, #4]
 80114aa:	6923      	ldr	r3, [r4, #16]
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	89a3      	ldrh	r3, [r4, #12]
 80114b0:	f043 0308 	orr.w	r3, r3, #8
 80114b4:	81a3      	strh	r3, [r4, #12]
 80114b6:	6923      	ldr	r3, [r4, #16]
 80114b8:	b94b      	cbnz	r3, 80114ce <__swsetup_r+0x9a>
 80114ba:	89a3      	ldrh	r3, [r4, #12]
 80114bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80114c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114c4:	d003      	beq.n	80114ce <__swsetup_r+0x9a>
 80114c6:	4621      	mov	r1, r4
 80114c8:	4630      	mov	r0, r6
 80114ca:	f000 fa09 	bl	80118e0 <__smakebuf_r>
 80114ce:	89a0      	ldrh	r0, [r4, #12]
 80114d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114d4:	f010 0301 	ands.w	r3, r0, #1
 80114d8:	d00a      	beq.n	80114f0 <__swsetup_r+0xbc>
 80114da:	2300      	movs	r3, #0
 80114dc:	60a3      	str	r3, [r4, #8]
 80114de:	6963      	ldr	r3, [r4, #20]
 80114e0:	425b      	negs	r3, r3
 80114e2:	61a3      	str	r3, [r4, #24]
 80114e4:	6923      	ldr	r3, [r4, #16]
 80114e6:	b943      	cbnz	r3, 80114fa <__swsetup_r+0xc6>
 80114e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80114ec:	d1ba      	bne.n	8011464 <__swsetup_r+0x30>
 80114ee:	bd70      	pop	{r4, r5, r6, pc}
 80114f0:	0781      	lsls	r1, r0, #30
 80114f2:	bf58      	it	pl
 80114f4:	6963      	ldrpl	r3, [r4, #20]
 80114f6:	60a3      	str	r3, [r4, #8]
 80114f8:	e7f4      	b.n	80114e4 <__swsetup_r+0xb0>
 80114fa:	2000      	movs	r0, #0
 80114fc:	e7f7      	b.n	80114ee <__swsetup_r+0xba>
 80114fe:	bf00      	nop
 8011500:	20000134 	.word	0x20000134
 8011504:	08013704 	.word	0x08013704
 8011508:	08013724 	.word	0x08013724
 801150c:	080136e4 	.word	0x080136e4

08011510 <abort>:
 8011510:	b508      	push	{r3, lr}
 8011512:	2006      	movs	r0, #6
 8011514:	f000 fa54 	bl	80119c0 <raise>
 8011518:	2001      	movs	r0, #1
 801151a:	f7f2 f97e 	bl	800381a <_exit>
	...

08011520 <__sflush_r>:
 8011520:	898a      	ldrh	r2, [r1, #12]
 8011522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011526:	4605      	mov	r5, r0
 8011528:	0710      	lsls	r0, r2, #28
 801152a:	460c      	mov	r4, r1
 801152c:	d458      	bmi.n	80115e0 <__sflush_r+0xc0>
 801152e:	684b      	ldr	r3, [r1, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	dc05      	bgt.n	8011540 <__sflush_r+0x20>
 8011534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011536:	2b00      	cmp	r3, #0
 8011538:	dc02      	bgt.n	8011540 <__sflush_r+0x20>
 801153a:	2000      	movs	r0, #0
 801153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011542:	2e00      	cmp	r6, #0
 8011544:	d0f9      	beq.n	801153a <__sflush_r+0x1a>
 8011546:	2300      	movs	r3, #0
 8011548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801154c:	682f      	ldr	r7, [r5, #0]
 801154e:	602b      	str	r3, [r5, #0]
 8011550:	d032      	beq.n	80115b8 <__sflush_r+0x98>
 8011552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011554:	89a3      	ldrh	r3, [r4, #12]
 8011556:	075a      	lsls	r2, r3, #29
 8011558:	d505      	bpl.n	8011566 <__sflush_r+0x46>
 801155a:	6863      	ldr	r3, [r4, #4]
 801155c:	1ac0      	subs	r0, r0, r3
 801155e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011560:	b10b      	cbz	r3, 8011566 <__sflush_r+0x46>
 8011562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011564:	1ac0      	subs	r0, r0, r3
 8011566:	2300      	movs	r3, #0
 8011568:	4602      	mov	r2, r0
 801156a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801156c:	6a21      	ldr	r1, [r4, #32]
 801156e:	4628      	mov	r0, r5
 8011570:	47b0      	blx	r6
 8011572:	1c43      	adds	r3, r0, #1
 8011574:	89a3      	ldrh	r3, [r4, #12]
 8011576:	d106      	bne.n	8011586 <__sflush_r+0x66>
 8011578:	6829      	ldr	r1, [r5, #0]
 801157a:	291d      	cmp	r1, #29
 801157c:	d82c      	bhi.n	80115d8 <__sflush_r+0xb8>
 801157e:	4a2a      	ldr	r2, [pc, #168]	; (8011628 <__sflush_r+0x108>)
 8011580:	40ca      	lsrs	r2, r1
 8011582:	07d6      	lsls	r6, r2, #31
 8011584:	d528      	bpl.n	80115d8 <__sflush_r+0xb8>
 8011586:	2200      	movs	r2, #0
 8011588:	6062      	str	r2, [r4, #4]
 801158a:	04d9      	lsls	r1, r3, #19
 801158c:	6922      	ldr	r2, [r4, #16]
 801158e:	6022      	str	r2, [r4, #0]
 8011590:	d504      	bpl.n	801159c <__sflush_r+0x7c>
 8011592:	1c42      	adds	r2, r0, #1
 8011594:	d101      	bne.n	801159a <__sflush_r+0x7a>
 8011596:	682b      	ldr	r3, [r5, #0]
 8011598:	b903      	cbnz	r3, 801159c <__sflush_r+0x7c>
 801159a:	6560      	str	r0, [r4, #84]	; 0x54
 801159c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801159e:	602f      	str	r7, [r5, #0]
 80115a0:	2900      	cmp	r1, #0
 80115a2:	d0ca      	beq.n	801153a <__sflush_r+0x1a>
 80115a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115a8:	4299      	cmp	r1, r3
 80115aa:	d002      	beq.n	80115b2 <__sflush_r+0x92>
 80115ac:	4628      	mov	r0, r5
 80115ae:	f7ff fa9b 	bl	8010ae8 <_free_r>
 80115b2:	2000      	movs	r0, #0
 80115b4:	6360      	str	r0, [r4, #52]	; 0x34
 80115b6:	e7c1      	b.n	801153c <__sflush_r+0x1c>
 80115b8:	6a21      	ldr	r1, [r4, #32]
 80115ba:	2301      	movs	r3, #1
 80115bc:	4628      	mov	r0, r5
 80115be:	47b0      	blx	r6
 80115c0:	1c41      	adds	r1, r0, #1
 80115c2:	d1c7      	bne.n	8011554 <__sflush_r+0x34>
 80115c4:	682b      	ldr	r3, [r5, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d0c4      	beq.n	8011554 <__sflush_r+0x34>
 80115ca:	2b1d      	cmp	r3, #29
 80115cc:	d001      	beq.n	80115d2 <__sflush_r+0xb2>
 80115ce:	2b16      	cmp	r3, #22
 80115d0:	d101      	bne.n	80115d6 <__sflush_r+0xb6>
 80115d2:	602f      	str	r7, [r5, #0]
 80115d4:	e7b1      	b.n	801153a <__sflush_r+0x1a>
 80115d6:	89a3      	ldrh	r3, [r4, #12]
 80115d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115dc:	81a3      	strh	r3, [r4, #12]
 80115de:	e7ad      	b.n	801153c <__sflush_r+0x1c>
 80115e0:	690f      	ldr	r7, [r1, #16]
 80115e2:	2f00      	cmp	r7, #0
 80115e4:	d0a9      	beq.n	801153a <__sflush_r+0x1a>
 80115e6:	0793      	lsls	r3, r2, #30
 80115e8:	680e      	ldr	r6, [r1, #0]
 80115ea:	bf08      	it	eq
 80115ec:	694b      	ldreq	r3, [r1, #20]
 80115ee:	600f      	str	r7, [r1, #0]
 80115f0:	bf18      	it	ne
 80115f2:	2300      	movne	r3, #0
 80115f4:	eba6 0807 	sub.w	r8, r6, r7
 80115f8:	608b      	str	r3, [r1, #8]
 80115fa:	f1b8 0f00 	cmp.w	r8, #0
 80115fe:	dd9c      	ble.n	801153a <__sflush_r+0x1a>
 8011600:	6a21      	ldr	r1, [r4, #32]
 8011602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011604:	4643      	mov	r3, r8
 8011606:	463a      	mov	r2, r7
 8011608:	4628      	mov	r0, r5
 801160a:	47b0      	blx	r6
 801160c:	2800      	cmp	r0, #0
 801160e:	dc06      	bgt.n	801161e <__sflush_r+0xfe>
 8011610:	89a3      	ldrh	r3, [r4, #12]
 8011612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011616:	81a3      	strh	r3, [r4, #12]
 8011618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801161c:	e78e      	b.n	801153c <__sflush_r+0x1c>
 801161e:	4407      	add	r7, r0
 8011620:	eba8 0800 	sub.w	r8, r8, r0
 8011624:	e7e9      	b.n	80115fa <__sflush_r+0xda>
 8011626:	bf00      	nop
 8011628:	20400001 	.word	0x20400001

0801162c <_fflush_r>:
 801162c:	b538      	push	{r3, r4, r5, lr}
 801162e:	690b      	ldr	r3, [r1, #16]
 8011630:	4605      	mov	r5, r0
 8011632:	460c      	mov	r4, r1
 8011634:	b913      	cbnz	r3, 801163c <_fflush_r+0x10>
 8011636:	2500      	movs	r5, #0
 8011638:	4628      	mov	r0, r5
 801163a:	bd38      	pop	{r3, r4, r5, pc}
 801163c:	b118      	cbz	r0, 8011646 <_fflush_r+0x1a>
 801163e:	6983      	ldr	r3, [r0, #24]
 8011640:	b90b      	cbnz	r3, 8011646 <_fflush_r+0x1a>
 8011642:	f000 f887 	bl	8011754 <__sinit>
 8011646:	4b14      	ldr	r3, [pc, #80]	; (8011698 <_fflush_r+0x6c>)
 8011648:	429c      	cmp	r4, r3
 801164a:	d11b      	bne.n	8011684 <_fflush_r+0x58>
 801164c:	686c      	ldr	r4, [r5, #4]
 801164e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d0ef      	beq.n	8011636 <_fflush_r+0xa>
 8011656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011658:	07d0      	lsls	r0, r2, #31
 801165a:	d404      	bmi.n	8011666 <_fflush_r+0x3a>
 801165c:	0599      	lsls	r1, r3, #22
 801165e:	d402      	bmi.n	8011666 <_fflush_r+0x3a>
 8011660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011662:	f000 f915 	bl	8011890 <__retarget_lock_acquire_recursive>
 8011666:	4628      	mov	r0, r5
 8011668:	4621      	mov	r1, r4
 801166a:	f7ff ff59 	bl	8011520 <__sflush_r>
 801166e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011670:	07da      	lsls	r2, r3, #31
 8011672:	4605      	mov	r5, r0
 8011674:	d4e0      	bmi.n	8011638 <_fflush_r+0xc>
 8011676:	89a3      	ldrh	r3, [r4, #12]
 8011678:	059b      	lsls	r3, r3, #22
 801167a:	d4dd      	bmi.n	8011638 <_fflush_r+0xc>
 801167c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801167e:	f000 f908 	bl	8011892 <__retarget_lock_release_recursive>
 8011682:	e7d9      	b.n	8011638 <_fflush_r+0xc>
 8011684:	4b05      	ldr	r3, [pc, #20]	; (801169c <_fflush_r+0x70>)
 8011686:	429c      	cmp	r4, r3
 8011688:	d101      	bne.n	801168e <_fflush_r+0x62>
 801168a:	68ac      	ldr	r4, [r5, #8]
 801168c:	e7df      	b.n	801164e <_fflush_r+0x22>
 801168e:	4b04      	ldr	r3, [pc, #16]	; (80116a0 <_fflush_r+0x74>)
 8011690:	429c      	cmp	r4, r3
 8011692:	bf08      	it	eq
 8011694:	68ec      	ldreq	r4, [r5, #12]
 8011696:	e7da      	b.n	801164e <_fflush_r+0x22>
 8011698:	08013704 	.word	0x08013704
 801169c:	08013724 	.word	0x08013724
 80116a0:	080136e4 	.word	0x080136e4

080116a4 <std>:
 80116a4:	2300      	movs	r3, #0
 80116a6:	b510      	push	{r4, lr}
 80116a8:	4604      	mov	r4, r0
 80116aa:	e9c0 3300 	strd	r3, r3, [r0]
 80116ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116b2:	6083      	str	r3, [r0, #8]
 80116b4:	8181      	strh	r1, [r0, #12]
 80116b6:	6643      	str	r3, [r0, #100]	; 0x64
 80116b8:	81c2      	strh	r2, [r0, #14]
 80116ba:	6183      	str	r3, [r0, #24]
 80116bc:	4619      	mov	r1, r3
 80116be:	2208      	movs	r2, #8
 80116c0:	305c      	adds	r0, #92	; 0x5c
 80116c2:	f7fc f855 	bl	800d770 <memset>
 80116c6:	4b05      	ldr	r3, [pc, #20]	; (80116dc <std+0x38>)
 80116c8:	6263      	str	r3, [r4, #36]	; 0x24
 80116ca:	4b05      	ldr	r3, [pc, #20]	; (80116e0 <std+0x3c>)
 80116cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80116ce:	4b05      	ldr	r3, [pc, #20]	; (80116e4 <std+0x40>)
 80116d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80116d2:	4b05      	ldr	r3, [pc, #20]	; (80116e8 <std+0x44>)
 80116d4:	6224      	str	r4, [r4, #32]
 80116d6:	6323      	str	r3, [r4, #48]	; 0x30
 80116d8:	bd10      	pop	{r4, pc}
 80116da:	bf00      	nop
 80116dc:	080119f9 	.word	0x080119f9
 80116e0:	08011a1b 	.word	0x08011a1b
 80116e4:	08011a53 	.word	0x08011a53
 80116e8:	08011a77 	.word	0x08011a77

080116ec <_cleanup_r>:
 80116ec:	4901      	ldr	r1, [pc, #4]	; (80116f4 <_cleanup_r+0x8>)
 80116ee:	f000 b8af 	b.w	8011850 <_fwalk_reent>
 80116f2:	bf00      	nop
 80116f4:	0801162d 	.word	0x0801162d

080116f8 <__sfmoreglue>:
 80116f8:	b570      	push	{r4, r5, r6, lr}
 80116fa:	2268      	movs	r2, #104	; 0x68
 80116fc:	1e4d      	subs	r5, r1, #1
 80116fe:	4355      	muls	r5, r2
 8011700:	460e      	mov	r6, r1
 8011702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011706:	f7ff fa5b 	bl	8010bc0 <_malloc_r>
 801170a:	4604      	mov	r4, r0
 801170c:	b140      	cbz	r0, 8011720 <__sfmoreglue+0x28>
 801170e:	2100      	movs	r1, #0
 8011710:	e9c0 1600 	strd	r1, r6, [r0]
 8011714:	300c      	adds	r0, #12
 8011716:	60a0      	str	r0, [r4, #8]
 8011718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801171c:	f7fc f828 	bl	800d770 <memset>
 8011720:	4620      	mov	r0, r4
 8011722:	bd70      	pop	{r4, r5, r6, pc}

08011724 <__sfp_lock_acquire>:
 8011724:	4801      	ldr	r0, [pc, #4]	; (801172c <__sfp_lock_acquire+0x8>)
 8011726:	f000 b8b3 	b.w	8011890 <__retarget_lock_acquire_recursive>
 801172a:	bf00      	nop
 801172c:	20002435 	.word	0x20002435

08011730 <__sfp_lock_release>:
 8011730:	4801      	ldr	r0, [pc, #4]	; (8011738 <__sfp_lock_release+0x8>)
 8011732:	f000 b8ae 	b.w	8011892 <__retarget_lock_release_recursive>
 8011736:	bf00      	nop
 8011738:	20002435 	.word	0x20002435

0801173c <__sinit_lock_acquire>:
 801173c:	4801      	ldr	r0, [pc, #4]	; (8011744 <__sinit_lock_acquire+0x8>)
 801173e:	f000 b8a7 	b.w	8011890 <__retarget_lock_acquire_recursive>
 8011742:	bf00      	nop
 8011744:	20002436 	.word	0x20002436

08011748 <__sinit_lock_release>:
 8011748:	4801      	ldr	r0, [pc, #4]	; (8011750 <__sinit_lock_release+0x8>)
 801174a:	f000 b8a2 	b.w	8011892 <__retarget_lock_release_recursive>
 801174e:	bf00      	nop
 8011750:	20002436 	.word	0x20002436

08011754 <__sinit>:
 8011754:	b510      	push	{r4, lr}
 8011756:	4604      	mov	r4, r0
 8011758:	f7ff fff0 	bl	801173c <__sinit_lock_acquire>
 801175c:	69a3      	ldr	r3, [r4, #24]
 801175e:	b11b      	cbz	r3, 8011768 <__sinit+0x14>
 8011760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011764:	f7ff bff0 	b.w	8011748 <__sinit_lock_release>
 8011768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801176c:	6523      	str	r3, [r4, #80]	; 0x50
 801176e:	4b13      	ldr	r3, [pc, #76]	; (80117bc <__sinit+0x68>)
 8011770:	4a13      	ldr	r2, [pc, #76]	; (80117c0 <__sinit+0x6c>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	62a2      	str	r2, [r4, #40]	; 0x28
 8011776:	42a3      	cmp	r3, r4
 8011778:	bf04      	itt	eq
 801177a:	2301      	moveq	r3, #1
 801177c:	61a3      	streq	r3, [r4, #24]
 801177e:	4620      	mov	r0, r4
 8011780:	f000 f820 	bl	80117c4 <__sfp>
 8011784:	6060      	str	r0, [r4, #4]
 8011786:	4620      	mov	r0, r4
 8011788:	f000 f81c 	bl	80117c4 <__sfp>
 801178c:	60a0      	str	r0, [r4, #8]
 801178e:	4620      	mov	r0, r4
 8011790:	f000 f818 	bl	80117c4 <__sfp>
 8011794:	2200      	movs	r2, #0
 8011796:	60e0      	str	r0, [r4, #12]
 8011798:	2104      	movs	r1, #4
 801179a:	6860      	ldr	r0, [r4, #4]
 801179c:	f7ff ff82 	bl	80116a4 <std>
 80117a0:	68a0      	ldr	r0, [r4, #8]
 80117a2:	2201      	movs	r2, #1
 80117a4:	2109      	movs	r1, #9
 80117a6:	f7ff ff7d 	bl	80116a4 <std>
 80117aa:	68e0      	ldr	r0, [r4, #12]
 80117ac:	2202      	movs	r2, #2
 80117ae:	2112      	movs	r1, #18
 80117b0:	f7ff ff78 	bl	80116a4 <std>
 80117b4:	2301      	movs	r3, #1
 80117b6:	61a3      	str	r3, [r4, #24]
 80117b8:	e7d2      	b.n	8011760 <__sinit+0xc>
 80117ba:	bf00      	nop
 80117bc:	080132a8 	.word	0x080132a8
 80117c0:	080116ed 	.word	0x080116ed

080117c4 <__sfp>:
 80117c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117c6:	4607      	mov	r7, r0
 80117c8:	f7ff ffac 	bl	8011724 <__sfp_lock_acquire>
 80117cc:	4b1e      	ldr	r3, [pc, #120]	; (8011848 <__sfp+0x84>)
 80117ce:	681e      	ldr	r6, [r3, #0]
 80117d0:	69b3      	ldr	r3, [r6, #24]
 80117d2:	b913      	cbnz	r3, 80117da <__sfp+0x16>
 80117d4:	4630      	mov	r0, r6
 80117d6:	f7ff ffbd 	bl	8011754 <__sinit>
 80117da:	3648      	adds	r6, #72	; 0x48
 80117dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80117e0:	3b01      	subs	r3, #1
 80117e2:	d503      	bpl.n	80117ec <__sfp+0x28>
 80117e4:	6833      	ldr	r3, [r6, #0]
 80117e6:	b30b      	cbz	r3, 801182c <__sfp+0x68>
 80117e8:	6836      	ldr	r6, [r6, #0]
 80117ea:	e7f7      	b.n	80117dc <__sfp+0x18>
 80117ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80117f0:	b9d5      	cbnz	r5, 8011828 <__sfp+0x64>
 80117f2:	4b16      	ldr	r3, [pc, #88]	; (801184c <__sfp+0x88>)
 80117f4:	60e3      	str	r3, [r4, #12]
 80117f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80117fa:	6665      	str	r5, [r4, #100]	; 0x64
 80117fc:	f000 f847 	bl	801188e <__retarget_lock_init_recursive>
 8011800:	f7ff ff96 	bl	8011730 <__sfp_lock_release>
 8011804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801180c:	6025      	str	r5, [r4, #0]
 801180e:	61a5      	str	r5, [r4, #24]
 8011810:	2208      	movs	r2, #8
 8011812:	4629      	mov	r1, r5
 8011814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011818:	f7fb ffaa 	bl	800d770 <memset>
 801181c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011824:	4620      	mov	r0, r4
 8011826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011828:	3468      	adds	r4, #104	; 0x68
 801182a:	e7d9      	b.n	80117e0 <__sfp+0x1c>
 801182c:	2104      	movs	r1, #4
 801182e:	4638      	mov	r0, r7
 8011830:	f7ff ff62 	bl	80116f8 <__sfmoreglue>
 8011834:	4604      	mov	r4, r0
 8011836:	6030      	str	r0, [r6, #0]
 8011838:	2800      	cmp	r0, #0
 801183a:	d1d5      	bne.n	80117e8 <__sfp+0x24>
 801183c:	f7ff ff78 	bl	8011730 <__sfp_lock_release>
 8011840:	230c      	movs	r3, #12
 8011842:	603b      	str	r3, [r7, #0]
 8011844:	e7ee      	b.n	8011824 <__sfp+0x60>
 8011846:	bf00      	nop
 8011848:	080132a8 	.word	0x080132a8
 801184c:	ffff0001 	.word	0xffff0001

08011850 <_fwalk_reent>:
 8011850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011854:	4606      	mov	r6, r0
 8011856:	4688      	mov	r8, r1
 8011858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801185c:	2700      	movs	r7, #0
 801185e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011862:	f1b9 0901 	subs.w	r9, r9, #1
 8011866:	d505      	bpl.n	8011874 <_fwalk_reent+0x24>
 8011868:	6824      	ldr	r4, [r4, #0]
 801186a:	2c00      	cmp	r4, #0
 801186c:	d1f7      	bne.n	801185e <_fwalk_reent+0xe>
 801186e:	4638      	mov	r0, r7
 8011870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011874:	89ab      	ldrh	r3, [r5, #12]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d907      	bls.n	801188a <_fwalk_reent+0x3a>
 801187a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801187e:	3301      	adds	r3, #1
 8011880:	d003      	beq.n	801188a <_fwalk_reent+0x3a>
 8011882:	4629      	mov	r1, r5
 8011884:	4630      	mov	r0, r6
 8011886:	47c0      	blx	r8
 8011888:	4307      	orrs	r7, r0
 801188a:	3568      	adds	r5, #104	; 0x68
 801188c:	e7e9      	b.n	8011862 <_fwalk_reent+0x12>

0801188e <__retarget_lock_init_recursive>:
 801188e:	4770      	bx	lr

08011890 <__retarget_lock_acquire_recursive>:
 8011890:	4770      	bx	lr

08011892 <__retarget_lock_release_recursive>:
 8011892:	4770      	bx	lr

08011894 <__swhatbuf_r>:
 8011894:	b570      	push	{r4, r5, r6, lr}
 8011896:	460e      	mov	r6, r1
 8011898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801189c:	2900      	cmp	r1, #0
 801189e:	b096      	sub	sp, #88	; 0x58
 80118a0:	4614      	mov	r4, r2
 80118a2:	461d      	mov	r5, r3
 80118a4:	da08      	bge.n	80118b8 <__swhatbuf_r+0x24>
 80118a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80118aa:	2200      	movs	r2, #0
 80118ac:	602a      	str	r2, [r5, #0]
 80118ae:	061a      	lsls	r2, r3, #24
 80118b0:	d410      	bmi.n	80118d4 <__swhatbuf_r+0x40>
 80118b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118b6:	e00e      	b.n	80118d6 <__swhatbuf_r+0x42>
 80118b8:	466a      	mov	r2, sp
 80118ba:	f000 f903 	bl	8011ac4 <_fstat_r>
 80118be:	2800      	cmp	r0, #0
 80118c0:	dbf1      	blt.n	80118a6 <__swhatbuf_r+0x12>
 80118c2:	9a01      	ldr	r2, [sp, #4]
 80118c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80118c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80118cc:	425a      	negs	r2, r3
 80118ce:	415a      	adcs	r2, r3
 80118d0:	602a      	str	r2, [r5, #0]
 80118d2:	e7ee      	b.n	80118b2 <__swhatbuf_r+0x1e>
 80118d4:	2340      	movs	r3, #64	; 0x40
 80118d6:	2000      	movs	r0, #0
 80118d8:	6023      	str	r3, [r4, #0]
 80118da:	b016      	add	sp, #88	; 0x58
 80118dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080118e0 <__smakebuf_r>:
 80118e0:	898b      	ldrh	r3, [r1, #12]
 80118e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118e4:	079d      	lsls	r5, r3, #30
 80118e6:	4606      	mov	r6, r0
 80118e8:	460c      	mov	r4, r1
 80118ea:	d507      	bpl.n	80118fc <__smakebuf_r+0x1c>
 80118ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80118f0:	6023      	str	r3, [r4, #0]
 80118f2:	6123      	str	r3, [r4, #16]
 80118f4:	2301      	movs	r3, #1
 80118f6:	6163      	str	r3, [r4, #20]
 80118f8:	b002      	add	sp, #8
 80118fa:	bd70      	pop	{r4, r5, r6, pc}
 80118fc:	ab01      	add	r3, sp, #4
 80118fe:	466a      	mov	r2, sp
 8011900:	f7ff ffc8 	bl	8011894 <__swhatbuf_r>
 8011904:	9900      	ldr	r1, [sp, #0]
 8011906:	4605      	mov	r5, r0
 8011908:	4630      	mov	r0, r6
 801190a:	f7ff f959 	bl	8010bc0 <_malloc_r>
 801190e:	b948      	cbnz	r0, 8011924 <__smakebuf_r+0x44>
 8011910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011914:	059a      	lsls	r2, r3, #22
 8011916:	d4ef      	bmi.n	80118f8 <__smakebuf_r+0x18>
 8011918:	f023 0303 	bic.w	r3, r3, #3
 801191c:	f043 0302 	orr.w	r3, r3, #2
 8011920:	81a3      	strh	r3, [r4, #12]
 8011922:	e7e3      	b.n	80118ec <__smakebuf_r+0xc>
 8011924:	4b0d      	ldr	r3, [pc, #52]	; (801195c <__smakebuf_r+0x7c>)
 8011926:	62b3      	str	r3, [r6, #40]	; 0x28
 8011928:	89a3      	ldrh	r3, [r4, #12]
 801192a:	6020      	str	r0, [r4, #0]
 801192c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011930:	81a3      	strh	r3, [r4, #12]
 8011932:	9b00      	ldr	r3, [sp, #0]
 8011934:	6163      	str	r3, [r4, #20]
 8011936:	9b01      	ldr	r3, [sp, #4]
 8011938:	6120      	str	r0, [r4, #16]
 801193a:	b15b      	cbz	r3, 8011954 <__smakebuf_r+0x74>
 801193c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011940:	4630      	mov	r0, r6
 8011942:	f000 f8d1 	bl	8011ae8 <_isatty_r>
 8011946:	b128      	cbz	r0, 8011954 <__smakebuf_r+0x74>
 8011948:	89a3      	ldrh	r3, [r4, #12]
 801194a:	f023 0303 	bic.w	r3, r3, #3
 801194e:	f043 0301 	orr.w	r3, r3, #1
 8011952:	81a3      	strh	r3, [r4, #12]
 8011954:	89a0      	ldrh	r0, [r4, #12]
 8011956:	4305      	orrs	r5, r0
 8011958:	81a5      	strh	r5, [r4, #12]
 801195a:	e7cd      	b.n	80118f8 <__smakebuf_r+0x18>
 801195c:	080116ed 	.word	0x080116ed

08011960 <_malloc_usable_size_r>:
 8011960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011964:	1f18      	subs	r0, r3, #4
 8011966:	2b00      	cmp	r3, #0
 8011968:	bfbc      	itt	lt
 801196a:	580b      	ldrlt	r3, [r1, r0]
 801196c:	18c0      	addlt	r0, r0, r3
 801196e:	4770      	bx	lr

08011970 <_raise_r>:
 8011970:	291f      	cmp	r1, #31
 8011972:	b538      	push	{r3, r4, r5, lr}
 8011974:	4604      	mov	r4, r0
 8011976:	460d      	mov	r5, r1
 8011978:	d904      	bls.n	8011984 <_raise_r+0x14>
 801197a:	2316      	movs	r3, #22
 801197c:	6003      	str	r3, [r0, #0]
 801197e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011982:	bd38      	pop	{r3, r4, r5, pc}
 8011984:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011986:	b112      	cbz	r2, 801198e <_raise_r+0x1e>
 8011988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801198c:	b94b      	cbnz	r3, 80119a2 <_raise_r+0x32>
 801198e:	4620      	mov	r0, r4
 8011990:	f000 f830 	bl	80119f4 <_getpid_r>
 8011994:	462a      	mov	r2, r5
 8011996:	4601      	mov	r1, r0
 8011998:	4620      	mov	r0, r4
 801199a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801199e:	f000 b817 	b.w	80119d0 <_kill_r>
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d00a      	beq.n	80119bc <_raise_r+0x4c>
 80119a6:	1c59      	adds	r1, r3, #1
 80119a8:	d103      	bne.n	80119b2 <_raise_r+0x42>
 80119aa:	2316      	movs	r3, #22
 80119ac:	6003      	str	r3, [r0, #0]
 80119ae:	2001      	movs	r0, #1
 80119b0:	e7e7      	b.n	8011982 <_raise_r+0x12>
 80119b2:	2400      	movs	r4, #0
 80119b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119b8:	4628      	mov	r0, r5
 80119ba:	4798      	blx	r3
 80119bc:	2000      	movs	r0, #0
 80119be:	e7e0      	b.n	8011982 <_raise_r+0x12>

080119c0 <raise>:
 80119c0:	4b02      	ldr	r3, [pc, #8]	; (80119cc <raise+0xc>)
 80119c2:	4601      	mov	r1, r0
 80119c4:	6818      	ldr	r0, [r3, #0]
 80119c6:	f7ff bfd3 	b.w	8011970 <_raise_r>
 80119ca:	bf00      	nop
 80119cc:	20000134 	.word	0x20000134

080119d0 <_kill_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	4d07      	ldr	r5, [pc, #28]	; (80119f0 <_kill_r+0x20>)
 80119d4:	2300      	movs	r3, #0
 80119d6:	4604      	mov	r4, r0
 80119d8:	4608      	mov	r0, r1
 80119da:	4611      	mov	r1, r2
 80119dc:	602b      	str	r3, [r5, #0]
 80119de:	f7f1 ff0c 	bl	80037fa <_kill>
 80119e2:	1c43      	adds	r3, r0, #1
 80119e4:	d102      	bne.n	80119ec <_kill_r+0x1c>
 80119e6:	682b      	ldr	r3, [r5, #0]
 80119e8:	b103      	cbz	r3, 80119ec <_kill_r+0x1c>
 80119ea:	6023      	str	r3, [r4, #0]
 80119ec:	bd38      	pop	{r3, r4, r5, pc}
 80119ee:	bf00      	nop
 80119f0:	20002430 	.word	0x20002430

080119f4 <_getpid_r>:
 80119f4:	f7f1 bef9 	b.w	80037ea <_getpid>

080119f8 <__sread>:
 80119f8:	b510      	push	{r4, lr}
 80119fa:	460c      	mov	r4, r1
 80119fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a00:	f000 f894 	bl	8011b2c <_read_r>
 8011a04:	2800      	cmp	r0, #0
 8011a06:	bfab      	itete	ge
 8011a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a0c:	181b      	addge	r3, r3, r0
 8011a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a12:	bfac      	ite	ge
 8011a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a16:	81a3      	strhlt	r3, [r4, #12]
 8011a18:	bd10      	pop	{r4, pc}

08011a1a <__swrite>:
 8011a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a1e:	461f      	mov	r7, r3
 8011a20:	898b      	ldrh	r3, [r1, #12]
 8011a22:	05db      	lsls	r3, r3, #23
 8011a24:	4605      	mov	r5, r0
 8011a26:	460c      	mov	r4, r1
 8011a28:	4616      	mov	r6, r2
 8011a2a:	d505      	bpl.n	8011a38 <__swrite+0x1e>
 8011a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a30:	2302      	movs	r3, #2
 8011a32:	2200      	movs	r2, #0
 8011a34:	f000 f868 	bl	8011b08 <_lseek_r>
 8011a38:	89a3      	ldrh	r3, [r4, #12]
 8011a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a42:	81a3      	strh	r3, [r4, #12]
 8011a44:	4632      	mov	r2, r6
 8011a46:	463b      	mov	r3, r7
 8011a48:	4628      	mov	r0, r5
 8011a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a4e:	f000 b817 	b.w	8011a80 <_write_r>

08011a52 <__sseek>:
 8011a52:	b510      	push	{r4, lr}
 8011a54:	460c      	mov	r4, r1
 8011a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a5a:	f000 f855 	bl	8011b08 <_lseek_r>
 8011a5e:	1c43      	adds	r3, r0, #1
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	bf15      	itete	ne
 8011a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a6e:	81a3      	strheq	r3, [r4, #12]
 8011a70:	bf18      	it	ne
 8011a72:	81a3      	strhne	r3, [r4, #12]
 8011a74:	bd10      	pop	{r4, pc}

08011a76 <__sclose>:
 8011a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a7a:	f000 b813 	b.w	8011aa4 <_close_r>
	...

08011a80 <_write_r>:
 8011a80:	b538      	push	{r3, r4, r5, lr}
 8011a82:	4d07      	ldr	r5, [pc, #28]	; (8011aa0 <_write_r+0x20>)
 8011a84:	4604      	mov	r4, r0
 8011a86:	4608      	mov	r0, r1
 8011a88:	4611      	mov	r1, r2
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	602a      	str	r2, [r5, #0]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	f7f1 feea 	bl	8003868 <_write>
 8011a94:	1c43      	adds	r3, r0, #1
 8011a96:	d102      	bne.n	8011a9e <_write_r+0x1e>
 8011a98:	682b      	ldr	r3, [r5, #0]
 8011a9a:	b103      	cbz	r3, 8011a9e <_write_r+0x1e>
 8011a9c:	6023      	str	r3, [r4, #0]
 8011a9e:	bd38      	pop	{r3, r4, r5, pc}
 8011aa0:	20002430 	.word	0x20002430

08011aa4 <_close_r>:
 8011aa4:	b538      	push	{r3, r4, r5, lr}
 8011aa6:	4d06      	ldr	r5, [pc, #24]	; (8011ac0 <_close_r+0x1c>)
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	4604      	mov	r4, r0
 8011aac:	4608      	mov	r0, r1
 8011aae:	602b      	str	r3, [r5, #0]
 8011ab0:	f7f1 fef6 	bl	80038a0 <_close>
 8011ab4:	1c43      	adds	r3, r0, #1
 8011ab6:	d102      	bne.n	8011abe <_close_r+0x1a>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	b103      	cbz	r3, 8011abe <_close_r+0x1a>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	bd38      	pop	{r3, r4, r5, pc}
 8011ac0:	20002430 	.word	0x20002430

08011ac4 <_fstat_r>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4d07      	ldr	r5, [pc, #28]	; (8011ae4 <_fstat_r+0x20>)
 8011ac8:	2300      	movs	r3, #0
 8011aca:	4604      	mov	r4, r0
 8011acc:	4608      	mov	r0, r1
 8011ace:	4611      	mov	r1, r2
 8011ad0:	602b      	str	r3, [r5, #0]
 8011ad2:	f7f1 fef1 	bl	80038b8 <_fstat>
 8011ad6:	1c43      	adds	r3, r0, #1
 8011ad8:	d102      	bne.n	8011ae0 <_fstat_r+0x1c>
 8011ada:	682b      	ldr	r3, [r5, #0]
 8011adc:	b103      	cbz	r3, 8011ae0 <_fstat_r+0x1c>
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	bd38      	pop	{r3, r4, r5, pc}
 8011ae2:	bf00      	nop
 8011ae4:	20002430 	.word	0x20002430

08011ae8 <_isatty_r>:
 8011ae8:	b538      	push	{r3, r4, r5, lr}
 8011aea:	4d06      	ldr	r5, [pc, #24]	; (8011b04 <_isatty_r+0x1c>)
 8011aec:	2300      	movs	r3, #0
 8011aee:	4604      	mov	r4, r0
 8011af0:	4608      	mov	r0, r1
 8011af2:	602b      	str	r3, [r5, #0]
 8011af4:	f7f1 fef0 	bl	80038d8 <_isatty>
 8011af8:	1c43      	adds	r3, r0, #1
 8011afa:	d102      	bne.n	8011b02 <_isatty_r+0x1a>
 8011afc:	682b      	ldr	r3, [r5, #0]
 8011afe:	b103      	cbz	r3, 8011b02 <_isatty_r+0x1a>
 8011b00:	6023      	str	r3, [r4, #0]
 8011b02:	bd38      	pop	{r3, r4, r5, pc}
 8011b04:	20002430 	.word	0x20002430

08011b08 <_lseek_r>:
 8011b08:	b538      	push	{r3, r4, r5, lr}
 8011b0a:	4d07      	ldr	r5, [pc, #28]	; (8011b28 <_lseek_r+0x20>)
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	4608      	mov	r0, r1
 8011b10:	4611      	mov	r1, r2
 8011b12:	2200      	movs	r2, #0
 8011b14:	602a      	str	r2, [r5, #0]
 8011b16:	461a      	mov	r2, r3
 8011b18:	f7f1 fee9 	bl	80038ee <_lseek>
 8011b1c:	1c43      	adds	r3, r0, #1
 8011b1e:	d102      	bne.n	8011b26 <_lseek_r+0x1e>
 8011b20:	682b      	ldr	r3, [r5, #0]
 8011b22:	b103      	cbz	r3, 8011b26 <_lseek_r+0x1e>
 8011b24:	6023      	str	r3, [r4, #0]
 8011b26:	bd38      	pop	{r3, r4, r5, pc}
 8011b28:	20002430 	.word	0x20002430

08011b2c <_read_r>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	4d07      	ldr	r5, [pc, #28]	; (8011b4c <_read_r+0x20>)
 8011b30:	4604      	mov	r4, r0
 8011b32:	4608      	mov	r0, r1
 8011b34:	4611      	mov	r1, r2
 8011b36:	2200      	movs	r2, #0
 8011b38:	602a      	str	r2, [r5, #0]
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	f7f1 fe77 	bl	800382e <_read>
 8011b40:	1c43      	adds	r3, r0, #1
 8011b42:	d102      	bne.n	8011b4a <_read_r+0x1e>
 8011b44:	682b      	ldr	r3, [r5, #0]
 8011b46:	b103      	cbz	r3, 8011b4a <_read_r+0x1e>
 8011b48:	6023      	str	r3, [r4, #0]
 8011b4a:	bd38      	pop	{r3, r4, r5, pc}
 8011b4c:	20002430 	.word	0x20002430

08011b50 <cos>:
 8011b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b52:	ec53 2b10 	vmov	r2, r3, d0
 8011b56:	4826      	ldr	r0, [pc, #152]	; (8011bf0 <cos+0xa0>)
 8011b58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011b5c:	4281      	cmp	r1, r0
 8011b5e:	dc06      	bgt.n	8011b6e <cos+0x1e>
 8011b60:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011be8 <cos+0x98>
 8011b64:	b005      	add	sp, #20
 8011b66:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b6a:	f000 bb79 	b.w	8012260 <__kernel_cos>
 8011b6e:	4821      	ldr	r0, [pc, #132]	; (8011bf4 <cos+0xa4>)
 8011b70:	4281      	cmp	r1, r0
 8011b72:	dd09      	ble.n	8011b88 <cos+0x38>
 8011b74:	ee10 0a10 	vmov	r0, s0
 8011b78:	4619      	mov	r1, r3
 8011b7a:	f7ee fbb5 	bl	80002e8 <__aeabi_dsub>
 8011b7e:	ec41 0b10 	vmov	d0, r0, r1
 8011b82:	b005      	add	sp, #20
 8011b84:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b88:	4668      	mov	r0, sp
 8011b8a:	f000 f95d 	bl	8011e48 <__ieee754_rem_pio2>
 8011b8e:	f000 0003 	and.w	r0, r0, #3
 8011b92:	2801      	cmp	r0, #1
 8011b94:	d00b      	beq.n	8011bae <cos+0x5e>
 8011b96:	2802      	cmp	r0, #2
 8011b98:	d016      	beq.n	8011bc8 <cos+0x78>
 8011b9a:	b9e0      	cbnz	r0, 8011bd6 <cos+0x86>
 8011b9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ba0:	ed9d 0b00 	vldr	d0, [sp]
 8011ba4:	f000 fb5c 	bl	8012260 <__kernel_cos>
 8011ba8:	ec51 0b10 	vmov	r0, r1, d0
 8011bac:	e7e7      	b.n	8011b7e <cos+0x2e>
 8011bae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bb2:	ed9d 0b00 	vldr	d0, [sp]
 8011bb6:	f000 ff6b 	bl	8012a90 <__kernel_sin>
 8011bba:	ec53 2b10 	vmov	r2, r3, d0
 8011bbe:	ee10 0a10 	vmov	r0, s0
 8011bc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011bc6:	e7da      	b.n	8011b7e <cos+0x2e>
 8011bc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bcc:	ed9d 0b00 	vldr	d0, [sp]
 8011bd0:	f000 fb46 	bl	8012260 <__kernel_cos>
 8011bd4:	e7f1      	b.n	8011bba <cos+0x6a>
 8011bd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bda:	ed9d 0b00 	vldr	d0, [sp]
 8011bde:	2001      	movs	r0, #1
 8011be0:	f000 ff56 	bl	8012a90 <__kernel_sin>
 8011be4:	e7e0      	b.n	8011ba8 <cos+0x58>
 8011be6:	bf00      	nop
	...
 8011bf0:	3fe921fb 	.word	0x3fe921fb
 8011bf4:	7fefffff 	.word	0x7fefffff

08011bf8 <sin>:
 8011bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bfa:	ec53 2b10 	vmov	r2, r3, d0
 8011bfe:	4828      	ldr	r0, [pc, #160]	; (8011ca0 <sin+0xa8>)
 8011c00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011c04:	4281      	cmp	r1, r0
 8011c06:	dc07      	bgt.n	8011c18 <sin+0x20>
 8011c08:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011c98 <sin+0xa0>
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	b005      	add	sp, #20
 8011c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c14:	f000 bf3c 	b.w	8012a90 <__kernel_sin>
 8011c18:	4822      	ldr	r0, [pc, #136]	; (8011ca4 <sin+0xac>)
 8011c1a:	4281      	cmp	r1, r0
 8011c1c:	dd09      	ble.n	8011c32 <sin+0x3a>
 8011c1e:	ee10 0a10 	vmov	r0, s0
 8011c22:	4619      	mov	r1, r3
 8011c24:	f7ee fb60 	bl	80002e8 <__aeabi_dsub>
 8011c28:	ec41 0b10 	vmov	d0, r0, r1
 8011c2c:	b005      	add	sp, #20
 8011c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c32:	4668      	mov	r0, sp
 8011c34:	f000 f908 	bl	8011e48 <__ieee754_rem_pio2>
 8011c38:	f000 0003 	and.w	r0, r0, #3
 8011c3c:	2801      	cmp	r0, #1
 8011c3e:	d00c      	beq.n	8011c5a <sin+0x62>
 8011c40:	2802      	cmp	r0, #2
 8011c42:	d011      	beq.n	8011c68 <sin+0x70>
 8011c44:	b9f0      	cbnz	r0, 8011c84 <sin+0x8c>
 8011c46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c4a:	ed9d 0b00 	vldr	d0, [sp]
 8011c4e:	2001      	movs	r0, #1
 8011c50:	f000 ff1e 	bl	8012a90 <__kernel_sin>
 8011c54:	ec51 0b10 	vmov	r0, r1, d0
 8011c58:	e7e6      	b.n	8011c28 <sin+0x30>
 8011c5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c5e:	ed9d 0b00 	vldr	d0, [sp]
 8011c62:	f000 fafd 	bl	8012260 <__kernel_cos>
 8011c66:	e7f5      	b.n	8011c54 <sin+0x5c>
 8011c68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c6c:	ed9d 0b00 	vldr	d0, [sp]
 8011c70:	2001      	movs	r0, #1
 8011c72:	f000 ff0d 	bl	8012a90 <__kernel_sin>
 8011c76:	ec53 2b10 	vmov	r2, r3, d0
 8011c7a:	ee10 0a10 	vmov	r0, s0
 8011c7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c82:	e7d1      	b.n	8011c28 <sin+0x30>
 8011c84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c88:	ed9d 0b00 	vldr	d0, [sp]
 8011c8c:	f000 fae8 	bl	8012260 <__kernel_cos>
 8011c90:	e7f1      	b.n	8011c76 <sin+0x7e>
 8011c92:	bf00      	nop
 8011c94:	f3af 8000 	nop.w
	...
 8011ca0:	3fe921fb 	.word	0x3fe921fb
 8011ca4:	7fefffff 	.word	0x7fefffff

08011ca8 <atan2>:
 8011ca8:	f000 b802 	b.w	8011cb0 <__ieee754_atan2>
 8011cac:	0000      	movs	r0, r0
	...

08011cb0 <__ieee754_atan2>:
 8011cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cb4:	ec57 6b11 	vmov	r6, r7, d1
 8011cb8:	4273      	negs	r3, r6
 8011cba:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011e40 <__ieee754_atan2+0x190>
 8011cbe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011cc2:	4333      	orrs	r3, r6
 8011cc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011cc8:	4573      	cmp	r3, lr
 8011cca:	ec51 0b10 	vmov	r0, r1, d0
 8011cce:	ee11 8a10 	vmov	r8, s2
 8011cd2:	d80a      	bhi.n	8011cea <__ieee754_atan2+0x3a>
 8011cd4:	4244      	negs	r4, r0
 8011cd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011cda:	4304      	orrs	r4, r0
 8011cdc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011ce0:	4574      	cmp	r4, lr
 8011ce2:	ee10 9a10 	vmov	r9, s0
 8011ce6:	468c      	mov	ip, r1
 8011ce8:	d907      	bls.n	8011cfa <__ieee754_atan2+0x4a>
 8011cea:	4632      	mov	r2, r6
 8011cec:	463b      	mov	r3, r7
 8011cee:	f7ee fafd 	bl	80002ec <__adddf3>
 8011cf2:	ec41 0b10 	vmov	d0, r0, r1
 8011cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cfa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011cfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011d02:	4334      	orrs	r4, r6
 8011d04:	d103      	bne.n	8011d0e <__ieee754_atan2+0x5e>
 8011d06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d0a:	f000 bf81 	b.w	8012c10 <atan>
 8011d0e:	17bc      	asrs	r4, r7, #30
 8011d10:	f004 0402 	and.w	r4, r4, #2
 8011d14:	ea53 0909 	orrs.w	r9, r3, r9
 8011d18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011d1c:	d107      	bne.n	8011d2e <__ieee754_atan2+0x7e>
 8011d1e:	2c02      	cmp	r4, #2
 8011d20:	d060      	beq.n	8011de4 <__ieee754_atan2+0x134>
 8011d22:	2c03      	cmp	r4, #3
 8011d24:	d1e5      	bne.n	8011cf2 <__ieee754_atan2+0x42>
 8011d26:	a142      	add	r1, pc, #264	; (adr r1, 8011e30 <__ieee754_atan2+0x180>)
 8011d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d2c:	e7e1      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011d2e:	ea52 0808 	orrs.w	r8, r2, r8
 8011d32:	d106      	bne.n	8011d42 <__ieee754_atan2+0x92>
 8011d34:	f1bc 0f00 	cmp.w	ip, #0
 8011d38:	da5f      	bge.n	8011dfa <__ieee754_atan2+0x14a>
 8011d3a:	a13f      	add	r1, pc, #252	; (adr r1, 8011e38 <__ieee754_atan2+0x188>)
 8011d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d40:	e7d7      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011d42:	4572      	cmp	r2, lr
 8011d44:	d10f      	bne.n	8011d66 <__ieee754_atan2+0xb6>
 8011d46:	4293      	cmp	r3, r2
 8011d48:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011d4c:	d107      	bne.n	8011d5e <__ieee754_atan2+0xae>
 8011d4e:	2c02      	cmp	r4, #2
 8011d50:	d84c      	bhi.n	8011dec <__ieee754_atan2+0x13c>
 8011d52:	4b35      	ldr	r3, [pc, #212]	; (8011e28 <__ieee754_atan2+0x178>)
 8011d54:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011d58:	e9d4 0100 	ldrd	r0, r1, [r4]
 8011d5c:	e7c9      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011d5e:	2c02      	cmp	r4, #2
 8011d60:	d848      	bhi.n	8011df4 <__ieee754_atan2+0x144>
 8011d62:	4b32      	ldr	r3, [pc, #200]	; (8011e2c <__ieee754_atan2+0x17c>)
 8011d64:	e7f6      	b.n	8011d54 <__ieee754_atan2+0xa4>
 8011d66:	4573      	cmp	r3, lr
 8011d68:	d0e4      	beq.n	8011d34 <__ieee754_atan2+0x84>
 8011d6a:	1a9b      	subs	r3, r3, r2
 8011d6c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011d70:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011d74:	da1e      	bge.n	8011db4 <__ieee754_atan2+0x104>
 8011d76:	2f00      	cmp	r7, #0
 8011d78:	da01      	bge.n	8011d7e <__ieee754_atan2+0xce>
 8011d7a:	323c      	adds	r2, #60	; 0x3c
 8011d7c:	db1e      	blt.n	8011dbc <__ieee754_atan2+0x10c>
 8011d7e:	4632      	mov	r2, r6
 8011d80:	463b      	mov	r3, r7
 8011d82:	f7ee fd93 	bl	80008ac <__aeabi_ddiv>
 8011d86:	ec41 0b10 	vmov	d0, r0, r1
 8011d8a:	f001 f8e1 	bl	8012f50 <fabs>
 8011d8e:	f000 ff3f 	bl	8012c10 <atan>
 8011d92:	ec51 0b10 	vmov	r0, r1, d0
 8011d96:	2c01      	cmp	r4, #1
 8011d98:	d013      	beq.n	8011dc2 <__ieee754_atan2+0x112>
 8011d9a:	2c02      	cmp	r4, #2
 8011d9c:	d015      	beq.n	8011dca <__ieee754_atan2+0x11a>
 8011d9e:	2c00      	cmp	r4, #0
 8011da0:	d0a7      	beq.n	8011cf2 <__ieee754_atan2+0x42>
 8011da2:	a319      	add	r3, pc, #100	; (adr r3, 8011e08 <__ieee754_atan2+0x158>)
 8011da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da8:	f7ee fa9e 	bl	80002e8 <__aeabi_dsub>
 8011dac:	a318      	add	r3, pc, #96	; (adr r3, 8011e10 <__ieee754_atan2+0x160>)
 8011dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db2:	e014      	b.n	8011dde <__ieee754_atan2+0x12e>
 8011db4:	a118      	add	r1, pc, #96	; (adr r1, 8011e18 <__ieee754_atan2+0x168>)
 8011db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dba:	e7ec      	b.n	8011d96 <__ieee754_atan2+0xe6>
 8011dbc:	2000      	movs	r0, #0
 8011dbe:	2100      	movs	r1, #0
 8011dc0:	e7e9      	b.n	8011d96 <__ieee754_atan2+0xe6>
 8011dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	e793      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011dca:	a30f      	add	r3, pc, #60	; (adr r3, 8011e08 <__ieee754_atan2+0x158>)
 8011dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd0:	f7ee fa8a 	bl	80002e8 <__aeabi_dsub>
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	460b      	mov	r3, r1
 8011dd8:	a10d      	add	r1, pc, #52	; (adr r1, 8011e10 <__ieee754_atan2+0x160>)
 8011dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dde:	f7ee fa83 	bl	80002e8 <__aeabi_dsub>
 8011de2:	e786      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011de4:	a10a      	add	r1, pc, #40	; (adr r1, 8011e10 <__ieee754_atan2+0x160>)
 8011de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dea:	e782      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011dec:	a10c      	add	r1, pc, #48	; (adr r1, 8011e20 <__ieee754_atan2+0x170>)
 8011dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011df2:	e77e      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011df4:	2000      	movs	r0, #0
 8011df6:	2100      	movs	r1, #0
 8011df8:	e77b      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011dfa:	a107      	add	r1, pc, #28	; (adr r1, 8011e18 <__ieee754_atan2+0x168>)
 8011dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e00:	e777      	b.n	8011cf2 <__ieee754_atan2+0x42>
 8011e02:	bf00      	nop
 8011e04:	f3af 8000 	nop.w
 8011e08:	33145c07 	.word	0x33145c07
 8011e0c:	3ca1a626 	.word	0x3ca1a626
 8011e10:	54442d18 	.word	0x54442d18
 8011e14:	400921fb 	.word	0x400921fb
 8011e18:	54442d18 	.word	0x54442d18
 8011e1c:	3ff921fb 	.word	0x3ff921fb
 8011e20:	54442d18 	.word	0x54442d18
 8011e24:	3fe921fb 	.word	0x3fe921fb
 8011e28:	08013748 	.word	0x08013748
 8011e2c:	08013760 	.word	0x08013760
 8011e30:	54442d18 	.word	0x54442d18
 8011e34:	c00921fb 	.word	0xc00921fb
 8011e38:	54442d18 	.word	0x54442d18
 8011e3c:	bff921fb 	.word	0xbff921fb
 8011e40:	7ff00000 	.word	0x7ff00000
 8011e44:	00000000 	.word	0x00000000

08011e48 <__ieee754_rem_pio2>:
 8011e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e4c:	ed2d 8b02 	vpush	{d8}
 8011e50:	ec55 4b10 	vmov	r4, r5, d0
 8011e54:	4bca      	ldr	r3, [pc, #808]	; (8012180 <__ieee754_rem_pio2+0x338>)
 8011e56:	b08b      	sub	sp, #44	; 0x2c
 8011e58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011e5c:	4598      	cmp	r8, r3
 8011e5e:	4682      	mov	sl, r0
 8011e60:	9502      	str	r5, [sp, #8]
 8011e62:	dc08      	bgt.n	8011e76 <__ieee754_rem_pio2+0x2e>
 8011e64:	2200      	movs	r2, #0
 8011e66:	2300      	movs	r3, #0
 8011e68:	ed80 0b00 	vstr	d0, [r0]
 8011e6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011e70:	f04f 0b00 	mov.w	fp, #0
 8011e74:	e028      	b.n	8011ec8 <__ieee754_rem_pio2+0x80>
 8011e76:	4bc3      	ldr	r3, [pc, #780]	; (8012184 <__ieee754_rem_pio2+0x33c>)
 8011e78:	4598      	cmp	r8, r3
 8011e7a:	dc78      	bgt.n	8011f6e <__ieee754_rem_pio2+0x126>
 8011e7c:	9b02      	ldr	r3, [sp, #8]
 8011e7e:	4ec2      	ldr	r6, [pc, #776]	; (8012188 <__ieee754_rem_pio2+0x340>)
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	ee10 0a10 	vmov	r0, s0
 8011e86:	a3b0      	add	r3, pc, #704	; (adr r3, 8012148 <__ieee754_rem_pio2+0x300>)
 8011e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	dd39      	ble.n	8011f04 <__ieee754_rem_pio2+0xbc>
 8011e90:	f7ee fa2a 	bl	80002e8 <__aeabi_dsub>
 8011e94:	45b0      	cmp	r8, r6
 8011e96:	4604      	mov	r4, r0
 8011e98:	460d      	mov	r5, r1
 8011e9a:	d01b      	beq.n	8011ed4 <__ieee754_rem_pio2+0x8c>
 8011e9c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea2:	f7ee fa21 	bl	80002e8 <__aeabi_dsub>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	e9ca 2300 	strd	r2, r3, [sl]
 8011eae:	4620      	mov	r0, r4
 8011eb0:	4629      	mov	r1, r5
 8011eb2:	f7ee fa19 	bl	80002e8 <__aeabi_dsub>
 8011eb6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ebc:	f7ee fa14 	bl	80002e8 <__aeabi_dsub>
 8011ec0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ec4:	f04f 0b01 	mov.w	fp, #1
 8011ec8:	4658      	mov	r0, fp
 8011eca:	b00b      	add	sp, #44	; 0x2c
 8011ecc:	ecbd 8b02 	vpop	{d8}
 8011ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed4:	a3a0      	add	r3, pc, #640	; (adr r3, 8012158 <__ieee754_rem_pio2+0x310>)
 8011ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eda:	f7ee fa05 	bl	80002e8 <__aeabi_dsub>
 8011ede:	a3a0      	add	r3, pc, #640	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8011ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	460d      	mov	r5, r1
 8011ee8:	f7ee f9fe 	bl	80002e8 <__aeabi_dsub>
 8011eec:	4602      	mov	r2, r0
 8011eee:	460b      	mov	r3, r1
 8011ef0:	e9ca 2300 	strd	r2, r3, [sl]
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	f7ee f9f6 	bl	80002e8 <__aeabi_dsub>
 8011efc:	a398      	add	r3, pc, #608	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	e7db      	b.n	8011ebc <__ieee754_rem_pio2+0x74>
 8011f04:	f7ee f9f2 	bl	80002ec <__adddf3>
 8011f08:	45b0      	cmp	r8, r6
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	460d      	mov	r5, r1
 8011f0e:	d016      	beq.n	8011f3e <__ieee754_rem_pio2+0xf6>
 8011f10:	a38f      	add	r3, pc, #572	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f16:	f7ee f9e9 	bl	80002ec <__adddf3>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	e9ca 2300 	strd	r2, r3, [sl]
 8011f22:	4620      	mov	r0, r4
 8011f24:	4629      	mov	r1, r5
 8011f26:	f7ee f9df 	bl	80002e8 <__aeabi_dsub>
 8011f2a:	a389      	add	r3, pc, #548	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f30:	f7ee f9dc 	bl	80002ec <__adddf3>
 8011f34:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011f38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f3c:	e7c4      	b.n	8011ec8 <__ieee754_rem_pio2+0x80>
 8011f3e:	a386      	add	r3, pc, #536	; (adr r3, 8012158 <__ieee754_rem_pio2+0x310>)
 8011f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f44:	f7ee f9d2 	bl	80002ec <__adddf3>
 8011f48:	a385      	add	r3, pc, #532	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8011f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4e:	4604      	mov	r4, r0
 8011f50:	460d      	mov	r5, r1
 8011f52:	f7ee f9cb 	bl	80002ec <__adddf3>
 8011f56:	4602      	mov	r2, r0
 8011f58:	460b      	mov	r3, r1
 8011f5a:	e9ca 2300 	strd	r2, r3, [sl]
 8011f5e:	4620      	mov	r0, r4
 8011f60:	4629      	mov	r1, r5
 8011f62:	f7ee f9c1 	bl	80002e8 <__aeabi_dsub>
 8011f66:	a37e      	add	r3, pc, #504	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8011f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6c:	e7e0      	b.n	8011f30 <__ieee754_rem_pio2+0xe8>
 8011f6e:	4b87      	ldr	r3, [pc, #540]	; (801218c <__ieee754_rem_pio2+0x344>)
 8011f70:	4598      	cmp	r8, r3
 8011f72:	f300 80d9 	bgt.w	8012128 <__ieee754_rem_pio2+0x2e0>
 8011f76:	f000 ffeb 	bl	8012f50 <fabs>
 8011f7a:	ec55 4b10 	vmov	r4, r5, d0
 8011f7e:	ee10 0a10 	vmov	r0, s0
 8011f82:	a379      	add	r3, pc, #484	; (adr r3, 8012168 <__ieee754_rem_pio2+0x320>)
 8011f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f88:	4629      	mov	r1, r5
 8011f8a:	f7ee fb65 	bl	8000658 <__aeabi_dmul>
 8011f8e:	4b80      	ldr	r3, [pc, #512]	; (8012190 <__ieee754_rem_pio2+0x348>)
 8011f90:	2200      	movs	r2, #0
 8011f92:	f7ee f9ab 	bl	80002ec <__adddf3>
 8011f96:	f7ee fe0f 	bl	8000bb8 <__aeabi_d2iz>
 8011f9a:	4683      	mov	fp, r0
 8011f9c:	f7ee faf2 	bl	8000584 <__aeabi_i2d>
 8011fa0:	4602      	mov	r2, r0
 8011fa2:	460b      	mov	r3, r1
 8011fa4:	ec43 2b18 	vmov	d8, r2, r3
 8011fa8:	a367      	add	r3, pc, #412	; (adr r3, 8012148 <__ieee754_rem_pio2+0x300>)
 8011faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fae:	f7ee fb53 	bl	8000658 <__aeabi_dmul>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f7ee f995 	bl	80002e8 <__aeabi_dsub>
 8011fbe:	a364      	add	r3, pc, #400	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc4:	4606      	mov	r6, r0
 8011fc6:	460f      	mov	r7, r1
 8011fc8:	ec51 0b18 	vmov	r0, r1, d8
 8011fcc:	f7ee fb44 	bl	8000658 <__aeabi_dmul>
 8011fd0:	f1bb 0f1f 	cmp.w	fp, #31
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	460d      	mov	r5, r1
 8011fd8:	dc0d      	bgt.n	8011ff6 <__ieee754_rem_pio2+0x1ae>
 8011fda:	4b6e      	ldr	r3, [pc, #440]	; (8012194 <__ieee754_rem_pio2+0x34c>)
 8011fdc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8011fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fe4:	4543      	cmp	r3, r8
 8011fe6:	d006      	beq.n	8011ff6 <__ieee754_rem_pio2+0x1ae>
 8011fe8:	4622      	mov	r2, r4
 8011fea:	462b      	mov	r3, r5
 8011fec:	4630      	mov	r0, r6
 8011fee:	4639      	mov	r1, r7
 8011ff0:	f7ee f97a 	bl	80002e8 <__aeabi_dsub>
 8011ff4:	e00f      	b.n	8012016 <__ieee754_rem_pio2+0x1ce>
 8011ff6:	462b      	mov	r3, r5
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	4639      	mov	r1, r7
 8011ffe:	f7ee f973 	bl	80002e8 <__aeabi_dsub>
 8012002:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012006:	9303      	str	r3, [sp, #12]
 8012008:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801200c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012010:	f1b8 0f10 	cmp.w	r8, #16
 8012014:	dc02      	bgt.n	801201c <__ieee754_rem_pio2+0x1d4>
 8012016:	e9ca 0100 	strd	r0, r1, [sl]
 801201a:	e039      	b.n	8012090 <__ieee754_rem_pio2+0x248>
 801201c:	a34e      	add	r3, pc, #312	; (adr r3, 8012158 <__ieee754_rem_pio2+0x310>)
 801201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012022:	ec51 0b18 	vmov	r0, r1, d8
 8012026:	f7ee fb17 	bl	8000658 <__aeabi_dmul>
 801202a:	4604      	mov	r4, r0
 801202c:	460d      	mov	r5, r1
 801202e:	4602      	mov	r2, r0
 8012030:	460b      	mov	r3, r1
 8012032:	4630      	mov	r0, r6
 8012034:	4639      	mov	r1, r7
 8012036:	f7ee f957 	bl	80002e8 <__aeabi_dsub>
 801203a:	4602      	mov	r2, r0
 801203c:	460b      	mov	r3, r1
 801203e:	4680      	mov	r8, r0
 8012040:	4689      	mov	r9, r1
 8012042:	4630      	mov	r0, r6
 8012044:	4639      	mov	r1, r7
 8012046:	f7ee f94f 	bl	80002e8 <__aeabi_dsub>
 801204a:	4622      	mov	r2, r4
 801204c:	462b      	mov	r3, r5
 801204e:	f7ee f94b 	bl	80002e8 <__aeabi_dsub>
 8012052:	a343      	add	r3, pc, #268	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8012054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012058:	4604      	mov	r4, r0
 801205a:	460d      	mov	r5, r1
 801205c:	ec51 0b18 	vmov	r0, r1, d8
 8012060:	f7ee fafa 	bl	8000658 <__aeabi_dmul>
 8012064:	4622      	mov	r2, r4
 8012066:	462b      	mov	r3, r5
 8012068:	f7ee f93e 	bl	80002e8 <__aeabi_dsub>
 801206c:	4602      	mov	r2, r0
 801206e:	460b      	mov	r3, r1
 8012070:	4604      	mov	r4, r0
 8012072:	460d      	mov	r5, r1
 8012074:	4640      	mov	r0, r8
 8012076:	4649      	mov	r1, r9
 8012078:	f7ee f936 	bl	80002e8 <__aeabi_dsub>
 801207c:	9a03      	ldr	r2, [sp, #12]
 801207e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	2b31      	cmp	r3, #49	; 0x31
 8012086:	dc24      	bgt.n	80120d2 <__ieee754_rem_pio2+0x28a>
 8012088:	e9ca 0100 	strd	r0, r1, [sl]
 801208c:	4646      	mov	r6, r8
 801208e:	464f      	mov	r7, r9
 8012090:	e9da 8900 	ldrd	r8, r9, [sl]
 8012094:	4630      	mov	r0, r6
 8012096:	4642      	mov	r2, r8
 8012098:	464b      	mov	r3, r9
 801209a:	4639      	mov	r1, r7
 801209c:	f7ee f924 	bl	80002e8 <__aeabi_dsub>
 80120a0:	462b      	mov	r3, r5
 80120a2:	4622      	mov	r2, r4
 80120a4:	f7ee f920 	bl	80002e8 <__aeabi_dsub>
 80120a8:	9b02      	ldr	r3, [sp, #8]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80120b0:	f6bf af0a 	bge.w	8011ec8 <__ieee754_rem_pio2+0x80>
 80120b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120b8:	f8ca 3004 	str.w	r3, [sl, #4]
 80120bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120c0:	f8ca 8000 	str.w	r8, [sl]
 80120c4:	f8ca 0008 	str.w	r0, [sl, #8]
 80120c8:	f8ca 300c 	str.w	r3, [sl, #12]
 80120cc:	f1cb 0b00 	rsb	fp, fp, #0
 80120d0:	e6fa      	b.n	8011ec8 <__ieee754_rem_pio2+0x80>
 80120d2:	a327      	add	r3, pc, #156	; (adr r3, 8012170 <__ieee754_rem_pio2+0x328>)
 80120d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d8:	ec51 0b18 	vmov	r0, r1, d8
 80120dc:	f7ee fabc 	bl	8000658 <__aeabi_dmul>
 80120e0:	4604      	mov	r4, r0
 80120e2:	460d      	mov	r5, r1
 80120e4:	4602      	mov	r2, r0
 80120e6:	460b      	mov	r3, r1
 80120e8:	4640      	mov	r0, r8
 80120ea:	4649      	mov	r1, r9
 80120ec:	f7ee f8fc 	bl	80002e8 <__aeabi_dsub>
 80120f0:	4602      	mov	r2, r0
 80120f2:	460b      	mov	r3, r1
 80120f4:	4606      	mov	r6, r0
 80120f6:	460f      	mov	r7, r1
 80120f8:	4640      	mov	r0, r8
 80120fa:	4649      	mov	r1, r9
 80120fc:	f7ee f8f4 	bl	80002e8 <__aeabi_dsub>
 8012100:	4622      	mov	r2, r4
 8012102:	462b      	mov	r3, r5
 8012104:	f7ee f8f0 	bl	80002e8 <__aeabi_dsub>
 8012108:	a31b      	add	r3, pc, #108	; (adr r3, 8012178 <__ieee754_rem_pio2+0x330>)
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	4604      	mov	r4, r0
 8012110:	460d      	mov	r5, r1
 8012112:	ec51 0b18 	vmov	r0, r1, d8
 8012116:	f7ee fa9f 	bl	8000658 <__aeabi_dmul>
 801211a:	4622      	mov	r2, r4
 801211c:	462b      	mov	r3, r5
 801211e:	f7ee f8e3 	bl	80002e8 <__aeabi_dsub>
 8012122:	4604      	mov	r4, r0
 8012124:	460d      	mov	r5, r1
 8012126:	e75f      	b.n	8011fe8 <__ieee754_rem_pio2+0x1a0>
 8012128:	4b1b      	ldr	r3, [pc, #108]	; (8012198 <__ieee754_rem_pio2+0x350>)
 801212a:	4598      	cmp	r8, r3
 801212c:	dd36      	ble.n	801219c <__ieee754_rem_pio2+0x354>
 801212e:	ee10 2a10 	vmov	r2, s0
 8012132:	462b      	mov	r3, r5
 8012134:	4620      	mov	r0, r4
 8012136:	4629      	mov	r1, r5
 8012138:	f7ee f8d6 	bl	80002e8 <__aeabi_dsub>
 801213c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012140:	e9ca 0100 	strd	r0, r1, [sl]
 8012144:	e694      	b.n	8011e70 <__ieee754_rem_pio2+0x28>
 8012146:	bf00      	nop
 8012148:	54400000 	.word	0x54400000
 801214c:	3ff921fb 	.word	0x3ff921fb
 8012150:	1a626331 	.word	0x1a626331
 8012154:	3dd0b461 	.word	0x3dd0b461
 8012158:	1a600000 	.word	0x1a600000
 801215c:	3dd0b461 	.word	0x3dd0b461
 8012160:	2e037073 	.word	0x2e037073
 8012164:	3ba3198a 	.word	0x3ba3198a
 8012168:	6dc9c883 	.word	0x6dc9c883
 801216c:	3fe45f30 	.word	0x3fe45f30
 8012170:	2e000000 	.word	0x2e000000
 8012174:	3ba3198a 	.word	0x3ba3198a
 8012178:	252049c1 	.word	0x252049c1
 801217c:	397b839a 	.word	0x397b839a
 8012180:	3fe921fb 	.word	0x3fe921fb
 8012184:	4002d97b 	.word	0x4002d97b
 8012188:	3ff921fb 	.word	0x3ff921fb
 801218c:	413921fb 	.word	0x413921fb
 8012190:	3fe00000 	.word	0x3fe00000
 8012194:	08013778 	.word	0x08013778
 8012198:	7fefffff 	.word	0x7fefffff
 801219c:	ea4f 5428 	mov.w	r4, r8, asr #20
 80121a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80121a4:	ee10 0a10 	vmov	r0, s0
 80121a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80121ac:	ee10 6a10 	vmov	r6, s0
 80121b0:	460f      	mov	r7, r1
 80121b2:	f7ee fd01 	bl	8000bb8 <__aeabi_d2iz>
 80121b6:	f7ee f9e5 	bl	8000584 <__aeabi_i2d>
 80121ba:	4602      	mov	r2, r0
 80121bc:	460b      	mov	r3, r1
 80121be:	4630      	mov	r0, r6
 80121c0:	4639      	mov	r1, r7
 80121c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80121c6:	f7ee f88f 	bl	80002e8 <__aeabi_dsub>
 80121ca:	4b23      	ldr	r3, [pc, #140]	; (8012258 <__ieee754_rem_pio2+0x410>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	f7ee fa43 	bl	8000658 <__aeabi_dmul>
 80121d2:	460f      	mov	r7, r1
 80121d4:	4606      	mov	r6, r0
 80121d6:	f7ee fcef 	bl	8000bb8 <__aeabi_d2iz>
 80121da:	f7ee f9d3 	bl	8000584 <__aeabi_i2d>
 80121de:	4602      	mov	r2, r0
 80121e0:	460b      	mov	r3, r1
 80121e2:	4630      	mov	r0, r6
 80121e4:	4639      	mov	r1, r7
 80121e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80121ea:	f7ee f87d 	bl	80002e8 <__aeabi_dsub>
 80121ee:	4b1a      	ldr	r3, [pc, #104]	; (8012258 <__ieee754_rem_pio2+0x410>)
 80121f0:	2200      	movs	r2, #0
 80121f2:	f7ee fa31 	bl	8000658 <__aeabi_dmul>
 80121f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80121fa:	ad04      	add	r5, sp, #16
 80121fc:	f04f 0803 	mov.w	r8, #3
 8012200:	46a9      	mov	r9, r5
 8012202:	2600      	movs	r6, #0
 8012204:	2700      	movs	r7, #0
 8012206:	4632      	mov	r2, r6
 8012208:	463b      	mov	r3, r7
 801220a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801220e:	46c3      	mov	fp, r8
 8012210:	3d08      	subs	r5, #8
 8012212:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012216:	f7ee fc87 	bl	8000b28 <__aeabi_dcmpeq>
 801221a:	2800      	cmp	r0, #0
 801221c:	d1f3      	bne.n	8012206 <__ieee754_rem_pio2+0x3be>
 801221e:	4b0f      	ldr	r3, [pc, #60]	; (801225c <__ieee754_rem_pio2+0x414>)
 8012220:	9301      	str	r3, [sp, #4]
 8012222:	2302      	movs	r3, #2
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	4622      	mov	r2, r4
 8012228:	465b      	mov	r3, fp
 801222a:	4651      	mov	r1, sl
 801222c:	4648      	mov	r0, r9
 801222e:	f000 f8df 	bl	80123f0 <__kernel_rem_pio2>
 8012232:	9b02      	ldr	r3, [sp, #8]
 8012234:	2b00      	cmp	r3, #0
 8012236:	4683      	mov	fp, r0
 8012238:	f6bf ae46 	bge.w	8011ec8 <__ieee754_rem_pio2+0x80>
 801223c:	e9da 2100 	ldrd	r2, r1, [sl]
 8012240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012244:	e9ca 2300 	strd	r2, r3, [sl]
 8012248:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801224c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012250:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012254:	e73a      	b.n	80120cc <__ieee754_rem_pio2+0x284>
 8012256:	bf00      	nop
 8012258:	41700000 	.word	0x41700000
 801225c:	080137f8 	.word	0x080137f8

08012260 <__kernel_cos>:
 8012260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	ec57 6b10 	vmov	r6, r7, d0
 8012268:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801226c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012270:	ed8d 1b00 	vstr	d1, [sp]
 8012274:	da07      	bge.n	8012286 <__kernel_cos+0x26>
 8012276:	ee10 0a10 	vmov	r0, s0
 801227a:	4639      	mov	r1, r7
 801227c:	f7ee fc9c 	bl	8000bb8 <__aeabi_d2iz>
 8012280:	2800      	cmp	r0, #0
 8012282:	f000 8088 	beq.w	8012396 <__kernel_cos+0x136>
 8012286:	4632      	mov	r2, r6
 8012288:	463b      	mov	r3, r7
 801228a:	4630      	mov	r0, r6
 801228c:	4639      	mov	r1, r7
 801228e:	f7ee f9e3 	bl	8000658 <__aeabi_dmul>
 8012292:	4b51      	ldr	r3, [pc, #324]	; (80123d8 <__kernel_cos+0x178>)
 8012294:	2200      	movs	r2, #0
 8012296:	4604      	mov	r4, r0
 8012298:	460d      	mov	r5, r1
 801229a:	f7ee f9dd 	bl	8000658 <__aeabi_dmul>
 801229e:	a340      	add	r3, pc, #256	; (adr r3, 80123a0 <__kernel_cos+0x140>)
 80122a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a4:	4682      	mov	sl, r0
 80122a6:	468b      	mov	fp, r1
 80122a8:	4620      	mov	r0, r4
 80122aa:	4629      	mov	r1, r5
 80122ac:	f7ee f9d4 	bl	8000658 <__aeabi_dmul>
 80122b0:	a33d      	add	r3, pc, #244	; (adr r3, 80123a8 <__kernel_cos+0x148>)
 80122b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b6:	f7ee f819 	bl	80002ec <__adddf3>
 80122ba:	4622      	mov	r2, r4
 80122bc:	462b      	mov	r3, r5
 80122be:	f7ee f9cb 	bl	8000658 <__aeabi_dmul>
 80122c2:	a33b      	add	r3, pc, #236	; (adr r3, 80123b0 <__kernel_cos+0x150>)
 80122c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c8:	f7ee f80e 	bl	80002e8 <__aeabi_dsub>
 80122cc:	4622      	mov	r2, r4
 80122ce:	462b      	mov	r3, r5
 80122d0:	f7ee f9c2 	bl	8000658 <__aeabi_dmul>
 80122d4:	a338      	add	r3, pc, #224	; (adr r3, 80123b8 <__kernel_cos+0x158>)
 80122d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122da:	f7ee f807 	bl	80002ec <__adddf3>
 80122de:	4622      	mov	r2, r4
 80122e0:	462b      	mov	r3, r5
 80122e2:	f7ee f9b9 	bl	8000658 <__aeabi_dmul>
 80122e6:	a336      	add	r3, pc, #216	; (adr r3, 80123c0 <__kernel_cos+0x160>)
 80122e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ec:	f7ed fffc 	bl	80002e8 <__aeabi_dsub>
 80122f0:	4622      	mov	r2, r4
 80122f2:	462b      	mov	r3, r5
 80122f4:	f7ee f9b0 	bl	8000658 <__aeabi_dmul>
 80122f8:	a333      	add	r3, pc, #204	; (adr r3, 80123c8 <__kernel_cos+0x168>)
 80122fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fe:	f7ed fff5 	bl	80002ec <__adddf3>
 8012302:	4622      	mov	r2, r4
 8012304:	462b      	mov	r3, r5
 8012306:	f7ee f9a7 	bl	8000658 <__aeabi_dmul>
 801230a:	4622      	mov	r2, r4
 801230c:	462b      	mov	r3, r5
 801230e:	f7ee f9a3 	bl	8000658 <__aeabi_dmul>
 8012312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012316:	4604      	mov	r4, r0
 8012318:	460d      	mov	r5, r1
 801231a:	4630      	mov	r0, r6
 801231c:	4639      	mov	r1, r7
 801231e:	f7ee f99b 	bl	8000658 <__aeabi_dmul>
 8012322:	460b      	mov	r3, r1
 8012324:	4602      	mov	r2, r0
 8012326:	4629      	mov	r1, r5
 8012328:	4620      	mov	r0, r4
 801232a:	f7ed ffdd 	bl	80002e8 <__aeabi_dsub>
 801232e:	4b2b      	ldr	r3, [pc, #172]	; (80123dc <__kernel_cos+0x17c>)
 8012330:	4598      	cmp	r8, r3
 8012332:	4606      	mov	r6, r0
 8012334:	460f      	mov	r7, r1
 8012336:	dc10      	bgt.n	801235a <__kernel_cos+0xfa>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4650      	mov	r0, sl
 801233e:	4659      	mov	r1, fp
 8012340:	f7ed ffd2 	bl	80002e8 <__aeabi_dsub>
 8012344:	460b      	mov	r3, r1
 8012346:	4926      	ldr	r1, [pc, #152]	; (80123e0 <__kernel_cos+0x180>)
 8012348:	4602      	mov	r2, r0
 801234a:	2000      	movs	r0, #0
 801234c:	f7ed ffcc 	bl	80002e8 <__aeabi_dsub>
 8012350:	ec41 0b10 	vmov	d0, r0, r1
 8012354:	b003      	add	sp, #12
 8012356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235a:	4b22      	ldr	r3, [pc, #136]	; (80123e4 <__kernel_cos+0x184>)
 801235c:	4920      	ldr	r1, [pc, #128]	; (80123e0 <__kernel_cos+0x180>)
 801235e:	4598      	cmp	r8, r3
 8012360:	bfcc      	ite	gt
 8012362:	4d21      	ldrgt	r5, [pc, #132]	; (80123e8 <__kernel_cos+0x188>)
 8012364:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012368:	2400      	movs	r4, #0
 801236a:	4622      	mov	r2, r4
 801236c:	462b      	mov	r3, r5
 801236e:	2000      	movs	r0, #0
 8012370:	f7ed ffba 	bl	80002e8 <__aeabi_dsub>
 8012374:	4622      	mov	r2, r4
 8012376:	4680      	mov	r8, r0
 8012378:	4689      	mov	r9, r1
 801237a:	462b      	mov	r3, r5
 801237c:	4650      	mov	r0, sl
 801237e:	4659      	mov	r1, fp
 8012380:	f7ed ffb2 	bl	80002e8 <__aeabi_dsub>
 8012384:	4632      	mov	r2, r6
 8012386:	463b      	mov	r3, r7
 8012388:	f7ed ffae 	bl	80002e8 <__aeabi_dsub>
 801238c:	4602      	mov	r2, r0
 801238e:	460b      	mov	r3, r1
 8012390:	4640      	mov	r0, r8
 8012392:	4649      	mov	r1, r9
 8012394:	e7da      	b.n	801234c <__kernel_cos+0xec>
 8012396:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80123d0 <__kernel_cos+0x170>
 801239a:	e7db      	b.n	8012354 <__kernel_cos+0xf4>
 801239c:	f3af 8000 	nop.w
 80123a0:	be8838d4 	.word	0xbe8838d4
 80123a4:	bda8fae9 	.word	0xbda8fae9
 80123a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80123ac:	3e21ee9e 	.word	0x3e21ee9e
 80123b0:	809c52ad 	.word	0x809c52ad
 80123b4:	3e927e4f 	.word	0x3e927e4f
 80123b8:	19cb1590 	.word	0x19cb1590
 80123bc:	3efa01a0 	.word	0x3efa01a0
 80123c0:	16c15177 	.word	0x16c15177
 80123c4:	3f56c16c 	.word	0x3f56c16c
 80123c8:	5555554c 	.word	0x5555554c
 80123cc:	3fa55555 	.word	0x3fa55555
 80123d0:	00000000 	.word	0x00000000
 80123d4:	3ff00000 	.word	0x3ff00000
 80123d8:	3fe00000 	.word	0x3fe00000
 80123dc:	3fd33332 	.word	0x3fd33332
 80123e0:	3ff00000 	.word	0x3ff00000
 80123e4:	3fe90000 	.word	0x3fe90000
 80123e8:	3fd20000 	.word	0x3fd20000
 80123ec:	00000000 	.word	0x00000000

080123f0 <__kernel_rem_pio2>:
 80123f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f4:	ed2d 8b02 	vpush	{d8}
 80123f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80123fc:	f112 0f14 	cmn.w	r2, #20
 8012400:	9308      	str	r3, [sp, #32]
 8012402:	9101      	str	r1, [sp, #4]
 8012404:	4bc4      	ldr	r3, [pc, #784]	; (8012718 <__kernel_rem_pio2+0x328>)
 8012406:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012408:	900b      	str	r0, [sp, #44]	; 0x2c
 801240a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801240e:	9302      	str	r3, [sp, #8]
 8012410:	9b08      	ldr	r3, [sp, #32]
 8012412:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012416:	bfa8      	it	ge
 8012418:	1ed4      	subge	r4, r2, #3
 801241a:	9306      	str	r3, [sp, #24]
 801241c:	bfb2      	itee	lt
 801241e:	2400      	movlt	r4, #0
 8012420:	2318      	movge	r3, #24
 8012422:	fb94 f4f3 	sdivge	r4, r4, r3
 8012426:	f06f 0317 	mvn.w	r3, #23
 801242a:	fb04 3303 	mla	r3, r4, r3, r3
 801242e:	eb03 0a02 	add.w	sl, r3, r2
 8012432:	9b02      	ldr	r3, [sp, #8]
 8012434:	9a06      	ldr	r2, [sp, #24]
 8012436:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012708 <__kernel_rem_pio2+0x318>
 801243a:	eb03 0802 	add.w	r8, r3, r2
 801243e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012440:	1aa7      	subs	r7, r4, r2
 8012442:	ae22      	add	r6, sp, #136	; 0x88
 8012444:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012448:	2500      	movs	r5, #0
 801244a:	4545      	cmp	r5, r8
 801244c:	dd13      	ble.n	8012476 <__kernel_rem_pio2+0x86>
 801244e:	9b08      	ldr	r3, [sp, #32]
 8012450:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012708 <__kernel_rem_pio2+0x318>
 8012454:	aa22      	add	r2, sp, #136	; 0x88
 8012456:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801245a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801245e:	f04f 0800 	mov.w	r8, #0
 8012462:	9b02      	ldr	r3, [sp, #8]
 8012464:	4598      	cmp	r8, r3
 8012466:	dc2f      	bgt.n	80124c8 <__kernel_rem_pio2+0xd8>
 8012468:	ed8d 8b04 	vstr	d8, [sp, #16]
 801246c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012470:	462f      	mov	r7, r5
 8012472:	2600      	movs	r6, #0
 8012474:	e01b      	b.n	80124ae <__kernel_rem_pio2+0xbe>
 8012476:	42ef      	cmn	r7, r5
 8012478:	d407      	bmi.n	801248a <__kernel_rem_pio2+0x9a>
 801247a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801247e:	f7ee f881 	bl	8000584 <__aeabi_i2d>
 8012482:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012486:	3501      	adds	r5, #1
 8012488:	e7df      	b.n	801244a <__kernel_rem_pio2+0x5a>
 801248a:	ec51 0b18 	vmov	r0, r1, d8
 801248e:	e7f8      	b.n	8012482 <__kernel_rem_pio2+0x92>
 8012490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012494:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012498:	f7ee f8de 	bl	8000658 <__aeabi_dmul>
 801249c:	4602      	mov	r2, r0
 801249e:	460b      	mov	r3, r1
 80124a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124a4:	f7ed ff22 	bl	80002ec <__adddf3>
 80124a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124ac:	3601      	adds	r6, #1
 80124ae:	9b06      	ldr	r3, [sp, #24]
 80124b0:	429e      	cmp	r6, r3
 80124b2:	f1a7 0708 	sub.w	r7, r7, #8
 80124b6:	ddeb      	ble.n	8012490 <__kernel_rem_pio2+0xa0>
 80124b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80124bc:	f108 0801 	add.w	r8, r8, #1
 80124c0:	ecab 7b02 	vstmia	fp!, {d7}
 80124c4:	3508      	adds	r5, #8
 80124c6:	e7cc      	b.n	8012462 <__kernel_rem_pio2+0x72>
 80124c8:	9b02      	ldr	r3, [sp, #8]
 80124ca:	aa0e      	add	r2, sp, #56	; 0x38
 80124cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80124d0:	930d      	str	r3, [sp, #52]	; 0x34
 80124d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80124d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80124d8:	9c02      	ldr	r4, [sp, #8]
 80124da:	930c      	str	r3, [sp, #48]	; 0x30
 80124dc:	00e3      	lsls	r3, r4, #3
 80124de:	930a      	str	r3, [sp, #40]	; 0x28
 80124e0:	ab9a      	add	r3, sp, #616	; 0x268
 80124e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80124e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80124ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80124ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80124f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80124f4:	46c3      	mov	fp, r8
 80124f6:	46a1      	mov	r9, r4
 80124f8:	f1b9 0f00 	cmp.w	r9, #0
 80124fc:	f1a5 0508 	sub.w	r5, r5, #8
 8012500:	dc77      	bgt.n	80125f2 <__kernel_rem_pio2+0x202>
 8012502:	ec47 6b10 	vmov	d0, r6, r7
 8012506:	4650      	mov	r0, sl
 8012508:	f000 fdae 	bl	8013068 <scalbn>
 801250c:	ec57 6b10 	vmov	r6, r7, d0
 8012510:	2200      	movs	r2, #0
 8012512:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012516:	ee10 0a10 	vmov	r0, s0
 801251a:	4639      	mov	r1, r7
 801251c:	f7ee f89c 	bl	8000658 <__aeabi_dmul>
 8012520:	ec41 0b10 	vmov	d0, r0, r1
 8012524:	f000 fd20 	bl	8012f68 <floor>
 8012528:	4b7c      	ldr	r3, [pc, #496]	; (801271c <__kernel_rem_pio2+0x32c>)
 801252a:	ec51 0b10 	vmov	r0, r1, d0
 801252e:	2200      	movs	r2, #0
 8012530:	f7ee f892 	bl	8000658 <__aeabi_dmul>
 8012534:	4602      	mov	r2, r0
 8012536:	460b      	mov	r3, r1
 8012538:	4630      	mov	r0, r6
 801253a:	4639      	mov	r1, r7
 801253c:	f7ed fed4 	bl	80002e8 <__aeabi_dsub>
 8012540:	460f      	mov	r7, r1
 8012542:	4606      	mov	r6, r0
 8012544:	f7ee fb38 	bl	8000bb8 <__aeabi_d2iz>
 8012548:	9004      	str	r0, [sp, #16]
 801254a:	f7ee f81b 	bl	8000584 <__aeabi_i2d>
 801254e:	4602      	mov	r2, r0
 8012550:	460b      	mov	r3, r1
 8012552:	4630      	mov	r0, r6
 8012554:	4639      	mov	r1, r7
 8012556:	f7ed fec7 	bl	80002e8 <__aeabi_dsub>
 801255a:	f1ba 0f00 	cmp.w	sl, #0
 801255e:	4606      	mov	r6, r0
 8012560:	460f      	mov	r7, r1
 8012562:	dd6d      	ble.n	8012640 <__kernel_rem_pio2+0x250>
 8012564:	1e62      	subs	r2, r4, #1
 8012566:	ab0e      	add	r3, sp, #56	; 0x38
 8012568:	9d04      	ldr	r5, [sp, #16]
 801256a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801256e:	f1ca 0118 	rsb	r1, sl, #24
 8012572:	fa40 f301 	asr.w	r3, r0, r1
 8012576:	441d      	add	r5, r3
 8012578:	408b      	lsls	r3, r1
 801257a:	1ac0      	subs	r0, r0, r3
 801257c:	ab0e      	add	r3, sp, #56	; 0x38
 801257e:	9504      	str	r5, [sp, #16]
 8012580:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012584:	f1ca 0317 	rsb	r3, sl, #23
 8012588:	fa40 fb03 	asr.w	fp, r0, r3
 801258c:	f1bb 0f00 	cmp.w	fp, #0
 8012590:	dd65      	ble.n	801265e <__kernel_rem_pio2+0x26e>
 8012592:	9b04      	ldr	r3, [sp, #16]
 8012594:	2200      	movs	r2, #0
 8012596:	3301      	adds	r3, #1
 8012598:	9304      	str	r3, [sp, #16]
 801259a:	4615      	mov	r5, r2
 801259c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80125a0:	4294      	cmp	r4, r2
 80125a2:	f300 809c 	bgt.w	80126de <__kernel_rem_pio2+0x2ee>
 80125a6:	f1ba 0f00 	cmp.w	sl, #0
 80125aa:	dd07      	ble.n	80125bc <__kernel_rem_pio2+0x1cc>
 80125ac:	f1ba 0f01 	cmp.w	sl, #1
 80125b0:	f000 80c0 	beq.w	8012734 <__kernel_rem_pio2+0x344>
 80125b4:	f1ba 0f02 	cmp.w	sl, #2
 80125b8:	f000 80c6 	beq.w	8012748 <__kernel_rem_pio2+0x358>
 80125bc:	f1bb 0f02 	cmp.w	fp, #2
 80125c0:	d14d      	bne.n	801265e <__kernel_rem_pio2+0x26e>
 80125c2:	4632      	mov	r2, r6
 80125c4:	463b      	mov	r3, r7
 80125c6:	4956      	ldr	r1, [pc, #344]	; (8012720 <__kernel_rem_pio2+0x330>)
 80125c8:	2000      	movs	r0, #0
 80125ca:	f7ed fe8d 	bl	80002e8 <__aeabi_dsub>
 80125ce:	4606      	mov	r6, r0
 80125d0:	460f      	mov	r7, r1
 80125d2:	2d00      	cmp	r5, #0
 80125d4:	d043      	beq.n	801265e <__kernel_rem_pio2+0x26e>
 80125d6:	4650      	mov	r0, sl
 80125d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012710 <__kernel_rem_pio2+0x320>
 80125dc:	f000 fd44 	bl	8013068 <scalbn>
 80125e0:	4630      	mov	r0, r6
 80125e2:	4639      	mov	r1, r7
 80125e4:	ec53 2b10 	vmov	r2, r3, d0
 80125e8:	f7ed fe7e 	bl	80002e8 <__aeabi_dsub>
 80125ec:	4606      	mov	r6, r0
 80125ee:	460f      	mov	r7, r1
 80125f0:	e035      	b.n	801265e <__kernel_rem_pio2+0x26e>
 80125f2:	4b4c      	ldr	r3, [pc, #304]	; (8012724 <__kernel_rem_pio2+0x334>)
 80125f4:	2200      	movs	r2, #0
 80125f6:	4630      	mov	r0, r6
 80125f8:	4639      	mov	r1, r7
 80125fa:	f7ee f82d 	bl	8000658 <__aeabi_dmul>
 80125fe:	f7ee fadb 	bl	8000bb8 <__aeabi_d2iz>
 8012602:	f7ed ffbf 	bl	8000584 <__aeabi_i2d>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	ec43 2b18 	vmov	d8, r2, r3
 801260e:	4b46      	ldr	r3, [pc, #280]	; (8012728 <__kernel_rem_pio2+0x338>)
 8012610:	2200      	movs	r2, #0
 8012612:	f7ee f821 	bl	8000658 <__aeabi_dmul>
 8012616:	4602      	mov	r2, r0
 8012618:	460b      	mov	r3, r1
 801261a:	4630      	mov	r0, r6
 801261c:	4639      	mov	r1, r7
 801261e:	f7ed fe63 	bl	80002e8 <__aeabi_dsub>
 8012622:	f7ee fac9 	bl	8000bb8 <__aeabi_d2iz>
 8012626:	e9d5 2300 	ldrd	r2, r3, [r5]
 801262a:	f84b 0b04 	str.w	r0, [fp], #4
 801262e:	ec51 0b18 	vmov	r0, r1, d8
 8012632:	f7ed fe5b 	bl	80002ec <__adddf3>
 8012636:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801263a:	4606      	mov	r6, r0
 801263c:	460f      	mov	r7, r1
 801263e:	e75b      	b.n	80124f8 <__kernel_rem_pio2+0x108>
 8012640:	d106      	bne.n	8012650 <__kernel_rem_pio2+0x260>
 8012642:	1e63      	subs	r3, r4, #1
 8012644:	aa0e      	add	r2, sp, #56	; 0x38
 8012646:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801264a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801264e:	e79d      	b.n	801258c <__kernel_rem_pio2+0x19c>
 8012650:	4b36      	ldr	r3, [pc, #216]	; (801272c <__kernel_rem_pio2+0x33c>)
 8012652:	2200      	movs	r2, #0
 8012654:	f7ee fa86 	bl	8000b64 <__aeabi_dcmpge>
 8012658:	2800      	cmp	r0, #0
 801265a:	d13d      	bne.n	80126d8 <__kernel_rem_pio2+0x2e8>
 801265c:	4683      	mov	fp, r0
 801265e:	2200      	movs	r2, #0
 8012660:	2300      	movs	r3, #0
 8012662:	4630      	mov	r0, r6
 8012664:	4639      	mov	r1, r7
 8012666:	f7ee fa5f 	bl	8000b28 <__aeabi_dcmpeq>
 801266a:	2800      	cmp	r0, #0
 801266c:	f000 80c0 	beq.w	80127f0 <__kernel_rem_pio2+0x400>
 8012670:	1e65      	subs	r5, r4, #1
 8012672:	462b      	mov	r3, r5
 8012674:	2200      	movs	r2, #0
 8012676:	9902      	ldr	r1, [sp, #8]
 8012678:	428b      	cmp	r3, r1
 801267a:	da6c      	bge.n	8012756 <__kernel_rem_pio2+0x366>
 801267c:	2a00      	cmp	r2, #0
 801267e:	f000 8089 	beq.w	8012794 <__kernel_rem_pio2+0x3a4>
 8012682:	ab0e      	add	r3, sp, #56	; 0x38
 8012684:	f1aa 0a18 	sub.w	sl, sl, #24
 8012688:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801268c:	2b00      	cmp	r3, #0
 801268e:	f000 80ad 	beq.w	80127ec <__kernel_rem_pio2+0x3fc>
 8012692:	4650      	mov	r0, sl
 8012694:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012710 <__kernel_rem_pio2+0x320>
 8012698:	f000 fce6 	bl	8013068 <scalbn>
 801269c:	ab9a      	add	r3, sp, #616	; 0x268
 801269e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80126a2:	ec57 6b10 	vmov	r6, r7, d0
 80126a6:	00ec      	lsls	r4, r5, #3
 80126a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80126ac:	46aa      	mov	sl, r5
 80126ae:	f1ba 0f00 	cmp.w	sl, #0
 80126b2:	f280 80d6 	bge.w	8012862 <__kernel_rem_pio2+0x472>
 80126b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012708 <__kernel_rem_pio2+0x318>
 80126ba:	462e      	mov	r6, r5
 80126bc:	2e00      	cmp	r6, #0
 80126be:	f2c0 8104 	blt.w	80128ca <__kernel_rem_pio2+0x4da>
 80126c2:	ab72      	add	r3, sp, #456	; 0x1c8
 80126c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80126c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012730 <__kernel_rem_pio2+0x340>
 80126cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80126d0:	f04f 0800 	mov.w	r8, #0
 80126d4:	1baf      	subs	r7, r5, r6
 80126d6:	e0ea      	b.n	80128ae <__kernel_rem_pio2+0x4be>
 80126d8:	f04f 0b02 	mov.w	fp, #2
 80126dc:	e759      	b.n	8012592 <__kernel_rem_pio2+0x1a2>
 80126de:	f8d8 3000 	ldr.w	r3, [r8]
 80126e2:	b955      	cbnz	r5, 80126fa <__kernel_rem_pio2+0x30a>
 80126e4:	b123      	cbz	r3, 80126f0 <__kernel_rem_pio2+0x300>
 80126e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80126ea:	f8c8 3000 	str.w	r3, [r8]
 80126ee:	2301      	movs	r3, #1
 80126f0:	3201      	adds	r2, #1
 80126f2:	f108 0804 	add.w	r8, r8, #4
 80126f6:	461d      	mov	r5, r3
 80126f8:	e752      	b.n	80125a0 <__kernel_rem_pio2+0x1b0>
 80126fa:	1acb      	subs	r3, r1, r3
 80126fc:	f8c8 3000 	str.w	r3, [r8]
 8012700:	462b      	mov	r3, r5
 8012702:	e7f5      	b.n	80126f0 <__kernel_rem_pio2+0x300>
 8012704:	f3af 8000 	nop.w
	...
 8012714:	3ff00000 	.word	0x3ff00000
 8012718:	08013940 	.word	0x08013940
 801271c:	40200000 	.word	0x40200000
 8012720:	3ff00000 	.word	0x3ff00000
 8012724:	3e700000 	.word	0x3e700000
 8012728:	41700000 	.word	0x41700000
 801272c:	3fe00000 	.word	0x3fe00000
 8012730:	08013900 	.word	0x08013900
 8012734:	1e62      	subs	r2, r4, #1
 8012736:	ab0e      	add	r3, sp, #56	; 0x38
 8012738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801273c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012740:	a90e      	add	r1, sp, #56	; 0x38
 8012742:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012746:	e739      	b.n	80125bc <__kernel_rem_pio2+0x1cc>
 8012748:	1e62      	subs	r2, r4, #1
 801274a:	ab0e      	add	r3, sp, #56	; 0x38
 801274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012750:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012754:	e7f4      	b.n	8012740 <__kernel_rem_pio2+0x350>
 8012756:	a90e      	add	r1, sp, #56	; 0x38
 8012758:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801275c:	3b01      	subs	r3, #1
 801275e:	430a      	orrs	r2, r1
 8012760:	e789      	b.n	8012676 <__kernel_rem_pio2+0x286>
 8012762:	3301      	adds	r3, #1
 8012764:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012768:	2900      	cmp	r1, #0
 801276a:	d0fa      	beq.n	8012762 <__kernel_rem_pio2+0x372>
 801276c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801276e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8012772:	446a      	add	r2, sp
 8012774:	3a98      	subs	r2, #152	; 0x98
 8012776:	920a      	str	r2, [sp, #40]	; 0x28
 8012778:	9a08      	ldr	r2, [sp, #32]
 801277a:	18e3      	adds	r3, r4, r3
 801277c:	18a5      	adds	r5, r4, r2
 801277e:	aa22      	add	r2, sp, #136	; 0x88
 8012780:	f104 0801 	add.w	r8, r4, #1
 8012784:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012788:	9304      	str	r3, [sp, #16]
 801278a:	9b04      	ldr	r3, [sp, #16]
 801278c:	4543      	cmp	r3, r8
 801278e:	da04      	bge.n	801279a <__kernel_rem_pio2+0x3aa>
 8012790:	461c      	mov	r4, r3
 8012792:	e6a3      	b.n	80124dc <__kernel_rem_pio2+0xec>
 8012794:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012796:	2301      	movs	r3, #1
 8012798:	e7e4      	b.n	8012764 <__kernel_rem_pio2+0x374>
 801279a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801279c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80127a0:	f7ed fef0 	bl	8000584 <__aeabi_i2d>
 80127a4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80127a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127aa:	46ab      	mov	fp, r5
 80127ac:	461c      	mov	r4, r3
 80127ae:	f04f 0900 	mov.w	r9, #0
 80127b2:	2600      	movs	r6, #0
 80127b4:	2700      	movs	r7, #0
 80127b6:	9b06      	ldr	r3, [sp, #24]
 80127b8:	4599      	cmp	r9, r3
 80127ba:	dd06      	ble.n	80127ca <__kernel_rem_pio2+0x3da>
 80127bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127be:	e8e3 6702 	strd	r6, r7, [r3], #8
 80127c2:	f108 0801 	add.w	r8, r8, #1
 80127c6:	930a      	str	r3, [sp, #40]	; 0x28
 80127c8:	e7df      	b.n	801278a <__kernel_rem_pio2+0x39a>
 80127ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80127ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80127d2:	f7ed ff41 	bl	8000658 <__aeabi_dmul>
 80127d6:	4602      	mov	r2, r0
 80127d8:	460b      	mov	r3, r1
 80127da:	4630      	mov	r0, r6
 80127dc:	4639      	mov	r1, r7
 80127de:	f7ed fd85 	bl	80002ec <__adddf3>
 80127e2:	f109 0901 	add.w	r9, r9, #1
 80127e6:	4606      	mov	r6, r0
 80127e8:	460f      	mov	r7, r1
 80127ea:	e7e4      	b.n	80127b6 <__kernel_rem_pio2+0x3c6>
 80127ec:	3d01      	subs	r5, #1
 80127ee:	e748      	b.n	8012682 <__kernel_rem_pio2+0x292>
 80127f0:	ec47 6b10 	vmov	d0, r6, r7
 80127f4:	f1ca 0000 	rsb	r0, sl, #0
 80127f8:	f000 fc36 	bl	8013068 <scalbn>
 80127fc:	ec57 6b10 	vmov	r6, r7, d0
 8012800:	4ba0      	ldr	r3, [pc, #640]	; (8012a84 <__kernel_rem_pio2+0x694>)
 8012802:	ee10 0a10 	vmov	r0, s0
 8012806:	2200      	movs	r2, #0
 8012808:	4639      	mov	r1, r7
 801280a:	f7ee f9ab 	bl	8000b64 <__aeabi_dcmpge>
 801280e:	b1f8      	cbz	r0, 8012850 <__kernel_rem_pio2+0x460>
 8012810:	4b9d      	ldr	r3, [pc, #628]	; (8012a88 <__kernel_rem_pio2+0x698>)
 8012812:	2200      	movs	r2, #0
 8012814:	4630      	mov	r0, r6
 8012816:	4639      	mov	r1, r7
 8012818:	f7ed ff1e 	bl	8000658 <__aeabi_dmul>
 801281c:	f7ee f9cc 	bl	8000bb8 <__aeabi_d2iz>
 8012820:	4680      	mov	r8, r0
 8012822:	f7ed feaf 	bl	8000584 <__aeabi_i2d>
 8012826:	4b97      	ldr	r3, [pc, #604]	; (8012a84 <__kernel_rem_pio2+0x694>)
 8012828:	2200      	movs	r2, #0
 801282a:	f7ed ff15 	bl	8000658 <__aeabi_dmul>
 801282e:	460b      	mov	r3, r1
 8012830:	4602      	mov	r2, r0
 8012832:	4639      	mov	r1, r7
 8012834:	4630      	mov	r0, r6
 8012836:	f7ed fd57 	bl	80002e8 <__aeabi_dsub>
 801283a:	f7ee f9bd 	bl	8000bb8 <__aeabi_d2iz>
 801283e:	1c65      	adds	r5, r4, #1
 8012840:	ab0e      	add	r3, sp, #56	; 0x38
 8012842:	f10a 0a18 	add.w	sl, sl, #24
 8012846:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801284a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801284e:	e720      	b.n	8012692 <__kernel_rem_pio2+0x2a2>
 8012850:	4630      	mov	r0, r6
 8012852:	4639      	mov	r1, r7
 8012854:	f7ee f9b0 	bl	8000bb8 <__aeabi_d2iz>
 8012858:	ab0e      	add	r3, sp, #56	; 0x38
 801285a:	4625      	mov	r5, r4
 801285c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012860:	e717      	b.n	8012692 <__kernel_rem_pio2+0x2a2>
 8012862:	ab0e      	add	r3, sp, #56	; 0x38
 8012864:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012868:	f7ed fe8c 	bl	8000584 <__aeabi_i2d>
 801286c:	4632      	mov	r2, r6
 801286e:	463b      	mov	r3, r7
 8012870:	f7ed fef2 	bl	8000658 <__aeabi_dmul>
 8012874:	4b84      	ldr	r3, [pc, #528]	; (8012a88 <__kernel_rem_pio2+0x698>)
 8012876:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801287a:	2200      	movs	r2, #0
 801287c:	4630      	mov	r0, r6
 801287e:	4639      	mov	r1, r7
 8012880:	f7ed feea 	bl	8000658 <__aeabi_dmul>
 8012884:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012888:	4606      	mov	r6, r0
 801288a:	460f      	mov	r7, r1
 801288c:	e70f      	b.n	80126ae <__kernel_rem_pio2+0x2be>
 801288e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012892:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012896:	f7ed fedf 	bl	8000658 <__aeabi_dmul>
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128a2:	f7ed fd23 	bl	80002ec <__adddf3>
 80128a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80128aa:	f108 0801 	add.w	r8, r8, #1
 80128ae:	9b02      	ldr	r3, [sp, #8]
 80128b0:	4598      	cmp	r8, r3
 80128b2:	dc01      	bgt.n	80128b8 <__kernel_rem_pio2+0x4c8>
 80128b4:	45b8      	cmp	r8, r7
 80128b6:	ddea      	ble.n	801288e <__kernel_rem_pio2+0x49e>
 80128b8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80128bc:	ab4a      	add	r3, sp, #296	; 0x128
 80128be:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80128c2:	ed87 7b00 	vstr	d7, [r7]
 80128c6:	3e01      	subs	r6, #1
 80128c8:	e6f8      	b.n	80126bc <__kernel_rem_pio2+0x2cc>
 80128ca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80128cc:	2b02      	cmp	r3, #2
 80128ce:	dc0b      	bgt.n	80128e8 <__kernel_rem_pio2+0x4f8>
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	dc35      	bgt.n	8012940 <__kernel_rem_pio2+0x550>
 80128d4:	d059      	beq.n	801298a <__kernel_rem_pio2+0x59a>
 80128d6:	9b04      	ldr	r3, [sp, #16]
 80128d8:	f003 0007 	and.w	r0, r3, #7
 80128dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80128e0:	ecbd 8b02 	vpop	{d8}
 80128e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80128ea:	2b03      	cmp	r3, #3
 80128ec:	d1f3      	bne.n	80128d6 <__kernel_rem_pio2+0x4e6>
 80128ee:	ab4a      	add	r3, sp, #296	; 0x128
 80128f0:	4423      	add	r3, r4
 80128f2:	9306      	str	r3, [sp, #24]
 80128f4:	461c      	mov	r4, r3
 80128f6:	469a      	mov	sl, r3
 80128f8:	9502      	str	r5, [sp, #8]
 80128fa:	9b02      	ldr	r3, [sp, #8]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	f1aa 0a08 	sub.w	sl, sl, #8
 8012902:	dc6b      	bgt.n	80129dc <__kernel_rem_pio2+0x5ec>
 8012904:	46aa      	mov	sl, r5
 8012906:	f1ba 0f01 	cmp.w	sl, #1
 801290a:	f1a4 0408 	sub.w	r4, r4, #8
 801290e:	f300 8085 	bgt.w	8012a1c <__kernel_rem_pio2+0x62c>
 8012912:	9c06      	ldr	r4, [sp, #24]
 8012914:	2000      	movs	r0, #0
 8012916:	3408      	adds	r4, #8
 8012918:	2100      	movs	r1, #0
 801291a:	2d01      	cmp	r5, #1
 801291c:	f300 809d 	bgt.w	8012a5a <__kernel_rem_pio2+0x66a>
 8012920:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012924:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012928:	f1bb 0f00 	cmp.w	fp, #0
 801292c:	f040 809b 	bne.w	8012a66 <__kernel_rem_pio2+0x676>
 8012930:	9b01      	ldr	r3, [sp, #4]
 8012932:	e9c3 5600 	strd	r5, r6, [r3]
 8012936:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801293a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801293e:	e7ca      	b.n	80128d6 <__kernel_rem_pio2+0x4e6>
 8012940:	3408      	adds	r4, #8
 8012942:	ab4a      	add	r3, sp, #296	; 0x128
 8012944:	441c      	add	r4, r3
 8012946:	462e      	mov	r6, r5
 8012948:	2000      	movs	r0, #0
 801294a:	2100      	movs	r1, #0
 801294c:	2e00      	cmp	r6, #0
 801294e:	da36      	bge.n	80129be <__kernel_rem_pio2+0x5ce>
 8012950:	f1bb 0f00 	cmp.w	fp, #0
 8012954:	d039      	beq.n	80129ca <__kernel_rem_pio2+0x5da>
 8012956:	4602      	mov	r2, r0
 8012958:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801295c:	9c01      	ldr	r4, [sp, #4]
 801295e:	e9c4 2300 	strd	r2, r3, [r4]
 8012962:	4602      	mov	r2, r0
 8012964:	460b      	mov	r3, r1
 8012966:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801296a:	f7ed fcbd 	bl	80002e8 <__aeabi_dsub>
 801296e:	ae4c      	add	r6, sp, #304	; 0x130
 8012970:	2401      	movs	r4, #1
 8012972:	42a5      	cmp	r5, r4
 8012974:	da2c      	bge.n	80129d0 <__kernel_rem_pio2+0x5e0>
 8012976:	f1bb 0f00 	cmp.w	fp, #0
 801297a:	d002      	beq.n	8012982 <__kernel_rem_pio2+0x592>
 801297c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012980:	4619      	mov	r1, r3
 8012982:	9b01      	ldr	r3, [sp, #4]
 8012984:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012988:	e7a5      	b.n	80128d6 <__kernel_rem_pio2+0x4e6>
 801298a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801298e:	eb0d 0403 	add.w	r4, sp, r3
 8012992:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012996:	2000      	movs	r0, #0
 8012998:	2100      	movs	r1, #0
 801299a:	2d00      	cmp	r5, #0
 801299c:	da09      	bge.n	80129b2 <__kernel_rem_pio2+0x5c2>
 801299e:	f1bb 0f00 	cmp.w	fp, #0
 80129a2:	d002      	beq.n	80129aa <__kernel_rem_pio2+0x5ba>
 80129a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129a8:	4619      	mov	r1, r3
 80129aa:	9b01      	ldr	r3, [sp, #4]
 80129ac:	e9c3 0100 	strd	r0, r1, [r3]
 80129b0:	e791      	b.n	80128d6 <__kernel_rem_pio2+0x4e6>
 80129b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80129b6:	f7ed fc99 	bl	80002ec <__adddf3>
 80129ba:	3d01      	subs	r5, #1
 80129bc:	e7ed      	b.n	801299a <__kernel_rem_pio2+0x5aa>
 80129be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80129c2:	f7ed fc93 	bl	80002ec <__adddf3>
 80129c6:	3e01      	subs	r6, #1
 80129c8:	e7c0      	b.n	801294c <__kernel_rem_pio2+0x55c>
 80129ca:	4602      	mov	r2, r0
 80129cc:	460b      	mov	r3, r1
 80129ce:	e7c5      	b.n	801295c <__kernel_rem_pio2+0x56c>
 80129d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80129d4:	f7ed fc8a 	bl	80002ec <__adddf3>
 80129d8:	3401      	adds	r4, #1
 80129da:	e7ca      	b.n	8012972 <__kernel_rem_pio2+0x582>
 80129dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80129e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80129e4:	9b02      	ldr	r3, [sp, #8]
 80129e6:	3b01      	subs	r3, #1
 80129e8:	9302      	str	r3, [sp, #8]
 80129ea:	4632      	mov	r2, r6
 80129ec:	463b      	mov	r3, r7
 80129ee:	4640      	mov	r0, r8
 80129f0:	4649      	mov	r1, r9
 80129f2:	f7ed fc7b 	bl	80002ec <__adddf3>
 80129f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80129fa:	4602      	mov	r2, r0
 80129fc:	460b      	mov	r3, r1
 80129fe:	4640      	mov	r0, r8
 8012a00:	4649      	mov	r1, r9
 8012a02:	f7ed fc71 	bl	80002e8 <__aeabi_dsub>
 8012a06:	4632      	mov	r2, r6
 8012a08:	463b      	mov	r3, r7
 8012a0a:	f7ed fc6f 	bl	80002ec <__adddf3>
 8012a0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012a12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012a16:	ed8a 7b00 	vstr	d7, [sl]
 8012a1a:	e76e      	b.n	80128fa <__kernel_rem_pio2+0x50a>
 8012a1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012a20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012a24:	4640      	mov	r0, r8
 8012a26:	4632      	mov	r2, r6
 8012a28:	463b      	mov	r3, r7
 8012a2a:	4649      	mov	r1, r9
 8012a2c:	f7ed fc5e 	bl	80002ec <__adddf3>
 8012a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a34:	4602      	mov	r2, r0
 8012a36:	460b      	mov	r3, r1
 8012a38:	4640      	mov	r0, r8
 8012a3a:	4649      	mov	r1, r9
 8012a3c:	f7ed fc54 	bl	80002e8 <__aeabi_dsub>
 8012a40:	4632      	mov	r2, r6
 8012a42:	463b      	mov	r3, r7
 8012a44:	f7ed fc52 	bl	80002ec <__adddf3>
 8012a48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012a50:	ed84 7b00 	vstr	d7, [r4]
 8012a54:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012a58:	e755      	b.n	8012906 <__kernel_rem_pio2+0x516>
 8012a5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012a5e:	f7ed fc45 	bl	80002ec <__adddf3>
 8012a62:	3d01      	subs	r5, #1
 8012a64:	e759      	b.n	801291a <__kernel_rem_pio2+0x52a>
 8012a66:	9b01      	ldr	r3, [sp, #4]
 8012a68:	9a01      	ldr	r2, [sp, #4]
 8012a6a:	601d      	str	r5, [r3, #0]
 8012a6c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012a70:	605c      	str	r4, [r3, #4]
 8012a72:	609f      	str	r7, [r3, #8]
 8012a74:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012a78:	60d3      	str	r3, [r2, #12]
 8012a7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a7e:	6110      	str	r0, [r2, #16]
 8012a80:	6153      	str	r3, [r2, #20]
 8012a82:	e728      	b.n	80128d6 <__kernel_rem_pio2+0x4e6>
 8012a84:	41700000 	.word	0x41700000
 8012a88:	3e700000 	.word	0x3e700000
 8012a8c:	00000000 	.word	0x00000000

08012a90 <__kernel_sin>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	ed2d 8b04 	vpush	{d8-d9}
 8012a98:	eeb0 8a41 	vmov.f32	s16, s2
 8012a9c:	eef0 8a61 	vmov.f32	s17, s3
 8012aa0:	ec55 4b10 	vmov	r4, r5, d0
 8012aa4:	b083      	sub	sp, #12
 8012aa6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012aaa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012aae:	9001      	str	r0, [sp, #4]
 8012ab0:	da06      	bge.n	8012ac0 <__kernel_sin+0x30>
 8012ab2:	ee10 0a10 	vmov	r0, s0
 8012ab6:	4629      	mov	r1, r5
 8012ab8:	f7ee f87e 	bl	8000bb8 <__aeabi_d2iz>
 8012abc:	2800      	cmp	r0, #0
 8012abe:	d051      	beq.n	8012b64 <__kernel_sin+0xd4>
 8012ac0:	4622      	mov	r2, r4
 8012ac2:	462b      	mov	r3, r5
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	4629      	mov	r1, r5
 8012ac8:	f7ed fdc6 	bl	8000658 <__aeabi_dmul>
 8012acc:	4682      	mov	sl, r0
 8012ace:	468b      	mov	fp, r1
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	460b      	mov	r3, r1
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	f7ed fdbe 	bl	8000658 <__aeabi_dmul>
 8012adc:	a341      	add	r3, pc, #260	; (adr r3, 8012be4 <__kernel_sin+0x154>)
 8012ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae2:	4680      	mov	r8, r0
 8012ae4:	4689      	mov	r9, r1
 8012ae6:	4650      	mov	r0, sl
 8012ae8:	4659      	mov	r1, fp
 8012aea:	f7ed fdb5 	bl	8000658 <__aeabi_dmul>
 8012aee:	a33f      	add	r3, pc, #252	; (adr r3, 8012bec <__kernel_sin+0x15c>)
 8012af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af4:	f7ed fbf8 	bl	80002e8 <__aeabi_dsub>
 8012af8:	4652      	mov	r2, sl
 8012afa:	465b      	mov	r3, fp
 8012afc:	f7ed fdac 	bl	8000658 <__aeabi_dmul>
 8012b00:	a33c      	add	r3, pc, #240	; (adr r3, 8012bf4 <__kernel_sin+0x164>)
 8012b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b06:	f7ed fbf1 	bl	80002ec <__adddf3>
 8012b0a:	4652      	mov	r2, sl
 8012b0c:	465b      	mov	r3, fp
 8012b0e:	f7ed fda3 	bl	8000658 <__aeabi_dmul>
 8012b12:	a33a      	add	r3, pc, #232	; (adr r3, 8012bfc <__kernel_sin+0x16c>)
 8012b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b18:	f7ed fbe6 	bl	80002e8 <__aeabi_dsub>
 8012b1c:	4652      	mov	r2, sl
 8012b1e:	465b      	mov	r3, fp
 8012b20:	f7ed fd9a 	bl	8000658 <__aeabi_dmul>
 8012b24:	a337      	add	r3, pc, #220	; (adr r3, 8012c04 <__kernel_sin+0x174>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	f7ed fbdf 	bl	80002ec <__adddf3>
 8012b2e:	9b01      	ldr	r3, [sp, #4]
 8012b30:	4606      	mov	r6, r0
 8012b32:	460f      	mov	r7, r1
 8012b34:	b9eb      	cbnz	r3, 8012b72 <__kernel_sin+0xe2>
 8012b36:	4602      	mov	r2, r0
 8012b38:	460b      	mov	r3, r1
 8012b3a:	4650      	mov	r0, sl
 8012b3c:	4659      	mov	r1, fp
 8012b3e:	f7ed fd8b 	bl	8000658 <__aeabi_dmul>
 8012b42:	a325      	add	r3, pc, #148	; (adr r3, 8012bd8 <__kernel_sin+0x148>)
 8012b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b48:	f7ed fbce 	bl	80002e8 <__aeabi_dsub>
 8012b4c:	4642      	mov	r2, r8
 8012b4e:	464b      	mov	r3, r9
 8012b50:	f7ed fd82 	bl	8000658 <__aeabi_dmul>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	4620      	mov	r0, r4
 8012b5a:	4629      	mov	r1, r5
 8012b5c:	f7ed fbc6 	bl	80002ec <__adddf3>
 8012b60:	4604      	mov	r4, r0
 8012b62:	460d      	mov	r5, r1
 8012b64:	ec45 4b10 	vmov	d0, r4, r5
 8012b68:	b003      	add	sp, #12
 8012b6a:	ecbd 8b04 	vpop	{d8-d9}
 8012b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b72:	4b1b      	ldr	r3, [pc, #108]	; (8012be0 <__kernel_sin+0x150>)
 8012b74:	ec51 0b18 	vmov	r0, r1, d8
 8012b78:	2200      	movs	r2, #0
 8012b7a:	f7ed fd6d 	bl	8000658 <__aeabi_dmul>
 8012b7e:	4632      	mov	r2, r6
 8012b80:	ec41 0b19 	vmov	d9, r0, r1
 8012b84:	463b      	mov	r3, r7
 8012b86:	4640      	mov	r0, r8
 8012b88:	4649      	mov	r1, r9
 8012b8a:	f7ed fd65 	bl	8000658 <__aeabi_dmul>
 8012b8e:	4602      	mov	r2, r0
 8012b90:	460b      	mov	r3, r1
 8012b92:	ec51 0b19 	vmov	r0, r1, d9
 8012b96:	f7ed fba7 	bl	80002e8 <__aeabi_dsub>
 8012b9a:	4652      	mov	r2, sl
 8012b9c:	465b      	mov	r3, fp
 8012b9e:	f7ed fd5b 	bl	8000658 <__aeabi_dmul>
 8012ba2:	ec53 2b18 	vmov	r2, r3, d8
 8012ba6:	f7ed fb9f 	bl	80002e8 <__aeabi_dsub>
 8012baa:	a30b      	add	r3, pc, #44	; (adr r3, 8012bd8 <__kernel_sin+0x148>)
 8012bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb0:	4606      	mov	r6, r0
 8012bb2:	460f      	mov	r7, r1
 8012bb4:	4640      	mov	r0, r8
 8012bb6:	4649      	mov	r1, r9
 8012bb8:	f7ed fd4e 	bl	8000658 <__aeabi_dmul>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	4630      	mov	r0, r6
 8012bc2:	4639      	mov	r1, r7
 8012bc4:	f7ed fb92 	bl	80002ec <__adddf3>
 8012bc8:	4602      	mov	r2, r0
 8012bca:	460b      	mov	r3, r1
 8012bcc:	4620      	mov	r0, r4
 8012bce:	4629      	mov	r1, r5
 8012bd0:	f7ed fb8a 	bl	80002e8 <__aeabi_dsub>
 8012bd4:	e7c4      	b.n	8012b60 <__kernel_sin+0xd0>
 8012bd6:	bf00      	nop
 8012bd8:	55555549 	.word	0x55555549
 8012bdc:	3fc55555 	.word	0x3fc55555
 8012be0:	3fe00000 	.word	0x3fe00000
 8012be4:	5acfd57c 	.word	0x5acfd57c
 8012be8:	3de5d93a 	.word	0x3de5d93a
 8012bec:	8a2b9ceb 	.word	0x8a2b9ceb
 8012bf0:	3e5ae5e6 	.word	0x3e5ae5e6
 8012bf4:	57b1fe7d 	.word	0x57b1fe7d
 8012bf8:	3ec71de3 	.word	0x3ec71de3
 8012bfc:	19c161d5 	.word	0x19c161d5
 8012c00:	3f2a01a0 	.word	0x3f2a01a0
 8012c04:	1110f8a6 	.word	0x1110f8a6
 8012c08:	3f811111 	.word	0x3f811111
 8012c0c:	00000000 	.word	0x00000000

08012c10 <atan>:
 8012c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c14:	ec55 4b10 	vmov	r4, r5, d0
 8012c18:	4bc3      	ldr	r3, [pc, #780]	; (8012f28 <atan+0x318>)
 8012c1a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012c1e:	429e      	cmp	r6, r3
 8012c20:	46ab      	mov	fp, r5
 8012c22:	dd18      	ble.n	8012c56 <atan+0x46>
 8012c24:	4bc1      	ldr	r3, [pc, #772]	; (8012f2c <atan+0x31c>)
 8012c26:	429e      	cmp	r6, r3
 8012c28:	dc01      	bgt.n	8012c2e <atan+0x1e>
 8012c2a:	d109      	bne.n	8012c40 <atan+0x30>
 8012c2c:	b144      	cbz	r4, 8012c40 <atan+0x30>
 8012c2e:	4622      	mov	r2, r4
 8012c30:	462b      	mov	r3, r5
 8012c32:	4620      	mov	r0, r4
 8012c34:	4629      	mov	r1, r5
 8012c36:	f7ed fb59 	bl	80002ec <__adddf3>
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	460d      	mov	r5, r1
 8012c3e:	e006      	b.n	8012c4e <atan+0x3e>
 8012c40:	f1bb 0f00 	cmp.w	fp, #0
 8012c44:	f300 8131 	bgt.w	8012eaa <atan+0x29a>
 8012c48:	a59b      	add	r5, pc, #620	; (adr r5, 8012eb8 <atan+0x2a8>)
 8012c4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012c4e:	ec45 4b10 	vmov	d0, r4, r5
 8012c52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c56:	4bb6      	ldr	r3, [pc, #728]	; (8012f30 <atan+0x320>)
 8012c58:	429e      	cmp	r6, r3
 8012c5a:	dc14      	bgt.n	8012c86 <atan+0x76>
 8012c5c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012c60:	429e      	cmp	r6, r3
 8012c62:	dc0d      	bgt.n	8012c80 <atan+0x70>
 8012c64:	a396      	add	r3, pc, #600	; (adr r3, 8012ec0 <atan+0x2b0>)
 8012c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6a:	ee10 0a10 	vmov	r0, s0
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f7ed fb3c 	bl	80002ec <__adddf3>
 8012c74:	4baf      	ldr	r3, [pc, #700]	; (8012f34 <atan+0x324>)
 8012c76:	2200      	movs	r2, #0
 8012c78:	f7ed ff7e 	bl	8000b78 <__aeabi_dcmpgt>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	d1e6      	bne.n	8012c4e <atan+0x3e>
 8012c80:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012c84:	e02b      	b.n	8012cde <atan+0xce>
 8012c86:	f000 f963 	bl	8012f50 <fabs>
 8012c8a:	4bab      	ldr	r3, [pc, #684]	; (8012f38 <atan+0x328>)
 8012c8c:	429e      	cmp	r6, r3
 8012c8e:	ec55 4b10 	vmov	r4, r5, d0
 8012c92:	f300 80bf 	bgt.w	8012e14 <atan+0x204>
 8012c96:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012c9a:	429e      	cmp	r6, r3
 8012c9c:	f300 80a0 	bgt.w	8012de0 <atan+0x1d0>
 8012ca0:	ee10 2a10 	vmov	r2, s0
 8012ca4:	ee10 0a10 	vmov	r0, s0
 8012ca8:	462b      	mov	r3, r5
 8012caa:	4629      	mov	r1, r5
 8012cac:	f7ed fb1e 	bl	80002ec <__adddf3>
 8012cb0:	4ba0      	ldr	r3, [pc, #640]	; (8012f34 <atan+0x324>)
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	f7ed fb18 	bl	80002e8 <__aeabi_dsub>
 8012cb8:	2200      	movs	r2, #0
 8012cba:	4606      	mov	r6, r0
 8012cbc:	460f      	mov	r7, r1
 8012cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	4629      	mov	r1, r5
 8012cc6:	f7ed fb11 	bl	80002ec <__adddf3>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	460b      	mov	r3, r1
 8012cce:	4630      	mov	r0, r6
 8012cd0:	4639      	mov	r1, r7
 8012cd2:	f7ed fdeb 	bl	80008ac <__aeabi_ddiv>
 8012cd6:	f04f 0a00 	mov.w	sl, #0
 8012cda:	4604      	mov	r4, r0
 8012cdc:	460d      	mov	r5, r1
 8012cde:	4622      	mov	r2, r4
 8012ce0:	462b      	mov	r3, r5
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	f7ed fcb7 	bl	8000658 <__aeabi_dmul>
 8012cea:	4602      	mov	r2, r0
 8012cec:	460b      	mov	r3, r1
 8012cee:	4680      	mov	r8, r0
 8012cf0:	4689      	mov	r9, r1
 8012cf2:	f7ed fcb1 	bl	8000658 <__aeabi_dmul>
 8012cf6:	a374      	add	r3, pc, #464	; (adr r3, 8012ec8 <atan+0x2b8>)
 8012cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cfc:	4606      	mov	r6, r0
 8012cfe:	460f      	mov	r7, r1
 8012d00:	f7ed fcaa 	bl	8000658 <__aeabi_dmul>
 8012d04:	a372      	add	r3, pc, #456	; (adr r3, 8012ed0 <atan+0x2c0>)
 8012d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0a:	f7ed faef 	bl	80002ec <__adddf3>
 8012d0e:	4632      	mov	r2, r6
 8012d10:	463b      	mov	r3, r7
 8012d12:	f7ed fca1 	bl	8000658 <__aeabi_dmul>
 8012d16:	a370      	add	r3, pc, #448	; (adr r3, 8012ed8 <atan+0x2c8>)
 8012d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1c:	f7ed fae6 	bl	80002ec <__adddf3>
 8012d20:	4632      	mov	r2, r6
 8012d22:	463b      	mov	r3, r7
 8012d24:	f7ed fc98 	bl	8000658 <__aeabi_dmul>
 8012d28:	a36d      	add	r3, pc, #436	; (adr r3, 8012ee0 <atan+0x2d0>)
 8012d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2e:	f7ed fadd 	bl	80002ec <__adddf3>
 8012d32:	4632      	mov	r2, r6
 8012d34:	463b      	mov	r3, r7
 8012d36:	f7ed fc8f 	bl	8000658 <__aeabi_dmul>
 8012d3a:	a36b      	add	r3, pc, #428	; (adr r3, 8012ee8 <atan+0x2d8>)
 8012d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d40:	f7ed fad4 	bl	80002ec <__adddf3>
 8012d44:	4632      	mov	r2, r6
 8012d46:	463b      	mov	r3, r7
 8012d48:	f7ed fc86 	bl	8000658 <__aeabi_dmul>
 8012d4c:	a368      	add	r3, pc, #416	; (adr r3, 8012ef0 <atan+0x2e0>)
 8012d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d52:	f7ed facb 	bl	80002ec <__adddf3>
 8012d56:	4642      	mov	r2, r8
 8012d58:	464b      	mov	r3, r9
 8012d5a:	f7ed fc7d 	bl	8000658 <__aeabi_dmul>
 8012d5e:	a366      	add	r3, pc, #408	; (adr r3, 8012ef8 <atan+0x2e8>)
 8012d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d64:	4680      	mov	r8, r0
 8012d66:	4689      	mov	r9, r1
 8012d68:	4630      	mov	r0, r6
 8012d6a:	4639      	mov	r1, r7
 8012d6c:	f7ed fc74 	bl	8000658 <__aeabi_dmul>
 8012d70:	a363      	add	r3, pc, #396	; (adr r3, 8012f00 <atan+0x2f0>)
 8012d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d76:	f7ed fab7 	bl	80002e8 <__aeabi_dsub>
 8012d7a:	4632      	mov	r2, r6
 8012d7c:	463b      	mov	r3, r7
 8012d7e:	f7ed fc6b 	bl	8000658 <__aeabi_dmul>
 8012d82:	a361      	add	r3, pc, #388	; (adr r3, 8012f08 <atan+0x2f8>)
 8012d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d88:	f7ed faae 	bl	80002e8 <__aeabi_dsub>
 8012d8c:	4632      	mov	r2, r6
 8012d8e:	463b      	mov	r3, r7
 8012d90:	f7ed fc62 	bl	8000658 <__aeabi_dmul>
 8012d94:	a35e      	add	r3, pc, #376	; (adr r3, 8012f10 <atan+0x300>)
 8012d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9a:	f7ed faa5 	bl	80002e8 <__aeabi_dsub>
 8012d9e:	4632      	mov	r2, r6
 8012da0:	463b      	mov	r3, r7
 8012da2:	f7ed fc59 	bl	8000658 <__aeabi_dmul>
 8012da6:	a35c      	add	r3, pc, #368	; (adr r3, 8012f18 <atan+0x308>)
 8012da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dac:	f7ed fa9c 	bl	80002e8 <__aeabi_dsub>
 8012db0:	4632      	mov	r2, r6
 8012db2:	463b      	mov	r3, r7
 8012db4:	f7ed fc50 	bl	8000658 <__aeabi_dmul>
 8012db8:	4602      	mov	r2, r0
 8012dba:	460b      	mov	r3, r1
 8012dbc:	4640      	mov	r0, r8
 8012dbe:	4649      	mov	r1, r9
 8012dc0:	f7ed fa94 	bl	80002ec <__adddf3>
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	462b      	mov	r3, r5
 8012dc8:	f7ed fc46 	bl	8000658 <__aeabi_dmul>
 8012dcc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012dd0:	4602      	mov	r2, r0
 8012dd2:	460b      	mov	r3, r1
 8012dd4:	d14b      	bne.n	8012e6e <atan+0x25e>
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	4629      	mov	r1, r5
 8012dda:	f7ed fa85 	bl	80002e8 <__aeabi_dsub>
 8012dde:	e72c      	b.n	8012c3a <atan+0x2a>
 8012de0:	ee10 0a10 	vmov	r0, s0
 8012de4:	4b53      	ldr	r3, [pc, #332]	; (8012f34 <atan+0x324>)
 8012de6:	2200      	movs	r2, #0
 8012de8:	4629      	mov	r1, r5
 8012dea:	f7ed fa7d 	bl	80002e8 <__aeabi_dsub>
 8012dee:	4b51      	ldr	r3, [pc, #324]	; (8012f34 <atan+0x324>)
 8012df0:	4606      	mov	r6, r0
 8012df2:	460f      	mov	r7, r1
 8012df4:	2200      	movs	r2, #0
 8012df6:	4620      	mov	r0, r4
 8012df8:	4629      	mov	r1, r5
 8012dfa:	f7ed fa77 	bl	80002ec <__adddf3>
 8012dfe:	4602      	mov	r2, r0
 8012e00:	460b      	mov	r3, r1
 8012e02:	4630      	mov	r0, r6
 8012e04:	4639      	mov	r1, r7
 8012e06:	f7ed fd51 	bl	80008ac <__aeabi_ddiv>
 8012e0a:	f04f 0a01 	mov.w	sl, #1
 8012e0e:	4604      	mov	r4, r0
 8012e10:	460d      	mov	r5, r1
 8012e12:	e764      	b.n	8012cde <atan+0xce>
 8012e14:	4b49      	ldr	r3, [pc, #292]	; (8012f3c <atan+0x32c>)
 8012e16:	429e      	cmp	r6, r3
 8012e18:	da1d      	bge.n	8012e56 <atan+0x246>
 8012e1a:	ee10 0a10 	vmov	r0, s0
 8012e1e:	4b48      	ldr	r3, [pc, #288]	; (8012f40 <atan+0x330>)
 8012e20:	2200      	movs	r2, #0
 8012e22:	4629      	mov	r1, r5
 8012e24:	f7ed fa60 	bl	80002e8 <__aeabi_dsub>
 8012e28:	4b45      	ldr	r3, [pc, #276]	; (8012f40 <atan+0x330>)
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	460f      	mov	r7, r1
 8012e2e:	2200      	movs	r2, #0
 8012e30:	4620      	mov	r0, r4
 8012e32:	4629      	mov	r1, r5
 8012e34:	f7ed fc10 	bl	8000658 <__aeabi_dmul>
 8012e38:	4b3e      	ldr	r3, [pc, #248]	; (8012f34 <atan+0x324>)
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	f7ed fa56 	bl	80002ec <__adddf3>
 8012e40:	4602      	mov	r2, r0
 8012e42:	460b      	mov	r3, r1
 8012e44:	4630      	mov	r0, r6
 8012e46:	4639      	mov	r1, r7
 8012e48:	f7ed fd30 	bl	80008ac <__aeabi_ddiv>
 8012e4c:	f04f 0a02 	mov.w	sl, #2
 8012e50:	4604      	mov	r4, r0
 8012e52:	460d      	mov	r5, r1
 8012e54:	e743      	b.n	8012cde <atan+0xce>
 8012e56:	462b      	mov	r3, r5
 8012e58:	ee10 2a10 	vmov	r2, s0
 8012e5c:	4939      	ldr	r1, [pc, #228]	; (8012f44 <atan+0x334>)
 8012e5e:	2000      	movs	r0, #0
 8012e60:	f7ed fd24 	bl	80008ac <__aeabi_ddiv>
 8012e64:	f04f 0a03 	mov.w	sl, #3
 8012e68:	4604      	mov	r4, r0
 8012e6a:	460d      	mov	r5, r1
 8012e6c:	e737      	b.n	8012cde <atan+0xce>
 8012e6e:	4b36      	ldr	r3, [pc, #216]	; (8012f48 <atan+0x338>)
 8012e70:	4e36      	ldr	r6, [pc, #216]	; (8012f4c <atan+0x33c>)
 8012e72:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012e76:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8012e7a:	e9da 2300 	ldrd	r2, r3, [sl]
 8012e7e:	f7ed fa33 	bl	80002e8 <__aeabi_dsub>
 8012e82:	4622      	mov	r2, r4
 8012e84:	462b      	mov	r3, r5
 8012e86:	f7ed fa2f 	bl	80002e8 <__aeabi_dsub>
 8012e8a:	4602      	mov	r2, r0
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012e92:	f7ed fa29 	bl	80002e8 <__aeabi_dsub>
 8012e96:	f1bb 0f00 	cmp.w	fp, #0
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	460d      	mov	r5, r1
 8012e9e:	f6bf aed6 	bge.w	8012c4e <atan+0x3e>
 8012ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ea6:	461d      	mov	r5, r3
 8012ea8:	e6d1      	b.n	8012c4e <atan+0x3e>
 8012eaa:	a51d      	add	r5, pc, #116	; (adr r5, 8012f20 <atan+0x310>)
 8012eac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012eb0:	e6cd      	b.n	8012c4e <atan+0x3e>
 8012eb2:	bf00      	nop
 8012eb4:	f3af 8000 	nop.w
 8012eb8:	54442d18 	.word	0x54442d18
 8012ebc:	bff921fb 	.word	0xbff921fb
 8012ec0:	8800759c 	.word	0x8800759c
 8012ec4:	7e37e43c 	.word	0x7e37e43c
 8012ec8:	e322da11 	.word	0xe322da11
 8012ecc:	3f90ad3a 	.word	0x3f90ad3a
 8012ed0:	24760deb 	.word	0x24760deb
 8012ed4:	3fa97b4b 	.word	0x3fa97b4b
 8012ed8:	a0d03d51 	.word	0xa0d03d51
 8012edc:	3fb10d66 	.word	0x3fb10d66
 8012ee0:	c54c206e 	.word	0xc54c206e
 8012ee4:	3fb745cd 	.word	0x3fb745cd
 8012ee8:	920083ff 	.word	0x920083ff
 8012eec:	3fc24924 	.word	0x3fc24924
 8012ef0:	5555550d 	.word	0x5555550d
 8012ef4:	3fd55555 	.word	0x3fd55555
 8012ef8:	2c6a6c2f 	.word	0x2c6a6c2f
 8012efc:	bfa2b444 	.word	0xbfa2b444
 8012f00:	52defd9a 	.word	0x52defd9a
 8012f04:	3fadde2d 	.word	0x3fadde2d
 8012f08:	af749a6d 	.word	0xaf749a6d
 8012f0c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012f10:	fe231671 	.word	0xfe231671
 8012f14:	3fbc71c6 	.word	0x3fbc71c6
 8012f18:	9998ebc4 	.word	0x9998ebc4
 8012f1c:	3fc99999 	.word	0x3fc99999
 8012f20:	54442d18 	.word	0x54442d18
 8012f24:	3ff921fb 	.word	0x3ff921fb
 8012f28:	440fffff 	.word	0x440fffff
 8012f2c:	7ff00000 	.word	0x7ff00000
 8012f30:	3fdbffff 	.word	0x3fdbffff
 8012f34:	3ff00000 	.word	0x3ff00000
 8012f38:	3ff2ffff 	.word	0x3ff2ffff
 8012f3c:	40038000 	.word	0x40038000
 8012f40:	3ff80000 	.word	0x3ff80000
 8012f44:	bff00000 	.word	0xbff00000
 8012f48:	08013970 	.word	0x08013970
 8012f4c:	08013950 	.word	0x08013950

08012f50 <fabs>:
 8012f50:	ec51 0b10 	vmov	r0, r1, d0
 8012f54:	ee10 2a10 	vmov	r2, s0
 8012f58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f5c:	ec43 2b10 	vmov	d0, r2, r3
 8012f60:	4770      	bx	lr
 8012f62:	0000      	movs	r0, r0
 8012f64:	0000      	movs	r0, r0
	...

08012f68 <floor>:
 8012f68:	ec51 0b10 	vmov	r0, r1, d0
 8012f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012f74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012f78:	2e13      	cmp	r6, #19
 8012f7a:	ee10 5a10 	vmov	r5, s0
 8012f7e:	ee10 8a10 	vmov	r8, s0
 8012f82:	460c      	mov	r4, r1
 8012f84:	dc32      	bgt.n	8012fec <floor+0x84>
 8012f86:	2e00      	cmp	r6, #0
 8012f88:	da14      	bge.n	8012fb4 <floor+0x4c>
 8012f8a:	a333      	add	r3, pc, #204	; (adr r3, 8013058 <floor+0xf0>)
 8012f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f90:	f7ed f9ac 	bl	80002ec <__adddf3>
 8012f94:	2200      	movs	r2, #0
 8012f96:	2300      	movs	r3, #0
 8012f98:	f7ed fdee 	bl	8000b78 <__aeabi_dcmpgt>
 8012f9c:	b138      	cbz	r0, 8012fae <floor+0x46>
 8012f9e:	2c00      	cmp	r4, #0
 8012fa0:	da57      	bge.n	8013052 <floor+0xea>
 8012fa2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012fa6:	431d      	orrs	r5, r3
 8012fa8:	d001      	beq.n	8012fae <floor+0x46>
 8012faa:	4c2d      	ldr	r4, [pc, #180]	; (8013060 <floor+0xf8>)
 8012fac:	2500      	movs	r5, #0
 8012fae:	4621      	mov	r1, r4
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	e025      	b.n	8013000 <floor+0x98>
 8012fb4:	4f2b      	ldr	r7, [pc, #172]	; (8013064 <floor+0xfc>)
 8012fb6:	4137      	asrs	r7, r6
 8012fb8:	ea01 0307 	and.w	r3, r1, r7
 8012fbc:	4303      	orrs	r3, r0
 8012fbe:	d01f      	beq.n	8013000 <floor+0x98>
 8012fc0:	a325      	add	r3, pc, #148	; (adr r3, 8013058 <floor+0xf0>)
 8012fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc6:	f7ed f991 	bl	80002ec <__adddf3>
 8012fca:	2200      	movs	r2, #0
 8012fcc:	2300      	movs	r3, #0
 8012fce:	f7ed fdd3 	bl	8000b78 <__aeabi_dcmpgt>
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d0eb      	beq.n	8012fae <floor+0x46>
 8012fd6:	2c00      	cmp	r4, #0
 8012fd8:	bfbe      	ittt	lt
 8012fda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012fde:	fa43 f606 	asrlt.w	r6, r3, r6
 8012fe2:	19a4      	addlt	r4, r4, r6
 8012fe4:	ea24 0407 	bic.w	r4, r4, r7
 8012fe8:	2500      	movs	r5, #0
 8012fea:	e7e0      	b.n	8012fae <floor+0x46>
 8012fec:	2e33      	cmp	r6, #51	; 0x33
 8012fee:	dd0b      	ble.n	8013008 <floor+0xa0>
 8012ff0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012ff4:	d104      	bne.n	8013000 <floor+0x98>
 8012ff6:	ee10 2a10 	vmov	r2, s0
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	f7ed f976 	bl	80002ec <__adddf3>
 8013000:	ec41 0b10 	vmov	d0, r0, r1
 8013004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013008:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801300c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013010:	fa23 f707 	lsr.w	r7, r3, r7
 8013014:	4207      	tst	r7, r0
 8013016:	d0f3      	beq.n	8013000 <floor+0x98>
 8013018:	a30f      	add	r3, pc, #60	; (adr r3, 8013058 <floor+0xf0>)
 801301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301e:	f7ed f965 	bl	80002ec <__adddf3>
 8013022:	2200      	movs	r2, #0
 8013024:	2300      	movs	r3, #0
 8013026:	f7ed fda7 	bl	8000b78 <__aeabi_dcmpgt>
 801302a:	2800      	cmp	r0, #0
 801302c:	d0bf      	beq.n	8012fae <floor+0x46>
 801302e:	2c00      	cmp	r4, #0
 8013030:	da02      	bge.n	8013038 <floor+0xd0>
 8013032:	2e14      	cmp	r6, #20
 8013034:	d103      	bne.n	801303e <floor+0xd6>
 8013036:	3401      	adds	r4, #1
 8013038:	ea25 0507 	bic.w	r5, r5, r7
 801303c:	e7b7      	b.n	8012fae <floor+0x46>
 801303e:	2301      	movs	r3, #1
 8013040:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013044:	fa03 f606 	lsl.w	r6, r3, r6
 8013048:	4435      	add	r5, r6
 801304a:	4545      	cmp	r5, r8
 801304c:	bf38      	it	cc
 801304e:	18e4      	addcc	r4, r4, r3
 8013050:	e7f2      	b.n	8013038 <floor+0xd0>
 8013052:	2500      	movs	r5, #0
 8013054:	462c      	mov	r4, r5
 8013056:	e7aa      	b.n	8012fae <floor+0x46>
 8013058:	8800759c 	.word	0x8800759c
 801305c:	7e37e43c 	.word	0x7e37e43c
 8013060:	bff00000 	.word	0xbff00000
 8013064:	000fffff 	.word	0x000fffff

08013068 <scalbn>:
 8013068:	b570      	push	{r4, r5, r6, lr}
 801306a:	ec55 4b10 	vmov	r4, r5, d0
 801306e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013072:	4606      	mov	r6, r0
 8013074:	462b      	mov	r3, r5
 8013076:	b99a      	cbnz	r2, 80130a0 <scalbn+0x38>
 8013078:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801307c:	4323      	orrs	r3, r4
 801307e:	d036      	beq.n	80130ee <scalbn+0x86>
 8013080:	4b39      	ldr	r3, [pc, #228]	; (8013168 <scalbn+0x100>)
 8013082:	4629      	mov	r1, r5
 8013084:	ee10 0a10 	vmov	r0, s0
 8013088:	2200      	movs	r2, #0
 801308a:	f7ed fae5 	bl	8000658 <__aeabi_dmul>
 801308e:	4b37      	ldr	r3, [pc, #220]	; (801316c <scalbn+0x104>)
 8013090:	429e      	cmp	r6, r3
 8013092:	4604      	mov	r4, r0
 8013094:	460d      	mov	r5, r1
 8013096:	da10      	bge.n	80130ba <scalbn+0x52>
 8013098:	a32b      	add	r3, pc, #172	; (adr r3, 8013148 <scalbn+0xe0>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	e03a      	b.n	8013116 <scalbn+0xae>
 80130a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80130a4:	428a      	cmp	r2, r1
 80130a6:	d10c      	bne.n	80130c2 <scalbn+0x5a>
 80130a8:	ee10 2a10 	vmov	r2, s0
 80130ac:	4620      	mov	r0, r4
 80130ae:	4629      	mov	r1, r5
 80130b0:	f7ed f91c 	bl	80002ec <__adddf3>
 80130b4:	4604      	mov	r4, r0
 80130b6:	460d      	mov	r5, r1
 80130b8:	e019      	b.n	80130ee <scalbn+0x86>
 80130ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80130be:	460b      	mov	r3, r1
 80130c0:	3a36      	subs	r2, #54	; 0x36
 80130c2:	4432      	add	r2, r6
 80130c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80130c8:	428a      	cmp	r2, r1
 80130ca:	dd08      	ble.n	80130de <scalbn+0x76>
 80130cc:	2d00      	cmp	r5, #0
 80130ce:	a120      	add	r1, pc, #128	; (adr r1, 8013150 <scalbn+0xe8>)
 80130d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130d4:	da1c      	bge.n	8013110 <scalbn+0xa8>
 80130d6:	a120      	add	r1, pc, #128	; (adr r1, 8013158 <scalbn+0xf0>)
 80130d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130dc:	e018      	b.n	8013110 <scalbn+0xa8>
 80130de:	2a00      	cmp	r2, #0
 80130e0:	dd08      	ble.n	80130f4 <scalbn+0x8c>
 80130e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80130e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80130ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80130ee:	ec45 4b10 	vmov	d0, r4, r5
 80130f2:	bd70      	pop	{r4, r5, r6, pc}
 80130f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80130f8:	da19      	bge.n	801312e <scalbn+0xc6>
 80130fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80130fe:	429e      	cmp	r6, r3
 8013100:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013104:	dd0a      	ble.n	801311c <scalbn+0xb4>
 8013106:	a112      	add	r1, pc, #72	; (adr r1, 8013150 <scalbn+0xe8>)
 8013108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d1e2      	bne.n	80130d6 <scalbn+0x6e>
 8013110:	a30f      	add	r3, pc, #60	; (adr r3, 8013150 <scalbn+0xe8>)
 8013112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013116:	f7ed fa9f 	bl	8000658 <__aeabi_dmul>
 801311a:	e7cb      	b.n	80130b4 <scalbn+0x4c>
 801311c:	a10a      	add	r1, pc, #40	; (adr r1, 8013148 <scalbn+0xe0>)
 801311e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d0b8      	beq.n	8013098 <scalbn+0x30>
 8013126:	a10e      	add	r1, pc, #56	; (adr r1, 8013160 <scalbn+0xf8>)
 8013128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801312c:	e7b4      	b.n	8013098 <scalbn+0x30>
 801312e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013132:	3236      	adds	r2, #54	; 0x36
 8013134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013138:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801313c:	4620      	mov	r0, r4
 801313e:	4b0c      	ldr	r3, [pc, #48]	; (8013170 <scalbn+0x108>)
 8013140:	2200      	movs	r2, #0
 8013142:	e7e8      	b.n	8013116 <scalbn+0xae>
 8013144:	f3af 8000 	nop.w
 8013148:	c2f8f359 	.word	0xc2f8f359
 801314c:	01a56e1f 	.word	0x01a56e1f
 8013150:	8800759c 	.word	0x8800759c
 8013154:	7e37e43c 	.word	0x7e37e43c
 8013158:	8800759c 	.word	0x8800759c
 801315c:	fe37e43c 	.word	0xfe37e43c
 8013160:	c2f8f359 	.word	0xc2f8f359
 8013164:	81a56e1f 	.word	0x81a56e1f
 8013168:	43500000 	.word	0x43500000
 801316c:	ffff3cb0 	.word	0xffff3cb0
 8013170:	3c900000 	.word	0x3c900000

08013174 <_init>:
 8013174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013176:	bf00      	nop
 8013178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801317a:	bc08      	pop	{r3}
 801317c:	469e      	mov	lr, r3
 801317e:	4770      	bx	lr

08013180 <_fini>:
 8013180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013182:	bf00      	nop
 8013184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013186:	bc08      	pop	{r3}
 8013188:	469e      	mov	lr, r3
 801318a:	4770      	bx	lr
