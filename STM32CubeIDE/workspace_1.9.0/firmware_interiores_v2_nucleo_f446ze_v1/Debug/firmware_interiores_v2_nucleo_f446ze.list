
firmware_interiores_v2_nucleo_f446ze.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac28  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aeac  0800aeac  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800aeac  0800aeac  0001aeac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aeb4  0800aeb4  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aeb4  0800aeb4  0001aeb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aeb8  0800aeb8  0001aeb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800aebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb0  20000110  0800afcc  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fc0  0800afcc  00021fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a849  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d6  00000000  00000000  0003a989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026920  00000000  00000000  00040c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac2e  00000000  00000000  00067588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e18da  00000000  00000000  000821b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163a90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  00163ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000110 	.word	0x20000110
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800add4 	.word	0x0800add4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000114 	.word	0x20000114
 8000200:	0800add4 	.word	0x0800add4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_TIM_IC_CaptureCallback>:
}*/




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	counter=__HAL_TIM_GET_COUNTER(htim);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000528:	6013      	str	r3, [r2, #0]
	count= (int16_t)counter;
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	b21a      	sxth	r2, r3
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000532:	801a      	strh	r2, [r3, #0]
	position=count/4;
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800053a:	2b00      	cmp	r3, #0
 800053c:	da00      	bge.n	8000540 <HAL_TIM_IC_CaptureCallback+0x28>
 800053e:	3303      	adds	r3, #3
 8000540:	109b      	asrs	r3, r3, #2
 8000542:	b21a      	sxth	r2, r3
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_TIM_IC_CaptureCallback+0x44>)
 8000546:	801a      	strh	r2, [r3, #0]
	//cuenta++;
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	200003a4 	.word	0x200003a4
 8000558:	200003a8 	.word	0x200003a8
 800055c:	200003aa 	.word	0x200003aa

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b598      	push	{r3, r4, r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 ff56 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f840 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 fb66 	bl	8000c3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000570:	f000 fb10 	bl	8000b94 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000574:	f000 f9be 	bl	80008f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000578:	f000 fa10 	bl	800099c <MX_TIM3_Init>
  MX_TIM1_Init();
 800057c:	f000 f8f4 	bl	8000768 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000580:	f000 fa60 	bl	8000a44 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000584:	f000 fab2 	bl	8000aec <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000588:	f000 fb2e 	bl	8000be8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800058c:	f000 f89a 	bl	80006c4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000590:	f009 fe32 	bl	800a1f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <main+0x80>)
 8000598:	f004 fa18 	bl	80049cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800059c:	2104      	movs	r1, #4
 800059e:	4810      	ldr	r0, [pc, #64]	; (80005e0 <main+0x80>)
 80005a0:	f004 fa14 	bl	80049cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005a4:	2108      	movs	r1, #8
 80005a6:	480e      	ldr	r0, [pc, #56]	; (80005e0 <main+0x80>)
 80005a8:	f004 fa10 	bl	80049cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005ac:	210c      	movs	r1, #12
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x80>)
 80005b0:	f004 fa0c 	bl	80049cc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005b4:	213c      	movs	r1, #60	; 0x3c
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x84>)
 80005b8:	f004 fb76 	bl	8004ca8 <HAL_TIM_Encoder_Start_IT>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS((uint8_t *) data, strlen (data));
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <main+0x88>)
 80005be:	681c      	ldr	r4, [r3, #0]
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <main+0x88>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe1d 	bl	8000204 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	4620      	mov	r0, r4
 80005d2:	f009 fee5 	bl	800a3a0 <CDC_Transmit_FS>

	  HAL_Delay(10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f000 ff8e 	bl	80014f8 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *) data, strlen (data));
 80005dc:	e7ee      	b.n	80005bc <main+0x5c>
 80005de:	bf00      	nop
 80005e0:	20000174 	.word	0x20000174
 80005e4:	200001bc 	.word	0x200001bc
 80005e8:	20000000 	.word	0x20000000

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00a fbe2 	bl	800adc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a28      	ldr	r2, [pc, #160]	; (80006bc <SystemClock_Config+0xd0>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <SystemClock_Config+0xd4>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000650:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000660:	23a8      	movs	r3, #168	; 0xa8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fe63 	bl	8004340 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000680:	f000 fb98 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ffd8 	bl	8003658 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ae:	f000 fb81 	bl	8000db4 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_ADC1_Init+0x98>)
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <MX_ADC1_Init+0x9c>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_ADC1_Init+0x98>)
 80006de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_ADC1_Init+0x98>)
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_ADC1_Init+0xa0>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_ADC1_Init+0x98>)
 8000712:	2201      	movs	r2, #1
 8000714:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_ADC1_Init+0x98>)
 8000726:	f000 ff0b 	bl	8001540 <HAL_ADC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000730:	f000 fb40 	bl	8000db4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000734:	2304      	movs	r3, #4
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_ADC1_Init+0x98>)
 8000746:	f000 ff3f 	bl	80015c8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000750:	f000 fb30 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000012c 	.word	0x2000012c
 8000760:	40012000 	.word	0x40012000
 8000764:	0f000001 	.word	0x0f000001

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	; 0x58
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00a fb0f 	bl	800adc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <MX_TIM1_Init+0x184>)
 80007a8:	4a51      	ldr	r2, [pc, #324]	; (80008f0 <MX_TIM1_Init+0x188>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 80007ac:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <MX_TIM1_Init+0x184>)
 80007ae:	223b      	movs	r2, #59	; 0x3b
 80007b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b4e      	ldr	r3, [pc, #312]	; (80008ec <MX_TIM1_Init+0x184>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 56000;
 80007b8:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <MX_TIM1_Init+0x184>)
 80007ba:	f64d 22c0 	movw	r2, #56000	; 0xdac0
 80007be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <MX_TIM1_Init+0x184>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c6:	4b49      	ldr	r3, [pc, #292]	; (80008ec <MX_TIM1_Init+0x184>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b47      	ldr	r3, [pc, #284]	; (80008ec <MX_TIM1_Init+0x184>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d2:	4846      	ldr	r0, [pc, #280]	; (80008ec <MX_TIM1_Init+0x184>)
 80007d4:	f004 f852 	bl	800487c <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007de:	f000 fae9 	bl	8000db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ec:	4619      	mov	r1, r3
 80007ee:	483f      	ldr	r0, [pc, #252]	; (80008ec <MX_TIM1_Init+0x184>)
 80007f0:	f004 fcd2 	bl	8005198 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 fadb 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fe:	483b      	ldr	r0, [pc, #236]	; (80008ec <MX_TIM1_Init+0x184>)
 8000800:	f004 f88b 	bl	800491a <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800080a:	f000 fad3 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800081a:	4619      	mov	r1, r3
 800081c:	4833      	ldr	r0, [pc, #204]	; (80008ec <MX_TIM1_Init+0x184>)
 800081e:	f005 f8bb 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000828:	f000 fac4 	bl	8000db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4256;
 8000830:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	4826      	ldr	r0, [pc, #152]	; (80008ec <MX_TIM1_Init+0x184>)
 8000854:	f004 fbde 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800085e:	f000 faa9 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	2204      	movs	r2, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_TIM1_Init+0x184>)
 800086c:	f004 fbd2 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000876:	f000 fa9d 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	2208      	movs	r2, #8
 8000880:	4619      	mov	r1, r3
 8000882:	481a      	ldr	r0, [pc, #104]	; (80008ec <MX_TIM1_Init+0x184>)
 8000884:	f004 fbc6 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800088e:	f000 fa91 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	220c      	movs	r2, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4814      	ldr	r0, [pc, #80]	; (80008ec <MX_TIM1_Init+0x184>)
 800089c:	f004 fbba 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80008a6:	f000 fa85 	bl	8000db4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <MX_TIM1_Init+0x184>)
 80008ce:	f005 f8df 	bl	8005a90 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80008d8:	f000 fa6c 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <MX_TIM1_Init+0x184>)
 80008de:	f000 fc23 	bl	8001128 <HAL_TIM_MspPostInit>

}
 80008e2:	bf00      	nop
 80008e4:	3758      	adds	r7, #88	; 0x58
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000174 	.word	0x20000174
 80008f0:	40010000 	.word	0x40010000

080008f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2224      	movs	r2, #36	; 0x24
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f00a fa5e 	bl	800adc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_TIM2_Init+0xa4>)
 8000912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000916:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_TIM2_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM2_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_TIM2_Init+0xa4>)
 8000926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800092a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM2_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_TIM2_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000938:	2303      	movs	r3, #3
 800093a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000940:	2301      	movs	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000950:	2301      	movs	r3, #1
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_TIM2_Init+0xa4>)
 8000964:	f004 f8fa 	bl	8004b5c <HAL_TIM_Encoder_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800096e:	f000 fa21 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_TIM2_Init+0xa4>)
 8000980:	f005 f80a 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800098a:	f000 fa13 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200001bc 	.word	0x200001bc

0800099c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2224      	movs	r2, #36	; 0x24
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00a fa0a 	bl	800adc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_TIM3_Init+0xa0>)
 80009ba:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <MX_TIM3_Init+0xa4>)
 80009bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_TIM3_Init+0xa0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_TIM3_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_TIM3_Init+0xa0>)
 80009cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM3_Init+0xa0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_TIM3_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009de:	2303      	movs	r3, #3
 80009e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009e6:	2301      	movs	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009f6:	2301      	movs	r3, #1
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM3_Init+0xa0>)
 8000a0a:	f004 f8a7 	bl	8004b5c <HAL_TIM_Encoder_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a14:	f000 f9ce 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_TIM3_Init+0xa0>)
 8000a26:	f004 ffb7 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a30:	f000 f9c0 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000204 	.word	0x20000204
 8000a40:	40000400 	.word	0x40000400

08000a44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2224      	movs	r2, #36	; 0x24
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00a f9b6 	bl	800adc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_TIM4_Init+0xa0>)
 8000a62:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <MX_TIM4_Init+0xa4>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_TIM4_Init+0xa0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM4_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_TIM4_Init+0xa0>)
 8000a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_TIM4_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_TIM4_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a86:	2303      	movs	r3, #3
 8000a88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_TIM4_Init+0xa0>)
 8000ab2:	f004 f853 	bl	8004b5c <HAL_TIM_Encoder_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000abc:	f000 f97a 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_TIM4_Init+0xa0>)
 8000ace:	f004 ff63 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ad8:	f000 f96c 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000024c 	.word	0x2000024c
 8000ae8:	40000800 	.word	0x40000800

08000aec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2224      	movs	r2, #36	; 0x24
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00a f962 	bl	800adc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b0a:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <MX_TIM5_Init+0xa4>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b46:	2301      	movs	r3, #1
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b5a:	f003 ffff 	bl	8004b5c <HAL_TIM_Encoder_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b64:	f000 f926 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b76:	f004 ff0f 	bl	8005998 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b80:	f000 f918 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	3730      	adds	r7, #48	; 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000294 	.word	0x20000294
 8000b90:	40000c00 	.word	0x40000c00

08000b94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_USART3_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bcc:	f004 ffc6 	bl	8005b5c <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f000 f8ed 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200002dc 	.word	0x200002dc
 8000be4:	40004800 	.word	0x40004800

08000be8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <MX_USART6_UART_Init+0x50>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c20:	f004 ff9c 	bl	8005b5c <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c2a:	f000 f8c3 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000320 	.word	0x20000320
 8000c38:	40011400 	.word	0x40011400

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a52      	ldr	r2, [pc, #328]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a4b      	ldr	r2, [pc, #300]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a3d      	ldr	r2, [pc, #244]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a36      	ldr	r2, [pc, #216]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_GPIO_Init+0x168>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d1c:	4822      	ldr	r0, [pc, #136]	; (8000da8 <MX_GPIO_Init+0x16c>)
 8000d1e:	f001 f9b9 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <MX_GPIO_Init+0x170>)
 8000d28:	f001 f9b4 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_GPIO_Init+0x174>)
 8000d44:	f001 f812 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d48:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_GPIO_Init+0x16c>)
 8000d62:	f001 f803 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d66:	2340      	movs	r3, #64	; 0x40
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <MX_GPIO_Init+0x170>)
 8000d7e:	f000 fff5 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_GPIO_Init+0x170>)
 8000d96:	f000 ffe9 	bl	8001d6c <HAL_GPIO_Init>

}
 8000d9a:	bf00      	nop
 8000d9c:	3730      	adds	r7, #48	; 0x30
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40021800 	.word	0x40021800
 8000db0:	40020800 	.word	0x40020800

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_ADC_MspInit+0x7c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d127      	bne.n	8000e82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0x80>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_ADC_MspInit+0x84>)
 8000e7e:	f000 ff75 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40012000 	.word	0x40012000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10d      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_TIM_Base_MspInit+0x40>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <HAL_TIM_Base_MspInit+0x40>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_TIM_Base_MspInit+0x40>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40010000 	.word	0x40010000
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b090      	sub	sp, #64	; 0x40
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efc:	d153      	bne.n	8000fa6 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f02:	4b82      	ldr	r3, [pc, #520]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a81      	ldr	r2, [pc, #516]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b7f      	ldr	r3, [pc, #508]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1e:	4b7b      	ldr	r3, [pc, #492]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a7a      	ldr	r2, [pc, #488]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b78      	ldr	r3, [pc, #480]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
 8000f3a:	4b74      	ldr	r3, [pc, #464]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a73      	ldr	r2, [pc, #460]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
 8000f50:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f52:	2320      	movs	r3, #32
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f62:	2301      	movs	r3, #1
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4868      	ldr	r0, [pc, #416]	; (8001110 <HAL_TIM_Encoder_MspInit+0x234>)
 8000f6e:	f000 fefd 	bl	8001d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f84:	2301      	movs	r3, #1
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4861      	ldr	r0, [pc, #388]	; (8001114 <HAL_TIM_Encoder_MspInit+0x238>)
 8000f90:	f000 feec 	bl	8001d6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	201c      	movs	r0, #28
 8000f9a:	f000 fe1e 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9e:	201c      	movs	r0, #28
 8000fa0:	f000 fe37 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000fa4:	e0ad      	b.n	8001102 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a5b      	ldr	r2, [pc, #364]	; (8001118 <HAL_TIM_Encoder_MspInit+0x23c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d134      	bne.n	800101a <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	4b55      	ldr	r3, [pc, #340]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a54      	ldr	r2, [pc, #336]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b52      	ldr	r3, [pc, #328]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	4b4e      	ldr	r3, [pc, #312]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b4b      	ldr	r3, [pc, #300]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe8:	23c0      	movs	r3, #192	; 0xc0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001000:	4619      	mov	r1, r3
 8001002:	4843      	ldr	r0, [pc, #268]	; (8001110 <HAL_TIM_Encoder_MspInit+0x234>)
 8001004:	f000 feb2 	bl	8001d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	201d      	movs	r0, #29
 800100e:	f000 fde4 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001012:	201d      	movs	r0, #29
 8001014:	f000 fdfd 	bl	8001c12 <HAL_NVIC_EnableIRQ>
}
 8001018:	e073      	b.n	8001102 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM4)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a3f      	ldr	r2, [pc, #252]	; (800111c <HAL_TIM_Encoder_MspInit+0x240>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d135      	bne.n	8001090 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	4b38      	ldr	r3, [pc, #224]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a37      	ldr	r2, [pc, #220]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b35      	ldr	r3, [pc, #212]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a30      	ldr	r2, [pc, #192]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800105c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800106e:	2302      	movs	r3, #2
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001076:	4619      	mov	r1, r3
 8001078:	4829      	ldr	r0, [pc, #164]	; (8001120 <HAL_TIM_Encoder_MspInit+0x244>)
 800107a:	f000 fe77 	bl	8001d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	201e      	movs	r0, #30
 8001084:	f000 fda9 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001088:	201e      	movs	r0, #30
 800108a:	f000 fdc2 	bl	8001c12 <HAL_NVIC_EnableIRQ>
}
 800108e:	e038      	b.n	8001102 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM5)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a23      	ldr	r2, [pc, #140]	; (8001124 <HAL_TIM_Encoder_MspInit+0x248>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d133      	bne.n	8001102 <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a1a      	ldr	r2, [pc, #104]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_TIM_Encoder_MspInit+0x230>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010d2:	2303      	movs	r3, #3
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010e2:	2302      	movs	r3, #2
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <HAL_TIM_Encoder_MspInit+0x234>)
 80010ee:	f000 fe3d 	bl	8001d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2032      	movs	r0, #50	; 0x32
 80010f8:	f000 fd6f 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010fc:	2032      	movs	r0, #50	; 0x32
 80010fe:	f000 fd88 	bl	8001c12 <HAL_NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3740      	adds	r7, #64	; 0x40
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40000400 	.word	0x40000400
 800111c:	40000800 	.word	0x40000800
 8001120:	40020c00 	.word	0x40020c00
 8001124:	40000c00 	.word	0x40000c00

08001128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <HAL_TIM_MspPostInit+0x68>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d11e      	bne.n	8001188 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_TIM_MspPostInit+0x6c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_TIM_MspPostInit+0x6c>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_TIM_MspPostInit+0x6c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001166:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800116a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001178:	2301      	movs	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_TIM_MspPostInit+0x70>)
 8001184:	f000 fdf2 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40010000 	.word	0x40010000
 8001194:	40023800 	.word	0x40023800
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a36      	ldr	r2, [pc, #216]	; (8001294 <HAL_UART_MspInit+0xf8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12d      	bne.n	800121a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <HAL_UART_MspInit+0xfc>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_UART_MspInit+0xfc>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_UART_MspInit+0xfc>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <HAL_UART_MspInit+0xfc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <HAL_UART_MspInit+0xfc>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <HAL_UART_MspInit+0xfc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001208:	2307      	movs	r3, #7
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4822      	ldr	r0, [pc, #136]	; (800129c <HAL_UART_MspInit+0x100>)
 8001214:	f000 fdaa 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001218:	e038      	b.n	800128c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <HAL_UART_MspInit+0x104>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d133      	bne.n	800128c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_UART_MspInit+0xfc>)
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <HAL_UART_MspInit+0xfc>)
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	6453      	str	r3, [r2, #68]	; 0x44
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_UART_MspInit+0xfc>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_UART_MspInit+0xfc>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <HAL_UART_MspInit+0xfc>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6313      	str	r3, [r2, #48]	; 0x30
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_MspInit+0xfc>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125c:	23c0      	movs	r3, #192	; 0xc0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800126c:	2308      	movs	r3, #8
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_UART_MspInit+0x108>)
 8001278:	f000 fd78 	bl	8001d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2047      	movs	r0, #71	; 0x47
 8001282:	f000 fcaa 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001286:	2047      	movs	r0, #71	; 0x47
 8001288:	f000 fcc3 	bl	8001c12 <HAL_NVIC_EnableIRQ>
}
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004800 	.word	0x40004800
 8001298:	40023800 	.word	0x40023800
 800129c:	40020c00 	.word	0x40020c00
 80012a0:	40011400 	.word	0x40011400
 80012a4:	40020800 	.word	0x40020800

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <SysTick_Handler+0x30>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <SysTick_Handler+0x30>)
 80012fe:	6013      	str	r3, [r2, #0]
	int sampling_time=100; //100ms
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	607b      	str	r3, [r7, #4]
	if(indx==sampling_time){
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SysTick_Handler+0x30>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d102      	bne.n	8001314 <SysTick_Handler+0x24>
		//vel_ang_FL=((wheel_FL_ang_pos-old_FL_ang_pos)/(sampling_time/1000));
		//old_FL_ang_pos=wheel_FL_ang_pos;

		//speed=((position-oldpos)/(sampling_time/1000));
		//oldpos=position;
		indx=0;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Handler+0x30>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f8d0 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200003ac 	.word	0x200003ac

08001324 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <TIM2_IRQHandler+0x10>)
 800132a:	f003 fd6b 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200001bc 	.word	0x200001bc

08001338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <TIM3_IRQHandler+0x10>)
 800133e:	f003 fd61 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000204 	.word	0x20000204

0800134c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <TIM4_IRQHandler+0x10>)
 8001352:	f003 fd57 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000024c 	.word	0x2000024c

08001360 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <TIM5_IRQHandler+0x10>)
 8001366:	f003 fd4d 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000294 	.word	0x20000294

08001374 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <OTG_FS_IRQHandler+0x10>)
 800137a:	f000 fffb 	bl	8002374 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20001894 	.word	0x20001894

08001388 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <USART6_IRQHandler+0x10>)
 800138e:	f004 fc33 	bl	8005bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000320 	.word	0x20000320

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c6:	490e      	ldr	r1, [pc, #56]	; (8001400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013dc:	4c0b      	ldr	r4, [pc, #44]	; (800140c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ea:	f7ff ffd7 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ee:	f009 fcb7 	bl	800ad60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f2:	f7ff f8b5 	bl	8000560 <main>
  bx  lr    
 80013f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001404:	0800aebc 	.word	0x0800aebc
  ldr r2, =_sbss
 8001408:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800140c:	20001fc0 	.word	0x20001fc0

08001410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <HAL_Init+0x40>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_Init+0x40>)
 800142a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_Init+0x40>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 fbc1 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001442:	2000      	movs	r0, #0
 8001444:	f000 f808 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001448:	f7ff fcba 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c00 	.word	0x40023c00

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x54>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x58>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fbd9 	bl	8001c2e <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001494:	f000 fba1 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_InitTick+0x5c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000004 	.word	0x20000004
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	200003b0 	.word	0x200003b0

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200003b0 	.word	0x200003b0

080014f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000000c 	.word	0x2000000c

08001540 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e033      	b.n	80015be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fc56 	bl	8000e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	d118      	bne.n	80015b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001586:	f023 0302 	bic.w	r3, r3, #2
 800158a:	f043 0202 	orr.w	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f94a 	bl	800182c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f023 0303 	bic.w	r3, r3, #3
 80015a6:	f043 0201 	orr.w	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
 80015ae:	e001      	b.n	80015b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1c>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e113      	b.n	800180c <HAL_ADC_ConfigChannel+0x244>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b09      	cmp	r3, #9
 80015f2:	d925      	bls.n	8001640 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68d9      	ldr	r1, [r3, #12]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	3b1e      	subs	r3, #30
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43da      	mvns	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	400a      	ands	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68d9      	ldr	r1, [r3, #12]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	4603      	mov	r3, r0
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4403      	add	r3, r0
 8001632:	3b1e      	subs	r3, #30
 8001634:	409a      	lsls	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	e022      	b.n	8001686 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	2207      	movs	r2, #7
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	400a      	ands	r2, r1
 8001662:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	4603      	mov	r3, r0
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4403      	add	r3, r0
 800167c:	409a      	lsls	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b06      	cmp	r3, #6
 800168c:	d824      	bhi.n	80016d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b05      	subs	r3, #5
 80016a0:	221f      	movs	r2, #31
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b05      	subs	r3, #5
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
 80016d6:	e04c      	b.n	8001772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d824      	bhi.n	800172a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b23      	subs	r3, #35	; 0x23
 80016f2:	221f      	movs	r2, #31
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43da      	mvns	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	400a      	ands	r2, r1
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b23      	subs	r3, #35	; 0x23
 800171c:	fa00 f203 	lsl.w	r2, r0, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	631a      	str	r2, [r3, #48]	; 0x30
 8001728:	e023      	b.n	8001772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b41      	subs	r3, #65	; 0x41
 800173c:	221f      	movs	r2, #31
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	400a      	ands	r2, r1
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b41      	subs	r3, #65	; 0x41
 8001766:	fa00 f203 	lsl.w	r2, r0, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_ADC_ConfigChannel+0x250>)
 8001774:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a28      	ldr	r2, [pc, #160]	; (800181c <HAL_ADC_ConfigChannel+0x254>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d10f      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1d8>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b12      	cmp	r3, #18
 8001786:	d10b      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_ADC_ConfigChannel+0x254>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12b      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23a>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <HAL_ADC_ConfigChannel+0x258>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d003      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x1f4>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b11      	cmp	r3, #17
 80017ba:	d122      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_ADC_ConfigChannel+0x258>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d111      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_ADC_ConfigChannel+0x25c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <HAL_ADC_ConfigChannel+0x260>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9a      	lsrs	r2, r3, #18
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40012300 	.word	0x40012300
 800181c:	40012000 	.word	0x40012000
 8001820:	10000012 	.word	0x10000012
 8001824:	20000004 	.word	0x20000004
 8001828:	431bde83 	.word	0x431bde83

0800182c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001834:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <ADC_Init+0x1f0>)
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	431a      	orrs	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	021a      	lsls	r2, r3, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <ADC_Init+0x1f4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d022      	beq.n	800190a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e00f      	b.n	800192a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001928:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0202 	bic.w	r2, r2, #2
 8001938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6899      	ldr	r1, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7e1b      	ldrb	r3, [r3, #24]
 8001944:	005a      	lsls	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01b      	beq.n	8001990 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001966:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001976:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	3b01      	subs	r3, #1
 8001984:	035a      	lsls	r2, r3, #13
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e007      	b.n	80019a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	051a      	lsls	r2, r3, #20
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e2:	025a      	lsls	r2, r3, #9
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6899      	ldr	r1, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	029a      	lsls	r2, r3, #10
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	0f000001 	.word	0x0f000001

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <__NVIC_EnableIRQ+0x38>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba4:	f7ff ff8e 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff29 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff3e 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff8e 	bl	8001b18 <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5d 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff31 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff fc44 	bl	80014e0 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d008      	beq.n	8001c78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e052      	b.n	8001d1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0216 	bic.w	r2, r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <HAL_DMA_Abort+0x62>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0208 	bic.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc8:	e013      	b.n	8001cf2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cca:	f7ff fc09 	bl	80014e0 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d90c      	bls.n	8001cf2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e015      	b.n	8001d1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e4      	bne.n	8001cca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	223f      	movs	r2, #63	; 0x3f
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d004      	beq.n	8001d44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e00c      	b.n	8001d5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2205      	movs	r2, #5
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	e165      	b.n	8002054 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8154 	bne.w	800204e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d005      	beq.n	8001dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d130      	bne.n	8001e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 0201 	and.w	r2, r3, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d017      	beq.n	8001e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d123      	bne.n	8001eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80ae 	beq.w	800204e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_GPIO_Init+0x300>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_GPIO_Init+0x300>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b5a      	ldr	r3, [pc, #360]	; (800206c <HAL_GPIO_Init+0x300>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0e:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_GPIO_Init+0x304>)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4f      	ldr	r2, [pc, #316]	; (8002074 <HAL_GPIO_Init+0x308>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d025      	beq.n	8001f86 <HAL_GPIO_Init+0x21a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4e      	ldr	r2, [pc, #312]	; (8002078 <HAL_GPIO_Init+0x30c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x216>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	; (800207c <HAL_GPIO_Init+0x310>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x212>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_GPIO_Init+0x314>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x20e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	; (8002084 <HAL_GPIO_Init+0x318>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x20a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4a      	ldr	r2, [pc, #296]	; (8002088 <HAL_GPIO_Init+0x31c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a49      	ldr	r2, [pc, #292]	; (800208c <HAL_GPIO_Init+0x320>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x202>
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	e00c      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f86:	2300      	movs	r3, #0
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f002 0203 	and.w	r2, r2, #3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f98:	4935      	ldr	r1, [pc, #212]	; (8002070 <HAL_GPIO_Init+0x304>)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_GPIO_Init+0x324>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <HAL_GPIO_Init+0x324>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x324>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff4:	4a26      	ldr	r2, [pc, #152]	; (8002090 <HAL_GPIO_Init+0x324>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffa:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_GPIO_Init+0x324>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <HAL_GPIO_Init+0x324>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_GPIO_Init+0x324>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002048:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_GPIO_Init+0x324>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	f67f ae96 	bls.w	8001d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40013800 	.word	0x40013800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800
 8002080:	40020c00 	.word	0x40020c00
 8002084:	40021000 	.word	0x40021000
 8002088:	40021400 	.word	0x40021400
 800208c:	40021800 	.word	0x40021800
 8002090:	40013c00 	.word	0x40013c00

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c8:	b08f      	sub	sp, #60	; 0x3c
 80020ca:	af0a      	add	r7, sp, #40	; 0x28
 80020cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e116      	b.n	8002306 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f008 faae 	bl	800a654 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2203      	movs	r2, #3
 80020fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fd49 	bl	8006bae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	687e      	ldr	r6, [r7, #4]
 8002124:	466d      	mov	r5, sp
 8002126:	f106 0410 	add.w	r4, r6, #16
 800212a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002136:	e885 0003 	stmia.w	r5, {r0, r1}
 800213a:	1d33      	adds	r3, r6, #4
 800213c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213e:	6838      	ldr	r0, [r7, #0]
 8002140:	f004 fc20 	bl	8006984 <USB_CoreInit>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2202      	movs	r2, #2
 800214e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0d7      	b.n	8002306 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f004 fd37 	bl	8006bd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e04a      	b.n	80021fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	333d      	adds	r3, #61	; 0x3d
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	333c      	adds	r3, #60	; 0x3c
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	b298      	uxth	r0, r3
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	3344      	adds	r3, #68	; 0x44
 80021a4:	4602      	mov	r2, r0
 80021a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3340      	adds	r3, #64	; 0x40
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3348      	adds	r3, #72	; 0x48
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	334c      	adds	r3, #76	; 0x4c
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3354      	adds	r3, #84	; 0x54
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	3301      	adds	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	d3af      	bcc.n	8002168 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e044      	b.n	8002298 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	3301      	adds	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3b5      	bcc.n	800220e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	687e      	ldr	r6, [r7, #4]
 80022aa:	466d      	mov	r5, sp
 80022ac:	f106 0410 	add.w	r4, r6, #16
 80022b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c0:	1d33      	adds	r3, r6, #4
 80022c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c4:	6838      	ldr	r0, [r7, #0]
 80022c6:	f004 fccf 	bl	8006c68 <USB_DevInit>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e014      	b.n	8002306 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d102      	bne.n	80022fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f001 f98b 	bl	8003610 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f005 fe11 	bl	8007f26 <USB_DevDisconnect>

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800230e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_Start+0x1c>
 8002326:	2302      	movs	r3, #2
 8002328:	e020      	b.n	800236c <HAL_PCD_Start+0x5e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	2b01      	cmp	r3, #1
 8002338:	d109      	bne.n	800234e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800233e:	2b01      	cmp	r3, #1
 8002340:	d005      	beq.n	800234e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f004 fc1a 	bl	8006b8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f005 fdc1 	bl	8007ee4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b08d      	sub	sp, #52	; 0x34
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f005 fe7f 	bl	800808e <USB_GetMode>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 84b7 	bne.w	8002d06 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f005 fde3 	bl	8007f68 <USB_ReadInterrupts>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 84ad 	beq.w	8002d04 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f005 fdd0 	bl	8007f68 <USB_ReadInterrupts>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d107      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f002 0202 	and.w	r2, r2, #2
 80023e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 fdbe 	bl	8007f68 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d161      	bne.n	80024ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0210 	bic.w	r2, r2, #16
 8002404:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	3304      	adds	r3, #4
 8002424:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	0c5b      	lsrs	r3, r3, #17
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	2b02      	cmp	r3, #2
 8002430:	d124      	bne.n	800247c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d035      	beq.n	80024aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	6a38      	ldr	r0, [r7, #32]
 8002452:	f005 fbf5 	bl	8007c40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002462:	441a      	add	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002474:	441a      	add	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	621a      	str	r2, [r3, #32]
 800247a:	e016      	b.n	80024aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	0c5b      	lsrs	r3, r3, #17
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	2b06      	cmp	r3, #6
 8002486:	d110      	bne.n	80024aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800248e:	2208      	movs	r2, #8
 8002490:	4619      	mov	r1, r3
 8002492:	6a38      	ldr	r0, [r7, #32]
 8002494:	f005 fbd4 	bl	8007c40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a4:	441a      	add	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0210 	orr.w	r2, r2, #16
 80024b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f005 fd52 	bl	8007f68 <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024ce:	f040 80a7 	bne.w	8002620 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 fd57 	bl	8007f8e <USB_ReadDevAllOutEpInterrupt>
 80024e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024e2:	e099      	b.n	8002618 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 808e 	beq.w	800260c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f005 fd7b 	bl	8007ff6 <USB_ReadDevOutEPInterrupt>
 8002500:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	2301      	movs	r3, #1
 800251c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800251e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 feef 	bl	8003304 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00c      	beq.n	800254a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253c:	461a      	mov	r2, r3
 800253e:	2308      	movs	r3, #8
 8002540:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 ffc5 	bl	80034d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002560:	461a      	mov	r2, r3
 8002562:	2310      	movs	r3, #16
 8002564:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d030      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d109      	bne.n	8002590 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	3304      	adds	r3, #4
 80025a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	78db      	ldrb	r3, [r3, #3]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2200      	movs	r2, #0
 80025b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f008 f974 	bl	800a8a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025cc:	461a      	mov	r2, r3
 80025ce:	2302      	movs	r3, #2
 80025d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e8:	461a      	mov	r2, r3
 80025ea:	2320      	movs	r3, #32
 80025ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002604:	461a      	mov	r2, r3
 8002606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	3301      	adds	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	f47f af62 	bne.w	80024e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f005 fc9f 	bl	8007f68 <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002634:	f040 80db 	bne.w	80027ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f005 fcc0 	bl	8007fc2 <USB_ReadDevAllInEpInterrupt>
 8002642:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002648:	e0cd      	b.n	80027e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80c2 	beq.w	80027da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f005 fce6 	bl	8008032 <USB_ReadDevInEPInterrupt>
 8002666:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d057      	beq.n	8002722 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	2201      	movs	r2, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	69f9      	ldr	r1, [r7, #28]
 800268e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002692:	4013      	ands	r3, r2
 8002694:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a2:	461a      	mov	r2, r3
 80026a4:	2301      	movs	r3, #1
 80026a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d132      	bne.n	8002716 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334c      	adds	r3, #76	; 0x4c
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4403      	add	r3, r0
 80026d0:	3348      	adds	r3, #72	; 0x48
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4419      	add	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4403      	add	r3, r0
 80026e4:	334c      	adds	r3, #76	; 0x4c
 80026e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d113      	bne.n	8002716 <HAL_PCD_IRQHandler+0x3a2>
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3354      	adds	r3, #84	; 0x54
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d108      	bne.n	8002716 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800270e:	461a      	mov	r2, r3
 8002710:	2101      	movs	r1, #1
 8002712:	f005 fced 	bl	80080f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f008 f83e 	bl	800a79e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002738:	461a      	mov	r2, r3
 800273a:	2308      	movs	r3, #8
 800273c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002754:	461a      	mov	r2, r3
 8002756:	2310      	movs	r3, #16
 8002758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002770:	461a      	mov	r2, r3
 8002772:	2340      	movs	r3, #64	; 0x40
 8002774:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d023      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002782:	6a38      	ldr	r0, [r7, #32]
 8002784:	f004 fbce 	bl	8006f24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	3338      	adds	r3, #56	; 0x38
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	3304      	adds	r3, #4
 800279a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	78db      	ldrb	r3, [r3, #3]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d108      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2200      	movs	r2, #0
 80027a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4619      	mov	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f008 f88b 	bl	800a8cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c2:	461a      	mov	r2, r3
 80027c4:	2302      	movs	r3, #2
 80027c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fd08 	bl	80031ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f47f af2e 	bne.w	800264a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f005 fbb8 	bl	8007f68 <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002802:	d122      	bne.n	800284a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800281e:	2b01      	cmp	r3, #1
 8002820:	d108      	bne.n	8002834 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800282a:	2100      	movs	r1, #0
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f008 fa05 	bl	800ac3c <HAL_PCDEx_LPM_Callback>
 8002832:	e002      	b.n	800283a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f008 f829 	bl	800a88c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f005 fb8a 	bl	8007f68 <USB_ReadInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800285e:	d112      	bne.n	8002886 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f007 ffe5 	bl	800a840 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002884:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f005 fb6c 	bl	8007f68 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800289a:	d121      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80028aa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d111      	bne.n	80028da <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	f003 020f 	and.w	r2, r3, #15
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80028d0:	2101      	movs	r1, #1
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f008 f9b2 	bl	800ac3c <HAL_PCDEx_LPM_Callback>
 80028d8:	e002      	b.n	80028e0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f007 ffb0 	bl	800a840 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f005 fb3f 	bl	8007f68 <USB_ReadInterrupts>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f4:	f040 80b7 	bne.w	8002a66 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2110      	movs	r1, #16
 8002912:	4618      	mov	r0, r3
 8002914:	f004 fb06 	bl	8006f24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291c:	e046      	b.n	80029ac <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292a:	461a      	mov	r2, r3
 800292c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002930:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002942:	0151      	lsls	r1, r2, #5
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	440a      	add	r2, r1
 8002948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800294c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002950:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295e:	461a      	mov	r2, r3
 8002960:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002964:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002976:	0151      	lsls	r1, r2, #5
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	440a      	add	r2, r1
 800297c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002984:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002996:	0151      	lsls	r1, r2, #5
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	440a      	add	r2, r1
 800299c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	3301      	adds	r3, #1
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d3b3      	bcc.n	800291e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f043 030b 	orr.w	r3, r3, #11
 80029e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f8:	f043 030b 	orr.w	r3, r3, #11
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	e015      	b.n	8002a2c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a26:	f043 030b 	orr.w	r3, r3, #11
 8002a2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a50:	461a      	mov	r2, r3
 8002a52:	f005 fb4d 	bl	80080f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f005 fa7c 	bl	8007f68 <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7a:	d124      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 fb12 	bl	80080aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 fac7 	bl	800701e <USB_GetDevSpeed>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681c      	ldr	r4, [r3, #0]
 8002a9c:	f000 fec2 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f003 ffcc 	bl	8006a48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f007 fe9c 	bl	800a7ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f005 fa4c 	bl	8007f68 <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d10a      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f007 fe79 	bl	800a7d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f002 0208 	and.w	r2, r2, #8
 8002aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f005 fa37 	bl	8007f68 <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d122      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b10:	2301      	movs	r3, #1
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	e014      	b.n	8002b40 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb27 	bl	8003188 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3e5      	bcc.n	8002b16 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f005 fa0a 	bl	8007f68 <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b5e:	d13b      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	e02b      	b.n	8002bbe <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	3340      	adds	r3, #64	; 0x40
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d115      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	da12      	bge.n	8002bb8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	333f      	adds	r3, #63	; 0x3f
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fae8 	bl	8003188 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	3301      	adds	r3, #1
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3ce      	bcc.n	8002b66 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f005 f9c3 	bl	8007f68 <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bec:	d155      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bee:	2301      	movs	r3, #1
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	e045      	b.n	8002c80 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d12e      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	da2b      	bge.n	8002c7a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d121      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c76:	6053      	str	r3, [r2, #4]
            break;
 8002c78:	e007      	b.n	8002c8a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d3b4      	bcc.n	8002bf4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f005 f962 	bl	8007f68 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d10a      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f007 fe1d 	bl	800a8f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f005 f94c 	bl	8007f68 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d115      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f007 fe0d 	bl	800a90c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	e000      	b.n	8002d06 <HAL_PCD_IRQHandler+0x992>
      return;
 8002d04:	bf00      	nop
    }
  }
}
 8002d06:	3734      	adds	r7, #52	; 0x34
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}

08002d0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_PCD_SetAddress+0x1a>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e013      	b.n	8002d4e <HAL_PCD_SetAddress+0x42>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f005 f8aa 	bl	8007e98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	4608      	mov	r0, r1
 8002d60:	4611      	mov	r1, r2
 8002d62:	461a      	mov	r2, r3
 8002d64:	4603      	mov	r3, r0
 8002d66:	70fb      	strb	r3, [r7, #3]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	803b      	strh	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da0f      	bge.n	8002d9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 020f 	and.w	r2, r3, #15
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	3338      	adds	r3, #56	; 0x38
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	705a      	strb	r2, [r3, #1]
 8002d9a:	e00f      	b.n	8002dbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	3304      	adds	r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dc8:	883a      	ldrh	r2, [r7, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	78ba      	ldrb	r2, [r7, #2]
 8002dd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002de6:	78bb      	ldrb	r3, [r7, #2]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_PCD_EP_Open+0xaa>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e00e      	b.n	8002e1e <HAL_PCD_EP_Open+0xc8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 f92a 	bl	8007068 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da0f      	bge.n	8002e5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	3338      	adds	r3, #56	; 0x38
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	705a      	strb	r2, [r3, #1]
 8002e58:	e00f      	b.n	8002e7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	3304      	adds	r3, #4
 8002e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_PCD_EP_Close+0x6e>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e00e      	b.n	8002eb2 <HAL_PCD_EP_Close+0x8c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f004 f968 	bl	8007178 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eca:	7afb      	ldrb	r3, [r7, #11]
 8002ecc:	f003 020f 	and.w	r2, r3, #15
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f16:	7afb      	ldrb	r3, [r7, #11]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6979      	ldr	r1, [r7, #20]
 8002f2e:	f004 fc47 	bl	80077c0 <USB_EP0StartXfer>
 8002f32:	e008      	b.n	8002f46 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6979      	ldr	r1, [r7, #20]
 8002f42:	f004 f9f5 	bl	8007330 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	7afb      	ldrb	r3, [r7, #11]
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	3338      	adds	r3, #56	; 0x38
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fda:	7afb      	ldrb	r3, [r7, #11]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6979      	ldr	r1, [r7, #20]
 8002ff2:	f004 fbe5 	bl	80077c0 <USB_EP0StartXfer>
 8002ff6:	e008      	b.n	800300a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	f004 f993 	bl	8007330 <USB_EPStartXfer>
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 020f 	and.w	r2, r3, #15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	429a      	cmp	r2, r3
 800302c:	d901      	bls.n	8003032 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e050      	b.n	80030d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003036:	2b00      	cmp	r3, #0
 8003038:	da0f      	bge.n	800305a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 020f 	and.w	r2, r3, #15
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3338      	adds	r3, #56	; 0x38
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	3304      	adds	r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	705a      	strb	r2, [r3, #1]
 8003058:	e00d      	b.n	8003076 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_PCD_EP_SetStall+0x82>
 8003092:	2302      	movs	r3, #2
 8003094:	e01e      	b.n	80030d4 <HAL_PCD_EP_SetStall+0xc0>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fe23 	bl	8007cf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	b2d9      	uxtb	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030c4:	461a      	mov	r2, r3
 80030c6:	f005 f813 	bl	80080f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 020f 	and.w	r2, r3, #15
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d901      	bls.n	80030fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e042      	b.n	8003180 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da0f      	bge.n	8003122 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	3338      	adds	r3, #56	; 0x38
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	705a      	strb	r2, [r3, #1]
 8003120:	e00f      	b.n	8003142 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_PCD_EP_ClrStall+0x86>
 800315e:	2302      	movs	r3, #2
 8003160:	e00e      	b.n	8003180 <HAL_PCD_EP_ClrStall+0xa4>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68f9      	ldr	r1, [r7, #12]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 fe2b 	bl	8007dcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003198:	2b00      	cmp	r3, #0
 800319a:	da0c      	bge.n	80031b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 020f 	and.w	r2, r3, #15
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	3338      	adds	r3, #56	; 0x38
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	3304      	adds	r3, #4
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e00c      	b.n	80031d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 020f 	and.w	r2, r3, #15
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	3304      	adds	r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68f9      	ldr	r1, [r7, #12]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 fc4a 	bl	8007a70 <USB_EPStopXfer>
 80031dc:	4603      	mov	r3, r0
 80031de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80031e0:	7afb      	ldrb	r3, [r7, #11]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b08a      	sub	sp, #40	; 0x28
 80031ee:	af02      	add	r7, sp, #8
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	3338      	adds	r3, #56	; 0x38
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	429a      	cmp	r2, r3
 800321c:	d901      	bls.n	8003222 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e06c      	b.n	80032fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	429a      	cmp	r2, r3
 8003236:	d902      	bls.n	800323e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3303      	adds	r3, #3
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003246:	e02b      	b.n	80032a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	429a      	cmp	r2, r3
 800325c:	d902      	bls.n	8003264 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3303      	adds	r3, #3
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6919      	ldr	r1, [r3, #16]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800327c:	b2db      	uxtb	r3, r3
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4603      	mov	r3, r0
 8003282:	6978      	ldr	r0, [r7, #20]
 8003284:	f004 fc9e 	bl	8007bc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	441a      	add	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	441a      	add	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d809      	bhi.n	80032ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032be:	429a      	cmp	r2, r3
 80032c0:	d203      	bcs.n	80032ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1be      	bne.n	8003248 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d811      	bhi.n	80032fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	2201      	movs	r2, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	6939      	ldr	r1, [r7, #16]
 80032f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032f6:	4013      	ands	r3, r2
 80032f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	333c      	adds	r3, #60	; 0x3c
 800331c:	3304      	adds	r3, #4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d17b      	bne.n	8003432 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4a61      	ldr	r2, [pc, #388]	; (80034cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	f240 80b9 	bls.w	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80b3 	beq.w	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	461a      	mov	r2, r3
 8003368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336c:	6093      	str	r3, [r2, #8]
 800336e:	e0a7      	b.n	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003386:	461a      	mov	r2, r3
 8003388:	2320      	movs	r3, #32
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	e098      	b.n	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 8093 	bne.w	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d90f      	bls.n	80033c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033be:	6093      	str	r3, [r2, #8]
 80033c0:	e07e      	b.n	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	0159      	lsls	r1, r3, #5
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	440b      	add	r3, r1
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	1ad2      	subs	r2, r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d114      	bne.n	8003424 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800340c:	461a      	mov	r2, r3
 800340e:	2101      	movs	r1, #1
 8003410:	f004 fe6e 	bl	80080f0 <USB_EP0_OutStart>
 8003414:	e006      	b.n	8003424 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	441a      	add	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f007 f99c 	bl	800a768 <HAL_PCD_DataOutStageCallback>
 8003430:	e046      	b.n	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d124      	bne.n	8003484 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003450:	461a      	mov	r2, r3
 8003452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003456:	6093      	str	r3, [r2, #8]
 8003458:	e032      	b.n	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003470:	461a      	mov	r2, r3
 8003472:	2320      	movs	r3, #32
 8003474:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f007 f973 	bl	800a768 <HAL_PCD_DataOutStageCallback>
 8003482:	e01d      	b.n	80034c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d114      	bne.n	80034b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034ac:	461a      	mov	r2, r3
 80034ae:	2100      	movs	r1, #0
 80034b0:	f004 fe1e 	bl	80080f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f007 f954 	bl	800a768 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	4f54300a 	.word	0x4f54300a
 80034d0:	4f54310a 	.word	0x4f54310a

080034d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	333c      	adds	r3, #60	; 0x3c
 80034ec:	3304      	adds	r3, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <PCD_EP_OutSetupPacket_int+0x88>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d90e      	bls.n	8003528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	461a      	mov	r2, r3
 8003522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f007 f90b 	bl	800a744 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a0a      	ldr	r2, [pc, #40]	; (800355c <PCD_EP_OutSetupPacket_int+0x88>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d90c      	bls.n	8003550 <PCD_EP_OutSetupPacket_int+0x7c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d108      	bne.n	8003550 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003548:	461a      	mov	r2, r3
 800354a:	2101      	movs	r1, #1
 800354c:	f004 fdd0 	bl	80080f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	4f54300a 	.word	0x4f54300a

08003560 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
 800356c:	4613      	mov	r3, r2
 800356e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800357e:	883b      	ldrh	r3, [r7, #0]
 8003580:	0419      	lsls	r1, r3, #16
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	430a      	orrs	r2, r1
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
 800358c:	e028      	b.n	80035e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	4413      	add	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
 80035a0:	e00d      	b.n	80035be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	3340      	adds	r3, #64	; 0x40
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	4413      	add	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	3301      	adds	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d3ec      	bcc.n	80035a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035c8:	883b      	ldrh	r3, [r7, #0]
 80035ca:	0418      	lsls	r0, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6819      	ldr	r1, [r3, #0]
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	4302      	orrs	r2, r0
 80035d8:	3340      	adds	r3, #64	; 0x40
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003642:	f043 0303 	orr.w	r3, r3, #3
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0cc      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800366c:	4b68      	ldr	r3, [pc, #416]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d90c      	bls.n	8003694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b65      	ldr	r3, [pc, #404]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b63      	ldr	r3, [pc, #396]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0b8      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ac:	4b59      	ldr	r3, [pc, #356]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a58      	ldr	r2, [pc, #352]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c4:	4b53      	ldr	r3, [pc, #332]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a52      	ldr	r2, [pc, #328]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b50      	ldr	r3, [pc, #320]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	494d      	ldr	r1, [pc, #308]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d044      	beq.n	8003778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d119      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e07f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d003      	beq.n	8003716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003712:	2b03      	cmp	r3, #3
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003716:	4b3f      	ldr	r3, [pc, #252]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e06f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e067      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4b37      	ldr	r3, [pc, #220]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4934      	ldr	r1, [pc, #208]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003748:	f7fd feca 	bl	80014e0 <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fd fec6 	bl	80014e0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e04f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d20c      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e032      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4916      	ldr	r1, [pc, #88]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037de:	f000 fb7f 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	490a      	ldr	r1, [pc, #40]	; (8003818 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	5ccb      	ldrb	r3, [r1, r3]
 80037f2:	fa22 f303 	lsr.w	r3, r2, r3
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fe2a 	bl	8001458 <HAL_InitTick>

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023c00 	.word	0x40023c00
 8003814:	40023800 	.word	0x40023800
 8003818:	0800ae94 	.word	0x0800ae94
 800381c:	20000004 	.word	0x20000004
 8003820:	20000008 	.word	0x20000008

08003824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <HAL_RCC_GetHCLKFreq+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000004 	.word	0x20000004

0800383c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003840:	f7ff fff0 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0a9b      	lsrs	r3, r3, #10
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4903      	ldr	r1, [pc, #12]	; (8003860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	0800aea4 	.word	0x0800aea4

08003864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003868:	f7ff ffdc 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0b5b      	lsrs	r3, r3, #13
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4903      	ldr	r1, [pc, #12]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	0800aea4 	.word	0x0800aea4

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80038c4:	4b6f      	ldr	r3, [pc, #444]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	496c      	ldr	r1, [pc, #432]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80038e2:	2301      	movs	r3, #1
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d010      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80038f2:	4b64      	ldr	r3, [pc, #400]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	4960      	ldr	r1, [pc, #384]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003910:	2301      	movs	r3, #1
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003920:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003926:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4955      	ldr	r1, [pc, #340]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393e:	d101      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003940:	2301      	movs	r3, #1
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800394c:	2301      	movs	r3, #1
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d017      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800395e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003962:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	4946      	ldr	r1, [pc, #280]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397a:	d101      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800397c:	2301      	movs	r3, #1
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003988:	2301      	movs	r3, #1
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 808a 	beq.w	8003aae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a33      	ldr	r2, [pc, #204]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039c2:	f7fd fd8d 	bl	80014e0 <HAL_GetTick>
 80039c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fd fd89 	bl	80014e0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e278      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02f      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d028      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d114      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a2e:	f7fd fd57 	bl	80014e0 <HAL_GetTick>
 8003a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fd fd53 	bl	80014e0 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e240      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a64:	d114      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	4902      	ldr	r1, [pc, #8]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]
 8003a80:	e00c      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	42470e40 	.word	0x42470e40
 8003a90:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a49      	ldr	r2, [pc, #292]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a9a:	6093      	str	r3, [r2, #8]
 8003a9c:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	4944      	ldr	r1, [pc, #272]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003ac0:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003ac2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003ad0:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	4937      	ldr	r1, [pc, #220]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003af2:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	492e      	ldr	r1, [pc, #184]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b14:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b1a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	4926      	ldr	r1, [pc, #152]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b32:	d101      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003b34:	2301      	movs	r3, #1
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	491a      	ldr	r1, [pc, #104]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d011      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	4911      	ldr	r1, [pc, #68]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b84:	d101      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003b86:	2301      	movs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b98:	f040 80ff 	bne.w	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba2:	f7fd fc9d 	bl	80014e0 <HAL_GetTick>
 8003ba6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ba8:	e00e      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003baa:	f7fd fc99 	bl	80014e0 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d907      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e188      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	424711e0 	.word	0x424711e0
 8003bc4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ea      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d028      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d124      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bfc:	4b71      	ldr	r3, [pc, #452]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c0e:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	431a      	orrs	r2, r3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	071b      	lsls	r3, r3, #28
 8003c3e:	4961      	ldr	r1, [pc, #388]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d035      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c70:	d130      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c72:	4b54      	ldr	r3, [pc, #336]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c84:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8a:	0f1b      	lsrs	r3, r3, #28
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	019b      	lsls	r3, r3, #6
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	071b      	lsls	r3, r3, #28
 8003cb4:	4943      	ldr	r1, [pc, #268]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cbc:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc2:	f023 021f 	bic.w	r2, r3, #31
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	493d      	ldr	r1, [pc, #244]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d029      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce8:	d124      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cea:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d02:	0f1b      	lsrs	r3, r3, #28
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	019b      	lsls	r3, r3, #6
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	431a      	orrs	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	071b      	lsls	r3, r3, #28
 8003d2c:	4925      	ldr	r1, [pc, #148]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d016      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	3b01      	subs	r3, #1
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	071b      	lsls	r3, r3, #28
 8003d66:	4917      	ldr	r1, [pc, #92]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d6e:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d74:	f7fd fbb4 	bl	80014e0 <HAL_GetTick>
 8003d78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d7c:	f7fd fbb0 	bl	80014e0 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e09f      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 8095 	bne.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003da8:	f7fd fb9a 	bl	80014e0 <HAL_GetTick>
 8003dac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dae:	e00f      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003db0:	f7fd fb96 	bl	80014e0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d908      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e085      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	42470068 	.word	0x42470068
 8003dcc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dd0:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ddc:	d0e8      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d02b      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d127      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	3301      	adds	r3, #1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	431a      	orrs	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	4928      	ldr	r1, [pc, #160]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e3c:	4b26      	ldr	r3, [pc, #152]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	4922      	ldr	r1, [pc, #136]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01d      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6a:	d118      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	0e1b      	lsrs	r3, r3, #24
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	019b      	lsls	r3, r3, #6
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	4910      	ldr	r1, [pc, #64]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fd fb1c 	bl	80014e0 <HAL_GetTick>
 8003ea8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003eac:	f7fd fb18 	bl	80014e0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e007      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eca:	d1ef      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3730      	adds	r7, #48	; 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	42470070 	.word	0x42470070

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b0ae      	sub	sp, #184	; 0xb8
 8003ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f06:	4bcb      	ldr	r3, [pc, #812]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	f200 8206 	bhi.w	8004320 <HAL_RCC_GetSysClockFreq+0x440>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f51 	.word	0x08003f51
 8003f20:	08004321 	.word	0x08004321
 8003f24:	08004321 	.word	0x08004321
 8003f28:	08004321 	.word	0x08004321
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08004321 	.word	0x08004321
 8003f34:	08004321 	.word	0x08004321
 8003f38:	08004321 	.word	0x08004321
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08004321 	.word	0x08004321
 8003f44:	08004321 	.word	0x08004321
 8003f48:	08004321 	.word	0x08004321
 8003f4c:	08004151 	.word	0x08004151
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4bb9      	ldr	r3, [pc, #740]	; (8004238 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f56:	e1e7      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f58:	4bb8      	ldr	r3, [pc, #736]	; (800423c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f5e:	e1e3      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f60:	4bb4      	ldr	r3, [pc, #720]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6c:	4bb1      	ldr	r3, [pc, #708]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d071      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f78:	4bae      	ldr	r3, [pc, #696]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	0159      	lsls	r1, r3, #5
 8003fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb0:	0150      	lsls	r0, r2, #5
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	1a51      	subs	r1, r2, r1
 8003fba:	6439      	str	r1, [r7, #64]	; 0x40
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	018b      	lsls	r3, r1, #6
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fda:	4641      	mov	r1, r8
 8003fdc:	018a      	lsls	r2, r1, #6
 8003fde:	4641      	mov	r1, r8
 8003fe0:	1a51      	subs	r1, r2, r1
 8003fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	00cb      	lsls	r3, r1, #3
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004002:	4641      	mov	r1, r8
 8004004:	00ca      	lsls	r2, r1, #3
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	4603      	mov	r3, r0
 800400c:	4622      	mov	r2, r4
 800400e:	189b      	adds	r3, r3, r2
 8004010:	633b      	str	r3, [r7, #48]	; 0x30
 8004012:	462b      	mov	r3, r5
 8004014:	460a      	mov	r2, r1
 8004016:	eb42 0303 	adc.w	r3, r2, r3
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004028:	4629      	mov	r1, r5
 800402a:	024b      	lsls	r3, r1, #9
 800402c:	4621      	mov	r1, r4
 800402e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004032:	4621      	mov	r1, r4
 8004034:	024a      	lsls	r2, r1, #9
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004044:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004048:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800404c:	f7fc f8e2 	bl	8000214 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4613      	mov	r3, r2
 8004056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800405a:	e067      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405c:	4b75      	ldr	r3, [pc, #468]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004068:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800406c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004074:	67bb      	str	r3, [r7, #120]	; 0x78
 8004076:	2300      	movs	r3, #0
 8004078:	67fb      	str	r3, [r7, #124]	; 0x7c
 800407a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800407e:	4622      	mov	r2, r4
 8004080:	462b      	mov	r3, r5
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	0159      	lsls	r1, r3, #5
 800408c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004090:	0150      	lsls	r0, r2, #5
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4621      	mov	r1, r4
 8004098:	1a51      	subs	r1, r2, r1
 800409a:	62b9      	str	r1, [r7, #40]	; 0x28
 800409c:	4629      	mov	r1, r5
 800409e:	eb63 0301 	sbc.w	r3, r3, r1
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80040b0:	4649      	mov	r1, r9
 80040b2:	018b      	lsls	r3, r1, #6
 80040b4:	4641      	mov	r1, r8
 80040b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ba:	4641      	mov	r1, r8
 80040bc:	018a      	lsls	r2, r1, #6
 80040be:	4641      	mov	r1, r8
 80040c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80040c4:	4649      	mov	r1, r9
 80040c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040de:	4692      	mov	sl, r2
 80040e0:	469b      	mov	fp, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	eb1a 0303 	adds.w	r3, sl, r3
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	462b      	mov	r3, r5
 80040ec:	eb4b 0303 	adc.w	r3, fp, r3
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040fe:	4629      	mov	r1, r5
 8004100:	028b      	lsls	r3, r1, #10
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004108:	4621      	mov	r1, r4
 800410a:	028a      	lsls	r2, r1, #10
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004114:	2200      	movs	r2, #0
 8004116:	673b      	str	r3, [r7, #112]	; 0x70
 8004118:	677a      	str	r2, [r7, #116]	; 0x74
 800411a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800411e:	f7fc f879 	bl	8000214 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4613      	mov	r3, r2
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800412c:	4b41      	ldr	r3, [pc, #260]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	3301      	adds	r3, #1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800413e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800414e:	e0eb      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004150:	4b38      	ldr	r3, [pc, #224]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800415c:	4b35      	ldr	r3, [pc, #212]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d06b      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004168:	4b32      	ldr	r3, [pc, #200]	; (8004234 <HAL_RCC_GetSysClockFreq+0x354>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	2200      	movs	r2, #0
 8004170:	66bb      	str	r3, [r7, #104]	; 0x68
 8004172:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417a:	663b      	str	r3, [r7, #96]	; 0x60
 800417c:	2300      	movs	r3, #0
 800417e:	667b      	str	r3, [r7, #100]	; 0x64
 8004180:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004184:	4622      	mov	r2, r4
 8004186:	462b      	mov	r3, r5
 8004188:	f04f 0000 	mov.w	r0, #0
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	0159      	lsls	r1, r3, #5
 8004192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004196:	0150      	lsls	r0, r2, #5
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4621      	mov	r1, r4
 800419e:	1a51      	subs	r1, r2, r1
 80041a0:	61b9      	str	r1, [r7, #24]
 80041a2:	4629      	mov	r1, r5
 80041a4:	eb63 0301 	sbc.w	r3, r3, r1
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041b6:	4659      	mov	r1, fp
 80041b8:	018b      	lsls	r3, r1, #6
 80041ba:	4651      	mov	r1, sl
 80041bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c0:	4651      	mov	r1, sl
 80041c2:	018a      	lsls	r2, r1, #6
 80041c4:	4651      	mov	r1, sl
 80041c6:	ebb2 0801 	subs.w	r8, r2, r1
 80041ca:	4659      	mov	r1, fp
 80041cc:	eb63 0901 	sbc.w	r9, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e4:	4690      	mov	r8, r2
 80041e6:	4699      	mov	r9, r3
 80041e8:	4623      	mov	r3, r4
 80041ea:	eb18 0303 	adds.w	r3, r8, r3
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	462b      	mov	r3, r5
 80041f2:	eb49 0303 	adc.w	r3, r9, r3
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004204:	4629      	mov	r1, r5
 8004206:	024b      	lsls	r3, r1, #9
 8004208:	4621      	mov	r1, r4
 800420a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800420e:	4621      	mov	r1, r4
 8004210:	024a      	lsls	r2, r1, #9
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800421a:	2200      	movs	r2, #0
 800421c:	65bb      	str	r3, [r7, #88]	; 0x58
 800421e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004220:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004224:	f7fb fff6 	bl	8000214 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4613      	mov	r3, r2
 800422e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004232:	e065      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x420>
 8004234:	40023800 	.word	0x40023800
 8004238:	00f42400 	.word	0x00f42400
 800423c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004240:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_RCC_GetSysClockFreq+0x458>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	099b      	lsrs	r3, r3, #6
 8004246:	2200      	movs	r2, #0
 8004248:	4618      	mov	r0, r3
 800424a:	4611      	mov	r1, r2
 800424c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004250:	653b      	str	r3, [r7, #80]	; 0x50
 8004252:	2300      	movs	r3, #0
 8004254:	657b      	str	r3, [r7, #84]	; 0x54
 8004256:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800425a:	4642      	mov	r2, r8
 800425c:	464b      	mov	r3, r9
 800425e:	f04f 0000 	mov.w	r0, #0
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	0159      	lsls	r1, r3, #5
 8004268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800426c:	0150      	lsls	r0, r2, #5
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4641      	mov	r1, r8
 8004274:	1a51      	subs	r1, r2, r1
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	4649      	mov	r1, r9
 800427a:	eb63 0301 	sbc.w	r3, r3, r1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800428c:	4659      	mov	r1, fp
 800428e:	018b      	lsls	r3, r1, #6
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004296:	4651      	mov	r1, sl
 8004298:	018a      	lsls	r2, r1, #6
 800429a:	4651      	mov	r1, sl
 800429c:	1a54      	subs	r4, r2, r1
 800429e:	4659      	mov	r1, fp
 80042a0:	eb63 0501 	sbc.w	r5, r3, r1
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	00eb      	lsls	r3, r5, #3
 80042ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042b2:	00e2      	lsls	r2, r4, #3
 80042b4:	4614      	mov	r4, r2
 80042b6:	461d      	mov	r5, r3
 80042b8:	4643      	mov	r3, r8
 80042ba:	18e3      	adds	r3, r4, r3
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	464b      	mov	r3, r9
 80042c0:	eb45 0303 	adc.w	r3, r5, r3
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042d2:	4629      	mov	r1, r5
 80042d4:	028b      	lsls	r3, r1, #10
 80042d6:	4621      	mov	r1, r4
 80042d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042dc:	4621      	mov	r1, r4
 80042de:	028a      	lsls	r2, r1, #10
 80042e0:	4610      	mov	r0, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042e8:	2200      	movs	r2, #0
 80042ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80042ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042f2:	f7fb ff8f 	bl	8000214 <__aeabi_uldivmod>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4613      	mov	r3, r2
 80042fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <HAL_RCC_GetSysClockFreq+0x458>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	0f1b      	lsrs	r3, r3, #28
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800430e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800431e:	e003      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004326:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004328:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800432c:	4618      	mov	r0, r3
 800432e:	37b8      	adds	r7, #184	; 0xb8
 8004330:	46bd      	mov	sp, r7
 8004332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800
 800433c:	00f42400 	.word	0x00f42400

08004340 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e28d      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8083 	beq.w	8004466 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004360:	4b94      	ldr	r3, [pc, #592]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	2b04      	cmp	r3, #4
 800436a:	d019      	beq.n	80043a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800436c:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004374:	2b08      	cmp	r3, #8
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004378:	4b8e      	ldr	r3, [pc, #568]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004384:	d00c      	beq.n	80043a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004386:	4b8b      	ldr	r3, [pc, #556]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d112      	bne.n	80043b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004392:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439e:	d10b      	bne.n	80043b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	4b84      	ldr	r3, [pc, #528]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d05b      	beq.n	8004464 <HAL_RCC_OscConfig+0x124>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d157      	bne.n	8004464 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e25a      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d106      	bne.n	80043d0 <HAL_RCC_OscConfig+0x90>
 80043c2:	4b7c      	ldr	r3, [pc, #496]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7b      	ldr	r2, [pc, #492]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e01d      	b.n	800440c <HAL_RCC_OscConfig+0xcc>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCC_OscConfig+0xb4>
 80043da:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a75      	ldr	r2, [pc, #468]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b73      	ldr	r3, [pc, #460]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a72      	ldr	r2, [pc, #456]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0xcc>
 80043f4:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6e      	ldr	r2, [pc, #440]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80043fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b6c      	ldr	r3, [pc, #432]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a6b      	ldr	r2, [pc, #428]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fd f864 	bl	80014e0 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7fd f860 	bl	80014e0 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e21f      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0xdc>
 800443a:	e014      	b.n	8004466 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd f850 	bl	80014e0 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004444:	f7fd f84c 	bl	80014e0 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e20b      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x104>
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d06f      	beq.n	8004552 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004472:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800447e:	4b4d      	ldr	r3, [pc, #308]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004486:	2b08      	cmp	r3, #8
 8004488:	d105      	bne.n	8004496 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800448a:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d11c      	bne.n	80044dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a2:	4b44      	ldr	r3, [pc, #272]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_RCC_OscConfig+0x186>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e1d3      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4937      	ldr	r1, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	e03a      	b.n	8004552 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_OscConfig+0x278>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fc fff9 	bl	80014e0 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fc fff5 	bl	80014e0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e1b4      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4925      	ldr	r1, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	e015      	b.n	8004552 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCC_OscConfig+0x278>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc ffd8 	bl	80014e0 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004534:	f7fc ffd4 	bl	80014e0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e193      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d036      	beq.n	80045cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <HAL_RCC_OscConfig+0x27c>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fc ffb8 	bl	80014e0 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004574:	f7fc ffb4 	bl	80014e0 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e173      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x234>
 8004592:	e01b      	b.n	80045cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_OscConfig+0x27c>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459a:	f7fc ffa1 	bl	80014e0 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a0:	e00e      	b.n	80045c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a2:	f7fc ff9d 	bl	80014e0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d907      	bls.n	80045c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e15c      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	42470000 	.word	0x42470000
 80045bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	4b8a      	ldr	r3, [pc, #552]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1ea      	bne.n	80045a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8097 	beq.w	8004708 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045de:	4b83      	ldr	r3, [pc, #524]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	4b7f      	ldr	r3, [pc, #508]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	4a7e      	ldr	r2, [pc, #504]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80045f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f8:	6413      	str	r3, [r2, #64]	; 0x40
 80045fa:	4b7c      	ldr	r3, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b79      	ldr	r3, [pc, #484]	; (80047f0 <HAL_RCC_OscConfig+0x4b0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d118      	bne.n	8004648 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004616:	4b76      	ldr	r3, [pc, #472]	; (80047f0 <HAL_RCC_OscConfig+0x4b0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a75      	ldr	r2, [pc, #468]	; (80047f0 <HAL_RCC_OscConfig+0x4b0>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004622:	f7fc ff5d 	bl	80014e0 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462a:	f7fc ff59 	bl	80014e0 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e118      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	4b6c      	ldr	r3, [pc, #432]	; (80047f0 <HAL_RCC_OscConfig+0x4b0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d106      	bne.n	800465e <HAL_RCC_OscConfig+0x31e>
 8004650:	4b66      	ldr	r3, [pc, #408]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	4a65      	ldr	r2, [pc, #404]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	; 0x70
 800465c:	e01c      	b.n	8004698 <HAL_RCC_OscConfig+0x358>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b05      	cmp	r3, #5
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x340>
 8004666:	4b61      	ldr	r3, [pc, #388]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a60      	ldr	r2, [pc, #384]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 800466c:	f043 0304 	orr.w	r3, r3, #4
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	4b5e      	ldr	r3, [pc, #376]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a5d      	ldr	r2, [pc, #372]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
 800467e:	e00b      	b.n	8004698 <HAL_RCC_OscConfig+0x358>
 8004680:	4b5a      	ldr	r3, [pc, #360]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a59      	ldr	r2, [pc, #356]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	4b57      	ldr	r3, [pc, #348]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a56      	ldr	r2, [pc, #344]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004692:	f023 0304 	bic.w	r3, r3, #4
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fc ff1e 	bl	80014e0 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a6:	e00a      	b.n	80046be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fc ff1a 	bl	80014e0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0d7      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046be:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ee      	beq.n	80046a8 <HAL_RCC_OscConfig+0x368>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fc ff08 	bl	80014e0 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fc ff04 	bl	80014e0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0c1      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ea:	4b40      	ldr	r3, [pc, #256]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ee      	bne.n	80046d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d105      	bne.n	8004708 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fc:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	4a3a      	ldr	r2, [pc, #232]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80ad 	beq.w	800486c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004712:	4b36      	ldr	r3, [pc, #216]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b08      	cmp	r3, #8
 800471c:	d060      	beq.n	80047e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d145      	bne.n	80047b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <HAL_RCC_OscConfig+0x4b4>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fc fed8 	bl	80014e0 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004734:	f7fc fed4 	bl	80014e0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e093      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004746:	4b29      	ldr	r3, [pc, #164]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69da      	ldr	r2, [r3, #28]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	3b01      	subs	r3, #1
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	071b      	lsls	r3, r3, #28
 800477e:	491b      	ldr	r1, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCC_OscConfig+0x4b4>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fc fea9 	bl	80014e0 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7fc fea5 	bl	80014e0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e064      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x452>
 80047b0:	e05c      	b.n	800486c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_RCC_OscConfig+0x4b4>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fc fe92 	bl	80014e0 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fc fe8e 	bl	80014e0 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e04d      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_RCC_OscConfig+0x4ac>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x480>
 80047de:	e045      	b.n	800486c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e040      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40007000 	.word	0x40007000
 80047f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047f8:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <HAL_RCC_OscConfig+0x538>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d030      	beq.n	8004868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d129      	bne.n	8004868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d122      	bne.n	8004868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800482e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004830:	4293      	cmp	r3, r2
 8004832:	d119      	bne.n	8004868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	3b01      	subs	r3, #1
 8004842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d10f      	bne.n	8004868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d107      	bne.n	8004868 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800

0800487c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e041      	b.n	8004912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc faf8 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f000 fd5c 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e041      	b.n	80049b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f839 	bl	80049b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f000 fd0d 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <HAL_TIM_PWM_Start+0x24>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e022      	b.n	8004a36 <HAL_TIM_PWM_Start+0x6a>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d109      	bne.n	8004a0a <HAL_TIM_PWM_Start+0x3e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	e015      	b.n	8004a36 <HAL_TIM_PWM_Start+0x6a>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d109      	bne.n	8004a24 <HAL_TIM_PWM_Start+0x58>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e008      	b.n	8004a36 <HAL_TIM_PWM_Start+0x6a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e07c      	b.n	8004b38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x82>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	e013      	b.n	8004a76 <HAL_TIM_PWM_Start+0xaa>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x92>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	e00b      	b.n	8004a76 <HAL_TIM_PWM_Start+0xaa>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0xa2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a6c:	e003      	b.n	8004a76 <HAL_TIM_PWM_Start+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 ff64 	bl	800594c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2d      	ldr	r2, [pc, #180]	; (8004b40 <HAL_TIM_PWM_Start+0x174>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIM_PWM_Start+0xcc>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2c      	ldr	r2, [pc, #176]	; (8004b44 <HAL_TIM_PWM_Start+0x178>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_PWM_Start+0xd0>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_PWM_Start+0xd2>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a22      	ldr	r2, [pc, #136]	; (8004b40 <HAL_TIM_PWM_Start+0x174>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x136>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d01d      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x136>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1f      	ldr	r2, [pc, #124]	; (8004b48 <HAL_TIM_PWM_Start+0x17c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d018      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x136>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <HAL_TIM_PWM_Start+0x180>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x136>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1c      	ldr	r2, [pc, #112]	; (8004b50 <HAL_TIM_PWM_Start+0x184>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x136>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <HAL_TIM_PWM_Start+0x178>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x136>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_TIM_PWM_Start+0x188>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x136>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <HAL_TIM_PWM_Start+0x18c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d111      	bne.n	8004b26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b06      	cmp	r3, #6
 8004b12:	d010      	beq.n	8004b36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b24:	e007      	b.n	8004b36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40010400 	.word	0x40010400
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40001800 	.word	0x40001800

08004b5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e097      	b.n	8004ca0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fc f9a9 	bl	8000edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fbe1 	bl	8005378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bfc:	f023 030c 	bic.w	r3, r3, #12
 8004c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	031b      	lsls	r3, r3, #12
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d102      	bne.n	8004ce4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cde:	7b7b      	ldrb	r3, [r7, #13]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d001      	beq.n	8004ce8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e089      	b.n	8004dfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf8:	e031      	b.n	8004d5e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d110      	bne.n	8004d22 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d00:	7bbb      	ldrb	r3, [r7, #14]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d102      	bne.n	8004d0c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d06:	7b3b      	ldrb	r3, [r7, #12]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d001      	beq.n	8004d10 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e075      	b.n	8004dfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d20:	e01d      	b.n	8004d5e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d108      	bne.n	8004d3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d28:	7bbb      	ldrb	r3, [r7, #14]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d105      	bne.n	8004d3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d2e:	7b7b      	ldrb	r3, [r7, #13]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d102      	bne.n	8004d3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d34:	7b3b      	ldrb	r3, [r7, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d001      	beq.n	8004d3e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e05e      	b.n	8004dfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d010      	beq.n	8004d8c <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d6a:	e01f      	b.n	8004dac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2201      	movs	r2, #1
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fde9 	bl	800594c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0202 	orr.w	r2, r2, #2
 8004d88:	60da      	str	r2, [r3, #12]
      break;
 8004d8a:	e02e      	b.n	8004dea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2201      	movs	r2, #1
 8004d92:	2104      	movs	r1, #4
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fdd9 	bl	800594c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0204 	orr.w	r2, r2, #4
 8004da8:	60da      	str	r2, [r3, #12]
      break;
 8004daa:	e01e      	b.n	8004dea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	2100      	movs	r1, #0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fdc9 	bl	800594c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fdc2 	bl	800594c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0202 	orr.w	r2, r2, #2
 8004dd6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0204 	orr.w	r2, r2, #4
 8004de6:	60da      	str	r2, [r3, #12]
      break;
 8004de8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0202 	mvn.w	r2, #2
 8004e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fb fb66 	bl	8000518 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa73 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa7a 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0204 	mvn.w	r2, #4
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fb fb3c 	bl	8000518 <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa49 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa50 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0208 	mvn.w	r2, #8
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fb fb12 	bl	8000518 <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa1f 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa26 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d122      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d11b      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0210 	mvn.w	r2, #16
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2208      	movs	r2, #8
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fb fae8 	bl	8000518 <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f9f5 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f9fc 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f9cf 	bl	8005326 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d10e      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fdca 	bl	8005b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d107      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9c1 	bl	8005362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d10e      	bne.n	800500c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d107      	bne.n	800500c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0220 	mvn.w	r2, #32
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fd94 	bl	8005b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800502e:	2302      	movs	r3, #2
 8005030:	e0ae      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	f200 809f 	bhi.w	8005180 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005042:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800507d 	.word	0x0800507d
 800504c:	08005181 	.word	0x08005181
 8005050:	08005181 	.word	0x08005181
 8005054:	08005181 	.word	0x08005181
 8005058:	080050bd 	.word	0x080050bd
 800505c:	08005181 	.word	0x08005181
 8005060:	08005181 	.word	0x08005181
 8005064:	08005181 	.word	0x08005181
 8005068:	080050ff 	.word	0x080050ff
 800506c:	08005181 	.word	0x08005181
 8005070:	08005181 	.word	0x08005181
 8005074:	08005181 	.word	0x08005181
 8005078:	0800513f 	.word	0x0800513f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fa18 	bl	80054b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0208 	orr.w	r2, r2, #8
 8005096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0204 	bic.w	r2, r2, #4
 80050a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	619a      	str	r2, [r3, #24]
      break;
 80050ba:	e064      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fa68 	bl	8005598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6999      	ldr	r1, [r3, #24]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	619a      	str	r2, [r3, #24]
      break;
 80050fc:	e043      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fabd 	bl	8005684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0208 	orr.w	r2, r2, #8
 8005118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0204 	bic.w	r2, r2, #4
 8005128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69d9      	ldr	r1, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	61da      	str	r2, [r3, #28]
      break;
 800513c:	e023      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fb11 	bl	800576c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69d9      	ldr	r1, [r3, #28]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	61da      	str	r2, [r3, #28]
      break;
 800517e:	e002      	b.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
      break;
 8005184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIM_ConfigClockSource+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0b4      	b.n	800531e <HAL_TIM_ConfigClockSource+0x186>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ec:	d03e      	beq.n	800526c <HAL_TIM_ConfigClockSource+0xd4>
 80051ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f2:	f200 8087 	bhi.w	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	f000 8086 	beq.w	800530a <HAL_TIM_ConfigClockSource+0x172>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005202:	d87f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b70      	cmp	r3, #112	; 0x70
 8005206:	d01a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0xa6>
 8005208:	2b70      	cmp	r3, #112	; 0x70
 800520a:	d87b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b60      	cmp	r3, #96	; 0x60
 800520e:	d050      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005210:	2b60      	cmp	r3, #96	; 0x60
 8005212:	d877      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b50      	cmp	r3, #80	; 0x50
 8005216:	d03c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xfa>
 8005218:	2b50      	cmp	r3, #80	; 0x50
 800521a:	d873      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d058      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d86f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b30      	cmp	r3, #48	; 0x30
 8005226:	d064      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b30      	cmp	r3, #48	; 0x30
 800522a:	d86b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b20      	cmp	r3, #32
 800522e:	d060      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d867      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05c      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005238:	2b10      	cmp	r3, #16
 800523a:	d05a      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	e062      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6899      	ldr	r1, [r3, #8]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f000 fb5d 	bl	800590c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
      break;
 800526a:	e04f      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f000 fb46 	bl	800590c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528e:	609a      	str	r2, [r3, #8]
      break;
 8005290:	e03c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 faba 	bl	8005818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2150      	movs	r1, #80	; 0x50
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fb13 	bl	80058d6 <TIM_ITRx_SetConfig>
      break;
 80052b0:	e02c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 fad9 	bl	8005876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2160      	movs	r1, #96	; 0x60
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fb03 	bl	80058d6 <TIM_ITRx_SetConfig>
      break;
 80052d0:	e01c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 fa9a 	bl	8005818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2140      	movs	r1, #64	; 0x40
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 faf3 	bl	80058d6 <TIM_ITRx_SetConfig>
      break;
 80052f0:	e00c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 faea 	bl	80058d6 <TIM_ITRx_SetConfig>
      break;
 8005302:	e003      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      break;
 8005308:	e000      	b.n	800530c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800530a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a40      	ldr	r2, [pc, #256]	; (800548c <TIM_Base_SetConfig+0x114>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d00f      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <TIM_Base_SetConfig+0x118>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00b      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <TIM_Base_SetConfig+0x11c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3b      	ldr	r2, [pc, #236]	; (8005498 <TIM_Base_SetConfig+0x120>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a3a      	ldr	r2, [pc, #232]	; (800549c <TIM_Base_SetConfig+0x124>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d108      	bne.n	80053ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2f      	ldr	r2, [pc, #188]	; (800548c <TIM_Base_SetConfig+0x114>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d02b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d027      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2c      	ldr	r2, [pc, #176]	; (8005490 <TIM_Base_SetConfig+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d023      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <TIM_Base_SetConfig+0x11c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <TIM_Base_SetConfig+0x120>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a29      	ldr	r2, [pc, #164]	; (800549c <TIM_Base_SetConfig+0x124>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d017      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <TIM_Base_SetConfig+0x128>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <TIM_Base_SetConfig+0x12c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <TIM_Base_SetConfig+0x130>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a25      	ldr	r2, [pc, #148]	; (80054ac <TIM_Base_SetConfig+0x134>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a24      	ldr	r2, [pc, #144]	; (80054b0 <TIM_Base_SetConfig+0x138>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <TIM_Base_SetConfig+0x13c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d108      	bne.n	800543c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <TIM_Base_SetConfig+0x114>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0xf8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <TIM_Base_SetConfig+0x124>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d103      	bne.n	8005478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	615a      	str	r2, [r3, #20]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40010400 	.word	0x40010400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800
 80054ac:	40001800 	.word	0x40001800
 80054b0:	40001c00 	.word	0x40001c00
 80054b4:	40002000 	.word	0x40002000

080054b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0303 	bic.w	r3, r3, #3
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 0302 	bic.w	r3, r3, #2
 8005500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a20      	ldr	r2, [pc, #128]	; (8005590 <TIM_OC1_SetConfig+0xd8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_OC1_SetConfig+0x64>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <TIM_OC1_SetConfig+0xdc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d10c      	bne.n	8005536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0308 	bic.w	r3, r3, #8
 8005522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f023 0304 	bic.w	r3, r3, #4
 8005534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a15      	ldr	r2, [pc, #84]	; (8005590 <TIM_OC1_SetConfig+0xd8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC1_SetConfig+0x8e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a14      	ldr	r2, [pc, #80]	; (8005594 <TIM_OC1_SetConfig+0xdc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d111      	bne.n	800556a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40010000 	.word	0x40010000
 8005594:	40010400 	.word	0x40010400

08005598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f023 0210 	bic.w	r2, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0320 	bic.w	r3, r3, #32
 80055e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a22      	ldr	r2, [pc, #136]	; (800567c <TIM_OC2_SetConfig+0xe4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC2_SetConfig+0x68>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a21      	ldr	r2, [pc, #132]	; (8005680 <TIM_OC2_SetConfig+0xe8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10d      	bne.n	800561c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a17      	ldr	r2, [pc, #92]	; (800567c <TIM_OC2_SetConfig+0xe4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC2_SetConfig+0x94>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <TIM_OC2_SetConfig+0xe8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d113      	bne.n	8005654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000
 8005680:	40010400 	.word	0x40010400

08005684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a21      	ldr	r2, [pc, #132]	; (8005764 <TIM_OC3_SetConfig+0xe0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_OC3_SetConfig+0x66>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a20      	ldr	r2, [pc, #128]	; (8005768 <TIM_OC3_SetConfig+0xe4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10d      	bne.n	8005706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <TIM_OC3_SetConfig+0xe0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_OC3_SetConfig+0x92>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a15      	ldr	r2, [pc, #84]	; (8005768 <TIM_OC3_SetConfig+0xe4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d113      	bne.n	800573e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800571c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40010000 	.word	0x40010000
 8005768:	40010400 	.word	0x40010400

0800576c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	031b      	lsls	r3, r3, #12
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a12      	ldr	r2, [pc, #72]	; (8005810 <TIM_OC4_SetConfig+0xa4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_OC4_SetConfig+0x68>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a11      	ldr	r2, [pc, #68]	; (8005814 <TIM_OC4_SetConfig+0xa8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d109      	bne.n	80057e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	019b      	lsls	r3, r3, #6
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000
 8005814:	40010400 	.word	0x40010400

08005818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f023 0201 	bic.w	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 030a 	bic.w	r3, r3, #10
 8005854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005876:	b480      	push	{r7}
 8005878:	b087      	sub	sp, #28
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f023 0210 	bic.w	r2, r3, #16
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	031b      	lsls	r3, r3, #12
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f043 0307 	orr.w	r3, r3, #7
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	021a      	lsls	r2, r3, #8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	431a      	orrs	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4313      	orrs	r3, r2
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	609a      	str	r2, [r3, #8]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2201      	movs	r2, #1
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1a      	ldr	r2, [r3, #32]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	43db      	mvns	r3, r3
 800596e:	401a      	ands	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	fa01 f303 	lsl.w	r3, r1, r3
 8005984:	431a      	orrs	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e05a      	b.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a21      	ldr	r2, [pc, #132]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d01d      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1a      	ldr	r2, [pc, #104]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d10c      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40010400 	.word	0x40010400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40001800 	.word	0x40001800

08005a90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e03d      	b.n	8005b28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e03f      	b.n	8005bee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fb0a 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fc7b 	bl	800649c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b0ba      	sub	sp, #232	; 0xe8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10f      	bne.n	8005c5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_UART_IRQHandler+0x66>
 8005c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fb65 	bl	8006326 <UART_Receive_IT>
      return;
 8005c5c:	e256      	b.n	800610c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 80de 	beq.w	8005e24 <HAL_UART_IRQHandler+0x22c>
 8005c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80d1 	beq.w	8005e24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00b      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xae>
 8005c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f043 0201 	orr.w	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00b      	beq.n	8005cca <HAL_UART_IRQHandler+0xd2>
 8005cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f043 0202 	orr.w	r2, r3, #2
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00b      	beq.n	8005cee <HAL_UART_IRQHandler+0xf6>
 8005cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f043 0204 	orr.w	r2, r3, #4
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d011      	beq.n	8005d1e <HAL_UART_IRQHandler+0x126>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d105      	bne.n	8005d12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f043 0208 	orr.w	r2, r3, #8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 81ed 	beq.w	8006102 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_UART_IRQHandler+0x14e>
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 faf0 	bl	8006326 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	bf0c      	ite	eq
 8005d54:	2301      	moveq	r3, #1
 8005d56:	2300      	movne	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <HAL_UART_IRQHandler+0x17a>
 8005d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d04f      	beq.n	8005e12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9f8 	bl	8006168 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d82:	2b40      	cmp	r3, #64	; 0x40
 8005d84:	d141      	bne.n	8005e0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005db2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1d9      	bne.n	8005d86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d013      	beq.n	8005e02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	4a7d      	ldr	r2, [pc, #500]	; (8005fd4 <HAL_UART_IRQHandler+0x3dc>)
 8005de0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fb ff9d 	bl	8001d26 <HAL_DMA_Abort_IT>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d016      	beq.n	8005e20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e00:	e00e      	b.n	8005e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f99a 	bl	800613c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e08:	e00a      	b.n	8005e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f996 	bl	800613c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e10:	e006      	b.n	8005e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f992 	bl	800613c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e1e:	e170      	b.n	8006102 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e20:	bf00      	nop
    return;
 8005e22:	e16e      	b.n	8006102 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	f040 814a 	bne.w	80060c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8143 	beq.w	80060c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 813c 	beq.w	80060c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	f040 80b4 	bne.w	8005fd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8140 	beq.w	8006106 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	f080 8139 	bcs.w	8006106 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea6:	f000 8088 	beq.w	8005fba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ed6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1d9      	bne.n	8005eaa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3314      	adds	r3, #20
 8005efc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3314      	adds	r3, #20
 8005f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e1      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3314      	adds	r3, #20
 8005f38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e3      	bne.n	8005f32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	f023 0310 	bic.w	r3, r3, #16
 8005f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e3      	bne.n	8005f78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fb fe46 	bl	8001c46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f8c0 	bl	8006150 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fd0:	e099      	b.n	8006106 <HAL_UART_IRQHandler+0x50e>
 8005fd2:	bf00      	nop
 8005fd4:	0800622f 	.word	0x0800622f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 808b 	beq.w	800610a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8086 	beq.w	800610a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800600e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006022:	647a      	str	r2, [r7, #68]	; 0x44
 8006024:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e3      	bne.n	8005ffe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3314      	adds	r3, #20
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	623b      	str	r3, [r7, #32]
   return(result);
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	f023 0301 	bic.w	r3, r3, #1
 800604c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3314      	adds	r3, #20
 8006056:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800605a:	633a      	str	r2, [r7, #48]	; 0x30
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e3      	bne.n	8006036 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	60fb      	str	r3, [r7, #12]
   return(result);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0310 	bic.w	r3, r3, #16
 8006092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060a0:	61fa      	str	r2, [r7, #28]
 80060a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	69b9      	ldr	r1, [r7, #24]
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	617b      	str	r3, [r7, #20]
   return(result);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e3      	bne.n	800607c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f848 	bl	8006150 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060c0:	e023      	b.n	800610a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <HAL_UART_IRQHandler+0x4ea>
 80060ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8bb 	bl	8006256 <UART_Transmit_IT>
    return;
 80060e0:	e014      	b.n	800610c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00e      	beq.n	800610c <HAL_UART_IRQHandler+0x514>
 80060ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d008      	beq.n	800610c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f8fb 	bl	80062f6 <UART_EndTransmit_IT>
    return;
 8006100:	e004      	b.n	800610c <HAL_UART_IRQHandler+0x514>
    return;
 8006102:	bf00      	nop
 8006104:	e002      	b.n	800610c <HAL_UART_IRQHandler+0x514>
      return;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <HAL_UART_IRQHandler+0x514>
      return;
 800610a:	bf00      	nop
  }
}
 800610c:	37e8      	adds	r7, #232	; 0xe8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop

08006114 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b095      	sub	sp, #84	; 0x54
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006190:	643a      	str	r2, [r7, #64]	; 0x40
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e5      	bne.n	8006170 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3314      	adds	r3, #20
 80061aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3314      	adds	r3, #20
 80061c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d119      	bne.n	8006214 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f023 0310 	bic.w	r3, r3, #16
 80061f6:	647b      	str	r3, [r7, #68]	; 0x44
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006200:	61ba      	str	r2, [r7, #24]
 8006202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6979      	ldr	r1, [r7, #20]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	613b      	str	r3, [r7, #16]
   return(result);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e5      	bne.n	80061e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006222:	bf00      	nop
 8006224:	3754      	adds	r7, #84	; 0x54
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff ff77 	bl	800613c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b21      	cmp	r3, #33	; 0x21
 8006268:	d13e      	bne.n	80062e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006272:	d114      	bne.n	800629e <UART_Transmit_IT+0x48>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d110      	bne.n	800629e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006290:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]
 800629c:	e008      	b.n	80062b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	1c59      	adds	r1, r3, #1
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6211      	str	r1, [r2, #32]
 80062a8:	781a      	ldrb	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	4619      	mov	r1, r3
 80062be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10f      	bne.n	80062e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e000      	b.n	80062ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062e8:	2302      	movs	r3, #2
  }
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fefc 	bl	8006114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b08c      	sub	sp, #48	; 0x30
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b22      	cmp	r3, #34	; 0x22
 8006338:	f040 80ab 	bne.w	8006492 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d117      	bne.n	8006376 <UART_Receive_IT+0x50>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d113      	bne.n	8006376 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006364:	b29a      	uxth	r2, r3
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	1c9a      	adds	r2, r3, #2
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	629a      	str	r2, [r3, #40]	; 0x28
 8006374:	e026      	b.n	80063c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800637c:	2300      	movs	r3, #0
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006388:	d007      	beq.n	800639a <UART_Receive_IT+0x74>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <UART_Receive_IT+0x82>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	e008      	b.n	80063ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	4619      	mov	r1, r3
 80063d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d15a      	bne.n	800648e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0220 	bic.w	r2, r2, #32
 80063e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	2b01      	cmp	r3, #1
 8006416:	d135      	bne.n	8006484 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	613b      	str	r3, [r7, #16]
   return(result);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f023 0310 	bic.w	r3, r3, #16
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643e:	623a      	str	r2, [r7, #32]
 8006440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	69f9      	ldr	r1, [r7, #28]
 8006444:	6a3a      	ldr	r2, [r7, #32]
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	61bb      	str	r3, [r7, #24]
   return(result);
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e5      	bne.n	800641e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b10      	cmp	r3, #16
 800645e:	d10a      	bne.n	8006476 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fe67 	bl	8006150 <HAL_UARTEx_RxEventCallback>
 8006482:	e002      	b.n	800648a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff fe4f 	bl	8006128 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	e002      	b.n	8006494 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e000      	b.n	8006494 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006492:	2302      	movs	r3, #2
  }
}
 8006494:	4618      	mov	r0, r3
 8006496:	3730      	adds	r7, #48	; 0x30
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800649c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a0:	b0c0      	sub	sp, #256	; 0x100
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	68d9      	ldr	r1, [r3, #12]
 80064ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	ea40 0301 	orr.w	r3, r0, r1
 80064c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	431a      	orrs	r2, r3
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064f4:	f021 010c 	bic.w	r1, r1, #12
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006502:	430b      	orrs	r3, r1
 8006504:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006516:	6999      	ldr	r1, [r3, #24]
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	ea40 0301 	orr.w	r3, r0, r1
 8006522:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b8f      	ldr	r3, [pc, #572]	; (8006768 <UART_SetConfig+0x2cc>)
 800652c:	429a      	cmp	r2, r3
 800652e:	d005      	beq.n	800653c <UART_SetConfig+0xa0>
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4b8d      	ldr	r3, [pc, #564]	; (800676c <UART_SetConfig+0x2d0>)
 8006538:	429a      	cmp	r2, r3
 800653a:	d104      	bne.n	8006546 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800653c:	f7fd f992 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 8006540:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006544:	e003      	b.n	800654e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006546:	f7fd f979 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 800654a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	f040 810c 	bne.w	8006774 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800655c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006560:	2200      	movs	r2, #0
 8006562:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006566:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800656a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800656e:	4622      	mov	r2, r4
 8006570:	462b      	mov	r3, r5
 8006572:	1891      	adds	r1, r2, r2
 8006574:	65b9      	str	r1, [r7, #88]	; 0x58
 8006576:	415b      	adcs	r3, r3
 8006578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800657a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800657e:	4621      	mov	r1, r4
 8006580:	eb12 0801 	adds.w	r8, r2, r1
 8006584:	4629      	mov	r1, r5
 8006586:	eb43 0901 	adc.w	r9, r3, r1
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800659a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800659e:	4690      	mov	r8, r2
 80065a0:	4699      	mov	r9, r3
 80065a2:	4623      	mov	r3, r4
 80065a4:	eb18 0303 	adds.w	r3, r8, r3
 80065a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065ac:	462b      	mov	r3, r5
 80065ae:	eb49 0303 	adc.w	r3, r9, r3
 80065b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065ca:	460b      	mov	r3, r1
 80065cc:	18db      	adds	r3, r3, r3
 80065ce:	653b      	str	r3, [r7, #80]	; 0x50
 80065d0:	4613      	mov	r3, r2
 80065d2:	eb42 0303 	adc.w	r3, r2, r3
 80065d6:	657b      	str	r3, [r7, #84]	; 0x54
 80065d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065e0:	f7f9 fe18 	bl	8000214 <__aeabi_uldivmod>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4b61      	ldr	r3, [pc, #388]	; (8006770 <UART_SetConfig+0x2d4>)
 80065ea:	fba3 2302 	umull	r2, r3, r3, r2
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	011c      	lsls	r4, r3, #4
 80065f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006600:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006604:	4642      	mov	r2, r8
 8006606:	464b      	mov	r3, r9
 8006608:	1891      	adds	r1, r2, r2
 800660a:	64b9      	str	r1, [r7, #72]	; 0x48
 800660c:	415b      	adcs	r3, r3
 800660e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006610:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006614:	4641      	mov	r1, r8
 8006616:	eb12 0a01 	adds.w	sl, r2, r1
 800661a:	4649      	mov	r1, r9
 800661c:	eb43 0b01 	adc.w	fp, r3, r1
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800662c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006634:	4692      	mov	sl, r2
 8006636:	469b      	mov	fp, r3
 8006638:	4643      	mov	r3, r8
 800663a:	eb1a 0303 	adds.w	r3, sl, r3
 800663e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006642:	464b      	mov	r3, r9
 8006644:	eb4b 0303 	adc.w	r3, fp, r3
 8006648:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006658:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800665c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006660:	460b      	mov	r3, r1
 8006662:	18db      	adds	r3, r3, r3
 8006664:	643b      	str	r3, [r7, #64]	; 0x40
 8006666:	4613      	mov	r3, r2
 8006668:	eb42 0303 	adc.w	r3, r2, r3
 800666c:	647b      	str	r3, [r7, #68]	; 0x44
 800666e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006672:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006676:	f7f9 fdcd 	bl	8000214 <__aeabi_uldivmod>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4611      	mov	r1, r2
 8006680:	4b3b      	ldr	r3, [pc, #236]	; (8006770 <UART_SetConfig+0x2d4>)
 8006682:	fba3 2301 	umull	r2, r3, r3, r1
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	2264      	movs	r2, #100	; 0x64
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	1acb      	subs	r3, r1, r3
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006696:	4b36      	ldr	r3, [pc, #216]	; (8006770 <UART_SetConfig+0x2d4>)
 8006698:	fba3 2302 	umull	r2, r3, r3, r2
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066a4:	441c      	add	r4, r3
 80066a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066b8:	4642      	mov	r2, r8
 80066ba:	464b      	mov	r3, r9
 80066bc:	1891      	adds	r1, r2, r2
 80066be:	63b9      	str	r1, [r7, #56]	; 0x38
 80066c0:	415b      	adcs	r3, r3
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066c8:	4641      	mov	r1, r8
 80066ca:	1851      	adds	r1, r2, r1
 80066cc:	6339      	str	r1, [r7, #48]	; 0x30
 80066ce:	4649      	mov	r1, r9
 80066d0:	414b      	adcs	r3, r1
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066e0:	4659      	mov	r1, fp
 80066e2:	00cb      	lsls	r3, r1, #3
 80066e4:	4651      	mov	r1, sl
 80066e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ea:	4651      	mov	r1, sl
 80066ec:	00ca      	lsls	r2, r1, #3
 80066ee:	4610      	mov	r0, r2
 80066f0:	4619      	mov	r1, r3
 80066f2:	4603      	mov	r3, r0
 80066f4:	4642      	mov	r2, r8
 80066f6:	189b      	adds	r3, r3, r2
 80066f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066fc:	464b      	mov	r3, r9
 80066fe:	460a      	mov	r2, r1
 8006700:	eb42 0303 	adc.w	r3, r2, r3
 8006704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006714:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006718:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800671c:	460b      	mov	r3, r1
 800671e:	18db      	adds	r3, r3, r3
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
 8006722:	4613      	mov	r3, r2
 8006724:	eb42 0303 	adc.w	r3, r2, r3
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800672e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006732:	f7f9 fd6f 	bl	8000214 <__aeabi_uldivmod>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <UART_SetConfig+0x2d4>)
 800673c:	fba3 1302 	umull	r1, r3, r3, r2
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	2164      	movs	r1, #100	; 0x64
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	3332      	adds	r3, #50	; 0x32
 800674e:	4a08      	ldr	r2, [pc, #32]	; (8006770 <UART_SetConfig+0x2d4>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f003 0207 	and.w	r2, r3, #7
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4422      	add	r2, r4
 8006762:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006764:	e105      	b.n	8006972 <UART_SetConfig+0x4d6>
 8006766:	bf00      	nop
 8006768:	40011000 	.word	0x40011000
 800676c:	40011400 	.word	0x40011400
 8006770:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006778:	2200      	movs	r2, #0
 800677a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800677e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006782:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006786:	4642      	mov	r2, r8
 8006788:	464b      	mov	r3, r9
 800678a:	1891      	adds	r1, r2, r2
 800678c:	6239      	str	r1, [r7, #32]
 800678e:	415b      	adcs	r3, r3
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
 8006792:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006796:	4641      	mov	r1, r8
 8006798:	1854      	adds	r4, r2, r1
 800679a:	4649      	mov	r1, r9
 800679c:	eb43 0501 	adc.w	r5, r3, r1
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	00eb      	lsls	r3, r5, #3
 80067aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ae:	00e2      	lsls	r2, r4, #3
 80067b0:	4614      	mov	r4, r2
 80067b2:	461d      	mov	r5, r3
 80067b4:	4643      	mov	r3, r8
 80067b6:	18e3      	adds	r3, r4, r3
 80067b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067bc:	464b      	mov	r3, r9
 80067be:	eb45 0303 	adc.w	r3, r5, r3
 80067c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067e2:	4629      	mov	r1, r5
 80067e4:	008b      	lsls	r3, r1, #2
 80067e6:	4621      	mov	r1, r4
 80067e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ec:	4621      	mov	r1, r4
 80067ee:	008a      	lsls	r2, r1, #2
 80067f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067f4:	f7f9 fd0e 	bl	8000214 <__aeabi_uldivmod>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4b60      	ldr	r3, [pc, #384]	; (8006980 <UART_SetConfig+0x4e4>)
 80067fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	011c      	lsls	r4, r3, #4
 8006806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680a:	2200      	movs	r2, #0
 800680c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006810:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006814:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006818:	4642      	mov	r2, r8
 800681a:	464b      	mov	r3, r9
 800681c:	1891      	adds	r1, r2, r2
 800681e:	61b9      	str	r1, [r7, #24]
 8006820:	415b      	adcs	r3, r3
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006828:	4641      	mov	r1, r8
 800682a:	1851      	adds	r1, r2, r1
 800682c:	6139      	str	r1, [r7, #16]
 800682e:	4649      	mov	r1, r9
 8006830:	414b      	adcs	r3, r1
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006840:	4659      	mov	r1, fp
 8006842:	00cb      	lsls	r3, r1, #3
 8006844:	4651      	mov	r1, sl
 8006846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800684a:	4651      	mov	r1, sl
 800684c:	00ca      	lsls	r2, r1, #3
 800684e:	4610      	mov	r0, r2
 8006850:	4619      	mov	r1, r3
 8006852:	4603      	mov	r3, r0
 8006854:	4642      	mov	r2, r8
 8006856:	189b      	adds	r3, r3, r2
 8006858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800685c:	464b      	mov	r3, r9
 800685e:	460a      	mov	r2, r1
 8006860:	eb42 0303 	adc.w	r3, r2, r3
 8006864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	67bb      	str	r3, [r7, #120]	; 0x78
 8006872:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006880:	4649      	mov	r1, r9
 8006882:	008b      	lsls	r3, r1, #2
 8006884:	4641      	mov	r1, r8
 8006886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800688a:	4641      	mov	r1, r8
 800688c:	008a      	lsls	r2, r1, #2
 800688e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006892:	f7f9 fcbf 	bl	8000214 <__aeabi_uldivmod>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4b39      	ldr	r3, [pc, #228]	; (8006980 <UART_SetConfig+0x4e4>)
 800689c:	fba3 1302 	umull	r1, r3, r3, r2
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	2164      	movs	r1, #100	; 0x64
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	3332      	adds	r3, #50	; 0x32
 80068ae:	4a34      	ldr	r2, [pc, #208]	; (8006980 <UART_SetConfig+0x4e4>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ba:	441c      	add	r4, r3
 80068bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068c0:	2200      	movs	r2, #0
 80068c2:	673b      	str	r3, [r7, #112]	; 0x70
 80068c4:	677a      	str	r2, [r7, #116]	; 0x74
 80068c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068ca:	4642      	mov	r2, r8
 80068cc:	464b      	mov	r3, r9
 80068ce:	1891      	adds	r1, r2, r2
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	415b      	adcs	r3, r3
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068da:	4641      	mov	r1, r8
 80068dc:	1851      	adds	r1, r2, r1
 80068de:	6039      	str	r1, [r7, #0]
 80068e0:	4649      	mov	r1, r9
 80068e2:	414b      	adcs	r3, r1
 80068e4:	607b      	str	r3, [r7, #4]
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068f2:	4659      	mov	r1, fp
 80068f4:	00cb      	lsls	r3, r1, #3
 80068f6:	4651      	mov	r1, sl
 80068f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068fc:	4651      	mov	r1, sl
 80068fe:	00ca      	lsls	r2, r1, #3
 8006900:	4610      	mov	r0, r2
 8006902:	4619      	mov	r1, r3
 8006904:	4603      	mov	r3, r0
 8006906:	4642      	mov	r2, r8
 8006908:	189b      	adds	r3, r3, r2
 800690a:	66bb      	str	r3, [r7, #104]	; 0x68
 800690c:	464b      	mov	r3, r9
 800690e:	460a      	mov	r2, r1
 8006910:	eb42 0303 	adc.w	r3, r2, r3
 8006914:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	663b      	str	r3, [r7, #96]	; 0x60
 8006920:	667a      	str	r2, [r7, #100]	; 0x64
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800692e:	4649      	mov	r1, r9
 8006930:	008b      	lsls	r3, r1, #2
 8006932:	4641      	mov	r1, r8
 8006934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006938:	4641      	mov	r1, r8
 800693a:	008a      	lsls	r2, r1, #2
 800693c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006940:	f7f9 fc68 	bl	8000214 <__aeabi_uldivmod>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <UART_SetConfig+0x4e4>)
 800694a:	fba3 1302 	umull	r1, r3, r3, r2
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	2164      	movs	r1, #100	; 0x64
 8006952:	fb01 f303 	mul.w	r3, r1, r3
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	3332      	adds	r3, #50	; 0x32
 800695c:	4a08      	ldr	r2, [pc, #32]	; (8006980 <UART_SetConfig+0x4e4>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	f003 020f 	and.w	r2, r3, #15
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4422      	add	r2, r4
 8006970:	609a      	str	r2, [r3, #8]
}
 8006972:	bf00      	nop
 8006974:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006978:	46bd      	mov	sp, r7
 800697a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800697e:	bf00      	nop
 8006980:	51eb851f 	.word	0x51eb851f

08006984 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006984:	b084      	sub	sp, #16
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	f107 001c 	add.w	r0, r7, #28
 8006992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	2b01      	cmp	r3, #1
 800699a:	d122      	bne.n	80069e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80069b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d105      	bne.n	80069d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fbe8 	bl	80081ac <USB_CoreReset>
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
 80069e0:	e01a      	b.n	8006a18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fbdc 	bl	80081ac <USB_CoreReset>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38
 8006a0a:	e005      	b.n	8006a18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10b      	bne.n	8006a36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f043 0206 	orr.w	r2, r3, #6
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f043 0220 	orr.w	r2, r3, #32
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a42:	b004      	add	sp, #16
 8006a44:	4770      	bx	lr
	...

08006a48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d165      	bne.n	8006b28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4a41      	ldr	r2, [pc, #260]	; (8006b64 <USB_SetTurnaroundTime+0x11c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d906      	bls.n	8006a72 <USB_SetTurnaroundTime+0x2a>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4a40      	ldr	r2, [pc, #256]	; (8006b68 <USB_SetTurnaroundTime+0x120>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d202      	bcs.n	8006a72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a6c:	230f      	movs	r3, #15
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e062      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4a3c      	ldr	r2, [pc, #240]	; (8006b68 <USB_SetTurnaroundTime+0x120>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d306      	bcc.n	8006a88 <USB_SetTurnaroundTime+0x40>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4a3b      	ldr	r2, [pc, #236]	; (8006b6c <USB_SetTurnaroundTime+0x124>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d202      	bcs.n	8006a88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a82:	230e      	movs	r3, #14
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e057      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4a38      	ldr	r2, [pc, #224]	; (8006b6c <USB_SetTurnaroundTime+0x124>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d306      	bcc.n	8006a9e <USB_SetTurnaroundTime+0x56>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4a37      	ldr	r2, [pc, #220]	; (8006b70 <USB_SetTurnaroundTime+0x128>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d202      	bcs.n	8006a9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a98:	230d      	movs	r3, #13
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e04c      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4a33      	ldr	r2, [pc, #204]	; (8006b70 <USB_SetTurnaroundTime+0x128>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d306      	bcc.n	8006ab4 <USB_SetTurnaroundTime+0x6c>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4a32      	ldr	r2, [pc, #200]	; (8006b74 <USB_SetTurnaroundTime+0x12c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d802      	bhi.n	8006ab4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006aae:	230c      	movs	r3, #12
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e041      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4a2f      	ldr	r2, [pc, #188]	; (8006b74 <USB_SetTurnaroundTime+0x12c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d906      	bls.n	8006aca <USB_SetTurnaroundTime+0x82>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4a2e      	ldr	r2, [pc, #184]	; (8006b78 <USB_SetTurnaroundTime+0x130>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d802      	bhi.n	8006aca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ac4:	230b      	movs	r3, #11
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e036      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4a2a      	ldr	r2, [pc, #168]	; (8006b78 <USB_SetTurnaroundTime+0x130>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d906      	bls.n	8006ae0 <USB_SetTurnaroundTime+0x98>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4a29      	ldr	r2, [pc, #164]	; (8006b7c <USB_SetTurnaroundTime+0x134>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d802      	bhi.n	8006ae0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ada:	230a      	movs	r3, #10
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	e02b      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4a26      	ldr	r2, [pc, #152]	; (8006b7c <USB_SetTurnaroundTime+0x134>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d906      	bls.n	8006af6 <USB_SetTurnaroundTime+0xae>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4a25      	ldr	r2, [pc, #148]	; (8006b80 <USB_SetTurnaroundTime+0x138>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d202      	bcs.n	8006af6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006af0:	2309      	movs	r3, #9
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	e020      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4a21      	ldr	r2, [pc, #132]	; (8006b80 <USB_SetTurnaroundTime+0x138>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d306      	bcc.n	8006b0c <USB_SetTurnaroundTime+0xc4>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4a20      	ldr	r2, [pc, #128]	; (8006b84 <USB_SetTurnaroundTime+0x13c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d802      	bhi.n	8006b0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b06:	2308      	movs	r3, #8
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	e015      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4a1d      	ldr	r2, [pc, #116]	; (8006b84 <USB_SetTurnaroundTime+0x13c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d906      	bls.n	8006b22 <USB_SetTurnaroundTime+0xda>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4a1c      	ldr	r2, [pc, #112]	; (8006b88 <USB_SetTurnaroundTime+0x140>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d202      	bcs.n	8006b22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b1c:	2307      	movs	r3, #7
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	e00a      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b22:	2306      	movs	r3, #6
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	e007      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d102      	bne.n	8006b34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b2e:	2309      	movs	r3, #9
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	e001      	b.n	8006b38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b34:	2309      	movs	r3, #9
 8006b36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	029b      	lsls	r3, r3, #10
 8006b4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b50:	431a      	orrs	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	00d8acbf 	.word	0x00d8acbf
 8006b68:	00e4e1c0 	.word	0x00e4e1c0
 8006b6c:	00f42400 	.word	0x00f42400
 8006b70:	01067380 	.word	0x01067380
 8006b74:	011a499f 	.word	0x011a499f
 8006b78:	01312cff 	.word	0x01312cff
 8006b7c:	014ca43f 	.word	0x014ca43f
 8006b80:	016e3600 	.word	0x016e3600
 8006b84:	01a6ab1f 	.word	0x01a6ab1f
 8006b88:	01e84800 	.word	0x01e84800

08006b8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f043 0201 	orr.w	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f023 0201 	bic.w	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d115      	bne.n	8006c1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bfe:	2001      	movs	r0, #1
 8006c00:	f7fa fc7a 	bl	80014f8 <HAL_Delay>
      ms++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fa3f 	bl	800808e <USB_GetMode>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d01e      	beq.n	8006c54 <USB_SetCurrentMode+0x84>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b31      	cmp	r3, #49	; 0x31
 8006c1a:	d9f0      	bls.n	8006bfe <USB_SetCurrentMode+0x2e>
 8006c1c:	e01a      	b.n	8006c54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d115      	bne.n	8006c50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c30:	2001      	movs	r0, #1
 8006c32:	f7fa fc61 	bl	80014f8 <HAL_Delay>
      ms++;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 fa26 	bl	800808e <USB_GetMode>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <USB_SetCurrentMode+0x84>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b31      	cmp	r3, #49	; 0x31
 8006c4c:	d9f0      	bls.n	8006c30 <USB_SetCurrentMode+0x60>
 8006c4e:	e001      	b.n	8006c54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e005      	b.n	8006c60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b32      	cmp	r3, #50	; 0x32
 8006c58:	d101      	bne.n	8006c5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c68:	b084      	sub	sp, #16
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b086      	sub	sp, #24
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c82:	2300      	movs	r3, #0
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	e009      	b.n	8006c9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3340      	adds	r3, #64	; 0x40
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2b0e      	cmp	r3, #14
 8006ca0:	d9f2      	bls.n	8006c88 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11c      	bne.n	8006ce2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cb6:	f043 0302 	orr.w	r3, r3, #2
 8006cba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	e005      	b.n	8006cee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d00:	4619      	mov	r1, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d08:	461a      	mov	r2, r3
 8006d0a:	680b      	ldr	r3, [r1, #0]
 8006d0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d10c      	bne.n	8006d2e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f965 	bl	8006fec <USB_SetDevSpeed>
 8006d22:	e008      	b.n	8006d36 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d24:	2101      	movs	r1, #1
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f960 	bl	8006fec <USB_SetDevSpeed>
 8006d2c:	e003      	b.n	8006d36 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d2e:	2103      	movs	r1, #3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f95b 	bl	8006fec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d36:	2110      	movs	r1, #16
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f8f3 	bl	8006f24 <USB_FlushTxFifo>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f91f 	bl	8006f8c <USB_FlushRxFifo>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	461a      	mov	r2, r3
 8006d60:	2300      	movs	r3, #0
 8006d62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	461a      	mov	r2, r3
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	e043      	b.n	8006e0a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d98:	d118      	bne.n	8006dcc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dac:	461a      	mov	r2, r3
 8006dae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	e013      	b.n	8006dde <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e008      	b.n	8006dde <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2300      	movs	r3, #0
 8006ddc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	461a      	mov	r2, r3
 8006dec:	2300      	movs	r3, #0
 8006dee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	3301      	adds	r3, #1
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d3b7      	bcc.n	8006d82 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e12:	2300      	movs	r3, #0
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	e043      	b.n	8006ea0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e2e:	d118      	bne.n	8006e62 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e42:	461a      	mov	r2, r3
 8006e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e013      	b.n	8006e74 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	e008      	b.n	8006e74 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6e:	461a      	mov	r2, r3
 8006e70:	2300      	movs	r3, #0
 8006e72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e80:	461a      	mov	r2, r3
 8006e82:	2300      	movs	r3, #0
 8006e84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	461a      	mov	r2, r3
 8006e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	613b      	str	r3, [r7, #16]
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d3b7      	bcc.n	8006e18 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ec8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d105      	bne.n	8006edc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f043 0210 	orr.w	r2, r3, #16
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <USB_DevInit+0x2b8>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f043 0208 	orr.w	r2, r3, #8
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d107      	bne.n	8006f10 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f08:	f043 0304 	orr.w	r3, r3, #4
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f1c:	b004      	add	sp, #16
 8006f1e:	4770      	bx	lr
 8006f20:	803c3800 	.word	0x803c3800

08006f24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4a13      	ldr	r2, [pc, #76]	; (8006f88 <USB_FlushTxFifo+0x64>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d901      	bls.n	8006f44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e01b      	b.n	8006f7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	daf2      	bge.n	8006f32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	019b      	lsls	r3, r3, #6
 8006f54:	f043 0220 	orr.w	r2, r3, #32
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <USB_FlushTxFifo+0x64>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e006      	b.n	8006f7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d0f0      	beq.n	8006f5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	00030d40 	.word	0x00030d40

08006f8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a11      	ldr	r2, [pc, #68]	; (8006fe8 <USB_FlushRxFifo+0x5c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e018      	b.n	8006fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	daf2      	bge.n	8006f98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2210      	movs	r2, #16
 8006fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <USB_FlushRxFifo+0x5c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d901      	bls.n	8006fce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e006      	b.n	8006fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b10      	cmp	r3, #16
 8006fd8:	d0f0      	beq.n	8006fbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	00030d40 	.word	0x00030d40

08006fec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800700c:	4313      	orrs	r3, r2
 800700e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800701e:	b480      	push	{r7}
 8007020:	b087      	sub	sp, #28
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0306 	and.w	r3, r3, #6
 8007036:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800703e:	2300      	movs	r3, #0
 8007040:	75fb      	strb	r3, [r7, #23]
 8007042:	e00a      	b.n	800705a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d002      	beq.n	8007050 <USB_GetDevSpeed+0x32>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b06      	cmp	r3, #6
 800704e:	d102      	bne.n	8007056 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007050:	2302      	movs	r3, #2
 8007052:	75fb      	strb	r3, [r7, #23]
 8007054:	e001      	b.n	800705a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007056:	230f      	movs	r3, #15
 8007058:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
}
 800705c:	4618      	mov	r0, r3
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d13a      	bne.n	80070fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	2101      	movs	r1, #1
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	68f9      	ldr	r1, [r7, #12]
 800709e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a2:	4313      	orrs	r3, r2
 80070a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d155      	bne.n	8007168 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	791b      	ldrb	r3, [r3, #4]
 80070d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	059b      	lsls	r3, r3, #22
 80070de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070e0:	4313      	orrs	r3, r2
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	e036      	b.n	8007168 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007100:	69da      	ldr	r2, [r3, #28]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007118:	4313      	orrs	r3, r2
 800711a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d11a      	bne.n	8007168 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	791b      	ldrb	r3, [r3, #4]
 800714c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800714e:	430b      	orrs	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d161      	bne.n	8007258 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071aa:	d11f      	bne.n	80071ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	2101      	movs	r1, #1
 80071fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007202:	b29b      	uxth	r3, r3
 8007204:	43db      	mvns	r3, r3
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800720c:	4013      	ands	r3, r2
 800720e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	2101      	movs	r1, #1
 8007222:	fa01 f303 	lsl.w	r3, r1, r3
 8007226:	b29b      	uxth	r3, r3
 8007228:	43db      	mvns	r3, r3
 800722a:	68f9      	ldr	r1, [r7, #12]
 800722c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007230:	4013      	ands	r3, r2
 8007232:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	0159      	lsls	r1, r3, #5
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	440b      	add	r3, r1
 800724a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724e:	4619      	mov	r1, r3
 8007250:	4b35      	ldr	r3, [pc, #212]	; (8007328 <USB_DeactivateEndpoint+0x1b0>)
 8007252:	4013      	ands	r3, r2
 8007254:	600b      	str	r3, [r1, #0]
 8007256:	e060      	b.n	800731a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800726a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800726e:	d11f      	bne.n	80072b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800728e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	2101      	movs	r1, #1
 80072c2:	fa01 f303 	lsl.w	r3, r1, r3
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	43db      	mvns	r3, r3
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072d0:	4013      	ands	r3, r2
 80072d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	2101      	movs	r1, #1
 80072e6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	43db      	mvns	r3, r3
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072f4:	4013      	ands	r3, r2
 80072f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	0159      	lsls	r1, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	440b      	add	r3, r1
 800730e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007312:	4619      	mov	r1, r3
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <USB_DeactivateEndpoint+0x1b4>)
 8007316:	4013      	ands	r3, r2
 8007318:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	ec337800 	.word	0xec337800
 800732c:	eff37800 	.word	0xeff37800

08007330 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	; 0x28
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b01      	cmp	r3, #1
 800734e:	f040 815c 	bne.w	800760a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d132      	bne.n	80073c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	440a      	add	r2, r1
 8007370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007374:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007378:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800737c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800739c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b8:	0cdb      	lsrs	r3, r3, #19
 80073ba:	04db      	lsls	r3, r3, #19
 80073bc:	6113      	str	r3, [r2, #16]
 80073be:	e074      	b.n	80074aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073da:	0cdb      	lsrs	r3, r3, #19
 80073dc:	04db      	lsls	r3, r3, #19
 80073de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007402:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6999      	ldr	r1, [r3, #24]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	440b      	add	r3, r1
 800741c:	1e59      	subs	r1, r3, #1
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	fbb1 f3f3 	udiv	r3, r1, r3
 8007426:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007428:	4b9d      	ldr	r3, [pc, #628]	; (80076a0 <USB_EPStartXfer+0x370>)
 800742a:	400b      	ands	r3, r1
 800742c:	69b9      	ldr	r1, [r7, #24]
 800742e:	0148      	lsls	r0, r1, #5
 8007430:	69f9      	ldr	r1, [r7, #28]
 8007432:	4401      	add	r1, r0
 8007434:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007438:	4313      	orrs	r3, r2
 800743a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007452:	69b9      	ldr	r1, [r7, #24]
 8007454:	0148      	lsls	r0, r1, #5
 8007456:	69f9      	ldr	r1, [r7, #28]
 8007458:	4401      	add	r1, r0
 800745a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800745e:	4313      	orrs	r3, r2
 8007460:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	791b      	ldrb	r3, [r3, #4]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d11f      	bne.n	80074aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	440a      	add	r2, r1
 8007480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007484:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007488:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d14b      	bne.n	8007548 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d009      	beq.n	80074cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	461a      	mov	r2, r3
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	791b      	ldrb	r3, [r3, #4]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d128      	bne.n	8007526 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d110      	bne.n	8007506 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	e00f      	b.n	8007526 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007524:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	69fa      	ldr	r2, [r7, #28]
 800753a:	440a      	add	r2, r1
 800753c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007540:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	e133      	b.n	80077b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007562:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007566:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	791b      	ldrb	r3, [r3, #4]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d015      	beq.n	800759c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 811b 	beq.w	80077b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	2101      	movs	r1, #1
 800758c:	fa01 f303 	lsl.w	r3, r1, r3
 8007590:	69f9      	ldr	r1, [r7, #28]
 8007592:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007596:	4313      	orrs	r3, r2
 8007598:	634b      	str	r3, [r1, #52]	; 0x34
 800759a:	e109      	b.n	80077b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d110      	bne.n	80075ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	0151      	lsls	r1, r2, #5
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	440a      	add	r2, r1
 80075c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	e00f      	b.n	80075ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6919      	ldr	r1, [r3, #16]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	781a      	ldrb	r2, [r3, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	b298      	uxth	r0, r3
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	4603      	mov	r3, r0
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 fade 	bl	8007bc4 <USB_WritePacket>
 8007608:	e0d2      	b.n	80077b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007624:	0cdb      	lsrs	r3, r3, #19
 8007626:	04db      	lsls	r3, r3, #19
 8007628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007644:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007648:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800764c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d126      	bne.n	80076a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766c:	69b9      	ldr	r1, [r7, #24]
 800766e:	0148      	lsls	r0, r1, #5
 8007670:	69f9      	ldr	r1, [r7, #28]
 8007672:	4401      	add	r1, r0
 8007674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007678:	4313      	orrs	r3, r2
 800767a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800769a:	6113      	str	r3, [r2, #16]
 800769c:	e03a      	b.n	8007714 <USB_EPStartXfer+0x3e4>
 800769e:	bf00      	nop
 80076a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	1e5a      	subs	r2, r3, #1
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	8afa      	ldrh	r2, [r7, #22]
 80076c0:	fb03 f202 	mul.w	r2, r3, r2
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d4:	691a      	ldr	r2, [r3, #16]
 80076d6:	8afb      	ldrh	r3, [r7, #22]
 80076d8:	04d9      	lsls	r1, r3, #19
 80076da:	4b38      	ldr	r3, [pc, #224]	; (80077bc <USB_EPStartXfer+0x48c>)
 80076dc:	400b      	ands	r3, r1
 80076de:	69b9      	ldr	r1, [r7, #24]
 80076e0:	0148      	lsls	r0, r1, #5
 80076e2:	69f9      	ldr	r1, [r7, #28]
 80076e4:	4401      	add	r1, r0
 80076e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076ea:	4313      	orrs	r3, r2
 80076ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007704:	69b9      	ldr	r1, [r7, #24]
 8007706:	0148      	lsls	r0, r1, #5
 8007708:	69f9      	ldr	r1, [r7, #28]
 800770a:	4401      	add	r1, r0
 800770c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007710:	4313      	orrs	r3, r2
 8007712:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d10d      	bne.n	8007736 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	6919      	ldr	r1, [r3, #16]
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007732:	460a      	mov	r2, r1
 8007734:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	791b      	ldrb	r3, [r3, #4]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d128      	bne.n	8007790 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d110      	bne.n	8007770 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007768:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e00f      	b.n	8007790 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	440a      	add	r2, r1
 8007786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800778e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	0151      	lsls	r1, r2, #5
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	440a      	add	r2, r1
 80077a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	1ff80000 	.word	0x1ff80000

080077c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	f040 80ce 	bne.w	800797e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d132      	bne.n	8007850 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800780c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800782c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	0151      	lsls	r1, r2, #5
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	440a      	add	r2, r1
 8007844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007848:	0cdb      	lsrs	r3, r3, #19
 800784a:	04db      	lsls	r3, r3, #19
 800784c:	6113      	str	r3, [r2, #16]
 800784e:	e04e      	b.n	80078ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786a:	0cdb      	lsrs	r3, r3, #19
 800786c:	04db      	lsls	r3, r3, #19
 800786e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	440a      	add	r2, r1
 8007886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800788e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007892:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	699a      	ldr	r2, [r3, #24]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	429a      	cmp	r2, r3
 800789e:	d903      	bls.n	80078a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078de:	6939      	ldr	r1, [r7, #16]
 80078e0:	0148      	lsls	r0, r1, #5
 80078e2:	6979      	ldr	r1, [r7, #20]
 80078e4:	4401      	add	r1, r0
 80078e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078ea:	4313      	orrs	r3, r2
 80078ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d11e      	bne.n	8007932 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d009      	beq.n	8007910 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007908:	461a      	mov	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	440a      	add	r2, r1
 8007926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	e097      	b.n	8007a62 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800794c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007950:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8083 	beq.w	8007a62 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	2101      	movs	r1, #1
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	6979      	ldr	r1, [r7, #20]
 8007974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007978:	4313      	orrs	r3, r2
 800797a:	634b      	str	r3, [r1, #52]	; 0x34
 800797c:	e071      	b.n	8007a62 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	0151      	lsls	r1, r2, #5
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	440a      	add	r2, r1
 8007994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007998:	0cdb      	lsrs	r3, r3, #19
 800799a:	04db      	lsls	r3, r3, #19
 800799c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	0151      	lsls	r1, r2, #5
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	440a      	add	r2, r1
 80079b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	0151      	lsls	r1, r2, #5
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	440a      	add	r2, r1
 80079f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a10:	6939      	ldr	r1, [r7, #16]
 8007a12:	0148      	lsls	r0, r1, #5
 8007a14:	6979      	ldr	r1, [r7, #20]
 8007a16:	4401      	add	r1, r0
 8007a18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d10d      	bne.n	8007a42 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6919      	ldr	r1, [r3, #16]
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	460a      	mov	r2, r1
 8007a40:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d14a      	bne.n	8007b24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aa6:	f040 8086 	bne.w	8007bb6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	7812      	ldrb	r2, [r2, #0]
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007acc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	7812      	ldrb	r2, [r2, #0]
 8007ae2:	0151      	lsls	r1, r2, #5
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	440a      	add	r2, r1
 8007ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007af0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f242 7210 	movw	r2, #10000	; 0x2710
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d902      	bls.n	8007b08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]
          break;
 8007b06:	e056      	b.n	8007bb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b20:	d0e7      	beq.n	8007af2 <USB_EPStopXfer+0x82>
 8007b22:	e048      	b.n	8007bb6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b3c:	d13b      	bne.n	8007bb6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	7812      	ldrb	r2, [r2, #0]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	7812      	ldrb	r2, [r2, #0]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d902      	bls.n	8007b9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
          break;
 8007b9a:	e00c      	b.n	8007bb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb4:	d0e7      	beq.n	8007b86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b089      	sub	sp, #36	; 0x24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	71fb      	strb	r3, [r7, #7]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007be2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d123      	bne.n	8007c32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007bea:	88bb      	ldrh	r3, [r7, #4]
 8007bec:	3303      	adds	r3, #3
 8007bee:	089b      	lsrs	r3, r3, #2
 8007bf0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	e018      	b.n	8007c2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	031a      	lsls	r2, r3, #12
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c04:	461a      	mov	r2, r3
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	3301      	adds	r3, #1
 8007c16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	3301      	adds	r3, #1
 8007c22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	3301      	adds	r3, #1
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d3e2      	bcc.n	8007bf8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3724      	adds	r7, #36	; 0x24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b08b      	sub	sp, #44	; 0x2c
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	089b      	lsrs	r3, r3, #2
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	623b      	str	r3, [r7, #32]
 8007c6a:	e014      	b.n	8007c96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	3301      	adds	r3, #1
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	3301      	adds	r3, #1
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	3301      	adds	r3, #1
 8007c94:	623b      	str	r3, [r7, #32]
 8007c96:	6a3a      	ldr	r2, [r7, #32]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d3e6      	bcc.n	8007c6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c9e:	8bfb      	ldrh	r3, [r7, #30]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01e      	beq.n	8007ce2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f107 0310 	add.w	r3, r7, #16
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	701a      	strb	r2, [r3, #0]
      i++;
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	623b      	str	r3, [r7, #32]
      pDest++;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007cd6:	8bfb      	ldrh	r3, [r7, #30]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007cdc:	8bfb      	ldrh	r3, [r7, #30]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1ea      	bne.n	8007cb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	372c      	adds	r7, #44	; 0x2c
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d12c      	bne.n	8007d66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	db12      	blt.n	8007d44 <USB_EPSetStall+0x54>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00f      	beq.n	8007d44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	e02b      	b.n	8007dbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	db12      	blt.n	8007d9e <USB_EPSetStall+0xae>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00f      	beq.n	8007d9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	0151      	lsls	r1, r2, #5
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	440a      	add	r2, r1
 8007d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	0151      	lsls	r1, r2, #5
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	440a      	add	r2, r1
 8007db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	785b      	ldrb	r3, [r3, #1]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d128      	bne.n	8007e3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	791b      	ldrb	r3, [r3, #4]
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d003      	beq.n	8007e18 <USB_EPClearStall+0x4c>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	791b      	ldrb	r3, [r3, #4]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d138      	bne.n	8007e8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	0151      	lsls	r1, r2, #5
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	e027      	b.n	8007e8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	0151      	lsls	r1, r2, #5
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	440a      	add	r2, r1
 8007e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d003      	beq.n	8007e6a <USB_EPClearStall+0x9e>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	791b      	ldrb	r3, [r3, #4]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d10f      	bne.n	8007e8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007eba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ecc:	68f9      	ldr	r1, [r7, #12]
 8007ece:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f12:	f023 0302 	bic.w	r3, r3, #2
 8007f16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f40:	f023 0303 	bic.w	r3, r3, #3
 8007f44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f54:	f043 0302 	orr.w	r3, r3, #2
 8007f58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f80:	68fb      	ldr	r3, [r7, #12]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b085      	sub	sp, #20
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	b29b      	uxth	r3, r3
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	4013      	ands	r3, r2
 8008022:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008024:	68bb      	ldr	r3, [r7, #8]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008032:	b480      	push	{r7}
 8008034:	b087      	sub	sp, #28
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008054:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	fa22 f303 	lsr.w	r3, r2, r3
 8008062:	01db      	lsls	r3, r3, #7
 8008064:	b2db      	uxtb	r3, r3
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4013      	ands	r3, r2
 800807e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008080:	68bb      	ldr	r3, [r7, #8]
}
 8008082:	4618      	mov	r0, r3
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	f003 0301 	and.w	r3, r3, #1
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080c8:	f023 0307 	bic.w	r3, r3, #7
 80080cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	460b      	mov	r3, r1
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	333c      	adds	r3, #60	; 0x3c
 8008106:	3304      	adds	r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	4a26      	ldr	r2, [pc, #152]	; (80081a8 <USB_EP0_OutStart+0xb8>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d90a      	bls.n	800812a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008124:	d101      	bne.n	800812a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	e037      	b.n	800819a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008130:	461a      	mov	r2, r3
 8008132:	2300      	movs	r3, #0
 8008134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008148:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008158:	f043 0318 	orr.w	r3, r3, #24
 800815c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800816c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008170:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008172:	7afb      	ldrb	r3, [r7, #11]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d10f      	bne.n	8008198 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008192:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008196:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	4f54300a 	.word	0x4f54300a

080081ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	3301      	adds	r3, #1
 80081bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4a13      	ldr	r2, [pc, #76]	; (8008210 <USB_CoreReset+0x64>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d901      	bls.n	80081ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e01b      	b.n	8008202 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	daf2      	bge.n	80081b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f043 0201 	orr.w	r2, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4a09      	ldr	r2, [pc, #36]	; (8008210 <USB_CoreReset+0x64>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d901      	bls.n	80081f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e006      	b.n	8008202 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d0f0      	beq.n	80081e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	00030d40 	.word	0x00030d40

08008214 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008220:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008224:	f002 fd58 	bl	800acd8 <USBD_static_malloc>
 8008228:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	32b0      	adds	r2, #176	; 0xb0
 800823a:	2100      	movs	r1, #0
 800823c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008240:	2302      	movs	r3, #2
 8008242:	e0d4      	b.n	80083ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008244:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f002 fdba 	bl	800adc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	32b0      	adds	r2, #176	; 0xb0
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	32b0      	adds	r2, #176	; 0xb0
 800826a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	7c1b      	ldrb	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d138      	bne.n	80082ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800827c:	4b5e      	ldr	r3, [pc, #376]	; (80083f8 <USBD_CDC_Init+0x1e4>)
 800827e:	7819      	ldrb	r1, [r3, #0]
 8008280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008284:	2202      	movs	r2, #2
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f002 fbb5 	bl	800a9f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800828c:	4b5a      	ldr	r3, [pc, #360]	; (80083f8 <USBD_CDC_Init+0x1e4>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	f003 020f 	and.w	r2, r3, #15
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	3324      	adds	r3, #36	; 0x24
 80082a2:	2201      	movs	r2, #1
 80082a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082a6:	4b55      	ldr	r3, [pc, #340]	; (80083fc <USBD_CDC_Init+0x1e8>)
 80082a8:	7819      	ldrb	r1, [r3, #0]
 80082aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ae:	2202      	movs	r2, #2
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f002 fba0 	bl	800a9f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082b6:	4b51      	ldr	r3, [pc, #324]	; (80083fc <USBD_CDC_Init+0x1e8>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	f003 020f 	and.w	r2, r3, #15
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082ce:	2201      	movs	r2, #1
 80082d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80082d2:	4b4b      	ldr	r3, [pc, #300]	; (8008400 <USBD_CDC_Init+0x1ec>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	f003 020f 	and.w	r2, r3, #15
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	3326      	adds	r3, #38	; 0x26
 80082e8:	2210      	movs	r2, #16
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	e035      	b.n	800835a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082ee:	4b42      	ldr	r3, [pc, #264]	; (80083f8 <USBD_CDC_Init+0x1e4>)
 80082f0:	7819      	ldrb	r1, [r3, #0]
 80082f2:	2340      	movs	r3, #64	; 0x40
 80082f4:	2202      	movs	r2, #2
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f002 fb7d 	bl	800a9f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082fc:	4b3e      	ldr	r3, [pc, #248]	; (80083f8 <USBD_CDC_Init+0x1e4>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	f003 020f 	and.w	r2, r3, #15
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	3324      	adds	r3, #36	; 0x24
 8008312:	2201      	movs	r2, #1
 8008314:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008316:	4b39      	ldr	r3, [pc, #228]	; (80083fc <USBD_CDC_Init+0x1e8>)
 8008318:	7819      	ldrb	r1, [r3, #0]
 800831a:	2340      	movs	r3, #64	; 0x40
 800831c:	2202      	movs	r2, #2
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f002 fb69 	bl	800a9f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008324:	4b35      	ldr	r3, [pc, #212]	; (80083fc <USBD_CDC_Init+0x1e8>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f003 020f 	and.w	r2, r3, #15
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800833c:	2201      	movs	r2, #1
 800833e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008340:	4b2f      	ldr	r3, [pc, #188]	; (8008400 <USBD_CDC_Init+0x1ec>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f003 020f 	and.w	r2, r3, #15
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	3326      	adds	r3, #38	; 0x26
 8008356:	2210      	movs	r2, #16
 8008358:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800835a:	4b29      	ldr	r3, [pc, #164]	; (8008400 <USBD_CDC_Init+0x1ec>)
 800835c:	7819      	ldrb	r1, [r3, #0]
 800835e:	2308      	movs	r3, #8
 8008360:	2203      	movs	r2, #3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f002 fb47 	bl	800a9f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008368:	4b25      	ldr	r3, [pc, #148]	; (8008400 <USBD_CDC_Init+0x1ec>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	f003 020f 	and.w	r2, r3, #15
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	3324      	adds	r3, #36	; 0x24
 800837e:	2201      	movs	r2, #1
 8008380:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	33b0      	adds	r3, #176	; 0xb0
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80083b8:	2302      	movs	r3, #2
 80083ba:	e018      	b.n	80083ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7c1b      	ldrb	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083c4:	4b0d      	ldr	r3, [pc, #52]	; (80083fc <USBD_CDC_Init+0x1e8>)
 80083c6:	7819      	ldrb	r1, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f002 fbfe 	bl	800abd4 <USBD_LL_PrepareReceive>
 80083d8:	e008      	b.n	80083ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083da:	4b08      	ldr	r3, [pc, #32]	; (80083fc <USBD_CDC_Init+0x1e8>)
 80083dc:	7819      	ldrb	r1, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f002 fbf4 	bl	800abd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000097 	.word	0x20000097
 80083fc:	20000098 	.word	0x20000098
 8008400:	20000099 	.word	0x20000099

08008404 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008410:	4b3a      	ldr	r3, [pc, #232]	; (80084fc <USBD_CDC_DeInit+0xf8>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f002 fb13 	bl	800aa42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800841c:	4b37      	ldr	r3, [pc, #220]	; (80084fc <USBD_CDC_DeInit+0xf8>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 020f 	and.w	r2, r3, #15
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	3324      	adds	r3, #36	; 0x24
 8008432:	2200      	movs	r2, #0
 8008434:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008436:	4b32      	ldr	r3, [pc, #200]	; (8008500 <USBD_CDC_DeInit+0xfc>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f002 fb00 	bl	800aa42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008442:	4b2f      	ldr	r3, [pc, #188]	; (8008500 <USBD_CDC_DeInit+0xfc>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 020f 	and.w	r2, r3, #15
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800845a:	2200      	movs	r2, #0
 800845c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800845e:	4b29      	ldr	r3, [pc, #164]	; (8008504 <USBD_CDC_DeInit+0x100>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f002 faec 	bl	800aa42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800846a:	4b26      	ldr	r3, [pc, #152]	; (8008504 <USBD_CDC_DeInit+0x100>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f003 020f 	and.w	r2, r3, #15
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	3324      	adds	r3, #36	; 0x24
 8008480:	2200      	movs	r2, #0
 8008482:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008484:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <USBD_CDC_DeInit+0x100>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f003 020f 	and.w	r2, r3, #15
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	440b      	add	r3, r1
 8008498:	3326      	adds	r3, #38	; 0x26
 800849a:	2200      	movs	r2, #0
 800849c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	32b0      	adds	r2, #176	; 0xb0
 80084a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01f      	beq.n	80084f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	33b0      	adds	r3, #176	; 0xb0
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	32b0      	adds	r2, #176	; 0xb0
 80084ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f002 fc0e 	bl	800acf4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	32b0      	adds	r2, #176	; 0xb0
 80084e2:	2100      	movs	r1, #0
 80084e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000097 	.word	0x20000097
 8008500:	20000098 	.word	0x20000098
 8008504:	20000099 	.word	0x20000099

08008508 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	32b0      	adds	r2, #176	; 0xb0
 800851c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008520:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008534:	2303      	movs	r3, #3
 8008536:	e0bf      	b.n	80086b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008540:	2b00      	cmp	r3, #0
 8008542:	d050      	beq.n	80085e6 <USBD_CDC_Setup+0xde>
 8008544:	2b20      	cmp	r3, #32
 8008546:	f040 80af 	bne.w	80086a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	88db      	ldrh	r3, [r3, #6]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d03a      	beq.n	80085c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	b25b      	sxtb	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	da1b      	bge.n	8008594 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	33b0      	adds	r3, #176	; 0xb0
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008572:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	88d2      	ldrh	r2, [r2, #6]
 8008578:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	88db      	ldrh	r3, [r3, #6]
 800857e:	2b07      	cmp	r3, #7
 8008580:	bf28      	it	cs
 8008582:	2307      	movcs	r3, #7
 8008584:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	89fa      	ldrh	r2, [r7, #14]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 fdb3 	bl	800a0f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008592:	e090      	b.n	80086b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	785a      	ldrb	r2, [r3, #1]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	88db      	ldrh	r3, [r3, #6]
 80085a2:	2b3f      	cmp	r3, #63	; 0x3f
 80085a4:	d803      	bhi.n	80085ae <USBD_CDC_Setup+0xa6>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	88db      	ldrh	r3, [r3, #6]
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	e000      	b.n	80085b0 <USBD_CDC_Setup+0xa8>
 80085ae:	2240      	movs	r2, #64	; 0x40
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80085b6:	6939      	ldr	r1, [r7, #16]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80085be:	461a      	mov	r2, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fdc5 	bl	800a150 <USBD_CtlPrepareRx>
      break;
 80085c6:	e076      	b.n	80086b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	33b0      	adds	r3, #176	; 0xb0
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	7850      	ldrb	r0, [r2, #1]
 80085de:	2200      	movs	r2, #0
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	4798      	blx	r3
      break;
 80085e4:	e067      	b.n	80086b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	2b0b      	cmp	r3, #11
 80085ec:	d851      	bhi.n	8008692 <USBD_CDC_Setup+0x18a>
 80085ee:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <USBD_CDC_Setup+0xec>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008625 	.word	0x08008625
 80085f8:	080086a1 	.word	0x080086a1
 80085fc:	08008693 	.word	0x08008693
 8008600:	08008693 	.word	0x08008693
 8008604:	08008693 	.word	0x08008693
 8008608:	08008693 	.word	0x08008693
 800860c:	08008693 	.word	0x08008693
 8008610:	08008693 	.word	0x08008693
 8008614:	08008693 	.word	0x08008693
 8008618:	08008693 	.word	0x08008693
 800861c:	0800864f 	.word	0x0800864f
 8008620:	08008679 	.word	0x08008679
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b03      	cmp	r3, #3
 800862e:	d107      	bne.n	8008640 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008630:	f107 030a 	add.w	r3, r7, #10
 8008634:	2202      	movs	r2, #2
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fd5d 	bl	800a0f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800863e:	e032      	b.n	80086a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f001 fce7 	bl	800a016 <USBD_CtlError>
            ret = USBD_FAIL;
 8008648:	2303      	movs	r3, #3
 800864a:	75fb      	strb	r3, [r7, #23]
          break;
 800864c:	e02b      	b.n	80086a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b03      	cmp	r3, #3
 8008658:	d107      	bne.n	800866a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800865a:	f107 030d 	add.w	r3, r7, #13
 800865e:	2201      	movs	r2, #1
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 fd48 	bl	800a0f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008668:	e01d      	b.n	80086a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fcd2 	bl	800a016 <USBD_CtlError>
            ret = USBD_FAIL;
 8008672:	2303      	movs	r3, #3
 8008674:	75fb      	strb	r3, [r7, #23]
          break;
 8008676:	e016      	b.n	80086a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b03      	cmp	r3, #3
 8008682:	d00f      	beq.n	80086a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 fcc5 	bl	800a016 <USBD_CtlError>
            ret = USBD_FAIL;
 800868c:	2303      	movs	r3, #3
 800868e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008690:	e008      	b.n	80086a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fcbe 	bl	800a016 <USBD_CtlError>
          ret = USBD_FAIL;
 800869a:	2303      	movs	r3, #3
 800869c:	75fb      	strb	r3, [r7, #23]
          break;
 800869e:	e002      	b.n	80086a6 <USBD_CDC_Setup+0x19e>
          break;
 80086a0:	bf00      	nop
 80086a2:	e008      	b.n	80086b6 <USBD_CDC_Setup+0x1ae>
          break;
 80086a4:	bf00      	nop
      }
      break;
 80086a6:	e006      	b.n	80086b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fcb3 	bl	800a016 <USBD_CtlError>
      ret = USBD_FAIL;
 80086b0:	2303      	movs	r3, #3
 80086b2:	75fb      	strb	r3, [r7, #23]
      break;
 80086b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	32b0      	adds	r2, #176	; 0xb0
 80086de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e065      	b.n	80087b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	32b0      	adds	r2, #176	; 0xb0
 80086f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	f003 020f 	and.w	r2, r3, #15
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3318      	adds	r3, #24
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d02f      	beq.n	8008774 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	f003 020f 	and.w	r2, r3, #15
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	3318      	adds	r3, #24
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	f003 010f 	and.w	r1, r3, #15
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	460b      	mov	r3, r1
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	440b      	add	r3, r1
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4403      	add	r3, r0
 800873c:	3348      	adds	r3, #72	; 0x48
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	fbb2 f1f3 	udiv	r1, r2, r3
 8008744:	fb01 f303 	mul.w	r3, r1, r3
 8008748:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800874a:	2b00      	cmp	r3, #0
 800874c:	d112      	bne.n	8008774 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	f003 020f 	and.w	r2, r3, #15
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	3318      	adds	r3, #24
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008766:	78f9      	ldrb	r1, [r7, #3]
 8008768:	2300      	movs	r3, #0
 800876a:	2200      	movs	r2, #0
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f002 fa10 	bl	800ab92 <USBD_LL_Transmit>
 8008772:	e01f      	b.n	80087b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	33b0      	adds	r3, #176	; 0xb0
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d010      	beq.n	80087b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	33b0      	adds	r3, #176	; 0xb0
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80087b0:	78fa      	ldrb	r2, [r7, #3]
 80087b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	32b0      	adds	r2, #176	; 0xb0
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	32b0      	adds	r2, #176	; 0xb0
 80087e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e01a      	b.n	8008826 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f002 fa0e 	bl	800ac16 <USBD_LL_GetRxDataSize>
 80087fa:	4602      	mov	r2, r0
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	33b0      	adds	r3, #176	; 0xb0
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008820:	4611      	mov	r1, r2
 8008822:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	32b0      	adds	r2, #176	; 0xb0
 8008840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008844:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800884c:	2303      	movs	r3, #3
 800884e:	e025      	b.n	800889c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	33b0      	adds	r3, #176	; 0xb0
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d01a      	beq.n	800889a <USBD_CDC_EP0_RxReady+0x6c>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800886a:	2bff      	cmp	r3, #255	; 0xff
 800886c:	d015      	beq.n	800889a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	33b0      	adds	r3, #176	; 0xb0
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008886:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800888e:	b292      	uxth	r2, r2
 8008890:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	22ff      	movs	r2, #255	; 0xff
 8008896:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088ac:	2182      	movs	r1, #130	; 0x82
 80088ae:	4818      	ldr	r0, [pc, #96]	; (8008910 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088b0:	f000 fd4f 	bl	8009352 <USBD_GetEpDesc>
 80088b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088b6:	2101      	movs	r1, #1
 80088b8:	4815      	ldr	r0, [pc, #84]	; (8008910 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088ba:	f000 fd4a 	bl	8009352 <USBD_GetEpDesc>
 80088be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088c0:	2181      	movs	r1, #129	; 0x81
 80088c2:	4813      	ldr	r0, [pc, #76]	; (8008910 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088c4:	f000 fd45 	bl	8009352 <USBD_GetEpDesc>
 80088c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2210      	movs	r2, #16
 80088d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2200      	movs	r2, #0
 80088e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e4:	711a      	strb	r2, [r3, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088f8:	711a      	strb	r2, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2243      	movs	r2, #67	; 0x43
 8008902:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008904:	4b02      	ldr	r3, [pc, #8]	; (8008910 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000054 	.word	0x20000054

08008914 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800891c:	2182      	movs	r1, #130	; 0x82
 800891e:	4818      	ldr	r0, [pc, #96]	; (8008980 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008920:	f000 fd17 	bl	8009352 <USBD_GetEpDesc>
 8008924:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008926:	2101      	movs	r1, #1
 8008928:	4815      	ldr	r0, [pc, #84]	; (8008980 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800892a:	f000 fd12 	bl	8009352 <USBD_GetEpDesc>
 800892e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008930:	2181      	movs	r1, #129	; 0x81
 8008932:	4813      	ldr	r0, [pc, #76]	; (8008980 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008934:	f000 fd0d 	bl	8009352 <USBD_GetEpDesc>
 8008938:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2210      	movs	r2, #16
 8008944:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d006      	beq.n	800895a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2200      	movs	r2, #0
 8008950:	711a      	strb	r2, [r3, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f042 0202 	orr.w	r2, r2, #2
 8008958:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d006      	beq.n	800896e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	711a      	strb	r2, [r3, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f042 0202 	orr.w	r2, r2, #2
 800896c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2243      	movs	r2, #67	; 0x43
 8008972:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008974:	4b02      	ldr	r3, [pc, #8]	; (8008980 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000054 	.word	0x20000054

08008984 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800898c:	2182      	movs	r1, #130	; 0x82
 800898e:	4818      	ldr	r0, [pc, #96]	; (80089f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008990:	f000 fcdf 	bl	8009352 <USBD_GetEpDesc>
 8008994:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008996:	2101      	movs	r1, #1
 8008998:	4815      	ldr	r0, [pc, #84]	; (80089f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800899a:	f000 fcda 	bl	8009352 <USBD_GetEpDesc>
 800899e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089a0:	2181      	movs	r1, #129	; 0x81
 80089a2:	4813      	ldr	r0, [pc, #76]	; (80089f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089a4:	f000 fcd5 	bl	8009352 <USBD_GetEpDesc>
 80089a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2210      	movs	r2, #16
 80089b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2200      	movs	r2, #0
 80089c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089c4:	711a      	strb	r2, [r3, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d006      	beq.n	80089de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089d8:	711a      	strb	r2, [r3, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2243      	movs	r2, #67	; 0x43
 80089e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20000054 	.word	0x20000054

080089f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	220a      	movs	r2, #10
 8008a00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a02:	4b03      	ldr	r3, [pc, #12]	; (8008a10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	20000010 	.word	0x20000010

08008a14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e009      	b.n	8008a3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	33b0      	adds	r3, #176	; 0xb0
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	32b0      	adds	r2, #176	; 0xb0
 8008a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a62:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e008      	b.n	8008a80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	371c      	adds	r7, #28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	32b0      	adds	r2, #176	; 0xb0
 8008aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e004      	b.n	8008aba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
	...

08008ac8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	32b0      	adds	r2, #176	; 0xb0
 8008ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ade:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	32b0      	adds	r2, #176	; 0xb0
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e025      	b.n	8008b46 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d11f      	bne.n	8008b44 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008b0c:	4b10      	ldr	r3, [pc, #64]	; (8008b50 <USBD_CDC_TransmitPacket+0x88>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f003 020f 	and.w	r2, r3, #15
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4403      	add	r3, r0
 8008b26:	3318      	adds	r3, #24
 8008b28:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008b2a:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <USBD_CDC_TransmitPacket+0x88>)
 8008b2c:	7819      	ldrb	r1, [r3, #0]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f002 f829 	bl	800ab92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000097 	.word	0x20000097

08008b54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	32b0      	adds	r2, #176	; 0xb0
 8008b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	32b0      	adds	r2, #176	; 0xb0
 8008b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e018      	b.n	8008bb4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	7c1b      	ldrb	r3, [r3, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	; (8008bbc <USBD_CDC_ReceivePacket+0x68>)
 8008b8c:	7819      	ldrb	r1, [r3, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f002 f81b 	bl	800abd4 <USBD_LL_PrepareReceive>
 8008b9e:	e008      	b.n	8008bb2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ba0:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <USBD_CDC_ReceivePacket+0x68>)
 8008ba2:	7819      	ldrb	r1, [r3, #0]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008baa:	2340      	movs	r3, #64	; 0x40
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f002 f811 	bl	800abd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000098 	.word	0x20000098

08008bc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e01f      	b.n	8008c18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	79fa      	ldrb	r2, [r7, #7]
 8008c0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f001 fe8b 	bl	800a928 <USBD_LL_Init>
 8008c12:	4603      	mov	r3, r0
 8008c14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e025      	b.n	8008c84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	32ae      	adds	r2, #174	; 0xae
 8008c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00f      	beq.n	8008c74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32ae      	adds	r2, #174	; 0xae
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	f107 020e 	add.w	r2, r7, #14
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 fe93 	bl	800a9c0 <USBD_LL_Start>
 8008c9a:	4603      	mov	r3, r0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d009      	beq.n	8008ce8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	78fa      	ldrb	r2, [r7, #3]
 8008cde:	4611      	mov	r1, r2
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f001 f932 	bl	8009fa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d01a      	beq.n	8008d98 <USBD_LL_SetupStage+0x72>
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d822      	bhi.n	8008dac <USBD_LL_SetupStage+0x86>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <USBD_LL_SetupStage+0x4a>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d00a      	beq.n	8008d84 <USBD_LL_SetupStage+0x5e>
 8008d6e:	e01d      	b.n	8008dac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fb5f 	bl	800943c <USBD_StdDevReq>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73fb      	strb	r3, [r7, #15]
      break;
 8008d82:	e020      	b.n	8008dc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fbc7 	bl	8009520 <USBD_StdItfReq>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]
      break;
 8008d96:	e016      	b.n	8008dc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fc29 	bl	80095f8 <USBD_StdEPReq>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
      break;
 8008daa:	e00c      	b.n	8008dc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008db2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 fe60 	bl	800aa80 <USBD_LL_StallEP>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc4:	bf00      	nop
  }

  return ret;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d16e      	bne.n	8008ec6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	f040 8098 	bne.w	8008f2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d913      	bls.n	8008e30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	1ad2      	subs	r2, r2, r3
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	bf28      	it	cs
 8008e22:	4613      	movcs	r3, r2
 8008e24:	461a      	mov	r2, r3
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f001 f9ae 	bl	800a18a <USBD_CtlContinueRx>
 8008e2e:	e07d      	b.n	8008f2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e36:	f003 031f 	and.w	r3, r3, #31
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d014      	beq.n	8008e68 <USBD_LL_DataOutStage+0x98>
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d81d      	bhi.n	8008e7e <USBD_LL_DataOutStage+0xae>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <USBD_LL_DataOutStage+0x7c>
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d003      	beq.n	8008e52 <USBD_LL_DataOutStage+0x82>
 8008e4a:	e018      	b.n	8008e7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e50:	e018      	b.n	8008e84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fa5e 	bl	800931e <USBD_CoreFindIF>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75bb      	strb	r3, [r7, #22]
            break;
 8008e66:	e00d      	b.n	8008e84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	4619      	mov	r1, r3
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 fa60 	bl	8009338 <USBD_CoreFindEP>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	75bb      	strb	r3, [r7, #22]
            break;
 8008e7c:	e002      	b.n	8008e84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75bb      	strb	r3, [r7, #22]
            break;
 8008e82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e84:	7dbb      	ldrb	r3, [r7, #22]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d119      	bne.n	8008ebe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d113      	bne.n	8008ebe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e96:	7dba      	ldrb	r2, [r7, #22]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	32ae      	adds	r2, #174	; 0xae
 8008e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ea6:	7dba      	ldrb	r2, [r7, #22]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008eae:	7dba      	ldrb	r2, [r7, #22]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	32ae      	adds	r2, #174	; 0xae
 8008eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f001 f974 	bl	800a1ac <USBD_CtlSendStatus>
 8008ec4:	e032      	b.n	8008f2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ec6:	7afb      	ldrb	r3, [r7, #11]
 8008ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	4619      	mov	r1, r3
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fa31 	bl	8009338 <USBD_CoreFindEP>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eda:	7dbb      	ldrb	r3, [r7, #22]
 8008edc:	2bff      	cmp	r3, #255	; 0xff
 8008ede:	d025      	beq.n	8008f2c <USBD_LL_DataOutStage+0x15c>
 8008ee0:	7dbb      	ldrb	r3, [r7, #22]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d122      	bne.n	8008f2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d117      	bne.n	8008f22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ef2:	7dba      	ldrb	r2, [r7, #22]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	32ae      	adds	r2, #174	; 0xae
 8008ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00f      	beq.n	8008f22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f02:	7dba      	ldrb	r2, [r7, #22]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f0a:	7dba      	ldrb	r2, [r7, #22]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	32ae      	adds	r2, #174	; 0xae
 8008f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	7afa      	ldrb	r2, [r7, #11]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	4798      	blx	r3
 8008f1e:	4603      	mov	r3, r0
 8008f20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	e000      	b.n	8008f2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b086      	sub	sp, #24
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	607a      	str	r2, [r7, #4]
 8008f42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d16f      	bne.n	800902a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3314      	adds	r3, #20
 8008f4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d15a      	bne.n	8009010 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	689a      	ldr	r2, [r3, #8]
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d914      	bls.n	8008f90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f001 f8d6 	bl	800a12e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f82:	2300      	movs	r3, #0
 8008f84:	2200      	movs	r2, #0
 8008f86:	2100      	movs	r1, #0
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f001 fe23 	bl	800abd4 <USBD_LL_PrepareReceive>
 8008f8e:	e03f      	b.n	8009010 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d11c      	bne.n	8008fd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d316      	bcc.n	8008fd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d20f      	bcs.n	8008fd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2100      	movs	r1, #0
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f001 f8b7 	bl	800a12e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2100      	movs	r1, #0
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f001 fe00 	bl	800abd4 <USBD_LL_PrepareReceive>
 8008fd4:	e01c      	b.n	8009010 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d10f      	bne.n	8009002 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d009      	beq.n	8009002 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009002:	2180      	movs	r1, #128	; 0x80
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f001 fd3b 	bl	800aa80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f001 f8e1 	bl	800a1d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d03a      	beq.n	8009090 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7ff fe42 	bl	8008ca4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009028:	e032      	b.n	8009090 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009030:	b2db      	uxtb	r3, r3
 8009032:	4619      	mov	r1, r3
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 f97f 	bl	8009338 <USBD_CoreFindEP>
 800903a:	4603      	mov	r3, r0
 800903c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	2bff      	cmp	r3, #255	; 0xff
 8009042:	d025      	beq.n	8009090 <USBD_LL_DataInStage+0x15a>
 8009044:	7dfb      	ldrb	r3, [r7, #23]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d122      	bne.n	8009090 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b03      	cmp	r3, #3
 8009054:	d11c      	bne.n	8009090 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009056:	7dfa      	ldrb	r2, [r7, #23]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	32ae      	adds	r2, #174	; 0xae
 800905c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d014      	beq.n	8009090 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009066:	7dfa      	ldrb	r2, [r7, #23]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800906e:	7dfa      	ldrb	r2, [r7, #23]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	32ae      	adds	r2, #174	; 0xae
 8009074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	7afa      	ldrb	r2, [r7, #11]
 800907c:	4611      	mov	r1, r2
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	4798      	blx	r3
 8009082:	4603      	mov	r3, r0
 8009084:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009086:	7dbb      	ldrb	r3, [r7, #22]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800908c:	7dbb      	ldrb	r3, [r7, #22]
 800908e:	e000      	b.n	8009092 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d014      	beq.n	8009100 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00e      	beq.n	8009100 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	6852      	ldr	r2, [r2, #4]
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	4611      	mov	r1, r2
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80090fc:	2303      	movs	r3, #3
 80090fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009100:	2340      	movs	r3, #64	; 0x40
 8009102:	2200      	movs	r2, #0
 8009104:	2100      	movs	r1, #0
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f001 fc75 	bl	800a9f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2240      	movs	r2, #64	; 0x40
 8009118:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	2200      	movs	r2, #0
 8009120:	2180      	movs	r1, #128	; 0x80
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 fc67 	bl	800a9f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2240      	movs	r2, #64	; 0x40
 8009132:	621a      	str	r2, [r3, #32]

  return ret;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	b2da      	uxtb	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2204      	movs	r2, #4
 8009178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b04      	cmp	r3, #4
 800919c:	d106      	bne.n	80091ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d110      	bne.n	80091f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00b      	beq.n	80091f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	32ae      	adds	r2, #174	; 0xae
 8009210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009218:	2303      	movs	r3, #3
 800921a:	e01c      	b.n	8009256 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b03      	cmp	r3, #3
 8009226:	d115      	bne.n	8009254 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	32ae      	adds	r2, #174	; 0xae
 8009232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	32ae      	adds	r2, #174	; 0xae
 8009246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	78fa      	ldrb	r2, [r7, #3]
 800924e:	4611      	mov	r1, r2
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	32ae      	adds	r2, #174	; 0xae
 8009274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	e01c      	b.n	80092ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b03      	cmp	r3, #3
 800928a:	d115      	bne.n	80092b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	32ae      	adds	r2, #174	; 0xae
 8009296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	32ae      	adds	r2, #174	; 0xae
 80092aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	4611      	mov	r1, r2
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00e      	beq.n	8009314 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6852      	ldr	r2, [r2, #4]
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	4611      	mov	r1, r2
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	4798      	blx	r3
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009310:	2303      	movs	r3, #3
 8009312:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	460b      	mov	r3, r1
 8009328:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800932a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800932c:	4618      	mov	r0, r3
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009344:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009346:	4618      	mov	r0, r3
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009366:	2300      	movs	r3, #0
 8009368:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	885b      	ldrh	r3, [r3, #2]
 800936e:	b29a      	uxth	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	b29b      	uxth	r3, r3
 8009376:	429a      	cmp	r2, r3
 8009378:	d920      	bls.n	80093bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009382:	e013      	b.n	80093ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009384:	f107 030a 	add.w	r3, r7, #10
 8009388:	4619      	mov	r1, r3
 800938a:	6978      	ldr	r0, [r7, #20]
 800938c:	f000 f81b 	bl	80093c6 <USBD_GetNextDesc>
 8009390:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	785b      	ldrb	r3, [r3, #1]
 8009396:	2b05      	cmp	r3, #5
 8009398:	d108      	bne.n	80093ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	789b      	ldrb	r3, [r3, #2]
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d008      	beq.n	80093ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093a8:	2300      	movs	r3, #0
 80093aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	885b      	ldrh	r3, [r3, #2]
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	897b      	ldrh	r3, [r7, #10]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d8e5      	bhi.n	8009384 <USBD_GetEpDesc+0x32>
 80093b8:	e000      	b.n	80093bc <USBD_GetEpDesc+0x6a>
          break;
 80093ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093bc:	693b      	ldr	r3, [r7, #16]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	881a      	ldrh	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	4413      	add	r3, r2
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4413      	add	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093f2:	68fb      	ldr	r3, [r7, #12]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	3301      	adds	r3, #1
 8009416:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800941e:	8a3b      	ldrh	r3, [r7, #16]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	b21a      	sxth	r2, r3
 8009424:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009428:	4313      	orrs	r3, r2
 800942a:	b21b      	sxth	r3, r3
 800942c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800942e:	89fb      	ldrh	r3, [r7, #14]
}
 8009430:	4618      	mov	r0, r3
 8009432:	371c      	adds	r7, #28
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009452:	2b40      	cmp	r3, #64	; 0x40
 8009454:	d005      	beq.n	8009462 <USBD_StdDevReq+0x26>
 8009456:	2b40      	cmp	r3, #64	; 0x40
 8009458:	d857      	bhi.n	800950a <USBD_StdDevReq+0xce>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00f      	beq.n	800947e <USBD_StdDevReq+0x42>
 800945e:	2b20      	cmp	r3, #32
 8009460:	d153      	bne.n	800950a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	32ae      	adds	r2, #174	; 0xae
 800946c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	4798      	blx	r3
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
      break;
 800947c:	e04a      	b.n	8009514 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	785b      	ldrb	r3, [r3, #1]
 8009482:	2b09      	cmp	r3, #9
 8009484:	d83b      	bhi.n	80094fe <USBD_StdDevReq+0xc2>
 8009486:	a201      	add	r2, pc, #4	; (adr r2, 800948c <USBD_StdDevReq+0x50>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094e1 	.word	0x080094e1
 8009490:	080094f5 	.word	0x080094f5
 8009494:	080094ff 	.word	0x080094ff
 8009498:	080094eb 	.word	0x080094eb
 800949c:	080094ff 	.word	0x080094ff
 80094a0:	080094bf 	.word	0x080094bf
 80094a4:	080094b5 	.word	0x080094b5
 80094a8:	080094ff 	.word	0x080094ff
 80094ac:	080094d7 	.word	0x080094d7
 80094b0:	080094c9 	.word	0x080094c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa3c 	bl	8009934 <USBD_GetDescriptor>
          break;
 80094bc:	e024      	b.n	8009508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fbcb 	bl	8009c5c <USBD_SetAddress>
          break;
 80094c6:	e01f      	b.n	8009508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fc0a 	bl	8009ce4 <USBD_SetConfig>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
          break;
 80094d4:	e018      	b.n	8009508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fcad 	bl	8009e38 <USBD_GetConfig>
          break;
 80094de:	e013      	b.n	8009508 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fcde 	bl	8009ea4 <USBD_GetStatus>
          break;
 80094e8:	e00e      	b.n	8009508 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fd0d 	bl	8009f0c <USBD_SetFeature>
          break;
 80094f2:	e009      	b.n	8009508 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fd31 	bl	8009f5e <USBD_ClrFeature>
          break;
 80094fc:	e004      	b.n	8009508 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fd88 	bl	800a016 <USBD_CtlError>
          break;
 8009506:	bf00      	nop
      }
      break;
 8009508:	e004      	b.n	8009514 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fd82 	bl	800a016 <USBD_CtlError>
      break;
 8009512:	bf00      	nop
  }

  return ret;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop

08009520 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009536:	2b40      	cmp	r3, #64	; 0x40
 8009538:	d005      	beq.n	8009546 <USBD_StdItfReq+0x26>
 800953a:	2b40      	cmp	r3, #64	; 0x40
 800953c:	d852      	bhi.n	80095e4 <USBD_StdItfReq+0xc4>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <USBD_StdItfReq+0x26>
 8009542:	2b20      	cmp	r3, #32
 8009544:	d14e      	bne.n	80095e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954c:	b2db      	uxtb	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	2b02      	cmp	r3, #2
 8009552:	d840      	bhi.n	80095d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	889b      	ldrh	r3, [r3, #4]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b01      	cmp	r3, #1
 800955c:	d836      	bhi.n	80095cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	889b      	ldrh	r3, [r3, #4]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fed9 	bl	800931e <USBD_CoreFindIF>
 800956c:	4603      	mov	r3, r0
 800956e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	2bff      	cmp	r3, #255	; 0xff
 8009574:	d01d      	beq.n	80095b2 <USBD_StdItfReq+0x92>
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d11a      	bne.n	80095b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800957c:	7bba      	ldrb	r2, [r7, #14]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	32ae      	adds	r2, #174	; 0xae
 8009582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00f      	beq.n	80095ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800958c:	7bba      	ldrb	r2, [r7, #14]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009594:	7bba      	ldrb	r2, [r7, #14]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	32ae      	adds	r2, #174	; 0xae
 800959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
 80095a6:	4603      	mov	r3, r0
 80095a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095aa:	e004      	b.n	80095b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095ac:	2303      	movs	r3, #3
 80095ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095b0:	e001      	b.n	80095b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095b2:	2303      	movs	r3, #3
 80095b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d110      	bne.n	80095e0 <USBD_StdItfReq+0xc0>
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10d      	bne.n	80095e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fdf1 	bl	800a1ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095ca:	e009      	b.n	80095e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fd21 	bl	800a016 <USBD_CtlError>
          break;
 80095d4:	e004      	b.n	80095e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fd1c 	bl	800a016 <USBD_CtlError>
          break;
 80095de:	e000      	b.n	80095e2 <USBD_StdItfReq+0xc2>
          break;
 80095e0:	bf00      	nop
      }
      break;
 80095e2:	e004      	b.n	80095ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fd15 	bl	800a016 <USBD_CtlError>
      break;
 80095ec:	bf00      	nop
  }

  return ret;
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009614:	2b40      	cmp	r3, #64	; 0x40
 8009616:	d007      	beq.n	8009628 <USBD_StdEPReq+0x30>
 8009618:	2b40      	cmp	r3, #64	; 0x40
 800961a:	f200 817f 	bhi.w	800991c <USBD_StdEPReq+0x324>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d02a      	beq.n	8009678 <USBD_StdEPReq+0x80>
 8009622:	2b20      	cmp	r3, #32
 8009624:	f040 817a 	bne.w	800991c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff fe83 	bl	8009338 <USBD_CoreFindEP>
 8009632:	4603      	mov	r3, r0
 8009634:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009636:	7b7b      	ldrb	r3, [r7, #13]
 8009638:	2bff      	cmp	r3, #255	; 0xff
 800963a:	f000 8174 	beq.w	8009926 <USBD_StdEPReq+0x32e>
 800963e:	7b7b      	ldrb	r3, [r7, #13]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 8170 	bne.w	8009926 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009646:	7b7a      	ldrb	r2, [r7, #13]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800964e:	7b7a      	ldrb	r2, [r7, #13]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	32ae      	adds	r2, #174	; 0xae
 8009654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 8163 	beq.w	8009926 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009660:	7b7a      	ldrb	r2, [r7, #13]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	32ae      	adds	r2, #174	; 0xae
 8009666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	4798      	blx	r3
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009676:	e156      	b.n	8009926 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	2b03      	cmp	r3, #3
 800967e:	d008      	beq.n	8009692 <USBD_StdEPReq+0x9a>
 8009680:	2b03      	cmp	r3, #3
 8009682:	f300 8145 	bgt.w	8009910 <USBD_StdEPReq+0x318>
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 809b 	beq.w	80097c2 <USBD_StdEPReq+0x1ca>
 800968c:	2b01      	cmp	r3, #1
 800968e:	d03c      	beq.n	800970a <USBD_StdEPReq+0x112>
 8009690:	e13e      	b.n	8009910 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b02      	cmp	r3, #2
 800969c:	d002      	beq.n	80096a4 <USBD_StdEPReq+0xac>
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d016      	beq.n	80096d0 <USBD_StdEPReq+0xd8>
 80096a2:	e02c      	b.n	80096fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <USBD_StdEPReq+0xce>
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	2b80      	cmp	r3, #128	; 0x80
 80096ae:	d00a      	beq.n	80096c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 f9e3 	bl	800aa80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096ba:	2180      	movs	r1, #128	; 0x80
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 f9df 	bl	800aa80 <USBD_LL_StallEP>
 80096c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096c4:	e020      	b.n	8009708 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fca4 	bl	800a016 <USBD_CtlError>
              break;
 80096ce:	e01b      	b.n	8009708 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	885b      	ldrh	r3, [r3, #2]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10e      	bne.n	80096f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00b      	beq.n	80096f6 <USBD_StdEPReq+0xfe>
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	2b80      	cmp	r3, #128	; 0x80
 80096e2:	d008      	beq.n	80096f6 <USBD_StdEPReq+0xfe>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	88db      	ldrh	r3, [r3, #6]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 f9c5 	bl	800aa80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fd58 	bl	800a1ac <USBD_CtlSendStatus>

              break;
 80096fc:	e004      	b.n	8009708 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc88 	bl	800a016 <USBD_CtlError>
              break;
 8009706:	bf00      	nop
          }
          break;
 8009708:	e107      	b.n	800991a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b02      	cmp	r3, #2
 8009714:	d002      	beq.n	800971c <USBD_StdEPReq+0x124>
 8009716:	2b03      	cmp	r3, #3
 8009718:	d016      	beq.n	8009748 <USBD_StdEPReq+0x150>
 800971a:	e04b      	b.n	80097b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800971c:	7bbb      	ldrb	r3, [r7, #14]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00d      	beq.n	800973e <USBD_StdEPReq+0x146>
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d00a      	beq.n	800973e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 f9a7 	bl	800aa80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009732:	2180      	movs	r1, #128	; 0x80
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 f9a3 	bl	800aa80 <USBD_LL_StallEP>
 800973a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800973c:	e040      	b.n	80097c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fc68 	bl	800a016 <USBD_CtlError>
              break;
 8009746:	e03b      	b.n	80097c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	885b      	ldrh	r3, [r3, #2]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d136      	bne.n	80097be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009756:	2b00      	cmp	r3, #0
 8009758:	d004      	beq.n	8009764 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 f9ad 	bl	800aabe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fd21 	bl	800a1ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fde2 	bl	8009338 <USBD_CoreFindEP>
 8009774:	4603      	mov	r3, r0
 8009776:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009778:	7b7b      	ldrb	r3, [r7, #13]
 800977a:	2bff      	cmp	r3, #255	; 0xff
 800977c:	d01f      	beq.n	80097be <USBD_StdEPReq+0x1c6>
 800977e:	7b7b      	ldrb	r3, [r7, #13]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d11c      	bne.n	80097be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009784:	7b7a      	ldrb	r2, [r7, #13]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800978c:	7b7a      	ldrb	r2, [r7, #13]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	32ae      	adds	r2, #174	; 0xae
 8009792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d010      	beq.n	80097be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800979c:	7b7a      	ldrb	r2, [r7, #13]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	32ae      	adds	r2, #174	; 0xae
 80097a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097b2:	e004      	b.n	80097be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fc2d 	bl	800a016 <USBD_CtlError>
              break;
 80097bc:	e000      	b.n	80097c0 <USBD_StdEPReq+0x1c8>
              break;
 80097be:	bf00      	nop
          }
          break;
 80097c0:	e0ab      	b.n	800991a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d002      	beq.n	80097d4 <USBD_StdEPReq+0x1dc>
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d032      	beq.n	8009838 <USBD_StdEPReq+0x240>
 80097d2:	e097      	b.n	8009904 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d007      	beq.n	80097ea <USBD_StdEPReq+0x1f2>
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	2b80      	cmp	r3, #128	; 0x80
 80097de:	d004      	beq.n	80097ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fc17 	bl	800a016 <USBD_CtlError>
                break;
 80097e8:	e091      	b.n	800990e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	da0b      	bge.n	800980a <USBD_StdEPReq+0x212>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	3310      	adds	r3, #16
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	4413      	add	r3, r2
 8009806:	3304      	adds	r3, #4
 8009808:	e00b      	b.n	8009822 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4413      	add	r3, r2
 8009820:	3304      	adds	r3, #4
 8009822:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2202      	movs	r2, #2
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fc61 	bl	800a0f8 <USBD_CtlSendData>
              break;
 8009836:	e06a      	b.n	800990e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800983c:	2b00      	cmp	r3, #0
 800983e:	da11      	bge.n	8009864 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	f003 020f 	and.w	r2, r3, #15
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	3324      	adds	r3, #36	; 0x24
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d117      	bne.n	800988a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fbda 	bl	800a016 <USBD_CtlError>
                  break;
 8009862:	e054      	b.n	800990e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	f003 020f 	and.w	r2, r3, #15
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	440b      	add	r3, r1
 8009876:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d104      	bne.n	800988a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fbc7 	bl	800a016 <USBD_CtlError>
                  break;
 8009888:	e041      	b.n	800990e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800988a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800988e:	2b00      	cmp	r3, #0
 8009890:	da0b      	bge.n	80098aa <USBD_StdEPReq+0x2b2>
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	3310      	adds	r3, #16
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	4413      	add	r3, r2
 80098a6:	3304      	adds	r3, #4
 80098a8:	e00b      	b.n	80098c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	4413      	add	r3, r2
 80098c0:	3304      	adds	r3, #4
 80098c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d002      	beq.n	80098d0 <USBD_StdEPReq+0x2d8>
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	2b80      	cmp	r3, #128	; 0x80
 80098ce:	d103      	bne.n	80098d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	e00e      	b.n	80098f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f90d 	bl	800aafc <USBD_LL_IsStallEP>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2201      	movs	r2, #1
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e002      	b.n	80098f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2202      	movs	r2, #2
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fbfb 	bl	800a0f8 <USBD_CtlSendData>
              break;
 8009902:	e004      	b.n	800990e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fb85 	bl	800a016 <USBD_CtlError>
              break;
 800990c:	bf00      	nop
          }
          break;
 800990e:	e004      	b.n	800991a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fb7f 	bl	800a016 <USBD_CtlError>
          break;
 8009918:	bf00      	nop
      }
      break;
 800991a:	e005      	b.n	8009928 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fb79 	bl	800a016 <USBD_CtlError>
      break;
 8009924:	e000      	b.n	8009928 <USBD_StdEPReq+0x330>
      break;
 8009926:	bf00      	nop
  }

  return ret;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	885b      	ldrh	r3, [r3, #2]
 800994e:	0a1b      	lsrs	r3, r3, #8
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	2b0e      	cmp	r3, #14
 8009956:	f200 8152 	bhi.w	8009bfe <USBD_GetDescriptor+0x2ca>
 800995a:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <USBD_GetDescriptor+0x2c>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	080099d1 	.word	0x080099d1
 8009964:	080099e9 	.word	0x080099e9
 8009968:	08009a29 	.word	0x08009a29
 800996c:	08009bff 	.word	0x08009bff
 8009970:	08009bff 	.word	0x08009bff
 8009974:	08009b9f 	.word	0x08009b9f
 8009978:	08009bcb 	.word	0x08009bcb
 800997c:	08009bff 	.word	0x08009bff
 8009980:	08009bff 	.word	0x08009bff
 8009984:	08009bff 	.word	0x08009bff
 8009988:	08009bff 	.word	0x08009bff
 800998c:	08009bff 	.word	0x08009bff
 8009990:	08009bff 	.word	0x08009bff
 8009994:	08009bff 	.word	0x08009bff
 8009998:	0800999d 	.word	0x0800999d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00b      	beq.n	80099c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	7c12      	ldrb	r2, [r2, #16]
 80099b4:	f107 0108 	add.w	r1, r7, #8
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099be:	e126      	b.n	8009c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fb27 	bl	800a016 <USBD_CtlError>
        err++;
 80099c8:	7afb      	ldrb	r3, [r7, #11]
 80099ca:	3301      	adds	r3, #1
 80099cc:	72fb      	strb	r3, [r7, #11]
      break;
 80099ce:	e11e      	b.n	8009c0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	7c12      	ldrb	r2, [r2, #16]
 80099dc:	f107 0108 	add.w	r1, r7, #8
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
 80099e4:	60f8      	str	r0, [r7, #12]
      break;
 80099e6:	e112      	b.n	8009c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	7c1b      	ldrb	r3, [r3, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10d      	bne.n	8009a0c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f8:	f107 0208 	add.w	r2, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3301      	adds	r3, #1
 8009a06:	2202      	movs	r2, #2
 8009a08:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a0a:	e100      	b.n	8009c0e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	f107 0208 	add.w	r2, r7, #8
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3301      	adds	r3, #1
 8009a22:	2202      	movs	r2, #2
 8009a24:	701a      	strb	r2, [r3, #0]
      break;
 8009a26:	e0f2      	b.n	8009c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	885b      	ldrh	r3, [r3, #2]
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b05      	cmp	r3, #5
 8009a30:	f200 80ac 	bhi.w	8009b8c <USBD_GetDescriptor+0x258>
 8009a34:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <USBD_GetDescriptor+0x108>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009a55 	.word	0x08009a55
 8009a40:	08009a89 	.word	0x08009a89
 8009a44:	08009abd 	.word	0x08009abd
 8009a48:	08009af1 	.word	0x08009af1
 8009a4c:	08009b25 	.word	0x08009b25
 8009a50:	08009b59 	.word	0x08009b59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00b      	beq.n	8009a78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	7c12      	ldrb	r2, [r2, #16]
 8009a6c:	f107 0108 	add.w	r1, r7, #8
 8009a70:	4610      	mov	r0, r2
 8009a72:	4798      	blx	r3
 8009a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a76:	e091      	b.n	8009b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 facb 	bl	800a016 <USBD_CtlError>
            err++;
 8009a80:	7afb      	ldrb	r3, [r7, #11]
 8009a82:	3301      	adds	r3, #1
 8009a84:	72fb      	strb	r3, [r7, #11]
          break;
 8009a86:	e089      	b.n	8009b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00b      	beq.n	8009aac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	7c12      	ldrb	r2, [r2, #16]
 8009aa0:	f107 0108 	add.w	r1, r7, #8
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4798      	blx	r3
 8009aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aaa:	e077      	b.n	8009b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fab1 	bl	800a016 <USBD_CtlError>
            err++;
 8009ab4:	7afb      	ldrb	r3, [r7, #11]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aba:	e06f      	b.n	8009b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00b      	beq.n	8009ae0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	7c12      	ldrb	r2, [r2, #16]
 8009ad4:	f107 0108 	add.w	r1, r7, #8
 8009ad8:	4610      	mov	r0, r2
 8009ada:	4798      	blx	r3
 8009adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ade:	e05d      	b.n	8009b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fa97 	bl	800a016 <USBD_CtlError>
            err++;
 8009ae8:	7afb      	ldrb	r3, [r7, #11]
 8009aea:	3301      	adds	r3, #1
 8009aec:	72fb      	strb	r3, [r7, #11]
          break;
 8009aee:	e055      	b.n	8009b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00b      	beq.n	8009b14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	7c12      	ldrb	r2, [r2, #16]
 8009b08:	f107 0108 	add.w	r1, r7, #8
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	4798      	blx	r3
 8009b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b12:	e043      	b.n	8009b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fa7d 	bl	800a016 <USBD_CtlError>
            err++;
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	72fb      	strb	r3, [r7, #11]
          break;
 8009b22:	e03b      	b.n	8009b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00b      	beq.n	8009b48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	7c12      	ldrb	r2, [r2, #16]
 8009b3c:	f107 0108 	add.w	r1, r7, #8
 8009b40:	4610      	mov	r0, r2
 8009b42:	4798      	blx	r3
 8009b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b46:	e029      	b.n	8009b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fa63 	bl	800a016 <USBD_CtlError>
            err++;
 8009b50:	7afb      	ldrb	r3, [r7, #11]
 8009b52:	3301      	adds	r3, #1
 8009b54:	72fb      	strb	r3, [r7, #11]
          break;
 8009b56:	e021      	b.n	8009b9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	7c12      	ldrb	r2, [r2, #16]
 8009b70:	f107 0108 	add.w	r1, r7, #8
 8009b74:	4610      	mov	r0, r2
 8009b76:	4798      	blx	r3
 8009b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b7a:	e00f      	b.n	8009b9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fa49 	bl	800a016 <USBD_CtlError>
            err++;
 8009b84:	7afb      	ldrb	r3, [r7, #11]
 8009b86:	3301      	adds	r3, #1
 8009b88:	72fb      	strb	r3, [r7, #11]
          break;
 8009b8a:	e007      	b.n	8009b9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa41 	bl	800a016 <USBD_CtlError>
          err++;
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	3301      	adds	r3, #1
 8009b98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b9a:	bf00      	nop
      }
      break;
 8009b9c:	e037      	b.n	8009c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	7c1b      	ldrb	r3, [r3, #16]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d109      	bne.n	8009bba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bae:	f107 0208 	add.w	r2, r7, #8
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4798      	blx	r3
 8009bb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bb8:	e029      	b.n	8009c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fa2a 	bl	800a016 <USBD_CtlError>
        err++;
 8009bc2:	7afb      	ldrb	r3, [r7, #11]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009bc8:	e021      	b.n	8009c0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	7c1b      	ldrb	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10d      	bne.n	8009bee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bda:	f107 0208 	add.w	r2, r7, #8
 8009bde:	4610      	mov	r0, r2
 8009be0:	4798      	blx	r3
 8009be2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3301      	adds	r3, #1
 8009be8:	2207      	movs	r2, #7
 8009bea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bec:	e00f      	b.n	8009c0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fa10 	bl	800a016 <USBD_CtlError>
        err++;
 8009bf6:	7afb      	ldrb	r3, [r7, #11]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8009bfc:	e007      	b.n	8009c0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa08 	bl	800a016 <USBD_CtlError>
      err++;
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c0c:	bf00      	nop
  }

  if (err != 0U)
 8009c0e:	7afb      	ldrb	r3, [r7, #11]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d11e      	bne.n	8009c52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	88db      	ldrh	r3, [r3, #6]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d016      	beq.n	8009c4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009c1c:	893b      	ldrh	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00e      	beq.n	8009c40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	88da      	ldrh	r2, [r3, #6]
 8009c26:	893b      	ldrh	r3, [r7, #8]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	bf28      	it	cs
 8009c2c:	4613      	movcs	r3, r2
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c32:	893b      	ldrh	r3, [r7, #8]
 8009c34:	461a      	mov	r2, r3
 8009c36:	68f9      	ldr	r1, [r7, #12]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fa5d 	bl	800a0f8 <USBD_CtlSendData>
 8009c3e:	e009      	b.n	8009c54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f9e7 	bl	800a016 <USBD_CtlError>
 8009c48:	e004      	b.n	8009c54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 faae 	bl	800a1ac <USBD_CtlSendStatus>
 8009c50:	e000      	b.n	8009c54 <USBD_GetDescriptor+0x320>
    return;
 8009c52:	bf00      	nop
  }
}
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop

08009c5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	889b      	ldrh	r3, [r3, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d131      	bne.n	8009cd2 <USBD_SetAddress+0x76>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	88db      	ldrh	r3, [r3, #6]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d12d      	bne.n	8009cd2 <USBD_SetAddress+0x76>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	885b      	ldrh	r3, [r3, #2]
 8009c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c7c:	d829      	bhi.n	8009cd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	885b      	ldrh	r3, [r3, #2]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d104      	bne.n	8009ca0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f9bc 	bl	800a016 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c9e:	e01d      	b.n	8009cdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	7bfa      	ldrb	r2, [r7, #15]
 8009ca4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 ff51 	bl	800ab54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa7a 	bl	800a1ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d004      	beq.n	8009cc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cc6:	e009      	b.n	8009cdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd0:	e004      	b.n	8009cdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f99e 	bl	800a016 <USBD_CtlError>
  }
}
 8009cda:	bf00      	nop
 8009cdc:	bf00      	nop
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	4b4e      	ldr	r3, [pc, #312]	; (8009e34 <USBD_SetConfig+0x150>)
 8009cfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cfc:	4b4d      	ldr	r3, [pc, #308]	; (8009e34 <USBD_SetConfig+0x150>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d905      	bls.n	8009d10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f985 	bl	800a016 <USBD_CtlError>
    return USBD_FAIL;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e08c      	b.n	8009e2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d002      	beq.n	8009d22 <USBD_SetConfig+0x3e>
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d029      	beq.n	8009d74 <USBD_SetConfig+0x90>
 8009d20:	e075      	b.n	8009e0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d22:	4b44      	ldr	r3, [pc, #272]	; (8009e34 <USBD_SetConfig+0x150>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d020      	beq.n	8009d6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d2a:	4b42      	ldr	r3, [pc, #264]	; (8009e34 <USBD_SetConfig+0x150>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d34:	4b3f      	ldr	r3, [pc, #252]	; (8009e34 <USBD_SetConfig+0x150>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fe ffbd 	bl	8008cba <USBD_SetClassConfig>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d008      	beq.n	8009d5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f962 	bl	800a016 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2202      	movs	r2, #2
 8009d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d5a:	e065      	b.n	8009e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fa25 	bl	800a1ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2203      	movs	r2, #3
 8009d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d6a:	e05d      	b.n	8009e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fa1d 	bl	800a1ac <USBD_CtlSendStatus>
      break;
 8009d72:	e059      	b.n	8009e28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d74:	4b2f      	ldr	r3, [pc, #188]	; (8009e34 <USBD_SetConfig+0x150>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d112      	bne.n	8009da2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d84:	4b2b      	ldr	r3, [pc, #172]	; (8009e34 <USBD_SetConfig+0x150>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d8e:	4b29      	ldr	r3, [pc, #164]	; (8009e34 <USBD_SetConfig+0x150>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7fe ffac 	bl	8008cf2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fa06 	bl	800a1ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009da0:	e042      	b.n	8009e28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009da2:	4b24      	ldr	r3, [pc, #144]	; (8009e34 <USBD_SetConfig+0x150>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d02a      	beq.n	8009e06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7fe ff9a 	bl	8008cf2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009dbe:	4b1d      	ldr	r3, [pc, #116]	; (8009e34 <USBD_SetConfig+0x150>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009dc8:	4b1a      	ldr	r3, [pc, #104]	; (8009e34 <USBD_SetConfig+0x150>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7fe ff73 	bl	8008cba <USBD_SetClassConfig>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00f      	beq.n	8009dfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f918 	bl	800a016 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7fe ff7f 	bl	8008cf2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2202      	movs	r2, #2
 8009df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dfc:	e014      	b.n	8009e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f9d4 	bl	800a1ac <USBD_CtlSendStatus>
      break;
 8009e04:	e010      	b.n	8009e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f9d0 	bl	800a1ac <USBD_CtlSendStatus>
      break;
 8009e0c:	e00c      	b.n	8009e28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f900 	bl	800a016 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e16:	4b07      	ldr	r3, [pc, #28]	; (8009e34 <USBD_SetConfig+0x150>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7fe ff68 	bl	8008cf2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e22:	2303      	movs	r3, #3
 8009e24:	73fb      	strb	r3, [r7, #15]
      break;
 8009e26:	bf00      	nop
  }

  return ret;
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	200003b4 	.word	0x200003b4

08009e38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	88db      	ldrh	r3, [r3, #6]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d004      	beq.n	8009e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f8e2 	bl	800a016 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e52:	e023      	b.n	8009e9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	dc02      	bgt.n	8009e66 <USBD_GetConfig+0x2e>
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	dc03      	bgt.n	8009e6c <USBD_GetConfig+0x34>
 8009e64:	e015      	b.n	8009e92 <USBD_GetConfig+0x5a>
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d00b      	beq.n	8009e82 <USBD_GetConfig+0x4a>
 8009e6a:	e012      	b.n	8009e92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3308      	adds	r3, #8
 8009e76:	2201      	movs	r2, #1
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f93c 	bl	800a0f8 <USBD_CtlSendData>
        break;
 8009e80:	e00c      	b.n	8009e9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3304      	adds	r3, #4
 8009e86:	2201      	movs	r2, #1
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f934 	bl	800a0f8 <USBD_CtlSendData>
        break;
 8009e90:	e004      	b.n	8009e9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f8be 	bl	800a016 <USBD_CtlError>
        break;
 8009e9a:	bf00      	nop
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d81e      	bhi.n	8009efa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	88db      	ldrh	r3, [r3, #6]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d004      	beq.n	8009ece <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f8a5 	bl	800a016 <USBD_CtlError>
        break;
 8009ecc:	e01a      	b.n	8009f04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d005      	beq.n	8009eea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	f043 0202 	orr.w	r2, r3, #2
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	330c      	adds	r3, #12
 8009eee:	2202      	movs	r2, #2
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f900 	bl	800a0f8 <USBD_CtlSendData>
      break;
 8009ef8:	e004      	b.n	8009f04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f88a 	bl	800a016 <USBD_CtlError>
      break;
 8009f02:	bf00      	nop
  }
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	885b      	ldrh	r3, [r3, #2]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d107      	bne.n	8009f2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f940 	bl	800a1ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f2c:	e013      	b.n	8009f56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	885b      	ldrh	r3, [r3, #2]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d10b      	bne.n	8009f4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	889b      	ldrh	r3, [r3, #4]
 8009f3a:	0a1b      	lsrs	r3, r3, #8
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f930 	bl	800a1ac <USBD_CtlSendStatus>
}
 8009f4c:	e003      	b.n	8009f56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f860 	bl	800a016 <USBD_CtlError>
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	3b01      	subs	r3, #1
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d80b      	bhi.n	8009f8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	885b      	ldrh	r3, [r3, #2]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10c      	bne.n	8009f98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f910 	bl	800a1ac <USBD_CtlSendStatus>
      }
      break;
 8009f8c:	e004      	b.n	8009f98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f840 	bl	800a016 <USBD_CtlError>
      break;
 8009f96:	e000      	b.n	8009f9a <USBD_ClrFeature+0x3c>
      break;
 8009f98:	bf00      	nop
  }
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	781a      	ldrb	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	781a      	ldrb	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f7ff fa17 	bl	8009400 <SWAPBYTE>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f7ff fa0a 	bl	8009400 <SWAPBYTE>
 8009fec:	4603      	mov	r3, r0
 8009fee:	461a      	mov	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7ff f9fd 	bl	8009400 <SWAPBYTE>
 800a006:	4603      	mov	r3, r0
 800a008:	461a      	mov	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	80da      	strh	r2, [r3, #6]
}
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b082      	sub	sp, #8
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a020:	2180      	movs	r1, #128	; 0x80
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fd2c 	bl	800aa80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a028:	2100      	movs	r1, #0
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fd28 	bl	800aa80 <USBD_LL_StallEP>
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d036      	beq.n	800a0bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a052:	6938      	ldr	r0, [r7, #16]
 800a054:	f000 f836 	bl	800a0c4 <USBD_GetLen>
 800a058:	4603      	mov	r3, r0
 800a05a:	3301      	adds	r3, #1
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	b29a      	uxth	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	4413      	add	r3, r2
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	701a      	strb	r2, [r3, #0]
  idx++;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	3301      	adds	r3, #1
 800a076:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4413      	add	r3, r2
 800a07e:	2203      	movs	r2, #3
 800a080:	701a      	strb	r2, [r3, #0]
  idx++;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	3301      	adds	r3, #1
 800a086:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a088:	e013      	b.n	800a0b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	4413      	add	r3, r2
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	7812      	ldrb	r2, [r2, #0]
 800a094:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	3301      	adds	r3, #1
 800a09a:	613b      	str	r3, [r7, #16]
    idx++;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e7      	bne.n	800a08a <USBD_GetString+0x52>
 800a0ba:	e000      	b.n	800a0be <USBD_GetString+0x86>
    return;
 800a0bc:	bf00      	nop
  }
}
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0d4:	e005      	b.n	800a0e2 <USBD_GetLen+0x1e>
  {
    len++;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1f5      	bne.n	800a0d6 <USBD_GetLen+0x12>
  }

  return len;
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2202      	movs	r2, #2
 800a108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	2100      	movs	r1, #0
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 fd37 	bl	800ab92 <USBD_LL_Transmit>

  return USBD_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	2100      	movs	r1, #0
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 fd26 	bl	800ab92 <USBD_LL_Transmit>

  return USBD_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2203      	movs	r2, #3
 800a160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	2100      	movs	r1, #0
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fd2a 	bl	800abd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	2100      	movs	r1, #0
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 fd19 	bl	800abd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fce5 	bl	800ab92 <USBD_LL_Transmit>

  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2205      	movs	r2, #5
 800a1de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fcf3 	bl	800abd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	4912      	ldr	r1, [pc, #72]	; (800a248 <MX_USB_DEVICE_Init+0x50>)
 800a200:	4812      	ldr	r0, [pc, #72]	; (800a24c <MX_USB_DEVICE_Init+0x54>)
 800a202:	f7fe fcdd 	bl	8008bc0 <USBD_Init>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a20c:	f7f6 fdd2 	bl	8000db4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a210:	490f      	ldr	r1, [pc, #60]	; (800a250 <MX_USB_DEVICE_Init+0x58>)
 800a212:	480e      	ldr	r0, [pc, #56]	; (800a24c <MX_USB_DEVICE_Init+0x54>)
 800a214:	f7fe fd04 	bl	8008c20 <USBD_RegisterClass>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a21e:	f7f6 fdc9 	bl	8000db4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a222:	490c      	ldr	r1, [pc, #48]	; (800a254 <MX_USB_DEVICE_Init+0x5c>)
 800a224:	4809      	ldr	r0, [pc, #36]	; (800a24c <MX_USB_DEVICE_Init+0x54>)
 800a226:	f7fe fbf5 	bl	8008a14 <USBD_CDC_RegisterInterface>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a230:	f7f6 fdc0 	bl	8000db4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a234:	4805      	ldr	r0, [pc, #20]	; (800a24c <MX_USB_DEVICE_Init+0x54>)
 800a236:	f7fe fd29 	bl	8008c8c <USBD_Start>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a240:	f7f6 fdb8 	bl	8000db4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a244:	bf00      	nop
 800a246:	bd80      	pop	{r7, pc}
 800a248:	200000b0 	.word	0x200000b0
 800a24c:	200003b8 	.word	0x200003b8
 800a250:	2000001c 	.word	0x2000001c
 800a254:	2000009c 	.word	0x2000009c

0800a258 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a25c:	2200      	movs	r2, #0
 800a25e:	4905      	ldr	r1, [pc, #20]	; (800a274 <CDC_Init_FS+0x1c>)
 800a260:	4805      	ldr	r0, [pc, #20]	; (800a278 <CDC_Init_FS+0x20>)
 800a262:	f7fe fbf1 	bl	8008a48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a266:	4905      	ldr	r1, [pc, #20]	; (800a27c <CDC_Init_FS+0x24>)
 800a268:	4803      	ldr	r0, [pc, #12]	; (800a278 <CDC_Init_FS+0x20>)
 800a26a:	f7fe fc0f 	bl	8008a8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a26e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a270:	4618      	mov	r0, r3
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20000e94 	.word	0x20000e94
 800a278:	200003b8 	.word	0x200003b8
 800a27c:	20000694 	.word	0x20000694

0800a280 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a284:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a286:	4618      	mov	r0, r3
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	6039      	str	r1, [r7, #0]
 800a29a:	71fb      	strb	r3, [r7, #7]
 800a29c:	4613      	mov	r3, r2
 800a29e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	2b23      	cmp	r3, #35	; 0x23
 800a2a4:	d84a      	bhi.n	800a33c <CDC_Control_FS+0xac>
 800a2a6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <CDC_Control_FS+0x1c>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a33d 	.word	0x0800a33d
 800a2b0:	0800a33d 	.word	0x0800a33d
 800a2b4:	0800a33d 	.word	0x0800a33d
 800a2b8:	0800a33d 	.word	0x0800a33d
 800a2bc:	0800a33d 	.word	0x0800a33d
 800a2c0:	0800a33d 	.word	0x0800a33d
 800a2c4:	0800a33d 	.word	0x0800a33d
 800a2c8:	0800a33d 	.word	0x0800a33d
 800a2cc:	0800a33d 	.word	0x0800a33d
 800a2d0:	0800a33d 	.word	0x0800a33d
 800a2d4:	0800a33d 	.word	0x0800a33d
 800a2d8:	0800a33d 	.word	0x0800a33d
 800a2dc:	0800a33d 	.word	0x0800a33d
 800a2e0:	0800a33d 	.word	0x0800a33d
 800a2e4:	0800a33d 	.word	0x0800a33d
 800a2e8:	0800a33d 	.word	0x0800a33d
 800a2ec:	0800a33d 	.word	0x0800a33d
 800a2f0:	0800a33d 	.word	0x0800a33d
 800a2f4:	0800a33d 	.word	0x0800a33d
 800a2f8:	0800a33d 	.word	0x0800a33d
 800a2fc:	0800a33d 	.word	0x0800a33d
 800a300:	0800a33d 	.word	0x0800a33d
 800a304:	0800a33d 	.word	0x0800a33d
 800a308:	0800a33d 	.word	0x0800a33d
 800a30c:	0800a33d 	.word	0x0800a33d
 800a310:	0800a33d 	.word	0x0800a33d
 800a314:	0800a33d 	.word	0x0800a33d
 800a318:	0800a33d 	.word	0x0800a33d
 800a31c:	0800a33d 	.word	0x0800a33d
 800a320:	0800a33d 	.word	0x0800a33d
 800a324:	0800a33d 	.word	0x0800a33d
 800a328:	0800a33d 	.word	0x0800a33d
 800a32c:	0800a33d 	.word	0x0800a33d
 800a330:	0800a33d 	.word	0x0800a33d
 800a334:	0800a33d 	.word	0x0800a33d
 800a338:	0800a33d 	.word	0x0800a33d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a33c:	bf00      	nop
  }

  return (USBD_OK);
 800a33e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	480f      	ldr	r0, [pc, #60]	; (800a398 <CDC_Receive_FS+0x4c>)
 800a35a:	f7fe fb97 	bl	8008a8c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a35e:	480e      	ldr	r0, [pc, #56]	; (800a398 <CDC_Receive_FS+0x4c>)
 800a360:	f7fe fbf8 	bl	8008b54 <USBD_CDC_ReceivePacket>
	  uint8_t len=(uint8_t)*Len;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	73fb      	strb	r3, [r7, #15]
	  memset(buffer,'\0',64);
 800a36a:	2240      	movs	r2, #64	; 0x40
 800a36c:	2100      	movs	r1, #0
 800a36e:	480b      	ldr	r0, [pc, #44]	; (800a39c <CDC_Receive_FS+0x50>)
 800a370:	f000 fd28 	bl	800adc4 <memset>
	  memcpy(buffer,Buf,len);
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	461a      	mov	r2, r3
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	4808      	ldr	r0, [pc, #32]	; (800a39c <CDC_Receive_FS+0x50>)
 800a37c:	f000 fd14 	bl	800ada8 <memcpy>
	  memset(Buf,'\0',len);
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	461a      	mov	r2, r3
 800a384:	2100      	movs	r1, #0
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fd1c 	bl	800adc4 <memset>
	  //CDC_Transmit_FS(Buf, *Len);
	  return (USBD_OK);
 800a38c:	2300      	movs	r3, #0
	  /* USER CODE END 6 */
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	200003b8 	.word	0x200003b8
 800a39c:	20000364 	.word	0x20000364

0800a3a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3b0:	4b0d      	ldr	r3, [pc, #52]	; (800a3e8 <CDC_Transmit_FS+0x48>)
 800a3b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e00b      	b.n	800a3de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3c6:	887b      	ldrh	r3, [r7, #2]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	4806      	ldr	r0, [pc, #24]	; (800a3e8 <CDC_Transmit_FS+0x48>)
 800a3ce:	f7fe fb3b 	bl	8008a48 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3d2:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <CDC_Transmit_FS+0x48>)
 800a3d4:	f7fe fb78 	bl	8008ac8 <USBD_CDC_TransmitPacket>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	200003b8 	.word	0x200003b8

0800a3ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a402:	4618      	mov	r0, r3
 800a404:	371c      	adds	r7, #28
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
	...

0800a410 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	6039      	str	r1, [r7, #0]
 800a41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2212      	movs	r2, #18
 800a420:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a422:	4b03      	ldr	r3, [pc, #12]	; (800a430 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	200000d0 	.word	0x200000d0

0800a434 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	6039      	str	r1, [r7, #0]
 800a43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2204      	movs	r2, #4
 800a444:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a446:	4b03      	ldr	r3, [pc, #12]	; (800a454 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	200000f0 	.word	0x200000f0

0800a458 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	6039      	str	r1, [r7, #0]
 800a462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d105      	bne.n	800a476 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	4907      	ldr	r1, [pc, #28]	; (800a48c <USBD_FS_ProductStrDescriptor+0x34>)
 800a46e:	4808      	ldr	r0, [pc, #32]	; (800a490 <USBD_FS_ProductStrDescriptor+0x38>)
 800a470:	f7ff fde2 	bl	800a038 <USBD_GetString>
 800a474:	e004      	b.n	800a480 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	4904      	ldr	r1, [pc, #16]	; (800a48c <USBD_FS_ProductStrDescriptor+0x34>)
 800a47a:	4805      	ldr	r0, [pc, #20]	; (800a490 <USBD_FS_ProductStrDescriptor+0x38>)
 800a47c:	f7ff fddc 	bl	800a038 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20001694 	.word	0x20001694
 800a490:	0800ae4c 	.word	0x0800ae4c

0800a494 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	6039      	str	r1, [r7, #0]
 800a49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	4904      	ldr	r1, [pc, #16]	; (800a4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4a4:	4804      	ldr	r0, [pc, #16]	; (800a4b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4a6:	f7ff fdc7 	bl	800a038 <USBD_GetString>
  return USBD_StrDesc;
 800a4aa:	4b02      	ldr	r3, [pc, #8]	; (800a4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	20001694 	.word	0x20001694
 800a4b8:	0800ae64 	.word	0x0800ae64

0800a4bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	6039      	str	r1, [r7, #0]
 800a4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	221a      	movs	r2, #26
 800a4cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4ce:	f000 f855 	bl	800a57c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4d2:	4b02      	ldr	r3, [pc, #8]	; (800a4dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	200000f4 	.word	0x200000f4

0800a4e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	6039      	str	r1, [r7, #0]
 800a4ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d105      	bne.n	800a4fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	4907      	ldr	r1, [pc, #28]	; (800a514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4f6:	4808      	ldr	r0, [pc, #32]	; (800a518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4f8:	f7ff fd9e 	bl	800a038 <USBD_GetString>
 800a4fc:	e004      	b.n	800a508 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	4904      	ldr	r1, [pc, #16]	; (800a514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a502:	4805      	ldr	r0, [pc, #20]	; (800a518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a504:	f7ff fd98 	bl	800a038 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a508:	4b02      	ldr	r3, [pc, #8]	; (800a514 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20001694 	.word	0x20001694
 800a518:	0800ae78 	.word	0x0800ae78

0800a51c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d105      	bne.n	800a53a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	4907      	ldr	r1, [pc, #28]	; (800a550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a532:	4808      	ldr	r0, [pc, #32]	; (800a554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a534:	f7ff fd80 	bl	800a038 <USBD_GetString>
 800a538:	e004      	b.n	800a544 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	4904      	ldr	r1, [pc, #16]	; (800a550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a53e:	4805      	ldr	r0, [pc, #20]	; (800a554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a540:	f7ff fd7a 	bl	800a038 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a544:	4b02      	ldr	r3, [pc, #8]	; (800a550 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20001694 	.word	0x20001694
 800a554:	0800ae84 	.word	0x0800ae84

0800a558 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	6039      	str	r1, [r7, #0]
 800a562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	220c      	movs	r2, #12
 800a568:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a56a:	4b03      	ldr	r3, [pc, #12]	; (800a578 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	200000e4 	.word	0x200000e4

0800a57c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a582:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <Get_SerialNum+0x44>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a588:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <Get_SerialNum+0x48>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a58e:	4b0e      	ldr	r3, [pc, #56]	; (800a5c8 <Get_SerialNum+0x4c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4413      	add	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d009      	beq.n	800a5b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5a2:	2208      	movs	r2, #8
 800a5a4:	4909      	ldr	r1, [pc, #36]	; (800a5cc <Get_SerialNum+0x50>)
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 f814 	bl	800a5d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5ac:	2204      	movs	r2, #4
 800a5ae:	4908      	ldr	r1, [pc, #32]	; (800a5d0 <Get_SerialNum+0x54>)
 800a5b0:	68b8      	ldr	r0, [r7, #8]
 800a5b2:	f000 f80f 	bl	800a5d4 <IntToUnicode>
  }
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	1fff7a10 	.word	0x1fff7a10
 800a5c4:	1fff7a14 	.word	0x1fff7a14
 800a5c8:	1fff7a18 	.word	0x1fff7a18
 800a5cc:	200000f6 	.word	0x200000f6
 800a5d0:	20000106 	.word	0x20000106

0800a5d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	75fb      	strb	r3, [r7, #23]
 800a5ea:	e027      	b.n	800a63c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	0f1b      	lsrs	r3, r3, #28
 800a5f0:	2b09      	cmp	r3, #9
 800a5f2:	d80b      	bhi.n	800a60c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	0f1b      	lsrs	r3, r3, #28
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	4619      	mov	r1, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	440b      	add	r3, r1
 800a604:	3230      	adds	r2, #48	; 0x30
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	e00a      	b.n	800a622 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	0f1b      	lsrs	r3, r3, #28
 800a610:	b2da      	uxtb	r2, r3
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4619      	mov	r1, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	440b      	add	r3, r1
 800a61c:	3237      	adds	r2, #55	; 0x37
 800a61e:	b2d2      	uxtb	r2, r2
 800a620:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	011b      	lsls	r3, r3, #4
 800a626:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	3301      	adds	r3, #1
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4413      	add	r3, r2
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a636:	7dfb      	ldrb	r3, [r7, #23]
 800a638:	3301      	adds	r3, #1
 800a63a:	75fb      	strb	r3, [r7, #23]
 800a63c:	7dfa      	ldrb	r2, [r7, #23]
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	429a      	cmp	r2, r3
 800a642:	d3d3      	bcc.n	800a5ec <IntToUnicode+0x18>
  }
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
	...

0800a654 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b0a0      	sub	sp, #128	; 0x80
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a65c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	605a      	str	r2, [r3, #4]
 800a666:	609a      	str	r2, [r3, #8]
 800a668:	60da      	str	r2, [r3, #12]
 800a66a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a66c:	f107 0310 	add.w	r3, r7, #16
 800a670:	225c      	movs	r2, #92	; 0x5c
 800a672:	2100      	movs	r1, #0
 800a674:	4618      	mov	r0, r3
 800a676:	f000 fba5 	bl	800adc4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a682:	d156      	bne.n	800a732 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a684:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a688:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a68a:	2300      	movs	r3, #0
 800a68c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a68e:	f107 0310 	add.w	r3, r7, #16
 800a692:	4618      	mov	r0, r3
 800a694:	f7f9 f8fa 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800a69e:	f7f6 fb89 	bl	8000db4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	4b25      	ldr	r3, [pc, #148]	; (800a73c <HAL_PCD_MspInit+0xe8>)
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6aa:	4a24      	ldr	r2, [pc, #144]	; (800a73c <HAL_PCD_MspInit+0xe8>)
 800a6ac:	f043 0301 	orr.w	r3, r3, #1
 800a6b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a6b2:	4b22      	ldr	r3, [pc, #136]	; (800a73c <HAL_PCD_MspInit+0xe8>)
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800a6be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a6c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6d0:	230a      	movs	r3, #10
 800a6d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4819      	ldr	r0, [pc, #100]	; (800a740 <HAL_PCD_MspInit+0xec>)
 800a6dc:	f7f7 fb46 	bl	8001d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a6e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a6ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4812      	ldr	r0, [pc, #72]	; (800a740 <HAL_PCD_MspInit+0xec>)
 800a6f6:	f7f7 fb39 	bl	8001d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6fa:	4b10      	ldr	r3, [pc, #64]	; (800a73c <HAL_PCD_MspInit+0xe8>)
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	4a0f      	ldr	r2, [pc, #60]	; (800a73c <HAL_PCD_MspInit+0xe8>)
 800a700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a704:	6353      	str	r3, [r2, #52]	; 0x34
 800a706:	2300      	movs	r3, #0
 800a708:	60bb      	str	r3, [r7, #8]
 800a70a:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <HAL_PCD_MspInit+0xe8>)
 800a70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70e:	4a0b      	ldr	r2, [pc, #44]	; (800a73c <HAL_PCD_MspInit+0xe8>)
 800a710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a714:	6453      	str	r3, [r2, #68]	; 0x44
 800a716:	4b09      	ldr	r3, [pc, #36]	; (800a73c <HAL_PCD_MspInit+0xe8>)
 800a718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a71e:	60bb      	str	r3, [r7, #8]
 800a720:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a722:	2200      	movs	r2, #0
 800a724:	2100      	movs	r1, #0
 800a726:	2043      	movs	r0, #67	; 0x43
 800a728:	f7f7 fa57 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a72c:	2043      	movs	r0, #67	; 0x43
 800a72e:	f7f7 fa70 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a732:	bf00      	nop
 800a734:	3780      	adds	r7, #128	; 0x80
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	40023800 	.word	0x40023800
 800a740:	40020000 	.word	0x40020000

0800a744 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a758:	4619      	mov	r1, r3
 800a75a:	4610      	mov	r0, r2
 800a75c:	f7fe fae3 	bl	8008d26 <USBD_LL_SetupStage>
}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a77a:	78fa      	ldrb	r2, [r7, #3]
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	4613      	mov	r3, r2
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	440b      	add	r3, r1
 800a788:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	78fb      	ldrb	r3, [r7, #3]
 800a790:	4619      	mov	r1, r3
 800a792:	f7fe fb1d 	bl	8008dd0 <USBD_LL_DataOutStage>
}
 800a796:	bf00      	nop
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b082      	sub	sp, #8
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a7b0:	78fa      	ldrb	r2, [r7, #3]
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	4413      	add	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	440b      	add	r3, r1
 800a7be:	334c      	adds	r3, #76	; 0x4c
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	78fb      	ldrb	r3, [r7, #3]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f7fe fbb6 	bl	8008f36 <USBD_LL_DataInStage>
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe fcea 	bl	80091ba <USBD_LL_SOF>
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d102      	bne.n	800a808 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a802:	2300      	movs	r3, #0
 800a804:	73fb      	strb	r3, [r7, #15]
 800a806:	e008      	b.n	800a81a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d102      	bne.n	800a816 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a810:	2301      	movs	r3, #1
 800a812:	73fb      	strb	r3, [r7, #15]
 800a814:	e001      	b.n	800a81a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a816:	f7f6 facd 	bl	8000db4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a820:	7bfa      	ldrb	r2, [r7, #15]
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe fc8a 	bl	800913e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a830:	4618      	mov	r0, r3
 800a832:	f7fe fc32 	bl	800909a <USBD_LL_Reset>
}
 800a836:	bf00      	nop
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fc85 	bl	800915e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6812      	ldr	r2, [r2, #0]
 800a862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a866:	f043 0301 	orr.w	r3, r3, #1
 800a86a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a874:	4b04      	ldr	r3, [pc, #16]	; (800a888 <HAL_PCD_SuspendCallback+0x48>)
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	4a03      	ldr	r2, [pc, #12]	; (800a888 <HAL_PCD_SuspendCallback+0x48>)
 800a87a:	f043 0306 	orr.w	r3, r3, #6
 800a87e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	e000ed00 	.word	0xe000ed00

0800a88c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe fc75 	bl	800918a <USBD_LL_Resume>
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ba:	78fa      	ldrb	r2, [r7, #3]
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fe fccd 	bl	800925e <USBD_LL_IsoOUTIncomplete>
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8de:	78fa      	ldrb	r2, [r7, #3]
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe fc89 	bl	80091fa <USBD_LL_IsoINIncomplete>
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe fcdf 	bl	80092c2 <USBD_LL_DevConnected>
}
 800a904:	bf00      	nop
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe fcdc 	bl	80092d8 <USBD_LL_DevDisconnected>
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d13c      	bne.n	800a9b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a938:	4a20      	ldr	r2, [pc, #128]	; (800a9bc <USBD_LL_Init+0x94>)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a1e      	ldr	r2, [pc, #120]	; (800a9bc <USBD_LL_Init+0x94>)
 800a944:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a948:	4b1c      	ldr	r3, [pc, #112]	; (800a9bc <USBD_LL_Init+0x94>)
 800a94a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a94e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a950:	4b1a      	ldr	r3, [pc, #104]	; (800a9bc <USBD_LL_Init+0x94>)
 800a952:	2206      	movs	r2, #6
 800a954:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a956:	4b19      	ldr	r3, [pc, #100]	; (800a9bc <USBD_LL_Init+0x94>)
 800a958:	2202      	movs	r2, #2
 800a95a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a95c:	4b17      	ldr	r3, [pc, #92]	; (800a9bc <USBD_LL_Init+0x94>)
 800a95e:	2200      	movs	r2, #0
 800a960:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a962:	4b16      	ldr	r3, [pc, #88]	; (800a9bc <USBD_LL_Init+0x94>)
 800a964:	2202      	movs	r2, #2
 800a966:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a968:	4b14      	ldr	r3, [pc, #80]	; (800a9bc <USBD_LL_Init+0x94>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a96e:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <USBD_LL_Init+0x94>)
 800a970:	2200      	movs	r2, #0
 800a972:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a974:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <USBD_LL_Init+0x94>)
 800a976:	2200      	movs	r2, #0
 800a978:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a97a:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <USBD_LL_Init+0x94>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a980:	4b0e      	ldr	r3, [pc, #56]	; (800a9bc <USBD_LL_Init+0x94>)
 800a982:	2200      	movs	r2, #0
 800a984:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a986:	480d      	ldr	r0, [pc, #52]	; (800a9bc <USBD_LL_Init+0x94>)
 800a988:	f7f7 fb9d 	bl	80020c6 <HAL_PCD_Init>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a992:	f7f6 fa0f 	bl	8000db4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a996:	2180      	movs	r1, #128	; 0x80
 800a998:	4808      	ldr	r0, [pc, #32]	; (800a9bc <USBD_LL_Init+0x94>)
 800a99a:	f7f8 fe28 	bl	80035ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a99e:	2240      	movs	r2, #64	; 0x40
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	4806      	ldr	r0, [pc, #24]	; (800a9bc <USBD_LL_Init+0x94>)
 800a9a4:	f7f8 fddc 	bl	8003560 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a9a8:	2280      	movs	r2, #128	; 0x80
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	4803      	ldr	r0, [pc, #12]	; (800a9bc <USBD_LL_Init+0x94>)
 800a9ae:	f7f8 fdd7 	bl	8003560 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	20001894 	.word	0x20001894

0800a9c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7f7 fc99 	bl	800230e <HAL_PCD_Start>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 f990 	bl	800ad08 <USBD_Get_USB_Status>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	461a      	mov	r2, r3
 800aa04:	4603      	mov	r3, r0
 800aa06:	70fb      	strb	r3, [r7, #3]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70bb      	strb	r3, [r7, #2]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa1e:	78bb      	ldrb	r3, [r7, #2]
 800aa20:	883a      	ldrh	r2, [r7, #0]
 800aa22:	78f9      	ldrb	r1, [r7, #3]
 800aa24:	f7f8 f997 	bl	8002d56 <HAL_PCD_EP_Open>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 f96a 	bl	800ad08 <USBD_Get_USB_Status>
 800aa34:	4603      	mov	r3, r0
 800aa36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa5c:	78fa      	ldrb	r2, [r7, #3]
 800aa5e:	4611      	mov	r1, r2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7f8 f9e0 	bl	8002e26 <HAL_PCD_EP_Close>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 f94b 	bl	800ad08 <USBD_Get_USB_Status>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa9a:	78fa      	ldrb	r2, [r7, #3]
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7f8 fab8 	bl	8003014 <HAL_PCD_EP_SetStall>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f92c 	bl	800ad08 <USBD_Get_USB_Status>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	460b      	mov	r3, r1
 800aac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aad8:	78fa      	ldrb	r2, [r7, #3]
 800aada:	4611      	mov	r1, r2
 800aadc:	4618      	mov	r0, r3
 800aade:	f7f8 fafd 	bl	80030dc <HAL_PCD_EP_ClrStall>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 f90d 	bl	800ad08 <USBD_Get_USB_Status>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da0b      	bge.n	800ab30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab1e:	68f9      	ldr	r1, [r7, #12]
 800ab20:	4613      	mov	r3, r2
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	440b      	add	r3, r1
 800ab2a:	333e      	adds	r3, #62	; 0x3e
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	e00b      	b.n	800ab48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab36:	68f9      	ldr	r1, [r7, #12]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ab46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab6e:	78fa      	ldrb	r2, [r7, #3]
 800ab70:	4611      	mov	r1, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7f8 f8ca 	bl	8002d0c <HAL_PCD_SetAddress>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 f8c2 	bl	800ad08 <USBD_Get_USB_Status>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b086      	sub	sp, #24
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	60f8      	str	r0, [r7, #12]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	603b      	str	r3, [r7, #0]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abb0:	7af9      	ldrb	r1, [r7, #11]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	f7f8 f9e3 	bl	8002f80 <HAL_PCD_EP_Transmit>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abbe:	7dfb      	ldrb	r3, [r7, #23]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 f8a1 	bl	800ad08 <USBD_Get_USB_Status>
 800abc6:	4603      	mov	r3, r0
 800abc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abca:	7dbb      	ldrb	r3, [r7, #22]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3718      	adds	r7, #24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	607a      	str	r2, [r7, #4]
 800abde:	603b      	str	r3, [r7, #0]
 800abe0:	460b      	mov	r3, r1
 800abe2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abf2:	7af9      	ldrb	r1, [r7, #11]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	f7f8 f95f 	bl	8002eba <HAL_PCD_EP_Receive>
 800abfc:	4603      	mov	r3, r0
 800abfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 f880 	bl	800ad08 <USBD_Get_USB_Status>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac28:	78fa      	ldrb	r2, [r7, #3]
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7f8 f98f 	bl	8002f50 <HAL_PCD_EP_GetRxCount>
 800ac32:	4603      	mov	r3, r0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d002      	beq.n	800ac54 <HAL_PCDEx_LPM_Callback+0x18>
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d01f      	beq.n	800ac92 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ac52:	e03b      	b.n	800accc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d007      	beq.n	800ac6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800ac5c:	f7f5 fcc6 	bl	80005ec <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac60:	4b1c      	ldr	r3, [pc, #112]	; (800acd4 <HAL_PCDEx_LPM_Callback+0x98>)
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	4a1b      	ldr	r2, [pc, #108]	; (800acd4 <HAL_PCDEx_LPM_Callback+0x98>)
 800ac66:	f023 0306 	bic.w	r3, r3, #6
 800ac6a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac7e:	f023 0301 	bic.w	r3, r3, #1
 800ac82:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe fa7d 	bl	800918a <USBD_LL_Resume>
    break;
 800ac90:	e01c      	b.n	800accc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	6812      	ldr	r2, [r2, #0]
 800aca0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aca4:	f043 0301 	orr.w	r3, r3, #1
 800aca8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fa54 	bl	800915e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d005      	beq.n	800acca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <HAL_PCDEx_LPM_Callback+0x98>)
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	4a04      	ldr	r2, [pc, #16]	; (800acd4 <HAL_PCDEx_LPM_Callback+0x98>)
 800acc4:	f043 0306 	orr.w	r3, r3, #6
 800acc8:	6113      	str	r3, [r2, #16]
    break;
 800acca:	bf00      	nop
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	e000ed00 	.word	0xe000ed00

0800acd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ace0:	4b03      	ldr	r3, [pc, #12]	; (800acf0 <USBD_static_malloc+0x18>)
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	20001da0 	.word	0x20001da0

0800acf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad16:	79fb      	ldrb	r3, [r7, #7]
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d817      	bhi.n	800ad4c <USBD_Get_USB_Status+0x44>
 800ad1c:	a201      	add	r2, pc, #4	; (adr r2, 800ad24 <USBD_Get_USB_Status+0x1c>)
 800ad1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad22:	bf00      	nop
 800ad24:	0800ad35 	.word	0x0800ad35
 800ad28:	0800ad3b 	.word	0x0800ad3b
 800ad2c:	0800ad41 	.word	0x0800ad41
 800ad30:	0800ad47 	.word	0x0800ad47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]
    break;
 800ad38:	e00b      	b.n	800ad52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3e:	e008      	b.n	800ad52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad40:	2301      	movs	r3, #1
 800ad42:	73fb      	strb	r3, [r7, #15]
    break;
 800ad44:	e005      	b.n	800ad52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad46:	2303      	movs	r3, #3
 800ad48:	73fb      	strb	r3, [r7, #15]
    break;
 800ad4a:	e002      	b.n	800ad52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad50:	bf00      	nop
  }
  return usb_status;
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <__libc_init_array>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	4d0d      	ldr	r5, [pc, #52]	; (800ad98 <__libc_init_array+0x38>)
 800ad64:	4c0d      	ldr	r4, [pc, #52]	; (800ad9c <__libc_init_array+0x3c>)
 800ad66:	1b64      	subs	r4, r4, r5
 800ad68:	10a4      	asrs	r4, r4, #2
 800ad6a:	2600      	movs	r6, #0
 800ad6c:	42a6      	cmp	r6, r4
 800ad6e:	d109      	bne.n	800ad84 <__libc_init_array+0x24>
 800ad70:	4d0b      	ldr	r5, [pc, #44]	; (800ada0 <__libc_init_array+0x40>)
 800ad72:	4c0c      	ldr	r4, [pc, #48]	; (800ada4 <__libc_init_array+0x44>)
 800ad74:	f000 f82e 	bl	800add4 <_init>
 800ad78:	1b64      	subs	r4, r4, r5
 800ad7a:	10a4      	asrs	r4, r4, #2
 800ad7c:	2600      	movs	r6, #0
 800ad7e:	42a6      	cmp	r6, r4
 800ad80:	d105      	bne.n	800ad8e <__libc_init_array+0x2e>
 800ad82:	bd70      	pop	{r4, r5, r6, pc}
 800ad84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad88:	4798      	blx	r3
 800ad8a:	3601      	adds	r6, #1
 800ad8c:	e7ee      	b.n	800ad6c <__libc_init_array+0xc>
 800ad8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad92:	4798      	blx	r3
 800ad94:	3601      	adds	r6, #1
 800ad96:	e7f2      	b.n	800ad7e <__libc_init_array+0x1e>
 800ad98:	0800aeb4 	.word	0x0800aeb4
 800ad9c:	0800aeb4 	.word	0x0800aeb4
 800ada0:	0800aeb4 	.word	0x0800aeb4
 800ada4:	0800aeb8 	.word	0x0800aeb8

0800ada8 <memcpy>:
 800ada8:	440a      	add	r2, r1
 800adaa:	4291      	cmp	r1, r2
 800adac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800adb0:	d100      	bne.n	800adb4 <memcpy+0xc>
 800adb2:	4770      	bx	lr
 800adb4:	b510      	push	{r4, lr}
 800adb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adbe:	4291      	cmp	r1, r2
 800adc0:	d1f9      	bne.n	800adb6 <memcpy+0xe>
 800adc2:	bd10      	pop	{r4, pc}

0800adc4 <memset>:
 800adc4:	4402      	add	r2, r0
 800adc6:	4603      	mov	r3, r0
 800adc8:	4293      	cmp	r3, r2
 800adca:	d100      	bne.n	800adce <memset+0xa>
 800adcc:	4770      	bx	lr
 800adce:	f803 1b01 	strb.w	r1, [r3], #1
 800add2:	e7f9      	b.n	800adc8 <memset+0x4>

0800add4 <_init>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	bf00      	nop
 800add8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adda:	bc08      	pop	{r3}
 800addc:	469e      	mov	lr, r3
 800adde:	4770      	bx	lr

0800ade0 <_fini>:
 800ade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade2:	bf00      	nop
 800ade4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade6:	bc08      	pop	{r3}
 800ade8:	469e      	mov	lr, r3
 800adea:	4770      	bx	lr
