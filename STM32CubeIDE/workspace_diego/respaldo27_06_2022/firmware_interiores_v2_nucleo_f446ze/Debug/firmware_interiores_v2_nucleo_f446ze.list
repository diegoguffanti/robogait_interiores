
firmware_interiores_v2_nucleo_f446ze.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08011028  08011028  00021028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011640  08011640  000302f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011640  08011640  00021640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011648  08011648  000302f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011648  08011648  00021648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801164c  0801164c  0002164c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08011650  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ffc  200002f8  08011948  000302f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022f4  08011948  000322f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021114  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442a  00000000  00000000  0005143c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  00055868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a0  00000000  00000000  000572a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000076a1  00000000  00000000  00058b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d71  00000000  00000000  000601e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6cca  00000000  00000000  00081f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168c24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000820c  00000000  00000000  00168c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f8 	.word	0x200002f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801100c 	.word	0x0801100c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002fc 	.word	0x200002fc
 800020c:	0801100c 	.word	0x0801100c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <wt901c_init>:
//Variable global declarada en main.c
extern wt901c imu;

//Inicializador de "objeto" imu
HAL_StatusTypeDef wt901c_init(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	//Asignacion de handler UART
	imu.port = huart;
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <wt901c_init+0x48>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]

	//Iniciar alimentacion para resetear referencias
	HAL_GPIO_WritePin(PIN_IMU, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <wt901c_init+0x4c>)
 8000fa2:	f003 f997 	bl	80042d4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000faa:	f002 f9ab 	bl	8003304 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_IMU, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <wt901c_init+0x4c>)
 8000fb6:	f003 f98d 	bl	80042d4 <HAL_GPIO_WritePin>

	//Primera recepcion
	return HAL_UART_Receive_IT(imu.port, imu.rx_buf, 11);
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <wt901c_init+0x48>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	220b      	movs	r2, #11
 8000fc0:	4906      	ldr	r1, [pc, #24]	; (8000fdc <wt901c_init+0x50>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 f895 	bl	80080f2 <HAL_UART_Receive_IT>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000598 	.word	0x20000598
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	2000059c 	.word	0x2000059c

08000fe0 <wt901c_callback>:

//Callback de recepcion UART, llamar en HAL_UART_RxCpltCallback
void wt901c_callback()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	//Decodificar los 11 bytes de cada paquete
	for (int i = 0; i < 11; i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e00a      	b.n	8001002 <wt901c_callback+0x22>
		wt901c_parse(imu.rx_buf[i]);
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <wt901c_callback+0x44>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f818 	bl	800102c <wt901c_parse>
	for (int i = 0; i < 11; i++)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0a      	cmp	r3, #10
 8001006:	ddf1      	ble.n	8000fec <wt901c_callback+0xc>

	//Calcular nuevos valores de salida
	wt901c_calculate();
 8001008:	f000 f87a 	bl	8001100 <wt901c_calculate>

	//Nueva recepcion
	HAL_UART_Receive_IT(imu.port, imu.rx_buf, 11);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <wt901c_callback+0x44>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	220b      	movs	r2, #11
 8001012:	4905      	ldr	r1, [pc, #20]	; (8001028 <wt901c_callback+0x48>)
 8001014:	4618      	mov	r0, r3
 8001016:	f007 f86c 	bl	80080f2 <HAL_UART_Receive_IT>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000598 	.word	0x20000598
 8001028:	2000059c 	.word	0x2000059c

0800102c <wt901c_parse>:

//Decodificacion de los bytes entrantes
void wt901c_parse(unsigned char byte)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	static unsigned char data_buffer[11];
	static unsigned char index = 0;

	data_buffer[index++] = byte;
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <wt901c_parse+0xb8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	b2d1      	uxtb	r1, r2
 800103e:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <wt901c_parse+0xb8>)
 8001040:	7011      	strb	r1, [r2, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <wt901c_parse+0xbc>)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	5453      	strb	r3, [r2, r1]

	if (data_buffer[0] != 0x55) //Primer byte erroneo
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <wt901c_parse+0xbc>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b55      	cmp	r3, #85	; 0x55
 8001050:	d003      	beq.n	800105a <wt901c_parse+0x2e>
	{
		index = 0;
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <wt901c_parse+0xb8>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		return;
 8001058:	e041      	b.n	80010de <wt901c_parse+0xb2>
	}

	if (index < 11) { return; } //Aun no se ha recibido el paquete completo
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <wt901c_parse+0xb8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b0a      	cmp	r3, #10
 8001060:	d93c      	bls.n	80010dc <wt901c_parse+0xb0>

	else
	{
		switch (data_buffer[1]) //El segundo byte indica a que se corresponde el paquete de 11
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <wt901c_parse+0xbc>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	3b50      	subs	r3, #80	; 0x50
 8001068:	2b09      	cmp	r3, #9
 800106a:	d833      	bhi.n	80010d4 <wt901c_parse+0xa8>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <wt901c_parse+0x48>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	080010d5 	.word	0x080010d5
 8001078:	0800109d 	.word	0x0800109d
 800107c:	080010ab 	.word	0x080010ab
 8001080:	080010b9 	.word	0x080010b9
 8001084:	080010d5 	.word	0x080010d5
 8001088:	080010d5 	.word	0x080010d5
 800108c:	080010d5 	.word	0x080010d5
 8001090:	080010d5 	.word	0x080010d5
 8001094:	080010d5 	.word	0x080010d5
 8001098:	080010c7 	.word	0x080010c7
		{
		case 0x50:	break; //Tiempo
		case 0x51:	memcpy(imu.raw_a, data_buffer + 2, 6); break; //Acelerometro
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <wt901c_parse+0xc0>)
 800109e:	2206      	movs	r2, #6
 80010a0:	4619      	mov	r1, r3
 80010a2:	4813      	ldr	r0, [pc, #76]	; (80010f0 <wt901c_parse+0xc4>)
 80010a4:	f00c f9f2 	bl	800d48c <memcpy>
 80010a8:	e014      	b.n	80010d4 <wt901c_parse+0xa8>
		case 0x52:	memcpy(imu.raw_w, data_buffer + 2, 6); break; //Giroscopio
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <wt901c_parse+0xc0>)
 80010ac:	2206      	movs	r2, #6
 80010ae:	4619      	mov	r1, r3
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <wt901c_parse+0xc8>)
 80010b2:	f00c f9eb 	bl	800d48c <memcpy>
 80010b6:	e00d      	b.n	80010d4 <wt901c_parse+0xa8>
		case 0x53:	memcpy(imu.raw_ang, data_buffer + 2, 6); break; //Angulos inclinacion
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <wt901c_parse+0xc0>)
 80010ba:	2206      	movs	r2, #6
 80010bc:	4619      	mov	r1, r3
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <wt901c_parse+0xcc>)
 80010c0:	f00c f9e4 	bl	800d48c <memcpy>
 80010c4:	e006      	b.n	80010d4 <wt901c_parse+0xa8>
		case 0x54:	break; //Magnetometro (no utilizado)
		case 0x55:	break; //Status (no disponible en este modelo)
		case 0x56:	break; //Presion y altitud (no disponible en este modelo)
		case 0x57:	break; //GPS (no disponible en este modelo)
		case 0x58:	break; //GPSV (no disponible en este modelo)
		case 0x59:	memcpy(imu.raw_q, data_buffer + 2, 8); break; //Cuaternio orientacion
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <wt901c_parse+0xc0>)
 80010c8:	2208      	movs	r2, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <wt901c_parse+0xd0>)
 80010ce:	f00c f9dd 	bl	800d48c <memcpy>
 80010d2:	bf00      	nop
		}
		index = 0;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <wt901c_parse+0xb8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e000      	b.n	80010de <wt901c_parse+0xb2>
	if (index < 11) { return; } //Aun no se ha recibido el paquete completo
 80010dc:	bf00      	nop
	}
}
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000314 	.word	0x20000314
 80010e8:	20000318 	.word	0x20000318
 80010ec:	2000031a 	.word	0x2000031a
 80010f0:	200005a8 	.word	0x200005a8
 80010f4:	200005ae 	.word	0x200005ae
 80010f8:	200005b4 	.word	0x200005b4
 80010fc:	200005ba 	.word	0x200005ba

08001100 <wt901c_calculate>:

//Calculo de los valores de salida a partir de los raw
void wt901c_calculate()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) imu.a[i] = (float)imu.raw_a[i] / 32768 * 16 * G; //Aceleracion lineal en m/s2
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e02a      	b.n	8001162 <wt901c_calculate+0x62>
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <wt901c_calculate+0x148>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3308      	adds	r3, #8
 8001112:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800124c <wt901c_calculate+0x14c>
 8001122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001126:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800112a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112e:	ee17 0a90 	vmov	r0, s15
 8001132:	f7ff fa29 	bl	8000588 <__aeabi_f2d>
 8001136:	a342      	add	r3, pc, #264	; (adr r3, 8001240 <wt901c_calculate+0x140>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa7c 	bl	8000638 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd4e 	bl	8000be8 <__aeabi_d2f>
 800114c:	4602      	mov	r2, r0
 800114e:	493e      	ldr	r1, [pc, #248]	; (8001248 <wt901c_calculate+0x148>)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	330a      	adds	r3, #10
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	3304      	adds	r3, #4
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b02      	cmp	r3, #2
 8001166:	ddd1      	ble.n	800110c <wt901c_calculate+0xc>
	for (int i = 0; i < 3; i++) imu.w[i] = (float)imu.raw_w[i] / 32768 * 2000; //Velocidad angular en grad/s
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	e01c      	b.n	80011a8 <wt901c_calculate+0xa8>
 800116e:	4a36      	ldr	r2, [pc, #216]	; (8001248 <wt901c_calculate+0x148>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3308      	adds	r3, #8
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001184:	eddf 6a31 	vldr	s13, [pc, #196]	; 800124c <wt901c_calculate+0x14c>
 8001188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001250 <wt901c_calculate+0x150>
 8001190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001194:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <wt901c_calculate+0x148>)
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	330e      	adds	r3, #14
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	edc3 7a00 	vstr	s15, [r3]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	dddf      	ble.n	800116e <wt901c_calculate+0x6e>
	for (int i = 0; i < 3; i++) imu.ang[i] = (float)imu.raw_ang[i] / 32768 * 180; //Angulo inclinacion en grados
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e01d      	b.n	80011f0 <wt901c_calculate+0xf0>
 80011b4:	4a24      	ldr	r2, [pc, #144]	; (8001248 <wt901c_calculate+0x148>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	330c      	adds	r3, #12
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	eddf 6a20 	vldr	s13, [pc, #128]	; 800124c <wt901c_calculate+0x14c>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001254 <wt901c_calculate+0x154>
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <wt901c_calculate+0x148>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3310      	adds	r3, #16
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3304      	adds	r3, #4
 80011e6:	edc3 7a00 	vstr	s15, [r3]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	ddde      	ble.n	80011b4 <wt901c_calculate+0xb4>
	for (int i = 0; i < 4; i++) imu.q[i] = (float)imu.raw_q[i] / 32768; //Cuaternio de orientacion
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	e018      	b.n	800122e <wt901c_calculate+0x12e>
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <wt901c_calculate+0x148>)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3310      	adds	r3, #16
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800124c <wt901c_calculate+0x14c>
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <wt901c_calculate+0x148>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3314      	adds	r3, #20
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	edc3 7a00 	vstr	s15, [r3]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b03      	cmp	r3, #3
 8001232:	dde3      	ble.n	80011fc <wt901c_calculate+0xfc>
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	3a92a305 	.word	0x3a92a305
 8001244:	40239d01 	.word	0x40239d01
 8001248:	20000598 	.word	0x20000598
 800124c:	47000000 	.word	0x47000000
 8001250:	44fa0000 	.word	0x44fa0000
 8001254:	43340000 	.word	0x43340000

08001258 <HAL_UART_RxCpltCallback>:
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

//callback it
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
//		parse_data(rx_buf[i]);
//
//	    calculate();
//
//	HAL_UART_Receive_IT(&huart2, rx_buf, 11);
	wt901c_callback();
 8001260:	f7ff febe 	bl	8000fe0 <wt901c_callback>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
	status_button=true;
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	200006a8 	.word	0x200006a8

0800128c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	angle_camera = HAL_ADC_GetValue(&hadc1);
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001296:	f002 fa8b 	bl	80037b0 <HAL_ADC_GetValue>
 800129a:	4603      	mov	r3, r0
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <HAL_ADC_ConvCpltCallback+0x20>)
 800129e:	6013      	str	r3, [r2, #0]

}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000324 	.word	0x20000324
 80012ac:	200006c8 	.word	0x200006c8

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f001 ffb4 	bl	8003220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b8:	f000 f8da 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012bc:	f000 fb06 	bl	80018cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012c0:	f000 fab0 	bl	8001824 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80012c4:	f000 f9c0 	bl	8001648 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80012c8:	f000 fad6 	bl	8001878 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80012cc:	f000 f93c 	bl	8001548 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80012d0:	f00b fae2 	bl	800c898 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80012d4:	f000 fa7c 	bl	80017d0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80012d8:	f000 fa02 	bl	80016e0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80012dc:	f000 f986 	bl	80015ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80012e0:	4846      	ldr	r0, [pc, #280]	; (80013fc <main+0x14c>)
 80012e2:	f005 fd99 	bl	8006e18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012e6:	2100      	movs	r1, #0
 80012e8:	4845      	ldr	r0, [pc, #276]	; (8001400 <main+0x150>)
 80012ea:	f005 fe5f 	bl	8006fac <HAL_TIM_PWM_Start>
//  theta_ant=theta_imu[2]+180;
//  HAL_UART_Receive_IT(&huart2, rx_buf, 11);
//  HAL_Delay(200);
//  theta_curr=theta_imu[2]+180;
//  imu_ready=true;
  wt901c_init(&huart2);
 80012ee:	4845      	ldr	r0, [pc, #276]	; (8001404 <main+0x154>)
 80012f0:	f7ff fe4c 	bl	8000f8c <wt901c_init>



  status_init_rw1=roboclaw1_init(address_huart1,(uint8_t) address_roboclaw1);
 80012f4:	4b44      	ldr	r3, [pc, #272]	; (8001408 <main+0x158>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 faee 	bl	80028dc <roboclaw1_init>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b41      	ldr	r3, [pc, #260]	; (800140c <main+0x15c>)
 8001306:	701a      	strb	r2, [r3, #0]
  status_init_rw2=roboclaw2_init(address_huart2,(uint8_t) address_roboclaw2);
 8001308:	4b41      	ldr	r3, [pc, #260]	; (8001410 <main+0x160>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fb1e 	bl	8002950 <roboclaw2_init>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <main+0x164>)
 800131a:	701a      	strb	r2, [r3, #0]
		  }else{
			  setSpeed(0, 0);
		  }*/


    	  t_curr_1=timer_indoor_system;
 800131c:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <main+0x168>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a3e      	ldr	r2, [pc, #248]	; (800141c <main+0x16c>)
 8001322:	6013      	str	r3, [r2, #0]
	  	  t_delay_1=t_curr_1-t_ant_1;
 8001324:	4b3d      	ldr	r3, [pc, #244]	; (800141c <main+0x16c>)
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <main+0x170>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001334:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <main+0x174>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
	  	  setSpeed(v_in, w_in);
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <main+0x178>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <main+0x17c>)
 8001342:	ed93 7a00 	vldr	s14, [r3]
 8001346:	eef0 0a47 	vmov.f32	s1, s14
 800134a:	eeb0 0a67 	vmov.f32	s0, s15
 800134e:	f000 ff47 	bl	80021e0 <setSpeed>
	  	  setAngleCamera(camera_in);
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <main+0x180>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f000 ff08 	bl	8002170 <setAngleCamera>
		  status_speedM1=Read_Encoder_Speed(address_huart1,(uint8_t)address_roboclaw1,(uint8_t)1,&speedM1_roboclaw);
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <main+0x158>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <main+0x184>)
 8001366:	2201      	movs	r2, #1
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	f001 f973 	bl	8002654 <Read_Encoder_Speed>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <main+0x188>)
 8001374:	701a      	strb	r2, [r3, #0]
		  status_speedM2=Read_Encoder_Speed(address_huart1,(uint8_t)address_roboclaw1,(uint8_t)2,&speedM2_roboclaw);
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <main+0x158>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <main+0x18c>)
 800137c:	2202      	movs	r2, #2
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	f001 f968 	bl	8002654 <Read_Encoder_Speed>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <main+0x190>)
 800138a:	701a      	strb	r2, [r3, #0]
		  status_speedM3=Read_Encoder_Speed(address_huart2,(uint8_t)address_roboclaw2,(uint8_t)1,&speedM3_roboclaw);
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <main+0x160>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <main+0x194>)
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	f001 f95d 	bl	8002654 <Read_Encoder_Speed>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <main+0x198>)
 80013a0:	701a      	strb	r2, [r3, #0]
		  status_speedM4=Read_Encoder_Speed(address_huart2,(uint8_t)address_roboclaw2,(uint8_t)2,&speedM4_roboclaw);
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <main+0x160>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <main+0x19c>)
 80013a8:	2202      	movs	r2, #2
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	f001 f952 	bl	8002654 <Read_Encoder_Speed>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <main+0x1a0>)
 80013b6:	701a      	strb	r2, [r3, #0]
		  status_Counters_rw1=Read_Both_Encoder_Counts(address_huart1,(uint8_t)address_roboclaw1,&countsM1_roboclaw,&countsM2_roboclaw);
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <main+0x158>)
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <main+0x1a4>)
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <main+0x1a8>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	f001 f9a2 	bl	800270a <Read_Both_Encoder_Counts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <main+0x1ac>)
 80013cc:	701a      	strb	r2, [r3, #0]
		  status_Counters_rw2=Read_Both_Encoder_Counts(address_huart2,(uint8_t)address_roboclaw2,&countsM3_roboclaw,&countsM4_roboclaw);
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <main+0x160>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <main+0x1b0>)
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <main+0x1b4>)
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	f001 f997 	bl	800270a <Read_Both_Encoder_Counts>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <main+0x1b8>)
 80013e2:	701a      	strb	r2, [r3, #0]

		  //status_button=HAL_GPIO_ReadPin(B1_reset_odom_GPIO_Port, B1_reset_odom_Pin);
		  if(status_button==true){
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <main+0x1bc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <main+0x140>
			  reset_Odometry();
 80013ec:	f000 fba2 	bl	8001b34 <reset_Odometry>
		  }
		  t_ant_1=t_curr_1;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <main+0x16c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <main+0x170>)
 80013f6:	6013      	str	r3, [r2, #0]
    	  t_curr_1=timer_indoor_system;
 80013f8:	e790      	b.n	800131c <main+0x6c>
 80013fa:	bf00      	nop
 80013fc:	200003c0 	.word	0x200003c0
 8001400:	20000408 	.word	0x20000408
 8001404:	20000450 	.word	0x20000450
 8001408:	20000000 	.word	0x20000000
 800140c:	2000066e 	.word	0x2000066e
 8001410:	20000004 	.word	0x20000004
 8001414:	2000066f 	.word	0x2000066f
 8001418:	200006ac 	.word	0x200006ac
 800141c:	200005fc 	.word	0x200005fc
 8001420:	200005f8 	.word	0x200005f8
 8001424:	20000600 	.word	0x20000600
 8001428:	2000063c 	.word	0x2000063c
 800142c:	20000640 	.word	0x20000640
 8001430:	20000644 	.word	0x20000644
 8001434:	20000658 	.word	0x20000658
 8001438:	2000066a 	.word	0x2000066a
 800143c:	2000065c 	.word	0x2000065c
 8001440:	2000066b 	.word	0x2000066b
 8001444:	20000660 	.word	0x20000660
 8001448:	2000066c 	.word	0x2000066c
 800144c:	20000664 	.word	0x20000664
 8001450:	2000066d 	.word	0x2000066d
 8001454:	2000064c 	.word	0x2000064c
 8001458:	20000648 	.word	0x20000648
 800145c:	20000668 	.word	0x20000668
 8001460:	20000654 	.word	0x20000654
 8001464:	20000650 	.word	0x20000650
 8001468:	20000669 	.word	0x20000669
 800146c:	200006a8 	.word	0x200006a8

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	; 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	2234      	movs	r2, #52	; 0x34
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f00c f812 	bl	800d4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4b29      	ldr	r3, [pc, #164]	; (8001540 <SystemClock_Config+0xd0>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a28      	ldr	r2, [pc, #160]	; (8001540 <SystemClock_Config+0xd0>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <SystemClock_Config+0xd0>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	2300      	movs	r3, #0
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <SystemClock_Config+0xd4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a22      	ldr	r2, [pc, #136]	; (8001544 <SystemClock_Config+0xd4>)
 80014ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <SystemClock_Config+0xd4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d6:	2302      	movs	r3, #2
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014e0:	2304      	movs	r3, #4
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014e4:	23a8      	movs	r3, #168	; 0xa8
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ec:	2307      	movs	r3, #7
 80014ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4618      	mov	r0, r3
 80014fa:	f005 f99f 	bl	800683c <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001504:	f001 fa9a 	bl	8002a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	2302      	movs	r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001514:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001518:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2105      	movs	r1, #5
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fb14 	bl	8005b54 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001532:	f001 fa83 	bl	8002a3c <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	; 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	463b      	mov	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_ADC1_Init+0x98>)
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <MX_ADC1_Init+0x9c>)
 800155e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_ADC1_Init+0x98>)
 8001562:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001566:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_ADC1_Init+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_ADC1_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_ADC1_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_ADC1_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_ADC1_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_ADC1_Init+0x98>)
 800158a:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <MX_ADC1_Init+0xa0>)
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_ADC1_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_ADC1_Init+0x98>)
 8001596:	2201      	movs	r2, #1
 8001598:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_ADC1_Init+0x98>)
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_ADC1_Init+0x98>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <MX_ADC1_Init+0x98>)
 80015aa:	f001 fecf 	bl	800334c <HAL_ADC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015b4:	f001 fa42 	bl	8002a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015b8:	2305      	movs	r3, #5
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_ADC1_Init+0x98>)
 80015ca:	f002 f913 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015d4:	f001 fa32 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000324 	.word	0x20000324
 80015e4:	40012000 	.word	0x40012000
 80015e8:	0f000001 	.word	0x0f000001

080015ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_I2C1_Init+0x50>)
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <MX_I2C1_Init+0x54>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_I2C1_Init+0x50>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_I2C1_Init+0x58>)
 80015fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_I2C1_Init+0x50>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_I2C1_Init+0x50>)
 800162a:	f002 fe85 	bl	8004338 <HAL_I2C_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001634:	f001 fa02 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000036c 	.word	0x2000036c
 8001640:	40005400 	.word	0x40005400
 8001644:	000186a0 	.word	0x000186a0

08001648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <MX_TIM2_Init+0x94>)
 8001666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_TIM2_Init+0x94>)
 800166e:	223b      	movs	r2, #59	; 0x3b
 8001670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MX_TIM2_Init+0x94>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1400;
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_TIM2_Init+0x94>)
 800167a:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800167e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_TIM2_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_TIM2_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <MX_TIM2_Init+0x94>)
 800168e:	f005 fb73 	bl	8006d78 <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001698:	f001 f9d0 	bl	8002a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	4619      	mov	r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_TIM2_Init+0x94>)
 80016aa:	f005 ff11 	bl	80074d0 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016b4:	f001 f9c2 	bl	8002a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_TIM2_Init+0x94>)
 80016c6:	f006 fb03 	bl	8007cd0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016d0:	f001 f9b4 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200003c0 	.word	0x200003c0

080016e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	; 0x38
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <MX_TIM3_Init+0xe8>)
 8001712:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <MX_TIM3_Init+0xec>)
 8001714:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <MX_TIM3_Init+0xe8>)
 8001718:	2253      	movs	r2, #83	; 0x53
 800171a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <MX_TIM3_Init+0xe8>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <MX_TIM3_Init+0xe8>)
 8001724:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001728:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <MX_TIM3_Init+0xe8>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_TIM3_Init+0xe8>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001736:	4824      	ldr	r0, [pc, #144]	; (80017c8 <MX_TIM3_Init+0xe8>)
 8001738:	f005 fb1e 	bl	8006d78 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001742:	f001 f97b 	bl	8002a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800174c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001750:	4619      	mov	r1, r3
 8001752:	481d      	ldr	r0, [pc, #116]	; (80017c8 <MX_TIM3_Init+0xe8>)
 8001754:	f005 febc 	bl	80074d0 <HAL_TIM_ConfigClockSource>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800175e:	f001 f96d 	bl	8002a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001762:	4819      	ldr	r0, [pc, #100]	; (80017c8 <MX_TIM3_Init+0xe8>)
 8001764:	f005 fbc8 	bl	8006ef8 <HAL_TIM_PWM_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800176e:	f001 f965 	bl	8002a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	4619      	mov	r1, r3
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <MX_TIM3_Init+0xe8>)
 8001782:	f006 faa5 	bl	8007cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800178c:	f001 f956 	bl	8002a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001790:	2360      	movs	r3, #96	; 0x60
 8001792:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1450;
 8001794:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8001798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM3_Init+0xe8>)
 80017aa:	f005 fdcf 	bl	800734c <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017b4:	f001 f942 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_TIM3_Init+0xe8>)
 80017ba:	f001 fa83 	bl	8002cc4 <HAL_TIM_MspPostInit>

}
 80017be:	bf00      	nop
 80017c0:	3738      	adds	r7, #56	; 0x38
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000408 	.word	0x20000408
 80017cc:	40000400 	.word	0x40000400

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART2_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017dc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001808:	f006 faf2 	bl	8007df0 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f001 f913 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000450 	.word	0x20000450
 8001820:	40004400 	.word	0x40004400

08001824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <MX_USART3_UART_Init+0x50>)
 800182c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 8001830:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 800184a:	220c      	movs	r2, #12
 800184c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_USART3_UART_Init+0x4c>)
 800185c:	f006 fac8 	bl	8007df0 <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001866:	f001 f8e9 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000494 	.word	0x20000494
 8001874:	40004800 	.word	0x40004800

08001878 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <MX_USART6_UART_Init+0x50>)
 8001880:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 8001884:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001888:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_USART6_UART_Init+0x4c>)
 80018b0:	f006 fa9e 	bl	8007df0 <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018ba:	f001 f8bf 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200004d8 	.word	0x200004d8
 80018c8:	40011400 	.word	0x40011400

080018cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <MX_GPIO_Init+0x17c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a57      	ldr	r2, [pc, #348]	; (8001a48 <MX_GPIO_Init+0x17c>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <MX_GPIO_Init+0x17c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <MX_GPIO_Init+0x17c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <MX_GPIO_Init+0x17c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a3b      	ldr	r2, [pc, #236]	; (8001a48 <MX_GPIO_Init+0x17c>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <MX_GPIO_Init+0x17c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2140      	movs	r1, #64	; 0x40
 800198e:	482f      	ldr	r0, [pc, #188]	; (8001a4c <MX_GPIO_Init+0x180>)
 8001990:	f002 fca0 	bl	80042d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 7100 	mov.w	r1, #512	; 0x200
 800199a:	482d      	ldr	r0, [pc, #180]	; (8001a50 <MX_GPIO_Init+0x184>)
 800199c:	f002 fc9a 	bl	80042d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	4619      	mov	r1, r3
 80019b6:	4826      	ldr	r0, [pc, #152]	; (8001a50 <MX_GPIO_Init+0x184>)
 80019b8:	f002 faf8 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019bc:	2303      	movs	r3, #3
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019cc:	2302      	movs	r3, #2
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	481f      	ldr	r0, [pc, #124]	; (8001a54 <MX_GPIO_Init+0x188>)
 80019d8:	f002 fae8 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019dc:	2340      	movs	r3, #64	; 0x40
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4816      	ldr	r0, [pc, #88]	; (8001a4c <MX_GPIO_Init+0x180>)
 80019f4:	f002 fada 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4810      	ldr	r0, [pc, #64]	; (8001a4c <MX_GPIO_Init+0x180>)
 8001a0c:	f002 face 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <MX_GPIO_Init+0x184>)
 8001a2a:	f002 fabf 	bl	8003fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2028      	movs	r0, #40	; 0x28
 8001a34:	f002 f9f1 	bl	8003e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a38:	2028      	movs	r0, #40	; 0x28
 8001a3a:	f002 fa0a 	bl	8003e52 <HAL_NVIC_EnableIRQ>

}
 8001a3e:	bf00      	nop
 8001a40:	3730      	adds	r7, #48	; 0x30
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_TIM_PeriodElapsedCallback>:

//----ODOMETRY---------------------------------------------------


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	6078      	str	r0, [r7, #4]
	  if(htim->Instance==TIM2){
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d146      	bne.n	8001af8 <HAL_TIM_PeriodElapsedCallback+0xa0>
		  timer_indoor_system+=0.001;
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd8a 	bl	8000588 <__aeabi_f2d>
 8001a74:	a322      	add	r3, pc, #136	; (adr r3, 8001b00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fc27 	bl	80002cc <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f8af 	bl	8000be8 <__aeabi_d2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a8e:	6013      	str	r3, [r2, #0]
		  indx_odom++;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
		  if(indx_odom==sampling_time){
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	d11e      	bne.n	8001af8 <HAL_TIM_PeriodElapsedCallback+0xa0>
			  //if(imu_ready==true)
			  //{
				  odometryUpdater(countsM1_roboclaw,countsM2_roboclaw,countsM3_roboclaw,countsM4_roboclaw,speedM1_roboclaw,speedM2_roboclaw,speedM3_roboclaw,speedM4_roboclaw);
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001abc:	681c      	ldr	r4, [r3, #0]
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ac0:	681d      	ldr	r5, [r3, #0]
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ac4:	681e      	ldr	r6, [r3, #0]
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	4915      	ldr	r1, [pc, #84]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ad6:	6809      	ldr	r1, [r1, #0]
 8001ad8:	4815      	ldr	r0, [pc, #84]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	9003      	str	r0, [sp, #12]
 8001ade:	9102      	str	r1, [sp, #8]
 8001ae0:	9201      	str	r2, [sp, #4]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4632      	mov	r2, r6
 8001ae8:	4629      	mov	r1, r5
 8001aea:	4620      	mov	r0, r4
 8001aec:	f000 f89c 	bl	8001c28 <odometryUpdater>
			  //}
			  indx_odom=0;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b04:	3f50624d 	.word	0x3f50624d
 8001b08:	200006ac 	.word	0x200006ac
 8001b0c:	2000054c 	.word	0x2000054c
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000648 	.word	0x20000648
 8001b18:	2000064c 	.word	0x2000064c
 8001b1c:	20000650 	.word	0x20000650
 8001b20:	20000654 	.word	0x20000654
 8001b24:	20000658 	.word	0x20000658
 8001b28:	2000065c 	.word	0x2000065c
 8001b2c:	20000660 	.word	0x20000660
 8001b30:	20000664 	.word	0x20000664

08001b34 <reset_Odometry>:

void reset_Odometry()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
	bool set_1=Drive_M1_M2_With_Signed_Speed(address_huart1,(uint8_t)address_roboclaw1, 0, 0);
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <reset_Odometry+0xb8>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2200      	movs	r2, #0
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	f000 fe41 	bl	80027ca <Drive_M1_M2_With_Signed_Speed>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
	bool set_2=Drive_M1_M2_With_Signed_Speed(address_huart2,(uint8_t)address_roboclaw2, 0, 0);
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <reset_Odometry+0xbc>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	2300      	movs	r3, #0
 8001b52:	2200      	movs	r2, #0
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	f000 fe38 	bl	80027ca <Drive_M1_M2_With_Signed_Speed>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71bb      	strb	r3, [r7, #6]
	bool set_3=Reset_Encoder_Counters(address_huart1,(uint8_t)address_roboclaw1);
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <reset_Odometry+0xb8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fe86 	bl	8002876 <Reset_Encoder_Counters>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	717b      	strb	r3, [r7, #5]
	bool set_4=Reset_Encoder_Counters(address_huart2,(uint8_t)address_roboclaw2);
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <reset_Odometry+0xbc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fe7e 	bl	8002876 <Reset_Encoder_Counters>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	713b      	strb	r3, [r7, #4]

	wt901c_init(&huart2);
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <reset_Odometry+0xc0>)
 8001b80:	f7ff fa04 	bl	8000f8c <wt901c_init>
//	  HAL_Delay(200);
//	  theta_curr=theta_imu[2]+180;
//	  imu_ready=true;


	robot_x_pos=0;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <reset_Odometry+0xc4>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
	robot_y_pos=0;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <reset_Odometry+0xc8>)
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
	robot_angular_pos=0;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <reset_Odometry+0xcc>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
	robot_angular_pos_aux=0;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <reset_Odometry+0xd0>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
	theta_ant=0;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <reset_Odometry+0xd4>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
	theta_curr=0;
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <reset_Odometry+0xd8>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
	delta_theta=0;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <reset_Odometry+0xdc>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
	robot_linear_vel=0;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <reset_Odometry+0xe0>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
	robot_x_vel=0;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <reset_Odometry+0xe4>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
	robot_y_vel=0;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <reset_Odometry+0xe8>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
	robot_angular_vel=0;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <reset_Odometry+0xec>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
	status_button=false;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <reset_Odometry+0xf0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]


}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	20000450 	.word	0x20000450
 8001bf8:	20000630 	.word	0x20000630
 8001bfc:	20000634 	.word	0x20000634
 8001c00:	20000620 	.word	0x20000620
 8001c04:	20000624 	.word	0x20000624
 8001c08:	200006b8 	.word	0x200006b8
 8001c0c:	200006b0 	.word	0x200006b0
 8001c10:	200006b4 	.word	0x200006b4
 8001c14:	20000638 	.word	0x20000638
 8001c18:	20000628 	.word	0x20000628
 8001c1c:	2000062c 	.word	0x2000062c
 8001c20:	2000061c 	.word	0x2000061c
 8001c24:	200006a8 	.word	0x200006a8

08001c28 <odometryUpdater>:

void odometryUpdater(int32_t enc_FL, int32_t enc_FR, int32_t enc_RL, int32_t enc_RR, int32_t w_FL, int32_t w_FR, int32_t w_RL, int32_t w_RR)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
	float enc_res=979.2;
 8001c36:	4bce      	ldr	r3, [pc, #824]	; (8001f70 <odometryUpdater+0x348>)
 8001c38:	61fb      	str	r3, [r7, #28]
	t_curr=timer_indoor_system;
 8001c3a:	4bce      	ldr	r3, [pc, #824]	; (8001f74 <odometryUpdater+0x34c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4ace      	ldr	r2, [pc, #824]	; (8001f78 <odometryUpdater+0x350>)
 8001c40:	6013      	str	r3, [r2, #0]


	wheel_FL_ang_pos = 2 * 3.14 * enc_FL / enc_res;
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7fe fc8e 	bl	8000564 <__aeabi_i2d>
 8001c48:	a3bd      	add	r3, pc, #756	; (adr r3, 8001f40 <odometryUpdater+0x318>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fcf3 	bl	8000638 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	69f8      	ldr	r0, [r7, #28]
 8001c5c:	f7fe fc94 	bl	8000588 <__aeabi_f2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fe10 	bl	800088c <__aeabi_ddiv>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ffb8 	bl	8000be8 <__aeabi_d2f>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4ac0      	ldr	r2, [pc, #768]	; (8001f7c <odometryUpdater+0x354>)
 8001c7c:	6013      	str	r3, [r2, #0]
    wheel_FR_ang_pos = 2 * 3.14 * enc_FR / 1632;
 8001c7e:	68b8      	ldr	r0, [r7, #8]
 8001c80:	f7fe fc70 	bl	8000564 <__aeabi_i2d>
 8001c84:	a3ae      	add	r3, pc, #696	; (adr r3, 8001f40 <odometryUpdater+0x318>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fcd5 	bl	8000638 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4bb9      	ldr	r3, [pc, #740]	; (8001f80 <odometryUpdater+0x358>)
 8001c9c:	f7fe fdf6 	bl	800088c <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff9e 	bl	8000be8 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4ab5      	ldr	r2, [pc, #724]	; (8001f84 <odometryUpdater+0x35c>)
 8001cb0:	6013      	str	r3, [r2, #0]
    wheel_RL_ang_pos = 2 * 3.14 * enc_RL / enc_res;
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fc56 	bl	8000564 <__aeabi_i2d>
 8001cb8:	a3a1      	add	r3, pc, #644	; (adr r3, 8001f40 <odometryUpdater+0x318>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fcbb 	bl	8000638 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	461d      	mov	r5, r3
 8001cca:	69f8      	ldr	r0, [r7, #28]
 8001ccc:	f7fe fc5c 	bl	8000588 <__aeabi_f2d>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fdd8 	bl	800088c <__aeabi_ddiv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe ff80 	bl	8000be8 <__aeabi_d2f>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4aa7      	ldr	r2, [pc, #668]	; (8001f88 <odometryUpdater+0x360>)
 8001cec:	6013      	str	r3, [r2, #0]
    wheel_RR_ang_pos = 2 * 3.14 * enc_RR / enc_res;
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f7fe fc38 	bl	8000564 <__aeabi_i2d>
 8001cf4:	a392      	add	r3, pc, #584	; (adr r3, 8001f40 <odometryUpdater+0x318>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc9d 	bl	8000638 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4614      	mov	r4, r2
 8001d04:	461d      	mov	r5, r3
 8001d06:	69f8      	ldr	r0, [r7, #28]
 8001d08:	f7fe fc3e 	bl	8000588 <__aeabi_f2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe fdba 	bl	800088c <__aeabi_ddiv>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe ff62 	bl	8000be8 <__aeabi_d2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a99      	ldr	r2, [pc, #612]	; (8001f8c <odometryUpdater+0x364>)
 8001d28:	6013      	str	r3, [r2, #0]

    enc_L = (enc_FL+enc_RL) / (2 * tyre_deflection);
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d38:	4b95      	ldr	r3, [pc, #596]	; (8001f90 <odometryUpdater+0x368>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d46:	4b93      	ldr	r3, [pc, #588]	; (8001f94 <odometryUpdater+0x36c>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
    enc_R = (enc_FR+enc_RR) / (2 * tyre_deflection);
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d5a:	4b8d      	ldr	r3, [pc, #564]	; (8001f90 <odometryUpdater+0x368>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d68:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <odometryUpdater+0x370>)
 8001d6a:	edc3 7a00 	vstr	s15, [r3]

    wheel_L_ang_vel=(((w_FL+w_RL)/2)/979.2)*(2*M_PI);
 8001d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d72:	4413      	add	r3, r2
 8001d74:	0fda      	lsrs	r2, r3, #31
 8001d76:	4413      	add	r3, r2
 8001d78:	105b      	asrs	r3, r3, #1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbf2 	bl	8000564 <__aeabi_i2d>
 8001d80:	a371      	add	r3, pc, #452	; (adr r3, 8001f48 <odometryUpdater+0x320>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fd81 	bl	800088c <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	a36f      	add	r3, pc, #444	; (adr r3, 8001f50 <odometryUpdater+0x328>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fc4e 	bl	8000638 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe ff20 	bl	8000be8 <__aeabi_d2f>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a7c      	ldr	r2, [pc, #496]	; (8001f9c <odometryUpdater+0x374>)
 8001dac:	6013      	str	r3, [r2, #0]
    wheel_R_ang_vel=(((w_FR+w_RR)/2)/979.2)*(2*M_PI);
 8001dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db2:	4413      	add	r3, r2
 8001db4:	0fda      	lsrs	r2, r3, #31
 8001db6:	4413      	add	r3, r2
 8001db8:	105b      	asrs	r3, r3, #1
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbd2 	bl	8000564 <__aeabi_i2d>
 8001dc0:	a361      	add	r3, pc, #388	; (adr r3, 8001f48 <odometryUpdater+0x320>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fd61 	bl	800088c <__aeabi_ddiv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	a35f      	add	r3, pc, #380	; (adr r3, 8001f50 <odometryUpdater+0x328>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fc2e 	bl	8000638 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f7fe ff00 	bl	8000be8 <__aeabi_d2f>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4a6d      	ldr	r2, [pc, #436]	; (8001fa0 <odometryUpdater+0x378>)
 8001dec:	6013      	str	r3, [r2, #0]

    wheel_L_linear_vel=wheel_L_ang_vel*wheel_radius;
 8001dee:	4b6b      	ldr	r3, [pc, #428]	; (8001f9c <odometryUpdater+0x374>)
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <odometryUpdater+0x37c>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <odometryUpdater+0x380>)
 8001e00:	edc3 7a00 	vstr	s15, [r3]
	wheel_R_linear_vel=wheel_R_ang_vel*wheel_radius;
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <odometryUpdater+0x378>)
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <odometryUpdater+0x37c>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	4b65      	ldr	r3, [pc, #404]	; (8001fac <odometryUpdater+0x384>)
 8001e16:	edc3 7a00 	vstr	s15, [r3]




    float cur_wheel_L_ang_pos = 2 * M_PI * enc_L / 979.2;
 8001e1a:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <odometryUpdater+0x36c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fbb2 	bl	8000588 <__aeabi_f2d>
 8001e24:	a34a      	add	r3, pc, #296	; (adr r3, 8001f50 <odometryUpdater+0x328>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fc05 	bl	8000638 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	a344      	add	r3, pc, #272	; (adr r3, 8001f48 <odometryUpdater+0x320>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fd26 	bl	800088c <__aeabi_ddiv>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fece 	bl	8000be8 <__aeabi_d2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	61bb      	str	r3, [r7, #24]
    float cur_wheel_R_ang_pos = 2 * M_PI * enc_R / 979.2;
 8001e50:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <odometryUpdater+0x370>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb97 	bl	8000588 <__aeabi_f2d>
 8001e5a:	a33d      	add	r3, pc, #244	; (adr r3, 8001f50 <odometryUpdater+0x328>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbea 	bl	8000638 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	a336      	add	r3, pc, #216	; (adr r3, 8001f48 <odometryUpdater+0x320>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fd0b 	bl	800088c <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	617b      	str	r3, [r7, #20]
//
//    float delta_wheel_R_ang_pos=cur_wheel_R_ang_pos-ant_wheel_R_ang_pos;
//    ant_wheel_R_ang_pos=cur_wheel_R_ang_pos;


    robot_angular_pos=imu.ang[2]*M_PI/180;
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <odometryUpdater+0x388>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb7c 	bl	8000588 <__aeabi_f2d>
 8001e90:	a331      	add	r3, pc, #196	; (adr r3, 8001f58 <odometryUpdater+0x330>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fbcf 	bl	8000638 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <odometryUpdater+0x38c>)
 8001ea8:	f7fe fcf0 	bl	800088c <__aeabi_ddiv>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fe98 	bl	8000be8 <__aeabi_d2f>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4a3f      	ldr	r2, [pc, #252]	; (8001fb8 <odometryUpdater+0x390>)
 8001ebc:	6013      	str	r3, [r2, #0]
    robot_angular_vel=imu.w[2]*M_PI/180;
 8001ebe:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <odometryUpdater+0x388>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb60 	bl	8000588 <__aeabi_f2d>
 8001ec8:	a323      	add	r3, pc, #140	; (adr r3, 8001f58 <odometryUpdater+0x330>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fbb3 	bl	8000638 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <odometryUpdater+0x38c>)
 8001ee0:	f7fe fcd4 	bl	800088c <__aeabi_ddiv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fe7c 	bl	8000be8 <__aeabi_d2f>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <odometryUpdater+0x394>)
 8001ef4:	6013      	str	r3, [r2, #0]


    HAL_ADC_Start_IT(&hadc1);
 8001ef6:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <odometryUpdater+0x398>)
 8001ef8:	f001 fa6c 	bl	80033d4 <HAL_ADC_Start_IT>
    float remaped_angle_camera=(angle_camera*0.0016)-2.2855;
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <odometryUpdater+0x39c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb1f 	bl	8000544 <__aeabi_ui2d>
 8001f06:	a316      	add	r3, pc, #88	; (adr r3, 8001f60 <odometryUpdater+0x338>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb94 	bl	8000638 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	a313      	add	r3, pc, #76	; (adr r3, 8001f68 <odometryUpdater+0x340>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe f9d3 	bl	80002c8 <__aeabi_dsub>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fe5d 	bl	8000be8 <__aeabi_d2f>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	613b      	str	r3, [r7, #16]

    sampling_time_odom=t_curr-t_ant;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <odometryUpdater+0x350>)
 8001f34:	ed93 7a00 	vldr	s14, [r3]
 8001f38:	e046      	b.n	8001fc8 <odometryUpdater+0x3a0>
 8001f3a:	bf00      	nop
 8001f3c:	f3af 8000 	nop.w
 8001f40:	51eb851f 	.word	0x51eb851f
 8001f44:	40191eb8 	.word	0x40191eb8
 8001f48:	9999999a 	.word	0x9999999a
 8001f4c:	408e9999 	.word	0x408e9999
 8001f50:	54442d18 	.word	0x54442d18
 8001f54:	401921fb 	.word	0x401921fb
 8001f58:	54442d18 	.word	0x54442d18
 8001f5c:	400921fb 	.word	0x400921fb
 8001f60:	eb1c432d 	.word	0xeb1c432d
 8001f64:	3f5a36e2 	.word	0x3f5a36e2
 8001f68:	39581062 	.word	0x39581062
 8001f6c:	400248b4 	.word	0x400248b4
 8001f70:	4474cccd 	.word	0x4474cccd
 8001f74:	200006ac 	.word	0x200006ac
 8001f78:	20000594 	.word	0x20000594
 8001f7c:	20000604 	.word	0x20000604
 8001f80:	40998000 	.word	0x40998000
 8001f84:	20000608 	.word	0x20000608
 8001f88:	2000060c 	.word	0x2000060c
 8001f8c:	20000610 	.word	0x20000610
 8001f90:	2000000c 	.word	0x2000000c
 8001f94:	20000614 	.word	0x20000614
 8001f98:	20000618 	.word	0x20000618
 8001f9c:	2000057c 	.word	0x2000057c
 8001fa0:	20000580 	.word	0x20000580
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	20000584 	.word	0x20000584
 8001fac:	20000588 	.word	0x20000588
 8001fb0:	20000598 	.word	0x20000598
 8001fb4:	40668000 	.word	0x40668000
 8001fb8:	20000620 	.word	0x20000620
 8001fbc:	2000061c 	.word	0x2000061c
 8001fc0:	20000324 	.word	0x20000324
 8001fc4:	200006c8 	.word	0x200006c8
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <odometryUpdater+0x508>)
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd2:	4b58      	ldr	r3, [pc, #352]	; (8002134 <odometryUpdater+0x50c>)
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
    robot_linear_vel=(wheel_L_linear_vel+wheel_R_linear_vel)/2;
 8001fd8:	4b57      	ldr	r3, [pc, #348]	; (8002138 <odometryUpdater+0x510>)
 8001fda:	ed93 7a00 	vldr	s14, [r3]
 8001fde:	4b57      	ldr	r3, [pc, #348]	; (800213c <odometryUpdater+0x514>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <odometryUpdater+0x518>)
 8001ff2:	edc3 7a00 	vstr	s15, [r3]
    robot_x_vel = robot_linear_vel * cos(robot_angular_pos);
 8001ff6:	4b52      	ldr	r3, [pc, #328]	; (8002140 <odometryUpdater+0x518>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fac4 	bl	8000588 <__aeabi_f2d>
 8002000:	4604      	mov	r4, r0
 8002002:	460d      	mov	r5, r1
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <odometryUpdater+0x51c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fabd 	bl	8000588 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	ec43 2b10 	vmov	d0, r2, r3
 8002016:	f00d ff5b 	bl	800fed0 <cos>
 800201a:	ec53 2b10 	vmov	r2, r3, d0
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe fb09 	bl	8000638 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fddb 	bl	8000be8 <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	4a44      	ldr	r2, [pc, #272]	; (8002148 <odometryUpdater+0x520>)
 8002036:	6013      	str	r3, [r2, #0]
    robot_y_vel = robot_linear_vel * sin(robot_angular_pos);
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <odometryUpdater+0x518>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe faa3 	bl	8000588 <__aeabi_f2d>
 8002042:	4604      	mov	r4, r0
 8002044:	460d      	mov	r5, r1
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <odometryUpdater+0x51c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fa9c 	bl	8000588 <__aeabi_f2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	ec43 2b10 	vmov	d0, r2, r3
 8002058:	f00d ff8e 	bl	800ff78 <sin>
 800205c:	ec53 2b10 	vmov	r2, r3, d0
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	f7fe fae8 	bl	8000638 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f7fe fdba 	bl	8000be8 <__aeabi_d2f>
 8002074:	4603      	mov	r3, r0
 8002076:	4a35      	ldr	r2, [pc, #212]	; (800214c <odometryUpdater+0x524>)
 8002078:	6013      	str	r3, [r2, #0]
    robot_x_pos = robot_x_pos + robot_x_vel * (sampling_time_odom);
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <odometryUpdater+0x520>)
 800207c:	ed93 7a00 	vldr	s14, [r3]
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <odometryUpdater+0x50c>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <odometryUpdater+0x528>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <odometryUpdater+0x528>)
 8002096:	edc3 7a00 	vstr	s15, [r3]
    robot_y_pos = robot_y_pos + robot_y_vel * (sampling_time_odom);
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <odometryUpdater+0x524>)
 800209c:	ed93 7a00 	vldr	s14, [r3]
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <odometryUpdater+0x50c>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <odometryUpdater+0x52c>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <odometryUpdater+0x52c>)
 80020b6:	edc3 7a00 	vstr	s15, [r3]
    t_ant=t_curr;
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <odometryUpdater+0x530>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <odometryUpdater+0x508>)
 80020c0:	6013      	str	r3, [r2, #0]



    mag_y=0;
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <odometryUpdater+0x534>)
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
    gyro_z=0;
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <odometryUpdater+0x538>)
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
    accel_x=0;
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <odometryUpdater+0x53c>)
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]


    buffer_txt[0]=robot_x_pos;
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <odometryUpdater+0x528>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a22      	ldr	r2, [pc, #136]	; (8002168 <odometryUpdater+0x540>)
 80020e0:	6013      	str	r3, [r2, #0]
    buffer_txt[1]=robot_y_pos;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <odometryUpdater+0x52c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a20      	ldr	r2, [pc, #128]	; (8002168 <odometryUpdater+0x540>)
 80020e8:	6053      	str	r3, [r2, #4]
    buffer_txt[2]=robot_angular_pos;//theta_imu[2]-offset_theta;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <odometryUpdater+0x51c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <odometryUpdater+0x540>)
 80020f0:	6093      	str	r3, [r2, #8]
    buffer_txt[3]=robot_linear_vel;
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <odometryUpdater+0x518>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <odometryUpdater+0x540>)
 80020f8:	60d3      	str	r3, [r2, #12]
    buffer_txt[4]=robot_angular_vel;
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <odometryUpdater+0x544>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <odometryUpdater+0x540>)
 8002100:	6113      	str	r3, [r2, #16]
    buffer_txt[5]=mag_y;//robot_angular_vel
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <odometryUpdater+0x534>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <odometryUpdater+0x540>)
 8002108:	6153      	str	r3, [r2, #20]
    buffer_txt[6]=gyro_z;
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <odometryUpdater+0x538>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a16      	ldr	r2, [pc, #88]	; (8002168 <odometryUpdater+0x540>)
 8002110:	6193      	str	r3, [r2, #24]
    buffer_txt[7]=accel_x;
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <odometryUpdater+0x53c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a14      	ldr	r2, [pc, #80]	; (8002168 <odometryUpdater+0x540>)
 8002118:	61d3      	str	r3, [r2, #28]
    buffer_txt[8]=remaped_angle_camera;
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <odometryUpdater+0x540>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	6213      	str	r3, [r2, #32]
    CDC_Transmit_FS(&buffer_txt, 9 * sizeof(float));
 8002120:	2124      	movs	r1, #36	; 0x24
 8002122:	4811      	ldr	r0, [pc, #68]	; (8002168 <odometryUpdater+0x540>)
 8002124:	f00a fca8 	bl	800ca78 <CDC_Transmit_FS>



}
 8002128:	bf00      	nop
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
 8002130:	20000590 	.word	0x20000590
 8002134:	2000058c 	.word	0x2000058c
 8002138:	20000584 	.word	0x20000584
 800213c:	20000588 	.word	0x20000588
 8002140:	20000638 	.word	0x20000638
 8002144:	20000620 	.word	0x20000620
 8002148:	20000628 	.word	0x20000628
 800214c:	2000062c 	.word	0x2000062c
 8002150:	20000630 	.word	0x20000630
 8002154:	20000634 	.word	0x20000634
 8002158:	20000594 	.word	0x20000594
 800215c:	200006c4 	.word	0x200006c4
 8002160:	200006c0 	.word	0x200006c0
 8002164:	200006bc 	.word	0x200006bc
 8002168:	2000051c 	.word	0x2000051c
 800216c:	2000061c 	.word	0x2000061c

08002170 <setAngleCamera>:


void setAngleCamera(float set_camera)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm_camera=set_camera*605.81+1451.6;
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fa04 	bl	8000588 <__aeabi_f2d>
 8002180:	a312      	add	r3, pc, #72	; (adr r3, 80021cc <setAngleCamera+0x5c>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe fa57 	bl	8000638 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	a310      	add	r3, pc, #64	; (adr r3, 80021d4 <setAngleCamera+0x64>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f898 	bl	80002cc <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7fe fd20 	bl	8000be8 <__aeabi_d2f>
 80021a8:	4603      	mov	r3, r0
 80021aa:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwm_camera);
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <setAngleCamera+0x58>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b8:	ee17 2a90 	vmov	r2, s15
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34

}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000408 	.word	0x20000408
 80021cc:	e147ae14 	.word	0xe147ae14
 80021d0:	4082ee7a 	.word	0x4082ee7a
 80021d4:	66666666 	.word	0x66666666
 80021d8:	4096ae66 	.word	0x4096ae66
 80021dc:	00000000 	.word	0x00000000

080021e0 <setSpeed>:

void setSpeed(float linear, float angular)
{
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021ea:	edc7 0a00 	vstr	s1, [r7]
    float enc_res=979.2;
 80021ee:	4bc6      	ldr	r3, [pc, #792]	; (8002508 <setSpeed+0x328>)
 80021f0:	617b      	str	r3, [r7, #20]

	bool set_0,set_1;
	lin = linear;
 80021f2:	4ac6      	ldr	r2, [pc, #792]	; (800250c <setSpeed+0x32c>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6013      	str	r3, [r2, #0]
    ang = angular;
 80021f8:	4ac5      	ldr	r2, [pc, #788]	; (8002510 <setSpeed+0x330>)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6013      	str	r3, [r2, #0]
    if(fabs(lin)>1.5386) 	lin=(linear/fabs(linear))*1.5386;
 80021fe:	4bc3      	ldr	r3, [pc, #780]	; (800250c <setSpeed+0x32c>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eef0 7ae7 	vabs.f32	s15, s15
 8002208:	ee17 0a90 	vmov	r0, s15
 800220c:	f7fe f9bc 	bl	8000588 <__aeabi_f2d>
 8002210:	a3b7      	add	r3, pc, #732	; (adr r3, 80024f0 <setSpeed+0x310>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe fc9f 	bl	8000b58 <__aeabi_dcmpgt>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d024      	beq.n	800226a <setSpeed+0x8a>
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7fe f9b1 	bl	8000588 <__aeabi_f2d>
 8002226:	4604      	mov	r4, r0
 8002228:	460d      	mov	r5, r1
 800222a:	edd7 7a01 	vldr	s15, [r7, #4]
 800222e:	eef0 7ae7 	vabs.f32	s15, s15
 8002232:	ee17 0a90 	vmov	r0, s15
 8002236:	f7fe f9a7 	bl	8000588 <__aeabi_f2d>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4620      	mov	r0, r4
 8002240:	4629      	mov	r1, r5
 8002242:	f7fe fb23 	bl	800088c <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	a3a8      	add	r3, pc, #672	; (adr r3, 80024f0 <setSpeed+0x310>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe f9f0 	bl	8000638 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fcc2 	bl	8000be8 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	4aa9      	ldr	r2, [pc, #676]	; (800250c <setSpeed+0x32c>)
 8002268:	6013      	str	r3, [r2, #0]
    if(fabs(ang)>14.65) 	ang=(angular/fabs(angular))*14.65;
 800226a:	4ba9      	ldr	r3, [pc, #676]	; (8002510 <setSpeed+0x330>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	eef0 7ae7 	vabs.f32	s15, s15
 8002274:	ee17 0a90 	vmov	r0, s15
 8002278:	f7fe f986 	bl	8000588 <__aeabi_f2d>
 800227c:	a39e      	add	r3, pc, #632	; (adr r3, 80024f8 <setSpeed+0x318>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe fc69 	bl	8000b58 <__aeabi_dcmpgt>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d024      	beq.n	80022d6 <setSpeed+0xf6>
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f7fe f97b 	bl	8000588 <__aeabi_f2d>
 8002292:	4604      	mov	r4, r0
 8002294:	460d      	mov	r5, r1
 8002296:	edd7 7a00 	vldr	s15, [r7]
 800229a:	eef0 7ae7 	vabs.f32	s15, s15
 800229e:	ee17 0a90 	vmov	r0, s15
 80022a2:	f7fe f971 	bl	8000588 <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4620      	mov	r0, r4
 80022ac:	4629      	mov	r1, r5
 80022ae:	f7fe faed 	bl	800088c <__aeabi_ddiv>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	a38f      	add	r3, pc, #572	; (adr r3, 80024f8 <setSpeed+0x318>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f7fe f9ba 	bl	8000638 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc8c 	bl	8000be8 <__aeabi_d2f>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4a8f      	ldr	r2, [pc, #572]	; (8002510 <setSpeed+0x330>)
 80022d4:	6013      	str	r3, [r2, #0]



    L_wheel_lin_speed = lin - (ang * robot_width);
 80022d6:	4b8d      	ldr	r3, [pc, #564]	; (800250c <setSpeed+0x32c>)
 80022d8:	ed93 7a00 	vldr	s14, [r3]
 80022dc:	4b8c      	ldr	r3, [pc, #560]	; (8002510 <setSpeed+0x330>)
 80022de:	edd3 6a00 	vldr	s13, [r3]
 80022e2:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <setSpeed+0x334>)
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f0:	4b89      	ldr	r3, [pc, #548]	; (8002518 <setSpeed+0x338>)
 80022f2:	edc3 7a00 	vstr	s15, [r3]
    R_wheel_lin_speed = lin + (ang * robot_width);
 80022f6:	4b86      	ldr	r3, [pc, #536]	; (8002510 <setSpeed+0x330>)
 80022f8:	ed93 7a00 	vldr	s14, [r3]
 80022fc:	4b85      	ldr	r3, [pc, #532]	; (8002514 <setSpeed+0x334>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002306:	4b81      	ldr	r3, [pc, #516]	; (800250c <setSpeed+0x32c>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002310:	4b82      	ldr	r3, [pc, #520]	; (800251c <setSpeed+0x33c>)
 8002312:	edc3 7a00 	vstr	s15, [r3]
    L_wheel_angular_velocity = L_wheel_lin_speed / wheel_radius;
 8002316:	4b80      	ldr	r3, [pc, #512]	; (8002518 <setSpeed+0x338>)
 8002318:	edd3 6a00 	vldr	s13, [r3]
 800231c:	4b80      	ldr	r3, [pc, #512]	; (8002520 <setSpeed+0x340>)
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <setSpeed+0x344>)
 8002328:	edc3 7a00 	vstr	s15, [r3]
    R_wheel_angular_velocity = R_wheel_lin_speed / wheel_radius;
 800232c:	4b7b      	ldr	r3, [pc, #492]	; (800251c <setSpeed+0x33c>)
 800232e:	edd3 6a00 	vldr	s13, [r3]
 8002332:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <setSpeed+0x340>)
 8002334:	ed93 7a00 	vldr	s14, [r3]
 8002338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233c:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <setSpeed+0x348>)
 800233e:	edc3 7a00 	vstr	s15, [r3]
    L_enc_speed = enc_res * L_wheel_angular_velocity / (2 * M_PI);
 8002342:	4b78      	ldr	r3, [pc, #480]	; (8002524 <setSpeed+0x344>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	edd7 7a05 	vldr	s15, [r7, #20]
 800234c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002350:	ee17 0a90 	vmov	r0, s15
 8002354:	f7fe f918 	bl	8000588 <__aeabi_f2d>
 8002358:	a369      	add	r3, pc, #420	; (adr r3, 8002500 <setSpeed+0x320>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe fa95 	bl	800088c <__aeabi_ddiv>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fc3d 	bl	8000be8 <__aeabi_d2f>
 800236e:	4603      	mov	r3, r0
 8002370:	4a6e      	ldr	r2, [pc, #440]	; (800252c <setSpeed+0x34c>)
 8002372:	6013      	str	r3, [r2, #0]
    R_enc_speed = enc_res * R_wheel_angular_velocity / (2 * M_PI);
 8002374:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <setSpeed+0x348>)
 8002376:	ed93 7a00 	vldr	s14, [r3]
 800237a:	edd7 7a05 	vldr	s15, [r7, #20]
 800237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002382:	ee17 0a90 	vmov	r0, s15
 8002386:	f7fe f8ff 	bl	8000588 <__aeabi_f2d>
 800238a:	a35d      	add	r3, pc, #372	; (adr r3, 8002500 <setSpeed+0x320>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe fa7c 	bl	800088c <__aeabi_ddiv>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fc24 	bl	8000be8 <__aeabi_d2f>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a63      	ldr	r2, [pc, #396]	; (8002530 <setSpeed+0x350>)
 80023a4:	6013      	str	r3, [r2, #0]

    float R_enc_speed_34_1= 1632 * R_wheel_angular_velocity / (2 * M_PI);
 80023a6:	4b60      	ldr	r3, [pc, #384]	; (8002528 <setSpeed+0x348>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002534 <setSpeed+0x354>
 80023b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b4:	ee17 0a90 	vmov	r0, s15
 80023b8:	f7fe f8e6 	bl	8000588 <__aeabi_f2d>
 80023bc:	a350      	add	r3, pc, #320	; (adr r3, 8002500 <setSpeed+0x320>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe fa63 	bl	800088c <__aeabi_ddiv>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7fe fc0b 	bl	8000be8 <__aeabi_d2f>
 80023d2:	4603      	mov	r3, r0
 80023d4:	613b      	str	r3, [r7, #16]



    if(abs(L_enc_speed)>max_speed || abs(R_enc_speed)>max_speed)
 80023d6:	4b55      	ldr	r3, [pc, #340]	; (800252c <setSpeed+0x34c>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bfb8      	it	lt
 80023e8:	425b      	neglt	r3, r3
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f2:	4b51      	ldr	r3, [pc, #324]	; (8002538 <setSpeed+0x358>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	dc16      	bgt.n	8002430 <setSpeed+0x250>
 8002402:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <setSpeed+0x350>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240c:	ee17 3a90 	vmov	r3, s15
 8002410:	2b00      	cmp	r3, #0
 8002412:	bfb8      	it	lt
 8002414:	425b      	neglt	r3, r3
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800241e:	4b46      	ldr	r3, [pc, #280]	; (8002538 <setSpeed+0x358>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	f340 80d3 	ble.w	80025d6 <setSpeed+0x3f6>
    {
    	if(abs(R_enc_speed)>abs(L_enc_speed))
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <setSpeed+0x350>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800243a:	ee17 3a90 	vmov	r3, s15
 800243e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002442:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <setSpeed+0x34c>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002450:	ee17 3a90 	vmov	r3, s15
 8002454:	2b00      	cmp	r3, #0
 8002456:	bfb8      	it	lt
 8002458:	425b      	neglt	r3, r3
 800245a:	429a      	cmp	r2, r3
 800245c:	dd74      	ble.n	8002548 <setSpeed+0x368>
    	{
    		rot_radio= fabs(R_enc_speed/max_speed);
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <setSpeed+0x350>)
 8002460:	edd3 6a00 	vldr	s13, [r3]
 8002464:	4b34      	ldr	r3, [pc, #208]	; (8002538 <setSpeed+0x358>)
 8002466:	ed93 7a00 	vldr	s14, [r3]
 800246a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800246e:	eef0 7ae7 	vabs.f32	s15, s15
 8002472:	4b32      	ldr	r3, [pc, #200]	; (800253c <setSpeed+0x35c>)
 8002474:	edc3 7a00 	vstr	s15, [r3]
    		new_R_enc_speed=(R_enc_speed/fabs(R_enc_speed))*max_speed;  //(R_enc_speed/fabs(R_enc_speed)) is to get the sign of the original command
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <setSpeed+0x350>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f883 	bl	8000588 <__aeabi_f2d>
 8002482:	4604      	mov	r4, r0
 8002484:	460d      	mov	r5, r1
 8002486:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <setSpeed+0x350>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eef0 7ae7 	vabs.f32	s15, s15
 8002490:	ee17 0a90 	vmov	r0, s15
 8002494:	f7fe f878 	bl	8000588 <__aeabi_f2d>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4620      	mov	r0, r4
 800249e:	4629      	mov	r1, r5
 80024a0:	f7fe f9f4 	bl	800088c <__aeabi_ddiv>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4614      	mov	r4, r2
 80024aa:	461d      	mov	r5, r3
 80024ac:	4b22      	ldr	r3, [pc, #136]	; (8002538 <setSpeed+0x358>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f869 	bl	8000588 <__aeabi_f2d>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fe f8bb 	bl	8000638 <__aeabi_dmul>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7fe fb8d 	bl	8000be8 <__aeabi_d2f>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <setSpeed+0x360>)
 80024d2:	6013      	str	r3, [r2, #0]
    		new_L_enc_speed=L_enc_speed/rot_radio;
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <setSpeed+0x34c>)
 80024d6:	edd3 6a00 	vldr	s13, [r3]
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <setSpeed+0x35c>)
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <setSpeed+0x364>)
 80024e6:	edc3 7a00 	vstr	s15, [r3]
    	if(abs(R_enc_speed)>abs(L_enc_speed))
 80024ea:	e09e      	b.n	800262a <setSpeed+0x44a>
 80024ec:	f3af 8000 	nop.w
 80024f0:	089a0275 	.word	0x089a0275
 80024f4:	3ff89e1b 	.word	0x3ff89e1b
 80024f8:	cccccccd 	.word	0xcccccccd
 80024fc:	402d4ccc 	.word	0x402d4ccc
 8002500:	54442d18 	.word	0x54442d18
 8002504:	401921fb 	.word	0x401921fb
 8002508:	4474cccd 	.word	0x4474cccd
 800250c:	20000550 	.word	0x20000550
 8002510:	20000554 	.word	0x20000554
 8002514:	20000014 	.word	0x20000014
 8002518:	20000558 	.word	0x20000558
 800251c:	2000055c 	.word	0x2000055c
 8002520:	20000010 	.word	0x20000010
 8002524:	20000560 	.word	0x20000560
 8002528:	20000564 	.word	0x20000564
 800252c:	20000568 	.word	0x20000568
 8002530:	2000056c 	.word	0x2000056c
 8002534:	44cc0000 	.word	0x44cc0000
 8002538:	20000018 	.word	0x20000018
 800253c:	20000570 	.word	0x20000570
 8002540:	20000578 	.word	0x20000578
 8002544:	20000574 	.word	0x20000574
    	}else{
    		rot_radio= fabs(L_enc_speed/max_speed);
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <setSpeed+0x454>)
 800254a:	edd3 6a00 	vldr	s13, [r3]
 800254e:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <setSpeed+0x458>)
 8002550:	ed93 7a00 	vldr	s14, [r3]
 8002554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002558:	eef0 7ae7 	vabs.f32	s15, s15
 800255c:	4b37      	ldr	r3, [pc, #220]	; (800263c <setSpeed+0x45c>)
 800255e:	edc3 7a00 	vstr	s15, [r3]
    		new_L_enc_speed=(R_enc_speed/fabs(R_enc_speed))*max_speed;
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <setSpeed+0x460>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f80e 	bl	8000588 <__aeabi_f2d>
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
 8002570:	4b33      	ldr	r3, [pc, #204]	; (8002640 <setSpeed+0x460>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	eef0 7ae7 	vabs.f32	s15, s15
 800257a:	ee17 0a90 	vmov	r0, s15
 800257e:	f7fe f803 	bl	8000588 <__aeabi_f2d>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4620      	mov	r0, r4
 8002588:	4629      	mov	r1, r5
 800258a:	f7fe f97f 	bl	800088c <__aeabi_ddiv>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4614      	mov	r4, r2
 8002594:	461d      	mov	r5, r3
 8002596:	4b28      	ldr	r3, [pc, #160]	; (8002638 <setSpeed+0x458>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd fff4 	bl	8000588 <__aeabi_f2d>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fe f846 	bl	8000638 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fb18 	bl	8000be8 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <setSpeed+0x464>)
 80025bc:	6013      	str	r3, [r2, #0]
    		new_R_enc_speed=R_enc_speed/rot_radio;
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <setSpeed+0x460>)
 80025c0:	edd3 6a00 	vldr	s13, [r3]
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <setSpeed+0x45c>)
 80025c6:	ed93 7a00 	vldr	s14, [r3]
 80025ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <setSpeed+0x468>)
 80025d0:	edc3 7a00 	vstr	s15, [r3]
    	if(abs(R_enc_speed)>abs(L_enc_speed))
 80025d4:	e029      	b.n	800262a <setSpeed+0x44a>
    }else
    {



    	set_0=Drive_M1_M2_With_Signed_Speed(address_huart1,(uint8_t)address_roboclaw1, L_enc_speed, R_enc_speed_34_1);
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <setSpeed+0x46c>)
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <setSpeed+0x454>)
 80025dc:	edd3 7a00 	vldr	s15, [r3]
 80025e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80025e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
 80025f0:	ee17 2a10 	vmov	r2, s14
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	f000 f8e8 	bl	80027ca <Drive_M1_M2_With_Signed_Speed>
 80025fa:	4603      	mov	r3, r0
 80025fc:	73fb      	strb	r3, [r7, #15]
    	set_1=Drive_M1_M2_With_Signed_Speed(address_huart2,(uint8_t)address_roboclaw2, L_enc_speed, R_enc_speed);
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <setSpeed+0x470>)
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <setSpeed+0x454>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <setSpeed+0x460>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002616:	ee17 3a90 	vmov	r3, s15
 800261a:	ee17 2a10 	vmov	r2, s14
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	f000 f8d3 	bl	80027ca <Drive_M1_M2_With_Signed_Speed>
 8002624:	4603      	mov	r3, r0
 8002626:	73bb      	strb	r3, [r7, #14]
    }

}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bdb0      	pop	{r4, r5, r7, pc}
 8002632:	bf00      	nop
 8002634:	20000568 	.word	0x20000568
 8002638:	20000018 	.word	0x20000018
 800263c:	20000570 	.word	0x20000570
 8002640:	2000056c 	.word	0x2000056c
 8002644:	20000574 	.word	0x20000574
 8002648:	20000578 	.word	0x20000578
 800264c:	20000000 	.word	0x20000000
 8002650:	20000004 	.word	0x20000004

08002654 <Read_Encoder_Speed>:
	  HAL_UART_Receive(address_huart, rxBuff, 7,100);
	  return (int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
}

bool Read_Encoder_Speed(UART_HandleTypeDef* address_huart, uint8_t address_roboclaw, int motor, int32_t *speedMX_roboclaw)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	460b      	mov	r3, r1
 8002662:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd_motor;
	if (motor==1) cmd_motor=18;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <Read_Encoder_Speed+0x1c>
 800266a:	2312      	movs	r3, #18
 800266c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (motor==2) cmd_motor=19;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d102      	bne.n	800267c <Read_Encoder_Speed+0x28>
 8002676:	2313      	movs	r3, #19
 8002678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t txBuff[2]; // two bytes for address and cmd, two for value
	txBuff[0] = address_roboclaw; //first to write is address
 800267c:	7afb      	ldrb	r3, [r7, #11]
 800267e:	f887 3020 	strb.w	r3, [r7, #32]
	txBuff[1] = cmd_motor; // second is cmd
 8002682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002686:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 100);
 800268a:	f107 0120 	add.w	r1, r7, #32
 800268e:	2364      	movs	r3, #100	; 0x64
 8002690:	2202      	movs	r2, #2
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f005 fbf9 	bl	8007e8a <HAL_UART_Transmit>

	uint8_t rxBuff[7];
	HAL_UART_Receive(address_huart, rxBuff, 7,100);
 8002698:	f107 0118 	add.w	r1, r7, #24
 800269c:	2364      	movs	r3, #100	; 0x64
 800269e:	2207      	movs	r2, #7
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f005 fc84 	bl	8007fae <HAL_UART_Receive>
 80026a6:	8c3b      	ldrh	r3, [r7, #32]


	//CHECK THE CHK REGISTER-----------------
	uint8_t chk[7];
	memcpy(&chk[0],&txBuff[0],2);
 80026a8:	823b      	strh	r3, [r7, #16]
	memcpy(&chk[2],&rxBuff[0],5);
 80026aa:	f107 0118 	add.w	r1, r7, #24
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	3302      	adds	r3, #2
 80026b4:	2205      	movs	r2, #5
 80026b6:	4618      	mov	r0, r3
 80026b8:	f00a fee8 	bl	800d48c <memcpy>
	uint16_t crc_tx= crc16((unsigned char *)chk,7);
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	2107      	movs	r1, #7
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f97e 	bl	80029c4 <crc16>
 80026c8:	4603      	mov	r3, r0
 80026ca:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t crc_rx= (rxBuff[5]<<8 | rxBuff[6]);
 80026cc:	7f7b      	ldrb	r3, [r7, #29]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	7fbb      	ldrb	r3, [r7, #30]
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b21b      	sxth	r3, r3
 80026da:	847b      	strh	r3, [r7, #34]	; 0x22
	//---------------------------------------

	if(crc_tx==crc_rx){
 80026dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10d      	bne.n	8002700 <Read_Encoder_Speed+0xac>
		*speedMX_roboclaw=(int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
 80026e4:	7e3b      	ldrb	r3, [r7, #24]
 80026e6:	061a      	lsls	r2, r3, #24
 80026e8:	7e7b      	ldrb	r3, [r7, #25]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	7ebb      	ldrb	r3, [r7, #26]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	4313      	orrs	r3, r2
 80026f4:	7efa      	ldrb	r2, [r7, #27]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	601a      	str	r2, [r3, #0]
		return true;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <Read_Encoder_Speed+0xae>
	}
	else{
		return false;
 8002700:	2300      	movs	r3, #0
	}
}
 8002702:	4618      	mov	r0, r3
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <Read_Both_Encoder_Counts>:
	}

}


bool Read_Both_Encoder_Counts(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw, int32_t *countsM1_roboclaw, int32_t *countsM2_roboclaw){
 800270a:	b580      	push	{r7, lr}
 800270c:	b08c      	sub	sp, #48	; 0x30
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	460b      	mov	r3, r1
 8002718:	72fb      	strb	r3, [r7, #11]
	uint8_t txBuff[2]; // two bytes for address and cmd, two for value
	txBuff[0] = address_roboclaw; //first to write is address
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	txBuff[1] = (uint8_t)78; // second is cmd
 8002720:	234e      	movs	r3, #78	; 0x4e
 8002722:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 100);
 8002726:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800272a:	2364      	movs	r3, #100	; 0x64
 800272c:	2202      	movs	r2, #2
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f005 fbab 	bl	8007e8a <HAL_UART_Transmit>

	uint8_t rxBuff[10];
	HAL_UART_Receive(address_huart, rxBuff, 10,100);
 8002734:	f107 011c 	add.w	r1, r7, #28
 8002738:	2364      	movs	r3, #100	; 0x64
 800273a:	220a      	movs	r2, #10
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f005 fc36 	bl	8007fae <HAL_UART_Receive>
 8002742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

	//CHECK THE CHK REGISTER-----------------
	uint8_t chk[10];
	memcpy(chk,txBuff,2);
 8002744:	823b      	strh	r3, [r7, #16]
	memcpy(chk+2,rxBuff,8);
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	3302      	adds	r3, #2
 800274c:	f107 011c 	add.w	r1, r7, #28
 8002750:	2208      	movs	r2, #8
 8002752:	4618      	mov	r0, r3
 8002754:	f00a fe9a 	bl	800d48c <memcpy>
	uint16_t crc_tx= crc16((unsigned char *)chk,10);
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	210a      	movs	r1, #10
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f930 	bl	80029c4 <crc16>
 8002764:	4603      	mov	r3, r0
 8002766:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t crc_rx= (rxBuff[8]<<8 | rxBuff[9]);
 8002768:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b21a      	sxth	r2, r3
 8002770:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002774:	b21b      	sxth	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	//---------------------------------------

	if(crc_tx==crc_rx){
 800277c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800277e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002780:	429a      	cmp	r2, r3
 8002782:	d11d      	bne.n	80027c0 <Read_Both_Encoder_Counts+0xb6>
		*countsM1_roboclaw=(int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
 8002784:	7f3b      	ldrb	r3, [r7, #28]
 8002786:	061a      	lsls	r2, r3, #24
 8002788:	7f7b      	ldrb	r3, [r7, #29]
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	431a      	orrs	r2, r3
 800278e:	7fbb      	ldrb	r3, [r7, #30]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	4313      	orrs	r3, r2
 8002794:	7ffa      	ldrb	r2, [r7, #31]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	601a      	str	r2, [r3, #0]
		*countsM2_roboclaw=(int32_t) ((uint32_t)((rxBuff[4] << 24) | (rxBuff[5] << 16) | (rxBuff[6] << 8) | rxBuff[7]));
 800279c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027a0:	061a      	lsls	r2, r3, #24
 80027a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027b6:	431a      	orrs	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	601a      	str	r2, [r3, #0]
		return true;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <Read_Both_Encoder_Counts+0xb8>
	}
	else{
		return false;
 80027c0:	2300      	movs	r3, #0
	}

}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3730      	adds	r7, #48	; 0x30
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <Drive_M1_M2_With_Signed_Speed>:
		for(int i=0;i<=7;i++){
			chk[i+2]=*(rxBuff_dir+i);
		}
*/

bool Drive_M1_M2_With_Signed_Speed(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw, int32_t SpeedM1, int32_t SpeedM2){
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b08a      	sub	sp, #40	; 0x28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	460b      	mov	r3, r1
 80027d8:	72fb      	strb	r3, [r7, #11]

	  uint8_t txBuff[12];
	  txBuff[0] = address_roboclaw;
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	763b      	strb	r3, [r7, #24]
	  txBuff[1] = (uint8_t)37;
 80027de:	2325      	movs	r3, #37	; 0x25
 80027e0:	767b      	strb	r3, [r7, #25]
	  txBuff[2] = SpeedM1>>24;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	161b      	asrs	r3, r3, #24
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	76bb      	strb	r3, [r7, #26]
	  txBuff[3] = SpeedM1>>16;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	141b      	asrs	r3, r3, #16
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	76fb      	strb	r3, [r7, #27]
	  txBuff[4] = SpeedM1>>8;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	121b      	asrs	r3, r3, #8
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	773b      	strb	r3, [r7, #28]
	  txBuff[5] = SpeedM1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	777b      	strb	r3, [r7, #29]

	  txBuff[6] = SpeedM2>>24;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	161b      	asrs	r3, r3, #24
 8002804:	b2db      	uxtb	r3, r3
 8002806:	77bb      	strb	r3, [r7, #30]
	  txBuff[7] = SpeedM2>>16;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	141b      	asrs	r3, r3, #16
 800280c:	b2db      	uxtb	r3, r3
 800280e:	77fb      	strb	r3, [r7, #31]
	  txBuff[8] = SpeedM2>>8;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	121b      	asrs	r3, r3, #8
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f887 3020 	strb.w	r3, [r7, #32]
	  txBuff[9] = SpeedM2;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  uint16_t crc_chk = crc16(txBuff, 10);
 8002822:	f107 0318 	add.w	r3, r7, #24
 8002826:	210a      	movs	r1, #10
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f8cb 	bl	80029c4 <crc16>
 800282e:	4603      	mov	r3, r0
 8002830:	84fb      	strh	r3, [r7, #38]	; 0x26
  	  txBuff[10] = crc_chk >> 8; // high value byte
 8002832:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	b29b      	uxth	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  	  txBuff[11] = crc_chk; // low value byte
 800283e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   	  HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff),200);
 8002846:	f107 0118 	add.w	r1, r7, #24
 800284a:	23c8      	movs	r3, #200	; 0xc8
 800284c:	220c      	movs	r2, #12
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f005 fb1b 	bl	8007e8a <HAL_UART_Transmit>

   	  uint8_t rxBuff[1];
   	  HAL_UART_Receive(address_huart, rxBuff, 1,200);
 8002854:	f107 0114 	add.w	r1, r7, #20
 8002858:	23c8      	movs	r3, #200	; 0xc8
 800285a:	2201      	movs	r2, #1
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f005 fba6 	bl	8007fae <HAL_UART_Receive>

   	  if(rxBuff[0]==(uint8_t)255){
 8002862:	7d3b      	ldrb	r3, [r7, #20]
 8002864:	2bff      	cmp	r3, #255	; 0xff
 8002866:	d101      	bne.n	800286c <Drive_M1_M2_With_Signed_Speed+0xa2>
   		  return true;
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <Drive_M1_M2_With_Signed_Speed+0xa4>
   	  }
   	  else{
   		  return false;
 800286c:	2300      	movs	r3, #0
   	  }

}
 800286e:	4618      	mov	r0, r3
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <Reset_Encoder_Counters>:
		return false;
	}

}

bool Reset_Encoder_Counters(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw){
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
	  uint8_t txBuff[4];
	  txBuff[0] = address_roboclaw;
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	743b      	strb	r3, [r7, #16]
	  txBuff[1] = (uint8_t)20;
 8002886:	2314      	movs	r3, #20
 8002888:	747b      	strb	r3, [r7, #17]


	  uint16_t crc_chk = crc16(txBuff, 2);
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f897 	bl	80029c4 <crc16>
 8002896:	4603      	mov	r3, r0
 8002898:	82fb      	strh	r3, [r7, #22]
	  txBuff[2] = crc_chk >> 8; // high value byte
 800289a:	8afb      	ldrh	r3, [r7, #22]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	74bb      	strb	r3, [r7, #18]
	  txBuff[3] = crc_chk; // low value byte
 80028a4:	8afb      	ldrh	r3, [r7, #22]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	74fb      	strb	r3, [r7, #19]
 	  HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 10);
 80028aa:	f107 0110 	add.w	r1, r7, #16
 80028ae:	230a      	movs	r3, #10
 80028b0:	2204      	movs	r2, #4
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f005 fae9 	bl	8007e8a <HAL_UART_Transmit>

 	  uint8_t rxBuff[1];
 	  HAL_UART_Receive(address_huart, rxBuff, 1,10);
 80028b8:	f107 010c 	add.w	r1, r7, #12
 80028bc:	230a      	movs	r3, #10
 80028be:	2201      	movs	r2, #1
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f005 fb74 	bl	8007fae <HAL_UART_Receive>

 	  if(rxBuff[0]==(uint8_t)255){
 80028c6:	7b3b      	ldrb	r3, [r7, #12]
 80028c8:	2bff      	cmp	r3, #255	; 0xff
 80028ca:	d101      	bne.n	80028d0 <Reset_Encoder_Counters+0x5a>
 		  return true;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <Reset_Encoder_Counters+0x5c>
 	  }
 	  else{
 		  return false;
 80028d0:	2300      	movs	r3, #0
 	  }

}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <roboclaw1_init>:

bool roboclaw1_init(UART_HandleTypeDef* address_huart_roboclaw,uint8_t address_roboclaw){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
		flag_status_register_rw1[0]=0;
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <roboclaw1_init+0x70>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
		flag_status_register_rw1[1]=0;
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <roboclaw1_init+0x70>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
		flag_status_register_rw1[2]=0;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <roboclaw1_init+0x70>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
		flag_status_register_rw1[3]=0;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <roboclaw1_init+0x70>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	60da      	str	r2, [r3, #12]
		flag_status_register_rw1[4]=0;
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <roboclaw1_init+0x70>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
		flag_status_register_rw1[5]=0;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <roboclaw1_init+0x70>)
 8002908:	2200      	movs	r2, #0
 800290a:	615a      	str	r2, [r3, #20]
		flag_status_register_rw1[6]=0;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <roboclaw1_init+0x70>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]

	  	//bool set_1=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,1,3000);
	  	//bool set_2=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,2,3000);
	  	bool set_1=Drive_M1_M2_With_Signed_Speed(address_huart_roboclaw,(uint8_t)address_roboclaw, 0, 0);
 8002912:	78f9      	ldrb	r1, [r7, #3]
 8002914:	2300      	movs	r3, #0
 8002916:	2200      	movs	r2, #0
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff56 	bl	80027ca <Drive_M1_M2_With_Signed_Speed>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]
	  	bool set_2=Reset_Encoder_Counters(address_huart_roboclaw,(uint8_t)address_roboclaw);
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffa5 	bl	8002876 <Reset_Encoder_Counters>
 800292c:	4603      	mov	r3, r0
 800292e:	73bb      	strb	r3, [r7, #14]

	  	if((set_1*set_2)==true){
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	7bba      	ldrb	r2, [r7, #14]
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <roboclaw1_init+0x64>
	  	   		  return true;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <roboclaw1_init+0x66>
	  	}
	  	else{
	  		return false;
 8002940:	2300      	movs	r3, #0
	  	}

}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000068c 	.word	0x2000068c

08002950 <roboclaw2_init>:
bool roboclaw2_init(UART_HandleTypeDef* address_huart_roboclaw,uint8_t address_roboclaw){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
		flag_status_register_rw2[0]=0;
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <roboclaw2_init+0x70>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
		flag_status_register_rw2[1]=0;
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <roboclaw2_init+0x70>)
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
		flag_status_register_rw2[2]=0;
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <roboclaw2_init+0x70>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
		flag_status_register_rw2[3]=0;
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <roboclaw2_init+0x70>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
		flag_status_register_rw2[4]=0;
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <roboclaw2_init+0x70>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
		flag_status_register_rw2[5]=0;
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <roboclaw2_init+0x70>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
		flag_status_register_rw2[6]=0;
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <roboclaw2_init+0x70>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]

	  	//bool set_1=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,1,3000);
	  	//bool set_2=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,2,3000);
	  	bool set_1=Drive_M1_M2_With_Signed_Speed(address_huart_roboclaw,(uint8_t)address_roboclaw, 0, 0);
 8002986:	78f9      	ldrb	r1, [r7, #3]
 8002988:	2300      	movs	r3, #0
 800298a:	2200      	movs	r2, #0
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff1c 	bl	80027ca <Drive_M1_M2_With_Signed_Speed>
 8002992:	4603      	mov	r3, r0
 8002994:	73fb      	strb	r3, [r7, #15]
	  	bool set_2=Reset_Encoder_Counters(address_huart_roboclaw,(uint8_t)address_roboclaw);
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ff6b 	bl	8002876 <Reset_Encoder_Counters>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73bb      	strb	r3, [r7, #14]

	  	if((set_1*set_2)==true){
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	7bba      	ldrb	r2, [r7, #14]
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <roboclaw2_init+0x64>
	  	   		  return true;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <roboclaw2_init+0x66>
	  	}
	  	else{
	  		return false;
 80029b4:	2300      	movs	r3, #0
	  	}

}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000670 	.word	0x20000670

080029c4 <crc16>:

uint16_t crc16(unsigned char *packet, int nBytes) {
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint16_t crc=0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	82fb      	strh	r3, [r7, #22]
  for (int byte = 0; byte < nBytes; byte++) {
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e026      	b.n	8002a26 <crc16+0x62>
    crc = crc ^ ((unsigned int)packet[byte] << 8);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	8afb      	ldrh	r3, [r7, #22]
 80029e8:	4053      	eors	r3, r2
 80029ea:	82fb      	strh	r3, [r7, #22]
    for (unsigned char bit = 0; bit < 8; bit++) {
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	e013      	b.n	8002a1a <crc16+0x56>
      if (crc & 0x8000) {
 80029f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da09      	bge.n	8002a0e <crc16+0x4a>
        crc = (crc << 1) ^ 0x1021;
 80029fa:	8afb      	ldrh	r3, [r7, #22]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002a04:	f083 0301 	eor.w	r3, r3, #1
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	82fb      	strh	r3, [r7, #22]
 8002a0c:	e002      	b.n	8002a14 <crc16+0x50>
      } else {
        crc = crc << 1;
 8002a0e:	8afb      	ldrh	r3, [r7, #22]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	82fb      	strh	r3, [r7, #22]
    for (unsigned char bit = 0; bit < 8; bit++) {
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	3301      	adds	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b07      	cmp	r3, #7
 8002a1e:	d9e8      	bls.n	80029f2 <crc16+0x2e>
  for (int byte = 0; byte < nBytes; byte++) {
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	3301      	adds	r3, #1
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	dbd4      	blt.n	80029d8 <crc16+0x14>
      }
    }
  }
  return crc;
 8002a2e:	8afb      	ldrh	r3, [r7, #22]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a40:	b672      	cpsid	i
}
 8002a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <Error_Handler+0x8>
	...

08002a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <HAL_ADC_MspInit+0x8c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d12f      	bne.n	8002b1a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_ADC_MspInit+0x90>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_ADC_MspInit+0x90>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_ADC_MspInit+0x90>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_ADC_MspInit+0x90>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_ADC_MspInit+0x90>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_ADC_MspInit+0x90>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002af2:	2320      	movs	r3, #32
 8002af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af6:	2303      	movs	r3, #3
 8002af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	4809      	ldr	r0, [pc, #36]	; (8002b2c <HAL_ADC_MspInit+0x94>)
 8002b06:	f001 fa51 	bl	8003fac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2012      	movs	r0, #18
 8002b10:	f001 f983 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b14:	2012      	movs	r0, #18
 8002b16:	f001 f99c 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3728      	adds	r7, #40	; 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40012000 	.word	0x40012000
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020000 	.word	0x40020000

08002b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_I2C_MspInit+0x84>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d12b      	bne.n	8002baa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_I2C_MspInit+0x88>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <HAL_I2C_MspInit+0x88>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_I2C_MspInit+0x88>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b6e:	23c0      	movs	r3, #192	; 0xc0
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b72:	2312      	movs	r3, #18
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <HAL_I2C_MspInit+0x8c>)
 8002b8a:	f001 fa0f 	bl	8003fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_I2C_MspInit+0x88>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_I2C_MspInit+0x88>)
 8002b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_I2C_MspInit+0x88>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002baa:	bf00      	nop
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40005400 	.word	0x40005400
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020400 	.word	0x40020400

08002bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d135      	bne.n	8002c4e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	4619      	mov	r1, r3
 8002c36:	4821      	ldr	r0, [pc, #132]	; (8002cbc <HAL_TIM_Base_MspInit+0xfc>)
 8002c38:	f001 f9b8 	bl	8003fac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	201c      	movs	r0, #28
 8002c42:	f001 f8ea 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c46:	201c      	movs	r0, #28
 8002c48:	f001 f903 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c4c:	e030      	b.n	8002cb0 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_TIM_Base_MspInit+0x100>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d12b      	bne.n	8002cb0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	6413      	str	r3, [r2, #64]	; 0x40
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	6313      	str	r3, [r2, #48]	; 0x30
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_TIM_Base_MspInit+0xf8>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c90:	2301      	movs	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	f107 031c 	add.w	r3, r7, #28
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4804      	ldr	r0, [pc, #16]	; (8002cbc <HAL_TIM_Base_MspInit+0xfc>)
 8002cac:	f001 f97e 	bl	8003fac <HAL_GPIO_Init>
}
 8002cb0:	bf00      	nop
 8002cb2:	3730      	adds	r7, #48	; 0x30
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_TIM_MspPostInit+0x68>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11d      	bne.n	8002d22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_TIM_MspPostInit+0x6c>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_TIM_MspPostInit+0x6c>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_TIM_MspPostInit+0x6c>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d02:	2340      	movs	r3, #64	; 0x40
 8002d04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d12:	2302      	movs	r3, #2
 8002d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_TIM_MspPostInit+0x70>)
 8002d1e:	f001 f945 	bl	8003fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020000 	.word	0x40020000

08002d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	; 0x38
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a66      	ldr	r2, [pc, #408]	; (8002ef0 <HAL_UART_MspInit+0x1b8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d134      	bne.n	8002dc4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
 8002d5e:	4b65      	ldr	r3, [pc, #404]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a64      	ldr	r2, [pc, #400]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a5d      	ldr	r2, [pc, #372]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d92:	230c      	movs	r3, #12
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002da2:	2307      	movs	r3, #7
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002daa:	4619      	mov	r1, r3
 8002dac:	4852      	ldr	r0, [pc, #328]	; (8002ef8 <HAL_UART_MspInit+0x1c0>)
 8002dae:	f001 f8fd 	bl	8003fac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	2026      	movs	r0, #38	; 0x26
 8002db8:	f001 f82f 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dbc:	2026      	movs	r0, #38	; 0x26
 8002dbe:	f001 f848 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002dc2:	e091      	b.n	8002ee8 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a4c      	ldr	r2, [pc, #304]	; (8002efc <HAL_UART_MspInit+0x1c4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d153      	bne.n	8002e76 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	4b48      	ldr	r3, [pc, #288]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a47      	ldr	r2, [pc, #284]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a40      	ldr	r2, [pc, #256]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a39      	ldr	r2, [pc, #228]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e22:	2320      	movs	r3, #32
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e32:	2307      	movs	r3, #7
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4830      	ldr	r0, [pc, #192]	; (8002f00 <HAL_UART_MspInit+0x1c8>)
 8002e3e:	f001 f8b5 	bl	8003fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e54:	2307      	movs	r3, #7
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4829      	ldr	r0, [pc, #164]	; (8002f04 <HAL_UART_MspInit+0x1cc>)
 8002e60:	f001 f8a4 	bl	8003fac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2100      	movs	r1, #0
 8002e68:	2027      	movs	r0, #39	; 0x27
 8002e6a:	f000 ffd6 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e6e:	2027      	movs	r0, #39	; 0x27
 8002e70:	f000 ffef 	bl	8003e52 <HAL_NVIC_EnableIRQ>
}
 8002e74:	e038      	b.n	8002ee8 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a23      	ldr	r2, [pc, #140]	; (8002f08 <HAL_UART_MspInit+0x1d0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d133      	bne.n	8002ee8 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002e8a:	f043 0320 	orr.w	r3, r3, #32
 8002e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_UART_MspInit+0x1bc>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eb8:	23c0      	movs	r3, #192	; 0xc0
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ec8:	2308      	movs	r3, #8
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	480b      	ldr	r0, [pc, #44]	; (8002f00 <HAL_UART_MspInit+0x1c8>)
 8002ed4:	f001 f86a 	bl	8003fac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	2047      	movs	r0, #71	; 0x47
 8002ede:	f000 ff9c 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ee2:	2047      	movs	r0, #71	; 0x47
 8002ee4:	f000 ffb5 	bl	8003e52 <HAL_NVIC_EnableIRQ>
}
 8002ee8:	bf00      	nop
 8002eea:	3738      	adds	r7, #56	; 0x38
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40004400 	.word	0x40004400
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40004800 	.word	0x40004800
 8002f00:	40020800 	.word	0x40020800
 8002f04:	40020c00 	.word	0x40020c00
 8002f08:	40011400 	.word	0x40011400

08002f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f10:	e7fe      	b.n	8002f10 <NMI_Handler+0x4>

08002f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f16:	e7fe      	b.n	8002f16 <HardFault_Handler+0x4>

08002f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <MemManage_Handler+0x4>

08002f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <BusFault_Handler+0x4>

08002f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <UsageFault_Handler+0x4>

08002f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <SysTick_Handler+0x38>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <SysTick_Handler+0x38>)
 8002f60:	6013      	str	r3, [r2, #0]
	if(indx==sampling_time){
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <SysTick_Handler+0x38>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <SysTick_Handler+0x3c>)
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	d102      	bne.n	8002f84 <SysTick_Handler+0x30>

		indx=0;
 8002f7e:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <SysTick_Handler+0x38>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f84:	f000 f99e 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200006cc 	.word	0x200006cc
 8002f90:	20000008 	.word	0x20000008

08002f94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <ADC_IRQHandler+0x10>)
 8002f9a:	f000 faf9 	bl	8003590 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000324 	.word	0x20000324

08002fa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <TIM2_IRQHandler+0x10>)
 8002fae:	f004 f8c5 	bl	800713c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200003c0 	.word	0x200003c0

08002fbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <USART2_IRQHandler+0x10>)
 8002fc2:	f005 f8c7 	bl	8008154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000450 	.word	0x20000450

08002fd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <USART3_IRQHandler+0x10>)
 8002fd6:	f005 f8bd 	bl	8008154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000494 	.word	0x20000494

08002fe4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002fe8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fec:	f001 f98c 	bl	8004308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <OTG_FS_IRQHandler+0x10>)
 8002ffa:	f001 fc38 	bl	800486e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20001bb8 	.word	0x20001bb8

08003008 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <USART6_IRQHandler+0x10>)
 800300e:	f005 f8a1 	bl	8008154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200004d8 	.word	0x200004d8

0800301c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	return 1;
 8003020:	2301      	movs	r3, #1
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_kill>:

int _kill(int pid, int sig)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003036:	f00a f9ff 	bl	800d438 <__errno>
 800303a:	4603      	mov	r3, r0
 800303c:	2216      	movs	r2, #22
 800303e:	601a      	str	r2, [r3, #0]
	return -1;
 8003040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <_exit>:

void _exit (int status)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ffe7 	bl	800302c <_kill>
	while (1) {}		/* Make sure we hang here */
 800305e:	e7fe      	b.n	800305e <_exit+0x12>

08003060 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e00a      	b.n	8003088 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003072:	f3af 8000 	nop.w
 8003076:	4601      	mov	r1, r0
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	60ba      	str	r2, [r7, #8]
 800307e:	b2ca      	uxtb	r2, r1
 8003080:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3301      	adds	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	dbf0      	blt.n	8003072 <_read+0x12>
	}

return len;
 8003090:	687b      	ldr	r3, [r7, #4]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e009      	b.n	80030c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	60ba      	str	r2, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	dbf1      	blt.n	80030ac <_write+0x12>
	}
	return len;
 80030c8:	687b      	ldr	r3, [r7, #4]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <_close>:

int _close(int file)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
	return -1;
 80030da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030fa:	605a      	str	r2, [r3, #4]
	return 0;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <_isatty>:

int _isatty(int file)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
	return 1;
 8003112:	2301      	movs	r3, #1
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
	return 0;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f00a f964 	bl	800d438 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20020000 	.word	0x20020000
 800319c:	00000400 	.word	0x00000400
 80031a0:	200006d0 	.word	0x200006d0
 80031a4:	200022f8 	.word	0x200022f8

080031a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <SystemInit+0x20>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <SystemInit+0x20>)
 80031b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031d2:	490e      	ldr	r1, [pc, #56]	; (800320c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031e8:	4c0b      	ldr	r4, [pc, #44]	; (8003218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031f6:	f7ff ffd7 	bl	80031a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f00a f923 	bl	800d444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fe:	f7fe f857 	bl	80012b0 <main>
  bx  lr    
 8003202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800320c:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8003210:	08011650 	.word	0x08011650
  ldr r2, =_sbss
 8003214:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8003218:	200022f4 	.word	0x200022f4

0800321c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800321c:	e7fe      	b.n	800321c <CAN1_RX0_IRQHandler>
	...

08003220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_Init+0x40>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <HAL_Init+0x40>)
 800322a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_Init+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_Init+0x40>)
 8003236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800323a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_Init+0x40>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a07      	ldr	r2, [pc, #28]	; (8003260 <HAL_Init+0x40>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003248:	2003      	movs	r0, #3
 800324a:	f000 fddb 	bl	8003e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800324e:	2000      	movs	r0, #0
 8003250:	f000 f808 	bl	8003264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003254:	f7ff fbf8 	bl	8002a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023c00 	.word	0x40023c00

08003264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_InitTick+0x54>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_InitTick+0x58>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4619      	mov	r1, r3
 8003276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800327a:	fbb3 f3f1 	udiv	r3, r3, r1
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fdf3 	bl	8003e6e <HAL_SYSTICK_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00e      	b.n	80032b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d80a      	bhi.n	80032ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003298:	2200      	movs	r2, #0
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a0:	f000 fdbb 	bl	8003e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a4:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_InitTick+0x5c>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	2000001c 	.word	0x2000001c
 80032bc:	20000024 	.word	0x20000024
 80032c0:	20000020 	.word	0x20000020

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000024 	.word	0x20000024
 80032e8:	200006d4 	.word	0x200006d4

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	200006d4 	.word	0x200006d4

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_Delay+0x44>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000024 	.word	0x20000024

0800334c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e033      	b.n	80033ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fb94 	bl	8002a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003392:	f023 0302 	bic.w	r3, r3, #2
 8003396:	f043 0202 	orr.w	r2, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fb5a 	bl	8003a58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ba:	e001      	b.n	80033c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_Start_IT+0x1a>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e0bd      	b.n	800356a <HAL_ADC_Start_IT+0x196>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d018      	beq.n	8003436 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003414:	4b58      	ldr	r3, [pc, #352]	; (8003578 <HAL_ADC_Start_IT+0x1a4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_ADC_Start_IT+0x1a8>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0c9a      	lsrs	r2, r3, #18
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003428:	e002      	b.n	8003430 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3b01      	subs	r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f9      	bne.n	800342a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	f040 8085 	bne.w	8003550 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003484:	d106      	bne.n	8003494 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f023 0206 	bic.w	r2, r3, #6
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
 8003492:	e002      	b.n	800349a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034a2:	4b37      	ldr	r3, [pc, #220]	; (8003580 <HAL_ADC_Start_IT+0x1ac>)
 80034a4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034ae:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034be:	f043 0320 	orr.w	r3, r3, #32
 80034c2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d12a      	bne.n	8003526 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <HAL_ADC_Start_IT+0x1b0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d015      	beq.n	8003506 <HAL_ADC_Start_IT+0x132>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <HAL_ADC_Start_IT+0x1b4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d105      	bne.n	80034f0 <HAL_ADC_Start_IT+0x11c>
 80034e4:	4b26      	ldr	r3, [pc, #152]	; (8003580 <HAL_ADC_Start_IT+0x1ac>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a25      	ldr	r2, [pc, #148]	; (800358c <HAL_ADC_Start_IT+0x1b8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d136      	bne.n	8003568 <HAL_ADC_Start_IT+0x194>
 80034fa:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_ADC_Start_IT+0x1ac>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d130      	bne.n	8003568 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d129      	bne.n	8003568 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	e020      	b.n	8003568 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_ADC_Start_IT+0x1b0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d11b      	bne.n	8003568 <HAL_ADC_Start_IT+0x194>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d114      	bne.n	8003568 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	e00b      	b.n	8003568 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f043 0210 	orr.w	r2, r3, #16
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	2000001c 	.word	0x2000001c
 800357c:	431bde83 	.word	0x431bde83
 8003580:	40012300 	.word	0x40012300
 8003584:	40012000 	.word	0x40012000
 8003588:	40012100 	.word	0x40012100
 800358c:	40012200 	.word	0x40012200

08003590 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d049      	beq.n	800365a <HAL_ADC_IRQHandler+0xca>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d046      	beq.n	800365a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d12b      	bne.n	800364a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d127      	bne.n	800364a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003604:	2b00      	cmp	r3, #0
 8003606:	d006      	beq.n	8003616 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003612:	2b00      	cmp	r3, #0
 8003614:	d119      	bne.n	800364a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0220 	bic.w	r2, r2, #32
 8003624:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fe1e 	bl	800128c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0212 	mvn.w	r2, #18
 8003658:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d057      	beq.n	8003720 <HAL_ADC_IRQHandler+0x190>
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d054      	beq.n	8003720 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d105      	bne.n	800368e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d139      	bne.n	8003710 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d12b      	bne.n	8003710 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d124      	bne.n	8003710 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11d      	bne.n	8003710 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d119      	bne.n	8003710 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa9d 	bl	8003c50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f06f 020c 	mvn.w	r2, #12
 800371e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d017      	beq.n	8003766 <HAL_ADC_IRQHandler+0x1d6>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d014      	beq.n	8003766 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10d      	bne.n	8003766 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f837 	bl	80037ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0201 	mvn.w	r2, #1
 8003764:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003774:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x218>
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d012      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f043 0202 	orr.w	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f06f 0220 	mvn.w	r2, #32
 8003796:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f820 	bl	80037de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f06f 0220 	mvn.w	r2, #32
 80037a6:	601a      	str	r2, [r3, #0]
  }
}
 80037a8:	bf00      	nop
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x1c>
 800380c:	2302      	movs	r3, #2
 800380e:	e113      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x244>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b09      	cmp	r3, #9
 800381e:	d925      	bls.n	800386c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68d9      	ldr	r1, [r3, #12]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	3b1e      	subs	r3, #30
 8003836:	2207      	movs	r2, #7
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43da      	mvns	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	400a      	ands	r2, r1
 8003844:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68d9      	ldr	r1, [r3, #12]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	4618      	mov	r0, r3
 8003858:	4603      	mov	r3, r0
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4403      	add	r3, r0
 800385e:	3b1e      	subs	r3, #30
 8003860:	409a      	lsls	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e022      	b.n	80038b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6919      	ldr	r1, [r3, #16]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	2207      	movs	r2, #7
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	400a      	ands	r2, r1
 800388e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6919      	ldr	r1, [r3, #16]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4618      	mov	r0, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4403      	add	r3, r0
 80038a8:	409a      	lsls	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d824      	bhi.n	8003904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	3b05      	subs	r3, #5
 80038cc:	221f      	movs	r2, #31
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	400a      	ands	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4618      	mov	r0, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	3b05      	subs	r3, #5
 80038f6:	fa00 f203 	lsl.w	r2, r0, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	635a      	str	r2, [r3, #52]	; 0x34
 8003902:	e04c      	b.n	800399e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d824      	bhi.n	8003956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	3b23      	subs	r3, #35	; 0x23
 800391e:	221f      	movs	r2, #31
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43da      	mvns	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	400a      	ands	r2, r1
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	4618      	mov	r0, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	3b23      	subs	r3, #35	; 0x23
 8003948:	fa00 f203 	lsl.w	r2, r0, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
 8003954:	e023      	b.n	800399e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	3b41      	subs	r3, #65	; 0x41
 8003968:	221f      	movs	r2, #31
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43da      	mvns	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	400a      	ands	r2, r1
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	4618      	mov	r0, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	3b41      	subs	r3, #65	; 0x41
 8003992:	fa00 f203 	lsl.w	r2, r0, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800399e:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_ADC_ConfigChannel+0x250>)
 80039a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a28      	ldr	r2, [pc, #160]	; (8003a48 <HAL_ADC_ConfigChannel+0x254>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10f      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x1d8>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b12      	cmp	r3, #18
 80039b2:	d10b      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_ADC_ConfigChannel+0x254>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d12b      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x23a>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_ADC_ConfigChannel+0x258>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <HAL_ADC_ConfigChannel+0x1f4>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b11      	cmp	r3, #17
 80039e6:	d122      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_ADC_ConfigChannel+0x258>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d111      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <HAL_ADC_ConfigChannel+0x25c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <HAL_ADC_ConfigChannel+0x260>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	0c9a      	lsrs	r2, r3, #18
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a20:	e002      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f9      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	40012300 	.word	0x40012300
 8003a48:	40012000 	.word	0x40012000
 8003a4c:	10000012 	.word	0x10000012
 8003a50:	2000001c 	.word	0x2000001c
 8003a54:	431bde83 	.word	0x431bde83

08003a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a60:	4b79      	ldr	r3, [pc, #484]	; (8003c48 <ADC_Init+0x1f0>)
 8003a62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6859      	ldr	r1, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	021a      	lsls	r2, r3, #8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <ADC_Init+0x1f4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6899      	ldr	r1, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6899      	ldr	r1, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	e00f      	b.n	8003b56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0202 	bic.w	r2, r2, #2
 8003b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6899      	ldr	r1, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7e1b      	ldrb	r3, [r3, #24]
 8003b70:	005a      	lsls	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01b      	beq.n	8003bbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	035a      	lsls	r2, r3, #13
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	e007      	b.n	8003bcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	051a      	lsls	r2, r3, #20
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6899      	ldr	r1, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c0e:	025a      	lsls	r2, r3, #9
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6899      	ldr	r1, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	029a      	lsls	r2, r3, #10
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40012300 	.word	0x40012300
 8003c4c:	0f000001 	.word	0x0f000001

08003c50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c80:	4013      	ands	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	60d3      	str	r3, [r2, #12]
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 0307 	and.w	r3, r3, #7
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db0b      	blt.n	8003cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <__NVIC_EnableIRQ+0x38>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2001      	movs	r0, #1
 8003cea:	fa00 f202 	lsl.w	r2, r0, r2
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	db0a      	blt.n	8003d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	490c      	ldr	r1, [pc, #48]	; (8003d50 <__NVIC_SetPriority+0x4c>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	440b      	add	r3, r1
 8003d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d2c:	e00a      	b.n	8003d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4908      	ldr	r1, [pc, #32]	; (8003d54 <__NVIC_SetPriority+0x50>)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3b04      	subs	r3, #4
 8003d3c:	0112      	lsls	r2, r2, #4
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	440b      	add	r3, r1
 8003d42:	761a      	strb	r2, [r3, #24]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000e100 	.word	0xe000e100
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f1c3 0307 	rsb	r3, r3, #7
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	bf28      	it	cs
 8003d76:	2304      	movcs	r3, #4
 8003d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d902      	bls.n	8003d88 <NVIC_EncodePriority+0x30>
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3b03      	subs	r3, #3
 8003d86:	e000      	b.n	8003d8a <NVIC_EncodePriority+0x32>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43da      	mvns	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	43d9      	mvns	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	4313      	orrs	r3, r2
         );
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd0:	d301      	bcc.n	8003dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00f      	b.n	8003df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <SysTick_Config+0x40>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dde:	210f      	movs	r1, #15
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003de4:	f7ff ff8e 	bl	8003d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <SysTick_Config+0x40>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <SysTick_Config+0x40>)
 8003df0:	2207      	movs	r2, #7
 8003df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010

08003e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff29 	bl	8003c64 <__NVIC_SetPriorityGrouping>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e2c:	f7ff ff3e 	bl	8003cac <__NVIC_GetPriorityGrouping>
 8003e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff ff8e 	bl	8003d58 <NVIC_EncodePriority>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff5d 	bl	8003d04 <__NVIC_SetPriority>
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff31 	bl	8003cc8 <__NVIC_EnableIRQ>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ffa2 	bl	8003dc0 <SysTick_Config>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e94:	f7ff fa2a 	bl	80032ec <HAL_GetTick>
 8003e98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d008      	beq.n	8003eb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e052      	b.n	8003f5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0216 	bic.w	r2, r2, #22
 8003ec6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <HAL_DMA_Abort+0x62>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0208 	bic.w	r2, r2, #8
 8003ef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f08:	e013      	b.n	8003f32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f0a:	f7ff f9ef 	bl	80032ec <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b05      	cmp	r3, #5
 8003f16:	d90c      	bls.n	8003f32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2203      	movs	r2, #3
 8003f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e015      	b.n	8003f5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e4      	bne.n	8003f0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	223f      	movs	r2, #63	; 0x3f
 8003f46:	409a      	lsls	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d004      	beq.n	8003f84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e00c      	b.n	8003f9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2205      	movs	r2, #5
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e165      	b.n	8004294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fc8:	2201      	movs	r2, #1
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	f040 8154 	bne.w	800428e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d005      	beq.n	8003ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d130      	bne.n	8004060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	2203      	movs	r2, #3
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004034:	2201      	movs	r2, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 0201 	and.w	r2, r3, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b03      	cmp	r3, #3
 800406a:	d017      	beq.n	800409c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2203      	movs	r2, #3
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d123      	bne.n	80040f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	08da      	lsrs	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3208      	adds	r2, #8
 80040b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	220f      	movs	r2, #15
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	08da      	lsrs	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3208      	adds	r2, #8
 80040ea:	69b9      	ldr	r1, [r7, #24]
 80040ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0203 	and.w	r2, r3, #3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80ae 	beq.w	800428e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b5d      	ldr	r3, [pc, #372]	; (80042ac <HAL_GPIO_Init+0x300>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	4a5c      	ldr	r2, [pc, #368]	; (80042ac <HAL_GPIO_Init+0x300>)
 800413c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004140:	6453      	str	r3, [r2, #68]	; 0x44
 8004142:	4b5a      	ldr	r3, [pc, #360]	; (80042ac <HAL_GPIO_Init+0x300>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800414e:	4a58      	ldr	r2, [pc, #352]	; (80042b0 <HAL_GPIO_Init+0x304>)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	3302      	adds	r3, #2
 8004156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	220f      	movs	r2, #15
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a4f      	ldr	r2, [pc, #316]	; (80042b4 <HAL_GPIO_Init+0x308>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d025      	beq.n	80041c6 <HAL_GPIO_Init+0x21a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4e      	ldr	r2, [pc, #312]	; (80042b8 <HAL_GPIO_Init+0x30c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01f      	beq.n	80041c2 <HAL_GPIO_Init+0x216>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4d      	ldr	r2, [pc, #308]	; (80042bc <HAL_GPIO_Init+0x310>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d019      	beq.n	80041be <HAL_GPIO_Init+0x212>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a4c      	ldr	r2, [pc, #304]	; (80042c0 <HAL_GPIO_Init+0x314>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_GPIO_Init+0x20e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a4b      	ldr	r2, [pc, #300]	; (80042c4 <HAL_GPIO_Init+0x318>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00d      	beq.n	80041b6 <HAL_GPIO_Init+0x20a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4a      	ldr	r2, [pc, #296]	; (80042c8 <HAL_GPIO_Init+0x31c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <HAL_GPIO_Init+0x206>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a49      	ldr	r2, [pc, #292]	; (80042cc <HAL_GPIO_Init+0x320>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <HAL_GPIO_Init+0x202>
 80041aa:	2306      	movs	r3, #6
 80041ac:	e00c      	b.n	80041c8 <HAL_GPIO_Init+0x21c>
 80041ae:	2307      	movs	r3, #7
 80041b0:	e00a      	b.n	80041c8 <HAL_GPIO_Init+0x21c>
 80041b2:	2305      	movs	r3, #5
 80041b4:	e008      	b.n	80041c8 <HAL_GPIO_Init+0x21c>
 80041b6:	2304      	movs	r3, #4
 80041b8:	e006      	b.n	80041c8 <HAL_GPIO_Init+0x21c>
 80041ba:	2303      	movs	r3, #3
 80041bc:	e004      	b.n	80041c8 <HAL_GPIO_Init+0x21c>
 80041be:	2302      	movs	r3, #2
 80041c0:	e002      	b.n	80041c8 <HAL_GPIO_Init+0x21c>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_GPIO_Init+0x21c>
 80041c6:	2300      	movs	r3, #0
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	f002 0203 	and.w	r2, r2, #3
 80041ce:	0092      	lsls	r2, r2, #2
 80041d0:	4093      	lsls	r3, r2
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041d8:	4935      	ldr	r1, [pc, #212]	; (80042b0 <HAL_GPIO_Init+0x304>)
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3302      	adds	r3, #2
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041e6:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <HAL_GPIO_Init+0x324>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800420a:	4a31      	ldr	r2, [pc, #196]	; (80042d0 <HAL_GPIO_Init+0x324>)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004210:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_GPIO_Init+0x324>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <HAL_GPIO_Init+0x324>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800423a:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <HAL_GPIO_Init+0x324>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800425e:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <HAL_GPIO_Init+0x324>)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_GPIO_Init+0x324>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004288:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <HAL_GPIO_Init+0x324>)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3301      	adds	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b0f      	cmp	r3, #15
 8004298:	f67f ae96 	bls.w	8003fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40013800 	.word	0x40013800
 80042b4:	40020000 	.word	0x40020000
 80042b8:	40020400 	.word	0x40020400
 80042bc:	40020800 	.word	0x40020800
 80042c0:	40020c00 	.word	0x40020c00
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40021400 	.word	0x40021400
 80042cc:	40021800 	.word	0x40021800
 80042d0:	40013c00 	.word	0x40013c00

080042d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	807b      	strh	r3, [r7, #2]
 80042e0:	4613      	mov	r3, r2
 80042e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042e4:	787b      	ldrb	r3, [r7, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042f0:	e003      	b.n	80042fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	041a      	lsls	r2, r3, #16
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	619a      	str	r2, [r3, #24]
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800431e:	4a05      	ldr	r2, [pc, #20]	; (8004334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc ffa0 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40013c00 	.word	0x40013c00

08004338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e12b      	b.n	80045a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fe fbe6 	bl	8002b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2224      	movs	r2, #36	; 0x24
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800438a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800439a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800439c:	f001 fccc 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80043a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a81      	ldr	r2, [pc, #516]	; (80045ac <HAL_I2C_Init+0x274>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d807      	bhi.n	80043bc <HAL_I2C_Init+0x84>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a80      	ldr	r2, [pc, #512]	; (80045b0 <HAL_I2C_Init+0x278>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bf94      	ite	ls
 80043b4:	2301      	movls	r3, #1
 80043b6:	2300      	movhi	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e006      	b.n	80043ca <HAL_I2C_Init+0x92>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a7d      	ldr	r2, [pc, #500]	; (80045b4 <HAL_I2C_Init+0x27c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	bf94      	ite	ls
 80043c4:	2301      	movls	r3, #1
 80043c6:	2300      	movhi	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0e7      	b.n	80045a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a78      	ldr	r2, [pc, #480]	; (80045b8 <HAL_I2C_Init+0x280>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	0c9b      	lsrs	r3, r3, #18
 80043dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4a6a      	ldr	r2, [pc, #424]	; (80045ac <HAL_I2C_Init+0x274>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d802      	bhi.n	800440c <HAL_I2C_Init+0xd4>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	3301      	adds	r3, #1
 800440a:	e009      	b.n	8004420 <HAL_I2C_Init+0xe8>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	4a69      	ldr	r2, [pc, #420]	; (80045bc <HAL_I2C_Init+0x284>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	3301      	adds	r3, #1
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	430b      	orrs	r3, r1
 8004426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	495c      	ldr	r1, [pc, #368]	; (80045ac <HAL_I2C_Init+0x274>)
 800443c:	428b      	cmp	r3, r1
 800443e:	d819      	bhi.n	8004474 <HAL_I2C_Init+0x13c>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1e59      	subs	r1, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fbb1 f3f3 	udiv	r3, r1, r3
 800444e:	1c59      	adds	r1, r3, #1
 8004450:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004454:	400b      	ands	r3, r1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_I2C_Init+0x138>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1e59      	subs	r1, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fbb1 f3f3 	udiv	r3, r1, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	e051      	b.n	8004514 <HAL_I2C_Init+0x1dc>
 8004470:	2304      	movs	r3, #4
 8004472:	e04f      	b.n	8004514 <HAL_I2C_Init+0x1dc>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d111      	bne.n	80044a0 <HAL_I2C_Init+0x168>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1e58      	subs	r0, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	440b      	add	r3, r1
 800448a:	fbb0 f3f3 	udiv	r3, r0, r3
 800448e:	3301      	adds	r3, #1
 8004490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e012      	b.n	80044c6 <HAL_I2C_Init+0x18e>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1e58      	subs	r0, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	0099      	lsls	r1, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b6:	3301      	adds	r3, #1
 80044b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Init+0x196>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e022      	b.n	8004514 <HAL_I2C_Init+0x1dc>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10e      	bne.n	80044f4 <HAL_I2C_Init+0x1bc>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1e58      	subs	r0, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6859      	ldr	r1, [r3, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	440b      	add	r3, r1
 80044e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e8:	3301      	adds	r3, #1
 80044ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f2:	e00f      	b.n	8004514 <HAL_I2C_Init+0x1dc>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1e58      	subs	r0, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	0099      	lsls	r1, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	fbb0 f3f3 	udiv	r3, r0, r3
 800450a:	3301      	adds	r3, #1
 800450c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	6809      	ldr	r1, [r1, #0]
 8004518:	4313      	orrs	r3, r2
 800451a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004542:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6911      	ldr	r1, [r2, #16]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68d2      	ldr	r2, [r2, #12]
 800454e:	4311      	orrs	r1, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	430b      	orrs	r3, r1
 8004556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	000186a0 	.word	0x000186a0
 80045b0:	001e847f 	.word	0x001e847f
 80045b4:	003d08ff 	.word	0x003d08ff
 80045b8:	431bde83 	.word	0x431bde83
 80045bc:	10624dd3 	.word	0x10624dd3

080045c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c2:	b08f      	sub	sp, #60	; 0x3c
 80045c4:	af0a      	add	r7, sp, #40	; 0x28
 80045c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e116      	b.n	8004800 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f008 fb9d 	bl	800cd2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2203      	movs	r2, #3
 80045f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f004 fe1c 	bl	800924e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	687e      	ldr	r6, [r7, #4]
 800461e:	466d      	mov	r5, sp
 8004620:	f106 0410 	add.w	r4, r6, #16
 8004624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004630:	e885 0003 	stmia.w	r5, {r0, r1}
 8004634:	1d33      	adds	r3, r6, #4
 8004636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	f004 fcf3 	bl	8009024 <USB_CoreInit>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0d7      	b.n	8004800 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f004 fe0a 	bl	8009270 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	e04a      	b.n	80046f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004662:	7bfa      	ldrb	r2, [r7, #15]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	333d      	adds	r3, #61	; 0x3d
 8004672:	2201      	movs	r2, #1
 8004674:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	333c      	adds	r3, #60	; 0x3c
 8004686:	7bfa      	ldrb	r2, [r7, #15]
 8004688:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	b298      	uxth	r0, r3
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3344      	adds	r3, #68	; 0x44
 800469e:	4602      	mov	r2, r0
 80046a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3340      	adds	r3, #64	; 0x40
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046b6:	7bfa      	ldrb	r2, [r7, #15]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3348      	adds	r3, #72	; 0x48
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	334c      	adds	r3, #76	; 0x4c
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	3354      	adds	r3, #84	; 0x54
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	3301      	adds	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d3af      	bcc.n	8004662 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	e044      	b.n	8004792 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004746:	2200      	movs	r2, #0
 8004748:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800474a:	7bfa      	ldrb	r2, [r7, #15]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	3301      	adds	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d3b5      	bcc.n	8004708 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	687e      	ldr	r6, [r7, #4]
 80047a4:	466d      	mov	r5, sp
 80047a6:	f106 0410 	add.w	r4, r6, #16
 80047aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80047ba:	1d33      	adds	r3, r6, #4
 80047bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047be:	6838      	ldr	r0, [r7, #0]
 80047c0:	f004 fda2 	bl	8009308 <USB_DevInit>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e014      	b.n	8004800 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d102      	bne.n	80047f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 f98c 	bl	8005b0c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f005 fee4 	bl	800a5c6 <USB_DevDisconnect>

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004808 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_PCD_Start+0x1c>
 8004820:	2302      	movs	r3, #2
 8004822:	e020      	b.n	8004866 <HAL_PCD_Start+0x5e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	2b01      	cmp	r3, #1
 8004832:	d109      	bne.n	8004848 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004838:	2b01      	cmp	r3, #1
 800483a:	d005      	beq.n	8004848 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f004 fced 	bl	800922c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f005 fe94 	bl	800a584 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800486e:	b590      	push	{r4, r7, lr}
 8004870:	b08d      	sub	sp, #52	; 0x34
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f005 ff52 	bl	800a72e <USB_GetMode>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 84b7 	bne.w	8005200 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f005 feb6 	bl	800a608 <USB_ReadInterrupts>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 84ad 	beq.w	80051fe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 fea3 	bl	800a608 <USB_ReadInterrupts>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d107      	bne.n	80048dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f002 0202 	and.w	r2, r2, #2
 80048da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f005 fe91 	bl	800a608 <USB_ReadInterrupts>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d161      	bne.n	80049b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0210 	bic.w	r2, r2, #16
 80048fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	0c5b      	lsrs	r3, r3, #17
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	2b02      	cmp	r3, #2
 800492a:	d124      	bne.n	8004976 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d035      	beq.n	80049a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004946:	b29b      	uxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	6a38      	ldr	r0, [r7, #32]
 800494c:	f005 fcc8 	bl	800a2e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800495c:	441a      	add	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	6a1a      	ldr	r2, [r3, #32]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800496e:	441a      	add	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	621a      	str	r2, [r3, #32]
 8004974:	e016      	b.n	80049a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	0c5b      	lsrs	r3, r3, #17
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	2b06      	cmp	r3, #6
 8004980:	d110      	bne.n	80049a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004988:	2208      	movs	r2, #8
 800498a:	4619      	mov	r1, r3
 800498c:	6a38      	ldr	r0, [r7, #32]
 800498e:	f005 fca7 	bl	800a2e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800499e:	441a      	add	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0210 	orr.w	r2, r2, #16
 80049b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f005 fe25 	bl	800a608 <USB_ReadInterrupts>
 80049be:	4603      	mov	r3, r0
 80049c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049c8:	f040 80a7 	bne.w	8004b1a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f005 fe2a 	bl	800a62e <USB_ReadDevAllOutEpInterrupt>
 80049da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049dc:	e099      	b.n	8004b12 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 808e 	beq.w	8004b06 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f005 fe4e 	bl	800a696 <USB_ReadDevOutEPInterrupt>
 80049fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	461a      	mov	r2, r3
 8004a14:	2301      	movs	r3, #1
 8004a16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fef0 	bl	8005800 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	2308      	movs	r3, #8
 8004a3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 ffc6 	bl	80059d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d008      	beq.n	8004a60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d030      	beq.n	8004acc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d109      	bne.n	8004a8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	78db      	ldrb	r3, [r3, #3]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d108      	bne.n	8004aba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f008 fa63 	bl	800cf80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2302      	movs	r3, #2
 8004aca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	461a      	mov	r2, r3
 8004b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	3301      	adds	r3, #1
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f47f af62 	bne.w	80049de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f005 fd72 	bl	800a608 <USB_ReadInterrupts>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b2e:	f040 80db 	bne.w	8004ce8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f005 fd93 	bl	800a662 <USB_ReadDevAllInEpInterrupt>
 8004b3c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004b42:	e0cd      	b.n	8004ce0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80c2 	beq.w	8004cd4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f005 fdb9 	bl	800a6d2 <USB_ReadDevInEPInterrupt>
 8004b60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d057      	beq.n	8004c1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	2201      	movs	r2, #1
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69f9      	ldr	r1, [r7, #28]
 8004b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d132      	bne.n	8004c10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	4613      	mov	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	334c      	adds	r3, #76	; 0x4c
 8004bba:	6819      	ldr	r1, [r3, #0]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4403      	add	r3, r0
 8004bca:	3348      	adds	r3, #72	; 0x48
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4419      	add	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4403      	add	r3, r0
 8004bde:	334c      	adds	r3, #76	; 0x4c
 8004be0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d113      	bne.n	8004c10 <HAL_PCD_IRQHandler+0x3a2>
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3354      	adds	r3, #84	; 0x54
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d108      	bne.n	8004c10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	f005 fdc0 	bl	800a790 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f008 f92d 	bl	800ce76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	461a      	mov	r2, r3
 8004c34:	2308      	movs	r3, #8
 8004c36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2310      	movs	r3, #16
 8004c52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d023      	beq.n	8004cc2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c7c:	6a38      	ldr	r0, [r7, #32]
 8004c7e:	f004 fca1 	bl	80095c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	3338      	adds	r3, #56	; 0x38
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	3304      	adds	r3, #4
 8004c94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	78db      	ldrb	r3, [r3, #3]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d108      	bne.n	8004cb0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f008 f97a 	bl	800cfa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fd08 	bl	80056e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f47f af2e 	bne.w	8004b44 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f005 fc8b 	bl	800a608 <USB_ReadInterrupts>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cfc:	d122      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d108      	bne.n	8004d2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d24:	2100      	movs	r1, #0
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f008 faf4 	bl	800d314 <HAL_PCDEx_LPM_Callback>
 8004d2c:	e002      	b.n	8004d34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f008 f918 	bl	800cf64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f005 fc5d 	bl	800a608 <USB_ReadInterrupts>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d58:	d112      	bne.n	8004d80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d102      	bne.n	8004d70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f008 f8d4 	bl	800cf18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004d7e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f005 fc3f 	bl	800a608 <USB_ReadInterrupts>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d94:	d121      	bne.n	8004dda <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004da4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d111      	bne.n	8004dd4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004dca:	2101      	movs	r1, #1
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f008 faa1 	bl	800d314 <HAL_PCDEx_LPM_Callback>
 8004dd2:	e002      	b.n	8004dda <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f008 f89f 	bl	800cf18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f005 fc12 	bl	800a608 <USB_ReadInterrupts>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	f040 80b7 	bne.w	8004f60 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f004 fbd9 	bl	80095c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e12:	2300      	movs	r3, #0
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e16:	e046      	b.n	8004ea6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d3b3      	bcc.n	8004e18 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ebe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ec2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d016      	beq.n	8004efa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004edc:	f043 030b 	orr.w	r3, r3, #11
 8004ee0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef2:	f043 030b 	orr.w	r3, r3, #11
 8004ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8004ef8:	e015      	b.n	8004f26 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f0c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004f10:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f20:	f043 030b 	orr.w	r3, r3, #11
 8004f24:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f38:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f005 fc20 	bl	800a790 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f005 fb4f 	bl	800a608 <USB_ReadInterrupts>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f74:	d124      	bne.n	8004fc0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f005 fbe5 	bl	800a74a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f004 fb9a 	bl	80096be <USB_GetDevSpeed>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681c      	ldr	r4, [r3, #0]
 8004f96:	f000 fec3 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8004f9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f004 f89f 	bl	80090e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f007 ff8b 	bl	800cec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f005 fb1f 	bl	800a608 <USB_ReadInterrupts>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d10a      	bne.n	8004fea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f007 ff68 	bl	800ceaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f002 0208 	and.w	r2, r2, #8
 8004fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f005 fb0a 	bl	800a608 <USB_ReadInterrupts>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d122      	bne.n	8005044 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800500a:	2301      	movs	r3, #1
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
 800500e:	e014      	b.n	800503a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d105      	bne.n	8005034 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	b2db      	uxtb	r3, r3
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fb27 	bl	8005682 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	3301      	adds	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	429a      	cmp	r2, r3
 8005042:	d3e5      	bcc.n	8005010 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f005 fadd 	bl	800a608 <USB_ReadInterrupts>
 800504e:	4603      	mov	r3, r0
 8005050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005058:	d13b      	bne.n	80050d2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800505a:	2301      	movs	r3, #1
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	e02b      	b.n	80050b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3340      	adds	r3, #64	; 0x40
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d115      	bne.n	80050b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005086:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005088:	2b00      	cmp	r3, #0
 800508a:	da12      	bge.n	80050b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	333f      	adds	r3, #63	; 0x3f
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fae8 	bl	8005682 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	3301      	adds	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050be:	429a      	cmp	r2, r3
 80050c0:	d3ce      	bcc.n	8005060 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80050d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f005 fa96 	bl	800a608 <USB_ReadInterrupts>
 80050dc:	4603      	mov	r3, r0
 80050de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050e6:	d155      	bne.n	8005194 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050e8:	2301      	movs	r3, #1
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
 80050ec:	e045      	b.n	800517a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d12e      	bne.n	8005174 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005116:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005118:	2b00      	cmp	r3, #0
 800511a:	da2b      	bge.n	8005174 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005128:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800512c:	429a      	cmp	r2, r3
 800512e:	d121      	bne.n	8005174 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800516c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005170:	6053      	str	r3, [r2, #4]
            break;
 8005172:	e007      	b.n	8005184 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	3301      	adds	r3, #1
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005180:	429a      	cmp	r2, r3
 8005182:	d3b4      	bcc.n	80050ee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f005 fa35 	bl	800a608 <USB_ReadInterrupts>
 800519e:	4603      	mov	r3, r0
 80051a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d10a      	bne.n	80051c0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f007 ff0c 	bl	800cfc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80051be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f005 fa1f 	bl	800a608 <USB_ReadInterrupts>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d115      	bne.n	8005200 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f007 fefc 	bl	800cfe4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	e000      	b.n	8005200 <HAL_PCD_IRQHandler+0x992>
      return;
 80051fe:	bf00      	nop
    }
  }
}
 8005200:	3734      	adds	r7, #52	; 0x34
 8005202:	46bd      	mov	sp, r7
 8005204:	bd90      	pop	{r4, r7, pc}

08005206 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_PCD_SetAddress+0x1a>
 800521c:	2302      	movs	r3, #2
 800521e:	e013      	b.n	8005248 <HAL_PCD_SetAddress+0x42>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	78fa      	ldrb	r2, [r7, #3]
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f005 f97d 	bl	800a538 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	461a      	mov	r2, r3
 800525e:	4603      	mov	r3, r0
 8005260:	70fb      	strb	r3, [r7, #3]
 8005262:	460b      	mov	r3, r1
 8005264:	803b      	strh	r3, [r7, #0]
 8005266:	4613      	mov	r3, r2
 8005268:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800526e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005272:	2b00      	cmp	r3, #0
 8005274:	da0f      	bge.n	8005296 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 020f 	and.w	r2, r3, #15
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	3338      	adds	r3, #56	; 0x38
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4413      	add	r3, r2
 800528a:	3304      	adds	r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	705a      	strb	r2, [r3, #1]
 8005294:	e00f      	b.n	80052b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	f003 020f 	and.w	r2, r3, #15
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	4413      	add	r3, r2
 80052ac:	3304      	adds	r3, #4
 80052ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052c2:	883a      	ldrh	r2, [r7, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	78ba      	ldrb	r2, [r7, #2]
 80052cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052e0:	78bb      	ldrb	r3, [r7, #2]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d102      	bne.n	80052ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_PCD_EP_Open+0xaa>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e00e      	b.n	8005318 <HAL_PCD_EP_Open+0xc8>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	4618      	mov	r0, r3
 800530a:	f004 f9fd 	bl	8009708 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005316:	7afb      	ldrb	r3, [r7, #11]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800532c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005330:	2b00      	cmp	r3, #0
 8005332:	da0f      	bge.n	8005354 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	f003 020f 	and.w	r2, r3, #15
 800533a:	4613      	mov	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	3338      	adds	r3, #56	; 0x38
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4413      	add	r3, r2
 8005348:	3304      	adds	r3, #4
 800534a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	705a      	strb	r2, [r3, #1]
 8005352:	e00f      	b.n	8005374 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	f003 020f 	and.w	r2, r3, #15
 800535a:	4613      	mov	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4413      	add	r3, r2
 800536a:	3304      	adds	r3, #4
 800536c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_PCD_EP_Close+0x6e>
 800538a:	2302      	movs	r3, #2
 800538c:	e00e      	b.n	80053ac <HAL_PCD_EP_Close+0x8c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	4618      	mov	r0, r3
 800539e:	f004 fa3b 	bl	8009818 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	460b      	mov	r3, r1
 80053c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	f003 020f 	and.w	r2, r3, #15
 80053ca:	4613      	mov	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	3304      	adds	r3, #4
 80053dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2200      	movs	r2, #0
 80053f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d102      	bne.n	8005410 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	6979      	ldr	r1, [r7, #20]
 8005428:	f004 fd1a 	bl	8009e60 <USB_EP0StartXfer>
 800542c:	e008      	b.n	8005440 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	f004 fac8 	bl	80099d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	f003 020f 	and.w	r2, r3, #15
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800546c:	681b      	ldr	r3, [r3, #0]
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	460b      	mov	r3, r1
 8005488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800548a:	7afb      	ldrb	r3, [r7, #11]
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	3338      	adds	r3, #56	; 0x38
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	3304      	adds	r3, #4
 80054a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2201      	movs	r2, #1
 80054b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ba:	7afb      	ldrb	r3, [r7, #11]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d102      	bne.n	80054d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054d4:	7afb      	ldrb	r3, [r7, #11]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	6979      	ldr	r1, [r7, #20]
 80054ec:	f004 fcb8 	bl	8009e60 <USB_EP0StartXfer>
 80054f0:	e008      	b.n	8005504 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	f004 fa66 	bl	80099d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d901      	bls.n	800552c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e050      	b.n	80055ce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800552c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005530:	2b00      	cmp	r3, #0
 8005532:	da0f      	bge.n	8005554 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	4613      	mov	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	3338      	adds	r3, #56	; 0x38
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4413      	add	r3, r2
 8005548:	3304      	adds	r3, #4
 800554a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	705a      	strb	r2, [r3, #1]
 8005552:	e00d      	b.n	8005570 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005554:	78fa      	ldrb	r2, [r7, #3]
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	3304      	adds	r3, #4
 8005568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_PCD_EP_SetStall+0x82>
 800558c:	2302      	movs	r3, #2
 800558e:	e01e      	b.n	80055ce <HAL_PCD_EP_SetStall+0xc0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68f9      	ldr	r1, [r7, #12]
 800559e:	4618      	mov	r0, r3
 80055a0:	f004 fef6 	bl	800a390 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	b2d9      	uxtb	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055be:	461a      	mov	r2, r3
 80055c0:	f005 f8e6 	bl	800a790 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	f003 020f 	and.w	r2, r3, #15
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d901      	bls.n	80055f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e042      	b.n	800567a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da0f      	bge.n	800561c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	4613      	mov	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	3338      	adds	r3, #56	; 0x38
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4413      	add	r3, r2
 8005610:	3304      	adds	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	705a      	strb	r2, [r3, #1]
 800561a:	e00f      	b.n	800563c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_PCD_EP_ClrStall+0x86>
 8005658:	2302      	movs	r3, #2
 800565a:	e00e      	b.n	800567a <HAL_PCD_EP_ClrStall+0xa4>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	4618      	mov	r0, r3
 800566c:	f004 fefe 	bl	800a46c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800568e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005692:	2b00      	cmp	r3, #0
 8005694:	da0c      	bge.n	80056b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	f003 020f 	and.w	r2, r3, #15
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	3338      	adds	r3, #56	; 0x38
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	4413      	add	r3, r2
 80056aa:	3304      	adds	r3, #4
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e00c      	b.n	80056ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	f003 020f 	and.w	r2, r3, #15
 80056b6:	4613      	mov	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	3304      	adds	r3, #4
 80056c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f004 fd1d 	bl	800a110 <USB_EPStopXfer>
 80056d6:	4603      	mov	r3, r0
 80056d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80056da:	7afb      	ldrb	r3, [r7, #11]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	; 0x28
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	3338      	adds	r3, #56	; 0x38
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	4413      	add	r3, r2
 8005708:	3304      	adds	r3, #4
 800570a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	429a      	cmp	r2, r3
 8005716:	d901      	bls.n	800571c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e06c      	b.n	80057f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	429a      	cmp	r2, r3
 8005730:	d902      	bls.n	8005738 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	3303      	adds	r3, #3
 800573c:	089b      	lsrs	r3, r3, #2
 800573e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005740:	e02b      	b.n	800579a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	429a      	cmp	r2, r3
 8005756:	d902      	bls.n	800575e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3303      	adds	r3, #3
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6919      	ldr	r1, [r3, #16]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005776:	b2db      	uxtb	r3, r3
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	4603      	mov	r3, r0
 800577c:	6978      	ldr	r0, [r7, #20]
 800577e:	f004 fd71 	bl	800a264 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1a      	ldr	r2, [r3, #32]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	441a      	add	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d809      	bhi.n	80057c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d203      	bcs.n	80057c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1be      	bne.n	8005742 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d811      	bhi.n	80057f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	2201      	movs	r2, #1
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	43db      	mvns	r3, r3
 80057ea:	6939      	ldr	r1, [r7, #16]
 80057ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f0:	4013      	ands	r3, r2
 80057f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	333c      	adds	r3, #60	; 0x3c
 8005818:	3304      	adds	r3, #4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d17b      	bne.n	800592e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d015      	beq.n	800586c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4a61      	ldr	r2, [pc, #388]	; (80059c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	f240 80b9 	bls.w	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80b3 	beq.w	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	461a      	mov	r2, r3
 8005864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005868:	6093      	str	r3, [r2, #8]
 800586a:	e0a7      	b.n	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	461a      	mov	r2, r3
 8005884:	2320      	movs	r3, #32
 8005886:	6093      	str	r3, [r2, #8]
 8005888:	e098      	b.n	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 8093 	bne.w	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	4a4b      	ldr	r2, [pc, #300]	; (80059c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d90f      	bls.n	80058be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ba:	6093      	str	r3, [r2, #8]
 80058bc:	e07e      	b.n	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4413      	add	r3, r2
 80058d0:	3304      	adds	r3, #4
 80058d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	0159      	lsls	r1, r3, #5
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	440b      	add	r3, r1
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ea:	1ad2      	subs	r2, r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d114      	bne.n	8005920 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005908:	461a      	mov	r2, r3
 800590a:	2101      	movs	r1, #1
 800590c:	f004 ff40 	bl	800a790 <USB_EP0_OutStart>
 8005910:	e006      	b.n	8005920 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	441a      	add	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f007 fa8a 	bl	800ce40 <HAL_PCD_DataOutStageCallback>
 800592c:	e046      	b.n	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	4a26      	ldr	r2, [pc, #152]	; (80059cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d124      	bne.n	8005980 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	461a      	mov	r2, r3
 800594e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005952:	6093      	str	r3, [r2, #8]
 8005954:	e032      	b.n	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	2320      	movs	r3, #32
 8005970:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f007 fa61 	bl	800ce40 <HAL_PCD_DataOutStageCallback>
 800597e:	e01d      	b.n	80059bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d114      	bne.n	80059b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d108      	bne.n	80059b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059a8:	461a      	mov	r2, r3
 80059aa:	2100      	movs	r1, #0
 80059ac:	f004 fef0 	bl	800a790 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f007 fa42 	bl	800ce40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	4f54300a 	.word	0x4f54300a
 80059cc:	4f54310a 	.word	0x4f54310a

080059d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	333c      	adds	r3, #60	; 0x3c
 80059e8:	3304      	adds	r3, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d90e      	bls.n	8005a24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f007 f9f9 	bl	800ce1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d90c      	bls.n	8005a4c <PCD_EP_OutSetupPacket_int+0x7c>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d108      	bne.n	8005a4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a44:	461a      	mov	r2, r3
 8005a46:	2101      	movs	r1, #1
 8005a48:	f004 fea2 	bl	800a790 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	4f54300a 	.word	0x4f54300a

08005a5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a7a:	883b      	ldrh	r3, [r7, #0]
 8005a7c:	0419      	lsls	r1, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28
 8005a88:	e028      	b.n	8005adc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4413      	add	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	73fb      	strb	r3, [r7, #15]
 8005a9c:	e00d      	b.n	8005aba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	3340      	adds	r3, #64	; 0x40
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
 8005aba:	7bfa      	ldrb	r2, [r7, #15]
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3ec      	bcc.n	8005a9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ac4:	883b      	ldrh	r3, [r7, #0]
 8005ac6:	0418      	lsls	r0, r3, #16
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6819      	ldr	r1, [r3, #0]
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	4302      	orrs	r2, r0
 8005ad4:	3340      	adds	r3, #64	; 0x40
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	460b      	mov	r3, r1
 8005af4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	887a      	ldrh	r2, [r7, #2]
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	f043 0303 	orr.w	r3, r3, #3
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0cc      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b68:	4b68      	ldr	r3, [pc, #416]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d90c      	bls.n	8005b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b76:	4b65      	ldr	r3, [pc, #404]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b63      	ldr	r3, [pc, #396]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0b8      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ba8:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4a58      	ldr	r2, [pc, #352]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bc0:	4b53      	ldr	r3, [pc, #332]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4a52      	ldr	r2, [pc, #328]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bcc:	4b50      	ldr	r3, [pc, #320]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	494d      	ldr	r1, [pc, #308]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d044      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf2:	4b47      	ldr	r3, [pc, #284]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d119      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e07f      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d003      	beq.n	8005c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d107      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c12:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e06f      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c22:	4b3b      	ldr	r3, [pc, #236]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e067      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c32:	4b37      	ldr	r3, [pc, #220]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f023 0203 	bic.w	r2, r3, #3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4934      	ldr	r1, [pc, #208]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c44:	f7fd fb52 	bl	80032ec <HAL_GetTick>
 8005c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c4c:	f7fd fb4e 	bl	80032ec <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e04f      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c62:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 020c 	and.w	r2, r3, #12
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d1eb      	bne.n	8005c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c74:	4b25      	ldr	r3, [pc, #148]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d20c      	bcs.n	8005c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c82:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8a:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e032      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4916      	ldr	r1, [pc, #88]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d009      	beq.n	8005cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	490e      	ldr	r1, [pc, #56]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cda:	f000 fb7f 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	091b      	lsrs	r3, r3, #4
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	490a      	ldr	r1, [pc, #40]	; (8005d14 <HAL_RCC_ClockConfig+0x1c0>)
 8005cec:	5ccb      	ldrb	r3, [r1, r3]
 8005cee:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf2:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fd fab2 	bl	8003264 <HAL_InitTick>

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40023c00 	.word	0x40023c00
 8005d10:	40023800 	.word	0x40023800
 8005d14:	08011070 	.word	0x08011070
 8005d18:	2000001c 	.word	0x2000001c
 8005d1c:	20000020 	.word	0x20000020

08005d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	2000001c 	.word	0x2000001c

08005d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d3c:	f7ff fff0 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0a9b      	lsrs	r3, r3, #10
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4903      	ldr	r1, [pc, #12]	; (8005d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	08011080 	.word	0x08011080

08005d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d64:	f7ff ffdc 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	0b5b      	lsrs	r3, r3, #13
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	08011080 	.word	0x08011080

08005d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08c      	sub	sp, #48	; 0x30
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005dc0:	4b6f      	ldr	r3, [pc, #444]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	496c      	ldr	r1, [pc, #432]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005dde:	2301      	movs	r3, #1
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d010      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005dee:	4b64      	ldr	r3, [pc, #400]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	4960      	ldr	r1, [pc, #384]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d017      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e1c:	4b58      	ldr	r3, [pc, #352]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	4955      	ldr	r1, [pc, #340]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e58:	4b49      	ldr	r3, [pc, #292]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	4946      	ldr	r1, [pc, #280]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e76:	d101      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005e84:	2301      	movs	r3, #1
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 808a 	beq.w	8005faa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	4b39      	ldr	r3, [pc, #228]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	4a38      	ldr	r2, [pc, #224]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea6:	4b36      	ldr	r3, [pc, #216]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005eb2:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ebe:	f7fd fa15 	bl	80032ec <HAL_GetTick>
 8005ec2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ec6:	f7fd fa11 	bl	80032ec <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e278      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ed8:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ee4:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d02f      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efc:	6a3a      	ldr	r2, [r7, #32]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d028      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f02:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f0c:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f18:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f1e:	4b18      	ldr	r3, [pc, #96]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d114      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f2a:	f7fd f9df 	bl	80032ec <HAL_GetTick>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f30:	e00a      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f32:	f7fd f9db 	bl	80032ec <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e240      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f48:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0ee      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f60:	d114      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f76:	4902      	ldr	r1, [pc, #8]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]
 8005f7c:	e00c      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40007000 	.word	0x40007000
 8005f88:	42470e40 	.word	0x42470e40
 8005f8c:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4a49      	ldr	r2, [pc, #292]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f96:	6093      	str	r3, [r2, #8]
 8005f98:	4b47      	ldr	r3, [pc, #284]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa4:	4944      	ldr	r1, [pc, #272]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005fbc:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005fbe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005fcc:	4b3a      	ldr	r3, [pc, #232]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fda:	4937      	ldr	r1, [pc, #220]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fee:	4b32      	ldr	r3, [pc, #200]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffc:	492e      	ldr	r1, [pc, #184]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d011      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006010:	4b29      	ldr	r3, [pc, #164]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006016:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	4926      	ldr	r1, [pc, #152]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800602e:	d101      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006030:	2301      	movs	r3, #1
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006040:	4b1d      	ldr	r3, [pc, #116]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006046:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	491a      	ldr	r1, [pc, #104]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605e:	2b00      	cmp	r3, #0
 8006060:	d011      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006068:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	4911      	ldr	r1, [pc, #68]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006080:	d101      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006082:	2301      	movs	r3, #1
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d005      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006094:	f040 80ff 	bne.w	8006296 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800609e:	f7fd f925 	bl	80032ec <HAL_GetTick>
 80060a2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a4:	e00e      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060a6:	f7fd f921 	bl	80032ec <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d907      	bls.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e188      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80060b8:	40023800 	.word	0x40023800
 80060bc:	424711e0 	.word	0x424711e0
 80060c0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060c4:	4b7e      	ldr	r3, [pc, #504]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ea      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d028      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d124      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80060f8:	4b71      	ldr	r3, [pc, #452]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	3301      	adds	r3, #1
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800610a:	4b6d      	ldr	r3, [pc, #436]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800610c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006110:	0e1b      	lsrs	r3, r3, #24
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	431a      	orrs	r2, r3
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	3b01      	subs	r3, #1
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	431a      	orrs	r2, r3
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	061b      	lsls	r3, r3, #24
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	071b      	lsls	r3, r3, #28
 800613a:	4961      	ldr	r1, [pc, #388]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d00a      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006160:	2b00      	cmp	r3, #0
 8006162:	d035      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800616c:	d130      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800616e:	4b54      	ldr	r3, [pc, #336]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	3301      	adds	r3, #1
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006180:	4b4f      	ldr	r3, [pc, #316]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006186:	0f1b      	lsrs	r3, r3, #28
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	019b      	lsls	r3, r3, #6
 8006198:	431a      	orrs	r2, r3
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	3b01      	subs	r3, #1
 80061a0:	041b      	lsls	r3, r3, #16
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	061b      	lsls	r3, r3, #24
 80061aa:	431a      	orrs	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	071b      	lsls	r3, r3, #28
 80061b0:	4943      	ldr	r1, [pc, #268]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061b8:	4b41      	ldr	r3, [pc, #260]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061be:	f023 021f 	bic.w	r2, r3, #31
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	3b01      	subs	r3, #1
 80061c8:	493d      	ldr	r1, [pc, #244]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d029      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e4:	d124      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	3301      	adds	r3, #1
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061f8:	4b31      	ldr	r3, [pc, #196]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fe:	0f1b      	lsrs	r3, r3, #28
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	019b      	lsls	r3, r3, #6
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	3b01      	subs	r3, #1
 800621a:	041b      	lsls	r3, r3, #16
 800621c:	431a      	orrs	r2, r3
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	061b      	lsls	r3, r3, #24
 8006222:	431a      	orrs	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	071b      	lsls	r3, r3, #28
 8006228:	4925      	ldr	r1, [pc, #148]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006238:	2b00      	cmp	r3, #0
 800623a:	d016      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	019b      	lsls	r3, r3, #6
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	3b01      	subs	r3, #1
 8006250:	041b      	lsls	r3, r3, #16
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	061b      	lsls	r3, r3, #24
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	071b      	lsls	r3, r3, #28
 8006262:	4917      	ldr	r1, [pc, #92]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800626a:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006270:	f7fd f83c 	bl	80032ec <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006276:	e008      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006278:	f7fd f838 	bl	80032ec <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e09f      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	2b01      	cmp	r3, #1
 800629a:	f040 8095 	bne.w	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062a4:	f7fd f822 	bl	80032ec <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062aa:	e00f      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80062ac:	f7fd f81e 	bl	80032ec <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d908      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e085      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800
 80062c4:	42470068 	.word	0x42470068
 80062c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062cc:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d8:	d0e8      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x566>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d02b      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d127      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006302:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	3301      	adds	r3, #1
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	019b      	lsls	r3, r3, #6
 800631e:	431a      	orrs	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	3b01      	subs	r3, #1
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	4928      	ldr	r1, [pc, #160]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800633a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800633e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	3b01      	subs	r3, #1
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	4922      	ldr	r1, [pc, #136]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01d      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006366:	d118      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006368:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	0e1b      	lsrs	r3, r3, #24
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	019b      	lsls	r3, r3, #6
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	431a      	orrs	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	4910      	ldr	r1, [pc, #64]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063a0:	f7fc ffa4 	bl	80032ec <HAL_GetTick>
 80063a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80063a8:	f7fc ffa0 	bl	80032ec <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e007      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c6:	d1ef      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3730      	adds	r7, #48	; 0x30
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40023800 	.word	0x40023800
 80063d8:	42470070 	.word	0x42470070

080063dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e0:	b0ae      	sub	sp, #184	; 0xb8
 80063e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006402:	4bcb      	ldr	r3, [pc, #812]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
 800640a:	2b0c      	cmp	r3, #12
 800640c:	f200 8206 	bhi.w	800681c <HAL_RCC_GetSysClockFreq+0x440>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	0800644d 	.word	0x0800644d
 800641c:	0800681d 	.word	0x0800681d
 8006420:	0800681d 	.word	0x0800681d
 8006424:	0800681d 	.word	0x0800681d
 8006428:	08006455 	.word	0x08006455
 800642c:	0800681d 	.word	0x0800681d
 8006430:	0800681d 	.word	0x0800681d
 8006434:	0800681d 	.word	0x0800681d
 8006438:	0800645d 	.word	0x0800645d
 800643c:	0800681d 	.word	0x0800681d
 8006440:	0800681d 	.word	0x0800681d
 8006444:	0800681d 	.word	0x0800681d
 8006448:	0800664d 	.word	0x0800664d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800644c:	4bb9      	ldr	r3, [pc, #740]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 800644e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006452:	e1e7      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006454:	4bb8      	ldr	r3, [pc, #736]	; (8006738 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800645a:	e1e3      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800645c:	4bb4      	ldr	r3, [pc, #720]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006468:	4bb1      	ldr	r3, [pc, #708]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d071      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006474:	4bae      	ldr	r3, [pc, #696]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	099b      	lsrs	r3, r3, #6
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006480:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006490:	2300      	movs	r3, #0
 8006492:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800649a:	4622      	mov	r2, r4
 800649c:	462b      	mov	r3, r5
 800649e:	f04f 0000 	mov.w	r0, #0
 80064a2:	f04f 0100 	mov.w	r1, #0
 80064a6:	0159      	lsls	r1, r3, #5
 80064a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064ac:	0150      	lsls	r0, r2, #5
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4621      	mov	r1, r4
 80064b4:	1a51      	subs	r1, r2, r1
 80064b6:	6439      	str	r1, [r7, #64]	; 0x40
 80064b8:	4629      	mov	r1, r5
 80064ba:	eb63 0301 	sbc.w	r3, r3, r1
 80064be:	647b      	str	r3, [r7, #68]	; 0x44
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80064cc:	4649      	mov	r1, r9
 80064ce:	018b      	lsls	r3, r1, #6
 80064d0:	4641      	mov	r1, r8
 80064d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064d6:	4641      	mov	r1, r8
 80064d8:	018a      	lsls	r2, r1, #6
 80064da:	4641      	mov	r1, r8
 80064dc:	1a51      	subs	r1, r2, r1
 80064de:	63b9      	str	r1, [r7, #56]	; 0x38
 80064e0:	4649      	mov	r1, r9
 80064e2:	eb63 0301 	sbc.w	r3, r3, r1
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80064f4:	4649      	mov	r1, r9
 80064f6:	00cb      	lsls	r3, r1, #3
 80064f8:	4641      	mov	r1, r8
 80064fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064fe:	4641      	mov	r1, r8
 8006500:	00ca      	lsls	r2, r1, #3
 8006502:	4610      	mov	r0, r2
 8006504:	4619      	mov	r1, r3
 8006506:	4603      	mov	r3, r0
 8006508:	4622      	mov	r2, r4
 800650a:	189b      	adds	r3, r3, r2
 800650c:	633b      	str	r3, [r7, #48]	; 0x30
 800650e:	462b      	mov	r3, r5
 8006510:	460a      	mov	r2, r1
 8006512:	eb42 0303 	adc.w	r3, r2, r3
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006524:	4629      	mov	r1, r5
 8006526:	024b      	lsls	r3, r1, #9
 8006528:	4621      	mov	r1, r4
 800652a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800652e:	4621      	mov	r1, r4
 8006530:	024a      	lsls	r2, r1, #9
 8006532:	4610      	mov	r0, r2
 8006534:	4619      	mov	r1, r3
 8006536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653a:	2200      	movs	r2, #0
 800653c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006540:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006544:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006548:	f7fa fb9e 	bl	8000c88 <__aeabi_uldivmod>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4613      	mov	r3, r2
 8006552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006556:	e067      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006558:	4b75      	ldr	r3, [pc, #468]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	099b      	lsrs	r3, r3, #6
 800655e:	2200      	movs	r2, #0
 8006560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006564:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	67bb      	str	r3, [r7, #120]	; 0x78
 8006572:	2300      	movs	r3, #0
 8006574:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006576:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800657a:	4622      	mov	r2, r4
 800657c:	462b      	mov	r3, r5
 800657e:	f04f 0000 	mov.w	r0, #0
 8006582:	f04f 0100 	mov.w	r1, #0
 8006586:	0159      	lsls	r1, r3, #5
 8006588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800658c:	0150      	lsls	r0, r2, #5
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4621      	mov	r1, r4
 8006594:	1a51      	subs	r1, r2, r1
 8006596:	62b9      	str	r1, [r7, #40]	; 0x28
 8006598:	4629      	mov	r1, r5
 800659a:	eb63 0301 	sbc.w	r3, r3, r1
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80065ac:	4649      	mov	r1, r9
 80065ae:	018b      	lsls	r3, r1, #6
 80065b0:	4641      	mov	r1, r8
 80065b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065b6:	4641      	mov	r1, r8
 80065b8:	018a      	lsls	r2, r1, #6
 80065ba:	4641      	mov	r1, r8
 80065bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80065c0:	4649      	mov	r1, r9
 80065c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065da:	4692      	mov	sl, r2
 80065dc:	469b      	mov	fp, r3
 80065de:	4623      	mov	r3, r4
 80065e0:	eb1a 0303 	adds.w	r3, sl, r3
 80065e4:	623b      	str	r3, [r7, #32]
 80065e6:	462b      	mov	r3, r5
 80065e8:	eb4b 0303 	adc.w	r3, fp, r3
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80065fa:	4629      	mov	r1, r5
 80065fc:	028b      	lsls	r3, r1, #10
 80065fe:	4621      	mov	r1, r4
 8006600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006604:	4621      	mov	r1, r4
 8006606:	028a      	lsls	r2, r1, #10
 8006608:	4610      	mov	r0, r2
 800660a:	4619      	mov	r1, r3
 800660c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006610:	2200      	movs	r2, #0
 8006612:	673b      	str	r3, [r7, #112]	; 0x70
 8006614:	677a      	str	r2, [r7, #116]	; 0x74
 8006616:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800661a:	f7fa fb35 	bl	8000c88 <__aeabi_uldivmod>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4613      	mov	r3, r2
 8006624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006628:	4b41      	ldr	r3, [pc, #260]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	0c1b      	lsrs	r3, r3, #16
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	3301      	adds	r3, #1
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800663a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800663e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800664a:	e0eb      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800664c:	4b38      	ldr	r3, [pc, #224]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006658:	4b35      	ldr	r3, [pc, #212]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d06b      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006664:	4b32      	ldr	r3, [pc, #200]	; (8006730 <HAL_RCC_GetSysClockFreq+0x354>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	099b      	lsrs	r3, r3, #6
 800666a:	2200      	movs	r2, #0
 800666c:	66bb      	str	r3, [r7, #104]	; 0x68
 800666e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006676:	663b      	str	r3, [r7, #96]	; 0x60
 8006678:	2300      	movs	r3, #0
 800667a:	667b      	str	r3, [r7, #100]	; 0x64
 800667c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006680:	4622      	mov	r2, r4
 8006682:	462b      	mov	r3, r5
 8006684:	f04f 0000 	mov.w	r0, #0
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	0159      	lsls	r1, r3, #5
 800668e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006692:	0150      	lsls	r0, r2, #5
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4621      	mov	r1, r4
 800669a:	1a51      	subs	r1, r2, r1
 800669c:	61b9      	str	r1, [r7, #24]
 800669e:	4629      	mov	r1, r5
 80066a0:	eb63 0301 	sbc.w	r3, r3, r1
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	f04f 0200 	mov.w	r2, #0
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80066b2:	4659      	mov	r1, fp
 80066b4:	018b      	lsls	r3, r1, #6
 80066b6:	4651      	mov	r1, sl
 80066b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066bc:	4651      	mov	r1, sl
 80066be:	018a      	lsls	r2, r1, #6
 80066c0:	4651      	mov	r1, sl
 80066c2:	ebb2 0801 	subs.w	r8, r2, r1
 80066c6:	4659      	mov	r1, fp
 80066c8:	eb63 0901 	sbc.w	r9, r3, r1
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066e0:	4690      	mov	r8, r2
 80066e2:	4699      	mov	r9, r3
 80066e4:	4623      	mov	r3, r4
 80066e6:	eb18 0303 	adds.w	r3, r8, r3
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	462b      	mov	r3, r5
 80066ee:	eb49 0303 	adc.w	r3, r9, r3
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006700:	4629      	mov	r1, r5
 8006702:	024b      	lsls	r3, r1, #9
 8006704:	4621      	mov	r1, r4
 8006706:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800670a:	4621      	mov	r1, r4
 800670c:	024a      	lsls	r2, r1, #9
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006716:	2200      	movs	r2, #0
 8006718:	65bb      	str	r3, [r7, #88]	; 0x58
 800671a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800671c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006720:	f7fa fab2 	bl	8000c88 <__aeabi_uldivmod>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4613      	mov	r3, r2
 800672a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800672e:	e065      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x420>
 8006730:	40023800 	.word	0x40023800
 8006734:	00f42400 	.word	0x00f42400
 8006738:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800673c:	4b3d      	ldr	r3, [pc, #244]	; (8006834 <HAL_RCC_GetSysClockFreq+0x458>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	099b      	lsrs	r3, r3, #6
 8006742:	2200      	movs	r2, #0
 8006744:	4618      	mov	r0, r3
 8006746:	4611      	mov	r1, r2
 8006748:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800674c:	653b      	str	r3, [r7, #80]	; 0x50
 800674e:	2300      	movs	r3, #0
 8006750:	657b      	str	r3, [r7, #84]	; 0x54
 8006752:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006756:	4642      	mov	r2, r8
 8006758:	464b      	mov	r3, r9
 800675a:	f04f 0000 	mov.w	r0, #0
 800675e:	f04f 0100 	mov.w	r1, #0
 8006762:	0159      	lsls	r1, r3, #5
 8006764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006768:	0150      	lsls	r0, r2, #5
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4641      	mov	r1, r8
 8006770:	1a51      	subs	r1, r2, r1
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	4649      	mov	r1, r9
 8006776:	eb63 0301 	sbc.w	r3, r3, r1
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006788:	4659      	mov	r1, fp
 800678a:	018b      	lsls	r3, r1, #6
 800678c:	4651      	mov	r1, sl
 800678e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006792:	4651      	mov	r1, sl
 8006794:	018a      	lsls	r2, r1, #6
 8006796:	4651      	mov	r1, sl
 8006798:	1a54      	subs	r4, r2, r1
 800679a:	4659      	mov	r1, fp
 800679c:	eb63 0501 	sbc.w	r5, r3, r1
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	00eb      	lsls	r3, r5, #3
 80067aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ae:	00e2      	lsls	r2, r4, #3
 80067b0:	4614      	mov	r4, r2
 80067b2:	461d      	mov	r5, r3
 80067b4:	4643      	mov	r3, r8
 80067b6:	18e3      	adds	r3, r4, r3
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	464b      	mov	r3, r9
 80067bc:	eb45 0303 	adc.w	r3, r5, r3
 80067c0:	607b      	str	r3, [r7, #4]
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ce:	4629      	mov	r1, r5
 80067d0:	028b      	lsls	r3, r1, #10
 80067d2:	4621      	mov	r1, r4
 80067d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067d8:	4621      	mov	r1, r4
 80067da:	028a      	lsls	r2, r1, #10
 80067dc:	4610      	mov	r0, r2
 80067de:	4619      	mov	r1, r3
 80067e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067e4:	2200      	movs	r2, #0
 80067e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80067ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067ee:	f7fa fa4b 	bl	8000c88 <__aeabi_uldivmod>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4613      	mov	r3, r2
 80067f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <HAL_RCC_GetSysClockFreq+0x458>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	0f1b      	lsrs	r3, r3, #28
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800680a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800680e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800681a:	e003      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_RCC_GetSysClockFreq+0x45c>)
 800681e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006822:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006828:	4618      	mov	r0, r3
 800682a:	37b8      	adds	r7, #184	; 0xb8
 800682c:	46bd      	mov	sp, r7
 800682e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006832:	bf00      	nop
 8006834:	40023800 	.word	0x40023800
 8006838:	00f42400 	.word	0x00f42400

0800683c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e28d      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8083 	beq.w	8006962 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800685c:	4b94      	ldr	r3, [pc, #592]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 030c 	and.w	r3, r3, #12
 8006864:	2b04      	cmp	r3, #4
 8006866:	d019      	beq.n	800689c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006868:	4b91      	ldr	r3, [pc, #580]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006870:	2b08      	cmp	r3, #8
 8006872:	d106      	bne.n	8006882 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006874:	4b8e      	ldr	r3, [pc, #568]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800687c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006880:	d00c      	beq.n	800689c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006882:	4b8b      	ldr	r3, [pc, #556]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800688a:	2b0c      	cmp	r3, #12
 800688c:	d112      	bne.n	80068b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800688e:	4b88      	ldr	r3, [pc, #544]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800689a:	d10b      	bne.n	80068b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800689c:	4b84      	ldr	r3, [pc, #528]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d05b      	beq.n	8006960 <HAL_RCC_OscConfig+0x124>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d157      	bne.n	8006960 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e25a      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d106      	bne.n	80068cc <HAL_RCC_OscConfig+0x90>
 80068be:	4b7c      	ldr	r3, [pc, #496]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a7b      	ldr	r2, [pc, #492]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e01d      	b.n	8006908 <HAL_RCC_OscConfig+0xcc>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068d4:	d10c      	bne.n	80068f0 <HAL_RCC_OscConfig+0xb4>
 80068d6:	4b76      	ldr	r3, [pc, #472]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a75      	ldr	r2, [pc, #468]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	4b73      	ldr	r3, [pc, #460]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a72      	ldr	r2, [pc, #456]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e00b      	b.n	8006908 <HAL_RCC_OscConfig+0xcc>
 80068f0:	4b6f      	ldr	r3, [pc, #444]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a6e      	ldr	r2, [pc, #440]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	4b6c      	ldr	r3, [pc, #432]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a6b      	ldr	r2, [pc, #428]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d013      	beq.n	8006938 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006910:	f7fc fcec 	bl	80032ec <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006918:	f7fc fce8 	bl	80032ec <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b64      	cmp	r3, #100	; 0x64
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e21f      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692a:	4b61      	ldr	r3, [pc, #388]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0xdc>
 8006936:	e014      	b.n	8006962 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006938:	f7fc fcd8 	bl	80032ec <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006940:	f7fc fcd4 	bl	80032ec <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b64      	cmp	r3, #100	; 0x64
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e20b      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006952:	4b57      	ldr	r3, [pc, #348]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f0      	bne.n	8006940 <HAL_RCC_OscConfig+0x104>
 800695e:	e000      	b.n	8006962 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d06f      	beq.n	8006a4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800696e:	4b50      	ldr	r3, [pc, #320]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b00      	cmp	r3, #0
 8006978:	d017      	beq.n	80069aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800697a:	4b4d      	ldr	r3, [pc, #308]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006982:	2b08      	cmp	r3, #8
 8006984:	d105      	bne.n	8006992 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006986:	4b4a      	ldr	r3, [pc, #296]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006992:	4b47      	ldr	r3, [pc, #284]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800699a:	2b0c      	cmp	r3, #12
 800699c:	d11c      	bne.n	80069d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800699e:	4b44      	ldr	r3, [pc, #272]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d116      	bne.n	80069d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069aa:	4b41      	ldr	r3, [pc, #260]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <HAL_RCC_OscConfig+0x186>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d001      	beq.n	80069c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e1d3      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c2:	4b3b      	ldr	r3, [pc, #236]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	4937      	ldr	r1, [pc, #220]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d6:	e03a      	b.n	8006a4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d020      	beq.n	8006a22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069e0:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <HAL_RCC_OscConfig+0x278>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e6:	f7fc fc81 	bl	80032ec <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ee:	f7fc fc7d 	bl	80032ec <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e1b4      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a00:	4b2b      	ldr	r3, [pc, #172]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0f0      	beq.n	80069ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0c:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4925      	ldr	r1, [pc, #148]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	600b      	str	r3, [r1, #0]
 8006a20:	e015      	b.n	8006a4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <HAL_RCC_OscConfig+0x278>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fc fc60 	bl	80032ec <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a30:	f7fc fc5c 	bl	80032ec <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e193      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a42:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d036      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d016      	beq.n	8006a90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a62:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <HAL_RCC_OscConfig+0x27c>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a68:	f7fc fc40 	bl	80032ec <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a70:	f7fc fc3c 	bl	80032ec <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e173      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <HAL_RCC_OscConfig+0x274>)
 8006a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0x234>
 8006a8e:	e01b      	b.n	8006ac8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a90:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <HAL_RCC_OscConfig+0x27c>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a96:	f7fc fc29 	bl	80032ec <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a9c:	e00e      	b.n	8006abc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a9e:	f7fc fc25 	bl	80032ec <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d907      	bls.n	8006abc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e15c      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	42470000 	.word	0x42470000
 8006ab8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006abc:	4b8a      	ldr	r3, [pc, #552]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1ea      	bne.n	8006a9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8097 	beq.w	8006c04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ada:	4b83      	ldr	r3, [pc, #524]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10f      	bne.n	8006b06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	4b7f      	ldr	r3, [pc, #508]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	4a7e      	ldr	r2, [pc, #504]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af4:	6413      	str	r3, [r2, #64]	; 0x40
 8006af6:	4b7c      	ldr	r3, [pc, #496]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	60bb      	str	r3, [r7, #8]
 8006b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b02:	2301      	movs	r3, #1
 8006b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b06:	4b79      	ldr	r3, [pc, #484]	; (8006cec <HAL_RCC_OscConfig+0x4b0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d118      	bne.n	8006b44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b12:	4b76      	ldr	r3, [pc, #472]	; (8006cec <HAL_RCC_OscConfig+0x4b0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a75      	ldr	r2, [pc, #468]	; (8006cec <HAL_RCC_OscConfig+0x4b0>)
 8006b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b1e:	f7fc fbe5 	bl	80032ec <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b26:	f7fc fbe1 	bl	80032ec <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e118      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b38:	4b6c      	ldr	r3, [pc, #432]	; (8006cec <HAL_RCC_OscConfig+0x4b0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0f0      	beq.n	8006b26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d106      	bne.n	8006b5a <HAL_RCC_OscConfig+0x31e>
 8006b4c:	4b66      	ldr	r3, [pc, #408]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b50:	4a65      	ldr	r2, [pc, #404]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	6713      	str	r3, [r2, #112]	; 0x70
 8006b58:	e01c      	b.n	8006b94 <HAL_RCC_OscConfig+0x358>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b05      	cmp	r3, #5
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCC_OscConfig+0x340>
 8006b62:	4b61      	ldr	r3, [pc, #388]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	4a60      	ldr	r2, [pc, #384]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b68:	f043 0304 	orr.w	r3, r3, #4
 8006b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b6e:	4b5e      	ldr	r3, [pc, #376]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	4a5d      	ldr	r2, [pc, #372]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7a:	e00b      	b.n	8006b94 <HAL_RCC_OscConfig+0x358>
 8006b7c:	4b5a      	ldr	r3, [pc, #360]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b80:	4a59      	ldr	r2, [pc, #356]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b82:	f023 0301 	bic.w	r3, r3, #1
 8006b86:	6713      	str	r3, [r2, #112]	; 0x70
 8006b88:	4b57      	ldr	r3, [pc, #348]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	4a56      	ldr	r2, [pc, #344]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006b8e:	f023 0304 	bic.w	r3, r3, #4
 8006b92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d015      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9c:	f7fc fba6 	bl	80032ec <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba2:	e00a      	b.n	8006bba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ba4:	f7fc fba2 	bl	80032ec <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e0d7      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bba:	4b4b      	ldr	r3, [pc, #300]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0ee      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x368>
 8006bc6:	e014      	b.n	8006bf2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc8:	f7fc fb90 	bl	80032ec <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bce:	e00a      	b.n	8006be6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd0:	f7fc fb8c 	bl	80032ec <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e0c1      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006be6:	4b40      	ldr	r3, [pc, #256]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1ee      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d105      	bne.n	8006c04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	4a3a      	ldr	r2, [pc, #232]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80ad 	beq.w	8006d68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c0e:	4b36      	ldr	r3, [pc, #216]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 030c 	and.w	r3, r3, #12
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d060      	beq.n	8006cdc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d145      	bne.n	8006cae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c22:	4b33      	ldr	r3, [pc, #204]	; (8006cf0 <HAL_RCC_OscConfig+0x4b4>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c28:	f7fc fb60 	bl	80032ec <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c30:	f7fc fb5c 	bl	80032ec <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e093      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c42:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69da      	ldr	r2, [r3, #28]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	019b      	lsls	r3, r3, #6
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	085b      	lsrs	r3, r3, #1
 8006c66:	3b01      	subs	r3, #1
 8006c68:	041b      	lsls	r3, r3, #16
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	061b      	lsls	r3, r3, #24
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	071b      	lsls	r3, r3, #28
 8006c7a:	491b      	ldr	r1, [pc, #108]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c80:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <HAL_RCC_OscConfig+0x4b4>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c86:	f7fc fb31 	bl	80032ec <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c8e:	f7fc fb2d 	bl	80032ec <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e064      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca0:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0f0      	beq.n	8006c8e <HAL_RCC_OscConfig+0x452>
 8006cac:	e05c      	b.n	8006d68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <HAL_RCC_OscConfig+0x4b4>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fc fb1a 	bl	80032ec <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cbc:	f7fc fb16 	bl	80032ec <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e04d      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cce:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_RCC_OscConfig+0x4ac>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_OscConfig+0x480>
 8006cda:	e045      	b.n	8006d68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e040      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	40007000 	.word	0x40007000
 8006cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cf4:	4b1f      	ldr	r3, [pc, #124]	; (8006d74 <HAL_RCC_OscConfig+0x538>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d030      	beq.n	8006d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d129      	bne.n	8006d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d122      	bne.n	8006d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d24:	4013      	ands	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d119      	bne.n	8006d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3a:	085b      	lsrs	r3, r3, #1
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d10f      	bne.n	8006d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d107      	bne.n	8006d64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d001      	beq.n	8006d68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40023800 	.word	0x40023800

08006d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e041      	b.n	8006e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fb ff0e 	bl	8002bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f000 fc7a 	bl	80076b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d001      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e04e      	b.n	8006ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a23      	ldr	r2, [pc, #140]	; (8006edc <HAL_TIM_Base_Start_IT+0xc4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d022      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x80>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5a:	d01d      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x80>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d018      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x80>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x80>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00e      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x80>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <HAL_TIM_Base_Start_IT+0xd4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d009      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x80>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a19      	ldr	r2, [pc, #100]	; (8006ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x80>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a18      	ldr	r2, [pc, #96]	; (8006ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d111      	bne.n	8006ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b06      	cmp	r3, #6
 8006ea8:	d010      	beq.n	8006ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0201 	orr.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eba:	e007      	b.n	8006ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40010400 	.word	0x40010400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40001800 	.word	0x40001800

08006ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e041      	b.n	8006f8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f839 	bl	8006f96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f000 fbba 	bl	80076b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
	...

08006fac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d109      	bne.n	8006fd0 <HAL_TIM_PWM_Start+0x24>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e022      	b.n	8007016 <HAL_TIM_PWM_Start+0x6a>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d109      	bne.n	8006fea <HAL_TIM_PWM_Start+0x3e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	bf14      	ite	ne
 8006fe2:	2301      	movne	r3, #1
 8006fe4:	2300      	moveq	r3, #0
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	e015      	b.n	8007016 <HAL_TIM_PWM_Start+0x6a>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d109      	bne.n	8007004 <HAL_TIM_PWM_Start+0x58>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	bf14      	ite	ne
 8006ffc:	2301      	movne	r3, #1
 8006ffe:	2300      	moveq	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	e008      	b.n	8007016 <HAL_TIM_PWM_Start+0x6a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	bf14      	ite	ne
 8007010:	2301      	movne	r3, #1
 8007012:	2300      	moveq	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e07c      	b.n	8007118 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <HAL_TIM_PWM_Start+0x82>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800702c:	e013      	b.n	8007056 <HAL_TIM_PWM_Start+0xaa>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b04      	cmp	r3, #4
 8007032:	d104      	bne.n	800703e <HAL_TIM_PWM_Start+0x92>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800703c:	e00b      	b.n	8007056 <HAL_TIM_PWM_Start+0xaa>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b08      	cmp	r3, #8
 8007042:	d104      	bne.n	800704e <HAL_TIM_PWM_Start+0xa2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800704c:	e003      	b.n	8007056 <HAL_TIM_PWM_Start+0xaa>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2201      	movs	r2, #1
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fe10 	bl	8007c84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a2d      	ldr	r2, [pc, #180]	; (8007120 <HAL_TIM_PWM_Start+0x174>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d004      	beq.n	8007078 <HAL_TIM_PWM_Start+0xcc>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a2c      	ldr	r2, [pc, #176]	; (8007124 <HAL_TIM_PWM_Start+0x178>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d101      	bne.n	800707c <HAL_TIM_PWM_Start+0xd0>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <HAL_TIM_PWM_Start+0xd2>
 800707c:	2300      	movs	r3, #0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a22      	ldr	r2, [pc, #136]	; (8007120 <HAL_TIM_PWM_Start+0x174>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d022      	beq.n	80070e2 <HAL_TIM_PWM_Start+0x136>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a4:	d01d      	beq.n	80070e2 <HAL_TIM_PWM_Start+0x136>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1f      	ldr	r2, [pc, #124]	; (8007128 <HAL_TIM_PWM_Start+0x17c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d018      	beq.n	80070e2 <HAL_TIM_PWM_Start+0x136>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1d      	ldr	r2, [pc, #116]	; (800712c <HAL_TIM_PWM_Start+0x180>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d013      	beq.n	80070e2 <HAL_TIM_PWM_Start+0x136>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <HAL_TIM_PWM_Start+0x184>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00e      	beq.n	80070e2 <HAL_TIM_PWM_Start+0x136>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a16      	ldr	r2, [pc, #88]	; (8007124 <HAL_TIM_PWM_Start+0x178>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d009      	beq.n	80070e2 <HAL_TIM_PWM_Start+0x136>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a18      	ldr	r2, [pc, #96]	; (8007134 <HAL_TIM_PWM_Start+0x188>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d004      	beq.n	80070e2 <HAL_TIM_PWM_Start+0x136>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a16      	ldr	r2, [pc, #88]	; (8007138 <HAL_TIM_PWM_Start+0x18c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d111      	bne.n	8007106 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b06      	cmp	r3, #6
 80070f2:	d010      	beq.n	8007116 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007104:	e007      	b.n	8007116 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0201 	orr.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	40010000 	.word	0x40010000
 8007124:	40010400 	.word	0x40010400
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40014000 	.word	0x40014000
 8007138:	40001800 	.word	0x40001800

0800713c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b02      	cmp	r3, #2
 8007150:	d122      	bne.n	8007198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b02      	cmp	r3, #2
 800715e:	d11b      	bne.n	8007198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0202 	mvn.w	r2, #2
 8007168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa77 	bl	8007672 <HAL_TIM_IC_CaptureCallback>
 8007184:	e005      	b.n	8007192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa69 	bl	800765e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa7a 	bl	8007686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d122      	bne.n	80071ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d11b      	bne.n	80071ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f06f 0204 	mvn.w	r2, #4
 80071bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2202      	movs	r2, #2
 80071c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa4d 	bl	8007672 <HAL_TIM_IC_CaptureCallback>
 80071d8:	e005      	b.n	80071e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa3f 	bl	800765e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fa50 	bl	8007686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d122      	bne.n	8007240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b08      	cmp	r3, #8
 8007206:	d11b      	bne.n	8007240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0208 	mvn.w	r2, #8
 8007210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2204      	movs	r2, #4
 8007216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa23 	bl	8007672 <HAL_TIM_IC_CaptureCallback>
 800722c:	e005      	b.n	800723a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa15 	bl	800765e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa26 	bl	8007686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b10      	cmp	r3, #16
 800724c:	d122      	bne.n	8007294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b10      	cmp	r3, #16
 800725a:	d11b      	bne.n	8007294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f06f 0210 	mvn.w	r2, #16
 8007264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2208      	movs	r2, #8
 800726a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9f9 	bl	8007672 <HAL_TIM_IC_CaptureCallback>
 8007280:	e005      	b.n	800728e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f9eb 	bl	800765e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f9fc 	bl	8007686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d10e      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d107      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0201 	mvn.w	r2, #1
 80072b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fa fbcc 	bl	8001a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b80      	cmp	r3, #128	; 0x80
 80072cc:	d10e      	bne.n	80072ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d8:	2b80      	cmp	r3, #128	; 0x80
 80072da:	d107      	bne.n	80072ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fd78 	bl	8007ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b40      	cmp	r3, #64	; 0x40
 80072f8:	d10e      	bne.n	8007318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d107      	bne.n	8007318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9c1 	bl	800769a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b20      	cmp	r3, #32
 8007324:	d10e      	bne.n	8007344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0320 	and.w	r3, r3, #32
 8007330:	2b20      	cmp	r3, #32
 8007332:	d107      	bne.n	8007344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0220 	mvn.w	r2, #32
 800733c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fd42 	bl	8007dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007366:	2302      	movs	r3, #2
 8007368:	e0ae      	b.n	80074c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b0c      	cmp	r3, #12
 8007376:	f200 809f 	bhi.w	80074b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	080073b5 	.word	0x080073b5
 8007384:	080074b9 	.word	0x080074b9
 8007388:	080074b9 	.word	0x080074b9
 800738c:	080074b9 	.word	0x080074b9
 8007390:	080073f5 	.word	0x080073f5
 8007394:	080074b9 	.word	0x080074b9
 8007398:	080074b9 	.word	0x080074b9
 800739c:	080074b9 	.word	0x080074b9
 80073a0:	08007437 	.word	0x08007437
 80073a4:	080074b9 	.word	0x080074b9
 80073a8:	080074b9 	.word	0x080074b9
 80073ac:	080074b9 	.word	0x080074b9
 80073b0:	08007477 	.word	0x08007477
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fa18 	bl	80077f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0208 	orr.w	r2, r2, #8
 80073ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0204 	bic.w	r2, r2, #4
 80073de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6999      	ldr	r1, [r3, #24]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	619a      	str	r2, [r3, #24]
      break;
 80073f2:	e064      	b.n	80074be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fa68 	bl	80078d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6999      	ldr	r1, [r3, #24]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	021a      	lsls	r2, r3, #8
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	619a      	str	r2, [r3, #24]
      break;
 8007434:	e043      	b.n	80074be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fabd 	bl	80079bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0208 	orr.w	r2, r2, #8
 8007450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69da      	ldr	r2, [r3, #28]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0204 	bic.w	r2, r2, #4
 8007460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69d9      	ldr	r1, [r3, #28]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	61da      	str	r2, [r3, #28]
      break;
 8007474:	e023      	b.n	80074be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fb11 	bl	8007aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69da      	ldr	r2, [r3, #28]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69d9      	ldr	r1, [r3, #28]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	021a      	lsls	r2, r3, #8
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	61da      	str	r2, [r3, #28]
      break;
 80074b6:	e002      	b.n	80074be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	75fb      	strb	r3, [r7, #23]
      break;
 80074bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_TIM_ConfigClockSource+0x1c>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e0b4      	b.n	8007656 <HAL_TIM_ConfigClockSource+0x186>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800750a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007524:	d03e      	beq.n	80075a4 <HAL_TIM_ConfigClockSource+0xd4>
 8007526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752a:	f200 8087 	bhi.w	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007532:	f000 8086 	beq.w	8007642 <HAL_TIM_ConfigClockSource+0x172>
 8007536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753a:	d87f      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800753c:	2b70      	cmp	r3, #112	; 0x70
 800753e:	d01a      	beq.n	8007576 <HAL_TIM_ConfigClockSource+0xa6>
 8007540:	2b70      	cmp	r3, #112	; 0x70
 8007542:	d87b      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 8007544:	2b60      	cmp	r3, #96	; 0x60
 8007546:	d050      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0x11a>
 8007548:	2b60      	cmp	r3, #96	; 0x60
 800754a:	d877      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800754c:	2b50      	cmp	r3, #80	; 0x50
 800754e:	d03c      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0xfa>
 8007550:	2b50      	cmp	r3, #80	; 0x50
 8007552:	d873      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	d058      	beq.n	800760a <HAL_TIM_ConfigClockSource+0x13a>
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d86f      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800755c:	2b30      	cmp	r3, #48	; 0x30
 800755e:	d064      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x15a>
 8007560:	2b30      	cmp	r3, #48	; 0x30
 8007562:	d86b      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 8007564:	2b20      	cmp	r3, #32
 8007566:	d060      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x15a>
 8007568:	2b20      	cmp	r3, #32
 800756a:	d867      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d05c      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x15a>
 8007570:	2b10      	cmp	r3, #16
 8007572:	d05a      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x15a>
 8007574:	e062      	b.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6899      	ldr	r1, [r3, #8]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f000 fb5d 	bl	8007c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	609a      	str	r2, [r3, #8]
      break;
 80075a2:	e04f      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	6899      	ldr	r1, [r3, #8]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f000 fb46 	bl	8007c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075c6:	609a      	str	r2, [r3, #8]
      break;
 80075c8:	e03c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	6859      	ldr	r1, [r3, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f000 faba 	bl	8007b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2150      	movs	r1, #80	; 0x50
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fb13 	bl	8007c0e <TIM_ITRx_SetConfig>
      break;
 80075e8:	e02c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6859      	ldr	r1, [r3, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f000 fad9 	bl	8007bae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2160      	movs	r1, #96	; 0x60
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fb03 	bl	8007c0e <TIM_ITRx_SetConfig>
      break;
 8007608:	e01c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	6859      	ldr	r1, [r3, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	461a      	mov	r2, r3
 8007618:	f000 fa9a 	bl	8007b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2140      	movs	r1, #64	; 0x40
 8007622:	4618      	mov	r0, r3
 8007624:	f000 faf3 	bl	8007c0e <TIM_ITRx_SetConfig>
      break;
 8007628:	e00c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f000 faea 	bl	8007c0e <TIM_ITRx_SetConfig>
      break;
 800763a:	e003      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	73fb      	strb	r3, [r7, #15]
      break;
 8007640:	e000      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
	...

080076b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a40      	ldr	r2, [pc, #256]	; (80077c4 <TIM_Base_SetConfig+0x114>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d013      	beq.n	80076f0 <TIM_Base_SetConfig+0x40>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ce:	d00f      	beq.n	80076f0 <TIM_Base_SetConfig+0x40>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a3d      	ldr	r2, [pc, #244]	; (80077c8 <TIM_Base_SetConfig+0x118>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00b      	beq.n	80076f0 <TIM_Base_SetConfig+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a3c      	ldr	r2, [pc, #240]	; (80077cc <TIM_Base_SetConfig+0x11c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d007      	beq.n	80076f0 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a3b      	ldr	r2, [pc, #236]	; (80077d0 <TIM_Base_SetConfig+0x120>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d003      	beq.n	80076f0 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a3a      	ldr	r2, [pc, #232]	; (80077d4 <TIM_Base_SetConfig+0x124>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d108      	bne.n	8007702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a2f      	ldr	r2, [pc, #188]	; (80077c4 <TIM_Base_SetConfig+0x114>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d02b      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007710:	d027      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a2c      	ldr	r2, [pc, #176]	; (80077c8 <TIM_Base_SetConfig+0x118>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d023      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2b      	ldr	r2, [pc, #172]	; (80077cc <TIM_Base_SetConfig+0x11c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01f      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2a      	ldr	r2, [pc, #168]	; (80077d0 <TIM_Base_SetConfig+0x120>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d01b      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a29      	ldr	r2, [pc, #164]	; (80077d4 <TIM_Base_SetConfig+0x124>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d017      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a28      	ldr	r2, [pc, #160]	; (80077d8 <TIM_Base_SetConfig+0x128>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d013      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a27      	ldr	r2, [pc, #156]	; (80077dc <TIM_Base_SetConfig+0x12c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00f      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a26      	ldr	r2, [pc, #152]	; (80077e0 <TIM_Base_SetConfig+0x130>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00b      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a25      	ldr	r2, [pc, #148]	; (80077e4 <TIM_Base_SetConfig+0x134>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d007      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a24      	ldr	r2, [pc, #144]	; (80077e8 <TIM_Base_SetConfig+0x138>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a23      	ldr	r2, [pc, #140]	; (80077ec <TIM_Base_SetConfig+0x13c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d108      	bne.n	8007774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	4313      	orrs	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a0a      	ldr	r2, [pc, #40]	; (80077c4 <TIM_Base_SetConfig+0x114>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_Base_SetConfig+0xf8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a0c      	ldr	r2, [pc, #48]	; (80077d4 <TIM_Base_SetConfig+0x124>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d103      	bne.n	80077b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	615a      	str	r2, [r3, #20]
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	40010400 	.word	0x40010400
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40014400 	.word	0x40014400
 80077e0:	40014800 	.word	0x40014800
 80077e4:	40001800 	.word	0x40001800
 80077e8:	40001c00 	.word	0x40001c00
 80077ec:	40002000 	.word	0x40002000

080077f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f023 0201 	bic.w	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0303 	bic.w	r3, r3, #3
 8007826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f023 0302 	bic.w	r3, r3, #2
 8007838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a20      	ldr	r2, [pc, #128]	; (80078c8 <TIM_OC1_SetConfig+0xd8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC1_SetConfig+0x64>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1f      	ldr	r2, [pc, #124]	; (80078cc <TIM_OC1_SetConfig+0xdc>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10c      	bne.n	800786e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0308 	bic.w	r3, r3, #8
 800785a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f023 0304 	bic.w	r3, r3, #4
 800786c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a15      	ldr	r2, [pc, #84]	; (80078c8 <TIM_OC1_SetConfig+0xd8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d003      	beq.n	800787e <TIM_OC1_SetConfig+0x8e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a14      	ldr	r2, [pc, #80]	; (80078cc <TIM_OC1_SetConfig+0xdc>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d111      	bne.n	80078a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800788c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	621a      	str	r2, [r3, #32]
}
 80078bc:	bf00      	nop
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	40010000 	.word	0x40010000
 80078cc:	40010400 	.word	0x40010400

080078d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f023 0210 	bic.w	r2, r3, #16
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	021b      	lsls	r3, r3, #8
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f023 0320 	bic.w	r3, r3, #32
 800791a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a22      	ldr	r2, [pc, #136]	; (80079b4 <TIM_OC2_SetConfig+0xe4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_OC2_SetConfig+0x68>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a21      	ldr	r2, [pc, #132]	; (80079b8 <TIM_OC2_SetConfig+0xe8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d10d      	bne.n	8007954 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800793e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007952:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a17      	ldr	r2, [pc, #92]	; (80079b4 <TIM_OC2_SetConfig+0xe4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d003      	beq.n	8007964 <TIM_OC2_SetConfig+0x94>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a16      	ldr	r2, [pc, #88]	; (80079b8 <TIM_OC2_SetConfig+0xe8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d113      	bne.n	800798c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800796a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	4313      	orrs	r3, r2
 800797e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40010400 	.word	0x40010400

080079bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	021b      	lsls	r3, r3, #8
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a21      	ldr	r2, [pc, #132]	; (8007a9c <TIM_OC3_SetConfig+0xe0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d003      	beq.n	8007a22 <TIM_OC3_SetConfig+0x66>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a20      	ldr	r2, [pc, #128]	; (8007aa0 <TIM_OC3_SetConfig+0xe4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d10d      	bne.n	8007a3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a16      	ldr	r2, [pc, #88]	; (8007a9c <TIM_OC3_SetConfig+0xe0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d003      	beq.n	8007a4e <TIM_OC3_SetConfig+0x92>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <TIM_OC3_SetConfig+0xe4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d113      	bne.n	8007a76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	621a      	str	r2, [r3, #32]
}
 8007a90:	bf00      	nop
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	40010400 	.word	0x40010400

08007aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	031b      	lsls	r3, r3, #12
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a12      	ldr	r2, [pc, #72]	; (8007b48 <TIM_OC4_SetConfig+0xa4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_OC4_SetConfig+0x68>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <TIM_OC4_SetConfig+0xa8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d109      	bne.n	8007b20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	019b      	lsls	r3, r3, #6
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	621a      	str	r2, [r3, #32]
}
 8007b3a:	bf00      	nop
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	40010000 	.word	0x40010000
 8007b4c:	40010400 	.word	0x40010400

08007b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f023 0201 	bic.w	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f023 030a 	bic.w	r3, r3, #10
 8007b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	621a      	str	r2, [r3, #32]
}
 8007ba2:	bf00      	nop
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b087      	sub	sp, #28
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f023 0210 	bic.w	r2, r3, #16
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	031b      	lsls	r3, r3, #12
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	621a      	str	r2, [r3, #32]
}
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f043 0307 	orr.w	r3, r3, #7
 8007c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	609a      	str	r2, [r3, #8]
}
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	021a      	lsls	r2, r3, #8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	609a      	str	r2, [r3, #8]
}
 8007c78:	bf00      	nop
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	2201      	movs	r2, #1
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a1a      	ldr	r2, [r3, #32]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	43db      	mvns	r3, r3
 8007ca6:	401a      	ands	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a1a      	ldr	r2, [r3, #32]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	621a      	str	r2, [r3, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e05a      	b.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a21      	ldr	r2, [pc, #132]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d022      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d34:	d01d      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1d      	ldr	r2, [pc, #116]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1b      	ldr	r2, [pc, #108]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1a      	ldr	r2, [pc, #104]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a18      	ldr	r2, [pc, #96]	; (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a17      	ldr	r2, [pc, #92]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d10c      	bne.n	8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800
 8007db8:	40000c00 	.word	0x40000c00
 8007dbc:	40010400 	.word	0x40010400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40001800 	.word	0x40001800

08007dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e03f      	b.n	8007e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fa ff8e 	bl	8002d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	; 0x24
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fe81 	bl	8008b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	691a      	ldr	r2, [r3, #16]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695a      	ldr	r2, [r3, #20]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b08a      	sub	sp, #40	; 0x28
 8007e8e:	af02      	add	r7, sp, #8
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	4613      	mov	r3, r2
 8007e98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d17c      	bne.n	8007fa4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <HAL_UART_Transmit+0x2c>
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e075      	b.n	8007fa6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_UART_Transmit+0x3e>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e06e      	b.n	8007fa6 <HAL_UART_Transmit+0x11c>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2221      	movs	r2, #33	; 0x21
 8007eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ede:	f7fb fa05 	bl	80032ec <HAL_GetTick>
 8007ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	88fa      	ldrh	r2, [r7, #6]
 8007ee8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	88fa      	ldrh	r2, [r7, #6]
 8007eee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef8:	d108      	bne.n	8007f0c <HAL_UART_Transmit+0x82>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	e003      	b.n	8007f14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f1c:	e02a      	b.n	8007f74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2200      	movs	r2, #0
 8007f26:	2180      	movs	r1, #128	; 0x80
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fbc1 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e036      	b.n	8007fa6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10b      	bne.n	8007f56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	3302      	adds	r3, #2
 8007f52:	61bb      	str	r3, [r7, #24]
 8007f54:	e007      	b.n	8007f66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	3301      	adds	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1cf      	bne.n	8007f1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	2140      	movs	r1, #64	; 0x40
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 fb91 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e006      	b.n	8007fa6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e000      	b.n	8007fa6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fa4:	2302      	movs	r3, #2
  }
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b08a      	sub	sp, #40	; 0x28
 8007fb2:	af02      	add	r7, sp, #8
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	603b      	str	r3, [r7, #0]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	f040 808c 	bne.w	80080e8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_UART_Receive+0x2e>
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e084      	b.n	80080ea <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_UART_Receive+0x40>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e07d      	b.n	80080ea <HAL_UART_Receive+0x13c>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2222      	movs	r2, #34	; 0x22
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800800a:	f7fb f96f 	bl	80032ec <HAL_GetTick>
 800800e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	88fa      	ldrh	r2, [r7, #6]
 800801a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008024:	d108      	bne.n	8008038 <HAL_UART_Receive+0x8a>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d104      	bne.n	8008038 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	61bb      	str	r3, [r7, #24]
 8008036:	e003      	b.n	8008040 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800803c:	2300      	movs	r3, #0
 800803e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008048:	e043      	b.n	80080d2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2200      	movs	r2, #0
 8008052:	2120      	movs	r1, #32
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 fb2b 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e042      	b.n	80080ea <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10c      	bne.n	8008084 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	b29a      	uxth	r2, r3
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	3302      	adds	r3, #2
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	e01f      	b.n	80080c4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808c:	d007      	beq.n	800809e <HAL_UART_Receive+0xf0>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <HAL_UART_Receive+0xfe>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	701a      	strb	r2, [r3, #0]
 80080aa:	e008      	b.n	80080be <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	3301      	adds	r3, #1
 80080c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1b6      	bne.n	800804a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e000      	b.n	80080ea <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3720      	adds	r7, #32
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	4613      	mov	r3, r2
 80080fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b20      	cmp	r3, #32
 800810a:	d11d      	bne.n	8008148 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_UART_Receive_IT+0x26>
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e016      	b.n	800814a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_UART_Receive_IT+0x38>
 8008126:	2302      	movs	r3, #2
 8008128:	e00f      	b.n	800814a <HAL_UART_Receive_IT+0x58>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	461a      	mov	r2, r3
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fb24 	bl	800878c <UART_Start_Receive_IT>
 8008144:	4603      	mov	r3, r0
 8008146:	e000      	b.n	800814a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008148:	2302      	movs	r3, #2
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b0ba      	sub	sp, #232	; 0xe8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800817a:	2300      	movs	r3, #0
 800817c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10f      	bne.n	80081ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800819a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <HAL_UART_IRQHandler+0x66>
 80081a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fc07 	bl	80089c6 <UART_Receive_IT>
      return;
 80081b8:	e256      	b.n	8008668 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 80de 	beq.w	8008380 <HAL_UART_IRQHandler+0x22c>
 80081c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 80d1 	beq.w	8008380 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <HAL_UART_IRQHandler+0xae>
 80081ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f043 0201 	orr.w	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <HAL_UART_IRQHandler+0xd2>
 800820e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f043 0202 	orr.w	r2, r3, #2
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <HAL_UART_IRQHandler+0xf6>
 8008232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	f043 0204 	orr.w	r2, r3, #4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d011      	beq.n	800827a <HAL_UART_IRQHandler+0x126>
 8008256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	f043 0208 	orr.w	r2, r3, #8
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 81ed 	beq.w	800865e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <HAL_UART_IRQHandler+0x14e>
 8008290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fb92 	bl	80089c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b40      	cmp	r3, #64	; 0x40
 80082ae:	bf0c      	ite	eq
 80082b0:	2301      	moveq	r3, #1
 80082b2:	2300      	movne	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <HAL_UART_IRQHandler+0x17a>
 80082c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d04f      	beq.n	800836e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa9a 	bl	8008808 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082de:	2b40      	cmp	r3, #64	; 0x40
 80082e0:	d141      	bne.n	8008366 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3314      	adds	r3, #20
 80082e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800830e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800831a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1d9      	bne.n	80082e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	2b00      	cmp	r3, #0
 8008334:	d013      	beq.n	800835e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	4a7d      	ldr	r2, [pc, #500]	; (8008530 <HAL_UART_IRQHandler+0x3dc>)
 800833c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	4618      	mov	r0, r3
 8008344:	f7fb fe0f 	bl	8003f66 <HAL_DMA_Abort_IT>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d016      	beq.n	800837c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	e00e      	b.n	800837c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f990 	bl	8008684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	e00a      	b.n	800837c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f98c 	bl	8008684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e006      	b.n	800837c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f988 	bl	8008684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800837a:	e170      	b.n	800865e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	bf00      	nop
    return;
 800837e:	e16e      	b.n	800865e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008384:	2b01      	cmp	r3, #1
 8008386:	f040 814a 	bne.w	800861e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 0310 	and.w	r3, r3, #16
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8143 	beq.w	800861e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 813c 	beq.w	800861e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083a6:	2300      	movs	r3, #0
 80083a8:	60bb      	str	r3, [r7, #8]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	f040 80b4 	bne.w	8008534 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8140 	beq.w	8008662 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ea:	429a      	cmp	r2, r3
 80083ec:	f080 8139 	bcs.w	8008662 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008402:	f000 8088 	beq.w	8008516 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	330c      	adds	r3, #12
 800840c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800841c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008432:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800843e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800844a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1d9      	bne.n	8008406 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3314      	adds	r3, #20
 8008458:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008464:	f023 0301 	bic.w	r3, r3, #1
 8008468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3314      	adds	r3, #20
 8008472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008476:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800847a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800847e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e1      	bne.n	8008452 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3314      	adds	r3, #20
 8008494:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800849e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3314      	adds	r3, #20
 80084ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e3      	bne.n	800848e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	330c      	adds	r3, #12
 80084f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80084fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e3      	bne.n	80084d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	4618      	mov	r0, r3
 8008512:	f7fb fcb8 	bl	8003e86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800851e:	b29b      	uxth	r3, r3
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	b29b      	uxth	r3, r3
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f8b6 	bl	8008698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800852c:	e099      	b.n	8008662 <HAL_UART_IRQHandler+0x50e>
 800852e:	bf00      	nop
 8008530:	080088cf 	.word	0x080088cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800853c:	b29b      	uxth	r3, r3
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 808b 	beq.w	8008666 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8086 	beq.w	8008666 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	330c      	adds	r3, #12
 8008560:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800856a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800857e:	647a      	str	r2, [r7, #68]	; 0x44
 8008580:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e3      	bne.n	800855a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3314      	adds	r3, #20
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	623b      	str	r3, [r7, #32]
   return(result);
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3314      	adds	r3, #20
 80085b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085b6:	633a      	str	r2, [r7, #48]	; 0x30
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e3      	bne.n	8008592 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	330c      	adds	r3, #12
 80085de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	e853 3f00 	ldrex	r3, [r3]
 80085e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0310 	bic.w	r3, r3, #16
 80085ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	330c      	adds	r3, #12
 80085f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085fc:	61fa      	str	r2, [r7, #28]
 80085fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	69b9      	ldr	r1, [r7, #24]
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	617b      	str	r3, [r7, #20]
   return(result);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e3      	bne.n	80085d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f83e 	bl	8008698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800861c:	e023      	b.n	8008666 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800861e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <HAL_UART_IRQHandler+0x4ea>
 800862a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f95d 	bl	80088f6 <UART_Transmit_IT>
    return;
 800863c:	e014      	b.n	8008668 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800863e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00e      	beq.n	8008668 <HAL_UART_IRQHandler+0x514>
 800864a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800864e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	d008      	beq.n	8008668 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f99d 	bl	8008996 <UART_EndTransmit_IT>
    return;
 800865c:	e004      	b.n	8008668 <HAL_UART_IRQHandler+0x514>
    return;
 800865e:	bf00      	nop
 8008660:	e002      	b.n	8008668 <HAL_UART_IRQHandler+0x514>
      return;
 8008662:	bf00      	nop
 8008664:	e000      	b.n	8008668 <HAL_UART_IRQHandler+0x514>
      return;
 8008666:	bf00      	nop
  }
}
 8008668:	37e8      	adds	r7, #232	; 0xe8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop

08008670 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b090      	sub	sp, #64	; 0x40
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c0:	e050      	b.n	8008764 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086c8:	d04c      	beq.n	8008764 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d007      	beq.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80086d0:	f7fa fe0c 	bl	80032ec <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086dc:	429a      	cmp	r2, r3
 80086de:	d241      	bcs.n	8008764 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008700:	637a      	str	r2, [r7, #52]	; 0x34
 8008702:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3314      	adds	r3, #20
 800871a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	613b      	str	r3, [r7, #16]
   return(result);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f023 0301 	bic.w	r3, r3, #1
 800872a:	63bb      	str	r3, [r7, #56]	; 0x38
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3314      	adds	r3, #20
 8008732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008734:	623a      	str	r2, [r7, #32]
 8008736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	69f9      	ldr	r1, [r7, #28]
 800873a:	6a3a      	ldr	r2, [r7, #32]
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	61bb      	str	r3, [r7, #24]
   return(result);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e5      	bne.n	8008714 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e00f      	b.n	8008784 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	4013      	ands	r3, r2
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	429a      	cmp	r2, r3
 8008780:	d09f      	beq.n	80086c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3740      	adds	r7, #64	; 0x40
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	88fa      	ldrh	r2, [r7, #6]
 80087a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	88fa      	ldrh	r2, [r7, #6]
 80087aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2222      	movs	r2, #34	; 0x22
 80087b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695a      	ldr	r2, [r3, #20]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0201 	orr.w	r2, r2, #1
 80087e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f042 0220 	orr.w	r2, r2, #32
 80087f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b095      	sub	sp, #84	; 0x54
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	330c      	adds	r3, #12
 8008816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	e853 3f00 	ldrex	r3, [r3]
 800881e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008830:	643a      	str	r2, [r7, #64]	; 0x40
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008838:	e841 2300 	strex	r3, r2, [r1]
 800883c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e5      	bne.n	8008810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3314      	adds	r3, #20
 800884a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	e853 3f00 	ldrex	r3, [r3]
 8008852:	61fb      	str	r3, [r7, #28]
   return(result);
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	f023 0301 	bic.w	r3, r3, #1
 800885a:	64bb      	str	r3, [r7, #72]	; 0x48
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3314      	adds	r3, #20
 8008862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800886a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800886c:	e841 2300 	strex	r3, r2, [r1]
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e5      	bne.n	8008844 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	2b01      	cmp	r3, #1
 800887e:	d119      	bne.n	80088b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f023 0310 	bic.w	r3, r3, #16
 8008896:	647b      	str	r3, [r7, #68]	; 0x44
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	330c      	adds	r3, #12
 800889e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088a0:	61ba      	str	r2, [r7, #24]
 80088a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6979      	ldr	r1, [r7, #20]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	613b      	str	r3, [r7, #16]
   return(result);
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e5      	bne.n	8008880 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088c2:	bf00      	nop
 80088c4:	3754      	adds	r7, #84	; 0x54
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f7ff fecb 	bl	8008684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b21      	cmp	r3, #33	; 0x21
 8008908:	d13e      	bne.n	8008988 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008912:	d114      	bne.n	800893e <UART_Transmit_IT+0x48>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d110      	bne.n	800893e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008930:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	1c9a      	adds	r2, r3, #2
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	621a      	str	r2, [r3, #32]
 800893c:	e008      	b.n	8008950 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	1c59      	adds	r1, r3, #1
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6211      	str	r1, [r2, #32]
 8008948:	781a      	ldrb	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29b      	uxth	r3, r3
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	4619      	mov	r1, r3
 800895e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10f      	bne.n	8008984 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008972:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008982:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	e000      	b.n	800898a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008988:	2302      	movs	r3, #2
  }
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff fe5a 	bl	8008670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b08c      	sub	sp, #48	; 0x30
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b22      	cmp	r3, #34	; 0x22
 80089d8:	f040 80ab 	bne.w	8008b32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e4:	d117      	bne.n	8008a16 <UART_Receive_IT+0x50>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d113      	bne.n	8008a16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	1c9a      	adds	r2, r3, #2
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	629a      	str	r2, [r3, #40]	; 0x28
 8008a14:	e026      	b.n	8008a64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a28:	d007      	beq.n	8008a3a <UART_Receive_IT+0x74>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <UART_Receive_IT+0x82>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	e008      	b.n	8008a5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	4619      	mov	r1, r3
 8008a72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d15a      	bne.n	8008b2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0220 	bic.w	r2, r2, #32
 8008a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695a      	ldr	r2, [r3, #20]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0201 	bic.w	r2, r2, #1
 8008aa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d135      	bne.n	8008b24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f023 0310 	bic.w	r3, r3, #16
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	330c      	adds	r3, #12
 8008adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ade:	623a      	str	r2, [r7, #32]
 8008ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	69f9      	ldr	r1, [r7, #28]
 8008ae4:	6a3a      	ldr	r2, [r7, #32]
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e5      	bne.n	8008abe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	2b10      	cmp	r3, #16
 8008afe:	d10a      	bne.n	8008b16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff fdbb 	bl	8008698 <HAL_UARTEx_RxEventCallback>
 8008b22:	e002      	b.n	8008b2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7f8 fb97 	bl	8001258 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e002      	b.n	8008b34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e000      	b.n	8008b34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b32:	2302      	movs	r3, #2
  }
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3730      	adds	r7, #48	; 0x30
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b40:	b0c0      	sub	sp, #256	; 0x100
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b58:	68d9      	ldr	r1, [r3, #12]
 8008b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	ea40 0301 	orr.w	r3, r0, r1
 8008b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b94:	f021 010c 	bic.w	r1, r1, #12
 8008b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb6:	6999      	ldr	r1, [r3, #24]
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	ea40 0301 	orr.w	r3, r0, r1
 8008bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	4b8f      	ldr	r3, [pc, #572]	; (8008e08 <UART_SetConfig+0x2cc>)
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d005      	beq.n	8008bdc <UART_SetConfig+0xa0>
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b8d      	ldr	r3, [pc, #564]	; (8008e0c <UART_SetConfig+0x2d0>)
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d104      	bne.n	8008be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bdc:	f7fd f8c0 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8008be0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008be4:	e003      	b.n	8008bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008be6:	f7fd f8a7 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8008bea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bf8:	f040 810c 	bne.w	8008e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c0e:	4622      	mov	r2, r4
 8008c10:	462b      	mov	r3, r5
 8008c12:	1891      	adds	r1, r2, r2
 8008c14:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c16:	415b      	adcs	r3, r3
 8008c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c1e:	4621      	mov	r1, r4
 8008c20:	eb12 0801 	adds.w	r8, r2, r1
 8008c24:	4629      	mov	r1, r5
 8008c26:	eb43 0901 	adc.w	r9, r3, r1
 8008c2a:	f04f 0200 	mov.w	r2, #0
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c3e:	4690      	mov	r8, r2
 8008c40:	4699      	mov	r9, r3
 8008c42:	4623      	mov	r3, r4
 8008c44:	eb18 0303 	adds.w	r3, r8, r3
 8008c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c4c:	462b      	mov	r3, r5
 8008c4e:	eb49 0303 	adc.w	r3, r9, r3
 8008c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	18db      	adds	r3, r3, r3
 8008c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c70:	4613      	mov	r3, r2
 8008c72:	eb42 0303 	adc.w	r3, r2, r3
 8008c76:	657b      	str	r3, [r7, #84]	; 0x54
 8008c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c80:	f7f8 f802 	bl	8000c88 <__aeabi_uldivmod>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4b61      	ldr	r3, [pc, #388]	; (8008e10 <UART_SetConfig+0x2d4>)
 8008c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	011c      	lsls	r4, r3, #4
 8008c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	1891      	adds	r1, r2, r2
 8008caa:	64b9      	str	r1, [r7, #72]	; 0x48
 8008cac:	415b      	adcs	r3, r3
 8008cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008cb4:	4641      	mov	r1, r8
 8008cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8008cba:	4649      	mov	r1, r9
 8008cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	f04f 0300 	mov.w	r3, #0
 8008cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cd4:	4692      	mov	sl, r2
 8008cd6:	469b      	mov	fp, r3
 8008cd8:	4643      	mov	r3, r8
 8008cda:	eb1a 0303 	adds.w	r3, sl, r3
 8008cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8008ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d00:	460b      	mov	r3, r1
 8008d02:	18db      	adds	r3, r3, r3
 8008d04:	643b      	str	r3, [r7, #64]	; 0x40
 8008d06:	4613      	mov	r3, r2
 8008d08:	eb42 0303 	adc.w	r3, r2, r3
 8008d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d16:	f7f7 ffb7 	bl	8000c88 <__aeabi_uldivmod>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4b3b      	ldr	r3, [pc, #236]	; (8008e10 <UART_SetConfig+0x2d4>)
 8008d22:	fba3 2301 	umull	r2, r3, r3, r1
 8008d26:	095b      	lsrs	r3, r3, #5
 8008d28:	2264      	movs	r2, #100	; 0x64
 8008d2a:	fb02 f303 	mul.w	r3, r2, r3
 8008d2e:	1acb      	subs	r3, r1, r3
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d36:	4b36      	ldr	r3, [pc, #216]	; (8008e10 <UART_SetConfig+0x2d4>)
 8008d38:	fba3 2302 	umull	r2, r3, r3, r2
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d44:	441c      	add	r4, r3
 8008d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d58:	4642      	mov	r2, r8
 8008d5a:	464b      	mov	r3, r9
 8008d5c:	1891      	adds	r1, r2, r2
 8008d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d60:	415b      	adcs	r3, r3
 8008d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d68:	4641      	mov	r1, r8
 8008d6a:	1851      	adds	r1, r2, r1
 8008d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8008d6e:	4649      	mov	r1, r9
 8008d70:	414b      	adcs	r3, r1
 8008d72:	637b      	str	r3, [r7, #52]	; 0x34
 8008d74:	f04f 0200 	mov.w	r2, #0
 8008d78:	f04f 0300 	mov.w	r3, #0
 8008d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d80:	4659      	mov	r1, fp
 8008d82:	00cb      	lsls	r3, r1, #3
 8008d84:	4651      	mov	r1, sl
 8008d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d8a:	4651      	mov	r1, sl
 8008d8c:	00ca      	lsls	r2, r1, #3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4619      	mov	r1, r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	4642      	mov	r2, r8
 8008d96:	189b      	adds	r3, r3, r2
 8008d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d9c:	464b      	mov	r3, r9
 8008d9e:	460a      	mov	r2, r1
 8008da0:	eb42 0303 	adc.w	r3, r2, r3
 8008da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008db4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	18db      	adds	r3, r3, r3
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	eb42 0303 	adc.w	r3, r2, r3
 8008dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dd2:	f7f7 ff59 	bl	8000c88 <__aeabi_uldivmod>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4b0d      	ldr	r3, [pc, #52]	; (8008e10 <UART_SetConfig+0x2d4>)
 8008ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	2164      	movs	r1, #100	; 0x64
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	3332      	adds	r3, #50	; 0x32
 8008dee:	4a08      	ldr	r2, [pc, #32]	; (8008e10 <UART_SetConfig+0x2d4>)
 8008df0:	fba2 2303 	umull	r2, r3, r2, r3
 8008df4:	095b      	lsrs	r3, r3, #5
 8008df6:	f003 0207 	and.w	r2, r3, #7
 8008dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4422      	add	r2, r4
 8008e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e04:	e105      	b.n	8009012 <UART_SetConfig+0x4d6>
 8008e06:	bf00      	nop
 8008e08:	40011000 	.word	0x40011000
 8008e0c:	40011400 	.word	0x40011400
 8008e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e26:	4642      	mov	r2, r8
 8008e28:	464b      	mov	r3, r9
 8008e2a:	1891      	adds	r1, r2, r2
 8008e2c:	6239      	str	r1, [r7, #32]
 8008e2e:	415b      	adcs	r3, r3
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
 8008e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e36:	4641      	mov	r1, r8
 8008e38:	1854      	adds	r4, r2, r1
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	eb43 0501 	adc.w	r5, r3, r1
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	00eb      	lsls	r3, r5, #3
 8008e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e4e:	00e2      	lsls	r2, r4, #3
 8008e50:	4614      	mov	r4, r2
 8008e52:	461d      	mov	r5, r3
 8008e54:	4643      	mov	r3, r8
 8008e56:	18e3      	adds	r3, r4, r3
 8008e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	eb45 0303 	adc.w	r3, r5, r3
 8008e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e76:	f04f 0200 	mov.w	r2, #0
 8008e7a:	f04f 0300 	mov.w	r3, #0
 8008e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e82:	4629      	mov	r1, r5
 8008e84:	008b      	lsls	r3, r1, #2
 8008e86:	4621      	mov	r1, r4
 8008e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	008a      	lsls	r2, r1, #2
 8008e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e94:	f7f7 fef8 	bl	8000c88 <__aeabi_uldivmod>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4b60      	ldr	r3, [pc, #384]	; (8009020 <UART_SetConfig+0x4e4>)
 8008e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	011c      	lsls	r4, r3, #4
 8008ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008eb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008eb8:	4642      	mov	r2, r8
 8008eba:	464b      	mov	r3, r9
 8008ebc:	1891      	adds	r1, r2, r2
 8008ebe:	61b9      	str	r1, [r7, #24]
 8008ec0:	415b      	adcs	r3, r3
 8008ec2:	61fb      	str	r3, [r7, #28]
 8008ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ec8:	4641      	mov	r1, r8
 8008eca:	1851      	adds	r1, r2, r1
 8008ecc:	6139      	str	r1, [r7, #16]
 8008ece:	4649      	mov	r1, r9
 8008ed0:	414b      	adcs	r3, r1
 8008ed2:	617b      	str	r3, [r7, #20]
 8008ed4:	f04f 0200 	mov.w	r2, #0
 8008ed8:	f04f 0300 	mov.w	r3, #0
 8008edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ee0:	4659      	mov	r1, fp
 8008ee2:	00cb      	lsls	r3, r1, #3
 8008ee4:	4651      	mov	r1, sl
 8008ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eea:	4651      	mov	r1, sl
 8008eec:	00ca      	lsls	r2, r1, #3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	189b      	adds	r3, r3, r2
 8008ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008efc:	464b      	mov	r3, r9
 8008efe:	460a      	mov	r2, r1
 8008f00:	eb42 0303 	adc.w	r3, r2, r3
 8008f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f14:	f04f 0200 	mov.w	r2, #0
 8008f18:	f04f 0300 	mov.w	r3, #0
 8008f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f20:	4649      	mov	r1, r9
 8008f22:	008b      	lsls	r3, r1, #2
 8008f24:	4641      	mov	r1, r8
 8008f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f2a:	4641      	mov	r1, r8
 8008f2c:	008a      	lsls	r2, r1, #2
 8008f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f32:	f7f7 fea9 	bl	8000c88 <__aeabi_uldivmod>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4b39      	ldr	r3, [pc, #228]	; (8009020 <UART_SetConfig+0x4e4>)
 8008f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f40:	095b      	lsrs	r3, r3, #5
 8008f42:	2164      	movs	r1, #100	; 0x64
 8008f44:	fb01 f303 	mul.w	r3, r1, r3
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	011b      	lsls	r3, r3, #4
 8008f4c:	3332      	adds	r3, #50	; 0x32
 8008f4e:	4a34      	ldr	r2, [pc, #208]	; (8009020 <UART_SetConfig+0x4e4>)
 8008f50:	fba2 2303 	umull	r2, r3, r2, r3
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f5a:	441c      	add	r4, r3
 8008f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f60:	2200      	movs	r2, #0
 8008f62:	673b      	str	r3, [r7, #112]	; 0x70
 8008f64:	677a      	str	r2, [r7, #116]	; 0x74
 8008f66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f6a:	4642      	mov	r2, r8
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	1891      	adds	r1, r2, r2
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	415b      	adcs	r3, r3
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f7a:	4641      	mov	r1, r8
 8008f7c:	1851      	adds	r1, r2, r1
 8008f7e:	6039      	str	r1, [r7, #0]
 8008f80:	4649      	mov	r1, r9
 8008f82:	414b      	adcs	r3, r1
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	f04f 0200 	mov.w	r2, #0
 8008f8a:	f04f 0300 	mov.w	r3, #0
 8008f8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f92:	4659      	mov	r1, fp
 8008f94:	00cb      	lsls	r3, r1, #3
 8008f96:	4651      	mov	r1, sl
 8008f98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f9c:	4651      	mov	r1, sl
 8008f9e:	00ca      	lsls	r2, r1, #3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	4642      	mov	r2, r8
 8008fa8:	189b      	adds	r3, r3, r2
 8008faa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fac:	464b      	mov	r3, r9
 8008fae:	460a      	mov	r2, r1
 8008fb0:	eb42 0303 	adc.w	r3, r2, r3
 8008fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8008fc0:	667a      	str	r2, [r7, #100]	; 0x64
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fce:	4649      	mov	r1, r9
 8008fd0:	008b      	lsls	r3, r1, #2
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fd8:	4641      	mov	r1, r8
 8008fda:	008a      	lsls	r2, r1, #2
 8008fdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fe0:	f7f7 fe52 	bl	8000c88 <__aeabi_uldivmod>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4b0d      	ldr	r3, [pc, #52]	; (8009020 <UART_SetConfig+0x4e4>)
 8008fea:	fba3 1302 	umull	r1, r3, r3, r2
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	2164      	movs	r1, #100	; 0x64
 8008ff2:	fb01 f303 	mul.w	r3, r1, r3
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	011b      	lsls	r3, r3, #4
 8008ffa:	3332      	adds	r3, #50	; 0x32
 8008ffc:	4a08      	ldr	r2, [pc, #32]	; (8009020 <UART_SetConfig+0x4e4>)
 8008ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	f003 020f 	and.w	r2, r3, #15
 8009008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4422      	add	r2, r4
 8009010:	609a      	str	r2, [r3, #8]
}
 8009012:	bf00      	nop
 8009014:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009018:	46bd      	mov	sp, r7
 800901a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800901e:	bf00      	nop
 8009020:	51eb851f 	.word	0x51eb851f

08009024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009024:	b084      	sub	sp, #16
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	f107 001c 	add.w	r0, r7, #28
 8009032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	2b01      	cmp	r3, #1
 800903a:	d122      	bne.n	8009082 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d105      	bne.n	8009076 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 fbe8 	bl	800a84c <USB_CoreReset>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]
 8009080:	e01a      	b.n	80090b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 fbdc 	bl	800a84c <USB_CoreReset>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	639a      	str	r2, [r3, #56]	; 0x38
 80090aa:	e005      	b.n	80090b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d10b      	bne.n	80090d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f043 0206 	orr.w	r2, r3, #6
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f043 0220 	orr.w	r2, r3, #32
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090e2:	b004      	add	sp, #16
 80090e4:	4770      	bx	lr
	...

080090e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d165      	bne.n	80091c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4a41      	ldr	r2, [pc, #260]	; (8009204 <USB_SetTurnaroundTime+0x11c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d906      	bls.n	8009112 <USB_SetTurnaroundTime+0x2a>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	4a40      	ldr	r2, [pc, #256]	; (8009208 <USB_SetTurnaroundTime+0x120>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d202      	bcs.n	8009112 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800910c:	230f      	movs	r3, #15
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	e062      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	4a3c      	ldr	r2, [pc, #240]	; (8009208 <USB_SetTurnaroundTime+0x120>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d306      	bcc.n	8009128 <USB_SetTurnaroundTime+0x40>
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	4a3b      	ldr	r2, [pc, #236]	; (800920c <USB_SetTurnaroundTime+0x124>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d202      	bcs.n	8009128 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009122:	230e      	movs	r3, #14
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e057      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4a38      	ldr	r2, [pc, #224]	; (800920c <USB_SetTurnaroundTime+0x124>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d306      	bcc.n	800913e <USB_SetTurnaroundTime+0x56>
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4a37      	ldr	r2, [pc, #220]	; (8009210 <USB_SetTurnaroundTime+0x128>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d202      	bcs.n	800913e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009138:	230d      	movs	r3, #13
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e04c      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	4a33      	ldr	r2, [pc, #204]	; (8009210 <USB_SetTurnaroundTime+0x128>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d306      	bcc.n	8009154 <USB_SetTurnaroundTime+0x6c>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4a32      	ldr	r2, [pc, #200]	; (8009214 <USB_SetTurnaroundTime+0x12c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d802      	bhi.n	8009154 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800914e:	230c      	movs	r3, #12
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	e041      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4a2f      	ldr	r2, [pc, #188]	; (8009214 <USB_SetTurnaroundTime+0x12c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d906      	bls.n	800916a <USB_SetTurnaroundTime+0x82>
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	4a2e      	ldr	r2, [pc, #184]	; (8009218 <USB_SetTurnaroundTime+0x130>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d802      	bhi.n	800916a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009164:	230b      	movs	r3, #11
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e036      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4a2a      	ldr	r2, [pc, #168]	; (8009218 <USB_SetTurnaroundTime+0x130>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d906      	bls.n	8009180 <USB_SetTurnaroundTime+0x98>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	4a29      	ldr	r2, [pc, #164]	; (800921c <USB_SetTurnaroundTime+0x134>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d802      	bhi.n	8009180 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800917a:	230a      	movs	r3, #10
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e02b      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4a26      	ldr	r2, [pc, #152]	; (800921c <USB_SetTurnaroundTime+0x134>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d906      	bls.n	8009196 <USB_SetTurnaroundTime+0xae>
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	4a25      	ldr	r2, [pc, #148]	; (8009220 <USB_SetTurnaroundTime+0x138>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d202      	bcs.n	8009196 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009190:	2309      	movs	r3, #9
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e020      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	4a21      	ldr	r2, [pc, #132]	; (8009220 <USB_SetTurnaroundTime+0x138>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d306      	bcc.n	80091ac <USB_SetTurnaroundTime+0xc4>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4a20      	ldr	r2, [pc, #128]	; (8009224 <USB_SetTurnaroundTime+0x13c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d802      	bhi.n	80091ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80091a6:	2308      	movs	r3, #8
 80091a8:	617b      	str	r3, [r7, #20]
 80091aa:	e015      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4a1d      	ldr	r2, [pc, #116]	; (8009224 <USB_SetTurnaroundTime+0x13c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d906      	bls.n	80091c2 <USB_SetTurnaroundTime+0xda>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	4a1c      	ldr	r2, [pc, #112]	; (8009228 <USB_SetTurnaroundTime+0x140>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d202      	bcs.n	80091c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80091bc:	2307      	movs	r3, #7
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	e00a      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80091c2:	2306      	movs	r3, #6
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	e007      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d102      	bne.n	80091d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80091ce:	2309      	movs	r3, #9
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e001      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80091d4:	2309      	movs	r3, #9
 80091d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	029b      	lsls	r3, r3, #10
 80091ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80091f0:	431a      	orrs	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	00d8acbf 	.word	0x00d8acbf
 8009208:	00e4e1c0 	.word	0x00e4e1c0
 800920c:	00f42400 	.word	0x00f42400
 8009210:	01067380 	.word	0x01067380
 8009214:	011a499f 	.word	0x011a499f
 8009218:	01312cff 	.word	0x01312cff
 800921c:	014ca43f 	.word	0x014ca43f
 8009220:	016e3600 	.word	0x016e3600
 8009224:	01a6ab1f 	.word	0x01a6ab1f
 8009228:	01e84800 	.word	0x01e84800

0800922c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f043 0201 	orr.w	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f023 0201 	bic.w	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d115      	bne.n	80092be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800929e:	2001      	movs	r0, #1
 80092a0:	f7fa f830 	bl	8003304 <HAL_Delay>
      ms++;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 fa3f 	bl	800a72e <USB_GetMode>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d01e      	beq.n	80092f4 <USB_SetCurrentMode+0x84>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b31      	cmp	r3, #49	; 0x31
 80092ba:	d9f0      	bls.n	800929e <USB_SetCurrentMode+0x2e>
 80092bc:	e01a      	b.n	80092f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d115      	bne.n	80092f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092d0:	2001      	movs	r0, #1
 80092d2:	f7fa f817 	bl	8003304 <HAL_Delay>
      ms++;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3301      	adds	r3, #1
 80092da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 fa26 	bl	800a72e <USB_GetMode>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d005      	beq.n	80092f4 <USB_SetCurrentMode+0x84>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b31      	cmp	r3, #49	; 0x31
 80092ec:	d9f0      	bls.n	80092d0 <USB_SetCurrentMode+0x60>
 80092ee:	e001      	b.n	80092f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e005      	b.n	8009300 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b32      	cmp	r3, #50	; 0x32
 80092f8:	d101      	bne.n	80092fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009308:	b084      	sub	sp, #16
 800930a:	b580      	push	{r7, lr}
 800930c:	b086      	sub	sp, #24
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009322:	2300      	movs	r3, #0
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	e009      	b.n	800933c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	3340      	adds	r3, #64	; 0x40
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	2200      	movs	r2, #0
 8009334:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	3301      	adds	r3, #1
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b0e      	cmp	r3, #14
 8009340:	d9f2      	bls.n	8009328 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d11c      	bne.n	8009382 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009356:	f043 0302 	orr.w	r3, r3, #2
 800935a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	e005      	b.n	800938e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009394:	461a      	mov	r2, r3
 8009396:	2300      	movs	r3, #0
 8009398:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a0:	4619      	mov	r1, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a8:	461a      	mov	r2, r3
 80093aa:	680b      	ldr	r3, [r1, #0]
 80093ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d10c      	bne.n	80093ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80093b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d104      	bne.n	80093c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80093ba:	2100      	movs	r1, #0
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f965 	bl	800968c <USB_SetDevSpeed>
 80093c2:	e008      	b.n	80093d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80093c4:	2101      	movs	r1, #1
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f960 	bl	800968c <USB_SetDevSpeed>
 80093cc:	e003      	b.n	80093d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80093ce:	2103      	movs	r1, #3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f95b 	bl	800968c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80093d6:	2110      	movs	r1, #16
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f8f3 	bl	80095c4 <USB_FlushTxFifo>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f91f 	bl	800962c <USB_FlushRxFifo>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fe:	461a      	mov	r2, r3
 8009400:	2300      	movs	r3, #0
 8009402:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800940a:	461a      	mov	r2, r3
 800940c:	2300      	movs	r3, #0
 800940e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009416:	461a      	mov	r2, r3
 8009418:	2300      	movs	r3, #0
 800941a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800941c:	2300      	movs	r3, #0
 800941e:	613b      	str	r3, [r7, #16]
 8009420:	e043      	b.n	80094aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	4413      	add	r3, r2
 800942a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009438:	d118      	bne.n	800946c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944c:	461a      	mov	r2, r3
 800944e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009452:	6013      	str	r3, [r2, #0]
 8009454:	e013      	b.n	800947e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009462:	461a      	mov	r2, r3
 8009464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	e008      	b.n	800947e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009478:	461a      	mov	r2, r3
 800947a:	2300      	movs	r3, #0
 800947c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948a:	461a      	mov	r2, r3
 800948c:	2300      	movs	r3, #0
 800948e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949c:	461a      	mov	r2, r3
 800949e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	3301      	adds	r3, #1
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d3b7      	bcc.n	8009422 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094b2:	2300      	movs	r3, #0
 80094b4:	613b      	str	r3, [r7, #16]
 80094b6:	e043      	b.n	8009540 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094ce:	d118      	bne.n	8009502 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10a      	bne.n	80094ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e2:	461a      	mov	r2, r3
 80094e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	e013      	b.n	8009514 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f8:	461a      	mov	r2, r3
 80094fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	e008      	b.n	8009514 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950e:	461a      	mov	r2, r3
 8009510:	2300      	movs	r3, #0
 8009512:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009520:	461a      	mov	r2, r3
 8009522:	2300      	movs	r3, #0
 8009524:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	461a      	mov	r2, r3
 8009534:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009538:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	3301      	adds	r3, #1
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	429a      	cmp	r2, r3
 8009546:	d3b7      	bcc.n	80094b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800955a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009568:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	2b00      	cmp	r3, #0
 800956e:	d105      	bne.n	800957c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	f043 0210 	orr.w	r2, r3, #16
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	699a      	ldr	r2, [r3, #24]
 8009580:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <USB_DevInit+0x2b8>)
 8009582:	4313      	orrs	r3, r2
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f043 0208 	orr.w	r2, r3, #8
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800959a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d107      	bne.n	80095b0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a8:	f043 0304 	orr.w	r3, r3, #4
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095bc:	b004      	add	sp, #16
 80095be:	4770      	bx	lr
 80095c0:	803c3800 	.word	0x803c3800

080095c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4a13      	ldr	r2, [pc, #76]	; (8009628 <USB_FlushTxFifo+0x64>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d901      	bls.n	80095e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e01b      	b.n	800961c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	daf2      	bge.n	80095d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	019b      	lsls	r3, r3, #6
 80095f4:	f043 0220 	orr.w	r2, r3, #32
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3301      	adds	r3, #1
 8009600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4a08      	ldr	r2, [pc, #32]	; (8009628 <USB_FlushTxFifo+0x64>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d901      	bls.n	800960e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e006      	b.n	800961c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b20      	cmp	r3, #32
 8009618:	d0f0      	beq.n	80095fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	00030d40 	.word	0x00030d40

0800962c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4a11      	ldr	r2, [pc, #68]	; (8009688 <USB_FlushRxFifo+0x5c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d901      	bls.n	800964a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e018      	b.n	800967c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	daf2      	bge.n	8009638 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2210      	movs	r2, #16
 800965a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3301      	adds	r3, #1
 8009660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	4a08      	ldr	r2, [pc, #32]	; (8009688 <USB_FlushRxFifo+0x5c>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d901      	bls.n	800966e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e006      	b.n	800967c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	2b10      	cmp	r3, #16
 8009678:	d0f0      	beq.n	800965c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	00030d40 	.word	0x00030d40

0800968c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096ac:	4313      	orrs	r3, r2
 80096ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80096be:	b480      	push	{r7}
 80096c0:	b087      	sub	sp, #28
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f003 0306 	and.w	r3, r3, #6
 80096d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80096de:	2300      	movs	r3, #0
 80096e0:	75fb      	strb	r3, [r7, #23]
 80096e2:	e00a      	b.n	80096fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d002      	beq.n	80096f0 <USB_GetDevSpeed+0x32>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b06      	cmp	r3, #6
 80096ee:	d102      	bne.n	80096f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80096f0:	2302      	movs	r3, #2
 80096f2:	75fb      	strb	r3, [r7, #23]
 80096f4:	e001      	b.n	80096fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80096f6:	230f      	movs	r3, #15
 80096f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	785b      	ldrb	r3, [r3, #1]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d13a      	bne.n	800979a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800972a:	69da      	ldr	r2, [r3, #28]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	f003 030f 	and.w	r3, r3, #15
 8009734:	2101      	movs	r1, #1
 8009736:	fa01 f303 	lsl.w	r3, r1, r3
 800973a:	b29b      	uxth	r3, r3
 800973c:	68f9      	ldr	r1, [r7, #12]
 800973e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009742:	4313      	orrs	r3, r2
 8009744:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	4413      	add	r3, r2
 800974e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d155      	bne.n	8009808 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	791b      	ldrb	r3, [r3, #4]
 8009776:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009778:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	059b      	lsls	r3, r3, #22
 800977e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009780:	4313      	orrs	r3, r2
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	0151      	lsls	r1, r2, #5
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	440a      	add	r2, r1
 800978a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	e036      	b.n	8009808 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a0:	69da      	ldr	r2, [r3, #28]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	f003 030f 	and.w	r3, r3, #15
 80097aa:	2101      	movs	r1, #1
 80097ac:	fa01 f303 	lsl.w	r3, r1, r3
 80097b0:	041b      	lsls	r3, r3, #16
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097b8:	4313      	orrs	r3, r2
 80097ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d11a      	bne.n	8009808 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	791b      	ldrb	r3, [r3, #4]
 80097ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097ee:	430b      	orrs	r3, r1
 80097f0:	4313      	orrs	r3, r2
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009806:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
	...

08009818 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d161      	bne.n	80098f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800984a:	d11f      	bne.n	800988c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800986a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800988a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	2101      	movs	r1, #1
 800989e:	fa01 f303 	lsl.w	r3, r1, r3
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	43db      	mvns	r3, r3
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ac:	4013      	ands	r3, r2
 80098ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b6:	69da      	ldr	r2, [r3, #28]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	f003 030f 	and.w	r3, r3, #15
 80098c0:	2101      	movs	r1, #1
 80098c2:	fa01 f303 	lsl.w	r3, r1, r3
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	43db      	mvns	r3, r3
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098d0:	4013      	ands	r3, r2
 80098d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	0159      	lsls	r1, r3, #5
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	440b      	add	r3, r1
 80098ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ee:	4619      	mov	r1, r3
 80098f0:	4b35      	ldr	r3, [pc, #212]	; (80099c8 <USB_DeactivateEndpoint+0x1b0>)
 80098f2:	4013      	ands	r3, r2
 80098f4:	600b      	str	r3, [r1, #0]
 80098f6:	e060      	b.n	80099ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800990a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800990e:	d11f      	bne.n	8009950 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	440a      	add	r2, r1
 8009926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800992a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800992e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	0151      	lsls	r1, r2, #5
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	440a      	add	r2, r1
 8009946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800994a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800994e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	2101      	movs	r1, #1
 8009962:	fa01 f303 	lsl.w	r3, r1, r3
 8009966:	041b      	lsls	r3, r3, #16
 8009968:	43db      	mvns	r3, r3
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009970:	4013      	ands	r3, r2
 8009972:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997a:	69da      	ldr	r2, [r3, #28]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f003 030f 	and.w	r3, r3, #15
 8009984:	2101      	movs	r1, #1
 8009986:	fa01 f303 	lsl.w	r3, r1, r3
 800998a:	041b      	lsls	r3, r3, #16
 800998c:	43db      	mvns	r3, r3
 800998e:	68f9      	ldr	r1, [r7, #12]
 8009990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009994:	4013      	ands	r3, r2
 8009996:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	0159      	lsls	r1, r3, #5
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	440b      	add	r3, r1
 80099ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b2:	4619      	mov	r1, r3
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <USB_DeactivateEndpoint+0x1b4>)
 80099b6:	4013      	ands	r3, r2
 80099b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	ec337800 	.word	0xec337800
 80099cc:	eff37800 	.word	0xeff37800

080099d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b08a      	sub	sp, #40	; 0x28
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	4613      	mov	r3, r2
 80099dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	785b      	ldrb	r3, [r3, #1]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	f040 815c 	bne.w	8009caa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d132      	bne.n	8009a60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	69fa      	ldr	r2, [r7, #28]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	69ba      	ldr	r2, [r7, #24]
 8009a4e:	0151      	lsls	r1, r2, #5
 8009a50:	69fa      	ldr	r2, [r7, #28]
 8009a52:	440a      	add	r2, r1
 8009a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a58:	0cdb      	lsrs	r3, r3, #19
 8009a5a:	04db      	lsls	r3, r3, #19
 8009a5c:	6113      	str	r3, [r2, #16]
 8009a5e:	e074      	b.n	8009b4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a7a:	0cdb      	lsrs	r3, r3, #19
 8009a7c:	04db      	lsls	r3, r3, #19
 8009a7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	69ba      	ldr	r2, [r7, #24]
 8009a90:	0151      	lsls	r1, r2, #5
 8009a92:	69fa      	ldr	r2, [r7, #28]
 8009a94:	440a      	add	r2, r1
 8009a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009aa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6999      	ldr	r1, [r3, #24]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	440b      	add	r3, r1
 8009abc:	1e59      	subs	r1, r3, #1
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ac6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ac8:	4b9d      	ldr	r3, [pc, #628]	; (8009d40 <USB_EPStartXfer+0x370>)
 8009aca:	400b      	ands	r3, r1
 8009acc:	69b9      	ldr	r1, [r7, #24]
 8009ace:	0148      	lsls	r0, r1, #5
 8009ad0:	69f9      	ldr	r1, [r7, #28]
 8009ad2:	4401      	add	r1, r0
 8009ad4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae8:	691a      	ldr	r2, [r3, #16]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009af2:	69b9      	ldr	r1, [r7, #24]
 8009af4:	0148      	lsls	r0, r1, #5
 8009af6:	69f9      	ldr	r1, [r7, #28]
 8009af8:	4401      	add	r1, r0
 8009afa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009afe:	4313      	orrs	r3, r2
 8009b00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	791b      	ldrb	r3, [r3, #4]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d11f      	bne.n	8009b4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	69ba      	ldr	r2, [r7, #24]
 8009b1a:	0151      	lsls	r1, r2, #5
 8009b1c:	69fa      	ldr	r2, [r7, #28]
 8009b1e:	440a      	add	r2, r1
 8009b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009b28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	0151      	lsls	r1, r2, #5
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	440a      	add	r2, r1
 8009b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d14b      	bne.n	8009be8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	695b      	ldr	r3, [r3, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d009      	beq.n	8009b6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b64:	461a      	mov	r2, r3
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	791b      	ldrb	r3, [r3, #4]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d128      	bne.n	8009bc6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d110      	bne.n	8009ba6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	0151      	lsls	r1, r2, #5
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	440a      	add	r2, r1
 8009b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ba2:	6013      	str	r3, [r2, #0]
 8009ba4:	e00f      	b.n	8009bc6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	0151      	lsls	r1, r2, #5
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	440a      	add	r2, r1
 8009bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	0151      	lsls	r1, r2, #5
 8009bd8:	69fa      	ldr	r2, [r7, #28]
 8009bda:	440a      	add	r2, r1
 8009bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009be0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	e133      	b.n	8009e50 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	0151      	lsls	r1, r2, #5
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	440a      	add	r2, r1
 8009bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	791b      	ldrb	r3, [r3, #4]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d015      	beq.n	8009c3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 811b 	beq.w	8009e50 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 030f 	and.w	r3, r3, #15
 8009c2a:	2101      	movs	r1, #1
 8009c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c30:	69f9      	ldr	r1, [r7, #28]
 8009c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c36:	4313      	orrs	r3, r2
 8009c38:	634b      	str	r3, [r1, #52]	; 0x34
 8009c3a:	e109      	b.n	8009e50 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d110      	bne.n	8009c6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	0151      	lsls	r1, r2, #5
 8009c5e:	69fa      	ldr	r2, [r7, #28]
 8009c60:	440a      	add	r2, r1
 8009c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c6a:	6013      	str	r3, [r2, #0]
 8009c6c:	e00f      	b.n	8009c8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	015a      	lsls	r2, r3, #5
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	4413      	add	r3, r2
 8009c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	0151      	lsls	r1, r2, #5
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	440a      	add	r2, r1
 8009c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6919      	ldr	r1, [r3, #16]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	b298      	uxth	r0, r3
 8009c9c:	79fb      	ldrb	r3, [r7, #7]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 fade 	bl	800a264 <USB_WritePacket>
 8009ca8:	e0d2      	b.n	8009e50 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	69ba      	ldr	r2, [r7, #24]
 8009cba:	0151      	lsls	r1, r2, #5
 8009cbc:	69fa      	ldr	r2, [r7, #28]
 8009cbe:	440a      	add	r2, r1
 8009cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cc4:	0cdb      	lsrs	r3, r3, #19
 8009cc6:	04db      	lsls	r3, r3, #19
 8009cc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	0151      	lsls	r1, r2, #5
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	440a      	add	r2, r1
 8009ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ce4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ce8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d126      	bne.n	8009d44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d02:	691a      	ldr	r2, [r3, #16]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d0c:	69b9      	ldr	r1, [r7, #24]
 8009d0e:	0148      	lsls	r0, r1, #5
 8009d10:	69f9      	ldr	r1, [r7, #28]
 8009d12:	4401      	add	r1, r0
 8009d14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	0151      	lsls	r1, r2, #5
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	440a      	add	r2, r1
 8009d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d3a:	6113      	str	r3, [r2, #16]
 8009d3c:	e03a      	b.n	8009db4 <USB_EPStartXfer+0x3e4>
 8009d3e:	bf00      	nop
 8009d40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	699a      	ldr	r2, [r3, #24]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	1e5a      	subs	r2, r3, #1
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d58:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	8afa      	ldrh	r2, [r7, #22]
 8009d60:	fb03 f202 	mul.w	r2, r3, r2
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	8afb      	ldrh	r3, [r7, #22]
 8009d78:	04d9      	lsls	r1, r3, #19
 8009d7a:	4b38      	ldr	r3, [pc, #224]	; (8009e5c <USB_EPStartXfer+0x48c>)
 8009d7c:	400b      	ands	r3, r1
 8009d7e:	69b9      	ldr	r1, [r7, #24]
 8009d80:	0148      	lsls	r0, r1, #5
 8009d82:	69f9      	ldr	r1, [r7, #28]
 8009d84:	4401      	add	r1, r0
 8009d86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009da4:	69b9      	ldr	r1, [r7, #24]
 8009da6:	0148      	lsls	r0, r1, #5
 8009da8:	69f9      	ldr	r1, [r7, #28]
 8009daa:	4401      	add	r1, r0
 8009dac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009db0:	4313      	orrs	r3, r2
 8009db2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d10d      	bne.n	8009dd6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d009      	beq.n	8009dd6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6919      	ldr	r1, [r3, #16]
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd2:	460a      	mov	r2, r1
 8009dd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	791b      	ldrb	r3, [r3, #4]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d128      	bne.n	8009e30 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d110      	bne.n	8009e10 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	0151      	lsls	r1, r2, #5
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	440a      	add	r2, r1
 8009e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	e00f      	b.n	8009e30 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	0151      	lsls	r1, r2, #5
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	440a      	add	r2, r1
 8009e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	0151      	lsls	r1, r2, #5
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	440a      	add	r2, r1
 8009e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3720      	adds	r7, #32
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	1ff80000 	.word	0x1ff80000

08009e60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	f040 80ce 	bne.w	800a01e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d132      	bne.n	8009ef0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	0151      	lsls	r1, r2, #5
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	440a      	add	r2, r1
 8009ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ea8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009eac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	0151      	lsls	r1, r2, #5
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	440a      	add	r2, r1
 8009ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ecc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	0151      	lsls	r1, r2, #5
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	440a      	add	r2, r1
 8009ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee8:	0cdb      	lsrs	r3, r3, #19
 8009eea:	04db      	lsls	r3, r3, #19
 8009eec:	6113      	str	r3, [r2, #16]
 8009eee:	e04e      	b.n	8009f8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	0151      	lsls	r1, r2, #5
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	440a      	add	r2, r1
 8009f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f0a:	0cdb      	lsrs	r3, r3, #19
 8009f0c:	04db      	lsls	r3, r3, #19
 8009f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	699a      	ldr	r2, [r3, #24]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d903      	bls.n	8009f48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	0151      	lsls	r1, r2, #5
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f74:	691a      	ldr	r2, [r3, #16]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f7e:	6939      	ldr	r1, [r7, #16]
 8009f80:	0148      	lsls	r0, r1, #5
 8009f82:	6979      	ldr	r1, [r7, #20]
 8009f84:	4401      	add	r1, r0
 8009f86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d11e      	bne.n	8009fd2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d009      	beq.n	8009fb0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	461a      	mov	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	0151      	lsls	r1, r2, #5
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	440a      	add	r2, r1
 8009fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	e097      	b.n	800a102 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ff0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 8083 	beq.w	800a102 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	f003 030f 	and.w	r3, r3, #15
 800a00c:	2101      	movs	r1, #1
 800a00e:	fa01 f303 	lsl.w	r3, r1, r3
 800a012:	6979      	ldr	r1, [r7, #20]
 800a014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a018:	4313      	orrs	r3, r2
 800a01a:	634b      	str	r3, [r1, #52]	; 0x34
 800a01c:	e071      	b.n	800a102 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	4413      	add	r3, r2
 800a026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	0151      	lsls	r1, r2, #5
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	440a      	add	r2, r1
 800a034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a038:	0cdb      	lsrs	r3, r3, #19
 800a03a:	04db      	lsls	r3, r3, #19
 800a03c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	4413      	add	r3, r2
 800a046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	0151      	lsls	r1, r2, #5
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	440a      	add	r2, r1
 800a054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a058:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a05c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a060:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	015a      	lsls	r2, r3, #5
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	4413      	add	r3, r2
 800a082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	0151      	lsls	r1, r2, #5
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	440a      	add	r2, r1
 800a090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a6:	691a      	ldr	r2, [r3, #16]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0b0:	6939      	ldr	r1, [r7, #16]
 800a0b2:	0148      	lsls	r0, r1, #5
 800a0b4:	6979      	ldr	r1, [r7, #20]
 800a0b6:	4401      	add	r1, r0
 800a0b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d10d      	bne.n	800a0e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d009      	beq.n	800a0e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	6919      	ldr	r1, [r3, #16]
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	015a      	lsls	r2, r3, #5
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	4413      	add	r3, r2
 800a0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0de:	460a      	mov	r2, r1
 800a0e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	0151      	lsls	r1, r2, #5
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	440a      	add	r2, r1
 800a0f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a100:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	371c      	adds	r7, #28
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d14a      	bne.n	800a1c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a146:	f040 8086 	bne.w	800a256 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a168:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a16c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	7812      	ldrb	r2, [r2, #0]
 800a182:	0151      	lsls	r1, r2, #5
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	440a      	add	r2, r1
 800a188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a18c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a190:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d902      	bls.n	800a1a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a1a6:	e056      	b.n	800a256 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1c0:	d0e7      	beq.n	800a192 <USB_EPStopXfer+0x82>
 800a1c2:	e048      	b.n	800a256 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1dc:	d13b      	bne.n	800a256 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	7812      	ldrb	r2, [r2, #0]
 800a1f2:	0151      	lsls	r1, r2, #5
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	440a      	add	r2, r1
 800a1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a200:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	7812      	ldrb	r2, [r2, #0]
 800a216:	0151      	lsls	r1, r2, #5
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	440a      	add	r2, r1
 800a21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a224:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3301      	adds	r3, #1
 800a22a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a232:	4293      	cmp	r3, r2
 800a234:	d902      	bls.n	800a23c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	75fb      	strb	r3, [r7, #23]
          break;
 800a23a:	e00c      	b.n	800a256 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a254:	d0e7      	beq.n	800a226 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	371c      	adds	r7, #28
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a264:	b480      	push	{r7}
 800a266:	b089      	sub	sp, #36	; 0x24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4611      	mov	r1, r2
 800a270:	461a      	mov	r2, r3
 800a272:	460b      	mov	r3, r1
 800a274:	71fb      	strb	r3, [r7, #7]
 800a276:	4613      	mov	r3, r2
 800a278:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a282:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a286:	2b00      	cmp	r3, #0
 800a288:	d123      	bne.n	800a2d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a28a:	88bb      	ldrh	r3, [r7, #4]
 800a28c:	3303      	adds	r3, #3
 800a28e:	089b      	lsrs	r3, r3, #2
 800a290:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a292:	2300      	movs	r3, #0
 800a294:	61bb      	str	r3, [r7, #24]
 800a296:	e018      	b.n	800a2ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	031a      	lsls	r2, r3, #12
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	61bb      	str	r3, [r7, #24]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d3e2      	bcc.n	800a298 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3724      	adds	r7, #36	; 0x24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b08b      	sub	sp, #44	; 0x2c
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a2f6:	88fb      	ldrh	r3, [r7, #6]
 800a2f8:	089b      	lsrs	r3, r3, #2
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	f003 0303 	and.w	r3, r3, #3
 800a304:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a306:	2300      	movs	r3, #0
 800a308:	623b      	str	r3, [r7, #32]
 800a30a:	e014      	b.n	800a336 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	601a      	str	r2, [r3, #0]
    pDest++;
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	3301      	adds	r3, #1
 800a31c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	3301      	adds	r3, #1
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	3301      	adds	r3, #1
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	3301      	adds	r3, #1
 800a32e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a330:	6a3b      	ldr	r3, [r7, #32]
 800a332:	3301      	adds	r3, #1
 800a334:	623b      	str	r3, [r7, #32]
 800a336:	6a3a      	ldr	r2, [r7, #32]
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d3e6      	bcc.n	800a30c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a33e:	8bfb      	ldrh	r3, [r7, #30]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d01e      	beq.n	800a382 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a34e:	461a      	mov	r2, r3
 800a350:	f107 0310 	add.w	r3, r7, #16
 800a354:	6812      	ldr	r2, [r2, #0]
 800a356:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	fa22 f303 	lsr.w	r3, r2, r3
 800a364:	b2da      	uxtb	r2, r3
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	701a      	strb	r2, [r3, #0]
      i++;
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	3301      	adds	r3, #1
 800a36e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	3301      	adds	r3, #1
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a376:	8bfb      	ldrh	r3, [r7, #30]
 800a378:	3b01      	subs	r3, #1
 800a37a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a37c:	8bfb      	ldrh	r3, [r7, #30]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1ea      	bne.n	800a358 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a384:	4618      	mov	r0, r3
 800a386:	372c      	adds	r7, #44	; 0x2c
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d12c      	bne.n	800a406 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	db12      	blt.n	800a3e4 <USB_EPSetStall+0x54>
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00f      	beq.n	800a3e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	0151      	lsls	r1, r2, #5
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	440a      	add	r2, r1
 800a3da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	e02b      	b.n	800a45e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	db12      	blt.n	800a43e <USB_EPSetStall+0xae>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00f      	beq.n	800a43e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	4413      	add	r3, r2
 800a426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	0151      	lsls	r1, r2, #5
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	440a      	add	r2, r1
 800a434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a438:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a43c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	0151      	lsls	r1, r2, #5
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	440a      	add	r2, r1
 800a454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a45c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	785b      	ldrb	r3, [r3, #1]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d128      	bne.n	800a4da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	0151      	lsls	r1, r2, #5
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	440a      	add	r2, r1
 800a49e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	791b      	ldrb	r3, [r3, #4]
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d003      	beq.n	800a4b8 <USB_EPClearStall+0x4c>
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	791b      	ldrb	r3, [r3, #4]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d138      	bne.n	800a52a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	0151      	lsls	r1, r2, #5
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	440a      	add	r2, r1
 800a4ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4d6:	6013      	str	r3, [r2, #0]
 800a4d8:	e027      	b.n	800a52a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	0151      	lsls	r1, r2, #5
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	440a      	add	r2, r1
 800a4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	791b      	ldrb	r3, [r3, #4]
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d003      	beq.n	800a50a <USB_EPClearStall+0x9e>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	791b      	ldrb	r3, [r3, #4]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d10f      	bne.n	800a52a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	4413      	add	r3, r2
 800a512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	0151      	lsls	r1, r2, #5
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	440a      	add	r2, r1
 800a520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a528:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a556:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a55a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a56c:	68f9      	ldr	r1, [r7, #12]
 800a56e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a572:	4313      	orrs	r3, r2
 800a574:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a59e:	f023 0303 	bic.w	r3, r3, #3
 800a5a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5b2:	f023 0302 	bic.w	r3, r3, #2
 800a5b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b085      	sub	sp, #20
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5e0:	f023 0303 	bic.w	r3, r3, #3
 800a5e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5f4:	f043 0302 	orr.w	r3, r3, #2
 800a5f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	4013      	ands	r3, r2
 800a61e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a620:	68fb      	ldr	r3, [r7, #12]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a62e:	b480      	push	{r7}
 800a630:	b085      	sub	sp, #20
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	4013      	ands	r3, r2
 800a650:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	0c1b      	lsrs	r3, r3, #16
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a662:	b480      	push	{r7}
 800a664:	b085      	sub	sp, #20
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	4013      	ands	r3, r2
 800a684:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	b29b      	uxth	r3, r3
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a6a6:	78fb      	ldrb	r3, [r7, #3]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b087      	sub	sp, #28
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a6f6:	78fb      	ldrb	r3, [r7, #3]
 800a6f8:	f003 030f 	and.w	r3, r3, #15
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a702:	01db      	lsls	r3, r3, #7
 800a704:	b2db      	uxtb	r3, r3
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	4313      	orrs	r3, r2
 800a70a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	4013      	ands	r3, r2
 800a71e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a720:	68bb      	ldr	r3, [r7, #8]
}
 800a722:	4618      	mov	r0, r3
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	f003 0301 	and.w	r3, r3, #1
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b085      	sub	sp, #20
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a764:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a768:	f023 0307 	bic.w	r3, r3, #7
 800a76c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a77c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a780:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	460b      	mov	r3, r1
 800a79a:	607a      	str	r2, [r7, #4]
 800a79c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	333c      	adds	r3, #60	; 0x3c
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	4a26      	ldr	r2, [pc, #152]	; (800a848 <USB_EP0_OutStart+0xb8>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d90a      	bls.n	800a7ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7c4:	d101      	bne.n	800a7ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e037      	b.n	800a83a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f8:	f043 0318 	orr.w	r3, r3, #24
 800a7fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a80c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a810:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d10f      	bne.n	800a838 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a81e:	461a      	mov	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a832:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	371c      	adds	r7, #28
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	4f54300a 	.word	0x4f54300a

0800a84c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3301      	adds	r3, #1
 800a85c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4a13      	ldr	r2, [pc, #76]	; (800a8b0 <USB_CoreReset+0x64>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d901      	bls.n	800a86a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e01b      	b.n	800a8a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	daf2      	bge.n	800a858 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	f043 0201 	orr.w	r2, r3, #1
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3301      	adds	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	4a09      	ldr	r2, [pc, #36]	; (800a8b0 <USB_CoreReset+0x64>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d901      	bls.n	800a894 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a890:	2303      	movs	r3, #3
 800a892:	e006      	b.n	800a8a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d0f0      	beq.n	800a882 <USB_CoreReset+0x36>

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	00030d40 	.word	0x00030d40

0800a8b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a8c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a8c4:	f002 fd74 	bl	800d3b0 <USBD_static_malloc>
 800a8c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d109      	bne.n	800a8e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	32b0      	adds	r2, #176	; 0xb0
 800a8da:	2100      	movs	r1, #0
 800a8dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	e0d4      	b.n	800aa8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a8e4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f002 fddc 	bl	800d4a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32b0      	adds	r2, #176	; 0xb0
 800a8fa:	68f9      	ldr	r1, [r7, #12]
 800a8fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	32b0      	adds	r2, #176	; 0xb0
 800a90a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	7c1b      	ldrb	r3, [r3, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d138      	bne.n	800a98e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a91c:	4b5e      	ldr	r3, [pc, #376]	; (800aa98 <USBD_CDC_Init+0x1e4>)
 800a91e:	7819      	ldrb	r1, [r3, #0]
 800a920:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a924:	2202      	movs	r2, #2
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f002 fbd1 	bl	800d0ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a92c:	4b5a      	ldr	r3, [pc, #360]	; (800aa98 <USBD_CDC_Init+0x1e4>)
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f003 020f 	and.w	r2, r3, #15
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	4613      	mov	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	440b      	add	r3, r1
 800a940:	3324      	adds	r3, #36	; 0x24
 800a942:	2201      	movs	r2, #1
 800a944:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a946:	4b55      	ldr	r3, [pc, #340]	; (800aa9c <USBD_CDC_Init+0x1e8>)
 800a948:	7819      	ldrb	r1, [r3, #0]
 800a94a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a94e:	2202      	movs	r2, #2
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f002 fbbc 	bl	800d0ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a956:	4b51      	ldr	r3, [pc, #324]	; (800aa9c <USBD_CDC_Init+0x1e8>)
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	f003 020f 	and.w	r2, r3, #15
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	4613      	mov	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	440b      	add	r3, r1
 800a96a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a96e:	2201      	movs	r2, #1
 800a970:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a972:	4b4b      	ldr	r3, [pc, #300]	; (800aaa0 <USBD_CDC_Init+0x1ec>)
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	f003 020f 	and.w	r2, r3, #15
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	4613      	mov	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	440b      	add	r3, r1
 800a986:	3326      	adds	r3, #38	; 0x26
 800a988:	2210      	movs	r2, #16
 800a98a:	801a      	strh	r2, [r3, #0]
 800a98c:	e035      	b.n	800a9fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a98e:	4b42      	ldr	r3, [pc, #264]	; (800aa98 <USBD_CDC_Init+0x1e4>)
 800a990:	7819      	ldrb	r1, [r3, #0]
 800a992:	2340      	movs	r3, #64	; 0x40
 800a994:	2202      	movs	r2, #2
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f002 fb99 	bl	800d0ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a99c:	4b3e      	ldr	r3, [pc, #248]	; (800aa98 <USBD_CDC_Init+0x1e4>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	f003 020f 	and.w	r2, r3, #15
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	440b      	add	r3, r1
 800a9b0:	3324      	adds	r3, #36	; 0x24
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a9b6:	4b39      	ldr	r3, [pc, #228]	; (800aa9c <USBD_CDC_Init+0x1e8>)
 800a9b8:	7819      	ldrb	r1, [r3, #0]
 800a9ba:	2340      	movs	r3, #64	; 0x40
 800a9bc:	2202      	movs	r2, #2
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f002 fb85 	bl	800d0ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a9c4:	4b35      	ldr	r3, [pc, #212]	; (800aa9c <USBD_CDC_Init+0x1e8>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 020f 	and.w	r2, r3, #15
 800a9cc:	6879      	ldr	r1, [r7, #4]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	440b      	add	r3, r1
 800a9d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a9dc:	2201      	movs	r2, #1
 800a9de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a9e0:	4b2f      	ldr	r3, [pc, #188]	; (800aaa0 <USBD_CDC_Init+0x1ec>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	f003 020f 	and.w	r2, r3, #15
 800a9e8:	6879      	ldr	r1, [r7, #4]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	440b      	add	r3, r1
 800a9f4:	3326      	adds	r3, #38	; 0x26
 800a9f6:	2210      	movs	r2, #16
 800a9f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9fa:	4b29      	ldr	r3, [pc, #164]	; (800aaa0 <USBD_CDC_Init+0x1ec>)
 800a9fc:	7819      	ldrb	r1, [r3, #0]
 800a9fe:	2308      	movs	r3, #8
 800aa00:	2203      	movs	r2, #3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f002 fb63 	bl	800d0ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aa08:	4b25      	ldr	r3, [pc, #148]	; (800aaa0 <USBD_CDC_Init+0x1ec>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	f003 020f 	and.w	r2, r3, #15
 800aa10:	6879      	ldr	r1, [r7, #4]
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	440b      	add	r3, r1
 800aa1c:	3324      	adds	r3, #36	; 0x24
 800aa1e:	2201      	movs	r2, #1
 800aa20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	33b0      	adds	r3, #176	; 0xb0
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	e018      	b.n	800aa8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	7c1b      	ldrb	r3, [r3, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10a      	bne.n	800aa7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa64:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <USBD_CDC_Init+0x1e8>)
 800aa66:	7819      	ldrb	r1, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f002 fc1a 	bl	800d2ac <USBD_LL_PrepareReceive>
 800aa78:	e008      	b.n	800aa8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa7a:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <USBD_CDC_Init+0x1e8>)
 800aa7c:	7819      	ldrb	r1, [r3, #0]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa84:	2340      	movs	r3, #64	; 0x40
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f002 fc10 	bl	800d2ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	200000af 	.word	0x200000af
 800aa9c:	200000b0 	.word	0x200000b0
 800aaa0:	200000b1 	.word	0x200000b1

0800aaa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aab0:	4b3a      	ldr	r3, [pc, #232]	; (800ab9c <USBD_CDC_DeInit+0xf8>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f002 fb2f 	bl	800d11a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aabc:	4b37      	ldr	r3, [pc, #220]	; (800ab9c <USBD_CDC_DeInit+0xf8>)
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	f003 020f 	and.w	r2, r3, #15
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	440b      	add	r3, r1
 800aad0:	3324      	adds	r3, #36	; 0x24
 800aad2:	2200      	movs	r2, #0
 800aad4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aad6:	4b32      	ldr	r3, [pc, #200]	; (800aba0 <USBD_CDC_DeInit+0xfc>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f002 fb1c 	bl	800d11a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aae2:	4b2f      	ldr	r3, [pc, #188]	; (800aba0 <USBD_CDC_DeInit+0xfc>)
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	f003 020f 	and.w	r2, r3, #15
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	440b      	add	r3, r1
 800aaf6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aafa:	2200      	movs	r2, #0
 800aafc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aafe:	4b29      	ldr	r3, [pc, #164]	; (800aba4 <USBD_CDC_DeInit+0x100>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f002 fb08 	bl	800d11a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ab0a:	4b26      	ldr	r3, [pc, #152]	; (800aba4 <USBD_CDC_DeInit+0x100>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	f003 020f 	and.w	r2, r3, #15
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	440b      	add	r3, r1
 800ab1e:	3324      	adds	r3, #36	; 0x24
 800ab20:	2200      	movs	r2, #0
 800ab22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ab24:	4b1f      	ldr	r3, [pc, #124]	; (800aba4 <USBD_CDC_DeInit+0x100>)
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	f003 020f 	and.w	r2, r3, #15
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	440b      	add	r3, r1
 800ab38:	3326      	adds	r3, #38	; 0x26
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	32b0      	adds	r2, #176	; 0xb0
 800ab48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d01f      	beq.n	800ab90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	33b0      	adds	r3, #176	; 0xb0
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	32b0      	adds	r2, #176	; 0xb0
 800ab6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f002 fc2a 	bl	800d3cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	32b0      	adds	r2, #176	; 0xb0
 800ab82:	2100      	movs	r1, #0
 800ab84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200000af 	.word	0x200000af
 800aba0:	200000b0 	.word	0x200000b0
 800aba4:	200000b1 	.word	0x200000b1

0800aba8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	32b0      	adds	r2, #176	; 0xb0
 800abbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800abd4:	2303      	movs	r3, #3
 800abd6:	e0bf      	b.n	800ad58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d050      	beq.n	800ac86 <USBD_CDC_Setup+0xde>
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	f040 80af 	bne.w	800ad48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	88db      	ldrh	r3, [r3, #6]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d03a      	beq.n	800ac68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	b25b      	sxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	da1b      	bge.n	800ac34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	33b0      	adds	r3, #176	; 0xb0
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ac12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	88d2      	ldrh	r2, [r2, #6]
 800ac18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	88db      	ldrh	r3, [r3, #6]
 800ac1e:	2b07      	cmp	r3, #7
 800ac20:	bf28      	it	cs
 800ac22:	2307      	movcs	r3, #7
 800ac24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	89fa      	ldrh	r2, [r7, #14]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f001 fdb3 	bl	800c798 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ac32:	e090      	b.n	800ad56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	785a      	ldrb	r2, [r3, #1]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	88db      	ldrh	r3, [r3, #6]
 800ac42:	2b3f      	cmp	r3, #63	; 0x3f
 800ac44:	d803      	bhi.n	800ac4e <USBD_CDC_Setup+0xa6>
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	88db      	ldrh	r3, [r3, #6]
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	e000      	b.n	800ac50 <USBD_CDC_Setup+0xa8>
 800ac4e:	2240      	movs	r2, #64	; 0x40
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ac56:	6939      	ldr	r1, [r7, #16]
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ac5e:	461a      	mov	r2, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f001 fdc5 	bl	800c7f0 <USBD_CtlPrepareRx>
      break;
 800ac66:	e076      	b.n	800ad56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	33b0      	adds	r3, #176	; 0xb0
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	7850      	ldrb	r0, [r2, #1]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	4798      	blx	r3
      break;
 800ac84:	e067      	b.n	800ad56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	785b      	ldrb	r3, [r3, #1]
 800ac8a:	2b0b      	cmp	r3, #11
 800ac8c:	d851      	bhi.n	800ad32 <USBD_CDC_Setup+0x18a>
 800ac8e:	a201      	add	r2, pc, #4	; (adr r2, 800ac94 <USBD_CDC_Setup+0xec>)
 800ac90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac94:	0800acc5 	.word	0x0800acc5
 800ac98:	0800ad41 	.word	0x0800ad41
 800ac9c:	0800ad33 	.word	0x0800ad33
 800aca0:	0800ad33 	.word	0x0800ad33
 800aca4:	0800ad33 	.word	0x0800ad33
 800aca8:	0800ad33 	.word	0x0800ad33
 800acac:	0800ad33 	.word	0x0800ad33
 800acb0:	0800ad33 	.word	0x0800ad33
 800acb4:	0800ad33 	.word	0x0800ad33
 800acb8:	0800ad33 	.word	0x0800ad33
 800acbc:	0800acef 	.word	0x0800acef
 800acc0:	0800ad19 	.word	0x0800ad19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b03      	cmp	r3, #3
 800acce:	d107      	bne.n	800ace0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800acd0:	f107 030a 	add.w	r3, r7, #10
 800acd4:	2202      	movs	r2, #2
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f001 fd5d 	bl	800c798 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acde:	e032      	b.n	800ad46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f001 fce7 	bl	800c6b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ace8:	2303      	movs	r3, #3
 800acea:	75fb      	strb	r3, [r7, #23]
          break;
 800acec:	e02b      	b.n	800ad46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d107      	bne.n	800ad0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800acfa:	f107 030d 	add.w	r3, r7, #13
 800acfe:	2201      	movs	r2, #1
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f001 fd48 	bl	800c798 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad08:	e01d      	b.n	800ad46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f001 fcd2 	bl	800c6b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad12:	2303      	movs	r3, #3
 800ad14:	75fb      	strb	r3, [r7, #23]
          break;
 800ad16:	e016      	b.n	800ad46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d00f      	beq.n	800ad44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 fcc5 	bl	800c6b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ad30:	e008      	b.n	800ad44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 fcbe 	bl	800c6b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	75fb      	strb	r3, [r7, #23]
          break;
 800ad3e:	e002      	b.n	800ad46 <USBD_CDC_Setup+0x19e>
          break;
 800ad40:	bf00      	nop
 800ad42:	e008      	b.n	800ad56 <USBD_CDC_Setup+0x1ae>
          break;
 800ad44:	bf00      	nop
      }
      break;
 800ad46:	e006      	b.n	800ad56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f001 fcb3 	bl	800c6b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad50:	2303      	movs	r3, #3
 800ad52:	75fb      	strb	r3, [r7, #23]
      break;
 800ad54:	bf00      	nop
  }

  return (uint8_t)ret;
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	32b0      	adds	r2, #176	; 0xb0
 800ad7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e065      	b.n	800ae56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	32b0      	adds	r2, #176	; 0xb0
 800ad94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	f003 020f 	and.w	r2, r3, #15
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	3318      	adds	r3, #24
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d02f      	beq.n	800ae14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800adb4:	78fb      	ldrb	r3, [r7, #3]
 800adb6:	f003 020f 	and.w	r2, r3, #15
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	4613      	mov	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	440b      	add	r3, r1
 800adc6:	3318      	adds	r3, #24
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	f003 010f 	and.w	r1, r3, #15
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	460b      	mov	r3, r1
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	440b      	add	r3, r1
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4403      	add	r3, r0
 800addc:	3348      	adds	r3, #72	; 0x48
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	fbb2 f1f3 	udiv	r1, r2, r3
 800ade4:	fb01 f303 	mul.w	r3, r1, r3
 800ade8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800adea:	2b00      	cmp	r3, #0
 800adec:	d112      	bne.n	800ae14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	f003 020f 	and.w	r2, r3, #15
 800adf4:	6879      	ldr	r1, [r7, #4]
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	440b      	add	r3, r1
 800ae00:	3318      	adds	r3, #24
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae06:	78f9      	ldrb	r1, [r7, #3]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f002 fa2c 	bl	800d26a <USBD_LL_Transmit>
 800ae12:	e01f      	b.n	800ae54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	33b0      	adds	r3, #176	; 0xb0
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d010      	beq.n	800ae54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	33b0      	adds	r3, #176	; 0xb0
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ae50:	78fa      	ldrb	r2, [r7, #3]
 800ae52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	460b      	mov	r3, r1
 800ae68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	32b0      	adds	r2, #176	; 0xb0
 800ae74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	32b0      	adds	r2, #176	; 0xb0
 800ae84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e01a      	b.n	800aec6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	4619      	mov	r1, r3
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f002 fa2a 	bl	800d2ee <USBD_LL_GetRxDataSize>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	33b0      	adds	r3, #176	; 0xb0
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aec0:	4611      	mov	r1, r2
 800aec2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	32b0      	adds	r2, #176	; 0xb0
 800aee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e025      	b.n	800af3c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	33b0      	adds	r3, #176	; 0xb0
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01a      	beq.n	800af3a <USBD_CDC_EP0_RxReady+0x6c>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800af0a:	2bff      	cmp	r3, #255	; 0xff
 800af0c:	d015      	beq.n	800af3a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	33b0      	adds	r3, #176	; 0xb0
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800af26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af2e:	b292      	uxth	r2, r2
 800af30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	22ff      	movs	r2, #255	; 0xff
 800af36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af4c:	2182      	movs	r1, #130	; 0x82
 800af4e:	4818      	ldr	r0, [pc, #96]	; (800afb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af50:	f000 fd4f 	bl	800b9f2 <USBD_GetEpDesc>
 800af54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af56:	2101      	movs	r1, #1
 800af58:	4815      	ldr	r0, [pc, #84]	; (800afb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af5a:	f000 fd4a 	bl	800b9f2 <USBD_GetEpDesc>
 800af5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af60:	2181      	movs	r1, #129	; 0x81
 800af62:	4813      	ldr	r0, [pc, #76]	; (800afb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af64:	f000 fd45 	bl	800b9f2 <USBD_GetEpDesc>
 800af68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2210      	movs	r2, #16
 800af74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d006      	beq.n	800af8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	2200      	movs	r2, #0
 800af80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af84:	711a      	strb	r2, [r3, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d006      	beq.n	800af9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af98:	711a      	strb	r2, [r3, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2243      	movs	r2, #67	; 0x43
 800afa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afa4:	4b02      	ldr	r3, [pc, #8]	; (800afb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	2000006c 	.word	0x2000006c

0800afb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afbc:	2182      	movs	r1, #130	; 0x82
 800afbe:	4818      	ldr	r0, [pc, #96]	; (800b020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afc0:	f000 fd17 	bl	800b9f2 <USBD_GetEpDesc>
 800afc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afc6:	2101      	movs	r1, #1
 800afc8:	4815      	ldr	r0, [pc, #84]	; (800b020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afca:	f000 fd12 	bl	800b9f2 <USBD_GetEpDesc>
 800afce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afd0:	2181      	movs	r1, #129	; 0x81
 800afd2:	4813      	ldr	r0, [pc, #76]	; (800b020 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afd4:	f000 fd0d 	bl	800b9f2 <USBD_GetEpDesc>
 800afd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2210      	movs	r2, #16
 800afe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d006      	beq.n	800affa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2200      	movs	r2, #0
 800aff0:	711a      	strb	r2, [r3, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f042 0202 	orr.w	r2, r2, #2
 800aff8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d006      	beq.n	800b00e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	711a      	strb	r2, [r3, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f042 0202 	orr.w	r2, r2, #2
 800b00c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2243      	movs	r2, #67	; 0x43
 800b012:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b014:	4b02      	ldr	r3, [pc, #8]	; (800b020 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	2000006c 	.word	0x2000006c

0800b024 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b02c:	2182      	movs	r1, #130	; 0x82
 800b02e:	4818      	ldr	r0, [pc, #96]	; (800b090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b030:	f000 fcdf 	bl	800b9f2 <USBD_GetEpDesc>
 800b034:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b036:	2101      	movs	r1, #1
 800b038:	4815      	ldr	r0, [pc, #84]	; (800b090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b03a:	f000 fcda 	bl	800b9f2 <USBD_GetEpDesc>
 800b03e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b040:	2181      	movs	r1, #129	; 0x81
 800b042:	4813      	ldr	r0, [pc, #76]	; (800b090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b044:	f000 fcd5 	bl	800b9f2 <USBD_GetEpDesc>
 800b048:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2210      	movs	r2, #16
 800b054:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d006      	beq.n	800b06a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	2200      	movs	r2, #0
 800b060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b064:	711a      	strb	r2, [r3, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d006      	beq.n	800b07e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b078:	711a      	strb	r2, [r3, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2243      	movs	r2, #67	; 0x43
 800b082:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b084:	4b02      	ldr	r3, [pc, #8]	; (800b090 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	2000006c 	.word	0x2000006c

0800b094 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	220a      	movs	r2, #10
 800b0a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b0a2:	4b03      	ldr	r3, [pc, #12]	; (800b0b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	20000028 	.word	0x20000028

0800b0b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d101      	bne.n	800b0c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e009      	b.n	800b0dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	33b0      	adds	r3, #176	; 0xb0
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b087      	sub	sp, #28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	32b0      	adds	r2, #176	; 0xb0
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e008      	b.n	800b120 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	371c      	adds	r7, #28
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	32b0      	adds	r2, #176	; 0xb0
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e004      	b.n	800b15a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
	...

0800b168 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	32b0      	adds	r2, #176	; 0xb0
 800b17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b180:	2301      	movs	r3, #1
 800b182:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	32b0      	adds	r2, #176	; 0xb0
 800b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b196:	2303      	movs	r3, #3
 800b198:	e025      	b.n	800b1e6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d11f      	bne.n	800b1e4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b1ac:	4b10      	ldr	r3, [pc, #64]	; (800b1f0 <USBD_CDC_TransmitPacket+0x88>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	f003 020f 	and.w	r2, r3, #15
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4403      	add	r3, r0
 800b1c6:	3318      	adds	r3, #24
 800b1c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b1ca:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <USBD_CDC_TransmitPacket+0x88>)
 800b1cc:	7819      	ldrb	r1, [r3, #0]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f002 f845 	bl	800d26a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	200000af 	.word	0x200000af

0800b1f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	32b0      	adds	r2, #176	; 0xb0
 800b206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b20a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	32b0      	adds	r2, #176	; 0xb0
 800b216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b21e:	2303      	movs	r3, #3
 800b220:	e018      	b.n	800b254 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	7c1b      	ldrb	r3, [r3, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10a      	bne.n	800b240 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b22a:	4b0c      	ldr	r3, [pc, #48]	; (800b25c <USBD_CDC_ReceivePacket+0x68>)
 800b22c:	7819      	ldrb	r1, [r3, #0]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b234:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f002 f837 	bl	800d2ac <USBD_LL_PrepareReceive>
 800b23e:	e008      	b.n	800b252 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b240:	4b06      	ldr	r3, [pc, #24]	; (800b25c <USBD_CDC_ReceivePacket+0x68>)
 800b242:	7819      	ldrb	r1, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b24a:	2340      	movs	r3, #64	; 0x40
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f002 f82d 	bl	800d2ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	200000b0 	.word	0x200000b0

0800b260 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b274:	2303      	movs	r3, #3
 800b276:	e01f      	b.n	800b2b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d003      	beq.n	800b29e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	79fa      	ldrb	r2, [r7, #7]
 800b2aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f001 fea7 	bl	800d000 <USBD_LL_Init>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e025      	b.n	800b324 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	32ae      	adds	r2, #174	; 0xae
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00f      	beq.n	800b314 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	32ae      	adds	r2, #174	; 0xae
 800b2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	f107 020e 	add.w	r2, r7, #14
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	4602      	mov	r2, r0
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 feaf 	bl	800d098 <USBD_LL_Start>
 800b33a:	4603      	mov	r3, r0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b34c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b34e:	4618      	mov	r0, r3
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	460b      	mov	r3, r1
 800b364:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b370:	2b00      	cmp	r3, #0
 800b372:	d009      	beq.n	800b388 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	78fa      	ldrb	r2, [r7, #3]
 800b37e:	4611      	mov	r1, r2
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	4798      	blx	r3
 800b384:	4603      	mov	r3, r0
 800b386:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b388:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	460b      	mov	r3, r1
 800b39c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	78fa      	ldrb	r2, [r7, #3]
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	4798      	blx	r3
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b084      	sub	sp, #16
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 f932 	bl	800c642 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b3fa:	f003 031f 	and.w	r3, r3, #31
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d01a      	beq.n	800b438 <USBD_LL_SetupStage+0x72>
 800b402:	2b02      	cmp	r3, #2
 800b404:	d822      	bhi.n	800b44c <USBD_LL_SetupStage+0x86>
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <USBD_LL_SetupStage+0x4a>
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d00a      	beq.n	800b424 <USBD_LL_SetupStage+0x5e>
 800b40e:	e01d      	b.n	800b44c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b416:	4619      	mov	r1, r3
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fb5f 	bl	800badc <USBD_StdDevReq>
 800b41e:	4603      	mov	r3, r0
 800b420:	73fb      	strb	r3, [r7, #15]
      break;
 800b422:	e020      	b.n	800b466 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fbc7 	bl	800bbc0 <USBD_StdItfReq>
 800b432:	4603      	mov	r3, r0
 800b434:	73fb      	strb	r3, [r7, #15]
      break;
 800b436:	e016      	b.n	800b466 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fc29 	bl	800bc98 <USBD_StdEPReq>
 800b446:	4603      	mov	r3, r0
 800b448:	73fb      	strb	r3, [r7, #15]
      break;
 800b44a:	e00c      	b.n	800b466 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b452:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b456:	b2db      	uxtb	r3, r3
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f001 fe7c 	bl	800d158 <USBD_LL_StallEP>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]
      break;
 800b464:	bf00      	nop
  }

  return ret;
 800b466:	7bfb      	ldrb	r3, [r7, #15]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	460b      	mov	r3, r1
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d16e      	bne.n	800b566 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b48e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b496:	2b03      	cmp	r3, #3
 800b498:	f040 8098 	bne.w	800b5cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	689a      	ldr	r2, [r3, #8]
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d913      	bls.n	800b4d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	689a      	ldr	r2, [r3, #8]
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	1ad2      	subs	r2, r2, r3
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	68da      	ldr	r2, [r3, #12]
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	bf28      	it	cs
 800b4c2:	4613      	movcs	r3, r2
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	6879      	ldr	r1, [r7, #4]
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f001 f9ae 	bl	800c82a <USBD_CtlContinueRx>
 800b4ce:	e07d      	b.n	800b5cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4d6:	f003 031f 	and.w	r3, r3, #31
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d014      	beq.n	800b508 <USBD_LL_DataOutStage+0x98>
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d81d      	bhi.n	800b51e <USBD_LL_DataOutStage+0xae>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <USBD_LL_DataOutStage+0x7c>
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d003      	beq.n	800b4f2 <USBD_LL_DataOutStage+0x82>
 800b4ea:	e018      	b.n	800b51e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	75bb      	strb	r3, [r7, #22]
            break;
 800b4f0:	e018      	b.n	800b524 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 fa5e 	bl	800b9be <USBD_CoreFindIF>
 800b502:	4603      	mov	r3, r0
 800b504:	75bb      	strb	r3, [r7, #22]
            break;
 800b506:	e00d      	b.n	800b524 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	4619      	mov	r1, r3
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 fa60 	bl	800b9d8 <USBD_CoreFindEP>
 800b518:	4603      	mov	r3, r0
 800b51a:	75bb      	strb	r3, [r7, #22]
            break;
 800b51c:	e002      	b.n	800b524 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b51e:	2300      	movs	r3, #0
 800b520:	75bb      	strb	r3, [r7, #22]
            break;
 800b522:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b524:	7dbb      	ldrb	r3, [r7, #22]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d119      	bne.n	800b55e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b03      	cmp	r3, #3
 800b534:	d113      	bne.n	800b55e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b536:	7dba      	ldrb	r2, [r7, #22]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	32ae      	adds	r2, #174	; 0xae
 800b53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00b      	beq.n	800b55e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b546:	7dba      	ldrb	r2, [r7, #22]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b54e:	7dba      	ldrb	r2, [r7, #22]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	32ae      	adds	r2, #174	; 0xae
 800b554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f001 f974 	bl	800c84c <USBD_CtlSendStatus>
 800b564:	e032      	b.n	800b5cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b566:	7afb      	ldrb	r3, [r7, #11]
 800b568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	4619      	mov	r1, r3
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 fa31 	bl	800b9d8 <USBD_CoreFindEP>
 800b576:	4603      	mov	r3, r0
 800b578:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b57a:	7dbb      	ldrb	r3, [r7, #22]
 800b57c:	2bff      	cmp	r3, #255	; 0xff
 800b57e:	d025      	beq.n	800b5cc <USBD_LL_DataOutStage+0x15c>
 800b580:	7dbb      	ldrb	r3, [r7, #22]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d122      	bne.n	800b5cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d117      	bne.n	800b5c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b592:	7dba      	ldrb	r2, [r7, #22]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	32ae      	adds	r2, #174	; 0xae
 800b598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00f      	beq.n	800b5c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b5a2:	7dba      	ldrb	r2, [r7, #22]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b5aa:	7dba      	ldrb	r2, [r7, #22]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	32ae      	adds	r2, #174	; 0xae
 800b5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	7afa      	ldrb	r2, [r7, #11]
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	e000      	b.n	800b5ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b086      	sub	sp, #24
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	60f8      	str	r0, [r7, #12]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	607a      	str	r2, [r7, #4]
 800b5e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b5e4:	7afb      	ldrb	r3, [r7, #11]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d16f      	bne.n	800b6ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3314      	adds	r3, #20
 800b5ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d15a      	bne.n	800b6b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	429a      	cmp	r2, r3
 800b604:	d914      	bls.n	800b630 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	1ad2      	subs	r2, r2, r3
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	461a      	mov	r2, r3
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f001 f8d6 	bl	800c7ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b622:	2300      	movs	r3, #0
 800b624:	2200      	movs	r2, #0
 800b626:	2100      	movs	r1, #0
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f001 fe3f 	bl	800d2ac <USBD_LL_PrepareReceive>
 800b62e:	e03f      	b.n	800b6b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	68da      	ldr	r2, [r3, #12]
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d11c      	bne.n	800b676 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b644:	429a      	cmp	r2, r3
 800b646:	d316      	bcc.n	800b676 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b652:	429a      	cmp	r2, r3
 800b654:	d20f      	bcs.n	800b676 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b656:	2200      	movs	r2, #0
 800b658:	2100      	movs	r1, #0
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f001 f8b7 	bl	800c7ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b668:	2300      	movs	r3, #0
 800b66a:	2200      	movs	r2, #0
 800b66c:	2100      	movs	r1, #0
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f001 fe1c 	bl	800d2ac <USBD_LL_PrepareReceive>
 800b674:	e01c      	b.n	800b6b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d10f      	bne.n	800b6a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d009      	beq.n	800b6a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6a2:	2180      	movs	r1, #128	; 0x80
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f001 fd57 	bl	800d158 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f001 f8e1 	bl	800c872 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d03a      	beq.n	800b730 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fe42 	bl	800b344 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b6c8:	e032      	b.n	800b730 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 f97f 	bl	800b9d8 <USBD_CoreFindEP>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	2bff      	cmp	r3, #255	; 0xff
 800b6e2:	d025      	beq.n	800b730 <USBD_LL_DataInStage+0x15a>
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d122      	bne.n	800b730 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d11c      	bne.n	800b730 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b6f6:	7dfa      	ldrb	r2, [r7, #23]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	32ae      	adds	r2, #174	; 0xae
 800b6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d014      	beq.n	800b730 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b706:	7dfa      	ldrb	r2, [r7, #23]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b70e:	7dfa      	ldrb	r2, [r7, #23]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	32ae      	adds	r2, #174	; 0xae
 800b714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	7afa      	ldrb	r2, [r7, #11]
 800b71c:	4611      	mov	r1, r2
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	4798      	blx	r3
 800b722:	4603      	mov	r3, r0
 800b724:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b726:	7dbb      	ldrb	r3, [r7, #22]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b72c:	7dbb      	ldrb	r3, [r7, #22]
 800b72e:	e000      	b.n	800b732 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b772:	2b00      	cmp	r3, #0
 800b774:	d014      	beq.n	800b7a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00e      	beq.n	800b7a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	6852      	ldr	r2, [r2, #4]
 800b78e:	b2d2      	uxtb	r2, r2
 800b790:	4611      	mov	r1, r2
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	4798      	blx	r3
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7a0:	2340      	movs	r3, #64	; 0x40
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f001 fc91 	bl	800d0ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2240      	movs	r2, #64	; 0x40
 800b7b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7bc:	2340      	movs	r3, #64	; 0x40
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2180      	movs	r1, #128	; 0x80
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f001 fc83 	bl	800d0ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2240      	movs	r2, #64	; 0x40
 800b7d2:	621a      	str	r2, [r3, #32]

  return ret;
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b083      	sub	sp, #12
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	78fa      	ldrb	r2, [r7, #3]
 800b7ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2204      	movs	r2, #4
 800b818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b083      	sub	sp, #12
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	d106      	bne.n	800b84c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b844:	b2da      	uxtb	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d110      	bne.n	800b890 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87e:	69db      	ldr	r3, [r3, #28]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d005      	beq.n	800b890 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	32ae      	adds	r2, #174	; 0xae
 800b8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d101      	bne.n	800b8bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	e01c      	b.n	800b8f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	d115      	bne.n	800b8f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	32ae      	adds	r2, #174	; 0xae
 800b8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00b      	beq.n	800b8f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	32ae      	adds	r2, #174	; 0xae
 800b8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	78fa      	ldrb	r2, [r7, #3]
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	32ae      	adds	r2, #174	; 0xae
 800b914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e01c      	b.n	800b95a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d115      	bne.n	800b958 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	32ae      	adds	r2, #174	; 0xae
 800b936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	32ae      	adds	r2, #174	; 0xae
 800b94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	78fa      	ldrb	r2, [r7, #3]
 800b952:	4611      	mov	r1, r2
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00e      	beq.n	800b9b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	6852      	ldr	r2, [r2, #4]
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	4798      	blx	r3
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b083      	sub	sp, #12
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b086      	sub	sp, #24
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	885b      	ldrh	r3, [r3, #2]
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d920      	bls.n	800ba5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ba22:	e013      	b.n	800ba4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ba24:	f107 030a 	add.w	r3, r7, #10
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6978      	ldr	r0, [r7, #20]
 800ba2c:	f000 f81b 	bl	800ba66 <USBD_GetNextDesc>
 800ba30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	785b      	ldrb	r3, [r3, #1]
 800ba36:	2b05      	cmp	r3, #5
 800ba38:	d108      	bne.n	800ba4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	789b      	ldrb	r3, [r3, #2]
 800ba42:	78fa      	ldrb	r2, [r7, #3]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d008      	beq.n	800ba5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	885b      	ldrh	r3, [r3, #2]
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	897b      	ldrh	r3, [r7, #10]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d8e5      	bhi.n	800ba24 <USBD_GetEpDesc+0x32>
 800ba58:	e000      	b.n	800ba5c <USBD_GetEpDesc+0x6a>
          break;
 800ba5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ba5c:	693b      	ldr	r3, [r7, #16]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3718      	adds	r7, #24
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b085      	sub	sp, #20
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	881a      	ldrh	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	4413      	add	r3, r2
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4413      	add	r3, r2
 800ba90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba92:	68fb      	ldr	r3, [r7, #12]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b087      	sub	sp, #28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	3301      	adds	r3, #1
 800bab6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800babe:	8a3b      	ldrh	r3, [r7, #16]
 800bac0:	021b      	lsls	r3, r3, #8
 800bac2:	b21a      	sxth	r2, r3
 800bac4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bac8:	4313      	orrs	r3, r2
 800baca:	b21b      	sxth	r3, r3
 800bacc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bace:	89fb      	ldrh	r3, [r7, #14]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	371c      	adds	r7, #28
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baf2:	2b40      	cmp	r3, #64	; 0x40
 800baf4:	d005      	beq.n	800bb02 <USBD_StdDevReq+0x26>
 800baf6:	2b40      	cmp	r3, #64	; 0x40
 800baf8:	d857      	bhi.n	800bbaa <USBD_StdDevReq+0xce>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00f      	beq.n	800bb1e <USBD_StdDevReq+0x42>
 800bafe:	2b20      	cmp	r3, #32
 800bb00:	d153      	bne.n	800bbaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	32ae      	adds	r2, #174	; 0xae
 800bb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	4798      	blx	r3
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb1c:	e04a      	b.n	800bbb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	785b      	ldrb	r3, [r3, #1]
 800bb22:	2b09      	cmp	r3, #9
 800bb24:	d83b      	bhi.n	800bb9e <USBD_StdDevReq+0xc2>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <USBD_StdDevReq+0x50>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb81 	.word	0x0800bb81
 800bb30:	0800bb95 	.word	0x0800bb95
 800bb34:	0800bb9f 	.word	0x0800bb9f
 800bb38:	0800bb8b 	.word	0x0800bb8b
 800bb3c:	0800bb9f 	.word	0x0800bb9f
 800bb40:	0800bb5f 	.word	0x0800bb5f
 800bb44:	0800bb55 	.word	0x0800bb55
 800bb48:	0800bb9f 	.word	0x0800bb9f
 800bb4c:	0800bb77 	.word	0x0800bb77
 800bb50:	0800bb69 	.word	0x0800bb69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 fa3c 	bl	800bfd4 <USBD_GetDescriptor>
          break;
 800bb5c:	e024      	b.n	800bba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fbcb 	bl	800c2fc <USBD_SetAddress>
          break;
 800bb66:	e01f      	b.n	800bba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fc0a 	bl	800c384 <USBD_SetConfig>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]
          break;
 800bb74:	e018      	b.n	800bba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fcad 	bl	800c4d8 <USBD_GetConfig>
          break;
 800bb7e:	e013      	b.n	800bba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fcde 	bl	800c544 <USBD_GetStatus>
          break;
 800bb88:	e00e      	b.n	800bba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fd0d 	bl	800c5ac <USBD_SetFeature>
          break;
 800bb92:	e009      	b.n	800bba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fd31 	bl	800c5fe <USBD_ClrFeature>
          break;
 800bb9c:	e004      	b.n	800bba8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fd88 	bl	800c6b6 <USBD_CtlError>
          break;
 800bba6:	bf00      	nop
      }
      break;
 800bba8:	e004      	b.n	800bbb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fd82 	bl	800c6b6 <USBD_CtlError>
      break;
 800bbb2:	bf00      	nop
  }

  return ret;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop

0800bbc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbd6:	2b40      	cmp	r3, #64	; 0x40
 800bbd8:	d005      	beq.n	800bbe6 <USBD_StdItfReq+0x26>
 800bbda:	2b40      	cmp	r3, #64	; 0x40
 800bbdc:	d852      	bhi.n	800bc84 <USBD_StdItfReq+0xc4>
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <USBD_StdItfReq+0x26>
 800bbe2:	2b20      	cmp	r3, #32
 800bbe4:	d14e      	bne.n	800bc84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d840      	bhi.n	800bc76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	889b      	ldrh	r3, [r3, #4]
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d836      	bhi.n	800bc6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	889b      	ldrh	r3, [r3, #4]
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7ff fed9 	bl	800b9be <USBD_CoreFindIF>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc10:	7bbb      	ldrb	r3, [r7, #14]
 800bc12:	2bff      	cmp	r3, #255	; 0xff
 800bc14:	d01d      	beq.n	800bc52 <USBD_StdItfReq+0x92>
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d11a      	bne.n	800bc52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bc1c:	7bba      	ldrb	r2, [r7, #14]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	32ae      	adds	r2, #174	; 0xae
 800bc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00f      	beq.n	800bc4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bc2c:	7bba      	ldrb	r2, [r7, #14]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc34:	7bba      	ldrb	r2, [r7, #14]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	32ae      	adds	r2, #174	; 0xae
 800bc3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
 800bc46:	4603      	mov	r3, r0
 800bc48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc4a:	e004      	b.n	800bc56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc50:	e001      	b.n	800bc56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bc52:	2303      	movs	r3, #3
 800bc54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	88db      	ldrh	r3, [r3, #6]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d110      	bne.n	800bc80 <USBD_StdItfReq+0xc0>
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10d      	bne.n	800bc80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fdf1 	bl	800c84c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc6a:	e009      	b.n	800bc80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fd21 	bl	800c6b6 <USBD_CtlError>
          break;
 800bc74:	e004      	b.n	800bc80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fd1c 	bl	800c6b6 <USBD_CtlError>
          break;
 800bc7e:	e000      	b.n	800bc82 <USBD_StdItfReq+0xc2>
          break;
 800bc80:	bf00      	nop
      }
      break;
 800bc82:	e004      	b.n	800bc8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fd15 	bl	800c6b6 <USBD_CtlError>
      break;
 800bc8c:	bf00      	nop
  }

  return ret;
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	889b      	ldrh	r3, [r3, #4]
 800bcaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcb4:	2b40      	cmp	r3, #64	; 0x40
 800bcb6:	d007      	beq.n	800bcc8 <USBD_StdEPReq+0x30>
 800bcb8:	2b40      	cmp	r3, #64	; 0x40
 800bcba:	f200 817f 	bhi.w	800bfbc <USBD_StdEPReq+0x324>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d02a      	beq.n	800bd18 <USBD_StdEPReq+0x80>
 800bcc2:	2b20      	cmp	r3, #32
 800bcc4:	f040 817a 	bne.w	800bfbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff fe83 	bl	800b9d8 <USBD_CoreFindEP>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcd6:	7b7b      	ldrb	r3, [r7, #13]
 800bcd8:	2bff      	cmp	r3, #255	; 0xff
 800bcda:	f000 8174 	beq.w	800bfc6 <USBD_StdEPReq+0x32e>
 800bcde:	7b7b      	ldrb	r3, [r7, #13]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f040 8170 	bne.w	800bfc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bce6:	7b7a      	ldrb	r2, [r7, #13]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bcee:	7b7a      	ldrb	r2, [r7, #13]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	32ae      	adds	r2, #174	; 0xae
 800bcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 8163 	beq.w	800bfc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bd00:	7b7a      	ldrb	r2, [r7, #13]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	32ae      	adds	r2, #174	; 0xae
 800bd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	4798      	blx	r3
 800bd12:	4603      	mov	r3, r0
 800bd14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bd16:	e156      	b.n	800bfc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	785b      	ldrb	r3, [r3, #1]
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d008      	beq.n	800bd32 <USBD_StdEPReq+0x9a>
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	f300 8145 	bgt.w	800bfb0 <USBD_StdEPReq+0x318>
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 809b 	beq.w	800be62 <USBD_StdEPReq+0x1ca>
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d03c      	beq.n	800bdaa <USBD_StdEPReq+0x112>
 800bd30:	e13e      	b.n	800bfb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d002      	beq.n	800bd44 <USBD_StdEPReq+0xac>
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d016      	beq.n	800bd70 <USBD_StdEPReq+0xd8>
 800bd42:	e02c      	b.n	800bd9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00d      	beq.n	800bd66 <USBD_StdEPReq+0xce>
 800bd4a:	7bbb      	ldrb	r3, [r7, #14]
 800bd4c:	2b80      	cmp	r3, #128	; 0x80
 800bd4e:	d00a      	beq.n	800bd66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f001 f9ff 	bl	800d158 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd5a:	2180      	movs	r1, #128	; 0x80
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f001 f9fb 	bl	800d158 <USBD_LL_StallEP>
 800bd62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd64:	e020      	b.n	800bda8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fca4 	bl	800c6b6 <USBD_CtlError>
              break;
 800bd6e:	e01b      	b.n	800bda8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	885b      	ldrh	r3, [r3, #2]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10e      	bne.n	800bd96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <USBD_StdEPReq+0xfe>
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	2b80      	cmp	r3, #128	; 0x80
 800bd82:	d008      	beq.n	800bd96 <USBD_StdEPReq+0xfe>
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	88db      	ldrh	r3, [r3, #6]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d104      	bne.n	800bd96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd8c:	7bbb      	ldrb	r3, [r7, #14]
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f001 f9e1 	bl	800d158 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fd58 	bl	800c84c <USBD_CtlSendStatus>

              break;
 800bd9c:	e004      	b.n	800bda8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fc88 	bl	800c6b6 <USBD_CtlError>
              break;
 800bda6:	bf00      	nop
          }
          break;
 800bda8:	e107      	b.n	800bfba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d002      	beq.n	800bdbc <USBD_StdEPReq+0x124>
 800bdb6:	2b03      	cmp	r3, #3
 800bdb8:	d016      	beq.n	800bde8 <USBD_StdEPReq+0x150>
 800bdba:	e04b      	b.n	800be54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00d      	beq.n	800bdde <USBD_StdEPReq+0x146>
 800bdc2:	7bbb      	ldrb	r3, [r7, #14]
 800bdc4:	2b80      	cmp	r3, #128	; 0x80
 800bdc6:	d00a      	beq.n	800bdde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f001 f9c3 	bl	800d158 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdd2:	2180      	movs	r1, #128	; 0x80
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f001 f9bf 	bl	800d158 <USBD_LL_StallEP>
 800bdda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bddc:	e040      	b.n	800be60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fc68 	bl	800c6b6 <USBD_CtlError>
              break;
 800bde6:	e03b      	b.n	800be60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	885b      	ldrh	r3, [r3, #2]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d136      	bne.n	800be5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bdf0:	7bbb      	ldrb	r3, [r7, #14]
 800bdf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d004      	beq.n	800be04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bdfa:	7bbb      	ldrb	r3, [r7, #14]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 f9c9 	bl	800d196 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fd21 	bl	800c84c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7ff fde2 	bl	800b9d8 <USBD_CoreFindEP>
 800be14:	4603      	mov	r3, r0
 800be16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be18:	7b7b      	ldrb	r3, [r7, #13]
 800be1a:	2bff      	cmp	r3, #255	; 0xff
 800be1c:	d01f      	beq.n	800be5e <USBD_StdEPReq+0x1c6>
 800be1e:	7b7b      	ldrb	r3, [r7, #13]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d11c      	bne.n	800be5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800be24:	7b7a      	ldrb	r2, [r7, #13]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800be2c:	7b7a      	ldrb	r2, [r7, #13]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	32ae      	adds	r2, #174	; 0xae
 800be32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d010      	beq.n	800be5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be3c:	7b7a      	ldrb	r2, [r7, #13]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	32ae      	adds	r2, #174	; 0xae
 800be42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	4798      	blx	r3
 800be4e:	4603      	mov	r3, r0
 800be50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800be52:	e004      	b.n	800be5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fc2d 	bl	800c6b6 <USBD_CtlError>
              break;
 800be5c:	e000      	b.n	800be60 <USBD_StdEPReq+0x1c8>
              break;
 800be5e:	bf00      	nop
          }
          break;
 800be60:	e0ab      	b.n	800bfba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d002      	beq.n	800be74 <USBD_StdEPReq+0x1dc>
 800be6e:	2b03      	cmp	r3, #3
 800be70:	d032      	beq.n	800bed8 <USBD_StdEPReq+0x240>
 800be72:	e097      	b.n	800bfa4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be74:	7bbb      	ldrb	r3, [r7, #14]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d007      	beq.n	800be8a <USBD_StdEPReq+0x1f2>
 800be7a:	7bbb      	ldrb	r3, [r7, #14]
 800be7c:	2b80      	cmp	r3, #128	; 0x80
 800be7e:	d004      	beq.n	800be8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fc17 	bl	800c6b6 <USBD_CtlError>
                break;
 800be88:	e091      	b.n	800bfae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	da0b      	bge.n	800beaa <USBD_StdEPReq+0x212>
 800be92:	7bbb      	ldrb	r3, [r7, #14]
 800be94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be98:	4613      	mov	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	3310      	adds	r3, #16
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	4413      	add	r3, r2
 800bea6:	3304      	adds	r3, #4
 800bea8:	e00b      	b.n	800bec2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beb0:	4613      	mov	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4413      	add	r3, r2
 800bec0:	3304      	adds	r3, #4
 800bec2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2200      	movs	r2, #0
 800bec8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2202      	movs	r2, #2
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fc61 	bl	800c798 <USBD_CtlSendData>
              break;
 800bed6:	e06a      	b.n	800bfae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da11      	bge.n	800bf04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bee0:	7bbb      	ldrb	r3, [r7, #14]
 800bee2:	f003 020f 	and.w	r2, r3, #15
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	4613      	mov	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	440b      	add	r3, r1
 800bef2:	3324      	adds	r3, #36	; 0x24
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d117      	bne.n	800bf2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fbda 	bl	800c6b6 <USBD_CtlError>
                  break;
 800bf02:	e054      	b.n	800bfae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	f003 020f 	and.w	r2, r3, #15
 800bf0a:	6879      	ldr	r1, [r7, #4]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	440b      	add	r3, r1
 800bf16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf1a:	881b      	ldrh	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d104      	bne.n	800bf2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fbc7 	bl	800c6b6 <USBD_CtlError>
                  break;
 800bf28:	e041      	b.n	800bfae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	da0b      	bge.n	800bf4a <USBD_StdEPReq+0x2b2>
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	3310      	adds	r3, #16
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	4413      	add	r3, r2
 800bf46:	3304      	adds	r3, #4
 800bf48:	e00b      	b.n	800bf62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf4a:	7bbb      	ldrb	r3, [r7, #14]
 800bf4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf50:	4613      	mov	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	4413      	add	r3, r2
 800bf60:	3304      	adds	r3, #4
 800bf62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <USBD_StdEPReq+0x2d8>
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	2b80      	cmp	r3, #128	; 0x80
 800bf6e:	d103      	bne.n	800bf78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	e00e      	b.n	800bf96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f001 f929 	bl	800d1d4 <USBD_LL_IsStallEP>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	e002      	b.n	800bf96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2202      	movs	r2, #2
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fbfb 	bl	800c798 <USBD_CtlSendData>
              break;
 800bfa2:	e004      	b.n	800bfae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fb85 	bl	800c6b6 <USBD_CtlError>
              break;
 800bfac:	bf00      	nop
          }
          break;
 800bfae:	e004      	b.n	800bfba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fb7f 	bl	800c6b6 <USBD_CtlError>
          break;
 800bfb8:	bf00      	nop
      }
      break;
 800bfba:	e005      	b.n	800bfc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fb79 	bl	800c6b6 <USBD_CtlError>
      break;
 800bfc4:	e000      	b.n	800bfc8 <USBD_StdEPReq+0x330>
      break;
 800bfc6:	bf00      	nop
  }

  return ret;
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	885b      	ldrh	r3, [r3, #2]
 800bfee:	0a1b      	lsrs	r3, r3, #8
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	3b01      	subs	r3, #1
 800bff4:	2b0e      	cmp	r3, #14
 800bff6:	f200 8152 	bhi.w	800c29e <USBD_GetDescriptor+0x2ca>
 800bffa:	a201      	add	r2, pc, #4	; (adr r2, 800c000 <USBD_GetDescriptor+0x2c>)
 800bffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c000:	0800c071 	.word	0x0800c071
 800c004:	0800c089 	.word	0x0800c089
 800c008:	0800c0c9 	.word	0x0800c0c9
 800c00c:	0800c29f 	.word	0x0800c29f
 800c010:	0800c29f 	.word	0x0800c29f
 800c014:	0800c23f 	.word	0x0800c23f
 800c018:	0800c26b 	.word	0x0800c26b
 800c01c:	0800c29f 	.word	0x0800c29f
 800c020:	0800c29f 	.word	0x0800c29f
 800c024:	0800c29f 	.word	0x0800c29f
 800c028:	0800c29f 	.word	0x0800c29f
 800c02c:	0800c29f 	.word	0x0800c29f
 800c030:	0800c29f 	.word	0x0800c29f
 800c034:	0800c29f 	.word	0x0800c29f
 800c038:	0800c03d 	.word	0x0800c03d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00b      	beq.n	800c060 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c04e:	69db      	ldr	r3, [r3, #28]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	7c12      	ldrb	r2, [r2, #16]
 800c054:	f107 0108 	add.w	r1, r7, #8
 800c058:	4610      	mov	r0, r2
 800c05a:	4798      	blx	r3
 800c05c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c05e:	e126      	b.n	800c2ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fb27 	bl	800c6b6 <USBD_CtlError>
        err++;
 800c068:	7afb      	ldrb	r3, [r7, #11]
 800c06a:	3301      	adds	r3, #1
 800c06c:	72fb      	strb	r3, [r7, #11]
      break;
 800c06e:	e11e      	b.n	800c2ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	7c12      	ldrb	r2, [r2, #16]
 800c07c:	f107 0108 	add.w	r1, r7, #8
 800c080:	4610      	mov	r0, r2
 800c082:	4798      	blx	r3
 800c084:	60f8      	str	r0, [r7, #12]
      break;
 800c086:	e112      	b.n	800c2ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7c1b      	ldrb	r3, [r3, #16]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10d      	bne.n	800c0ac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c098:	f107 0208 	add.w	r2, r7, #8
 800c09c:	4610      	mov	r0, r2
 800c09e:	4798      	blx	r3
 800c0a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c0aa:	e100      	b.n	800c2ae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	f107 0208 	add.w	r2, r7, #8
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	4798      	blx	r3
 800c0bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	701a      	strb	r2, [r3, #0]
      break;
 800c0c6:	e0f2      	b.n	800c2ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	885b      	ldrh	r3, [r3, #2]
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b05      	cmp	r3, #5
 800c0d0:	f200 80ac 	bhi.w	800c22c <USBD_GetDescriptor+0x258>
 800c0d4:	a201      	add	r2, pc, #4	; (adr r2, 800c0dc <USBD_GetDescriptor+0x108>)
 800c0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0da:	bf00      	nop
 800c0dc:	0800c0f5 	.word	0x0800c0f5
 800c0e0:	0800c129 	.word	0x0800c129
 800c0e4:	0800c15d 	.word	0x0800c15d
 800c0e8:	0800c191 	.word	0x0800c191
 800c0ec:	0800c1c5 	.word	0x0800c1c5
 800c0f0:	0800c1f9 	.word	0x0800c1f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	7c12      	ldrb	r2, [r2, #16]
 800c10c:	f107 0108 	add.w	r1, r7, #8
 800c110:	4610      	mov	r0, r2
 800c112:	4798      	blx	r3
 800c114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c116:	e091      	b.n	800c23c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 facb 	bl	800c6b6 <USBD_CtlError>
            err++;
 800c120:	7afb      	ldrb	r3, [r7, #11]
 800c122:	3301      	adds	r3, #1
 800c124:	72fb      	strb	r3, [r7, #11]
          break;
 800c126:	e089      	b.n	800c23c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00b      	beq.n	800c14c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	7c12      	ldrb	r2, [r2, #16]
 800c140:	f107 0108 	add.w	r1, r7, #8
 800c144:	4610      	mov	r0, r2
 800c146:	4798      	blx	r3
 800c148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c14a:	e077      	b.n	800c23c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fab1 	bl	800c6b6 <USBD_CtlError>
            err++;
 800c154:	7afb      	ldrb	r3, [r7, #11]
 800c156:	3301      	adds	r3, #1
 800c158:	72fb      	strb	r3, [r7, #11]
          break;
 800c15a:	e06f      	b.n	800c23c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00b      	beq.n	800c180 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	7c12      	ldrb	r2, [r2, #16]
 800c174:	f107 0108 	add.w	r1, r7, #8
 800c178:	4610      	mov	r0, r2
 800c17a:	4798      	blx	r3
 800c17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c17e:	e05d      	b.n	800c23c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fa97 	bl	800c6b6 <USBD_CtlError>
            err++;
 800c188:	7afb      	ldrb	r3, [r7, #11]
 800c18a:	3301      	adds	r3, #1
 800c18c:	72fb      	strb	r3, [r7, #11]
          break;
 800c18e:	e055      	b.n	800c23c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	7c12      	ldrb	r2, [r2, #16]
 800c1a8:	f107 0108 	add.w	r1, r7, #8
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	4798      	blx	r3
 800c1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1b2:	e043      	b.n	800c23c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fa7d 	bl	800c6b6 <USBD_CtlError>
            err++;
 800c1bc:	7afb      	ldrb	r3, [r7, #11]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1c2:	e03b      	b.n	800c23c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00b      	beq.n	800c1e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	7c12      	ldrb	r2, [r2, #16]
 800c1dc:	f107 0108 	add.w	r1, r7, #8
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	4798      	blx	r3
 800c1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1e6:	e029      	b.n	800c23c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fa63 	bl	800c6b6 <USBD_CtlError>
            err++;
 800c1f0:	7afb      	ldrb	r3, [r7, #11]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1f6:	e021      	b.n	800c23c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c20a:	699b      	ldr	r3, [r3, #24]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	7c12      	ldrb	r2, [r2, #16]
 800c210:	f107 0108 	add.w	r1, r7, #8
 800c214:	4610      	mov	r0, r2
 800c216:	4798      	blx	r3
 800c218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c21a:	e00f      	b.n	800c23c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fa49 	bl	800c6b6 <USBD_CtlError>
            err++;
 800c224:	7afb      	ldrb	r3, [r7, #11]
 800c226:	3301      	adds	r3, #1
 800c228:	72fb      	strb	r3, [r7, #11]
          break;
 800c22a:	e007      	b.n	800c23c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fa41 	bl	800c6b6 <USBD_CtlError>
          err++;
 800c234:	7afb      	ldrb	r3, [r7, #11]
 800c236:	3301      	adds	r3, #1
 800c238:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c23a:	bf00      	nop
      }
      break;
 800c23c:	e037      	b.n	800c2ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7c1b      	ldrb	r3, [r3, #16]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d109      	bne.n	800c25a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c24e:	f107 0208 	add.w	r2, r7, #8
 800c252:	4610      	mov	r0, r2
 800c254:	4798      	blx	r3
 800c256:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c258:	e029      	b.n	800c2ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fa2a 	bl	800c6b6 <USBD_CtlError>
        err++;
 800c262:	7afb      	ldrb	r3, [r7, #11]
 800c264:	3301      	adds	r3, #1
 800c266:	72fb      	strb	r3, [r7, #11]
      break;
 800c268:	e021      	b.n	800c2ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	7c1b      	ldrb	r3, [r3, #16]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10d      	bne.n	800c28e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27a:	f107 0208 	add.w	r2, r7, #8
 800c27e:	4610      	mov	r0, r2
 800c280:	4798      	blx	r3
 800c282:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	3301      	adds	r3, #1
 800c288:	2207      	movs	r2, #7
 800c28a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c28c:	e00f      	b.n	800c2ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fa10 	bl	800c6b6 <USBD_CtlError>
        err++;
 800c296:	7afb      	ldrb	r3, [r7, #11]
 800c298:	3301      	adds	r3, #1
 800c29a:	72fb      	strb	r3, [r7, #11]
      break;
 800c29c:	e007      	b.n	800c2ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c29e:	6839      	ldr	r1, [r7, #0]
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 fa08 	bl	800c6b6 <USBD_CtlError>
      err++;
 800c2a6:	7afb      	ldrb	r3, [r7, #11]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c2ac:	bf00      	nop
  }

  if (err != 0U)
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d11e      	bne.n	800c2f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	88db      	ldrh	r3, [r3, #6]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d016      	beq.n	800c2ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c2bc:	893b      	ldrh	r3, [r7, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00e      	beq.n	800c2e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	88da      	ldrh	r2, [r3, #6]
 800c2c6:	893b      	ldrh	r3, [r7, #8]
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	bf28      	it	cs
 800c2cc:	4613      	movcs	r3, r2
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2d2:	893b      	ldrh	r3, [r7, #8]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	68f9      	ldr	r1, [r7, #12]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fa5d 	bl	800c798 <USBD_CtlSendData>
 800c2de:	e009      	b.n	800c2f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f9e7 	bl	800c6b6 <USBD_CtlError>
 800c2e8:	e004      	b.n	800c2f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 faae 	bl	800c84c <USBD_CtlSendStatus>
 800c2f0:	e000      	b.n	800c2f4 <USBD_GetDescriptor+0x320>
    return;
 800c2f2:	bf00      	nop
  }
}
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop

0800c2fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	889b      	ldrh	r3, [r3, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d131      	bne.n	800c372 <USBD_SetAddress+0x76>
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	88db      	ldrh	r3, [r3, #6]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d12d      	bne.n	800c372 <USBD_SetAddress+0x76>
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	885b      	ldrh	r3, [r3, #2]
 800c31a:	2b7f      	cmp	r3, #127	; 0x7f
 800c31c:	d829      	bhi.n	800c372 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	885b      	ldrh	r3, [r3, #2]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c328:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b03      	cmp	r3, #3
 800c334:	d104      	bne.n	800c340 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f9bc 	bl	800c6b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c33e:	e01d      	b.n	800c37c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	7bfa      	ldrb	r2, [r7, #15]
 800c344:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c348:	7bfb      	ldrb	r3, [r7, #15]
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 ff6d 	bl	800d22c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fa7a 	bl	800c84c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d004      	beq.n	800c368 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2202      	movs	r2, #2
 800c362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c366:	e009      	b.n	800c37c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c370:	e004      	b.n	800c37c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f99e 	bl	800c6b6 <USBD_CtlError>
  }
}
 800c37a:	bf00      	nop
 800c37c:	bf00      	nop
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	885b      	ldrh	r3, [r3, #2]
 800c396:	b2da      	uxtb	r2, r3
 800c398:	4b4e      	ldr	r3, [pc, #312]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c39a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c39c:	4b4d      	ldr	r3, [pc, #308]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d905      	bls.n	800c3b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f985 	bl	800c6b6 <USBD_CtlError>
    return USBD_FAIL;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	e08c      	b.n	800c4ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d002      	beq.n	800c3c2 <USBD_SetConfig+0x3e>
 800c3bc:	2b03      	cmp	r3, #3
 800c3be:	d029      	beq.n	800c414 <USBD_SetConfig+0x90>
 800c3c0:	e075      	b.n	800c4ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c3c2:	4b44      	ldr	r3, [pc, #272]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d020      	beq.n	800c40c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c3ca:	4b42      	ldr	r3, [pc, #264]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3d4:	4b3f      	ldr	r3, [pc, #252]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f7fe ffbd 	bl	800b35a <USBD_SetClassConfig>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d008      	beq.n	800c3fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f962 	bl	800c6b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2202      	movs	r2, #2
 800c3f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3fa:	e065      	b.n	800c4c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fa25 	bl	800c84c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2203      	movs	r2, #3
 800c406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c40a:	e05d      	b.n	800c4c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fa1d 	bl	800c84c <USBD_CtlSendStatus>
      break;
 800c412:	e059      	b.n	800c4c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c414:	4b2f      	ldr	r3, [pc, #188]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d112      	bne.n	800c442 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2202      	movs	r2, #2
 800c420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c424:	4b2b      	ldr	r3, [pc, #172]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	461a      	mov	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c42e:	4b29      	ldr	r3, [pc, #164]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	4619      	mov	r1, r3
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f7fe ffac 	bl	800b392 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fa06 	bl	800c84c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c440:	e042      	b.n	800c4c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c442:	4b24      	ldr	r3, [pc, #144]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	461a      	mov	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d02a      	beq.n	800c4a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7fe ff9a 	bl	800b392 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c45e:	4b1d      	ldr	r3, [pc, #116]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	461a      	mov	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c468:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7fe ff73 	bl	800b35a <USBD_SetClassConfig>
 800c474:	4603      	mov	r3, r0
 800c476:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00f      	beq.n	800c49e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f918 	bl	800c6b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	4619      	mov	r1, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7fe ff7f 	bl	800b392 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2202      	movs	r2, #2
 800c498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c49c:	e014      	b.n	800c4c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f9d4 	bl	800c84c <USBD_CtlSendStatus>
      break;
 800c4a4:	e010      	b.n	800c4c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f9d0 	bl	800c84c <USBD_CtlSendStatus>
      break;
 800c4ac:	e00c      	b.n	800c4c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 f900 	bl	800c6b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4b6:	4b07      	ldr	r3, [pc, #28]	; (800c4d4 <USBD_SetConfig+0x150>)
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7fe ff68 	bl	800b392 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c6:	bf00      	nop
  }

  return ret;
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	200006d8 	.word	0x200006d8

0800c4d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	88db      	ldrh	r3, [r3, #6]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d004      	beq.n	800c4f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f8e2 	bl	800c6b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c4f2:	e023      	b.n	800c53c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	dc02      	bgt.n	800c506 <USBD_GetConfig+0x2e>
 800c500:	2b00      	cmp	r3, #0
 800c502:	dc03      	bgt.n	800c50c <USBD_GetConfig+0x34>
 800c504:	e015      	b.n	800c532 <USBD_GetConfig+0x5a>
 800c506:	2b03      	cmp	r3, #3
 800c508:	d00b      	beq.n	800c522 <USBD_GetConfig+0x4a>
 800c50a:	e012      	b.n	800c532 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	3308      	adds	r3, #8
 800c516:	2201      	movs	r2, #1
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f93c 	bl	800c798 <USBD_CtlSendData>
        break;
 800c520:	e00c      	b.n	800c53c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	3304      	adds	r3, #4
 800c526:	2201      	movs	r2, #1
 800c528:	4619      	mov	r1, r3
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f934 	bl	800c798 <USBD_CtlSendData>
        break;
 800c530:	e004      	b.n	800c53c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f8be 	bl	800c6b6 <USBD_CtlError>
        break;
 800c53a:	bf00      	nop
}
 800c53c:	bf00      	nop
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c554:	b2db      	uxtb	r3, r3
 800c556:	3b01      	subs	r3, #1
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d81e      	bhi.n	800c59a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	88db      	ldrh	r3, [r3, #6]
 800c560:	2b02      	cmp	r3, #2
 800c562:	d004      	beq.n	800c56e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f8a5 	bl	800c6b6 <USBD_CtlError>
        break;
 800c56c:	e01a      	b.n	800c5a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d005      	beq.n	800c58a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	f043 0202 	orr.w	r2, r3, #2
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	330c      	adds	r3, #12
 800c58e:	2202      	movs	r2, #2
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f900 	bl	800c798 <USBD_CtlSendData>
      break;
 800c598:	e004      	b.n	800c5a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f88a 	bl	800c6b6 <USBD_CtlError>
      break;
 800c5a2:	bf00      	nop
  }
}
 800c5a4:	bf00      	nop
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	885b      	ldrh	r3, [r3, #2]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d107      	bne.n	800c5ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f940 	bl	800c84c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c5cc:	e013      	b.n	800c5f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	885b      	ldrh	r3, [r3, #2]
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d10b      	bne.n	800c5ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	889b      	ldrh	r3, [r3, #4]
 800c5da:	0a1b      	lsrs	r3, r3, #8
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f930 	bl	800c84c <USBD_CtlSendStatus>
}
 800c5ec:	e003      	b.n	800c5f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f860 	bl	800c6b6 <USBD_CtlError>
}
 800c5f6:	bf00      	nop
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	3b01      	subs	r3, #1
 800c612:	2b02      	cmp	r3, #2
 800c614:	d80b      	bhi.n	800c62e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	885b      	ldrh	r3, [r3, #2]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d10c      	bne.n	800c638 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f910 	bl	800c84c <USBD_CtlSendStatus>
      }
      break;
 800c62c:	e004      	b.n	800c638 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f840 	bl	800c6b6 <USBD_CtlError>
      break;
 800c636:	e000      	b.n	800c63a <USBD_ClrFeature+0x3c>
      break;
 800c638:	bf00      	nop
  }
}
 800c63a:	bf00      	nop
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	781a      	ldrb	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3301      	adds	r3, #1
 800c65c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	781a      	ldrb	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3301      	adds	r3, #1
 800c66a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7ff fa17 	bl	800baa0 <SWAPBYTE>
 800c672:	4603      	mov	r3, r0
 800c674:	461a      	mov	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3301      	adds	r3, #1
 800c67e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	3301      	adds	r3, #1
 800c684:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f7ff fa0a 	bl	800baa0 <SWAPBYTE>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	3301      	adds	r3, #1
 800c698:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	3301      	adds	r3, #1
 800c69e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f7ff f9fd 	bl	800baa0 <SWAPBYTE>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	80da      	strh	r2, [r3, #6]
}
 800c6ae:	bf00      	nop
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6c0:	2180      	movs	r1, #128	; 0x80
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fd48 	bl	800d158 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fd44 	bl	800d158 <USBD_LL_StallEP>
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d036      	beq.n	800c75c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c6f2:	6938      	ldr	r0, [r7, #16]
 800c6f4:	f000 f836 	bl	800c764 <USBD_GetLen>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c706:	7dfb      	ldrb	r3, [r7, #23]
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	4413      	add	r3, r2
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	7812      	ldrb	r2, [r2, #0]
 800c710:	701a      	strb	r2, [r3, #0]
  idx++;
 800c712:	7dfb      	ldrb	r3, [r7, #23]
 800c714:	3301      	adds	r3, #1
 800c716:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c718:	7dfb      	ldrb	r3, [r7, #23]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	4413      	add	r3, r2
 800c71e:	2203      	movs	r2, #3
 800c720:	701a      	strb	r2, [r3, #0]
  idx++;
 800c722:	7dfb      	ldrb	r3, [r7, #23]
 800c724:	3301      	adds	r3, #1
 800c726:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c728:	e013      	b.n	800c752 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c72a:	7dfb      	ldrb	r3, [r7, #23]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	4413      	add	r3, r2
 800c730:	693a      	ldr	r2, [r7, #16]
 800c732:	7812      	ldrb	r2, [r2, #0]
 800c734:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	3301      	adds	r3, #1
 800c73a:	613b      	str	r3, [r7, #16]
    idx++;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
 800c73e:	3301      	adds	r3, #1
 800c740:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	4413      	add	r3, r2
 800c748:	2200      	movs	r2, #0
 800c74a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c74c:	7dfb      	ldrb	r3, [r7, #23]
 800c74e:	3301      	adds	r3, #1
 800c750:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1e7      	bne.n	800c72a <USBD_GetString+0x52>
 800c75a:	e000      	b.n	800c75e <USBD_GetString+0x86>
    return;
 800c75c:	bf00      	nop
  }
}
 800c75e:	3718      	adds	r7, #24
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c774:	e005      	b.n	800c782 <USBD_GetLen+0x1e>
  {
    len++;
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	3301      	adds	r3, #1
 800c77a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	3301      	adds	r3, #1
 800c780:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1f5      	bne.n	800c776 <USBD_GetLen+0x12>
  }

  return len;
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	2100      	movs	r1, #0
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f000 fd53 	bl	800d26a <USBD_LL_Transmit>

  return USBD_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b084      	sub	sp, #16
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	60f8      	str	r0, [r7, #12]
 800c7d6:	60b9      	str	r1, [r7, #8]
 800c7d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	2100      	movs	r1, #0
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 fd42 	bl	800d26a <USBD_LL_Transmit>

  return USBD_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2203      	movs	r2, #3
 800c800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	2100      	movs	r1, #0
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 fd46 	bl	800d2ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b084      	sub	sp, #16
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	2100      	movs	r1, #0
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f000 fd35 	bl	800d2ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2204      	movs	r2, #4
 800c858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c85c:	2300      	movs	r3, #0
 800c85e:	2200      	movs	r2, #0
 800c860:	2100      	movs	r1, #0
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fd01 	bl	800d26a <USBD_LL_Transmit>

  return USBD_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2205      	movs	r2, #5
 800c87e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c882:	2300      	movs	r3, #0
 800c884:	2200      	movs	r2, #0
 800c886:	2100      	movs	r1, #0
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 fd0f 	bl	800d2ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c89c:	2200      	movs	r2, #0
 800c89e:	4912      	ldr	r1, [pc, #72]	; (800c8e8 <MX_USB_DEVICE_Init+0x50>)
 800c8a0:	4812      	ldr	r0, [pc, #72]	; (800c8ec <MX_USB_DEVICE_Init+0x54>)
 800c8a2:	f7fe fcdd 	bl	800b260 <USBD_Init>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d001      	beq.n	800c8b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c8ac:	f7f6 f8c6 	bl	8002a3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c8b0:	490f      	ldr	r1, [pc, #60]	; (800c8f0 <MX_USB_DEVICE_Init+0x58>)
 800c8b2:	480e      	ldr	r0, [pc, #56]	; (800c8ec <MX_USB_DEVICE_Init+0x54>)
 800c8b4:	f7fe fd04 	bl	800b2c0 <USBD_RegisterClass>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c8be:	f7f6 f8bd 	bl	8002a3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c8c2:	490c      	ldr	r1, [pc, #48]	; (800c8f4 <MX_USB_DEVICE_Init+0x5c>)
 800c8c4:	4809      	ldr	r0, [pc, #36]	; (800c8ec <MX_USB_DEVICE_Init+0x54>)
 800c8c6:	f7fe fbf5 	bl	800b0b4 <USBD_CDC_RegisterInterface>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c8d0:	f7f6 f8b4 	bl	8002a3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c8d4:	4805      	ldr	r0, [pc, #20]	; (800c8ec <MX_USB_DEVICE_Init+0x54>)
 800c8d6:	f7fe fd29 	bl	800b32c <USBD_Start>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d001      	beq.n	800c8e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c8e0:	f7f6 f8ac 	bl	8002a3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c8e4:	bf00      	nop
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	200000c8 	.word	0x200000c8
 800c8ec:	200006dc 	.word	0x200006dc
 800c8f0:	20000034 	.word	0x20000034
 800c8f4:	200000b4 	.word	0x200000b4

0800c8f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4905      	ldr	r1, [pc, #20]	; (800c914 <CDC_Init_FS+0x1c>)
 800c900:	4805      	ldr	r0, [pc, #20]	; (800c918 <CDC_Init_FS+0x20>)
 800c902:	f7fe fbf1 	bl	800b0e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c906:	4905      	ldr	r1, [pc, #20]	; (800c91c <CDC_Init_FS+0x24>)
 800c908:	4803      	ldr	r0, [pc, #12]	; (800c918 <CDC_Init_FS+0x20>)
 800c90a:	f7fe fc0f 	bl	800b12c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c90e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c910:	4618      	mov	r0, r3
 800c912:	bd80      	pop	{r7, pc}
 800c914:	200011b8 	.word	0x200011b8
 800c918:	200006dc 	.word	0x200006dc
 800c91c:	200009b8 	.word	0x200009b8

0800c920 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c920:	b480      	push	{r7}
 800c922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c924:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c926:	4618      	mov	r0, r3
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	4603      	mov	r3, r0
 800c938:	6039      	str	r1, [r7, #0]
 800c93a:	71fb      	strb	r3, [r7, #7]
 800c93c:	4613      	mov	r3, r2
 800c93e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c940:	79fb      	ldrb	r3, [r7, #7]
 800c942:	2b23      	cmp	r3, #35	; 0x23
 800c944:	d84a      	bhi.n	800c9dc <CDC_Control_FS+0xac>
 800c946:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <CDC_Control_FS+0x1c>)
 800c948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94c:	0800c9dd 	.word	0x0800c9dd
 800c950:	0800c9dd 	.word	0x0800c9dd
 800c954:	0800c9dd 	.word	0x0800c9dd
 800c958:	0800c9dd 	.word	0x0800c9dd
 800c95c:	0800c9dd 	.word	0x0800c9dd
 800c960:	0800c9dd 	.word	0x0800c9dd
 800c964:	0800c9dd 	.word	0x0800c9dd
 800c968:	0800c9dd 	.word	0x0800c9dd
 800c96c:	0800c9dd 	.word	0x0800c9dd
 800c970:	0800c9dd 	.word	0x0800c9dd
 800c974:	0800c9dd 	.word	0x0800c9dd
 800c978:	0800c9dd 	.word	0x0800c9dd
 800c97c:	0800c9dd 	.word	0x0800c9dd
 800c980:	0800c9dd 	.word	0x0800c9dd
 800c984:	0800c9dd 	.word	0x0800c9dd
 800c988:	0800c9dd 	.word	0x0800c9dd
 800c98c:	0800c9dd 	.word	0x0800c9dd
 800c990:	0800c9dd 	.word	0x0800c9dd
 800c994:	0800c9dd 	.word	0x0800c9dd
 800c998:	0800c9dd 	.word	0x0800c9dd
 800c99c:	0800c9dd 	.word	0x0800c9dd
 800c9a0:	0800c9dd 	.word	0x0800c9dd
 800c9a4:	0800c9dd 	.word	0x0800c9dd
 800c9a8:	0800c9dd 	.word	0x0800c9dd
 800c9ac:	0800c9dd 	.word	0x0800c9dd
 800c9b0:	0800c9dd 	.word	0x0800c9dd
 800c9b4:	0800c9dd 	.word	0x0800c9dd
 800c9b8:	0800c9dd 	.word	0x0800c9dd
 800c9bc:	0800c9dd 	.word	0x0800c9dd
 800c9c0:	0800c9dd 	.word	0x0800c9dd
 800c9c4:	0800c9dd 	.word	0x0800c9dd
 800c9c8:	0800c9dd 	.word	0x0800c9dd
 800c9cc:	0800c9dd 	.word	0x0800c9dd
 800c9d0:	0800c9dd 	.word	0x0800c9dd
 800c9d4:	0800c9dd 	.word	0x0800c9dd
 800c9d8:	0800c9dd 	.word	0x0800c9dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c9dc:	bf00      	nop
  }

  return (USBD_OK);
 800c9de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c9f6:	6879      	ldr	r1, [r7, #4]
 800c9f8:	481a      	ldr	r0, [pc, #104]	; (800ca64 <CDC_Receive_FS+0x78>)
 800c9fa:	f7fe fb97 	bl	800b12c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c9fe:	4819      	ldr	r0, [pc, #100]	; (800ca64 <CDC_Receive_FS+0x78>)
 800ca00:	f7fe fbf8 	bl	800b1f4 <USBD_CDC_ReceivePacket>



	  uint8_t len=(uint8_t)*Len;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	73fb      	strb	r3, [r7, #15]
	  memset(&buffer[0],0,8);
 800ca0a:	2208      	movs	r2, #8
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	4816      	ldr	r0, [pc, #88]	; (800ca68 <CDC_Receive_FS+0x7c>)
 800ca10:	f000 fd4a 	bl	800d4a8 <memset>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	461a      	mov	r2, r3
	  memcpy(&buffer[0],&Buf[0],4);
 800ca1a:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <CDC_Receive_FS+0x7c>)
 800ca1c:	601a      	str	r2, [r3, #0]
	  memcpy(&buffer[1],&Buf[0]+4,4);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	3304      	adds	r3, #4
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	461a      	mov	r2, r3
 800ca26:	4b10      	ldr	r3, [pc, #64]	; (800ca68 <CDC_Receive_FS+0x7c>)
 800ca28:	605a      	str	r2, [r3, #4]
	  memcpy(&buffer[2],&Buf[0]+8,4);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	461a      	mov	r2, r3
 800ca32:	4b0d      	ldr	r3, [pc, #52]	; (800ca68 <CDC_Receive_FS+0x7c>)
 800ca34:	609a      	str	r2, [r3, #8]
	  memset(Buf,'\0',len);
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fd33 	bl	800d4a8 <memset>

	  v_in=buffer[0];
 800ca42:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <CDC_Receive_FS+0x7c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a09      	ldr	r2, [pc, #36]	; (800ca6c <CDC_Receive_FS+0x80>)
 800ca48:	6013      	str	r3, [r2, #0]
	  w_in=buffer[1];
 800ca4a:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <CDC_Receive_FS+0x7c>)
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	4a08      	ldr	r2, [pc, #32]	; (800ca70 <CDC_Receive_FS+0x84>)
 800ca50:	6013      	str	r3, [r2, #0]
	  camera_in=buffer[2];
 800ca52:	4b05      	ldr	r3, [pc, #20]	; (800ca68 <CDC_Receive_FS+0x7c>)
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	4a07      	ldr	r2, [pc, #28]	; (800ca74 <CDC_Receive_FS+0x88>)
 800ca58:	6013      	str	r3, [r2, #0]

	  //setSpeed(buffer[0], buffer[1]);//buffer[0] is v_linear, buffer[1] is w_angular

	  //CDC_Transmit_FS(Buf, *Len);
	  return (USBD_OK);
 800ca5a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	200006dc 	.word	0x200006dc
 800ca68:	20000540 	.word	0x20000540
 800ca6c:	2000063c 	.word	0x2000063c
 800ca70:	20000640 	.word	0x20000640
 800ca74:	20000644 	.word	0x20000644

0800ca78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ca88:	4b0d      	ldr	r3, [pc, #52]	; (800cac0 <CDC_Transmit_FS+0x48>)
 800ca8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e00b      	b.n	800cab6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca9e:	887b      	ldrh	r3, [r7, #2]
 800caa0:	461a      	mov	r2, r3
 800caa2:	6879      	ldr	r1, [r7, #4]
 800caa4:	4806      	ldr	r0, [pc, #24]	; (800cac0 <CDC_Transmit_FS+0x48>)
 800caa6:	f7fe fb1f 	bl	800b0e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800caaa:	4805      	ldr	r0, [pc, #20]	; (800cac0 <CDC_Transmit_FS+0x48>)
 800caac:	f7fe fb5c 	bl	800b168 <USBD_CDC_TransmitPacket>
 800cab0:	4603      	mov	r3, r0
 800cab2:	73fb      	strb	r3, [r7, #15]


  /* USER CODE END 7 */
  return result;
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	200006dc 	.word	0x200006dc

0800cac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b087      	sub	sp, #28
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	4613      	mov	r3, r2
 800cad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	371c      	adds	r7, #28
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
	...

0800cae8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	4603      	mov	r3, r0
 800caf0:	6039      	str	r1, [r7, #0]
 800caf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	2212      	movs	r2, #18
 800caf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cafa:	4b03      	ldr	r3, [pc, #12]	; (800cb08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	200000e8 	.word	0x200000e8

0800cb0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	6039      	str	r1, [r7, #0]
 800cb16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	2204      	movs	r2, #4
 800cb1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb1e:	4b03      	ldr	r3, [pc, #12]	; (800cb2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	20000108 	.word	0x20000108

0800cb30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	6039      	str	r1, [r7, #0]
 800cb3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb3c:	79fb      	ldrb	r3, [r7, #7]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d105      	bne.n	800cb4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	4907      	ldr	r1, [pc, #28]	; (800cb64 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb46:	4808      	ldr	r0, [pc, #32]	; (800cb68 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb48:	f7ff fdc6 	bl	800c6d8 <USBD_GetString>
 800cb4c:	e004      	b.n	800cb58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	4904      	ldr	r1, [pc, #16]	; (800cb64 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb52:	4805      	ldr	r0, [pc, #20]	; (800cb68 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb54:	f7ff fdc0 	bl	800c6d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb58:	4b02      	ldr	r3, [pc, #8]	; (800cb64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	200019b8 	.word	0x200019b8
 800cb68:	08011028 	.word	0x08011028

0800cb6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	6039      	str	r1, [r7, #0]
 800cb76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	4904      	ldr	r1, [pc, #16]	; (800cb8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb7c:	4804      	ldr	r0, [pc, #16]	; (800cb90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb7e:	f7ff fdab 	bl	800c6d8 <USBD_GetString>
  return USBD_StrDesc;
 800cb82:	4b02      	ldr	r3, [pc, #8]	; (800cb8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	200019b8 	.word	0x200019b8
 800cb90:	08011040 	.word	0x08011040

0800cb94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	6039      	str	r1, [r7, #0]
 800cb9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	221a      	movs	r2, #26
 800cba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cba6:	f000 f855 	bl	800cc54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cbaa:	4b02      	ldr	r3, [pc, #8]	; (800cbb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	2000010c 	.word	0x2000010c

0800cbb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	6039      	str	r1, [r7, #0]
 800cbc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d105      	bne.n	800cbd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	4907      	ldr	r1, [pc, #28]	; (800cbec <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbce:	4808      	ldr	r0, [pc, #32]	; (800cbf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbd0:	f7ff fd82 	bl	800c6d8 <USBD_GetString>
 800cbd4:	e004      	b.n	800cbe0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	4904      	ldr	r1, [pc, #16]	; (800cbec <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbda:	4805      	ldr	r0, [pc, #20]	; (800cbf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbdc:	f7ff fd7c 	bl	800c6d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbe0:	4b02      	ldr	r3, [pc, #8]	; (800cbec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200019b8 	.word	0x200019b8
 800cbf0:	08011054 	.word	0x08011054

0800cbf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	6039      	str	r1, [r7, #0]
 800cbfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d105      	bne.n	800cc12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	4907      	ldr	r1, [pc, #28]	; (800cc28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc0a:	4808      	ldr	r0, [pc, #32]	; (800cc2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc0c:	f7ff fd64 	bl	800c6d8 <USBD_GetString>
 800cc10:	e004      	b.n	800cc1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	4904      	ldr	r1, [pc, #16]	; (800cc28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc16:	4805      	ldr	r0, [pc, #20]	; (800cc2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc18:	f7ff fd5e 	bl	800c6d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc1c:	4b02      	ldr	r3, [pc, #8]	; (800cc28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	200019b8 	.word	0x200019b8
 800cc2c:	08011060 	.word	0x08011060

0800cc30 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	6039      	str	r1, [r7, #0]
 800cc3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	220c      	movs	r2, #12
 800cc40:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cc42:	4b03      	ldr	r3, [pc, #12]	; (800cc50 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	200000fc 	.word	0x200000fc

0800cc54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc5a:	4b0f      	ldr	r3, [pc, #60]	; (800cc98 <Get_SerialNum+0x44>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc60:	4b0e      	ldr	r3, [pc, #56]	; (800cc9c <Get_SerialNum+0x48>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc66:	4b0e      	ldr	r3, [pc, #56]	; (800cca0 <Get_SerialNum+0x4c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4413      	add	r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d009      	beq.n	800cc8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc7a:	2208      	movs	r2, #8
 800cc7c:	4909      	ldr	r1, [pc, #36]	; (800cca4 <Get_SerialNum+0x50>)
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 f814 	bl	800ccac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc84:	2204      	movs	r2, #4
 800cc86:	4908      	ldr	r1, [pc, #32]	; (800cca8 <Get_SerialNum+0x54>)
 800cc88:	68b8      	ldr	r0, [r7, #8]
 800cc8a:	f000 f80f 	bl	800ccac <IntToUnicode>
  }
}
 800cc8e:	bf00      	nop
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	1fff7a10 	.word	0x1fff7a10
 800cc9c:	1fff7a14 	.word	0x1fff7a14
 800cca0:	1fff7a18 	.word	0x1fff7a18
 800cca4:	2000010e 	.word	0x2000010e
 800cca8:	2000011e 	.word	0x2000011e

0800ccac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b087      	sub	sp, #28
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	75fb      	strb	r3, [r7, #23]
 800ccc2:	e027      	b.n	800cd14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	0f1b      	lsrs	r3, r3, #28
 800ccc8:	2b09      	cmp	r3, #9
 800ccca:	d80b      	bhi.n	800cce4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	0f1b      	lsrs	r3, r3, #28
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	440b      	add	r3, r1
 800ccdc:	3230      	adds	r2, #48	; 0x30
 800ccde:	b2d2      	uxtb	r2, r2
 800cce0:	701a      	strb	r2, [r3, #0]
 800cce2:	e00a      	b.n	800ccfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	0f1b      	lsrs	r3, r3, #28
 800cce8:	b2da      	uxtb	r2, r3
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4619      	mov	r1, r3
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	440b      	add	r3, r1
 800ccf4:	3237      	adds	r2, #55	; 0x37
 800ccf6:	b2d2      	uxtb	r2, r2
 800ccf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	011b      	lsls	r3, r3, #4
 800ccfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd00:	7dfb      	ldrb	r3, [r7, #23]
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	3301      	adds	r3, #1
 800cd06:	68ba      	ldr	r2, [r7, #8]
 800cd08:	4413      	add	r3, r2
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	3301      	adds	r3, #1
 800cd12:	75fb      	strb	r3, [r7, #23]
 800cd14:	7dfa      	ldrb	r2, [r7, #23]
 800cd16:	79fb      	ldrb	r3, [r7, #7]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d3d3      	bcc.n	800ccc4 <IntToUnicode+0x18>
  }
}
 800cd1c:	bf00      	nop
 800cd1e:	bf00      	nop
 800cd20:	371c      	adds	r7, #28
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
	...

0800cd2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b0a0      	sub	sp, #128	; 0x80
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cd38:	2200      	movs	r2, #0
 800cd3a:	601a      	str	r2, [r3, #0]
 800cd3c:	605a      	str	r2, [r3, #4]
 800cd3e:	609a      	str	r2, [r3, #8]
 800cd40:	60da      	str	r2, [r3, #12]
 800cd42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cd44:	f107 0310 	add.w	r3, r7, #16
 800cd48:	225c      	movs	r2, #92	; 0x5c
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 fbab 	bl	800d4a8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd5a:	d156      	bne.n	800ce0a <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cd5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cd62:	2300      	movs	r3, #0
 800cd64:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cd66:	f107 0310 	add.w	r3, r7, #16
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7f9 f80c 	bl	8005d88 <HAL_RCCEx_PeriphCLKConfig>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800cd76:	f7f5 fe61 	bl	8002a3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	4b25      	ldr	r3, [pc, #148]	; (800ce14 <HAL_PCD_MspInit+0xe8>)
 800cd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd82:	4a24      	ldr	r2, [pc, #144]	; (800ce14 <HAL_PCD_MspInit+0xe8>)
 800cd84:	f043 0301 	orr.w	r3, r3, #1
 800cd88:	6313      	str	r3, [r2, #48]	; 0x30
 800cd8a:	4b22      	ldr	r3, [pc, #136]	; (800ce14 <HAL_PCD_MspInit+0xe8>)
 800cd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800cd96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800cd9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cda0:	2300      	movs	r3, #0
 800cda2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cda4:	2303      	movs	r3, #3
 800cda6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cda8:	230a      	movs	r3, #10
 800cdaa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4819      	ldr	r0, [pc, #100]	; (800ce18 <HAL_PCD_MspInit+0xec>)
 800cdb4:	f7f7 f8fa 	bl	8003fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800cdb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdbc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800cdc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cdca:	4619      	mov	r1, r3
 800cdcc:	4812      	ldr	r0, [pc, #72]	; (800ce18 <HAL_PCD_MspInit+0xec>)
 800cdce:	f7f7 f8ed 	bl	8003fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cdd2:	4b10      	ldr	r3, [pc, #64]	; (800ce14 <HAL_PCD_MspInit+0xe8>)
 800cdd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd6:	4a0f      	ldr	r2, [pc, #60]	; (800ce14 <HAL_PCD_MspInit+0xe8>)
 800cdd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cddc:	6353      	str	r3, [r2, #52]	; 0x34
 800cdde:	2300      	movs	r3, #0
 800cde0:	60bb      	str	r3, [r7, #8]
 800cde2:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <HAL_PCD_MspInit+0xe8>)
 800cde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cde6:	4a0b      	ldr	r2, [pc, #44]	; (800ce14 <HAL_PCD_MspInit+0xe8>)
 800cde8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cdec:	6453      	str	r3, [r2, #68]	; 0x44
 800cdee:	4b09      	ldr	r3, [pc, #36]	; (800ce14 <HAL_PCD_MspInit+0xe8>)
 800cdf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdf6:	60bb      	str	r3, [r7, #8]
 800cdf8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	2043      	movs	r0, #67	; 0x43
 800ce00:	f7f7 f80b 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce04:	2043      	movs	r0, #67	; 0x43
 800ce06:	f7f7 f824 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce0a:	bf00      	nop
 800ce0c:	3780      	adds	r7, #128	; 0x80
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	40023800 	.word	0x40023800
 800ce18:	40020000 	.word	0x40020000

0800ce1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ce30:	4619      	mov	r1, r3
 800ce32:	4610      	mov	r0, r2
 800ce34:	f7fe fac7 	bl	800b3c6 <USBD_LL_SetupStage>
}
 800ce38:	bf00      	nop
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ce52:	78fa      	ldrb	r2, [r7, #3]
 800ce54:	6879      	ldr	r1, [r7, #4]
 800ce56:	4613      	mov	r3, r2
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	4413      	add	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	440b      	add	r3, r1
 800ce60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	78fb      	ldrb	r3, [r7, #3]
 800ce68:	4619      	mov	r1, r3
 800ce6a:	f7fe fb01 	bl	800b470 <USBD_LL_DataOutStage>
}
 800ce6e:	bf00      	nop
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	460b      	mov	r3, r1
 800ce80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ce88:	78fa      	ldrb	r2, [r7, #3]
 800ce8a:	6879      	ldr	r1, [r7, #4]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	4413      	add	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	440b      	add	r3, r1
 800ce96:	334c      	adds	r3, #76	; 0x4c
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	78fb      	ldrb	r3, [r7, #3]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	f7fe fb9a 	bl	800b5d6 <USBD_LL_DataInStage>
}
 800cea2:	bf00      	nop
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fe fcce 	bl	800b85a <USBD_LL_SOF>
}
 800cebe:	bf00      	nop
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cece:	2301      	movs	r3, #1
 800ced0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]
 800cede:	e008      	b.n	800cef2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d102      	bne.n	800ceee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cee8:	2301      	movs	r3, #1
 800ceea:	73fb      	strb	r3, [r7, #15]
 800ceec:	e001      	b.n	800cef2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ceee:	f7f5 fda5 	bl	8002a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cef8:	7bfa      	ldrb	r2, [r7, #15]
 800cefa:	4611      	mov	r1, r2
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe fc6e 	bl	800b7de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fe fc16 	bl	800b73a <USBD_LL_Reset>
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
	...

0800cf18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe fc69 	bl	800b7fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	6812      	ldr	r2, [r2, #0]
 800cf3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf3e:	f043 0301 	orr.w	r3, r3, #1
 800cf42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a1b      	ldr	r3, [r3, #32]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d005      	beq.n	800cf58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf4c:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <HAL_PCD_SuspendCallback+0x48>)
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	4a03      	ldr	r2, [pc, #12]	; (800cf60 <HAL_PCD_SuspendCallback+0x48>)
 800cf52:	f043 0306 	orr.w	r3, r3, #6
 800cf56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf58:	bf00      	nop
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	e000ed00 	.word	0xe000ed00

0800cf64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe fc59 	bl	800b82a <USBD_LL_Resume>
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf92:	78fa      	ldrb	r2, [r7, #3]
 800cf94:	4611      	mov	r1, r2
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fe fcb1 	bl	800b8fe <USBD_LL_IsoOUTIncomplete>
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfb6:	78fa      	ldrb	r2, [r7, #3]
 800cfb8:	4611      	mov	r1, r2
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fe fc6d 	bl	800b89a <USBD_LL_IsoINIncomplete>
}
 800cfc0:	bf00      	nop
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe fcc3 	bl	800b962 <USBD_LL_DevConnected>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fcc0 	bl	800b978 <USBD_LL_DevDisconnected>
}
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d13c      	bne.n	800d08a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d010:	4a20      	ldr	r2, [pc, #128]	; (800d094 <USBD_LL_Init+0x94>)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a1e      	ldr	r2, [pc, #120]	; (800d094 <USBD_LL_Init+0x94>)
 800d01c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d020:	4b1c      	ldr	r3, [pc, #112]	; (800d094 <USBD_LL_Init+0x94>)
 800d022:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d026:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d028:	4b1a      	ldr	r3, [pc, #104]	; (800d094 <USBD_LL_Init+0x94>)
 800d02a:	2206      	movs	r2, #6
 800d02c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d02e:	4b19      	ldr	r3, [pc, #100]	; (800d094 <USBD_LL_Init+0x94>)
 800d030:	2202      	movs	r2, #2
 800d032:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d034:	4b17      	ldr	r3, [pc, #92]	; (800d094 <USBD_LL_Init+0x94>)
 800d036:	2200      	movs	r2, #0
 800d038:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d03a:	4b16      	ldr	r3, [pc, #88]	; (800d094 <USBD_LL_Init+0x94>)
 800d03c:	2202      	movs	r2, #2
 800d03e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d040:	4b14      	ldr	r3, [pc, #80]	; (800d094 <USBD_LL_Init+0x94>)
 800d042:	2200      	movs	r2, #0
 800d044:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d046:	4b13      	ldr	r3, [pc, #76]	; (800d094 <USBD_LL_Init+0x94>)
 800d048:	2200      	movs	r2, #0
 800d04a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d04c:	4b11      	ldr	r3, [pc, #68]	; (800d094 <USBD_LL_Init+0x94>)
 800d04e:	2200      	movs	r2, #0
 800d050:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d052:	4b10      	ldr	r3, [pc, #64]	; (800d094 <USBD_LL_Init+0x94>)
 800d054:	2200      	movs	r2, #0
 800d056:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d058:	4b0e      	ldr	r3, [pc, #56]	; (800d094 <USBD_LL_Init+0x94>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d05e:	480d      	ldr	r0, [pc, #52]	; (800d094 <USBD_LL_Init+0x94>)
 800d060:	f7f7 faae 	bl	80045c0 <HAL_PCD_Init>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d06a:	f7f5 fce7 	bl	8002a3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d06e:	2180      	movs	r1, #128	; 0x80
 800d070:	4808      	ldr	r0, [pc, #32]	; (800d094 <USBD_LL_Init+0x94>)
 800d072:	f7f8 fd3a 	bl	8005aea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d076:	2240      	movs	r2, #64	; 0x40
 800d078:	2100      	movs	r1, #0
 800d07a:	4806      	ldr	r0, [pc, #24]	; (800d094 <USBD_LL_Init+0x94>)
 800d07c:	f7f8 fcee 	bl	8005a5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d080:	2280      	movs	r2, #128	; 0x80
 800d082:	2101      	movs	r1, #1
 800d084:	4803      	ldr	r0, [pc, #12]	; (800d094 <USBD_LL_Init+0x94>)
 800d086:	f7f8 fce9 	bl	8005a5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	20001bb8 	.word	0x20001bb8

0800d098 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7f7 fbaa 	bl	8004808 <HAL_PCD_Start>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f000 f990 	bl	800d3e0 <USBD_Get_USB_Status>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	4608      	mov	r0, r1
 800d0d8:	4611      	mov	r1, r2
 800d0da:	461a      	mov	r2, r3
 800d0dc:	4603      	mov	r3, r0
 800d0de:	70fb      	strb	r3, [r7, #3]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70bb      	strb	r3, [r7, #2]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d0f6:	78bb      	ldrb	r3, [r7, #2]
 800d0f8:	883a      	ldrh	r2, [r7, #0]
 800d0fa:	78f9      	ldrb	r1, [r7, #3]
 800d0fc:	f7f8 f8a8 	bl	8005250 <HAL_PCD_EP_Open>
 800d100:	4603      	mov	r3, r0
 800d102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	4618      	mov	r0, r3
 800d108:	f000 f96a 	bl	800d3e0 <USBD_Get_USB_Status>
 800d10c:	4603      	mov	r3, r0
 800d10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d110:	7bbb      	ldrb	r3, [r7, #14]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b084      	sub	sp, #16
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	460b      	mov	r3, r1
 800d124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d126:	2300      	movs	r3, #0
 800d128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d134:	78fa      	ldrb	r2, [r7, #3]
 800d136:	4611      	mov	r1, r2
 800d138:	4618      	mov	r0, r3
 800d13a:	f7f8 f8f1 	bl	8005320 <HAL_PCD_EP_Close>
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	4618      	mov	r0, r3
 800d146:	f000 f94b 	bl	800d3e0 <USBD_Get_USB_Status>
 800d14a:	4603      	mov	r3, r0
 800d14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d164:	2300      	movs	r3, #0
 800d166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d168:	2300      	movs	r3, #0
 800d16a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d172:	78fa      	ldrb	r2, [r7, #3]
 800d174:	4611      	mov	r1, r2
 800d176:	4618      	mov	r0, r3
 800d178:	f7f8 f9c9 	bl	800550e <HAL_PCD_EP_SetStall>
 800d17c:	4603      	mov	r3, r0
 800d17e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d180:	7bfb      	ldrb	r3, [r7, #15]
 800d182:	4618      	mov	r0, r3
 800d184:	f000 f92c 	bl	800d3e0 <USBD_Get_USB_Status>
 800d188:	4603      	mov	r3, r0
 800d18a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d18c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
 800d19e:	460b      	mov	r3, r1
 800d1a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1b0:	78fa      	ldrb	r2, [r7, #3]
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7f8 fa0e 	bl	80055d6 <HAL_PCD_EP_ClrStall>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1be:	7bfb      	ldrb	r3, [r7, #15]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 f90d 	bl	800d3e0 <USBD_Get_USB_Status>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3710      	adds	r7, #16
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	da0b      	bge.n	800d208 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d1f0:	78fb      	ldrb	r3, [r7, #3]
 800d1f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1f6:	68f9      	ldr	r1, [r7, #12]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	4413      	add	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	440b      	add	r3, r1
 800d202:	333e      	adds	r3, #62	; 0x3e
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	e00b      	b.n	800d220 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d208:	78fb      	ldrb	r3, [r7, #3]
 800d20a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d20e:	68f9      	ldr	r1, [r7, #12]
 800d210:	4613      	mov	r3, r2
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	4413      	add	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	440b      	add	r3, r1
 800d21a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d21e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d220:	4618      	mov	r0, r3
 800d222:	3714      	adds	r7, #20
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	460b      	mov	r3, r1
 800d236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d238:	2300      	movs	r3, #0
 800d23a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d246:	78fa      	ldrb	r2, [r7, #3]
 800d248:	4611      	mov	r1, r2
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7f7 ffdb 	bl	8005206 <HAL_PCD_SetAddress>
 800d250:	4603      	mov	r3, r0
 800d252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d254:	7bfb      	ldrb	r3, [r7, #15]
 800d256:	4618      	mov	r0, r3
 800d258:	f000 f8c2 	bl	800d3e0 <USBD_Get_USB_Status>
 800d25c:	4603      	mov	r3, r0
 800d25e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d260:	7bbb      	ldrb	r3, [r7, #14]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b086      	sub	sp, #24
 800d26e:	af00      	add	r7, sp, #0
 800d270:	60f8      	str	r0, [r7, #12]
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	603b      	str	r3, [r7, #0]
 800d276:	460b      	mov	r3, r1
 800d278:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d288:	7af9      	ldrb	r1, [r7, #11]
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	f7f8 f8f4 	bl	800547a <HAL_PCD_EP_Transmit>
 800d292:	4603      	mov	r3, r0
 800d294:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 f8a1 	bl	800d3e0 <USBD_Get_USB_Status>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3718      	adds	r7, #24
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	607a      	str	r2, [r7, #4]
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2ca:	7af9      	ldrb	r1, [r7, #11]
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	f7f8 f870 	bl	80053b4 <HAL_PCD_EP_Receive>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d8:	7dfb      	ldrb	r3, [r7, #23]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 f880 	bl	800d3e0 <USBD_Get_USB_Status>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b082      	sub	sp, #8
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d300:	78fa      	ldrb	r2, [r7, #3]
 800d302:	4611      	mov	r1, r2
 800d304:	4618      	mov	r0, r3
 800d306:	f7f8 f8a0 	bl	800544a <HAL_PCD_EP_GetRxCount>
 800d30a:	4603      	mov	r3, r0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d320:	78fb      	ldrb	r3, [r7, #3]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d002      	beq.n	800d32c <HAL_PCDEx_LPM_Callback+0x18>
 800d326:	2b01      	cmp	r3, #1
 800d328:	d01f      	beq.n	800d36a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d32a:	e03b      	b.n	800d3a4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a1b      	ldr	r3, [r3, #32]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d007      	beq.n	800d344 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d334:	f7f4 f89c 	bl	8001470 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d338:	4b1c      	ldr	r3, [pc, #112]	; (800d3ac <HAL_PCDEx_LPM_Callback+0x98>)
 800d33a:	691b      	ldr	r3, [r3, #16]
 800d33c:	4a1b      	ldr	r2, [pc, #108]	; (800d3ac <HAL_PCDEx_LPM_Callback+0x98>)
 800d33e:	f023 0306 	bic.w	r3, r3, #6
 800d342:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	6812      	ldr	r2, [r2, #0]
 800d352:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d356:	f023 0301 	bic.w	r3, r3, #1
 800d35a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe fa61 	bl	800b82a <USBD_LL_Resume>
    break;
 800d368:	e01c      	b.n	800d3a4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	6812      	ldr	r2, [r2, #0]
 800d378:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d37c:	f043 0301 	orr.w	r3, r3, #1
 800d380:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe fa38 	bl	800b7fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d005      	beq.n	800d3a2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d396:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <HAL_PCDEx_LPM_Callback+0x98>)
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	4a04      	ldr	r2, [pc, #16]	; (800d3ac <HAL_PCDEx_LPM_Callback+0x98>)
 800d39c:	f043 0306 	orr.w	r3, r3, #6
 800d3a0:	6113      	str	r3, [r2, #16]
    break;
 800d3a2:	bf00      	nop
}
 800d3a4:	bf00      	nop
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	e000ed00 	.word	0xe000ed00

0800d3b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d3b8:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <USBD_static_malloc+0x18>)
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	370c      	adds	r7, #12
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	200020c4 	.word	0x200020c4

0800d3cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]

}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3ee:	79fb      	ldrb	r3, [r7, #7]
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d817      	bhi.n	800d424 <USBD_Get_USB_Status+0x44>
 800d3f4:	a201      	add	r2, pc, #4	; (adr r2, 800d3fc <USBD_Get_USB_Status+0x1c>)
 800d3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fa:	bf00      	nop
 800d3fc:	0800d40d 	.word	0x0800d40d
 800d400:	0800d413 	.word	0x0800d413
 800d404:	0800d419 	.word	0x0800d419
 800d408:	0800d41f 	.word	0x0800d41f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73fb      	strb	r3, [r7, #15]
    break;
 800d410:	e00b      	b.n	800d42a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d412:	2303      	movs	r3, #3
 800d414:	73fb      	strb	r3, [r7, #15]
    break;
 800d416:	e008      	b.n	800d42a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d418:	2301      	movs	r3, #1
 800d41a:	73fb      	strb	r3, [r7, #15]
    break;
 800d41c:	e005      	b.n	800d42a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d41e:	2303      	movs	r3, #3
 800d420:	73fb      	strb	r3, [r7, #15]
    break;
 800d422:	e002      	b.n	800d42a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d424:	2303      	movs	r3, #3
 800d426:	73fb      	strb	r3, [r7, #15]
    break;
 800d428:	bf00      	nop
  }
  return usb_status;
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <__errno>:
 800d438:	4b01      	ldr	r3, [pc, #4]	; (800d440 <__errno+0x8>)
 800d43a:	6818      	ldr	r0, [r3, #0]
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	20000128 	.word	0x20000128

0800d444 <__libc_init_array>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	4d0d      	ldr	r5, [pc, #52]	; (800d47c <__libc_init_array+0x38>)
 800d448:	4c0d      	ldr	r4, [pc, #52]	; (800d480 <__libc_init_array+0x3c>)
 800d44a:	1b64      	subs	r4, r4, r5
 800d44c:	10a4      	asrs	r4, r4, #2
 800d44e:	2600      	movs	r6, #0
 800d450:	42a6      	cmp	r6, r4
 800d452:	d109      	bne.n	800d468 <__libc_init_array+0x24>
 800d454:	4d0b      	ldr	r5, [pc, #44]	; (800d484 <__libc_init_array+0x40>)
 800d456:	4c0c      	ldr	r4, [pc, #48]	; (800d488 <__libc_init_array+0x44>)
 800d458:	f003 fdd8 	bl	801100c <_init>
 800d45c:	1b64      	subs	r4, r4, r5
 800d45e:	10a4      	asrs	r4, r4, #2
 800d460:	2600      	movs	r6, #0
 800d462:	42a6      	cmp	r6, r4
 800d464:	d105      	bne.n	800d472 <__libc_init_array+0x2e>
 800d466:	bd70      	pop	{r4, r5, r6, pc}
 800d468:	f855 3b04 	ldr.w	r3, [r5], #4
 800d46c:	4798      	blx	r3
 800d46e:	3601      	adds	r6, #1
 800d470:	e7ee      	b.n	800d450 <__libc_init_array+0xc>
 800d472:	f855 3b04 	ldr.w	r3, [r5], #4
 800d476:	4798      	blx	r3
 800d478:	3601      	adds	r6, #1
 800d47a:	e7f2      	b.n	800d462 <__libc_init_array+0x1e>
 800d47c:	08011648 	.word	0x08011648
 800d480:	08011648 	.word	0x08011648
 800d484:	08011648 	.word	0x08011648
 800d488:	0801164c 	.word	0x0801164c

0800d48c <memcpy>:
 800d48c:	440a      	add	r2, r1
 800d48e:	4291      	cmp	r1, r2
 800d490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d494:	d100      	bne.n	800d498 <memcpy+0xc>
 800d496:	4770      	bx	lr
 800d498:	b510      	push	{r4, lr}
 800d49a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d49e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4a2:	4291      	cmp	r1, r2
 800d4a4:	d1f9      	bne.n	800d49a <memcpy+0xe>
 800d4a6:	bd10      	pop	{r4, pc}

0800d4a8 <memset>:
 800d4a8:	4402      	add	r2, r0
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d100      	bne.n	800d4b2 <memset+0xa>
 800d4b0:	4770      	bx	lr
 800d4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800d4b6:	e7f9      	b.n	800d4ac <memset+0x4>

0800d4b8 <__cvt>:
 800d4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4bc:	ec55 4b10 	vmov	r4, r5, d0
 800d4c0:	2d00      	cmp	r5, #0
 800d4c2:	460e      	mov	r6, r1
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	462b      	mov	r3, r5
 800d4c8:	bfbb      	ittet	lt
 800d4ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d4ce:	461d      	movlt	r5, r3
 800d4d0:	2300      	movge	r3, #0
 800d4d2:	232d      	movlt	r3, #45	; 0x2d
 800d4d4:	700b      	strb	r3, [r1, #0]
 800d4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d4dc:	4691      	mov	r9, r2
 800d4de:	f023 0820 	bic.w	r8, r3, #32
 800d4e2:	bfbc      	itt	lt
 800d4e4:	4622      	movlt	r2, r4
 800d4e6:	4614      	movlt	r4, r2
 800d4e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4ec:	d005      	beq.n	800d4fa <__cvt+0x42>
 800d4ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d4f2:	d100      	bne.n	800d4f6 <__cvt+0x3e>
 800d4f4:	3601      	adds	r6, #1
 800d4f6:	2102      	movs	r1, #2
 800d4f8:	e000      	b.n	800d4fc <__cvt+0x44>
 800d4fa:	2103      	movs	r1, #3
 800d4fc:	ab03      	add	r3, sp, #12
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	ab02      	add	r3, sp, #8
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	ec45 4b10 	vmov	d0, r4, r5
 800d508:	4653      	mov	r3, sl
 800d50a:	4632      	mov	r2, r6
 800d50c:	f000 fccc 	bl	800dea8 <_dtoa_r>
 800d510:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d514:	4607      	mov	r7, r0
 800d516:	d102      	bne.n	800d51e <__cvt+0x66>
 800d518:	f019 0f01 	tst.w	r9, #1
 800d51c:	d022      	beq.n	800d564 <__cvt+0xac>
 800d51e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d522:	eb07 0906 	add.w	r9, r7, r6
 800d526:	d110      	bne.n	800d54a <__cvt+0x92>
 800d528:	783b      	ldrb	r3, [r7, #0]
 800d52a:	2b30      	cmp	r3, #48	; 0x30
 800d52c:	d10a      	bne.n	800d544 <__cvt+0x8c>
 800d52e:	2200      	movs	r2, #0
 800d530:	2300      	movs	r3, #0
 800d532:	4620      	mov	r0, r4
 800d534:	4629      	mov	r1, r5
 800d536:	f7f3 fae7 	bl	8000b08 <__aeabi_dcmpeq>
 800d53a:	b918      	cbnz	r0, 800d544 <__cvt+0x8c>
 800d53c:	f1c6 0601 	rsb	r6, r6, #1
 800d540:	f8ca 6000 	str.w	r6, [sl]
 800d544:	f8da 3000 	ldr.w	r3, [sl]
 800d548:	4499      	add	r9, r3
 800d54a:	2200      	movs	r2, #0
 800d54c:	2300      	movs	r3, #0
 800d54e:	4620      	mov	r0, r4
 800d550:	4629      	mov	r1, r5
 800d552:	f7f3 fad9 	bl	8000b08 <__aeabi_dcmpeq>
 800d556:	b108      	cbz	r0, 800d55c <__cvt+0xa4>
 800d558:	f8cd 900c 	str.w	r9, [sp, #12]
 800d55c:	2230      	movs	r2, #48	; 0x30
 800d55e:	9b03      	ldr	r3, [sp, #12]
 800d560:	454b      	cmp	r3, r9
 800d562:	d307      	bcc.n	800d574 <__cvt+0xbc>
 800d564:	9b03      	ldr	r3, [sp, #12]
 800d566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d568:	1bdb      	subs	r3, r3, r7
 800d56a:	4638      	mov	r0, r7
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	b004      	add	sp, #16
 800d570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d574:	1c59      	adds	r1, r3, #1
 800d576:	9103      	str	r1, [sp, #12]
 800d578:	701a      	strb	r2, [r3, #0]
 800d57a:	e7f0      	b.n	800d55e <__cvt+0xa6>

0800d57c <__exponent>:
 800d57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d57e:	4603      	mov	r3, r0
 800d580:	2900      	cmp	r1, #0
 800d582:	bfb8      	it	lt
 800d584:	4249      	neglt	r1, r1
 800d586:	f803 2b02 	strb.w	r2, [r3], #2
 800d58a:	bfb4      	ite	lt
 800d58c:	222d      	movlt	r2, #45	; 0x2d
 800d58e:	222b      	movge	r2, #43	; 0x2b
 800d590:	2909      	cmp	r1, #9
 800d592:	7042      	strb	r2, [r0, #1]
 800d594:	dd2a      	ble.n	800d5ec <__exponent+0x70>
 800d596:	f10d 0407 	add.w	r4, sp, #7
 800d59a:	46a4      	mov	ip, r4
 800d59c:	270a      	movs	r7, #10
 800d59e:	46a6      	mov	lr, r4
 800d5a0:	460a      	mov	r2, r1
 800d5a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800d5a6:	fb07 1516 	mls	r5, r7, r6, r1
 800d5aa:	3530      	adds	r5, #48	; 0x30
 800d5ac:	2a63      	cmp	r2, #99	; 0x63
 800d5ae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d5b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	dcf1      	bgt.n	800d59e <__exponent+0x22>
 800d5ba:	3130      	adds	r1, #48	; 0x30
 800d5bc:	f1ae 0502 	sub.w	r5, lr, #2
 800d5c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d5c4:	1c44      	adds	r4, r0, #1
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4561      	cmp	r1, ip
 800d5ca:	d30a      	bcc.n	800d5e2 <__exponent+0x66>
 800d5cc:	f10d 0209 	add.w	r2, sp, #9
 800d5d0:	eba2 020e 	sub.w	r2, r2, lr
 800d5d4:	4565      	cmp	r5, ip
 800d5d6:	bf88      	it	hi
 800d5d8:	2200      	movhi	r2, #0
 800d5da:	4413      	add	r3, r2
 800d5dc:	1a18      	subs	r0, r3, r0
 800d5de:	b003      	add	sp, #12
 800d5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d5ea:	e7ed      	b.n	800d5c8 <__exponent+0x4c>
 800d5ec:	2330      	movs	r3, #48	; 0x30
 800d5ee:	3130      	adds	r1, #48	; 0x30
 800d5f0:	7083      	strb	r3, [r0, #2]
 800d5f2:	70c1      	strb	r1, [r0, #3]
 800d5f4:	1d03      	adds	r3, r0, #4
 800d5f6:	e7f1      	b.n	800d5dc <__exponent+0x60>

0800d5f8 <_printf_float>:
 800d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fc:	ed2d 8b02 	vpush	{d8}
 800d600:	b08d      	sub	sp, #52	; 0x34
 800d602:	460c      	mov	r4, r1
 800d604:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d608:	4616      	mov	r6, r2
 800d60a:	461f      	mov	r7, r3
 800d60c:	4605      	mov	r5, r0
 800d60e:	f001 fa39 	bl	800ea84 <_localeconv_r>
 800d612:	f8d0 a000 	ldr.w	sl, [r0]
 800d616:	4650      	mov	r0, sl
 800d618:	f7f2 fdfa 	bl	8000210 <strlen>
 800d61c:	2300      	movs	r3, #0
 800d61e:	930a      	str	r3, [sp, #40]	; 0x28
 800d620:	6823      	ldr	r3, [r4, #0]
 800d622:	9305      	str	r3, [sp, #20]
 800d624:	f8d8 3000 	ldr.w	r3, [r8]
 800d628:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d62c:	3307      	adds	r3, #7
 800d62e:	f023 0307 	bic.w	r3, r3, #7
 800d632:	f103 0208 	add.w	r2, r3, #8
 800d636:	f8c8 2000 	str.w	r2, [r8]
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d642:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d64a:	9307      	str	r3, [sp, #28]
 800d64c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d650:	ee08 0a10 	vmov	s16, r0
 800d654:	4b9f      	ldr	r3, [pc, #636]	; (800d8d4 <_printf_float+0x2dc>)
 800d656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d65a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d65e:	f7f3 fa85 	bl	8000b6c <__aeabi_dcmpun>
 800d662:	bb88      	cbnz	r0, 800d6c8 <_printf_float+0xd0>
 800d664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d668:	4b9a      	ldr	r3, [pc, #616]	; (800d8d4 <_printf_float+0x2dc>)
 800d66a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d66e:	f7f3 fa5f 	bl	8000b30 <__aeabi_dcmple>
 800d672:	bb48      	cbnz	r0, 800d6c8 <_printf_float+0xd0>
 800d674:	2200      	movs	r2, #0
 800d676:	2300      	movs	r3, #0
 800d678:	4640      	mov	r0, r8
 800d67a:	4649      	mov	r1, r9
 800d67c:	f7f3 fa4e 	bl	8000b1c <__aeabi_dcmplt>
 800d680:	b110      	cbz	r0, 800d688 <_printf_float+0x90>
 800d682:	232d      	movs	r3, #45	; 0x2d
 800d684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d688:	4b93      	ldr	r3, [pc, #588]	; (800d8d8 <_printf_float+0x2e0>)
 800d68a:	4894      	ldr	r0, [pc, #592]	; (800d8dc <_printf_float+0x2e4>)
 800d68c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d690:	bf94      	ite	ls
 800d692:	4698      	movls	r8, r3
 800d694:	4680      	movhi	r8, r0
 800d696:	2303      	movs	r3, #3
 800d698:	6123      	str	r3, [r4, #16]
 800d69a:	9b05      	ldr	r3, [sp, #20]
 800d69c:	f023 0204 	bic.w	r2, r3, #4
 800d6a0:	6022      	str	r2, [r4, #0]
 800d6a2:	f04f 0900 	mov.w	r9, #0
 800d6a6:	9700      	str	r7, [sp, #0]
 800d6a8:	4633      	mov	r3, r6
 800d6aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f000 f9d8 	bl	800da64 <_printf_common>
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	f040 8090 	bne.w	800d7da <_printf_float+0x1e2>
 800d6ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6be:	b00d      	add	sp, #52	; 0x34
 800d6c0:	ecbd 8b02 	vpop	{d8}
 800d6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c8:	4642      	mov	r2, r8
 800d6ca:	464b      	mov	r3, r9
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	4649      	mov	r1, r9
 800d6d0:	f7f3 fa4c 	bl	8000b6c <__aeabi_dcmpun>
 800d6d4:	b140      	cbz	r0, 800d6e8 <_printf_float+0xf0>
 800d6d6:	464b      	mov	r3, r9
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	bfbc      	itt	lt
 800d6dc:	232d      	movlt	r3, #45	; 0x2d
 800d6de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6e2:	487f      	ldr	r0, [pc, #508]	; (800d8e0 <_printf_float+0x2e8>)
 800d6e4:	4b7f      	ldr	r3, [pc, #508]	; (800d8e4 <_printf_float+0x2ec>)
 800d6e6:	e7d1      	b.n	800d68c <_printf_float+0x94>
 800d6e8:	6863      	ldr	r3, [r4, #4]
 800d6ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d6ee:	9206      	str	r2, [sp, #24]
 800d6f0:	1c5a      	adds	r2, r3, #1
 800d6f2:	d13f      	bne.n	800d774 <_printf_float+0x17c>
 800d6f4:	2306      	movs	r3, #6
 800d6f6:	6063      	str	r3, [r4, #4]
 800d6f8:	9b05      	ldr	r3, [sp, #20]
 800d6fa:	6861      	ldr	r1, [r4, #4]
 800d6fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d700:	2300      	movs	r3, #0
 800d702:	9303      	str	r3, [sp, #12]
 800d704:	ab0a      	add	r3, sp, #40	; 0x28
 800d706:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d70a:	ab09      	add	r3, sp, #36	; 0x24
 800d70c:	ec49 8b10 	vmov	d0, r8, r9
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	6022      	str	r2, [r4, #0]
 800d714:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d718:	4628      	mov	r0, r5
 800d71a:	f7ff fecd 	bl	800d4b8 <__cvt>
 800d71e:	9b06      	ldr	r3, [sp, #24]
 800d720:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d722:	2b47      	cmp	r3, #71	; 0x47
 800d724:	4680      	mov	r8, r0
 800d726:	d108      	bne.n	800d73a <_printf_float+0x142>
 800d728:	1cc8      	adds	r0, r1, #3
 800d72a:	db02      	blt.n	800d732 <_printf_float+0x13a>
 800d72c:	6863      	ldr	r3, [r4, #4]
 800d72e:	4299      	cmp	r1, r3
 800d730:	dd41      	ble.n	800d7b6 <_printf_float+0x1be>
 800d732:	f1ab 0b02 	sub.w	fp, fp, #2
 800d736:	fa5f fb8b 	uxtb.w	fp, fp
 800d73a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d73e:	d820      	bhi.n	800d782 <_printf_float+0x18a>
 800d740:	3901      	subs	r1, #1
 800d742:	465a      	mov	r2, fp
 800d744:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d748:	9109      	str	r1, [sp, #36]	; 0x24
 800d74a:	f7ff ff17 	bl	800d57c <__exponent>
 800d74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d750:	1813      	adds	r3, r2, r0
 800d752:	2a01      	cmp	r2, #1
 800d754:	4681      	mov	r9, r0
 800d756:	6123      	str	r3, [r4, #16]
 800d758:	dc02      	bgt.n	800d760 <_printf_float+0x168>
 800d75a:	6822      	ldr	r2, [r4, #0]
 800d75c:	07d2      	lsls	r2, r2, #31
 800d75e:	d501      	bpl.n	800d764 <_printf_float+0x16c>
 800d760:	3301      	adds	r3, #1
 800d762:	6123      	str	r3, [r4, #16]
 800d764:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d09c      	beq.n	800d6a6 <_printf_float+0xae>
 800d76c:	232d      	movs	r3, #45	; 0x2d
 800d76e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d772:	e798      	b.n	800d6a6 <_printf_float+0xae>
 800d774:	9a06      	ldr	r2, [sp, #24]
 800d776:	2a47      	cmp	r2, #71	; 0x47
 800d778:	d1be      	bne.n	800d6f8 <_printf_float+0x100>
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1bc      	bne.n	800d6f8 <_printf_float+0x100>
 800d77e:	2301      	movs	r3, #1
 800d780:	e7b9      	b.n	800d6f6 <_printf_float+0xfe>
 800d782:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d786:	d118      	bne.n	800d7ba <_printf_float+0x1c2>
 800d788:	2900      	cmp	r1, #0
 800d78a:	6863      	ldr	r3, [r4, #4]
 800d78c:	dd0b      	ble.n	800d7a6 <_printf_float+0x1ae>
 800d78e:	6121      	str	r1, [r4, #16]
 800d790:	b913      	cbnz	r3, 800d798 <_printf_float+0x1a0>
 800d792:	6822      	ldr	r2, [r4, #0]
 800d794:	07d0      	lsls	r0, r2, #31
 800d796:	d502      	bpl.n	800d79e <_printf_float+0x1a6>
 800d798:	3301      	adds	r3, #1
 800d79a:	440b      	add	r3, r1
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d7a0:	f04f 0900 	mov.w	r9, #0
 800d7a4:	e7de      	b.n	800d764 <_printf_float+0x16c>
 800d7a6:	b913      	cbnz	r3, 800d7ae <_printf_float+0x1b6>
 800d7a8:	6822      	ldr	r2, [r4, #0]
 800d7aa:	07d2      	lsls	r2, r2, #31
 800d7ac:	d501      	bpl.n	800d7b2 <_printf_float+0x1ba>
 800d7ae:	3302      	adds	r3, #2
 800d7b0:	e7f4      	b.n	800d79c <_printf_float+0x1a4>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e7f2      	b.n	800d79c <_printf_float+0x1a4>
 800d7b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d7ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7bc:	4299      	cmp	r1, r3
 800d7be:	db05      	blt.n	800d7cc <_printf_float+0x1d4>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	6121      	str	r1, [r4, #16]
 800d7c4:	07d8      	lsls	r0, r3, #31
 800d7c6:	d5ea      	bpl.n	800d79e <_printf_float+0x1a6>
 800d7c8:	1c4b      	adds	r3, r1, #1
 800d7ca:	e7e7      	b.n	800d79c <_printf_float+0x1a4>
 800d7cc:	2900      	cmp	r1, #0
 800d7ce:	bfd4      	ite	le
 800d7d0:	f1c1 0202 	rsble	r2, r1, #2
 800d7d4:	2201      	movgt	r2, #1
 800d7d6:	4413      	add	r3, r2
 800d7d8:	e7e0      	b.n	800d79c <_printf_float+0x1a4>
 800d7da:	6823      	ldr	r3, [r4, #0]
 800d7dc:	055a      	lsls	r2, r3, #21
 800d7de:	d407      	bmi.n	800d7f0 <_printf_float+0x1f8>
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	4642      	mov	r2, r8
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	47b8      	blx	r7
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	d12c      	bne.n	800d848 <_printf_float+0x250>
 800d7ee:	e764      	b.n	800d6ba <_printf_float+0xc2>
 800d7f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d7f4:	f240 80e0 	bls.w	800d9b8 <_printf_float+0x3c0>
 800d7f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	2300      	movs	r3, #0
 800d800:	f7f3 f982 	bl	8000b08 <__aeabi_dcmpeq>
 800d804:	2800      	cmp	r0, #0
 800d806:	d034      	beq.n	800d872 <_printf_float+0x27a>
 800d808:	4a37      	ldr	r2, [pc, #220]	; (800d8e8 <_printf_float+0x2f0>)
 800d80a:	2301      	movs	r3, #1
 800d80c:	4631      	mov	r1, r6
 800d80e:	4628      	mov	r0, r5
 800d810:	47b8      	blx	r7
 800d812:	3001      	adds	r0, #1
 800d814:	f43f af51 	beq.w	800d6ba <_printf_float+0xc2>
 800d818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d81c:	429a      	cmp	r2, r3
 800d81e:	db02      	blt.n	800d826 <_printf_float+0x22e>
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	07d8      	lsls	r0, r3, #31
 800d824:	d510      	bpl.n	800d848 <_printf_float+0x250>
 800d826:	ee18 3a10 	vmov	r3, s16
 800d82a:	4652      	mov	r2, sl
 800d82c:	4631      	mov	r1, r6
 800d82e:	4628      	mov	r0, r5
 800d830:	47b8      	blx	r7
 800d832:	3001      	adds	r0, #1
 800d834:	f43f af41 	beq.w	800d6ba <_printf_float+0xc2>
 800d838:	f04f 0800 	mov.w	r8, #0
 800d83c:	f104 091a 	add.w	r9, r4, #26
 800d840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d842:	3b01      	subs	r3, #1
 800d844:	4543      	cmp	r3, r8
 800d846:	dc09      	bgt.n	800d85c <_printf_float+0x264>
 800d848:	6823      	ldr	r3, [r4, #0]
 800d84a:	079b      	lsls	r3, r3, #30
 800d84c:	f100 8105 	bmi.w	800da5a <_printf_float+0x462>
 800d850:	68e0      	ldr	r0, [r4, #12]
 800d852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d854:	4298      	cmp	r0, r3
 800d856:	bfb8      	it	lt
 800d858:	4618      	movlt	r0, r3
 800d85a:	e730      	b.n	800d6be <_printf_float+0xc6>
 800d85c:	2301      	movs	r3, #1
 800d85e:	464a      	mov	r2, r9
 800d860:	4631      	mov	r1, r6
 800d862:	4628      	mov	r0, r5
 800d864:	47b8      	blx	r7
 800d866:	3001      	adds	r0, #1
 800d868:	f43f af27 	beq.w	800d6ba <_printf_float+0xc2>
 800d86c:	f108 0801 	add.w	r8, r8, #1
 800d870:	e7e6      	b.n	800d840 <_printf_float+0x248>
 800d872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d874:	2b00      	cmp	r3, #0
 800d876:	dc39      	bgt.n	800d8ec <_printf_float+0x2f4>
 800d878:	4a1b      	ldr	r2, [pc, #108]	; (800d8e8 <_printf_float+0x2f0>)
 800d87a:	2301      	movs	r3, #1
 800d87c:	4631      	mov	r1, r6
 800d87e:	4628      	mov	r0, r5
 800d880:	47b8      	blx	r7
 800d882:	3001      	adds	r0, #1
 800d884:	f43f af19 	beq.w	800d6ba <_printf_float+0xc2>
 800d888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d88c:	4313      	orrs	r3, r2
 800d88e:	d102      	bne.n	800d896 <_printf_float+0x29e>
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	07d9      	lsls	r1, r3, #31
 800d894:	d5d8      	bpl.n	800d848 <_printf_float+0x250>
 800d896:	ee18 3a10 	vmov	r3, s16
 800d89a:	4652      	mov	r2, sl
 800d89c:	4631      	mov	r1, r6
 800d89e:	4628      	mov	r0, r5
 800d8a0:	47b8      	blx	r7
 800d8a2:	3001      	adds	r0, #1
 800d8a4:	f43f af09 	beq.w	800d6ba <_printf_float+0xc2>
 800d8a8:	f04f 0900 	mov.w	r9, #0
 800d8ac:	f104 0a1a 	add.w	sl, r4, #26
 800d8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b2:	425b      	negs	r3, r3
 800d8b4:	454b      	cmp	r3, r9
 800d8b6:	dc01      	bgt.n	800d8bc <_printf_float+0x2c4>
 800d8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ba:	e792      	b.n	800d7e2 <_printf_float+0x1ea>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	4652      	mov	r2, sl
 800d8c0:	4631      	mov	r1, r6
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	47b8      	blx	r7
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	f43f aef7 	beq.w	800d6ba <_printf_float+0xc2>
 800d8cc:	f109 0901 	add.w	r9, r9, #1
 800d8d0:	e7ee      	b.n	800d8b0 <_printf_float+0x2b8>
 800d8d2:	bf00      	nop
 800d8d4:	7fefffff 	.word	0x7fefffff
 800d8d8:	0801108c 	.word	0x0801108c
 800d8dc:	08011090 	.word	0x08011090
 800d8e0:	08011098 	.word	0x08011098
 800d8e4:	08011094 	.word	0x08011094
 800d8e8:	0801109c 	.word	0x0801109c
 800d8ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	bfa8      	it	ge
 800d8f4:	461a      	movge	r2, r3
 800d8f6:	2a00      	cmp	r2, #0
 800d8f8:	4691      	mov	r9, r2
 800d8fa:	dc37      	bgt.n	800d96c <_printf_float+0x374>
 800d8fc:	f04f 0b00 	mov.w	fp, #0
 800d900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d904:	f104 021a 	add.w	r2, r4, #26
 800d908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d90a:	9305      	str	r3, [sp, #20]
 800d90c:	eba3 0309 	sub.w	r3, r3, r9
 800d910:	455b      	cmp	r3, fp
 800d912:	dc33      	bgt.n	800d97c <_printf_float+0x384>
 800d914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d918:	429a      	cmp	r2, r3
 800d91a:	db3b      	blt.n	800d994 <_printf_float+0x39c>
 800d91c:	6823      	ldr	r3, [r4, #0]
 800d91e:	07da      	lsls	r2, r3, #31
 800d920:	d438      	bmi.n	800d994 <_printf_float+0x39c>
 800d922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d924:	9a05      	ldr	r2, [sp, #20]
 800d926:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d928:	1a9a      	subs	r2, r3, r2
 800d92a:	eba3 0901 	sub.w	r9, r3, r1
 800d92e:	4591      	cmp	r9, r2
 800d930:	bfa8      	it	ge
 800d932:	4691      	movge	r9, r2
 800d934:	f1b9 0f00 	cmp.w	r9, #0
 800d938:	dc35      	bgt.n	800d9a6 <_printf_float+0x3ae>
 800d93a:	f04f 0800 	mov.w	r8, #0
 800d93e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d942:	f104 0a1a 	add.w	sl, r4, #26
 800d946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d94a:	1a9b      	subs	r3, r3, r2
 800d94c:	eba3 0309 	sub.w	r3, r3, r9
 800d950:	4543      	cmp	r3, r8
 800d952:	f77f af79 	ble.w	800d848 <_printf_float+0x250>
 800d956:	2301      	movs	r3, #1
 800d958:	4652      	mov	r2, sl
 800d95a:	4631      	mov	r1, r6
 800d95c:	4628      	mov	r0, r5
 800d95e:	47b8      	blx	r7
 800d960:	3001      	adds	r0, #1
 800d962:	f43f aeaa 	beq.w	800d6ba <_printf_float+0xc2>
 800d966:	f108 0801 	add.w	r8, r8, #1
 800d96a:	e7ec      	b.n	800d946 <_printf_float+0x34e>
 800d96c:	4613      	mov	r3, r2
 800d96e:	4631      	mov	r1, r6
 800d970:	4642      	mov	r2, r8
 800d972:	4628      	mov	r0, r5
 800d974:	47b8      	blx	r7
 800d976:	3001      	adds	r0, #1
 800d978:	d1c0      	bne.n	800d8fc <_printf_float+0x304>
 800d97a:	e69e      	b.n	800d6ba <_printf_float+0xc2>
 800d97c:	2301      	movs	r3, #1
 800d97e:	4631      	mov	r1, r6
 800d980:	4628      	mov	r0, r5
 800d982:	9205      	str	r2, [sp, #20]
 800d984:	47b8      	blx	r7
 800d986:	3001      	adds	r0, #1
 800d988:	f43f ae97 	beq.w	800d6ba <_printf_float+0xc2>
 800d98c:	9a05      	ldr	r2, [sp, #20]
 800d98e:	f10b 0b01 	add.w	fp, fp, #1
 800d992:	e7b9      	b.n	800d908 <_printf_float+0x310>
 800d994:	ee18 3a10 	vmov	r3, s16
 800d998:	4652      	mov	r2, sl
 800d99a:	4631      	mov	r1, r6
 800d99c:	4628      	mov	r0, r5
 800d99e:	47b8      	blx	r7
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	d1be      	bne.n	800d922 <_printf_float+0x32a>
 800d9a4:	e689      	b.n	800d6ba <_printf_float+0xc2>
 800d9a6:	9a05      	ldr	r2, [sp, #20]
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	4442      	add	r2, r8
 800d9ac:	4631      	mov	r1, r6
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	47b8      	blx	r7
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	d1c1      	bne.n	800d93a <_printf_float+0x342>
 800d9b6:	e680      	b.n	800d6ba <_printf_float+0xc2>
 800d9b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9ba:	2a01      	cmp	r2, #1
 800d9bc:	dc01      	bgt.n	800d9c2 <_printf_float+0x3ca>
 800d9be:	07db      	lsls	r3, r3, #31
 800d9c0:	d538      	bpl.n	800da34 <_printf_float+0x43c>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	4642      	mov	r2, r8
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	47b8      	blx	r7
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	f43f ae74 	beq.w	800d6ba <_printf_float+0xc2>
 800d9d2:	ee18 3a10 	vmov	r3, s16
 800d9d6:	4652      	mov	r2, sl
 800d9d8:	4631      	mov	r1, r6
 800d9da:	4628      	mov	r0, r5
 800d9dc:	47b8      	blx	r7
 800d9de:	3001      	adds	r0, #1
 800d9e0:	f43f ae6b 	beq.w	800d6ba <_printf_float+0xc2>
 800d9e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f7f3 f88c 	bl	8000b08 <__aeabi_dcmpeq>
 800d9f0:	b9d8      	cbnz	r0, 800da2a <_printf_float+0x432>
 800d9f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9f4:	f108 0201 	add.w	r2, r8, #1
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	47b8      	blx	r7
 800da00:	3001      	adds	r0, #1
 800da02:	d10e      	bne.n	800da22 <_printf_float+0x42a>
 800da04:	e659      	b.n	800d6ba <_printf_float+0xc2>
 800da06:	2301      	movs	r3, #1
 800da08:	4652      	mov	r2, sl
 800da0a:	4631      	mov	r1, r6
 800da0c:	4628      	mov	r0, r5
 800da0e:	47b8      	blx	r7
 800da10:	3001      	adds	r0, #1
 800da12:	f43f ae52 	beq.w	800d6ba <_printf_float+0xc2>
 800da16:	f108 0801 	add.w	r8, r8, #1
 800da1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da1c:	3b01      	subs	r3, #1
 800da1e:	4543      	cmp	r3, r8
 800da20:	dcf1      	bgt.n	800da06 <_printf_float+0x40e>
 800da22:	464b      	mov	r3, r9
 800da24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800da28:	e6dc      	b.n	800d7e4 <_printf_float+0x1ec>
 800da2a:	f04f 0800 	mov.w	r8, #0
 800da2e:	f104 0a1a 	add.w	sl, r4, #26
 800da32:	e7f2      	b.n	800da1a <_printf_float+0x422>
 800da34:	2301      	movs	r3, #1
 800da36:	4642      	mov	r2, r8
 800da38:	e7df      	b.n	800d9fa <_printf_float+0x402>
 800da3a:	2301      	movs	r3, #1
 800da3c:	464a      	mov	r2, r9
 800da3e:	4631      	mov	r1, r6
 800da40:	4628      	mov	r0, r5
 800da42:	47b8      	blx	r7
 800da44:	3001      	adds	r0, #1
 800da46:	f43f ae38 	beq.w	800d6ba <_printf_float+0xc2>
 800da4a:	f108 0801 	add.w	r8, r8, #1
 800da4e:	68e3      	ldr	r3, [r4, #12]
 800da50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da52:	1a5b      	subs	r3, r3, r1
 800da54:	4543      	cmp	r3, r8
 800da56:	dcf0      	bgt.n	800da3a <_printf_float+0x442>
 800da58:	e6fa      	b.n	800d850 <_printf_float+0x258>
 800da5a:	f04f 0800 	mov.w	r8, #0
 800da5e:	f104 0919 	add.w	r9, r4, #25
 800da62:	e7f4      	b.n	800da4e <_printf_float+0x456>

0800da64 <_printf_common>:
 800da64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da68:	4616      	mov	r6, r2
 800da6a:	4699      	mov	r9, r3
 800da6c:	688a      	ldr	r2, [r1, #8]
 800da6e:	690b      	ldr	r3, [r1, #16]
 800da70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da74:	4293      	cmp	r3, r2
 800da76:	bfb8      	it	lt
 800da78:	4613      	movlt	r3, r2
 800da7a:	6033      	str	r3, [r6, #0]
 800da7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da80:	4607      	mov	r7, r0
 800da82:	460c      	mov	r4, r1
 800da84:	b10a      	cbz	r2, 800da8a <_printf_common+0x26>
 800da86:	3301      	adds	r3, #1
 800da88:	6033      	str	r3, [r6, #0]
 800da8a:	6823      	ldr	r3, [r4, #0]
 800da8c:	0699      	lsls	r1, r3, #26
 800da8e:	bf42      	ittt	mi
 800da90:	6833      	ldrmi	r3, [r6, #0]
 800da92:	3302      	addmi	r3, #2
 800da94:	6033      	strmi	r3, [r6, #0]
 800da96:	6825      	ldr	r5, [r4, #0]
 800da98:	f015 0506 	ands.w	r5, r5, #6
 800da9c:	d106      	bne.n	800daac <_printf_common+0x48>
 800da9e:	f104 0a19 	add.w	sl, r4, #25
 800daa2:	68e3      	ldr	r3, [r4, #12]
 800daa4:	6832      	ldr	r2, [r6, #0]
 800daa6:	1a9b      	subs	r3, r3, r2
 800daa8:	42ab      	cmp	r3, r5
 800daaa:	dc26      	bgt.n	800dafa <_printf_common+0x96>
 800daac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dab0:	1e13      	subs	r3, r2, #0
 800dab2:	6822      	ldr	r2, [r4, #0]
 800dab4:	bf18      	it	ne
 800dab6:	2301      	movne	r3, #1
 800dab8:	0692      	lsls	r2, r2, #26
 800daba:	d42b      	bmi.n	800db14 <_printf_common+0xb0>
 800dabc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dac0:	4649      	mov	r1, r9
 800dac2:	4638      	mov	r0, r7
 800dac4:	47c0      	blx	r8
 800dac6:	3001      	adds	r0, #1
 800dac8:	d01e      	beq.n	800db08 <_printf_common+0xa4>
 800daca:	6823      	ldr	r3, [r4, #0]
 800dacc:	68e5      	ldr	r5, [r4, #12]
 800dace:	6832      	ldr	r2, [r6, #0]
 800dad0:	f003 0306 	and.w	r3, r3, #6
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	bf08      	it	eq
 800dad8:	1aad      	subeq	r5, r5, r2
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	6922      	ldr	r2, [r4, #16]
 800dade:	bf0c      	ite	eq
 800dae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dae4:	2500      	movne	r5, #0
 800dae6:	4293      	cmp	r3, r2
 800dae8:	bfc4      	itt	gt
 800daea:	1a9b      	subgt	r3, r3, r2
 800daec:	18ed      	addgt	r5, r5, r3
 800daee:	2600      	movs	r6, #0
 800daf0:	341a      	adds	r4, #26
 800daf2:	42b5      	cmp	r5, r6
 800daf4:	d11a      	bne.n	800db2c <_printf_common+0xc8>
 800daf6:	2000      	movs	r0, #0
 800daf8:	e008      	b.n	800db0c <_printf_common+0xa8>
 800dafa:	2301      	movs	r3, #1
 800dafc:	4652      	mov	r2, sl
 800dafe:	4649      	mov	r1, r9
 800db00:	4638      	mov	r0, r7
 800db02:	47c0      	blx	r8
 800db04:	3001      	adds	r0, #1
 800db06:	d103      	bne.n	800db10 <_printf_common+0xac>
 800db08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db10:	3501      	adds	r5, #1
 800db12:	e7c6      	b.n	800daa2 <_printf_common+0x3e>
 800db14:	18e1      	adds	r1, r4, r3
 800db16:	1c5a      	adds	r2, r3, #1
 800db18:	2030      	movs	r0, #48	; 0x30
 800db1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db1e:	4422      	add	r2, r4
 800db20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db28:	3302      	adds	r3, #2
 800db2a:	e7c7      	b.n	800dabc <_printf_common+0x58>
 800db2c:	2301      	movs	r3, #1
 800db2e:	4622      	mov	r2, r4
 800db30:	4649      	mov	r1, r9
 800db32:	4638      	mov	r0, r7
 800db34:	47c0      	blx	r8
 800db36:	3001      	adds	r0, #1
 800db38:	d0e6      	beq.n	800db08 <_printf_common+0xa4>
 800db3a:	3601      	adds	r6, #1
 800db3c:	e7d9      	b.n	800daf2 <_printf_common+0x8e>
	...

0800db40 <_printf_i>:
 800db40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db44:	7e0f      	ldrb	r7, [r1, #24]
 800db46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db48:	2f78      	cmp	r7, #120	; 0x78
 800db4a:	4691      	mov	r9, r2
 800db4c:	4680      	mov	r8, r0
 800db4e:	460c      	mov	r4, r1
 800db50:	469a      	mov	sl, r3
 800db52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db56:	d807      	bhi.n	800db68 <_printf_i+0x28>
 800db58:	2f62      	cmp	r7, #98	; 0x62
 800db5a:	d80a      	bhi.n	800db72 <_printf_i+0x32>
 800db5c:	2f00      	cmp	r7, #0
 800db5e:	f000 80d8 	beq.w	800dd12 <_printf_i+0x1d2>
 800db62:	2f58      	cmp	r7, #88	; 0x58
 800db64:	f000 80a3 	beq.w	800dcae <_printf_i+0x16e>
 800db68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db70:	e03a      	b.n	800dbe8 <_printf_i+0xa8>
 800db72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db76:	2b15      	cmp	r3, #21
 800db78:	d8f6      	bhi.n	800db68 <_printf_i+0x28>
 800db7a:	a101      	add	r1, pc, #4	; (adr r1, 800db80 <_printf_i+0x40>)
 800db7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db80:	0800dbd9 	.word	0x0800dbd9
 800db84:	0800dbed 	.word	0x0800dbed
 800db88:	0800db69 	.word	0x0800db69
 800db8c:	0800db69 	.word	0x0800db69
 800db90:	0800db69 	.word	0x0800db69
 800db94:	0800db69 	.word	0x0800db69
 800db98:	0800dbed 	.word	0x0800dbed
 800db9c:	0800db69 	.word	0x0800db69
 800dba0:	0800db69 	.word	0x0800db69
 800dba4:	0800db69 	.word	0x0800db69
 800dba8:	0800db69 	.word	0x0800db69
 800dbac:	0800dcf9 	.word	0x0800dcf9
 800dbb0:	0800dc1d 	.word	0x0800dc1d
 800dbb4:	0800dcdb 	.word	0x0800dcdb
 800dbb8:	0800db69 	.word	0x0800db69
 800dbbc:	0800db69 	.word	0x0800db69
 800dbc0:	0800dd1b 	.word	0x0800dd1b
 800dbc4:	0800db69 	.word	0x0800db69
 800dbc8:	0800dc1d 	.word	0x0800dc1d
 800dbcc:	0800db69 	.word	0x0800db69
 800dbd0:	0800db69 	.word	0x0800db69
 800dbd4:	0800dce3 	.word	0x0800dce3
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	1d1a      	adds	r2, r3, #4
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	602a      	str	r2, [r5, #0]
 800dbe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e0a3      	b.n	800dd34 <_printf_i+0x1f4>
 800dbec:	6820      	ldr	r0, [r4, #0]
 800dbee:	6829      	ldr	r1, [r5, #0]
 800dbf0:	0606      	lsls	r6, r0, #24
 800dbf2:	f101 0304 	add.w	r3, r1, #4
 800dbf6:	d50a      	bpl.n	800dc0e <_printf_i+0xce>
 800dbf8:	680e      	ldr	r6, [r1, #0]
 800dbfa:	602b      	str	r3, [r5, #0]
 800dbfc:	2e00      	cmp	r6, #0
 800dbfe:	da03      	bge.n	800dc08 <_printf_i+0xc8>
 800dc00:	232d      	movs	r3, #45	; 0x2d
 800dc02:	4276      	negs	r6, r6
 800dc04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc08:	485e      	ldr	r0, [pc, #376]	; (800dd84 <_printf_i+0x244>)
 800dc0a:	230a      	movs	r3, #10
 800dc0c:	e019      	b.n	800dc42 <_printf_i+0x102>
 800dc0e:	680e      	ldr	r6, [r1, #0]
 800dc10:	602b      	str	r3, [r5, #0]
 800dc12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc16:	bf18      	it	ne
 800dc18:	b236      	sxthne	r6, r6
 800dc1a:	e7ef      	b.n	800dbfc <_printf_i+0xbc>
 800dc1c:	682b      	ldr	r3, [r5, #0]
 800dc1e:	6820      	ldr	r0, [r4, #0]
 800dc20:	1d19      	adds	r1, r3, #4
 800dc22:	6029      	str	r1, [r5, #0]
 800dc24:	0601      	lsls	r1, r0, #24
 800dc26:	d501      	bpl.n	800dc2c <_printf_i+0xec>
 800dc28:	681e      	ldr	r6, [r3, #0]
 800dc2a:	e002      	b.n	800dc32 <_printf_i+0xf2>
 800dc2c:	0646      	lsls	r6, r0, #25
 800dc2e:	d5fb      	bpl.n	800dc28 <_printf_i+0xe8>
 800dc30:	881e      	ldrh	r6, [r3, #0]
 800dc32:	4854      	ldr	r0, [pc, #336]	; (800dd84 <_printf_i+0x244>)
 800dc34:	2f6f      	cmp	r7, #111	; 0x6f
 800dc36:	bf0c      	ite	eq
 800dc38:	2308      	moveq	r3, #8
 800dc3a:	230a      	movne	r3, #10
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc42:	6865      	ldr	r5, [r4, #4]
 800dc44:	60a5      	str	r5, [r4, #8]
 800dc46:	2d00      	cmp	r5, #0
 800dc48:	bfa2      	ittt	ge
 800dc4a:	6821      	ldrge	r1, [r4, #0]
 800dc4c:	f021 0104 	bicge.w	r1, r1, #4
 800dc50:	6021      	strge	r1, [r4, #0]
 800dc52:	b90e      	cbnz	r6, 800dc58 <_printf_i+0x118>
 800dc54:	2d00      	cmp	r5, #0
 800dc56:	d04d      	beq.n	800dcf4 <_printf_i+0x1b4>
 800dc58:	4615      	mov	r5, r2
 800dc5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc5e:	fb03 6711 	mls	r7, r3, r1, r6
 800dc62:	5dc7      	ldrb	r7, [r0, r7]
 800dc64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc68:	4637      	mov	r7, r6
 800dc6a:	42bb      	cmp	r3, r7
 800dc6c:	460e      	mov	r6, r1
 800dc6e:	d9f4      	bls.n	800dc5a <_printf_i+0x11a>
 800dc70:	2b08      	cmp	r3, #8
 800dc72:	d10b      	bne.n	800dc8c <_printf_i+0x14c>
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	07de      	lsls	r6, r3, #31
 800dc78:	d508      	bpl.n	800dc8c <_printf_i+0x14c>
 800dc7a:	6923      	ldr	r3, [r4, #16]
 800dc7c:	6861      	ldr	r1, [r4, #4]
 800dc7e:	4299      	cmp	r1, r3
 800dc80:	bfde      	ittt	le
 800dc82:	2330      	movle	r3, #48	; 0x30
 800dc84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dc8c:	1b52      	subs	r2, r2, r5
 800dc8e:	6122      	str	r2, [r4, #16]
 800dc90:	f8cd a000 	str.w	sl, [sp]
 800dc94:	464b      	mov	r3, r9
 800dc96:	aa03      	add	r2, sp, #12
 800dc98:	4621      	mov	r1, r4
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	f7ff fee2 	bl	800da64 <_printf_common>
 800dca0:	3001      	adds	r0, #1
 800dca2:	d14c      	bne.n	800dd3e <_printf_i+0x1fe>
 800dca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dca8:	b004      	add	sp, #16
 800dcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcae:	4835      	ldr	r0, [pc, #212]	; (800dd84 <_printf_i+0x244>)
 800dcb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dcb4:	6829      	ldr	r1, [r5, #0]
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800dcbc:	6029      	str	r1, [r5, #0]
 800dcbe:	061d      	lsls	r5, r3, #24
 800dcc0:	d514      	bpl.n	800dcec <_printf_i+0x1ac>
 800dcc2:	07df      	lsls	r7, r3, #31
 800dcc4:	bf44      	itt	mi
 800dcc6:	f043 0320 	orrmi.w	r3, r3, #32
 800dcca:	6023      	strmi	r3, [r4, #0]
 800dccc:	b91e      	cbnz	r6, 800dcd6 <_printf_i+0x196>
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	f023 0320 	bic.w	r3, r3, #32
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	2310      	movs	r3, #16
 800dcd8:	e7b0      	b.n	800dc3c <_printf_i+0xfc>
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	f043 0320 	orr.w	r3, r3, #32
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	2378      	movs	r3, #120	; 0x78
 800dce4:	4828      	ldr	r0, [pc, #160]	; (800dd88 <_printf_i+0x248>)
 800dce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcea:	e7e3      	b.n	800dcb4 <_printf_i+0x174>
 800dcec:	0659      	lsls	r1, r3, #25
 800dcee:	bf48      	it	mi
 800dcf0:	b2b6      	uxthmi	r6, r6
 800dcf2:	e7e6      	b.n	800dcc2 <_printf_i+0x182>
 800dcf4:	4615      	mov	r5, r2
 800dcf6:	e7bb      	b.n	800dc70 <_printf_i+0x130>
 800dcf8:	682b      	ldr	r3, [r5, #0]
 800dcfa:	6826      	ldr	r6, [r4, #0]
 800dcfc:	6961      	ldr	r1, [r4, #20]
 800dcfe:	1d18      	adds	r0, r3, #4
 800dd00:	6028      	str	r0, [r5, #0]
 800dd02:	0635      	lsls	r5, r6, #24
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	d501      	bpl.n	800dd0c <_printf_i+0x1cc>
 800dd08:	6019      	str	r1, [r3, #0]
 800dd0a:	e002      	b.n	800dd12 <_printf_i+0x1d2>
 800dd0c:	0670      	lsls	r0, r6, #25
 800dd0e:	d5fb      	bpl.n	800dd08 <_printf_i+0x1c8>
 800dd10:	8019      	strh	r1, [r3, #0]
 800dd12:	2300      	movs	r3, #0
 800dd14:	6123      	str	r3, [r4, #16]
 800dd16:	4615      	mov	r5, r2
 800dd18:	e7ba      	b.n	800dc90 <_printf_i+0x150>
 800dd1a:	682b      	ldr	r3, [r5, #0]
 800dd1c:	1d1a      	adds	r2, r3, #4
 800dd1e:	602a      	str	r2, [r5, #0]
 800dd20:	681d      	ldr	r5, [r3, #0]
 800dd22:	6862      	ldr	r2, [r4, #4]
 800dd24:	2100      	movs	r1, #0
 800dd26:	4628      	mov	r0, r5
 800dd28:	f7f2 fa7a 	bl	8000220 <memchr>
 800dd2c:	b108      	cbz	r0, 800dd32 <_printf_i+0x1f2>
 800dd2e:	1b40      	subs	r0, r0, r5
 800dd30:	6060      	str	r0, [r4, #4]
 800dd32:	6863      	ldr	r3, [r4, #4]
 800dd34:	6123      	str	r3, [r4, #16]
 800dd36:	2300      	movs	r3, #0
 800dd38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd3c:	e7a8      	b.n	800dc90 <_printf_i+0x150>
 800dd3e:	6923      	ldr	r3, [r4, #16]
 800dd40:	462a      	mov	r2, r5
 800dd42:	4649      	mov	r1, r9
 800dd44:	4640      	mov	r0, r8
 800dd46:	47d0      	blx	sl
 800dd48:	3001      	adds	r0, #1
 800dd4a:	d0ab      	beq.n	800dca4 <_printf_i+0x164>
 800dd4c:	6823      	ldr	r3, [r4, #0]
 800dd4e:	079b      	lsls	r3, r3, #30
 800dd50:	d413      	bmi.n	800dd7a <_printf_i+0x23a>
 800dd52:	68e0      	ldr	r0, [r4, #12]
 800dd54:	9b03      	ldr	r3, [sp, #12]
 800dd56:	4298      	cmp	r0, r3
 800dd58:	bfb8      	it	lt
 800dd5a:	4618      	movlt	r0, r3
 800dd5c:	e7a4      	b.n	800dca8 <_printf_i+0x168>
 800dd5e:	2301      	movs	r3, #1
 800dd60:	4632      	mov	r2, r6
 800dd62:	4649      	mov	r1, r9
 800dd64:	4640      	mov	r0, r8
 800dd66:	47d0      	blx	sl
 800dd68:	3001      	adds	r0, #1
 800dd6a:	d09b      	beq.n	800dca4 <_printf_i+0x164>
 800dd6c:	3501      	adds	r5, #1
 800dd6e:	68e3      	ldr	r3, [r4, #12]
 800dd70:	9903      	ldr	r1, [sp, #12]
 800dd72:	1a5b      	subs	r3, r3, r1
 800dd74:	42ab      	cmp	r3, r5
 800dd76:	dcf2      	bgt.n	800dd5e <_printf_i+0x21e>
 800dd78:	e7eb      	b.n	800dd52 <_printf_i+0x212>
 800dd7a:	2500      	movs	r5, #0
 800dd7c:	f104 0619 	add.w	r6, r4, #25
 800dd80:	e7f5      	b.n	800dd6e <_printf_i+0x22e>
 800dd82:	bf00      	nop
 800dd84:	0801109e 	.word	0x0801109e
 800dd88:	080110af 	.word	0x080110af

0800dd8c <quorem>:
 800dd8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	6903      	ldr	r3, [r0, #16]
 800dd92:	690c      	ldr	r4, [r1, #16]
 800dd94:	42a3      	cmp	r3, r4
 800dd96:	4607      	mov	r7, r0
 800dd98:	f2c0 8081 	blt.w	800de9e <quorem+0x112>
 800dd9c:	3c01      	subs	r4, #1
 800dd9e:	f101 0814 	add.w	r8, r1, #20
 800dda2:	f100 0514 	add.w	r5, r0, #20
 800dda6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ddbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddc0:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddc4:	d331      	bcc.n	800de2a <quorem+0x9e>
 800ddc6:	f04f 0e00 	mov.w	lr, #0
 800ddca:	4640      	mov	r0, r8
 800ddcc:	46ac      	mov	ip, r5
 800ddce:	46f2      	mov	sl, lr
 800ddd0:	f850 2b04 	ldr.w	r2, [r0], #4
 800ddd4:	b293      	uxth	r3, r2
 800ddd6:	fb06 e303 	mla	r3, r6, r3, lr
 800ddda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	ebaa 0303 	sub.w	r3, sl, r3
 800dde4:	f8dc a000 	ldr.w	sl, [ip]
 800dde8:	0c12      	lsrs	r2, r2, #16
 800ddea:	fa13 f38a 	uxtah	r3, r3, sl
 800ddee:	fb06 e202 	mla	r2, r6, r2, lr
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	9b00      	ldr	r3, [sp, #0]
 800ddf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ddfa:	b292      	uxth	r2, r2
 800ddfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800de00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de04:	f8bd 3000 	ldrh.w	r3, [sp]
 800de08:	4581      	cmp	r9, r0
 800de0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de0e:	f84c 3b04 	str.w	r3, [ip], #4
 800de12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de16:	d2db      	bcs.n	800ddd0 <quorem+0x44>
 800de18:	f855 300b 	ldr.w	r3, [r5, fp]
 800de1c:	b92b      	cbnz	r3, 800de2a <quorem+0x9e>
 800de1e:	9b01      	ldr	r3, [sp, #4]
 800de20:	3b04      	subs	r3, #4
 800de22:	429d      	cmp	r5, r3
 800de24:	461a      	mov	r2, r3
 800de26:	d32e      	bcc.n	800de86 <quorem+0xfa>
 800de28:	613c      	str	r4, [r7, #16]
 800de2a:	4638      	mov	r0, r7
 800de2c:	f001 f8b8 	bl	800efa0 <__mcmp>
 800de30:	2800      	cmp	r0, #0
 800de32:	db24      	blt.n	800de7e <quorem+0xf2>
 800de34:	3601      	adds	r6, #1
 800de36:	4628      	mov	r0, r5
 800de38:	f04f 0c00 	mov.w	ip, #0
 800de3c:	f858 2b04 	ldr.w	r2, [r8], #4
 800de40:	f8d0 e000 	ldr.w	lr, [r0]
 800de44:	b293      	uxth	r3, r2
 800de46:	ebac 0303 	sub.w	r3, ip, r3
 800de4a:	0c12      	lsrs	r2, r2, #16
 800de4c:	fa13 f38e 	uxtah	r3, r3, lr
 800de50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de58:	b29b      	uxth	r3, r3
 800de5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de5e:	45c1      	cmp	r9, r8
 800de60:	f840 3b04 	str.w	r3, [r0], #4
 800de64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de68:	d2e8      	bcs.n	800de3c <quorem+0xb0>
 800de6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de72:	b922      	cbnz	r2, 800de7e <quorem+0xf2>
 800de74:	3b04      	subs	r3, #4
 800de76:	429d      	cmp	r5, r3
 800de78:	461a      	mov	r2, r3
 800de7a:	d30a      	bcc.n	800de92 <quorem+0x106>
 800de7c:	613c      	str	r4, [r7, #16]
 800de7e:	4630      	mov	r0, r6
 800de80:	b003      	add	sp, #12
 800de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de86:	6812      	ldr	r2, [r2, #0]
 800de88:	3b04      	subs	r3, #4
 800de8a:	2a00      	cmp	r2, #0
 800de8c:	d1cc      	bne.n	800de28 <quorem+0x9c>
 800de8e:	3c01      	subs	r4, #1
 800de90:	e7c7      	b.n	800de22 <quorem+0x96>
 800de92:	6812      	ldr	r2, [r2, #0]
 800de94:	3b04      	subs	r3, #4
 800de96:	2a00      	cmp	r2, #0
 800de98:	d1f0      	bne.n	800de7c <quorem+0xf0>
 800de9a:	3c01      	subs	r4, #1
 800de9c:	e7eb      	b.n	800de76 <quorem+0xea>
 800de9e:	2000      	movs	r0, #0
 800dea0:	e7ee      	b.n	800de80 <quorem+0xf4>
 800dea2:	0000      	movs	r0, r0
 800dea4:	0000      	movs	r0, r0
	...

0800dea8 <_dtoa_r>:
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	ed2d 8b04 	vpush	{d8-d9}
 800deb0:	ec57 6b10 	vmov	r6, r7, d0
 800deb4:	b093      	sub	sp, #76	; 0x4c
 800deb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800deb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800debc:	9106      	str	r1, [sp, #24]
 800debe:	ee10 aa10 	vmov	sl, s0
 800dec2:	4604      	mov	r4, r0
 800dec4:	9209      	str	r2, [sp, #36]	; 0x24
 800dec6:	930c      	str	r3, [sp, #48]	; 0x30
 800dec8:	46bb      	mov	fp, r7
 800deca:	b975      	cbnz	r5, 800deea <_dtoa_r+0x42>
 800decc:	2010      	movs	r0, #16
 800dece:	f000 fddd 	bl	800ea8c <malloc>
 800ded2:	4602      	mov	r2, r0
 800ded4:	6260      	str	r0, [r4, #36]	; 0x24
 800ded6:	b920      	cbnz	r0, 800dee2 <_dtoa_r+0x3a>
 800ded8:	4ba7      	ldr	r3, [pc, #668]	; (800e178 <_dtoa_r+0x2d0>)
 800deda:	21ea      	movs	r1, #234	; 0xea
 800dedc:	48a7      	ldr	r0, [pc, #668]	; (800e17c <_dtoa_r+0x2d4>)
 800dede:	f001 fa67 	bl	800f3b0 <__assert_func>
 800dee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dee6:	6005      	str	r5, [r0, #0]
 800dee8:	60c5      	str	r5, [r0, #12]
 800deea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deec:	6819      	ldr	r1, [r3, #0]
 800deee:	b151      	cbz	r1, 800df06 <_dtoa_r+0x5e>
 800def0:	685a      	ldr	r2, [r3, #4]
 800def2:	604a      	str	r2, [r1, #4]
 800def4:	2301      	movs	r3, #1
 800def6:	4093      	lsls	r3, r2
 800def8:	608b      	str	r3, [r1, #8]
 800defa:	4620      	mov	r0, r4
 800defc:	f000 fe0e 	bl	800eb1c <_Bfree>
 800df00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df02:	2200      	movs	r2, #0
 800df04:	601a      	str	r2, [r3, #0]
 800df06:	1e3b      	subs	r3, r7, #0
 800df08:	bfaa      	itet	ge
 800df0a:	2300      	movge	r3, #0
 800df0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800df10:	f8c8 3000 	strge.w	r3, [r8]
 800df14:	4b9a      	ldr	r3, [pc, #616]	; (800e180 <_dtoa_r+0x2d8>)
 800df16:	bfbc      	itt	lt
 800df18:	2201      	movlt	r2, #1
 800df1a:	f8c8 2000 	strlt.w	r2, [r8]
 800df1e:	ea33 030b 	bics.w	r3, r3, fp
 800df22:	d11b      	bne.n	800df5c <_dtoa_r+0xb4>
 800df24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df26:	f242 730f 	movw	r3, #9999	; 0x270f
 800df2a:	6013      	str	r3, [r2, #0]
 800df2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df30:	4333      	orrs	r3, r6
 800df32:	f000 8592 	beq.w	800ea5a <_dtoa_r+0xbb2>
 800df36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df38:	b963      	cbnz	r3, 800df54 <_dtoa_r+0xac>
 800df3a:	4b92      	ldr	r3, [pc, #584]	; (800e184 <_dtoa_r+0x2dc>)
 800df3c:	e022      	b.n	800df84 <_dtoa_r+0xdc>
 800df3e:	4b92      	ldr	r3, [pc, #584]	; (800e188 <_dtoa_r+0x2e0>)
 800df40:	9301      	str	r3, [sp, #4]
 800df42:	3308      	adds	r3, #8
 800df44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df46:	6013      	str	r3, [r2, #0]
 800df48:	9801      	ldr	r0, [sp, #4]
 800df4a:	b013      	add	sp, #76	; 0x4c
 800df4c:	ecbd 8b04 	vpop	{d8-d9}
 800df50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df54:	4b8b      	ldr	r3, [pc, #556]	; (800e184 <_dtoa_r+0x2dc>)
 800df56:	9301      	str	r3, [sp, #4]
 800df58:	3303      	adds	r3, #3
 800df5a:	e7f3      	b.n	800df44 <_dtoa_r+0x9c>
 800df5c:	2200      	movs	r2, #0
 800df5e:	2300      	movs	r3, #0
 800df60:	4650      	mov	r0, sl
 800df62:	4659      	mov	r1, fp
 800df64:	f7f2 fdd0 	bl	8000b08 <__aeabi_dcmpeq>
 800df68:	ec4b ab19 	vmov	d9, sl, fp
 800df6c:	4680      	mov	r8, r0
 800df6e:	b158      	cbz	r0, 800df88 <_dtoa_r+0xe0>
 800df70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df72:	2301      	movs	r3, #1
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f000 856b 	beq.w	800ea54 <_dtoa_r+0xbac>
 800df7e:	4883      	ldr	r0, [pc, #524]	; (800e18c <_dtoa_r+0x2e4>)
 800df80:	6018      	str	r0, [r3, #0]
 800df82:	1e43      	subs	r3, r0, #1
 800df84:	9301      	str	r3, [sp, #4]
 800df86:	e7df      	b.n	800df48 <_dtoa_r+0xa0>
 800df88:	ec4b ab10 	vmov	d0, sl, fp
 800df8c:	aa10      	add	r2, sp, #64	; 0x40
 800df8e:	a911      	add	r1, sp, #68	; 0x44
 800df90:	4620      	mov	r0, r4
 800df92:	f001 f8ab 	bl	800f0ec <__d2b>
 800df96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800df9a:	ee08 0a10 	vmov	s16, r0
 800df9e:	2d00      	cmp	r5, #0
 800dfa0:	f000 8084 	beq.w	800e0ac <_dtoa_r+0x204>
 800dfa4:	ee19 3a90 	vmov	r3, s19
 800dfa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dfb0:	4656      	mov	r6, sl
 800dfb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dfb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dfba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dfbe:	4b74      	ldr	r3, [pc, #464]	; (800e190 <_dtoa_r+0x2e8>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	f7f2 f97f 	bl	80002c8 <__aeabi_dsub>
 800dfca:	a365      	add	r3, pc, #404	; (adr r3, 800e160 <_dtoa_r+0x2b8>)
 800dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd0:	f7f2 fb32 	bl	8000638 <__aeabi_dmul>
 800dfd4:	a364      	add	r3, pc, #400	; (adr r3, 800e168 <_dtoa_r+0x2c0>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	f7f2 f977 	bl	80002cc <__adddf3>
 800dfde:	4606      	mov	r6, r0
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	460f      	mov	r7, r1
 800dfe4:	f7f2 fabe 	bl	8000564 <__aeabi_i2d>
 800dfe8:	a361      	add	r3, pc, #388	; (adr r3, 800e170 <_dtoa_r+0x2c8>)
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	f7f2 fb23 	bl	8000638 <__aeabi_dmul>
 800dff2:	4602      	mov	r2, r0
 800dff4:	460b      	mov	r3, r1
 800dff6:	4630      	mov	r0, r6
 800dff8:	4639      	mov	r1, r7
 800dffa:	f7f2 f967 	bl	80002cc <__adddf3>
 800dffe:	4606      	mov	r6, r0
 800e000:	460f      	mov	r7, r1
 800e002:	f7f2 fdc9 	bl	8000b98 <__aeabi_d2iz>
 800e006:	2200      	movs	r2, #0
 800e008:	9000      	str	r0, [sp, #0]
 800e00a:	2300      	movs	r3, #0
 800e00c:	4630      	mov	r0, r6
 800e00e:	4639      	mov	r1, r7
 800e010:	f7f2 fd84 	bl	8000b1c <__aeabi_dcmplt>
 800e014:	b150      	cbz	r0, 800e02c <_dtoa_r+0x184>
 800e016:	9800      	ldr	r0, [sp, #0]
 800e018:	f7f2 faa4 	bl	8000564 <__aeabi_i2d>
 800e01c:	4632      	mov	r2, r6
 800e01e:	463b      	mov	r3, r7
 800e020:	f7f2 fd72 	bl	8000b08 <__aeabi_dcmpeq>
 800e024:	b910      	cbnz	r0, 800e02c <_dtoa_r+0x184>
 800e026:	9b00      	ldr	r3, [sp, #0]
 800e028:	3b01      	subs	r3, #1
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	9b00      	ldr	r3, [sp, #0]
 800e02e:	2b16      	cmp	r3, #22
 800e030:	d85a      	bhi.n	800e0e8 <_dtoa_r+0x240>
 800e032:	9a00      	ldr	r2, [sp, #0]
 800e034:	4b57      	ldr	r3, [pc, #348]	; (800e194 <_dtoa_r+0x2ec>)
 800e036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	ec51 0b19 	vmov	r0, r1, d9
 800e042:	f7f2 fd6b 	bl	8000b1c <__aeabi_dcmplt>
 800e046:	2800      	cmp	r0, #0
 800e048:	d050      	beq.n	800e0ec <_dtoa_r+0x244>
 800e04a:	9b00      	ldr	r3, [sp, #0]
 800e04c:	3b01      	subs	r3, #1
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	2300      	movs	r3, #0
 800e052:	930b      	str	r3, [sp, #44]	; 0x2c
 800e054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e056:	1b5d      	subs	r5, r3, r5
 800e058:	1e6b      	subs	r3, r5, #1
 800e05a:	9305      	str	r3, [sp, #20]
 800e05c:	bf45      	ittet	mi
 800e05e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e062:	9304      	strmi	r3, [sp, #16]
 800e064:	2300      	movpl	r3, #0
 800e066:	2300      	movmi	r3, #0
 800e068:	bf4c      	ite	mi
 800e06a:	9305      	strmi	r3, [sp, #20]
 800e06c:	9304      	strpl	r3, [sp, #16]
 800e06e:	9b00      	ldr	r3, [sp, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	db3d      	blt.n	800e0f0 <_dtoa_r+0x248>
 800e074:	9b05      	ldr	r3, [sp, #20]
 800e076:	9a00      	ldr	r2, [sp, #0]
 800e078:	920a      	str	r2, [sp, #40]	; 0x28
 800e07a:	4413      	add	r3, r2
 800e07c:	9305      	str	r3, [sp, #20]
 800e07e:	2300      	movs	r3, #0
 800e080:	9307      	str	r3, [sp, #28]
 800e082:	9b06      	ldr	r3, [sp, #24]
 800e084:	2b09      	cmp	r3, #9
 800e086:	f200 8089 	bhi.w	800e19c <_dtoa_r+0x2f4>
 800e08a:	2b05      	cmp	r3, #5
 800e08c:	bfc4      	itt	gt
 800e08e:	3b04      	subgt	r3, #4
 800e090:	9306      	strgt	r3, [sp, #24]
 800e092:	9b06      	ldr	r3, [sp, #24]
 800e094:	f1a3 0302 	sub.w	r3, r3, #2
 800e098:	bfcc      	ite	gt
 800e09a:	2500      	movgt	r5, #0
 800e09c:	2501      	movle	r5, #1
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	f200 8087 	bhi.w	800e1b2 <_dtoa_r+0x30a>
 800e0a4:	e8df f003 	tbb	[pc, r3]
 800e0a8:	59383a2d 	.word	0x59383a2d
 800e0ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e0b0:	441d      	add	r5, r3
 800e0b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e0b6:	2b20      	cmp	r3, #32
 800e0b8:	bfc1      	itttt	gt
 800e0ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e0be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e0c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e0c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e0ca:	bfda      	itte	le
 800e0cc:	f1c3 0320 	rsble	r3, r3, #32
 800e0d0:	fa06 f003 	lslle.w	r0, r6, r3
 800e0d4:	4318      	orrgt	r0, r3
 800e0d6:	f7f2 fa35 	bl	8000544 <__aeabi_ui2d>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	4606      	mov	r6, r0
 800e0de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e0e2:	3d01      	subs	r5, #1
 800e0e4:	930e      	str	r3, [sp, #56]	; 0x38
 800e0e6:	e76a      	b.n	800dfbe <_dtoa_r+0x116>
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e7b2      	b.n	800e052 <_dtoa_r+0x1aa>
 800e0ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800e0ee:	e7b1      	b.n	800e054 <_dtoa_r+0x1ac>
 800e0f0:	9b04      	ldr	r3, [sp, #16]
 800e0f2:	9a00      	ldr	r2, [sp, #0]
 800e0f4:	1a9b      	subs	r3, r3, r2
 800e0f6:	9304      	str	r3, [sp, #16]
 800e0f8:	4253      	negs	r3, r2
 800e0fa:	9307      	str	r3, [sp, #28]
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800e100:	e7bf      	b.n	800e082 <_dtoa_r+0x1da>
 800e102:	2300      	movs	r3, #0
 800e104:	9308      	str	r3, [sp, #32]
 800e106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e108:	2b00      	cmp	r3, #0
 800e10a:	dc55      	bgt.n	800e1b8 <_dtoa_r+0x310>
 800e10c:	2301      	movs	r3, #1
 800e10e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e112:	461a      	mov	r2, r3
 800e114:	9209      	str	r2, [sp, #36]	; 0x24
 800e116:	e00c      	b.n	800e132 <_dtoa_r+0x28a>
 800e118:	2301      	movs	r3, #1
 800e11a:	e7f3      	b.n	800e104 <_dtoa_r+0x25c>
 800e11c:	2300      	movs	r3, #0
 800e11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e120:	9308      	str	r3, [sp, #32]
 800e122:	9b00      	ldr	r3, [sp, #0]
 800e124:	4413      	add	r3, r2
 800e126:	9302      	str	r3, [sp, #8]
 800e128:	3301      	adds	r3, #1
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	9303      	str	r3, [sp, #12]
 800e12e:	bfb8      	it	lt
 800e130:	2301      	movlt	r3, #1
 800e132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e134:	2200      	movs	r2, #0
 800e136:	6042      	str	r2, [r0, #4]
 800e138:	2204      	movs	r2, #4
 800e13a:	f102 0614 	add.w	r6, r2, #20
 800e13e:	429e      	cmp	r6, r3
 800e140:	6841      	ldr	r1, [r0, #4]
 800e142:	d93d      	bls.n	800e1c0 <_dtoa_r+0x318>
 800e144:	4620      	mov	r0, r4
 800e146:	f000 fca9 	bl	800ea9c <_Balloc>
 800e14a:	9001      	str	r0, [sp, #4]
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d13b      	bne.n	800e1c8 <_dtoa_r+0x320>
 800e150:	4b11      	ldr	r3, [pc, #68]	; (800e198 <_dtoa_r+0x2f0>)
 800e152:	4602      	mov	r2, r0
 800e154:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e158:	e6c0      	b.n	800dedc <_dtoa_r+0x34>
 800e15a:	2301      	movs	r3, #1
 800e15c:	e7df      	b.n	800e11e <_dtoa_r+0x276>
 800e15e:	bf00      	nop
 800e160:	636f4361 	.word	0x636f4361
 800e164:	3fd287a7 	.word	0x3fd287a7
 800e168:	8b60c8b3 	.word	0x8b60c8b3
 800e16c:	3fc68a28 	.word	0x3fc68a28
 800e170:	509f79fb 	.word	0x509f79fb
 800e174:	3fd34413 	.word	0x3fd34413
 800e178:	080110cd 	.word	0x080110cd
 800e17c:	080110e4 	.word	0x080110e4
 800e180:	7ff00000 	.word	0x7ff00000
 800e184:	080110c9 	.word	0x080110c9
 800e188:	080110c0 	.word	0x080110c0
 800e18c:	0801109d 	.word	0x0801109d
 800e190:	3ff80000 	.word	0x3ff80000
 800e194:	080111d8 	.word	0x080111d8
 800e198:	0801113f 	.word	0x0801113f
 800e19c:	2501      	movs	r5, #1
 800e19e:	2300      	movs	r3, #0
 800e1a0:	9306      	str	r3, [sp, #24]
 800e1a2:	9508      	str	r5, [sp, #32]
 800e1a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	2312      	movs	r3, #18
 800e1b0:	e7b0      	b.n	800e114 <_dtoa_r+0x26c>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	9308      	str	r3, [sp, #32]
 800e1b6:	e7f5      	b.n	800e1a4 <_dtoa_r+0x2fc>
 800e1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1be:	e7b8      	b.n	800e132 <_dtoa_r+0x28a>
 800e1c0:	3101      	adds	r1, #1
 800e1c2:	6041      	str	r1, [r0, #4]
 800e1c4:	0052      	lsls	r2, r2, #1
 800e1c6:	e7b8      	b.n	800e13a <_dtoa_r+0x292>
 800e1c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1ca:	9a01      	ldr	r2, [sp, #4]
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	2b0e      	cmp	r3, #14
 800e1d2:	f200 809d 	bhi.w	800e310 <_dtoa_r+0x468>
 800e1d6:	2d00      	cmp	r5, #0
 800e1d8:	f000 809a 	beq.w	800e310 <_dtoa_r+0x468>
 800e1dc:	9b00      	ldr	r3, [sp, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	dd32      	ble.n	800e248 <_dtoa_r+0x3a0>
 800e1e2:	4ab7      	ldr	r2, [pc, #732]	; (800e4c0 <_dtoa_r+0x618>)
 800e1e4:	f003 030f 	and.w	r3, r3, #15
 800e1e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1f0:	9b00      	ldr	r3, [sp, #0]
 800e1f2:	05d8      	lsls	r0, r3, #23
 800e1f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e1f8:	d516      	bpl.n	800e228 <_dtoa_r+0x380>
 800e1fa:	4bb2      	ldr	r3, [pc, #712]	; (800e4c4 <_dtoa_r+0x61c>)
 800e1fc:	ec51 0b19 	vmov	r0, r1, d9
 800e200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e204:	f7f2 fb42 	bl	800088c <__aeabi_ddiv>
 800e208:	f007 070f 	and.w	r7, r7, #15
 800e20c:	4682      	mov	sl, r0
 800e20e:	468b      	mov	fp, r1
 800e210:	2503      	movs	r5, #3
 800e212:	4eac      	ldr	r6, [pc, #688]	; (800e4c4 <_dtoa_r+0x61c>)
 800e214:	b957      	cbnz	r7, 800e22c <_dtoa_r+0x384>
 800e216:	4642      	mov	r2, r8
 800e218:	464b      	mov	r3, r9
 800e21a:	4650      	mov	r0, sl
 800e21c:	4659      	mov	r1, fp
 800e21e:	f7f2 fb35 	bl	800088c <__aeabi_ddiv>
 800e222:	4682      	mov	sl, r0
 800e224:	468b      	mov	fp, r1
 800e226:	e028      	b.n	800e27a <_dtoa_r+0x3d2>
 800e228:	2502      	movs	r5, #2
 800e22a:	e7f2      	b.n	800e212 <_dtoa_r+0x36a>
 800e22c:	07f9      	lsls	r1, r7, #31
 800e22e:	d508      	bpl.n	800e242 <_dtoa_r+0x39a>
 800e230:	4640      	mov	r0, r8
 800e232:	4649      	mov	r1, r9
 800e234:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e238:	f7f2 f9fe 	bl	8000638 <__aeabi_dmul>
 800e23c:	3501      	adds	r5, #1
 800e23e:	4680      	mov	r8, r0
 800e240:	4689      	mov	r9, r1
 800e242:	107f      	asrs	r7, r7, #1
 800e244:	3608      	adds	r6, #8
 800e246:	e7e5      	b.n	800e214 <_dtoa_r+0x36c>
 800e248:	f000 809b 	beq.w	800e382 <_dtoa_r+0x4da>
 800e24c:	9b00      	ldr	r3, [sp, #0]
 800e24e:	4f9d      	ldr	r7, [pc, #628]	; (800e4c4 <_dtoa_r+0x61c>)
 800e250:	425e      	negs	r6, r3
 800e252:	4b9b      	ldr	r3, [pc, #620]	; (800e4c0 <_dtoa_r+0x618>)
 800e254:	f006 020f 	and.w	r2, r6, #15
 800e258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	ec51 0b19 	vmov	r0, r1, d9
 800e264:	f7f2 f9e8 	bl	8000638 <__aeabi_dmul>
 800e268:	1136      	asrs	r6, r6, #4
 800e26a:	4682      	mov	sl, r0
 800e26c:	468b      	mov	fp, r1
 800e26e:	2300      	movs	r3, #0
 800e270:	2502      	movs	r5, #2
 800e272:	2e00      	cmp	r6, #0
 800e274:	d17a      	bne.n	800e36c <_dtoa_r+0x4c4>
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1d3      	bne.n	800e222 <_dtoa_r+0x37a>
 800e27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f000 8082 	beq.w	800e386 <_dtoa_r+0x4de>
 800e282:	4b91      	ldr	r3, [pc, #580]	; (800e4c8 <_dtoa_r+0x620>)
 800e284:	2200      	movs	r2, #0
 800e286:	4650      	mov	r0, sl
 800e288:	4659      	mov	r1, fp
 800e28a:	f7f2 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800e28e:	2800      	cmp	r0, #0
 800e290:	d079      	beq.n	800e386 <_dtoa_r+0x4de>
 800e292:	9b03      	ldr	r3, [sp, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d076      	beq.n	800e386 <_dtoa_r+0x4de>
 800e298:	9b02      	ldr	r3, [sp, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	dd36      	ble.n	800e30c <_dtoa_r+0x464>
 800e29e:	9b00      	ldr	r3, [sp, #0]
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	4659      	mov	r1, fp
 800e2a4:	1e5f      	subs	r7, r3, #1
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	4b88      	ldr	r3, [pc, #544]	; (800e4cc <_dtoa_r+0x624>)
 800e2aa:	f7f2 f9c5 	bl	8000638 <__aeabi_dmul>
 800e2ae:	9e02      	ldr	r6, [sp, #8]
 800e2b0:	4682      	mov	sl, r0
 800e2b2:	468b      	mov	fp, r1
 800e2b4:	3501      	adds	r5, #1
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f7f2 f954 	bl	8000564 <__aeabi_i2d>
 800e2bc:	4652      	mov	r2, sl
 800e2be:	465b      	mov	r3, fp
 800e2c0:	f7f2 f9ba 	bl	8000638 <__aeabi_dmul>
 800e2c4:	4b82      	ldr	r3, [pc, #520]	; (800e4d0 <_dtoa_r+0x628>)
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f7f2 f800 	bl	80002cc <__adddf3>
 800e2cc:	46d0      	mov	r8, sl
 800e2ce:	46d9      	mov	r9, fp
 800e2d0:	4682      	mov	sl, r0
 800e2d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e2d6:	2e00      	cmp	r6, #0
 800e2d8:	d158      	bne.n	800e38c <_dtoa_r+0x4e4>
 800e2da:	4b7e      	ldr	r3, [pc, #504]	; (800e4d4 <_dtoa_r+0x62c>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	4640      	mov	r0, r8
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	f7f1 fff1 	bl	80002c8 <__aeabi_dsub>
 800e2e6:	4652      	mov	r2, sl
 800e2e8:	465b      	mov	r3, fp
 800e2ea:	4680      	mov	r8, r0
 800e2ec:	4689      	mov	r9, r1
 800e2ee:	f7f2 fc33 	bl	8000b58 <__aeabi_dcmpgt>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	f040 8295 	bne.w	800e822 <_dtoa_r+0x97a>
 800e2f8:	4652      	mov	r2, sl
 800e2fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e2fe:	4640      	mov	r0, r8
 800e300:	4649      	mov	r1, r9
 800e302:	f7f2 fc0b 	bl	8000b1c <__aeabi_dcmplt>
 800e306:	2800      	cmp	r0, #0
 800e308:	f040 8289 	bne.w	800e81e <_dtoa_r+0x976>
 800e30c:	ec5b ab19 	vmov	sl, fp, d9
 800e310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e312:	2b00      	cmp	r3, #0
 800e314:	f2c0 8148 	blt.w	800e5a8 <_dtoa_r+0x700>
 800e318:	9a00      	ldr	r2, [sp, #0]
 800e31a:	2a0e      	cmp	r2, #14
 800e31c:	f300 8144 	bgt.w	800e5a8 <_dtoa_r+0x700>
 800e320:	4b67      	ldr	r3, [pc, #412]	; (800e4c0 <_dtoa_r+0x618>)
 800e322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e326:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f280 80d5 	bge.w	800e4dc <_dtoa_r+0x634>
 800e332:	9b03      	ldr	r3, [sp, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	f300 80d1 	bgt.w	800e4dc <_dtoa_r+0x634>
 800e33a:	f040 826f 	bne.w	800e81c <_dtoa_r+0x974>
 800e33e:	4b65      	ldr	r3, [pc, #404]	; (800e4d4 <_dtoa_r+0x62c>)
 800e340:	2200      	movs	r2, #0
 800e342:	4640      	mov	r0, r8
 800e344:	4649      	mov	r1, r9
 800e346:	f7f2 f977 	bl	8000638 <__aeabi_dmul>
 800e34a:	4652      	mov	r2, sl
 800e34c:	465b      	mov	r3, fp
 800e34e:	f7f2 fbf9 	bl	8000b44 <__aeabi_dcmpge>
 800e352:	9e03      	ldr	r6, [sp, #12]
 800e354:	4637      	mov	r7, r6
 800e356:	2800      	cmp	r0, #0
 800e358:	f040 8245 	bne.w	800e7e6 <_dtoa_r+0x93e>
 800e35c:	9d01      	ldr	r5, [sp, #4]
 800e35e:	2331      	movs	r3, #49	; 0x31
 800e360:	f805 3b01 	strb.w	r3, [r5], #1
 800e364:	9b00      	ldr	r3, [sp, #0]
 800e366:	3301      	adds	r3, #1
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	e240      	b.n	800e7ee <_dtoa_r+0x946>
 800e36c:	07f2      	lsls	r2, r6, #31
 800e36e:	d505      	bpl.n	800e37c <_dtoa_r+0x4d4>
 800e370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e374:	f7f2 f960 	bl	8000638 <__aeabi_dmul>
 800e378:	3501      	adds	r5, #1
 800e37a:	2301      	movs	r3, #1
 800e37c:	1076      	asrs	r6, r6, #1
 800e37e:	3708      	adds	r7, #8
 800e380:	e777      	b.n	800e272 <_dtoa_r+0x3ca>
 800e382:	2502      	movs	r5, #2
 800e384:	e779      	b.n	800e27a <_dtoa_r+0x3d2>
 800e386:	9f00      	ldr	r7, [sp, #0]
 800e388:	9e03      	ldr	r6, [sp, #12]
 800e38a:	e794      	b.n	800e2b6 <_dtoa_r+0x40e>
 800e38c:	9901      	ldr	r1, [sp, #4]
 800e38e:	4b4c      	ldr	r3, [pc, #304]	; (800e4c0 <_dtoa_r+0x618>)
 800e390:	4431      	add	r1, r6
 800e392:	910d      	str	r1, [sp, #52]	; 0x34
 800e394:	9908      	ldr	r1, [sp, #32]
 800e396:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e39a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e39e:	2900      	cmp	r1, #0
 800e3a0:	d043      	beq.n	800e42a <_dtoa_r+0x582>
 800e3a2:	494d      	ldr	r1, [pc, #308]	; (800e4d8 <_dtoa_r+0x630>)
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	f7f2 fa71 	bl	800088c <__aeabi_ddiv>
 800e3aa:	4652      	mov	r2, sl
 800e3ac:	465b      	mov	r3, fp
 800e3ae:	f7f1 ff8b 	bl	80002c8 <__aeabi_dsub>
 800e3b2:	9d01      	ldr	r5, [sp, #4]
 800e3b4:	4682      	mov	sl, r0
 800e3b6:	468b      	mov	fp, r1
 800e3b8:	4649      	mov	r1, r9
 800e3ba:	4640      	mov	r0, r8
 800e3bc:	f7f2 fbec 	bl	8000b98 <__aeabi_d2iz>
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	f7f2 f8cf 	bl	8000564 <__aeabi_i2d>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	4640      	mov	r0, r8
 800e3cc:	4649      	mov	r1, r9
 800e3ce:	f7f1 ff7b 	bl	80002c8 <__aeabi_dsub>
 800e3d2:	3630      	adds	r6, #48	; 0x30
 800e3d4:	f805 6b01 	strb.w	r6, [r5], #1
 800e3d8:	4652      	mov	r2, sl
 800e3da:	465b      	mov	r3, fp
 800e3dc:	4680      	mov	r8, r0
 800e3de:	4689      	mov	r9, r1
 800e3e0:	f7f2 fb9c 	bl	8000b1c <__aeabi_dcmplt>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d163      	bne.n	800e4b0 <_dtoa_r+0x608>
 800e3e8:	4642      	mov	r2, r8
 800e3ea:	464b      	mov	r3, r9
 800e3ec:	4936      	ldr	r1, [pc, #216]	; (800e4c8 <_dtoa_r+0x620>)
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	f7f1 ff6a 	bl	80002c8 <__aeabi_dsub>
 800e3f4:	4652      	mov	r2, sl
 800e3f6:	465b      	mov	r3, fp
 800e3f8:	f7f2 fb90 	bl	8000b1c <__aeabi_dcmplt>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	f040 80b5 	bne.w	800e56c <_dtoa_r+0x6c4>
 800e402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e404:	429d      	cmp	r5, r3
 800e406:	d081      	beq.n	800e30c <_dtoa_r+0x464>
 800e408:	4b30      	ldr	r3, [pc, #192]	; (800e4cc <_dtoa_r+0x624>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	4650      	mov	r0, sl
 800e40e:	4659      	mov	r1, fp
 800e410:	f7f2 f912 	bl	8000638 <__aeabi_dmul>
 800e414:	4b2d      	ldr	r3, [pc, #180]	; (800e4cc <_dtoa_r+0x624>)
 800e416:	4682      	mov	sl, r0
 800e418:	468b      	mov	fp, r1
 800e41a:	4640      	mov	r0, r8
 800e41c:	4649      	mov	r1, r9
 800e41e:	2200      	movs	r2, #0
 800e420:	f7f2 f90a 	bl	8000638 <__aeabi_dmul>
 800e424:	4680      	mov	r8, r0
 800e426:	4689      	mov	r9, r1
 800e428:	e7c6      	b.n	800e3b8 <_dtoa_r+0x510>
 800e42a:	4650      	mov	r0, sl
 800e42c:	4659      	mov	r1, fp
 800e42e:	f7f2 f903 	bl	8000638 <__aeabi_dmul>
 800e432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e434:	9d01      	ldr	r5, [sp, #4]
 800e436:	930f      	str	r3, [sp, #60]	; 0x3c
 800e438:	4682      	mov	sl, r0
 800e43a:	468b      	mov	fp, r1
 800e43c:	4649      	mov	r1, r9
 800e43e:	4640      	mov	r0, r8
 800e440:	f7f2 fbaa 	bl	8000b98 <__aeabi_d2iz>
 800e444:	4606      	mov	r6, r0
 800e446:	f7f2 f88d 	bl	8000564 <__aeabi_i2d>
 800e44a:	3630      	adds	r6, #48	; 0x30
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	4640      	mov	r0, r8
 800e452:	4649      	mov	r1, r9
 800e454:	f7f1 ff38 	bl	80002c8 <__aeabi_dsub>
 800e458:	f805 6b01 	strb.w	r6, [r5], #1
 800e45c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e45e:	429d      	cmp	r5, r3
 800e460:	4680      	mov	r8, r0
 800e462:	4689      	mov	r9, r1
 800e464:	f04f 0200 	mov.w	r2, #0
 800e468:	d124      	bne.n	800e4b4 <_dtoa_r+0x60c>
 800e46a:	4b1b      	ldr	r3, [pc, #108]	; (800e4d8 <_dtoa_r+0x630>)
 800e46c:	4650      	mov	r0, sl
 800e46e:	4659      	mov	r1, fp
 800e470:	f7f1 ff2c 	bl	80002cc <__adddf3>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	4640      	mov	r0, r8
 800e47a:	4649      	mov	r1, r9
 800e47c:	f7f2 fb6c 	bl	8000b58 <__aeabi_dcmpgt>
 800e480:	2800      	cmp	r0, #0
 800e482:	d173      	bne.n	800e56c <_dtoa_r+0x6c4>
 800e484:	4652      	mov	r2, sl
 800e486:	465b      	mov	r3, fp
 800e488:	4913      	ldr	r1, [pc, #76]	; (800e4d8 <_dtoa_r+0x630>)
 800e48a:	2000      	movs	r0, #0
 800e48c:	f7f1 ff1c 	bl	80002c8 <__aeabi_dsub>
 800e490:	4602      	mov	r2, r0
 800e492:	460b      	mov	r3, r1
 800e494:	4640      	mov	r0, r8
 800e496:	4649      	mov	r1, r9
 800e498:	f7f2 fb40 	bl	8000b1c <__aeabi_dcmplt>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	f43f af35 	beq.w	800e30c <_dtoa_r+0x464>
 800e4a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e4a4:	1e6b      	subs	r3, r5, #1
 800e4a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e4ac:	2b30      	cmp	r3, #48	; 0x30
 800e4ae:	d0f8      	beq.n	800e4a2 <_dtoa_r+0x5fa>
 800e4b0:	9700      	str	r7, [sp, #0]
 800e4b2:	e049      	b.n	800e548 <_dtoa_r+0x6a0>
 800e4b4:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <_dtoa_r+0x624>)
 800e4b6:	f7f2 f8bf 	bl	8000638 <__aeabi_dmul>
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	4689      	mov	r9, r1
 800e4be:	e7bd      	b.n	800e43c <_dtoa_r+0x594>
 800e4c0:	080111d8 	.word	0x080111d8
 800e4c4:	080111b0 	.word	0x080111b0
 800e4c8:	3ff00000 	.word	0x3ff00000
 800e4cc:	40240000 	.word	0x40240000
 800e4d0:	401c0000 	.word	0x401c0000
 800e4d4:	40140000 	.word	0x40140000
 800e4d8:	3fe00000 	.word	0x3fe00000
 800e4dc:	9d01      	ldr	r5, [sp, #4]
 800e4de:	4656      	mov	r6, sl
 800e4e0:	465f      	mov	r7, fp
 800e4e2:	4642      	mov	r2, r8
 800e4e4:	464b      	mov	r3, r9
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	4639      	mov	r1, r7
 800e4ea:	f7f2 f9cf 	bl	800088c <__aeabi_ddiv>
 800e4ee:	f7f2 fb53 	bl	8000b98 <__aeabi_d2iz>
 800e4f2:	4682      	mov	sl, r0
 800e4f4:	f7f2 f836 	bl	8000564 <__aeabi_i2d>
 800e4f8:	4642      	mov	r2, r8
 800e4fa:	464b      	mov	r3, r9
 800e4fc:	f7f2 f89c 	bl	8000638 <__aeabi_dmul>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	4630      	mov	r0, r6
 800e506:	4639      	mov	r1, r7
 800e508:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e50c:	f7f1 fedc 	bl	80002c8 <__aeabi_dsub>
 800e510:	f805 6b01 	strb.w	r6, [r5], #1
 800e514:	9e01      	ldr	r6, [sp, #4]
 800e516:	9f03      	ldr	r7, [sp, #12]
 800e518:	1bae      	subs	r6, r5, r6
 800e51a:	42b7      	cmp	r7, r6
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	d135      	bne.n	800e58e <_dtoa_r+0x6e6>
 800e522:	f7f1 fed3 	bl	80002cc <__adddf3>
 800e526:	4642      	mov	r2, r8
 800e528:	464b      	mov	r3, r9
 800e52a:	4606      	mov	r6, r0
 800e52c:	460f      	mov	r7, r1
 800e52e:	f7f2 fb13 	bl	8000b58 <__aeabi_dcmpgt>
 800e532:	b9d0      	cbnz	r0, 800e56a <_dtoa_r+0x6c2>
 800e534:	4642      	mov	r2, r8
 800e536:	464b      	mov	r3, r9
 800e538:	4630      	mov	r0, r6
 800e53a:	4639      	mov	r1, r7
 800e53c:	f7f2 fae4 	bl	8000b08 <__aeabi_dcmpeq>
 800e540:	b110      	cbz	r0, 800e548 <_dtoa_r+0x6a0>
 800e542:	f01a 0f01 	tst.w	sl, #1
 800e546:	d110      	bne.n	800e56a <_dtoa_r+0x6c2>
 800e548:	4620      	mov	r0, r4
 800e54a:	ee18 1a10 	vmov	r1, s16
 800e54e:	f000 fae5 	bl	800eb1c <_Bfree>
 800e552:	2300      	movs	r3, #0
 800e554:	9800      	ldr	r0, [sp, #0]
 800e556:	702b      	strb	r3, [r5, #0]
 800e558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e55a:	3001      	adds	r0, #1
 800e55c:	6018      	str	r0, [r3, #0]
 800e55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e560:	2b00      	cmp	r3, #0
 800e562:	f43f acf1 	beq.w	800df48 <_dtoa_r+0xa0>
 800e566:	601d      	str	r5, [r3, #0]
 800e568:	e4ee      	b.n	800df48 <_dtoa_r+0xa0>
 800e56a:	9f00      	ldr	r7, [sp, #0]
 800e56c:	462b      	mov	r3, r5
 800e56e:	461d      	mov	r5, r3
 800e570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e574:	2a39      	cmp	r2, #57	; 0x39
 800e576:	d106      	bne.n	800e586 <_dtoa_r+0x6de>
 800e578:	9a01      	ldr	r2, [sp, #4]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d1f7      	bne.n	800e56e <_dtoa_r+0x6c6>
 800e57e:	9901      	ldr	r1, [sp, #4]
 800e580:	2230      	movs	r2, #48	; 0x30
 800e582:	3701      	adds	r7, #1
 800e584:	700a      	strb	r2, [r1, #0]
 800e586:	781a      	ldrb	r2, [r3, #0]
 800e588:	3201      	adds	r2, #1
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	e790      	b.n	800e4b0 <_dtoa_r+0x608>
 800e58e:	4ba6      	ldr	r3, [pc, #664]	; (800e828 <_dtoa_r+0x980>)
 800e590:	2200      	movs	r2, #0
 800e592:	f7f2 f851 	bl	8000638 <__aeabi_dmul>
 800e596:	2200      	movs	r2, #0
 800e598:	2300      	movs	r3, #0
 800e59a:	4606      	mov	r6, r0
 800e59c:	460f      	mov	r7, r1
 800e59e:	f7f2 fab3 	bl	8000b08 <__aeabi_dcmpeq>
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	d09d      	beq.n	800e4e2 <_dtoa_r+0x63a>
 800e5a6:	e7cf      	b.n	800e548 <_dtoa_r+0x6a0>
 800e5a8:	9a08      	ldr	r2, [sp, #32]
 800e5aa:	2a00      	cmp	r2, #0
 800e5ac:	f000 80d7 	beq.w	800e75e <_dtoa_r+0x8b6>
 800e5b0:	9a06      	ldr	r2, [sp, #24]
 800e5b2:	2a01      	cmp	r2, #1
 800e5b4:	f300 80ba 	bgt.w	800e72c <_dtoa_r+0x884>
 800e5b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5ba:	2a00      	cmp	r2, #0
 800e5bc:	f000 80b2 	beq.w	800e724 <_dtoa_r+0x87c>
 800e5c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5c4:	9e07      	ldr	r6, [sp, #28]
 800e5c6:	9d04      	ldr	r5, [sp, #16]
 800e5c8:	9a04      	ldr	r2, [sp, #16]
 800e5ca:	441a      	add	r2, r3
 800e5cc:	9204      	str	r2, [sp, #16]
 800e5ce:	9a05      	ldr	r2, [sp, #20]
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	441a      	add	r2, r3
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	9205      	str	r2, [sp, #20]
 800e5d8:	f000 fb58 	bl	800ec8c <__i2b>
 800e5dc:	4607      	mov	r7, r0
 800e5de:	2d00      	cmp	r5, #0
 800e5e0:	dd0c      	ble.n	800e5fc <_dtoa_r+0x754>
 800e5e2:	9b05      	ldr	r3, [sp, #20]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	dd09      	ble.n	800e5fc <_dtoa_r+0x754>
 800e5e8:	42ab      	cmp	r3, r5
 800e5ea:	9a04      	ldr	r2, [sp, #16]
 800e5ec:	bfa8      	it	ge
 800e5ee:	462b      	movge	r3, r5
 800e5f0:	1ad2      	subs	r2, r2, r3
 800e5f2:	9204      	str	r2, [sp, #16]
 800e5f4:	9a05      	ldr	r2, [sp, #20]
 800e5f6:	1aed      	subs	r5, r5, r3
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	9305      	str	r3, [sp, #20]
 800e5fc:	9b07      	ldr	r3, [sp, #28]
 800e5fe:	b31b      	cbz	r3, 800e648 <_dtoa_r+0x7a0>
 800e600:	9b08      	ldr	r3, [sp, #32]
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 80af 	beq.w	800e766 <_dtoa_r+0x8be>
 800e608:	2e00      	cmp	r6, #0
 800e60a:	dd13      	ble.n	800e634 <_dtoa_r+0x78c>
 800e60c:	4639      	mov	r1, r7
 800e60e:	4632      	mov	r2, r6
 800e610:	4620      	mov	r0, r4
 800e612:	f000 fbfb 	bl	800ee0c <__pow5mult>
 800e616:	ee18 2a10 	vmov	r2, s16
 800e61a:	4601      	mov	r1, r0
 800e61c:	4607      	mov	r7, r0
 800e61e:	4620      	mov	r0, r4
 800e620:	f000 fb4a 	bl	800ecb8 <__multiply>
 800e624:	ee18 1a10 	vmov	r1, s16
 800e628:	4680      	mov	r8, r0
 800e62a:	4620      	mov	r0, r4
 800e62c:	f000 fa76 	bl	800eb1c <_Bfree>
 800e630:	ee08 8a10 	vmov	s16, r8
 800e634:	9b07      	ldr	r3, [sp, #28]
 800e636:	1b9a      	subs	r2, r3, r6
 800e638:	d006      	beq.n	800e648 <_dtoa_r+0x7a0>
 800e63a:	ee18 1a10 	vmov	r1, s16
 800e63e:	4620      	mov	r0, r4
 800e640:	f000 fbe4 	bl	800ee0c <__pow5mult>
 800e644:	ee08 0a10 	vmov	s16, r0
 800e648:	2101      	movs	r1, #1
 800e64a:	4620      	mov	r0, r4
 800e64c:	f000 fb1e 	bl	800ec8c <__i2b>
 800e650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e652:	2b00      	cmp	r3, #0
 800e654:	4606      	mov	r6, r0
 800e656:	f340 8088 	ble.w	800e76a <_dtoa_r+0x8c2>
 800e65a:	461a      	mov	r2, r3
 800e65c:	4601      	mov	r1, r0
 800e65e:	4620      	mov	r0, r4
 800e660:	f000 fbd4 	bl	800ee0c <__pow5mult>
 800e664:	9b06      	ldr	r3, [sp, #24]
 800e666:	2b01      	cmp	r3, #1
 800e668:	4606      	mov	r6, r0
 800e66a:	f340 8081 	ble.w	800e770 <_dtoa_r+0x8c8>
 800e66e:	f04f 0800 	mov.w	r8, #0
 800e672:	6933      	ldr	r3, [r6, #16]
 800e674:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e678:	6918      	ldr	r0, [r3, #16]
 800e67a:	f000 fab7 	bl	800ebec <__hi0bits>
 800e67e:	f1c0 0020 	rsb	r0, r0, #32
 800e682:	9b05      	ldr	r3, [sp, #20]
 800e684:	4418      	add	r0, r3
 800e686:	f010 001f 	ands.w	r0, r0, #31
 800e68a:	f000 8092 	beq.w	800e7b2 <_dtoa_r+0x90a>
 800e68e:	f1c0 0320 	rsb	r3, r0, #32
 800e692:	2b04      	cmp	r3, #4
 800e694:	f340 808a 	ble.w	800e7ac <_dtoa_r+0x904>
 800e698:	f1c0 001c 	rsb	r0, r0, #28
 800e69c:	9b04      	ldr	r3, [sp, #16]
 800e69e:	4403      	add	r3, r0
 800e6a0:	9304      	str	r3, [sp, #16]
 800e6a2:	9b05      	ldr	r3, [sp, #20]
 800e6a4:	4403      	add	r3, r0
 800e6a6:	4405      	add	r5, r0
 800e6a8:	9305      	str	r3, [sp, #20]
 800e6aa:	9b04      	ldr	r3, [sp, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	dd07      	ble.n	800e6c0 <_dtoa_r+0x818>
 800e6b0:	ee18 1a10 	vmov	r1, s16
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f000 fc02 	bl	800eec0 <__lshift>
 800e6bc:	ee08 0a10 	vmov	s16, r0
 800e6c0:	9b05      	ldr	r3, [sp, #20]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	dd05      	ble.n	800e6d2 <_dtoa_r+0x82a>
 800e6c6:	4631      	mov	r1, r6
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f000 fbf8 	bl	800eec0 <__lshift>
 800e6d0:	4606      	mov	r6, r0
 800e6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d06e      	beq.n	800e7b6 <_dtoa_r+0x90e>
 800e6d8:	ee18 0a10 	vmov	r0, s16
 800e6dc:	4631      	mov	r1, r6
 800e6de:	f000 fc5f 	bl	800efa0 <__mcmp>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	da67      	bge.n	800e7b6 <_dtoa_r+0x90e>
 800e6e6:	9b00      	ldr	r3, [sp, #0]
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	ee18 1a10 	vmov	r1, s16
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	220a      	movs	r2, #10
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	f000 fa33 	bl	800eb60 <__multadd>
 800e6fa:	9b08      	ldr	r3, [sp, #32]
 800e6fc:	ee08 0a10 	vmov	s16, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	f000 81b1 	beq.w	800ea68 <_dtoa_r+0xbc0>
 800e706:	2300      	movs	r3, #0
 800e708:	4639      	mov	r1, r7
 800e70a:	220a      	movs	r2, #10
 800e70c:	4620      	mov	r0, r4
 800e70e:	f000 fa27 	bl	800eb60 <__multadd>
 800e712:	9b02      	ldr	r3, [sp, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	4607      	mov	r7, r0
 800e718:	f300 808e 	bgt.w	800e838 <_dtoa_r+0x990>
 800e71c:	9b06      	ldr	r3, [sp, #24]
 800e71e:	2b02      	cmp	r3, #2
 800e720:	dc51      	bgt.n	800e7c6 <_dtoa_r+0x91e>
 800e722:	e089      	b.n	800e838 <_dtoa_r+0x990>
 800e724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e72a:	e74b      	b.n	800e5c4 <_dtoa_r+0x71c>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	1e5e      	subs	r6, r3, #1
 800e730:	9b07      	ldr	r3, [sp, #28]
 800e732:	42b3      	cmp	r3, r6
 800e734:	bfbf      	itttt	lt
 800e736:	9b07      	ldrlt	r3, [sp, #28]
 800e738:	9607      	strlt	r6, [sp, #28]
 800e73a:	1af2      	sublt	r2, r6, r3
 800e73c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e73e:	bfb6      	itet	lt
 800e740:	189b      	addlt	r3, r3, r2
 800e742:	1b9e      	subge	r6, r3, r6
 800e744:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e746:	9b03      	ldr	r3, [sp, #12]
 800e748:	bfb8      	it	lt
 800e74a:	2600      	movlt	r6, #0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	bfb7      	itett	lt
 800e750:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e754:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e758:	1a9d      	sublt	r5, r3, r2
 800e75a:	2300      	movlt	r3, #0
 800e75c:	e734      	b.n	800e5c8 <_dtoa_r+0x720>
 800e75e:	9e07      	ldr	r6, [sp, #28]
 800e760:	9d04      	ldr	r5, [sp, #16]
 800e762:	9f08      	ldr	r7, [sp, #32]
 800e764:	e73b      	b.n	800e5de <_dtoa_r+0x736>
 800e766:	9a07      	ldr	r2, [sp, #28]
 800e768:	e767      	b.n	800e63a <_dtoa_r+0x792>
 800e76a:	9b06      	ldr	r3, [sp, #24]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	dc18      	bgt.n	800e7a2 <_dtoa_r+0x8fa>
 800e770:	f1ba 0f00 	cmp.w	sl, #0
 800e774:	d115      	bne.n	800e7a2 <_dtoa_r+0x8fa>
 800e776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e77a:	b993      	cbnz	r3, 800e7a2 <_dtoa_r+0x8fa>
 800e77c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e780:	0d1b      	lsrs	r3, r3, #20
 800e782:	051b      	lsls	r3, r3, #20
 800e784:	b183      	cbz	r3, 800e7a8 <_dtoa_r+0x900>
 800e786:	9b04      	ldr	r3, [sp, #16]
 800e788:	3301      	adds	r3, #1
 800e78a:	9304      	str	r3, [sp, #16]
 800e78c:	9b05      	ldr	r3, [sp, #20]
 800e78e:	3301      	adds	r3, #1
 800e790:	9305      	str	r3, [sp, #20]
 800e792:	f04f 0801 	mov.w	r8, #1
 800e796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f47f af6a 	bne.w	800e672 <_dtoa_r+0x7ca>
 800e79e:	2001      	movs	r0, #1
 800e7a0:	e76f      	b.n	800e682 <_dtoa_r+0x7da>
 800e7a2:	f04f 0800 	mov.w	r8, #0
 800e7a6:	e7f6      	b.n	800e796 <_dtoa_r+0x8ee>
 800e7a8:	4698      	mov	r8, r3
 800e7aa:	e7f4      	b.n	800e796 <_dtoa_r+0x8ee>
 800e7ac:	f43f af7d 	beq.w	800e6aa <_dtoa_r+0x802>
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	301c      	adds	r0, #28
 800e7b4:	e772      	b.n	800e69c <_dtoa_r+0x7f4>
 800e7b6:	9b03      	ldr	r3, [sp, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	dc37      	bgt.n	800e82c <_dtoa_r+0x984>
 800e7bc:	9b06      	ldr	r3, [sp, #24]
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	dd34      	ble.n	800e82c <_dtoa_r+0x984>
 800e7c2:	9b03      	ldr	r3, [sp, #12]
 800e7c4:	9302      	str	r3, [sp, #8]
 800e7c6:	9b02      	ldr	r3, [sp, #8]
 800e7c8:	b96b      	cbnz	r3, 800e7e6 <_dtoa_r+0x93e>
 800e7ca:	4631      	mov	r1, r6
 800e7cc:	2205      	movs	r2, #5
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f000 f9c6 	bl	800eb60 <__multadd>
 800e7d4:	4601      	mov	r1, r0
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	ee18 0a10 	vmov	r0, s16
 800e7dc:	f000 fbe0 	bl	800efa0 <__mcmp>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	f73f adbb 	bgt.w	800e35c <_dtoa_r+0x4b4>
 800e7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e8:	9d01      	ldr	r5, [sp, #4]
 800e7ea:	43db      	mvns	r3, r3
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	f04f 0800 	mov.w	r8, #0
 800e7f2:	4631      	mov	r1, r6
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	f000 f991 	bl	800eb1c <_Bfree>
 800e7fa:	2f00      	cmp	r7, #0
 800e7fc:	f43f aea4 	beq.w	800e548 <_dtoa_r+0x6a0>
 800e800:	f1b8 0f00 	cmp.w	r8, #0
 800e804:	d005      	beq.n	800e812 <_dtoa_r+0x96a>
 800e806:	45b8      	cmp	r8, r7
 800e808:	d003      	beq.n	800e812 <_dtoa_r+0x96a>
 800e80a:	4641      	mov	r1, r8
 800e80c:	4620      	mov	r0, r4
 800e80e:	f000 f985 	bl	800eb1c <_Bfree>
 800e812:	4639      	mov	r1, r7
 800e814:	4620      	mov	r0, r4
 800e816:	f000 f981 	bl	800eb1c <_Bfree>
 800e81a:	e695      	b.n	800e548 <_dtoa_r+0x6a0>
 800e81c:	2600      	movs	r6, #0
 800e81e:	4637      	mov	r7, r6
 800e820:	e7e1      	b.n	800e7e6 <_dtoa_r+0x93e>
 800e822:	9700      	str	r7, [sp, #0]
 800e824:	4637      	mov	r7, r6
 800e826:	e599      	b.n	800e35c <_dtoa_r+0x4b4>
 800e828:	40240000 	.word	0x40240000
 800e82c:	9b08      	ldr	r3, [sp, #32]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f000 80ca 	beq.w	800e9c8 <_dtoa_r+0xb20>
 800e834:	9b03      	ldr	r3, [sp, #12]
 800e836:	9302      	str	r3, [sp, #8]
 800e838:	2d00      	cmp	r5, #0
 800e83a:	dd05      	ble.n	800e848 <_dtoa_r+0x9a0>
 800e83c:	4639      	mov	r1, r7
 800e83e:	462a      	mov	r2, r5
 800e840:	4620      	mov	r0, r4
 800e842:	f000 fb3d 	bl	800eec0 <__lshift>
 800e846:	4607      	mov	r7, r0
 800e848:	f1b8 0f00 	cmp.w	r8, #0
 800e84c:	d05b      	beq.n	800e906 <_dtoa_r+0xa5e>
 800e84e:	6879      	ldr	r1, [r7, #4]
 800e850:	4620      	mov	r0, r4
 800e852:	f000 f923 	bl	800ea9c <_Balloc>
 800e856:	4605      	mov	r5, r0
 800e858:	b928      	cbnz	r0, 800e866 <_dtoa_r+0x9be>
 800e85a:	4b87      	ldr	r3, [pc, #540]	; (800ea78 <_dtoa_r+0xbd0>)
 800e85c:	4602      	mov	r2, r0
 800e85e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e862:	f7ff bb3b 	b.w	800dedc <_dtoa_r+0x34>
 800e866:	693a      	ldr	r2, [r7, #16]
 800e868:	3202      	adds	r2, #2
 800e86a:	0092      	lsls	r2, r2, #2
 800e86c:	f107 010c 	add.w	r1, r7, #12
 800e870:	300c      	adds	r0, #12
 800e872:	f7fe fe0b 	bl	800d48c <memcpy>
 800e876:	2201      	movs	r2, #1
 800e878:	4629      	mov	r1, r5
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 fb20 	bl	800eec0 <__lshift>
 800e880:	9b01      	ldr	r3, [sp, #4]
 800e882:	f103 0901 	add.w	r9, r3, #1
 800e886:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e88a:	4413      	add	r3, r2
 800e88c:	9305      	str	r3, [sp, #20]
 800e88e:	f00a 0301 	and.w	r3, sl, #1
 800e892:	46b8      	mov	r8, r7
 800e894:	9304      	str	r3, [sp, #16]
 800e896:	4607      	mov	r7, r0
 800e898:	4631      	mov	r1, r6
 800e89a:	ee18 0a10 	vmov	r0, s16
 800e89e:	f7ff fa75 	bl	800dd8c <quorem>
 800e8a2:	4641      	mov	r1, r8
 800e8a4:	9002      	str	r0, [sp, #8]
 800e8a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8aa:	ee18 0a10 	vmov	r0, s16
 800e8ae:	f000 fb77 	bl	800efa0 <__mcmp>
 800e8b2:	463a      	mov	r2, r7
 800e8b4:	9003      	str	r0, [sp, #12]
 800e8b6:	4631      	mov	r1, r6
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 fb8d 	bl	800efd8 <__mdiff>
 800e8be:	68c2      	ldr	r2, [r0, #12]
 800e8c0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	bb02      	cbnz	r2, 800e90a <_dtoa_r+0xa62>
 800e8c8:	4601      	mov	r1, r0
 800e8ca:	ee18 0a10 	vmov	r0, s16
 800e8ce:	f000 fb67 	bl	800efa0 <__mcmp>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	4629      	mov	r1, r5
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	9207      	str	r2, [sp, #28]
 800e8da:	f000 f91f 	bl	800eb1c <_Bfree>
 800e8de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e8e2:	ea43 0102 	orr.w	r1, r3, r2
 800e8e6:	9b04      	ldr	r3, [sp, #16]
 800e8e8:	430b      	orrs	r3, r1
 800e8ea:	464d      	mov	r5, r9
 800e8ec:	d10f      	bne.n	800e90e <_dtoa_r+0xa66>
 800e8ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e8f2:	d02a      	beq.n	800e94a <_dtoa_r+0xaa2>
 800e8f4:	9b03      	ldr	r3, [sp, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	dd02      	ble.n	800e900 <_dtoa_r+0xa58>
 800e8fa:	9b02      	ldr	r3, [sp, #8]
 800e8fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e900:	f88b a000 	strb.w	sl, [fp]
 800e904:	e775      	b.n	800e7f2 <_dtoa_r+0x94a>
 800e906:	4638      	mov	r0, r7
 800e908:	e7ba      	b.n	800e880 <_dtoa_r+0x9d8>
 800e90a:	2201      	movs	r2, #1
 800e90c:	e7e2      	b.n	800e8d4 <_dtoa_r+0xa2c>
 800e90e:	9b03      	ldr	r3, [sp, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	db04      	blt.n	800e91e <_dtoa_r+0xa76>
 800e914:	9906      	ldr	r1, [sp, #24]
 800e916:	430b      	orrs	r3, r1
 800e918:	9904      	ldr	r1, [sp, #16]
 800e91a:	430b      	orrs	r3, r1
 800e91c:	d122      	bne.n	800e964 <_dtoa_r+0xabc>
 800e91e:	2a00      	cmp	r2, #0
 800e920:	ddee      	ble.n	800e900 <_dtoa_r+0xa58>
 800e922:	ee18 1a10 	vmov	r1, s16
 800e926:	2201      	movs	r2, #1
 800e928:	4620      	mov	r0, r4
 800e92a:	f000 fac9 	bl	800eec0 <__lshift>
 800e92e:	4631      	mov	r1, r6
 800e930:	ee08 0a10 	vmov	s16, r0
 800e934:	f000 fb34 	bl	800efa0 <__mcmp>
 800e938:	2800      	cmp	r0, #0
 800e93a:	dc03      	bgt.n	800e944 <_dtoa_r+0xa9c>
 800e93c:	d1e0      	bne.n	800e900 <_dtoa_r+0xa58>
 800e93e:	f01a 0f01 	tst.w	sl, #1
 800e942:	d0dd      	beq.n	800e900 <_dtoa_r+0xa58>
 800e944:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e948:	d1d7      	bne.n	800e8fa <_dtoa_r+0xa52>
 800e94a:	2339      	movs	r3, #57	; 0x39
 800e94c:	f88b 3000 	strb.w	r3, [fp]
 800e950:	462b      	mov	r3, r5
 800e952:	461d      	mov	r5, r3
 800e954:	3b01      	subs	r3, #1
 800e956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e95a:	2a39      	cmp	r2, #57	; 0x39
 800e95c:	d071      	beq.n	800ea42 <_dtoa_r+0xb9a>
 800e95e:	3201      	adds	r2, #1
 800e960:	701a      	strb	r2, [r3, #0]
 800e962:	e746      	b.n	800e7f2 <_dtoa_r+0x94a>
 800e964:	2a00      	cmp	r2, #0
 800e966:	dd07      	ble.n	800e978 <_dtoa_r+0xad0>
 800e968:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e96c:	d0ed      	beq.n	800e94a <_dtoa_r+0xaa2>
 800e96e:	f10a 0301 	add.w	r3, sl, #1
 800e972:	f88b 3000 	strb.w	r3, [fp]
 800e976:	e73c      	b.n	800e7f2 <_dtoa_r+0x94a>
 800e978:	9b05      	ldr	r3, [sp, #20]
 800e97a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e97e:	4599      	cmp	r9, r3
 800e980:	d047      	beq.n	800ea12 <_dtoa_r+0xb6a>
 800e982:	ee18 1a10 	vmov	r1, s16
 800e986:	2300      	movs	r3, #0
 800e988:	220a      	movs	r2, #10
 800e98a:	4620      	mov	r0, r4
 800e98c:	f000 f8e8 	bl	800eb60 <__multadd>
 800e990:	45b8      	cmp	r8, r7
 800e992:	ee08 0a10 	vmov	s16, r0
 800e996:	f04f 0300 	mov.w	r3, #0
 800e99a:	f04f 020a 	mov.w	r2, #10
 800e99e:	4641      	mov	r1, r8
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	d106      	bne.n	800e9b2 <_dtoa_r+0xb0a>
 800e9a4:	f000 f8dc 	bl	800eb60 <__multadd>
 800e9a8:	4680      	mov	r8, r0
 800e9aa:	4607      	mov	r7, r0
 800e9ac:	f109 0901 	add.w	r9, r9, #1
 800e9b0:	e772      	b.n	800e898 <_dtoa_r+0x9f0>
 800e9b2:	f000 f8d5 	bl	800eb60 <__multadd>
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	4680      	mov	r8, r0
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	220a      	movs	r2, #10
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f000 f8ce 	bl	800eb60 <__multadd>
 800e9c4:	4607      	mov	r7, r0
 800e9c6:	e7f1      	b.n	800e9ac <_dtoa_r+0xb04>
 800e9c8:	9b03      	ldr	r3, [sp, #12]
 800e9ca:	9302      	str	r3, [sp, #8]
 800e9cc:	9d01      	ldr	r5, [sp, #4]
 800e9ce:	ee18 0a10 	vmov	r0, s16
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	f7ff f9da 	bl	800dd8c <quorem>
 800e9d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e9dc:	9b01      	ldr	r3, [sp, #4]
 800e9de:	f805 ab01 	strb.w	sl, [r5], #1
 800e9e2:	1aea      	subs	r2, r5, r3
 800e9e4:	9b02      	ldr	r3, [sp, #8]
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	dd09      	ble.n	800e9fe <_dtoa_r+0xb56>
 800e9ea:	ee18 1a10 	vmov	r1, s16
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	220a      	movs	r2, #10
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f000 f8b4 	bl	800eb60 <__multadd>
 800e9f8:	ee08 0a10 	vmov	s16, r0
 800e9fc:	e7e7      	b.n	800e9ce <_dtoa_r+0xb26>
 800e9fe:	9b02      	ldr	r3, [sp, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	bfc8      	it	gt
 800ea04:	461d      	movgt	r5, r3
 800ea06:	9b01      	ldr	r3, [sp, #4]
 800ea08:	bfd8      	it	le
 800ea0a:	2501      	movle	r5, #1
 800ea0c:	441d      	add	r5, r3
 800ea0e:	f04f 0800 	mov.w	r8, #0
 800ea12:	ee18 1a10 	vmov	r1, s16
 800ea16:	2201      	movs	r2, #1
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f000 fa51 	bl	800eec0 <__lshift>
 800ea1e:	4631      	mov	r1, r6
 800ea20:	ee08 0a10 	vmov	s16, r0
 800ea24:	f000 fabc 	bl	800efa0 <__mcmp>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	dc91      	bgt.n	800e950 <_dtoa_r+0xaa8>
 800ea2c:	d102      	bne.n	800ea34 <_dtoa_r+0xb8c>
 800ea2e:	f01a 0f01 	tst.w	sl, #1
 800ea32:	d18d      	bne.n	800e950 <_dtoa_r+0xaa8>
 800ea34:	462b      	mov	r3, r5
 800ea36:	461d      	mov	r5, r3
 800ea38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea3c:	2a30      	cmp	r2, #48	; 0x30
 800ea3e:	d0fa      	beq.n	800ea36 <_dtoa_r+0xb8e>
 800ea40:	e6d7      	b.n	800e7f2 <_dtoa_r+0x94a>
 800ea42:	9a01      	ldr	r2, [sp, #4]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d184      	bne.n	800e952 <_dtoa_r+0xaaa>
 800ea48:	9b00      	ldr	r3, [sp, #0]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	9300      	str	r3, [sp, #0]
 800ea4e:	2331      	movs	r3, #49	; 0x31
 800ea50:	7013      	strb	r3, [r2, #0]
 800ea52:	e6ce      	b.n	800e7f2 <_dtoa_r+0x94a>
 800ea54:	4b09      	ldr	r3, [pc, #36]	; (800ea7c <_dtoa_r+0xbd4>)
 800ea56:	f7ff ba95 	b.w	800df84 <_dtoa_r+0xdc>
 800ea5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f47f aa6e 	bne.w	800df3e <_dtoa_r+0x96>
 800ea62:	4b07      	ldr	r3, [pc, #28]	; (800ea80 <_dtoa_r+0xbd8>)
 800ea64:	f7ff ba8e 	b.w	800df84 <_dtoa_r+0xdc>
 800ea68:	9b02      	ldr	r3, [sp, #8]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	dcae      	bgt.n	800e9cc <_dtoa_r+0xb24>
 800ea6e:	9b06      	ldr	r3, [sp, #24]
 800ea70:	2b02      	cmp	r3, #2
 800ea72:	f73f aea8 	bgt.w	800e7c6 <_dtoa_r+0x91e>
 800ea76:	e7a9      	b.n	800e9cc <_dtoa_r+0xb24>
 800ea78:	0801113f 	.word	0x0801113f
 800ea7c:	0801109c 	.word	0x0801109c
 800ea80:	080110c0 	.word	0x080110c0

0800ea84 <_localeconv_r>:
 800ea84:	4800      	ldr	r0, [pc, #0]	; (800ea88 <_localeconv_r+0x4>)
 800ea86:	4770      	bx	lr
 800ea88:	2000027c 	.word	0x2000027c

0800ea8c <malloc>:
 800ea8c:	4b02      	ldr	r3, [pc, #8]	; (800ea98 <malloc+0xc>)
 800ea8e:	4601      	mov	r1, r0
 800ea90:	6818      	ldr	r0, [r3, #0]
 800ea92:	f000 bc09 	b.w	800f2a8 <_malloc_r>
 800ea96:	bf00      	nop
 800ea98:	20000128 	.word	0x20000128

0800ea9c <_Balloc>:
 800ea9c:	b570      	push	{r4, r5, r6, lr}
 800ea9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	460d      	mov	r5, r1
 800eaa4:	b976      	cbnz	r6, 800eac4 <_Balloc+0x28>
 800eaa6:	2010      	movs	r0, #16
 800eaa8:	f7ff fff0 	bl	800ea8c <malloc>
 800eaac:	4602      	mov	r2, r0
 800eaae:	6260      	str	r0, [r4, #36]	; 0x24
 800eab0:	b920      	cbnz	r0, 800eabc <_Balloc+0x20>
 800eab2:	4b18      	ldr	r3, [pc, #96]	; (800eb14 <_Balloc+0x78>)
 800eab4:	4818      	ldr	r0, [pc, #96]	; (800eb18 <_Balloc+0x7c>)
 800eab6:	2166      	movs	r1, #102	; 0x66
 800eab8:	f000 fc7a 	bl	800f3b0 <__assert_func>
 800eabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eac0:	6006      	str	r6, [r0, #0]
 800eac2:	60c6      	str	r6, [r0, #12]
 800eac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eac6:	68f3      	ldr	r3, [r6, #12]
 800eac8:	b183      	cbz	r3, 800eaec <_Balloc+0x50>
 800eaca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ead2:	b9b8      	cbnz	r0, 800eb04 <_Balloc+0x68>
 800ead4:	2101      	movs	r1, #1
 800ead6:	fa01 f605 	lsl.w	r6, r1, r5
 800eada:	1d72      	adds	r2, r6, #5
 800eadc:	0092      	lsls	r2, r2, #2
 800eade:	4620      	mov	r0, r4
 800eae0:	f000 fb60 	bl	800f1a4 <_calloc_r>
 800eae4:	b160      	cbz	r0, 800eb00 <_Balloc+0x64>
 800eae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eaea:	e00e      	b.n	800eb0a <_Balloc+0x6e>
 800eaec:	2221      	movs	r2, #33	; 0x21
 800eaee:	2104      	movs	r1, #4
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f000 fb57 	bl	800f1a4 <_calloc_r>
 800eaf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaf8:	60f0      	str	r0, [r6, #12]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1e4      	bne.n	800eaca <_Balloc+0x2e>
 800eb00:	2000      	movs	r0, #0
 800eb02:	bd70      	pop	{r4, r5, r6, pc}
 800eb04:	6802      	ldr	r2, [r0, #0]
 800eb06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb10:	e7f7      	b.n	800eb02 <_Balloc+0x66>
 800eb12:	bf00      	nop
 800eb14:	080110cd 	.word	0x080110cd
 800eb18:	08011150 	.word	0x08011150

0800eb1c <_Bfree>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb20:	4605      	mov	r5, r0
 800eb22:	460c      	mov	r4, r1
 800eb24:	b976      	cbnz	r6, 800eb44 <_Bfree+0x28>
 800eb26:	2010      	movs	r0, #16
 800eb28:	f7ff ffb0 	bl	800ea8c <malloc>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	6268      	str	r0, [r5, #36]	; 0x24
 800eb30:	b920      	cbnz	r0, 800eb3c <_Bfree+0x20>
 800eb32:	4b09      	ldr	r3, [pc, #36]	; (800eb58 <_Bfree+0x3c>)
 800eb34:	4809      	ldr	r0, [pc, #36]	; (800eb5c <_Bfree+0x40>)
 800eb36:	218a      	movs	r1, #138	; 0x8a
 800eb38:	f000 fc3a 	bl	800f3b0 <__assert_func>
 800eb3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb40:	6006      	str	r6, [r0, #0]
 800eb42:	60c6      	str	r6, [r0, #12]
 800eb44:	b13c      	cbz	r4, 800eb56 <_Bfree+0x3a>
 800eb46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb48:	6862      	ldr	r2, [r4, #4]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb50:	6021      	str	r1, [r4, #0]
 800eb52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb56:	bd70      	pop	{r4, r5, r6, pc}
 800eb58:	080110cd 	.word	0x080110cd
 800eb5c:	08011150 	.word	0x08011150

0800eb60 <__multadd>:
 800eb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb64:	690d      	ldr	r5, [r1, #16]
 800eb66:	4607      	mov	r7, r0
 800eb68:	460c      	mov	r4, r1
 800eb6a:	461e      	mov	r6, r3
 800eb6c:	f101 0c14 	add.w	ip, r1, #20
 800eb70:	2000      	movs	r0, #0
 800eb72:	f8dc 3000 	ldr.w	r3, [ip]
 800eb76:	b299      	uxth	r1, r3
 800eb78:	fb02 6101 	mla	r1, r2, r1, r6
 800eb7c:	0c1e      	lsrs	r6, r3, #16
 800eb7e:	0c0b      	lsrs	r3, r1, #16
 800eb80:	fb02 3306 	mla	r3, r2, r6, r3
 800eb84:	b289      	uxth	r1, r1
 800eb86:	3001      	adds	r0, #1
 800eb88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb8c:	4285      	cmp	r5, r0
 800eb8e:	f84c 1b04 	str.w	r1, [ip], #4
 800eb92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb96:	dcec      	bgt.n	800eb72 <__multadd+0x12>
 800eb98:	b30e      	cbz	r6, 800ebde <__multadd+0x7e>
 800eb9a:	68a3      	ldr	r3, [r4, #8]
 800eb9c:	42ab      	cmp	r3, r5
 800eb9e:	dc19      	bgt.n	800ebd4 <__multadd+0x74>
 800eba0:	6861      	ldr	r1, [r4, #4]
 800eba2:	4638      	mov	r0, r7
 800eba4:	3101      	adds	r1, #1
 800eba6:	f7ff ff79 	bl	800ea9c <_Balloc>
 800ebaa:	4680      	mov	r8, r0
 800ebac:	b928      	cbnz	r0, 800ebba <__multadd+0x5a>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <__multadd+0x84>)
 800ebb2:	480d      	ldr	r0, [pc, #52]	; (800ebe8 <__multadd+0x88>)
 800ebb4:	21b5      	movs	r1, #181	; 0xb5
 800ebb6:	f000 fbfb 	bl	800f3b0 <__assert_func>
 800ebba:	6922      	ldr	r2, [r4, #16]
 800ebbc:	3202      	adds	r2, #2
 800ebbe:	f104 010c 	add.w	r1, r4, #12
 800ebc2:	0092      	lsls	r2, r2, #2
 800ebc4:	300c      	adds	r0, #12
 800ebc6:	f7fe fc61 	bl	800d48c <memcpy>
 800ebca:	4621      	mov	r1, r4
 800ebcc:	4638      	mov	r0, r7
 800ebce:	f7ff ffa5 	bl	800eb1c <_Bfree>
 800ebd2:	4644      	mov	r4, r8
 800ebd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebd8:	3501      	adds	r5, #1
 800ebda:	615e      	str	r6, [r3, #20]
 800ebdc:	6125      	str	r5, [r4, #16]
 800ebde:	4620      	mov	r0, r4
 800ebe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe4:	0801113f 	.word	0x0801113f
 800ebe8:	08011150 	.word	0x08011150

0800ebec <__hi0bits>:
 800ebec:	0c03      	lsrs	r3, r0, #16
 800ebee:	041b      	lsls	r3, r3, #16
 800ebf0:	b9d3      	cbnz	r3, 800ec28 <__hi0bits+0x3c>
 800ebf2:	0400      	lsls	r0, r0, #16
 800ebf4:	2310      	movs	r3, #16
 800ebf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebfa:	bf04      	itt	eq
 800ebfc:	0200      	lsleq	r0, r0, #8
 800ebfe:	3308      	addeq	r3, #8
 800ec00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ec04:	bf04      	itt	eq
 800ec06:	0100      	lsleq	r0, r0, #4
 800ec08:	3304      	addeq	r3, #4
 800ec0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ec0e:	bf04      	itt	eq
 800ec10:	0080      	lsleq	r0, r0, #2
 800ec12:	3302      	addeq	r3, #2
 800ec14:	2800      	cmp	r0, #0
 800ec16:	db05      	blt.n	800ec24 <__hi0bits+0x38>
 800ec18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec1c:	f103 0301 	add.w	r3, r3, #1
 800ec20:	bf08      	it	eq
 800ec22:	2320      	moveq	r3, #32
 800ec24:	4618      	mov	r0, r3
 800ec26:	4770      	bx	lr
 800ec28:	2300      	movs	r3, #0
 800ec2a:	e7e4      	b.n	800ebf6 <__hi0bits+0xa>

0800ec2c <__lo0bits>:
 800ec2c:	6803      	ldr	r3, [r0, #0]
 800ec2e:	f013 0207 	ands.w	r2, r3, #7
 800ec32:	4601      	mov	r1, r0
 800ec34:	d00b      	beq.n	800ec4e <__lo0bits+0x22>
 800ec36:	07da      	lsls	r2, r3, #31
 800ec38:	d423      	bmi.n	800ec82 <__lo0bits+0x56>
 800ec3a:	0798      	lsls	r0, r3, #30
 800ec3c:	bf49      	itett	mi
 800ec3e:	085b      	lsrmi	r3, r3, #1
 800ec40:	089b      	lsrpl	r3, r3, #2
 800ec42:	2001      	movmi	r0, #1
 800ec44:	600b      	strmi	r3, [r1, #0]
 800ec46:	bf5c      	itt	pl
 800ec48:	600b      	strpl	r3, [r1, #0]
 800ec4a:	2002      	movpl	r0, #2
 800ec4c:	4770      	bx	lr
 800ec4e:	b298      	uxth	r0, r3
 800ec50:	b9a8      	cbnz	r0, 800ec7e <__lo0bits+0x52>
 800ec52:	0c1b      	lsrs	r3, r3, #16
 800ec54:	2010      	movs	r0, #16
 800ec56:	b2da      	uxtb	r2, r3
 800ec58:	b90a      	cbnz	r2, 800ec5e <__lo0bits+0x32>
 800ec5a:	3008      	adds	r0, #8
 800ec5c:	0a1b      	lsrs	r3, r3, #8
 800ec5e:	071a      	lsls	r2, r3, #28
 800ec60:	bf04      	itt	eq
 800ec62:	091b      	lsreq	r3, r3, #4
 800ec64:	3004      	addeq	r0, #4
 800ec66:	079a      	lsls	r2, r3, #30
 800ec68:	bf04      	itt	eq
 800ec6a:	089b      	lsreq	r3, r3, #2
 800ec6c:	3002      	addeq	r0, #2
 800ec6e:	07da      	lsls	r2, r3, #31
 800ec70:	d403      	bmi.n	800ec7a <__lo0bits+0x4e>
 800ec72:	085b      	lsrs	r3, r3, #1
 800ec74:	f100 0001 	add.w	r0, r0, #1
 800ec78:	d005      	beq.n	800ec86 <__lo0bits+0x5a>
 800ec7a:	600b      	str	r3, [r1, #0]
 800ec7c:	4770      	bx	lr
 800ec7e:	4610      	mov	r0, r2
 800ec80:	e7e9      	b.n	800ec56 <__lo0bits+0x2a>
 800ec82:	2000      	movs	r0, #0
 800ec84:	4770      	bx	lr
 800ec86:	2020      	movs	r0, #32
 800ec88:	4770      	bx	lr
	...

0800ec8c <__i2b>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	460c      	mov	r4, r1
 800ec90:	2101      	movs	r1, #1
 800ec92:	f7ff ff03 	bl	800ea9c <_Balloc>
 800ec96:	4602      	mov	r2, r0
 800ec98:	b928      	cbnz	r0, 800eca6 <__i2b+0x1a>
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <__i2b+0x24>)
 800ec9c:	4805      	ldr	r0, [pc, #20]	; (800ecb4 <__i2b+0x28>)
 800ec9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eca2:	f000 fb85 	bl	800f3b0 <__assert_func>
 800eca6:	2301      	movs	r3, #1
 800eca8:	6144      	str	r4, [r0, #20]
 800ecaa:	6103      	str	r3, [r0, #16]
 800ecac:	bd10      	pop	{r4, pc}
 800ecae:	bf00      	nop
 800ecb0:	0801113f 	.word	0x0801113f
 800ecb4:	08011150 	.word	0x08011150

0800ecb8 <__multiply>:
 800ecb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecbc:	4691      	mov	r9, r2
 800ecbe:	690a      	ldr	r2, [r1, #16]
 800ecc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	bfb8      	it	lt
 800ecc8:	460b      	movlt	r3, r1
 800ecca:	460c      	mov	r4, r1
 800eccc:	bfbc      	itt	lt
 800ecce:	464c      	movlt	r4, r9
 800ecd0:	4699      	movlt	r9, r3
 800ecd2:	6927      	ldr	r7, [r4, #16]
 800ecd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ecd8:	68a3      	ldr	r3, [r4, #8]
 800ecda:	6861      	ldr	r1, [r4, #4]
 800ecdc:	eb07 060a 	add.w	r6, r7, sl
 800ece0:	42b3      	cmp	r3, r6
 800ece2:	b085      	sub	sp, #20
 800ece4:	bfb8      	it	lt
 800ece6:	3101      	addlt	r1, #1
 800ece8:	f7ff fed8 	bl	800ea9c <_Balloc>
 800ecec:	b930      	cbnz	r0, 800ecfc <__multiply+0x44>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	4b44      	ldr	r3, [pc, #272]	; (800ee04 <__multiply+0x14c>)
 800ecf2:	4845      	ldr	r0, [pc, #276]	; (800ee08 <__multiply+0x150>)
 800ecf4:	f240 115d 	movw	r1, #349	; 0x15d
 800ecf8:	f000 fb5a 	bl	800f3b0 <__assert_func>
 800ecfc:	f100 0514 	add.w	r5, r0, #20
 800ed00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed04:	462b      	mov	r3, r5
 800ed06:	2200      	movs	r2, #0
 800ed08:	4543      	cmp	r3, r8
 800ed0a:	d321      	bcc.n	800ed50 <__multiply+0x98>
 800ed0c:	f104 0314 	add.w	r3, r4, #20
 800ed10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ed14:	f109 0314 	add.w	r3, r9, #20
 800ed18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed1c:	9202      	str	r2, [sp, #8]
 800ed1e:	1b3a      	subs	r2, r7, r4
 800ed20:	3a15      	subs	r2, #21
 800ed22:	f022 0203 	bic.w	r2, r2, #3
 800ed26:	3204      	adds	r2, #4
 800ed28:	f104 0115 	add.w	r1, r4, #21
 800ed2c:	428f      	cmp	r7, r1
 800ed2e:	bf38      	it	cc
 800ed30:	2204      	movcc	r2, #4
 800ed32:	9201      	str	r2, [sp, #4]
 800ed34:	9a02      	ldr	r2, [sp, #8]
 800ed36:	9303      	str	r3, [sp, #12]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d80c      	bhi.n	800ed56 <__multiply+0x9e>
 800ed3c:	2e00      	cmp	r6, #0
 800ed3e:	dd03      	ble.n	800ed48 <__multiply+0x90>
 800ed40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d05a      	beq.n	800edfe <__multiply+0x146>
 800ed48:	6106      	str	r6, [r0, #16]
 800ed4a:	b005      	add	sp, #20
 800ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed50:	f843 2b04 	str.w	r2, [r3], #4
 800ed54:	e7d8      	b.n	800ed08 <__multiply+0x50>
 800ed56:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed5a:	f1ba 0f00 	cmp.w	sl, #0
 800ed5e:	d024      	beq.n	800edaa <__multiply+0xf2>
 800ed60:	f104 0e14 	add.w	lr, r4, #20
 800ed64:	46a9      	mov	r9, r5
 800ed66:	f04f 0c00 	mov.w	ip, #0
 800ed6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ed6e:	f8d9 1000 	ldr.w	r1, [r9]
 800ed72:	fa1f fb82 	uxth.w	fp, r2
 800ed76:	b289      	uxth	r1, r1
 800ed78:	fb0a 110b 	mla	r1, sl, fp, r1
 800ed7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ed80:	f8d9 2000 	ldr.w	r2, [r9]
 800ed84:	4461      	add	r1, ip
 800ed86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed92:	b289      	uxth	r1, r1
 800ed94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed98:	4577      	cmp	r7, lr
 800ed9a:	f849 1b04 	str.w	r1, [r9], #4
 800ed9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eda2:	d8e2      	bhi.n	800ed6a <__multiply+0xb2>
 800eda4:	9a01      	ldr	r2, [sp, #4]
 800eda6:	f845 c002 	str.w	ip, [r5, r2]
 800edaa:	9a03      	ldr	r2, [sp, #12]
 800edac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800edb0:	3304      	adds	r3, #4
 800edb2:	f1b9 0f00 	cmp.w	r9, #0
 800edb6:	d020      	beq.n	800edfa <__multiply+0x142>
 800edb8:	6829      	ldr	r1, [r5, #0]
 800edba:	f104 0c14 	add.w	ip, r4, #20
 800edbe:	46ae      	mov	lr, r5
 800edc0:	f04f 0a00 	mov.w	sl, #0
 800edc4:	f8bc b000 	ldrh.w	fp, [ip]
 800edc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800edcc:	fb09 220b 	mla	r2, r9, fp, r2
 800edd0:	4492      	add	sl, r2
 800edd2:	b289      	uxth	r1, r1
 800edd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800edd8:	f84e 1b04 	str.w	r1, [lr], #4
 800eddc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ede0:	f8be 1000 	ldrh.w	r1, [lr]
 800ede4:	0c12      	lsrs	r2, r2, #16
 800ede6:	fb09 1102 	mla	r1, r9, r2, r1
 800edea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800edee:	4567      	cmp	r7, ip
 800edf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800edf4:	d8e6      	bhi.n	800edc4 <__multiply+0x10c>
 800edf6:	9a01      	ldr	r2, [sp, #4]
 800edf8:	50a9      	str	r1, [r5, r2]
 800edfa:	3504      	adds	r5, #4
 800edfc:	e79a      	b.n	800ed34 <__multiply+0x7c>
 800edfe:	3e01      	subs	r6, #1
 800ee00:	e79c      	b.n	800ed3c <__multiply+0x84>
 800ee02:	bf00      	nop
 800ee04:	0801113f 	.word	0x0801113f
 800ee08:	08011150 	.word	0x08011150

0800ee0c <__pow5mult>:
 800ee0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee10:	4615      	mov	r5, r2
 800ee12:	f012 0203 	ands.w	r2, r2, #3
 800ee16:	4606      	mov	r6, r0
 800ee18:	460f      	mov	r7, r1
 800ee1a:	d007      	beq.n	800ee2c <__pow5mult+0x20>
 800ee1c:	4c25      	ldr	r4, [pc, #148]	; (800eeb4 <__pow5mult+0xa8>)
 800ee1e:	3a01      	subs	r2, #1
 800ee20:	2300      	movs	r3, #0
 800ee22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee26:	f7ff fe9b 	bl	800eb60 <__multadd>
 800ee2a:	4607      	mov	r7, r0
 800ee2c:	10ad      	asrs	r5, r5, #2
 800ee2e:	d03d      	beq.n	800eeac <__pow5mult+0xa0>
 800ee30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee32:	b97c      	cbnz	r4, 800ee54 <__pow5mult+0x48>
 800ee34:	2010      	movs	r0, #16
 800ee36:	f7ff fe29 	bl	800ea8c <malloc>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	6270      	str	r0, [r6, #36]	; 0x24
 800ee3e:	b928      	cbnz	r0, 800ee4c <__pow5mult+0x40>
 800ee40:	4b1d      	ldr	r3, [pc, #116]	; (800eeb8 <__pow5mult+0xac>)
 800ee42:	481e      	ldr	r0, [pc, #120]	; (800eebc <__pow5mult+0xb0>)
 800ee44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee48:	f000 fab2 	bl	800f3b0 <__assert_func>
 800ee4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee50:	6004      	str	r4, [r0, #0]
 800ee52:	60c4      	str	r4, [r0, #12]
 800ee54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee5c:	b94c      	cbnz	r4, 800ee72 <__pow5mult+0x66>
 800ee5e:	f240 2171 	movw	r1, #625	; 0x271
 800ee62:	4630      	mov	r0, r6
 800ee64:	f7ff ff12 	bl	800ec8c <__i2b>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee6e:	4604      	mov	r4, r0
 800ee70:	6003      	str	r3, [r0, #0]
 800ee72:	f04f 0900 	mov.w	r9, #0
 800ee76:	07eb      	lsls	r3, r5, #31
 800ee78:	d50a      	bpl.n	800ee90 <__pow5mult+0x84>
 800ee7a:	4639      	mov	r1, r7
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f7ff ff1a 	bl	800ecb8 <__multiply>
 800ee84:	4639      	mov	r1, r7
 800ee86:	4680      	mov	r8, r0
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f7ff fe47 	bl	800eb1c <_Bfree>
 800ee8e:	4647      	mov	r7, r8
 800ee90:	106d      	asrs	r5, r5, #1
 800ee92:	d00b      	beq.n	800eeac <__pow5mult+0xa0>
 800ee94:	6820      	ldr	r0, [r4, #0]
 800ee96:	b938      	cbnz	r0, 800eea8 <__pow5mult+0x9c>
 800ee98:	4622      	mov	r2, r4
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	f7ff ff0b 	bl	800ecb8 <__multiply>
 800eea2:	6020      	str	r0, [r4, #0]
 800eea4:	f8c0 9000 	str.w	r9, [r0]
 800eea8:	4604      	mov	r4, r0
 800eeaa:	e7e4      	b.n	800ee76 <__pow5mult+0x6a>
 800eeac:	4638      	mov	r0, r7
 800eeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeb2:	bf00      	nop
 800eeb4:	080112a0 	.word	0x080112a0
 800eeb8:	080110cd 	.word	0x080110cd
 800eebc:	08011150 	.word	0x08011150

0800eec0 <__lshift>:
 800eec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec4:	460c      	mov	r4, r1
 800eec6:	6849      	ldr	r1, [r1, #4]
 800eec8:	6923      	ldr	r3, [r4, #16]
 800eeca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eece:	68a3      	ldr	r3, [r4, #8]
 800eed0:	4607      	mov	r7, r0
 800eed2:	4691      	mov	r9, r2
 800eed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eed8:	f108 0601 	add.w	r6, r8, #1
 800eedc:	42b3      	cmp	r3, r6
 800eede:	db0b      	blt.n	800eef8 <__lshift+0x38>
 800eee0:	4638      	mov	r0, r7
 800eee2:	f7ff fddb 	bl	800ea9c <_Balloc>
 800eee6:	4605      	mov	r5, r0
 800eee8:	b948      	cbnz	r0, 800eefe <__lshift+0x3e>
 800eeea:	4602      	mov	r2, r0
 800eeec:	4b2a      	ldr	r3, [pc, #168]	; (800ef98 <__lshift+0xd8>)
 800eeee:	482b      	ldr	r0, [pc, #172]	; (800ef9c <__lshift+0xdc>)
 800eef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eef4:	f000 fa5c 	bl	800f3b0 <__assert_func>
 800eef8:	3101      	adds	r1, #1
 800eefa:	005b      	lsls	r3, r3, #1
 800eefc:	e7ee      	b.n	800eedc <__lshift+0x1c>
 800eefe:	2300      	movs	r3, #0
 800ef00:	f100 0114 	add.w	r1, r0, #20
 800ef04:	f100 0210 	add.w	r2, r0, #16
 800ef08:	4618      	mov	r0, r3
 800ef0a:	4553      	cmp	r3, sl
 800ef0c:	db37      	blt.n	800ef7e <__lshift+0xbe>
 800ef0e:	6920      	ldr	r0, [r4, #16]
 800ef10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef14:	f104 0314 	add.w	r3, r4, #20
 800ef18:	f019 091f 	ands.w	r9, r9, #31
 800ef1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef24:	d02f      	beq.n	800ef86 <__lshift+0xc6>
 800ef26:	f1c9 0e20 	rsb	lr, r9, #32
 800ef2a:	468a      	mov	sl, r1
 800ef2c:	f04f 0c00 	mov.w	ip, #0
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	fa02 f209 	lsl.w	r2, r2, r9
 800ef36:	ea42 020c 	orr.w	r2, r2, ip
 800ef3a:	f84a 2b04 	str.w	r2, [sl], #4
 800ef3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef42:	4298      	cmp	r0, r3
 800ef44:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ef48:	d8f2      	bhi.n	800ef30 <__lshift+0x70>
 800ef4a:	1b03      	subs	r3, r0, r4
 800ef4c:	3b15      	subs	r3, #21
 800ef4e:	f023 0303 	bic.w	r3, r3, #3
 800ef52:	3304      	adds	r3, #4
 800ef54:	f104 0215 	add.w	r2, r4, #21
 800ef58:	4290      	cmp	r0, r2
 800ef5a:	bf38      	it	cc
 800ef5c:	2304      	movcc	r3, #4
 800ef5e:	f841 c003 	str.w	ip, [r1, r3]
 800ef62:	f1bc 0f00 	cmp.w	ip, #0
 800ef66:	d001      	beq.n	800ef6c <__lshift+0xac>
 800ef68:	f108 0602 	add.w	r6, r8, #2
 800ef6c:	3e01      	subs	r6, #1
 800ef6e:	4638      	mov	r0, r7
 800ef70:	612e      	str	r6, [r5, #16]
 800ef72:	4621      	mov	r1, r4
 800ef74:	f7ff fdd2 	bl	800eb1c <_Bfree>
 800ef78:	4628      	mov	r0, r5
 800ef7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef82:	3301      	adds	r3, #1
 800ef84:	e7c1      	b.n	800ef0a <__lshift+0x4a>
 800ef86:	3904      	subs	r1, #4
 800ef88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef90:	4298      	cmp	r0, r3
 800ef92:	d8f9      	bhi.n	800ef88 <__lshift+0xc8>
 800ef94:	e7ea      	b.n	800ef6c <__lshift+0xac>
 800ef96:	bf00      	nop
 800ef98:	0801113f 	.word	0x0801113f
 800ef9c:	08011150 	.word	0x08011150

0800efa0 <__mcmp>:
 800efa0:	b530      	push	{r4, r5, lr}
 800efa2:	6902      	ldr	r2, [r0, #16]
 800efa4:	690c      	ldr	r4, [r1, #16]
 800efa6:	1b12      	subs	r2, r2, r4
 800efa8:	d10e      	bne.n	800efc8 <__mcmp+0x28>
 800efaa:	f100 0314 	add.w	r3, r0, #20
 800efae:	3114      	adds	r1, #20
 800efb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800efb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800efb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800efbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800efc0:	42a5      	cmp	r5, r4
 800efc2:	d003      	beq.n	800efcc <__mcmp+0x2c>
 800efc4:	d305      	bcc.n	800efd2 <__mcmp+0x32>
 800efc6:	2201      	movs	r2, #1
 800efc8:	4610      	mov	r0, r2
 800efca:	bd30      	pop	{r4, r5, pc}
 800efcc:	4283      	cmp	r3, r0
 800efce:	d3f3      	bcc.n	800efb8 <__mcmp+0x18>
 800efd0:	e7fa      	b.n	800efc8 <__mcmp+0x28>
 800efd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efd6:	e7f7      	b.n	800efc8 <__mcmp+0x28>

0800efd8 <__mdiff>:
 800efd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	460c      	mov	r4, r1
 800efde:	4606      	mov	r6, r0
 800efe0:	4611      	mov	r1, r2
 800efe2:	4620      	mov	r0, r4
 800efe4:	4690      	mov	r8, r2
 800efe6:	f7ff ffdb 	bl	800efa0 <__mcmp>
 800efea:	1e05      	subs	r5, r0, #0
 800efec:	d110      	bne.n	800f010 <__mdiff+0x38>
 800efee:	4629      	mov	r1, r5
 800eff0:	4630      	mov	r0, r6
 800eff2:	f7ff fd53 	bl	800ea9c <_Balloc>
 800eff6:	b930      	cbnz	r0, 800f006 <__mdiff+0x2e>
 800eff8:	4b3a      	ldr	r3, [pc, #232]	; (800f0e4 <__mdiff+0x10c>)
 800effa:	4602      	mov	r2, r0
 800effc:	f240 2132 	movw	r1, #562	; 0x232
 800f000:	4839      	ldr	r0, [pc, #228]	; (800f0e8 <__mdiff+0x110>)
 800f002:	f000 f9d5 	bl	800f3b0 <__assert_func>
 800f006:	2301      	movs	r3, #1
 800f008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f00c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f010:	bfa4      	itt	ge
 800f012:	4643      	movge	r3, r8
 800f014:	46a0      	movge	r8, r4
 800f016:	4630      	mov	r0, r6
 800f018:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f01c:	bfa6      	itte	ge
 800f01e:	461c      	movge	r4, r3
 800f020:	2500      	movge	r5, #0
 800f022:	2501      	movlt	r5, #1
 800f024:	f7ff fd3a 	bl	800ea9c <_Balloc>
 800f028:	b920      	cbnz	r0, 800f034 <__mdiff+0x5c>
 800f02a:	4b2e      	ldr	r3, [pc, #184]	; (800f0e4 <__mdiff+0x10c>)
 800f02c:	4602      	mov	r2, r0
 800f02e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f032:	e7e5      	b.n	800f000 <__mdiff+0x28>
 800f034:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f038:	6926      	ldr	r6, [r4, #16]
 800f03a:	60c5      	str	r5, [r0, #12]
 800f03c:	f104 0914 	add.w	r9, r4, #20
 800f040:	f108 0514 	add.w	r5, r8, #20
 800f044:	f100 0e14 	add.w	lr, r0, #20
 800f048:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f04c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f050:	f108 0210 	add.w	r2, r8, #16
 800f054:	46f2      	mov	sl, lr
 800f056:	2100      	movs	r1, #0
 800f058:	f859 3b04 	ldr.w	r3, [r9], #4
 800f05c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f060:	fa1f f883 	uxth.w	r8, r3
 800f064:	fa11 f18b 	uxtah	r1, r1, fp
 800f068:	0c1b      	lsrs	r3, r3, #16
 800f06a:	eba1 0808 	sub.w	r8, r1, r8
 800f06e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f072:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f076:	fa1f f888 	uxth.w	r8, r8
 800f07a:	1419      	asrs	r1, r3, #16
 800f07c:	454e      	cmp	r6, r9
 800f07e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f082:	f84a 3b04 	str.w	r3, [sl], #4
 800f086:	d8e7      	bhi.n	800f058 <__mdiff+0x80>
 800f088:	1b33      	subs	r3, r6, r4
 800f08a:	3b15      	subs	r3, #21
 800f08c:	f023 0303 	bic.w	r3, r3, #3
 800f090:	3304      	adds	r3, #4
 800f092:	3415      	adds	r4, #21
 800f094:	42a6      	cmp	r6, r4
 800f096:	bf38      	it	cc
 800f098:	2304      	movcc	r3, #4
 800f09a:	441d      	add	r5, r3
 800f09c:	4473      	add	r3, lr
 800f09e:	469e      	mov	lr, r3
 800f0a0:	462e      	mov	r6, r5
 800f0a2:	4566      	cmp	r6, ip
 800f0a4:	d30e      	bcc.n	800f0c4 <__mdiff+0xec>
 800f0a6:	f10c 0203 	add.w	r2, ip, #3
 800f0aa:	1b52      	subs	r2, r2, r5
 800f0ac:	f022 0203 	bic.w	r2, r2, #3
 800f0b0:	3d03      	subs	r5, #3
 800f0b2:	45ac      	cmp	ip, r5
 800f0b4:	bf38      	it	cc
 800f0b6:	2200      	movcc	r2, #0
 800f0b8:	441a      	add	r2, r3
 800f0ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f0be:	b17b      	cbz	r3, 800f0e0 <__mdiff+0x108>
 800f0c0:	6107      	str	r7, [r0, #16]
 800f0c2:	e7a3      	b.n	800f00c <__mdiff+0x34>
 800f0c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800f0c8:	fa11 f288 	uxtah	r2, r1, r8
 800f0cc:	1414      	asrs	r4, r2, #16
 800f0ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f0d2:	b292      	uxth	r2, r2
 800f0d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f0d8:	f84e 2b04 	str.w	r2, [lr], #4
 800f0dc:	1421      	asrs	r1, r4, #16
 800f0de:	e7e0      	b.n	800f0a2 <__mdiff+0xca>
 800f0e0:	3f01      	subs	r7, #1
 800f0e2:	e7ea      	b.n	800f0ba <__mdiff+0xe2>
 800f0e4:	0801113f 	.word	0x0801113f
 800f0e8:	08011150 	.word	0x08011150

0800f0ec <__d2b>:
 800f0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0f0:	4689      	mov	r9, r1
 800f0f2:	2101      	movs	r1, #1
 800f0f4:	ec57 6b10 	vmov	r6, r7, d0
 800f0f8:	4690      	mov	r8, r2
 800f0fa:	f7ff fccf 	bl	800ea9c <_Balloc>
 800f0fe:	4604      	mov	r4, r0
 800f100:	b930      	cbnz	r0, 800f110 <__d2b+0x24>
 800f102:	4602      	mov	r2, r0
 800f104:	4b25      	ldr	r3, [pc, #148]	; (800f19c <__d2b+0xb0>)
 800f106:	4826      	ldr	r0, [pc, #152]	; (800f1a0 <__d2b+0xb4>)
 800f108:	f240 310a 	movw	r1, #778	; 0x30a
 800f10c:	f000 f950 	bl	800f3b0 <__assert_func>
 800f110:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f114:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f118:	bb35      	cbnz	r5, 800f168 <__d2b+0x7c>
 800f11a:	2e00      	cmp	r6, #0
 800f11c:	9301      	str	r3, [sp, #4]
 800f11e:	d028      	beq.n	800f172 <__d2b+0x86>
 800f120:	4668      	mov	r0, sp
 800f122:	9600      	str	r6, [sp, #0]
 800f124:	f7ff fd82 	bl	800ec2c <__lo0bits>
 800f128:	9900      	ldr	r1, [sp, #0]
 800f12a:	b300      	cbz	r0, 800f16e <__d2b+0x82>
 800f12c:	9a01      	ldr	r2, [sp, #4]
 800f12e:	f1c0 0320 	rsb	r3, r0, #32
 800f132:	fa02 f303 	lsl.w	r3, r2, r3
 800f136:	430b      	orrs	r3, r1
 800f138:	40c2      	lsrs	r2, r0
 800f13a:	6163      	str	r3, [r4, #20]
 800f13c:	9201      	str	r2, [sp, #4]
 800f13e:	9b01      	ldr	r3, [sp, #4]
 800f140:	61a3      	str	r3, [r4, #24]
 800f142:	2b00      	cmp	r3, #0
 800f144:	bf14      	ite	ne
 800f146:	2202      	movne	r2, #2
 800f148:	2201      	moveq	r2, #1
 800f14a:	6122      	str	r2, [r4, #16]
 800f14c:	b1d5      	cbz	r5, 800f184 <__d2b+0x98>
 800f14e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f152:	4405      	add	r5, r0
 800f154:	f8c9 5000 	str.w	r5, [r9]
 800f158:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f15c:	f8c8 0000 	str.w	r0, [r8]
 800f160:	4620      	mov	r0, r4
 800f162:	b003      	add	sp, #12
 800f164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f16c:	e7d5      	b.n	800f11a <__d2b+0x2e>
 800f16e:	6161      	str	r1, [r4, #20]
 800f170:	e7e5      	b.n	800f13e <__d2b+0x52>
 800f172:	a801      	add	r0, sp, #4
 800f174:	f7ff fd5a 	bl	800ec2c <__lo0bits>
 800f178:	9b01      	ldr	r3, [sp, #4]
 800f17a:	6163      	str	r3, [r4, #20]
 800f17c:	2201      	movs	r2, #1
 800f17e:	6122      	str	r2, [r4, #16]
 800f180:	3020      	adds	r0, #32
 800f182:	e7e3      	b.n	800f14c <__d2b+0x60>
 800f184:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f18c:	f8c9 0000 	str.w	r0, [r9]
 800f190:	6918      	ldr	r0, [r3, #16]
 800f192:	f7ff fd2b 	bl	800ebec <__hi0bits>
 800f196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f19a:	e7df      	b.n	800f15c <__d2b+0x70>
 800f19c:	0801113f 	.word	0x0801113f
 800f1a0:	08011150 	.word	0x08011150

0800f1a4 <_calloc_r>:
 800f1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1a6:	fba1 2402 	umull	r2, r4, r1, r2
 800f1aa:	b94c      	cbnz	r4, 800f1c0 <_calloc_r+0x1c>
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	9201      	str	r2, [sp, #4]
 800f1b0:	f000 f87a 	bl	800f2a8 <_malloc_r>
 800f1b4:	9a01      	ldr	r2, [sp, #4]
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	b930      	cbnz	r0, 800f1c8 <_calloc_r+0x24>
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	b003      	add	sp, #12
 800f1be:	bd30      	pop	{r4, r5, pc}
 800f1c0:	220c      	movs	r2, #12
 800f1c2:	6002      	str	r2, [r0, #0]
 800f1c4:	2500      	movs	r5, #0
 800f1c6:	e7f8      	b.n	800f1ba <_calloc_r+0x16>
 800f1c8:	4621      	mov	r1, r4
 800f1ca:	f7fe f96d 	bl	800d4a8 <memset>
 800f1ce:	e7f4      	b.n	800f1ba <_calloc_r+0x16>

0800f1d0 <_free_r>:
 800f1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1d2:	2900      	cmp	r1, #0
 800f1d4:	d044      	beq.n	800f260 <_free_r+0x90>
 800f1d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1da:	9001      	str	r0, [sp, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f1a1 0404 	sub.w	r4, r1, #4
 800f1e2:	bfb8      	it	lt
 800f1e4:	18e4      	addlt	r4, r4, r3
 800f1e6:	f000 f925 	bl	800f434 <__malloc_lock>
 800f1ea:	4a1e      	ldr	r2, [pc, #120]	; (800f264 <_free_r+0x94>)
 800f1ec:	9801      	ldr	r0, [sp, #4]
 800f1ee:	6813      	ldr	r3, [r2, #0]
 800f1f0:	b933      	cbnz	r3, 800f200 <_free_r+0x30>
 800f1f2:	6063      	str	r3, [r4, #4]
 800f1f4:	6014      	str	r4, [r2, #0]
 800f1f6:	b003      	add	sp, #12
 800f1f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1fc:	f000 b920 	b.w	800f440 <__malloc_unlock>
 800f200:	42a3      	cmp	r3, r4
 800f202:	d908      	bls.n	800f216 <_free_r+0x46>
 800f204:	6825      	ldr	r5, [r4, #0]
 800f206:	1961      	adds	r1, r4, r5
 800f208:	428b      	cmp	r3, r1
 800f20a:	bf01      	itttt	eq
 800f20c:	6819      	ldreq	r1, [r3, #0]
 800f20e:	685b      	ldreq	r3, [r3, #4]
 800f210:	1949      	addeq	r1, r1, r5
 800f212:	6021      	streq	r1, [r4, #0]
 800f214:	e7ed      	b.n	800f1f2 <_free_r+0x22>
 800f216:	461a      	mov	r2, r3
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	b10b      	cbz	r3, 800f220 <_free_r+0x50>
 800f21c:	42a3      	cmp	r3, r4
 800f21e:	d9fa      	bls.n	800f216 <_free_r+0x46>
 800f220:	6811      	ldr	r1, [r2, #0]
 800f222:	1855      	adds	r5, r2, r1
 800f224:	42a5      	cmp	r5, r4
 800f226:	d10b      	bne.n	800f240 <_free_r+0x70>
 800f228:	6824      	ldr	r4, [r4, #0]
 800f22a:	4421      	add	r1, r4
 800f22c:	1854      	adds	r4, r2, r1
 800f22e:	42a3      	cmp	r3, r4
 800f230:	6011      	str	r1, [r2, #0]
 800f232:	d1e0      	bne.n	800f1f6 <_free_r+0x26>
 800f234:	681c      	ldr	r4, [r3, #0]
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	6053      	str	r3, [r2, #4]
 800f23a:	4421      	add	r1, r4
 800f23c:	6011      	str	r1, [r2, #0]
 800f23e:	e7da      	b.n	800f1f6 <_free_r+0x26>
 800f240:	d902      	bls.n	800f248 <_free_r+0x78>
 800f242:	230c      	movs	r3, #12
 800f244:	6003      	str	r3, [r0, #0]
 800f246:	e7d6      	b.n	800f1f6 <_free_r+0x26>
 800f248:	6825      	ldr	r5, [r4, #0]
 800f24a:	1961      	adds	r1, r4, r5
 800f24c:	428b      	cmp	r3, r1
 800f24e:	bf04      	itt	eq
 800f250:	6819      	ldreq	r1, [r3, #0]
 800f252:	685b      	ldreq	r3, [r3, #4]
 800f254:	6063      	str	r3, [r4, #4]
 800f256:	bf04      	itt	eq
 800f258:	1949      	addeq	r1, r1, r5
 800f25a:	6021      	streq	r1, [r4, #0]
 800f25c:	6054      	str	r4, [r2, #4]
 800f25e:	e7ca      	b.n	800f1f6 <_free_r+0x26>
 800f260:	b003      	add	sp, #12
 800f262:	bd30      	pop	{r4, r5, pc}
 800f264:	200022e4 	.word	0x200022e4

0800f268 <sbrk_aligned>:
 800f268:	b570      	push	{r4, r5, r6, lr}
 800f26a:	4e0e      	ldr	r6, [pc, #56]	; (800f2a4 <sbrk_aligned+0x3c>)
 800f26c:	460c      	mov	r4, r1
 800f26e:	6831      	ldr	r1, [r6, #0]
 800f270:	4605      	mov	r5, r0
 800f272:	b911      	cbnz	r1, 800f27a <sbrk_aligned+0x12>
 800f274:	f000 f88c 	bl	800f390 <_sbrk_r>
 800f278:	6030      	str	r0, [r6, #0]
 800f27a:	4621      	mov	r1, r4
 800f27c:	4628      	mov	r0, r5
 800f27e:	f000 f887 	bl	800f390 <_sbrk_r>
 800f282:	1c43      	adds	r3, r0, #1
 800f284:	d00a      	beq.n	800f29c <sbrk_aligned+0x34>
 800f286:	1cc4      	adds	r4, r0, #3
 800f288:	f024 0403 	bic.w	r4, r4, #3
 800f28c:	42a0      	cmp	r0, r4
 800f28e:	d007      	beq.n	800f2a0 <sbrk_aligned+0x38>
 800f290:	1a21      	subs	r1, r4, r0
 800f292:	4628      	mov	r0, r5
 800f294:	f000 f87c 	bl	800f390 <_sbrk_r>
 800f298:	3001      	adds	r0, #1
 800f29a:	d101      	bne.n	800f2a0 <sbrk_aligned+0x38>
 800f29c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	bd70      	pop	{r4, r5, r6, pc}
 800f2a4:	200022e8 	.word	0x200022e8

0800f2a8 <_malloc_r>:
 800f2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ac:	1ccd      	adds	r5, r1, #3
 800f2ae:	f025 0503 	bic.w	r5, r5, #3
 800f2b2:	3508      	adds	r5, #8
 800f2b4:	2d0c      	cmp	r5, #12
 800f2b6:	bf38      	it	cc
 800f2b8:	250c      	movcc	r5, #12
 800f2ba:	2d00      	cmp	r5, #0
 800f2bc:	4607      	mov	r7, r0
 800f2be:	db01      	blt.n	800f2c4 <_malloc_r+0x1c>
 800f2c0:	42a9      	cmp	r1, r5
 800f2c2:	d905      	bls.n	800f2d0 <_malloc_r+0x28>
 800f2c4:	230c      	movs	r3, #12
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	2600      	movs	r6, #0
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d0:	4e2e      	ldr	r6, [pc, #184]	; (800f38c <_malloc_r+0xe4>)
 800f2d2:	f000 f8af 	bl	800f434 <__malloc_lock>
 800f2d6:	6833      	ldr	r3, [r6, #0]
 800f2d8:	461c      	mov	r4, r3
 800f2da:	bb34      	cbnz	r4, 800f32a <_malloc_r+0x82>
 800f2dc:	4629      	mov	r1, r5
 800f2de:	4638      	mov	r0, r7
 800f2e0:	f7ff ffc2 	bl	800f268 <sbrk_aligned>
 800f2e4:	1c43      	adds	r3, r0, #1
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	d14d      	bne.n	800f386 <_malloc_r+0xde>
 800f2ea:	6834      	ldr	r4, [r6, #0]
 800f2ec:	4626      	mov	r6, r4
 800f2ee:	2e00      	cmp	r6, #0
 800f2f0:	d140      	bne.n	800f374 <_malloc_r+0xcc>
 800f2f2:	6823      	ldr	r3, [r4, #0]
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	eb04 0803 	add.w	r8, r4, r3
 800f2fc:	f000 f848 	bl	800f390 <_sbrk_r>
 800f300:	4580      	cmp	r8, r0
 800f302:	d13a      	bne.n	800f37a <_malloc_r+0xd2>
 800f304:	6821      	ldr	r1, [r4, #0]
 800f306:	3503      	adds	r5, #3
 800f308:	1a6d      	subs	r5, r5, r1
 800f30a:	f025 0503 	bic.w	r5, r5, #3
 800f30e:	3508      	adds	r5, #8
 800f310:	2d0c      	cmp	r5, #12
 800f312:	bf38      	it	cc
 800f314:	250c      	movcc	r5, #12
 800f316:	4629      	mov	r1, r5
 800f318:	4638      	mov	r0, r7
 800f31a:	f7ff ffa5 	bl	800f268 <sbrk_aligned>
 800f31e:	3001      	adds	r0, #1
 800f320:	d02b      	beq.n	800f37a <_malloc_r+0xd2>
 800f322:	6823      	ldr	r3, [r4, #0]
 800f324:	442b      	add	r3, r5
 800f326:	6023      	str	r3, [r4, #0]
 800f328:	e00e      	b.n	800f348 <_malloc_r+0xa0>
 800f32a:	6822      	ldr	r2, [r4, #0]
 800f32c:	1b52      	subs	r2, r2, r5
 800f32e:	d41e      	bmi.n	800f36e <_malloc_r+0xc6>
 800f330:	2a0b      	cmp	r2, #11
 800f332:	d916      	bls.n	800f362 <_malloc_r+0xba>
 800f334:	1961      	adds	r1, r4, r5
 800f336:	42a3      	cmp	r3, r4
 800f338:	6025      	str	r5, [r4, #0]
 800f33a:	bf18      	it	ne
 800f33c:	6059      	strne	r1, [r3, #4]
 800f33e:	6863      	ldr	r3, [r4, #4]
 800f340:	bf08      	it	eq
 800f342:	6031      	streq	r1, [r6, #0]
 800f344:	5162      	str	r2, [r4, r5]
 800f346:	604b      	str	r3, [r1, #4]
 800f348:	4638      	mov	r0, r7
 800f34a:	f104 060b 	add.w	r6, r4, #11
 800f34e:	f000 f877 	bl	800f440 <__malloc_unlock>
 800f352:	f026 0607 	bic.w	r6, r6, #7
 800f356:	1d23      	adds	r3, r4, #4
 800f358:	1af2      	subs	r2, r6, r3
 800f35a:	d0b6      	beq.n	800f2ca <_malloc_r+0x22>
 800f35c:	1b9b      	subs	r3, r3, r6
 800f35e:	50a3      	str	r3, [r4, r2]
 800f360:	e7b3      	b.n	800f2ca <_malloc_r+0x22>
 800f362:	6862      	ldr	r2, [r4, #4]
 800f364:	42a3      	cmp	r3, r4
 800f366:	bf0c      	ite	eq
 800f368:	6032      	streq	r2, [r6, #0]
 800f36a:	605a      	strne	r2, [r3, #4]
 800f36c:	e7ec      	b.n	800f348 <_malloc_r+0xa0>
 800f36e:	4623      	mov	r3, r4
 800f370:	6864      	ldr	r4, [r4, #4]
 800f372:	e7b2      	b.n	800f2da <_malloc_r+0x32>
 800f374:	4634      	mov	r4, r6
 800f376:	6876      	ldr	r6, [r6, #4]
 800f378:	e7b9      	b.n	800f2ee <_malloc_r+0x46>
 800f37a:	230c      	movs	r3, #12
 800f37c:	603b      	str	r3, [r7, #0]
 800f37e:	4638      	mov	r0, r7
 800f380:	f000 f85e 	bl	800f440 <__malloc_unlock>
 800f384:	e7a1      	b.n	800f2ca <_malloc_r+0x22>
 800f386:	6025      	str	r5, [r4, #0]
 800f388:	e7de      	b.n	800f348 <_malloc_r+0xa0>
 800f38a:	bf00      	nop
 800f38c:	200022e4 	.word	0x200022e4

0800f390 <_sbrk_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4d06      	ldr	r5, [pc, #24]	; (800f3ac <_sbrk_r+0x1c>)
 800f394:	2300      	movs	r3, #0
 800f396:	4604      	mov	r4, r0
 800f398:	4608      	mov	r0, r1
 800f39a:	602b      	str	r3, [r5, #0]
 800f39c:	f7f3 fece 	bl	800313c <_sbrk>
 800f3a0:	1c43      	adds	r3, r0, #1
 800f3a2:	d102      	bne.n	800f3aa <_sbrk_r+0x1a>
 800f3a4:	682b      	ldr	r3, [r5, #0]
 800f3a6:	b103      	cbz	r3, 800f3aa <_sbrk_r+0x1a>
 800f3a8:	6023      	str	r3, [r4, #0]
 800f3aa:	bd38      	pop	{r3, r4, r5, pc}
 800f3ac:	200022ec 	.word	0x200022ec

0800f3b0 <__assert_func>:
 800f3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3b2:	4614      	mov	r4, r2
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	4b09      	ldr	r3, [pc, #36]	; (800f3dc <__assert_func+0x2c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	68d8      	ldr	r0, [r3, #12]
 800f3be:	b14c      	cbz	r4, 800f3d4 <__assert_func+0x24>
 800f3c0:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <__assert_func+0x30>)
 800f3c2:	9100      	str	r1, [sp, #0]
 800f3c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3c8:	4906      	ldr	r1, [pc, #24]	; (800f3e4 <__assert_func+0x34>)
 800f3ca:	462b      	mov	r3, r5
 800f3cc:	f000 f80e 	bl	800f3ec <fiprintf>
 800f3d0:	f000 fa64 	bl	800f89c <abort>
 800f3d4:	4b04      	ldr	r3, [pc, #16]	; (800f3e8 <__assert_func+0x38>)
 800f3d6:	461c      	mov	r4, r3
 800f3d8:	e7f3      	b.n	800f3c2 <__assert_func+0x12>
 800f3da:	bf00      	nop
 800f3dc:	20000128 	.word	0x20000128
 800f3e0:	080112ac 	.word	0x080112ac
 800f3e4:	080112b9 	.word	0x080112b9
 800f3e8:	080112e7 	.word	0x080112e7

0800f3ec <fiprintf>:
 800f3ec:	b40e      	push	{r1, r2, r3}
 800f3ee:	b503      	push	{r0, r1, lr}
 800f3f0:	4601      	mov	r1, r0
 800f3f2:	ab03      	add	r3, sp, #12
 800f3f4:	4805      	ldr	r0, [pc, #20]	; (800f40c <fiprintf+0x20>)
 800f3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3fa:	6800      	ldr	r0, [r0, #0]
 800f3fc:	9301      	str	r3, [sp, #4]
 800f3fe:	f000 f84f 	bl	800f4a0 <_vfiprintf_r>
 800f402:	b002      	add	sp, #8
 800f404:	f85d eb04 	ldr.w	lr, [sp], #4
 800f408:	b003      	add	sp, #12
 800f40a:	4770      	bx	lr
 800f40c:	20000128 	.word	0x20000128

0800f410 <__ascii_mbtowc>:
 800f410:	b082      	sub	sp, #8
 800f412:	b901      	cbnz	r1, 800f416 <__ascii_mbtowc+0x6>
 800f414:	a901      	add	r1, sp, #4
 800f416:	b142      	cbz	r2, 800f42a <__ascii_mbtowc+0x1a>
 800f418:	b14b      	cbz	r3, 800f42e <__ascii_mbtowc+0x1e>
 800f41a:	7813      	ldrb	r3, [r2, #0]
 800f41c:	600b      	str	r3, [r1, #0]
 800f41e:	7812      	ldrb	r2, [r2, #0]
 800f420:	1e10      	subs	r0, r2, #0
 800f422:	bf18      	it	ne
 800f424:	2001      	movne	r0, #1
 800f426:	b002      	add	sp, #8
 800f428:	4770      	bx	lr
 800f42a:	4610      	mov	r0, r2
 800f42c:	e7fb      	b.n	800f426 <__ascii_mbtowc+0x16>
 800f42e:	f06f 0001 	mvn.w	r0, #1
 800f432:	e7f8      	b.n	800f426 <__ascii_mbtowc+0x16>

0800f434 <__malloc_lock>:
 800f434:	4801      	ldr	r0, [pc, #4]	; (800f43c <__malloc_lock+0x8>)
 800f436:	f000 bbf1 	b.w	800fc1c <__retarget_lock_acquire_recursive>
 800f43a:	bf00      	nop
 800f43c:	200022f0 	.word	0x200022f0

0800f440 <__malloc_unlock>:
 800f440:	4801      	ldr	r0, [pc, #4]	; (800f448 <__malloc_unlock+0x8>)
 800f442:	f000 bbec 	b.w	800fc1e <__retarget_lock_release_recursive>
 800f446:	bf00      	nop
 800f448:	200022f0 	.word	0x200022f0

0800f44c <__sfputc_r>:
 800f44c:	6893      	ldr	r3, [r2, #8]
 800f44e:	3b01      	subs	r3, #1
 800f450:	2b00      	cmp	r3, #0
 800f452:	b410      	push	{r4}
 800f454:	6093      	str	r3, [r2, #8]
 800f456:	da08      	bge.n	800f46a <__sfputc_r+0x1e>
 800f458:	6994      	ldr	r4, [r2, #24]
 800f45a:	42a3      	cmp	r3, r4
 800f45c:	db01      	blt.n	800f462 <__sfputc_r+0x16>
 800f45e:	290a      	cmp	r1, #10
 800f460:	d103      	bne.n	800f46a <__sfputc_r+0x1e>
 800f462:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f466:	f000 b94b 	b.w	800f700 <__swbuf_r>
 800f46a:	6813      	ldr	r3, [r2, #0]
 800f46c:	1c58      	adds	r0, r3, #1
 800f46e:	6010      	str	r0, [r2, #0]
 800f470:	7019      	strb	r1, [r3, #0]
 800f472:	4608      	mov	r0, r1
 800f474:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f478:	4770      	bx	lr

0800f47a <__sfputs_r>:
 800f47a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47c:	4606      	mov	r6, r0
 800f47e:	460f      	mov	r7, r1
 800f480:	4614      	mov	r4, r2
 800f482:	18d5      	adds	r5, r2, r3
 800f484:	42ac      	cmp	r4, r5
 800f486:	d101      	bne.n	800f48c <__sfputs_r+0x12>
 800f488:	2000      	movs	r0, #0
 800f48a:	e007      	b.n	800f49c <__sfputs_r+0x22>
 800f48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f490:	463a      	mov	r2, r7
 800f492:	4630      	mov	r0, r6
 800f494:	f7ff ffda 	bl	800f44c <__sfputc_r>
 800f498:	1c43      	adds	r3, r0, #1
 800f49a:	d1f3      	bne.n	800f484 <__sfputs_r+0xa>
 800f49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4a0 <_vfiprintf_r>:
 800f4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a4:	460d      	mov	r5, r1
 800f4a6:	b09d      	sub	sp, #116	; 0x74
 800f4a8:	4614      	mov	r4, r2
 800f4aa:	4698      	mov	r8, r3
 800f4ac:	4606      	mov	r6, r0
 800f4ae:	b118      	cbz	r0, 800f4b8 <_vfiprintf_r+0x18>
 800f4b0:	6983      	ldr	r3, [r0, #24]
 800f4b2:	b90b      	cbnz	r3, 800f4b8 <_vfiprintf_r+0x18>
 800f4b4:	f000 fb14 	bl	800fae0 <__sinit>
 800f4b8:	4b89      	ldr	r3, [pc, #548]	; (800f6e0 <_vfiprintf_r+0x240>)
 800f4ba:	429d      	cmp	r5, r3
 800f4bc:	d11b      	bne.n	800f4f6 <_vfiprintf_r+0x56>
 800f4be:	6875      	ldr	r5, [r6, #4]
 800f4c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4c2:	07d9      	lsls	r1, r3, #31
 800f4c4:	d405      	bmi.n	800f4d2 <_vfiprintf_r+0x32>
 800f4c6:	89ab      	ldrh	r3, [r5, #12]
 800f4c8:	059a      	lsls	r2, r3, #22
 800f4ca:	d402      	bmi.n	800f4d2 <_vfiprintf_r+0x32>
 800f4cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4ce:	f000 fba5 	bl	800fc1c <__retarget_lock_acquire_recursive>
 800f4d2:	89ab      	ldrh	r3, [r5, #12]
 800f4d4:	071b      	lsls	r3, r3, #28
 800f4d6:	d501      	bpl.n	800f4dc <_vfiprintf_r+0x3c>
 800f4d8:	692b      	ldr	r3, [r5, #16]
 800f4da:	b9eb      	cbnz	r3, 800f518 <_vfiprintf_r+0x78>
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4630      	mov	r0, r6
 800f4e0:	f000 f96e 	bl	800f7c0 <__swsetup_r>
 800f4e4:	b1c0      	cbz	r0, 800f518 <_vfiprintf_r+0x78>
 800f4e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4e8:	07dc      	lsls	r4, r3, #31
 800f4ea:	d50e      	bpl.n	800f50a <_vfiprintf_r+0x6a>
 800f4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4f0:	b01d      	add	sp, #116	; 0x74
 800f4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f6:	4b7b      	ldr	r3, [pc, #492]	; (800f6e4 <_vfiprintf_r+0x244>)
 800f4f8:	429d      	cmp	r5, r3
 800f4fa:	d101      	bne.n	800f500 <_vfiprintf_r+0x60>
 800f4fc:	68b5      	ldr	r5, [r6, #8]
 800f4fe:	e7df      	b.n	800f4c0 <_vfiprintf_r+0x20>
 800f500:	4b79      	ldr	r3, [pc, #484]	; (800f6e8 <_vfiprintf_r+0x248>)
 800f502:	429d      	cmp	r5, r3
 800f504:	bf08      	it	eq
 800f506:	68f5      	ldreq	r5, [r6, #12]
 800f508:	e7da      	b.n	800f4c0 <_vfiprintf_r+0x20>
 800f50a:	89ab      	ldrh	r3, [r5, #12]
 800f50c:	0598      	lsls	r0, r3, #22
 800f50e:	d4ed      	bmi.n	800f4ec <_vfiprintf_r+0x4c>
 800f510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f512:	f000 fb84 	bl	800fc1e <__retarget_lock_release_recursive>
 800f516:	e7e9      	b.n	800f4ec <_vfiprintf_r+0x4c>
 800f518:	2300      	movs	r3, #0
 800f51a:	9309      	str	r3, [sp, #36]	; 0x24
 800f51c:	2320      	movs	r3, #32
 800f51e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f522:	f8cd 800c 	str.w	r8, [sp, #12]
 800f526:	2330      	movs	r3, #48	; 0x30
 800f528:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f6ec <_vfiprintf_r+0x24c>
 800f52c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f530:	f04f 0901 	mov.w	r9, #1
 800f534:	4623      	mov	r3, r4
 800f536:	469a      	mov	sl, r3
 800f538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f53c:	b10a      	cbz	r2, 800f542 <_vfiprintf_r+0xa2>
 800f53e:	2a25      	cmp	r2, #37	; 0x25
 800f540:	d1f9      	bne.n	800f536 <_vfiprintf_r+0x96>
 800f542:	ebba 0b04 	subs.w	fp, sl, r4
 800f546:	d00b      	beq.n	800f560 <_vfiprintf_r+0xc0>
 800f548:	465b      	mov	r3, fp
 800f54a:	4622      	mov	r2, r4
 800f54c:	4629      	mov	r1, r5
 800f54e:	4630      	mov	r0, r6
 800f550:	f7ff ff93 	bl	800f47a <__sfputs_r>
 800f554:	3001      	adds	r0, #1
 800f556:	f000 80aa 	beq.w	800f6ae <_vfiprintf_r+0x20e>
 800f55a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f55c:	445a      	add	r2, fp
 800f55e:	9209      	str	r2, [sp, #36]	; 0x24
 800f560:	f89a 3000 	ldrb.w	r3, [sl]
 800f564:	2b00      	cmp	r3, #0
 800f566:	f000 80a2 	beq.w	800f6ae <_vfiprintf_r+0x20e>
 800f56a:	2300      	movs	r3, #0
 800f56c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f574:	f10a 0a01 	add.w	sl, sl, #1
 800f578:	9304      	str	r3, [sp, #16]
 800f57a:	9307      	str	r3, [sp, #28]
 800f57c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f580:	931a      	str	r3, [sp, #104]	; 0x68
 800f582:	4654      	mov	r4, sl
 800f584:	2205      	movs	r2, #5
 800f586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f58a:	4858      	ldr	r0, [pc, #352]	; (800f6ec <_vfiprintf_r+0x24c>)
 800f58c:	f7f0 fe48 	bl	8000220 <memchr>
 800f590:	9a04      	ldr	r2, [sp, #16]
 800f592:	b9d8      	cbnz	r0, 800f5cc <_vfiprintf_r+0x12c>
 800f594:	06d1      	lsls	r1, r2, #27
 800f596:	bf44      	itt	mi
 800f598:	2320      	movmi	r3, #32
 800f59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f59e:	0713      	lsls	r3, r2, #28
 800f5a0:	bf44      	itt	mi
 800f5a2:	232b      	movmi	r3, #43	; 0x2b
 800f5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f5ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f5ae:	d015      	beq.n	800f5dc <_vfiprintf_r+0x13c>
 800f5b0:	9a07      	ldr	r2, [sp, #28]
 800f5b2:	4654      	mov	r4, sl
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	f04f 0c0a 	mov.w	ip, #10
 800f5ba:	4621      	mov	r1, r4
 800f5bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5c0:	3b30      	subs	r3, #48	; 0x30
 800f5c2:	2b09      	cmp	r3, #9
 800f5c4:	d94e      	bls.n	800f664 <_vfiprintf_r+0x1c4>
 800f5c6:	b1b0      	cbz	r0, 800f5f6 <_vfiprintf_r+0x156>
 800f5c8:	9207      	str	r2, [sp, #28]
 800f5ca:	e014      	b.n	800f5f6 <_vfiprintf_r+0x156>
 800f5cc:	eba0 0308 	sub.w	r3, r0, r8
 800f5d0:	fa09 f303 	lsl.w	r3, r9, r3
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	9304      	str	r3, [sp, #16]
 800f5d8:	46a2      	mov	sl, r4
 800f5da:	e7d2      	b.n	800f582 <_vfiprintf_r+0xe2>
 800f5dc:	9b03      	ldr	r3, [sp, #12]
 800f5de:	1d19      	adds	r1, r3, #4
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	9103      	str	r1, [sp, #12]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	bfbb      	ittet	lt
 800f5e8:	425b      	neglt	r3, r3
 800f5ea:	f042 0202 	orrlt.w	r2, r2, #2
 800f5ee:	9307      	strge	r3, [sp, #28]
 800f5f0:	9307      	strlt	r3, [sp, #28]
 800f5f2:	bfb8      	it	lt
 800f5f4:	9204      	strlt	r2, [sp, #16]
 800f5f6:	7823      	ldrb	r3, [r4, #0]
 800f5f8:	2b2e      	cmp	r3, #46	; 0x2e
 800f5fa:	d10c      	bne.n	800f616 <_vfiprintf_r+0x176>
 800f5fc:	7863      	ldrb	r3, [r4, #1]
 800f5fe:	2b2a      	cmp	r3, #42	; 0x2a
 800f600:	d135      	bne.n	800f66e <_vfiprintf_r+0x1ce>
 800f602:	9b03      	ldr	r3, [sp, #12]
 800f604:	1d1a      	adds	r2, r3, #4
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	9203      	str	r2, [sp, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	bfb8      	it	lt
 800f60e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f612:	3402      	adds	r4, #2
 800f614:	9305      	str	r3, [sp, #20]
 800f616:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f6fc <_vfiprintf_r+0x25c>
 800f61a:	7821      	ldrb	r1, [r4, #0]
 800f61c:	2203      	movs	r2, #3
 800f61e:	4650      	mov	r0, sl
 800f620:	f7f0 fdfe 	bl	8000220 <memchr>
 800f624:	b140      	cbz	r0, 800f638 <_vfiprintf_r+0x198>
 800f626:	2340      	movs	r3, #64	; 0x40
 800f628:	eba0 000a 	sub.w	r0, r0, sl
 800f62c:	fa03 f000 	lsl.w	r0, r3, r0
 800f630:	9b04      	ldr	r3, [sp, #16]
 800f632:	4303      	orrs	r3, r0
 800f634:	3401      	adds	r4, #1
 800f636:	9304      	str	r3, [sp, #16]
 800f638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f63c:	482c      	ldr	r0, [pc, #176]	; (800f6f0 <_vfiprintf_r+0x250>)
 800f63e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f642:	2206      	movs	r2, #6
 800f644:	f7f0 fdec 	bl	8000220 <memchr>
 800f648:	2800      	cmp	r0, #0
 800f64a:	d03f      	beq.n	800f6cc <_vfiprintf_r+0x22c>
 800f64c:	4b29      	ldr	r3, [pc, #164]	; (800f6f4 <_vfiprintf_r+0x254>)
 800f64e:	bb1b      	cbnz	r3, 800f698 <_vfiprintf_r+0x1f8>
 800f650:	9b03      	ldr	r3, [sp, #12]
 800f652:	3307      	adds	r3, #7
 800f654:	f023 0307 	bic.w	r3, r3, #7
 800f658:	3308      	adds	r3, #8
 800f65a:	9303      	str	r3, [sp, #12]
 800f65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f65e:	443b      	add	r3, r7
 800f660:	9309      	str	r3, [sp, #36]	; 0x24
 800f662:	e767      	b.n	800f534 <_vfiprintf_r+0x94>
 800f664:	fb0c 3202 	mla	r2, ip, r2, r3
 800f668:	460c      	mov	r4, r1
 800f66a:	2001      	movs	r0, #1
 800f66c:	e7a5      	b.n	800f5ba <_vfiprintf_r+0x11a>
 800f66e:	2300      	movs	r3, #0
 800f670:	3401      	adds	r4, #1
 800f672:	9305      	str	r3, [sp, #20]
 800f674:	4619      	mov	r1, r3
 800f676:	f04f 0c0a 	mov.w	ip, #10
 800f67a:	4620      	mov	r0, r4
 800f67c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f680:	3a30      	subs	r2, #48	; 0x30
 800f682:	2a09      	cmp	r2, #9
 800f684:	d903      	bls.n	800f68e <_vfiprintf_r+0x1ee>
 800f686:	2b00      	cmp	r3, #0
 800f688:	d0c5      	beq.n	800f616 <_vfiprintf_r+0x176>
 800f68a:	9105      	str	r1, [sp, #20]
 800f68c:	e7c3      	b.n	800f616 <_vfiprintf_r+0x176>
 800f68e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f692:	4604      	mov	r4, r0
 800f694:	2301      	movs	r3, #1
 800f696:	e7f0      	b.n	800f67a <_vfiprintf_r+0x1da>
 800f698:	ab03      	add	r3, sp, #12
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	462a      	mov	r2, r5
 800f69e:	4b16      	ldr	r3, [pc, #88]	; (800f6f8 <_vfiprintf_r+0x258>)
 800f6a0:	a904      	add	r1, sp, #16
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f7fd ffa8 	bl	800d5f8 <_printf_float>
 800f6a8:	4607      	mov	r7, r0
 800f6aa:	1c78      	adds	r0, r7, #1
 800f6ac:	d1d6      	bne.n	800f65c <_vfiprintf_r+0x1bc>
 800f6ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6b0:	07d9      	lsls	r1, r3, #31
 800f6b2:	d405      	bmi.n	800f6c0 <_vfiprintf_r+0x220>
 800f6b4:	89ab      	ldrh	r3, [r5, #12]
 800f6b6:	059a      	lsls	r2, r3, #22
 800f6b8:	d402      	bmi.n	800f6c0 <_vfiprintf_r+0x220>
 800f6ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6bc:	f000 faaf 	bl	800fc1e <__retarget_lock_release_recursive>
 800f6c0:	89ab      	ldrh	r3, [r5, #12]
 800f6c2:	065b      	lsls	r3, r3, #25
 800f6c4:	f53f af12 	bmi.w	800f4ec <_vfiprintf_r+0x4c>
 800f6c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6ca:	e711      	b.n	800f4f0 <_vfiprintf_r+0x50>
 800f6cc:	ab03      	add	r3, sp, #12
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	462a      	mov	r2, r5
 800f6d2:	4b09      	ldr	r3, [pc, #36]	; (800f6f8 <_vfiprintf_r+0x258>)
 800f6d4:	a904      	add	r1, sp, #16
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f7fe fa32 	bl	800db40 <_printf_i>
 800f6dc:	e7e4      	b.n	800f6a8 <_vfiprintf_r+0x208>
 800f6de:	bf00      	nop
 800f6e0:	08011424 	.word	0x08011424
 800f6e4:	08011444 	.word	0x08011444
 800f6e8:	08011404 	.word	0x08011404
 800f6ec:	080112f2 	.word	0x080112f2
 800f6f0:	080112fc 	.word	0x080112fc
 800f6f4:	0800d5f9 	.word	0x0800d5f9
 800f6f8:	0800f47b 	.word	0x0800f47b
 800f6fc:	080112f8 	.word	0x080112f8

0800f700 <__swbuf_r>:
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	460e      	mov	r6, r1
 800f704:	4614      	mov	r4, r2
 800f706:	4605      	mov	r5, r0
 800f708:	b118      	cbz	r0, 800f712 <__swbuf_r+0x12>
 800f70a:	6983      	ldr	r3, [r0, #24]
 800f70c:	b90b      	cbnz	r3, 800f712 <__swbuf_r+0x12>
 800f70e:	f000 f9e7 	bl	800fae0 <__sinit>
 800f712:	4b21      	ldr	r3, [pc, #132]	; (800f798 <__swbuf_r+0x98>)
 800f714:	429c      	cmp	r4, r3
 800f716:	d12b      	bne.n	800f770 <__swbuf_r+0x70>
 800f718:	686c      	ldr	r4, [r5, #4]
 800f71a:	69a3      	ldr	r3, [r4, #24]
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	071a      	lsls	r2, r3, #28
 800f722:	d52f      	bpl.n	800f784 <__swbuf_r+0x84>
 800f724:	6923      	ldr	r3, [r4, #16]
 800f726:	b36b      	cbz	r3, 800f784 <__swbuf_r+0x84>
 800f728:	6923      	ldr	r3, [r4, #16]
 800f72a:	6820      	ldr	r0, [r4, #0]
 800f72c:	1ac0      	subs	r0, r0, r3
 800f72e:	6963      	ldr	r3, [r4, #20]
 800f730:	b2f6      	uxtb	r6, r6
 800f732:	4283      	cmp	r3, r0
 800f734:	4637      	mov	r7, r6
 800f736:	dc04      	bgt.n	800f742 <__swbuf_r+0x42>
 800f738:	4621      	mov	r1, r4
 800f73a:	4628      	mov	r0, r5
 800f73c:	f000 f93c 	bl	800f9b8 <_fflush_r>
 800f740:	bb30      	cbnz	r0, 800f790 <__swbuf_r+0x90>
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	3b01      	subs	r3, #1
 800f746:	60a3      	str	r3, [r4, #8]
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	1c5a      	adds	r2, r3, #1
 800f74c:	6022      	str	r2, [r4, #0]
 800f74e:	701e      	strb	r6, [r3, #0]
 800f750:	6963      	ldr	r3, [r4, #20]
 800f752:	3001      	adds	r0, #1
 800f754:	4283      	cmp	r3, r0
 800f756:	d004      	beq.n	800f762 <__swbuf_r+0x62>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	07db      	lsls	r3, r3, #31
 800f75c:	d506      	bpl.n	800f76c <__swbuf_r+0x6c>
 800f75e:	2e0a      	cmp	r6, #10
 800f760:	d104      	bne.n	800f76c <__swbuf_r+0x6c>
 800f762:	4621      	mov	r1, r4
 800f764:	4628      	mov	r0, r5
 800f766:	f000 f927 	bl	800f9b8 <_fflush_r>
 800f76a:	b988      	cbnz	r0, 800f790 <__swbuf_r+0x90>
 800f76c:	4638      	mov	r0, r7
 800f76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f770:	4b0a      	ldr	r3, [pc, #40]	; (800f79c <__swbuf_r+0x9c>)
 800f772:	429c      	cmp	r4, r3
 800f774:	d101      	bne.n	800f77a <__swbuf_r+0x7a>
 800f776:	68ac      	ldr	r4, [r5, #8]
 800f778:	e7cf      	b.n	800f71a <__swbuf_r+0x1a>
 800f77a:	4b09      	ldr	r3, [pc, #36]	; (800f7a0 <__swbuf_r+0xa0>)
 800f77c:	429c      	cmp	r4, r3
 800f77e:	bf08      	it	eq
 800f780:	68ec      	ldreq	r4, [r5, #12]
 800f782:	e7ca      	b.n	800f71a <__swbuf_r+0x1a>
 800f784:	4621      	mov	r1, r4
 800f786:	4628      	mov	r0, r5
 800f788:	f000 f81a 	bl	800f7c0 <__swsetup_r>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d0cb      	beq.n	800f728 <__swbuf_r+0x28>
 800f790:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f794:	e7ea      	b.n	800f76c <__swbuf_r+0x6c>
 800f796:	bf00      	nop
 800f798:	08011424 	.word	0x08011424
 800f79c:	08011444 	.word	0x08011444
 800f7a0:	08011404 	.word	0x08011404

0800f7a4 <__ascii_wctomb>:
 800f7a4:	b149      	cbz	r1, 800f7ba <__ascii_wctomb+0x16>
 800f7a6:	2aff      	cmp	r2, #255	; 0xff
 800f7a8:	bf85      	ittet	hi
 800f7aa:	238a      	movhi	r3, #138	; 0x8a
 800f7ac:	6003      	strhi	r3, [r0, #0]
 800f7ae:	700a      	strbls	r2, [r1, #0]
 800f7b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f7b4:	bf98      	it	ls
 800f7b6:	2001      	movls	r0, #1
 800f7b8:	4770      	bx	lr
 800f7ba:	4608      	mov	r0, r1
 800f7bc:	4770      	bx	lr
	...

0800f7c0 <__swsetup_r>:
 800f7c0:	4b32      	ldr	r3, [pc, #200]	; (800f88c <__swsetup_r+0xcc>)
 800f7c2:	b570      	push	{r4, r5, r6, lr}
 800f7c4:	681d      	ldr	r5, [r3, #0]
 800f7c6:	4606      	mov	r6, r0
 800f7c8:	460c      	mov	r4, r1
 800f7ca:	b125      	cbz	r5, 800f7d6 <__swsetup_r+0x16>
 800f7cc:	69ab      	ldr	r3, [r5, #24]
 800f7ce:	b913      	cbnz	r3, 800f7d6 <__swsetup_r+0x16>
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f000 f985 	bl	800fae0 <__sinit>
 800f7d6:	4b2e      	ldr	r3, [pc, #184]	; (800f890 <__swsetup_r+0xd0>)
 800f7d8:	429c      	cmp	r4, r3
 800f7da:	d10f      	bne.n	800f7fc <__swsetup_r+0x3c>
 800f7dc:	686c      	ldr	r4, [r5, #4]
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7e4:	0719      	lsls	r1, r3, #28
 800f7e6:	d42c      	bmi.n	800f842 <__swsetup_r+0x82>
 800f7e8:	06dd      	lsls	r5, r3, #27
 800f7ea:	d411      	bmi.n	800f810 <__swsetup_r+0x50>
 800f7ec:	2309      	movs	r3, #9
 800f7ee:	6033      	str	r3, [r6, #0]
 800f7f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7f4:	81a3      	strh	r3, [r4, #12]
 800f7f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7fa:	e03e      	b.n	800f87a <__swsetup_r+0xba>
 800f7fc:	4b25      	ldr	r3, [pc, #148]	; (800f894 <__swsetup_r+0xd4>)
 800f7fe:	429c      	cmp	r4, r3
 800f800:	d101      	bne.n	800f806 <__swsetup_r+0x46>
 800f802:	68ac      	ldr	r4, [r5, #8]
 800f804:	e7eb      	b.n	800f7de <__swsetup_r+0x1e>
 800f806:	4b24      	ldr	r3, [pc, #144]	; (800f898 <__swsetup_r+0xd8>)
 800f808:	429c      	cmp	r4, r3
 800f80a:	bf08      	it	eq
 800f80c:	68ec      	ldreq	r4, [r5, #12]
 800f80e:	e7e6      	b.n	800f7de <__swsetup_r+0x1e>
 800f810:	0758      	lsls	r0, r3, #29
 800f812:	d512      	bpl.n	800f83a <__swsetup_r+0x7a>
 800f814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f816:	b141      	cbz	r1, 800f82a <__swsetup_r+0x6a>
 800f818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f81c:	4299      	cmp	r1, r3
 800f81e:	d002      	beq.n	800f826 <__swsetup_r+0x66>
 800f820:	4630      	mov	r0, r6
 800f822:	f7ff fcd5 	bl	800f1d0 <_free_r>
 800f826:	2300      	movs	r3, #0
 800f828:	6363      	str	r3, [r4, #52]	; 0x34
 800f82a:	89a3      	ldrh	r3, [r4, #12]
 800f82c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f830:	81a3      	strh	r3, [r4, #12]
 800f832:	2300      	movs	r3, #0
 800f834:	6063      	str	r3, [r4, #4]
 800f836:	6923      	ldr	r3, [r4, #16]
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	89a3      	ldrh	r3, [r4, #12]
 800f83c:	f043 0308 	orr.w	r3, r3, #8
 800f840:	81a3      	strh	r3, [r4, #12]
 800f842:	6923      	ldr	r3, [r4, #16]
 800f844:	b94b      	cbnz	r3, 800f85a <__swsetup_r+0x9a>
 800f846:	89a3      	ldrh	r3, [r4, #12]
 800f848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f84c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f850:	d003      	beq.n	800f85a <__swsetup_r+0x9a>
 800f852:	4621      	mov	r1, r4
 800f854:	4630      	mov	r0, r6
 800f856:	f000 fa09 	bl	800fc6c <__smakebuf_r>
 800f85a:	89a0      	ldrh	r0, [r4, #12]
 800f85c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f860:	f010 0301 	ands.w	r3, r0, #1
 800f864:	d00a      	beq.n	800f87c <__swsetup_r+0xbc>
 800f866:	2300      	movs	r3, #0
 800f868:	60a3      	str	r3, [r4, #8]
 800f86a:	6963      	ldr	r3, [r4, #20]
 800f86c:	425b      	negs	r3, r3
 800f86e:	61a3      	str	r3, [r4, #24]
 800f870:	6923      	ldr	r3, [r4, #16]
 800f872:	b943      	cbnz	r3, 800f886 <__swsetup_r+0xc6>
 800f874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f878:	d1ba      	bne.n	800f7f0 <__swsetup_r+0x30>
 800f87a:	bd70      	pop	{r4, r5, r6, pc}
 800f87c:	0781      	lsls	r1, r0, #30
 800f87e:	bf58      	it	pl
 800f880:	6963      	ldrpl	r3, [r4, #20]
 800f882:	60a3      	str	r3, [r4, #8]
 800f884:	e7f4      	b.n	800f870 <__swsetup_r+0xb0>
 800f886:	2000      	movs	r0, #0
 800f888:	e7f7      	b.n	800f87a <__swsetup_r+0xba>
 800f88a:	bf00      	nop
 800f88c:	20000128 	.word	0x20000128
 800f890:	08011424 	.word	0x08011424
 800f894:	08011444 	.word	0x08011444
 800f898:	08011404 	.word	0x08011404

0800f89c <abort>:
 800f89c:	b508      	push	{r3, lr}
 800f89e:	2006      	movs	r0, #6
 800f8a0:	f000 fa4c 	bl	800fd3c <raise>
 800f8a4:	2001      	movs	r0, #1
 800f8a6:	f7f3 fbd1 	bl	800304c <_exit>
	...

0800f8ac <__sflush_r>:
 800f8ac:	898a      	ldrh	r2, [r1, #12]
 800f8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	0710      	lsls	r0, r2, #28
 800f8b6:	460c      	mov	r4, r1
 800f8b8:	d458      	bmi.n	800f96c <__sflush_r+0xc0>
 800f8ba:	684b      	ldr	r3, [r1, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	dc05      	bgt.n	800f8cc <__sflush_r+0x20>
 800f8c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	dc02      	bgt.n	800f8cc <__sflush_r+0x20>
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8ce:	2e00      	cmp	r6, #0
 800f8d0:	d0f9      	beq.n	800f8c6 <__sflush_r+0x1a>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8d8:	682f      	ldr	r7, [r5, #0]
 800f8da:	602b      	str	r3, [r5, #0]
 800f8dc:	d032      	beq.n	800f944 <__sflush_r+0x98>
 800f8de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8e0:	89a3      	ldrh	r3, [r4, #12]
 800f8e2:	075a      	lsls	r2, r3, #29
 800f8e4:	d505      	bpl.n	800f8f2 <__sflush_r+0x46>
 800f8e6:	6863      	ldr	r3, [r4, #4]
 800f8e8:	1ac0      	subs	r0, r0, r3
 800f8ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8ec:	b10b      	cbz	r3, 800f8f2 <__sflush_r+0x46>
 800f8ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8f0:	1ac0      	subs	r0, r0, r3
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8f8:	6a21      	ldr	r1, [r4, #32]
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	47b0      	blx	r6
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	89a3      	ldrh	r3, [r4, #12]
 800f902:	d106      	bne.n	800f912 <__sflush_r+0x66>
 800f904:	6829      	ldr	r1, [r5, #0]
 800f906:	291d      	cmp	r1, #29
 800f908:	d82c      	bhi.n	800f964 <__sflush_r+0xb8>
 800f90a:	4a2a      	ldr	r2, [pc, #168]	; (800f9b4 <__sflush_r+0x108>)
 800f90c:	40ca      	lsrs	r2, r1
 800f90e:	07d6      	lsls	r6, r2, #31
 800f910:	d528      	bpl.n	800f964 <__sflush_r+0xb8>
 800f912:	2200      	movs	r2, #0
 800f914:	6062      	str	r2, [r4, #4]
 800f916:	04d9      	lsls	r1, r3, #19
 800f918:	6922      	ldr	r2, [r4, #16]
 800f91a:	6022      	str	r2, [r4, #0]
 800f91c:	d504      	bpl.n	800f928 <__sflush_r+0x7c>
 800f91e:	1c42      	adds	r2, r0, #1
 800f920:	d101      	bne.n	800f926 <__sflush_r+0x7a>
 800f922:	682b      	ldr	r3, [r5, #0]
 800f924:	b903      	cbnz	r3, 800f928 <__sflush_r+0x7c>
 800f926:	6560      	str	r0, [r4, #84]	; 0x54
 800f928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f92a:	602f      	str	r7, [r5, #0]
 800f92c:	2900      	cmp	r1, #0
 800f92e:	d0ca      	beq.n	800f8c6 <__sflush_r+0x1a>
 800f930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f934:	4299      	cmp	r1, r3
 800f936:	d002      	beq.n	800f93e <__sflush_r+0x92>
 800f938:	4628      	mov	r0, r5
 800f93a:	f7ff fc49 	bl	800f1d0 <_free_r>
 800f93e:	2000      	movs	r0, #0
 800f940:	6360      	str	r0, [r4, #52]	; 0x34
 800f942:	e7c1      	b.n	800f8c8 <__sflush_r+0x1c>
 800f944:	6a21      	ldr	r1, [r4, #32]
 800f946:	2301      	movs	r3, #1
 800f948:	4628      	mov	r0, r5
 800f94a:	47b0      	blx	r6
 800f94c:	1c41      	adds	r1, r0, #1
 800f94e:	d1c7      	bne.n	800f8e0 <__sflush_r+0x34>
 800f950:	682b      	ldr	r3, [r5, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d0c4      	beq.n	800f8e0 <__sflush_r+0x34>
 800f956:	2b1d      	cmp	r3, #29
 800f958:	d001      	beq.n	800f95e <__sflush_r+0xb2>
 800f95a:	2b16      	cmp	r3, #22
 800f95c:	d101      	bne.n	800f962 <__sflush_r+0xb6>
 800f95e:	602f      	str	r7, [r5, #0]
 800f960:	e7b1      	b.n	800f8c6 <__sflush_r+0x1a>
 800f962:	89a3      	ldrh	r3, [r4, #12]
 800f964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f968:	81a3      	strh	r3, [r4, #12]
 800f96a:	e7ad      	b.n	800f8c8 <__sflush_r+0x1c>
 800f96c:	690f      	ldr	r7, [r1, #16]
 800f96e:	2f00      	cmp	r7, #0
 800f970:	d0a9      	beq.n	800f8c6 <__sflush_r+0x1a>
 800f972:	0793      	lsls	r3, r2, #30
 800f974:	680e      	ldr	r6, [r1, #0]
 800f976:	bf08      	it	eq
 800f978:	694b      	ldreq	r3, [r1, #20]
 800f97a:	600f      	str	r7, [r1, #0]
 800f97c:	bf18      	it	ne
 800f97e:	2300      	movne	r3, #0
 800f980:	eba6 0807 	sub.w	r8, r6, r7
 800f984:	608b      	str	r3, [r1, #8]
 800f986:	f1b8 0f00 	cmp.w	r8, #0
 800f98a:	dd9c      	ble.n	800f8c6 <__sflush_r+0x1a>
 800f98c:	6a21      	ldr	r1, [r4, #32]
 800f98e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f990:	4643      	mov	r3, r8
 800f992:	463a      	mov	r2, r7
 800f994:	4628      	mov	r0, r5
 800f996:	47b0      	blx	r6
 800f998:	2800      	cmp	r0, #0
 800f99a:	dc06      	bgt.n	800f9aa <__sflush_r+0xfe>
 800f99c:	89a3      	ldrh	r3, [r4, #12]
 800f99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9a8:	e78e      	b.n	800f8c8 <__sflush_r+0x1c>
 800f9aa:	4407      	add	r7, r0
 800f9ac:	eba8 0800 	sub.w	r8, r8, r0
 800f9b0:	e7e9      	b.n	800f986 <__sflush_r+0xda>
 800f9b2:	bf00      	nop
 800f9b4:	20400001 	.word	0x20400001

0800f9b8 <_fflush_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	690b      	ldr	r3, [r1, #16]
 800f9bc:	4605      	mov	r5, r0
 800f9be:	460c      	mov	r4, r1
 800f9c0:	b913      	cbnz	r3, 800f9c8 <_fflush_r+0x10>
 800f9c2:	2500      	movs	r5, #0
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	bd38      	pop	{r3, r4, r5, pc}
 800f9c8:	b118      	cbz	r0, 800f9d2 <_fflush_r+0x1a>
 800f9ca:	6983      	ldr	r3, [r0, #24]
 800f9cc:	b90b      	cbnz	r3, 800f9d2 <_fflush_r+0x1a>
 800f9ce:	f000 f887 	bl	800fae0 <__sinit>
 800f9d2:	4b14      	ldr	r3, [pc, #80]	; (800fa24 <_fflush_r+0x6c>)
 800f9d4:	429c      	cmp	r4, r3
 800f9d6:	d11b      	bne.n	800fa10 <_fflush_r+0x58>
 800f9d8:	686c      	ldr	r4, [r5, #4]
 800f9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d0ef      	beq.n	800f9c2 <_fflush_r+0xa>
 800f9e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9e4:	07d0      	lsls	r0, r2, #31
 800f9e6:	d404      	bmi.n	800f9f2 <_fflush_r+0x3a>
 800f9e8:	0599      	lsls	r1, r3, #22
 800f9ea:	d402      	bmi.n	800f9f2 <_fflush_r+0x3a>
 800f9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9ee:	f000 f915 	bl	800fc1c <__retarget_lock_acquire_recursive>
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	f7ff ff59 	bl	800f8ac <__sflush_r>
 800f9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9fc:	07da      	lsls	r2, r3, #31
 800f9fe:	4605      	mov	r5, r0
 800fa00:	d4e0      	bmi.n	800f9c4 <_fflush_r+0xc>
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	059b      	lsls	r3, r3, #22
 800fa06:	d4dd      	bmi.n	800f9c4 <_fflush_r+0xc>
 800fa08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa0a:	f000 f908 	bl	800fc1e <__retarget_lock_release_recursive>
 800fa0e:	e7d9      	b.n	800f9c4 <_fflush_r+0xc>
 800fa10:	4b05      	ldr	r3, [pc, #20]	; (800fa28 <_fflush_r+0x70>)
 800fa12:	429c      	cmp	r4, r3
 800fa14:	d101      	bne.n	800fa1a <_fflush_r+0x62>
 800fa16:	68ac      	ldr	r4, [r5, #8]
 800fa18:	e7df      	b.n	800f9da <_fflush_r+0x22>
 800fa1a:	4b04      	ldr	r3, [pc, #16]	; (800fa2c <_fflush_r+0x74>)
 800fa1c:	429c      	cmp	r4, r3
 800fa1e:	bf08      	it	eq
 800fa20:	68ec      	ldreq	r4, [r5, #12]
 800fa22:	e7da      	b.n	800f9da <_fflush_r+0x22>
 800fa24:	08011424 	.word	0x08011424
 800fa28:	08011444 	.word	0x08011444
 800fa2c:	08011404 	.word	0x08011404

0800fa30 <std>:
 800fa30:	2300      	movs	r3, #0
 800fa32:	b510      	push	{r4, lr}
 800fa34:	4604      	mov	r4, r0
 800fa36:	e9c0 3300 	strd	r3, r3, [r0]
 800fa3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa3e:	6083      	str	r3, [r0, #8]
 800fa40:	8181      	strh	r1, [r0, #12]
 800fa42:	6643      	str	r3, [r0, #100]	; 0x64
 800fa44:	81c2      	strh	r2, [r0, #14]
 800fa46:	6183      	str	r3, [r0, #24]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	2208      	movs	r2, #8
 800fa4c:	305c      	adds	r0, #92	; 0x5c
 800fa4e:	f7fd fd2b 	bl	800d4a8 <memset>
 800fa52:	4b05      	ldr	r3, [pc, #20]	; (800fa68 <std+0x38>)
 800fa54:	6263      	str	r3, [r4, #36]	; 0x24
 800fa56:	4b05      	ldr	r3, [pc, #20]	; (800fa6c <std+0x3c>)
 800fa58:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa5a:	4b05      	ldr	r3, [pc, #20]	; (800fa70 <std+0x40>)
 800fa5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa5e:	4b05      	ldr	r3, [pc, #20]	; (800fa74 <std+0x44>)
 800fa60:	6224      	str	r4, [r4, #32]
 800fa62:	6323      	str	r3, [r4, #48]	; 0x30
 800fa64:	bd10      	pop	{r4, pc}
 800fa66:	bf00      	nop
 800fa68:	0800fd75 	.word	0x0800fd75
 800fa6c:	0800fd97 	.word	0x0800fd97
 800fa70:	0800fdcf 	.word	0x0800fdcf
 800fa74:	0800fdf3 	.word	0x0800fdf3

0800fa78 <_cleanup_r>:
 800fa78:	4901      	ldr	r1, [pc, #4]	; (800fa80 <_cleanup_r+0x8>)
 800fa7a:	f000 b8af 	b.w	800fbdc <_fwalk_reent>
 800fa7e:	bf00      	nop
 800fa80:	0800f9b9 	.word	0x0800f9b9

0800fa84 <__sfmoreglue>:
 800fa84:	b570      	push	{r4, r5, r6, lr}
 800fa86:	2268      	movs	r2, #104	; 0x68
 800fa88:	1e4d      	subs	r5, r1, #1
 800fa8a:	4355      	muls	r5, r2
 800fa8c:	460e      	mov	r6, r1
 800fa8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa92:	f7ff fc09 	bl	800f2a8 <_malloc_r>
 800fa96:	4604      	mov	r4, r0
 800fa98:	b140      	cbz	r0, 800faac <__sfmoreglue+0x28>
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	e9c0 1600 	strd	r1, r6, [r0]
 800faa0:	300c      	adds	r0, #12
 800faa2:	60a0      	str	r0, [r4, #8]
 800faa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800faa8:	f7fd fcfe 	bl	800d4a8 <memset>
 800faac:	4620      	mov	r0, r4
 800faae:	bd70      	pop	{r4, r5, r6, pc}

0800fab0 <__sfp_lock_acquire>:
 800fab0:	4801      	ldr	r0, [pc, #4]	; (800fab8 <__sfp_lock_acquire+0x8>)
 800fab2:	f000 b8b3 	b.w	800fc1c <__retarget_lock_acquire_recursive>
 800fab6:	bf00      	nop
 800fab8:	200022f1 	.word	0x200022f1

0800fabc <__sfp_lock_release>:
 800fabc:	4801      	ldr	r0, [pc, #4]	; (800fac4 <__sfp_lock_release+0x8>)
 800fabe:	f000 b8ae 	b.w	800fc1e <__retarget_lock_release_recursive>
 800fac2:	bf00      	nop
 800fac4:	200022f1 	.word	0x200022f1

0800fac8 <__sinit_lock_acquire>:
 800fac8:	4801      	ldr	r0, [pc, #4]	; (800fad0 <__sinit_lock_acquire+0x8>)
 800faca:	f000 b8a7 	b.w	800fc1c <__retarget_lock_acquire_recursive>
 800face:	bf00      	nop
 800fad0:	200022f2 	.word	0x200022f2

0800fad4 <__sinit_lock_release>:
 800fad4:	4801      	ldr	r0, [pc, #4]	; (800fadc <__sinit_lock_release+0x8>)
 800fad6:	f000 b8a2 	b.w	800fc1e <__retarget_lock_release_recursive>
 800fada:	bf00      	nop
 800fadc:	200022f2 	.word	0x200022f2

0800fae0 <__sinit>:
 800fae0:	b510      	push	{r4, lr}
 800fae2:	4604      	mov	r4, r0
 800fae4:	f7ff fff0 	bl	800fac8 <__sinit_lock_acquire>
 800fae8:	69a3      	ldr	r3, [r4, #24]
 800faea:	b11b      	cbz	r3, 800faf4 <__sinit+0x14>
 800faec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faf0:	f7ff bff0 	b.w	800fad4 <__sinit_lock_release>
 800faf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800faf8:	6523      	str	r3, [r4, #80]	; 0x50
 800fafa:	4b13      	ldr	r3, [pc, #76]	; (800fb48 <__sinit+0x68>)
 800fafc:	4a13      	ldr	r2, [pc, #76]	; (800fb4c <__sinit+0x6c>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	62a2      	str	r2, [r4, #40]	; 0x28
 800fb02:	42a3      	cmp	r3, r4
 800fb04:	bf04      	itt	eq
 800fb06:	2301      	moveq	r3, #1
 800fb08:	61a3      	streq	r3, [r4, #24]
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f000 f820 	bl	800fb50 <__sfp>
 800fb10:	6060      	str	r0, [r4, #4]
 800fb12:	4620      	mov	r0, r4
 800fb14:	f000 f81c 	bl	800fb50 <__sfp>
 800fb18:	60a0      	str	r0, [r4, #8]
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f000 f818 	bl	800fb50 <__sfp>
 800fb20:	2200      	movs	r2, #0
 800fb22:	60e0      	str	r0, [r4, #12]
 800fb24:	2104      	movs	r1, #4
 800fb26:	6860      	ldr	r0, [r4, #4]
 800fb28:	f7ff ff82 	bl	800fa30 <std>
 800fb2c:	68a0      	ldr	r0, [r4, #8]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	2109      	movs	r1, #9
 800fb32:	f7ff ff7d 	bl	800fa30 <std>
 800fb36:	68e0      	ldr	r0, [r4, #12]
 800fb38:	2202      	movs	r2, #2
 800fb3a:	2112      	movs	r1, #18
 800fb3c:	f7ff ff78 	bl	800fa30 <std>
 800fb40:	2301      	movs	r3, #1
 800fb42:	61a3      	str	r3, [r4, #24]
 800fb44:	e7d2      	b.n	800faec <__sinit+0xc>
 800fb46:	bf00      	nop
 800fb48:	08011088 	.word	0x08011088
 800fb4c:	0800fa79 	.word	0x0800fa79

0800fb50 <__sfp>:
 800fb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb52:	4607      	mov	r7, r0
 800fb54:	f7ff ffac 	bl	800fab0 <__sfp_lock_acquire>
 800fb58:	4b1e      	ldr	r3, [pc, #120]	; (800fbd4 <__sfp+0x84>)
 800fb5a:	681e      	ldr	r6, [r3, #0]
 800fb5c:	69b3      	ldr	r3, [r6, #24]
 800fb5e:	b913      	cbnz	r3, 800fb66 <__sfp+0x16>
 800fb60:	4630      	mov	r0, r6
 800fb62:	f7ff ffbd 	bl	800fae0 <__sinit>
 800fb66:	3648      	adds	r6, #72	; 0x48
 800fb68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	d503      	bpl.n	800fb78 <__sfp+0x28>
 800fb70:	6833      	ldr	r3, [r6, #0]
 800fb72:	b30b      	cbz	r3, 800fbb8 <__sfp+0x68>
 800fb74:	6836      	ldr	r6, [r6, #0]
 800fb76:	e7f7      	b.n	800fb68 <__sfp+0x18>
 800fb78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb7c:	b9d5      	cbnz	r5, 800fbb4 <__sfp+0x64>
 800fb7e:	4b16      	ldr	r3, [pc, #88]	; (800fbd8 <__sfp+0x88>)
 800fb80:	60e3      	str	r3, [r4, #12]
 800fb82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb86:	6665      	str	r5, [r4, #100]	; 0x64
 800fb88:	f000 f847 	bl	800fc1a <__retarget_lock_init_recursive>
 800fb8c:	f7ff ff96 	bl	800fabc <__sfp_lock_release>
 800fb90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb98:	6025      	str	r5, [r4, #0]
 800fb9a:	61a5      	str	r5, [r4, #24]
 800fb9c:	2208      	movs	r2, #8
 800fb9e:	4629      	mov	r1, r5
 800fba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fba4:	f7fd fc80 	bl	800d4a8 <memset>
 800fba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fbac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb4:	3468      	adds	r4, #104	; 0x68
 800fbb6:	e7d9      	b.n	800fb6c <__sfp+0x1c>
 800fbb8:	2104      	movs	r1, #4
 800fbba:	4638      	mov	r0, r7
 800fbbc:	f7ff ff62 	bl	800fa84 <__sfmoreglue>
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	6030      	str	r0, [r6, #0]
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d1d5      	bne.n	800fb74 <__sfp+0x24>
 800fbc8:	f7ff ff78 	bl	800fabc <__sfp_lock_release>
 800fbcc:	230c      	movs	r3, #12
 800fbce:	603b      	str	r3, [r7, #0]
 800fbd0:	e7ee      	b.n	800fbb0 <__sfp+0x60>
 800fbd2:	bf00      	nop
 800fbd4:	08011088 	.word	0x08011088
 800fbd8:	ffff0001 	.word	0xffff0001

0800fbdc <_fwalk_reent>:
 800fbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	4688      	mov	r8, r1
 800fbe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fbe8:	2700      	movs	r7, #0
 800fbea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbee:	f1b9 0901 	subs.w	r9, r9, #1
 800fbf2:	d505      	bpl.n	800fc00 <_fwalk_reent+0x24>
 800fbf4:	6824      	ldr	r4, [r4, #0]
 800fbf6:	2c00      	cmp	r4, #0
 800fbf8:	d1f7      	bne.n	800fbea <_fwalk_reent+0xe>
 800fbfa:	4638      	mov	r0, r7
 800fbfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc00:	89ab      	ldrh	r3, [r5, #12]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d907      	bls.n	800fc16 <_fwalk_reent+0x3a>
 800fc06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	d003      	beq.n	800fc16 <_fwalk_reent+0x3a>
 800fc0e:	4629      	mov	r1, r5
 800fc10:	4630      	mov	r0, r6
 800fc12:	47c0      	blx	r8
 800fc14:	4307      	orrs	r7, r0
 800fc16:	3568      	adds	r5, #104	; 0x68
 800fc18:	e7e9      	b.n	800fbee <_fwalk_reent+0x12>

0800fc1a <__retarget_lock_init_recursive>:
 800fc1a:	4770      	bx	lr

0800fc1c <__retarget_lock_acquire_recursive>:
 800fc1c:	4770      	bx	lr

0800fc1e <__retarget_lock_release_recursive>:
 800fc1e:	4770      	bx	lr

0800fc20 <__swhatbuf_r>:
 800fc20:	b570      	push	{r4, r5, r6, lr}
 800fc22:	460e      	mov	r6, r1
 800fc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc28:	2900      	cmp	r1, #0
 800fc2a:	b096      	sub	sp, #88	; 0x58
 800fc2c:	4614      	mov	r4, r2
 800fc2e:	461d      	mov	r5, r3
 800fc30:	da08      	bge.n	800fc44 <__swhatbuf_r+0x24>
 800fc32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fc36:	2200      	movs	r2, #0
 800fc38:	602a      	str	r2, [r5, #0]
 800fc3a:	061a      	lsls	r2, r3, #24
 800fc3c:	d410      	bmi.n	800fc60 <__swhatbuf_r+0x40>
 800fc3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc42:	e00e      	b.n	800fc62 <__swhatbuf_r+0x42>
 800fc44:	466a      	mov	r2, sp
 800fc46:	f000 f8fb 	bl	800fe40 <_fstat_r>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	dbf1      	blt.n	800fc32 <__swhatbuf_r+0x12>
 800fc4e:	9a01      	ldr	r2, [sp, #4]
 800fc50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc58:	425a      	negs	r2, r3
 800fc5a:	415a      	adcs	r2, r3
 800fc5c:	602a      	str	r2, [r5, #0]
 800fc5e:	e7ee      	b.n	800fc3e <__swhatbuf_r+0x1e>
 800fc60:	2340      	movs	r3, #64	; 0x40
 800fc62:	2000      	movs	r0, #0
 800fc64:	6023      	str	r3, [r4, #0]
 800fc66:	b016      	add	sp, #88	; 0x58
 800fc68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fc6c <__smakebuf_r>:
 800fc6c:	898b      	ldrh	r3, [r1, #12]
 800fc6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc70:	079d      	lsls	r5, r3, #30
 800fc72:	4606      	mov	r6, r0
 800fc74:	460c      	mov	r4, r1
 800fc76:	d507      	bpl.n	800fc88 <__smakebuf_r+0x1c>
 800fc78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc7c:	6023      	str	r3, [r4, #0]
 800fc7e:	6123      	str	r3, [r4, #16]
 800fc80:	2301      	movs	r3, #1
 800fc82:	6163      	str	r3, [r4, #20]
 800fc84:	b002      	add	sp, #8
 800fc86:	bd70      	pop	{r4, r5, r6, pc}
 800fc88:	ab01      	add	r3, sp, #4
 800fc8a:	466a      	mov	r2, sp
 800fc8c:	f7ff ffc8 	bl	800fc20 <__swhatbuf_r>
 800fc90:	9900      	ldr	r1, [sp, #0]
 800fc92:	4605      	mov	r5, r0
 800fc94:	4630      	mov	r0, r6
 800fc96:	f7ff fb07 	bl	800f2a8 <_malloc_r>
 800fc9a:	b948      	cbnz	r0, 800fcb0 <__smakebuf_r+0x44>
 800fc9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fca0:	059a      	lsls	r2, r3, #22
 800fca2:	d4ef      	bmi.n	800fc84 <__smakebuf_r+0x18>
 800fca4:	f023 0303 	bic.w	r3, r3, #3
 800fca8:	f043 0302 	orr.w	r3, r3, #2
 800fcac:	81a3      	strh	r3, [r4, #12]
 800fcae:	e7e3      	b.n	800fc78 <__smakebuf_r+0xc>
 800fcb0:	4b0d      	ldr	r3, [pc, #52]	; (800fce8 <__smakebuf_r+0x7c>)
 800fcb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fcb4:	89a3      	ldrh	r3, [r4, #12]
 800fcb6:	6020      	str	r0, [r4, #0]
 800fcb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcbc:	81a3      	strh	r3, [r4, #12]
 800fcbe:	9b00      	ldr	r3, [sp, #0]
 800fcc0:	6163      	str	r3, [r4, #20]
 800fcc2:	9b01      	ldr	r3, [sp, #4]
 800fcc4:	6120      	str	r0, [r4, #16]
 800fcc6:	b15b      	cbz	r3, 800fce0 <__smakebuf_r+0x74>
 800fcc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fccc:	4630      	mov	r0, r6
 800fcce:	f000 f8c9 	bl	800fe64 <_isatty_r>
 800fcd2:	b128      	cbz	r0, 800fce0 <__smakebuf_r+0x74>
 800fcd4:	89a3      	ldrh	r3, [r4, #12]
 800fcd6:	f023 0303 	bic.w	r3, r3, #3
 800fcda:	f043 0301 	orr.w	r3, r3, #1
 800fcde:	81a3      	strh	r3, [r4, #12]
 800fce0:	89a0      	ldrh	r0, [r4, #12]
 800fce2:	4305      	orrs	r5, r0
 800fce4:	81a5      	strh	r5, [r4, #12]
 800fce6:	e7cd      	b.n	800fc84 <__smakebuf_r+0x18>
 800fce8:	0800fa79 	.word	0x0800fa79

0800fcec <_raise_r>:
 800fcec:	291f      	cmp	r1, #31
 800fcee:	b538      	push	{r3, r4, r5, lr}
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	460d      	mov	r5, r1
 800fcf4:	d904      	bls.n	800fd00 <_raise_r+0x14>
 800fcf6:	2316      	movs	r3, #22
 800fcf8:	6003      	str	r3, [r0, #0]
 800fcfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcfe:	bd38      	pop	{r3, r4, r5, pc}
 800fd00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd02:	b112      	cbz	r2, 800fd0a <_raise_r+0x1e>
 800fd04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd08:	b94b      	cbnz	r3, 800fd1e <_raise_r+0x32>
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	f000 f830 	bl	800fd70 <_getpid_r>
 800fd10:	462a      	mov	r2, r5
 800fd12:	4601      	mov	r1, r0
 800fd14:	4620      	mov	r0, r4
 800fd16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd1a:	f000 b817 	b.w	800fd4c <_kill_r>
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d00a      	beq.n	800fd38 <_raise_r+0x4c>
 800fd22:	1c59      	adds	r1, r3, #1
 800fd24:	d103      	bne.n	800fd2e <_raise_r+0x42>
 800fd26:	2316      	movs	r3, #22
 800fd28:	6003      	str	r3, [r0, #0]
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	e7e7      	b.n	800fcfe <_raise_r+0x12>
 800fd2e:	2400      	movs	r4, #0
 800fd30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd34:	4628      	mov	r0, r5
 800fd36:	4798      	blx	r3
 800fd38:	2000      	movs	r0, #0
 800fd3a:	e7e0      	b.n	800fcfe <_raise_r+0x12>

0800fd3c <raise>:
 800fd3c:	4b02      	ldr	r3, [pc, #8]	; (800fd48 <raise+0xc>)
 800fd3e:	4601      	mov	r1, r0
 800fd40:	6818      	ldr	r0, [r3, #0]
 800fd42:	f7ff bfd3 	b.w	800fcec <_raise_r>
 800fd46:	bf00      	nop
 800fd48:	20000128 	.word	0x20000128

0800fd4c <_kill_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	4d07      	ldr	r5, [pc, #28]	; (800fd6c <_kill_r+0x20>)
 800fd50:	2300      	movs	r3, #0
 800fd52:	4604      	mov	r4, r0
 800fd54:	4608      	mov	r0, r1
 800fd56:	4611      	mov	r1, r2
 800fd58:	602b      	str	r3, [r5, #0]
 800fd5a:	f7f3 f967 	bl	800302c <_kill>
 800fd5e:	1c43      	adds	r3, r0, #1
 800fd60:	d102      	bne.n	800fd68 <_kill_r+0x1c>
 800fd62:	682b      	ldr	r3, [r5, #0]
 800fd64:	b103      	cbz	r3, 800fd68 <_kill_r+0x1c>
 800fd66:	6023      	str	r3, [r4, #0]
 800fd68:	bd38      	pop	{r3, r4, r5, pc}
 800fd6a:	bf00      	nop
 800fd6c:	200022ec 	.word	0x200022ec

0800fd70 <_getpid_r>:
 800fd70:	f7f3 b954 	b.w	800301c <_getpid>

0800fd74 <__sread>:
 800fd74:	b510      	push	{r4, lr}
 800fd76:	460c      	mov	r4, r1
 800fd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd7c:	f000 f894 	bl	800fea8 <_read_r>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	bfab      	itete	ge
 800fd84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd86:	89a3      	ldrhlt	r3, [r4, #12]
 800fd88:	181b      	addge	r3, r3, r0
 800fd8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd8e:	bfac      	ite	ge
 800fd90:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd92:	81a3      	strhlt	r3, [r4, #12]
 800fd94:	bd10      	pop	{r4, pc}

0800fd96 <__swrite>:
 800fd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9a:	461f      	mov	r7, r3
 800fd9c:	898b      	ldrh	r3, [r1, #12]
 800fd9e:	05db      	lsls	r3, r3, #23
 800fda0:	4605      	mov	r5, r0
 800fda2:	460c      	mov	r4, r1
 800fda4:	4616      	mov	r6, r2
 800fda6:	d505      	bpl.n	800fdb4 <__swrite+0x1e>
 800fda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdac:	2302      	movs	r3, #2
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f000 f868 	bl	800fe84 <_lseek_r>
 800fdb4:	89a3      	ldrh	r3, [r4, #12]
 800fdb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fdbe:	81a3      	strh	r3, [r4, #12]
 800fdc0:	4632      	mov	r2, r6
 800fdc2:	463b      	mov	r3, r7
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdca:	f000 b817 	b.w	800fdfc <_write_r>

0800fdce <__sseek>:
 800fdce:	b510      	push	{r4, lr}
 800fdd0:	460c      	mov	r4, r1
 800fdd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdd6:	f000 f855 	bl	800fe84 <_lseek_r>
 800fdda:	1c43      	adds	r3, r0, #1
 800fddc:	89a3      	ldrh	r3, [r4, #12]
 800fdde:	bf15      	itete	ne
 800fde0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fde2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fde6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fdea:	81a3      	strheq	r3, [r4, #12]
 800fdec:	bf18      	it	ne
 800fdee:	81a3      	strhne	r3, [r4, #12]
 800fdf0:	bd10      	pop	{r4, pc}

0800fdf2 <__sclose>:
 800fdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdf6:	f000 b813 	b.w	800fe20 <_close_r>
	...

0800fdfc <_write_r>:
 800fdfc:	b538      	push	{r3, r4, r5, lr}
 800fdfe:	4d07      	ldr	r5, [pc, #28]	; (800fe1c <_write_r+0x20>)
 800fe00:	4604      	mov	r4, r0
 800fe02:	4608      	mov	r0, r1
 800fe04:	4611      	mov	r1, r2
 800fe06:	2200      	movs	r2, #0
 800fe08:	602a      	str	r2, [r5, #0]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	f7f3 f945 	bl	800309a <_write>
 800fe10:	1c43      	adds	r3, r0, #1
 800fe12:	d102      	bne.n	800fe1a <_write_r+0x1e>
 800fe14:	682b      	ldr	r3, [r5, #0]
 800fe16:	b103      	cbz	r3, 800fe1a <_write_r+0x1e>
 800fe18:	6023      	str	r3, [r4, #0]
 800fe1a:	bd38      	pop	{r3, r4, r5, pc}
 800fe1c:	200022ec 	.word	0x200022ec

0800fe20 <_close_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4d06      	ldr	r5, [pc, #24]	; (800fe3c <_close_r+0x1c>)
 800fe24:	2300      	movs	r3, #0
 800fe26:	4604      	mov	r4, r0
 800fe28:	4608      	mov	r0, r1
 800fe2a:	602b      	str	r3, [r5, #0]
 800fe2c:	f7f3 f951 	bl	80030d2 <_close>
 800fe30:	1c43      	adds	r3, r0, #1
 800fe32:	d102      	bne.n	800fe3a <_close_r+0x1a>
 800fe34:	682b      	ldr	r3, [r5, #0]
 800fe36:	b103      	cbz	r3, 800fe3a <_close_r+0x1a>
 800fe38:	6023      	str	r3, [r4, #0]
 800fe3a:	bd38      	pop	{r3, r4, r5, pc}
 800fe3c:	200022ec 	.word	0x200022ec

0800fe40 <_fstat_r>:
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	4d07      	ldr	r5, [pc, #28]	; (800fe60 <_fstat_r+0x20>)
 800fe44:	2300      	movs	r3, #0
 800fe46:	4604      	mov	r4, r0
 800fe48:	4608      	mov	r0, r1
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	602b      	str	r3, [r5, #0]
 800fe4e:	f7f3 f94c 	bl	80030ea <_fstat>
 800fe52:	1c43      	adds	r3, r0, #1
 800fe54:	d102      	bne.n	800fe5c <_fstat_r+0x1c>
 800fe56:	682b      	ldr	r3, [r5, #0]
 800fe58:	b103      	cbz	r3, 800fe5c <_fstat_r+0x1c>
 800fe5a:	6023      	str	r3, [r4, #0]
 800fe5c:	bd38      	pop	{r3, r4, r5, pc}
 800fe5e:	bf00      	nop
 800fe60:	200022ec 	.word	0x200022ec

0800fe64 <_isatty_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	4d06      	ldr	r5, [pc, #24]	; (800fe80 <_isatty_r+0x1c>)
 800fe68:	2300      	movs	r3, #0
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	4608      	mov	r0, r1
 800fe6e:	602b      	str	r3, [r5, #0]
 800fe70:	f7f3 f94b 	bl	800310a <_isatty>
 800fe74:	1c43      	adds	r3, r0, #1
 800fe76:	d102      	bne.n	800fe7e <_isatty_r+0x1a>
 800fe78:	682b      	ldr	r3, [r5, #0]
 800fe7a:	b103      	cbz	r3, 800fe7e <_isatty_r+0x1a>
 800fe7c:	6023      	str	r3, [r4, #0]
 800fe7e:	bd38      	pop	{r3, r4, r5, pc}
 800fe80:	200022ec 	.word	0x200022ec

0800fe84 <_lseek_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4d07      	ldr	r5, [pc, #28]	; (800fea4 <_lseek_r+0x20>)
 800fe88:	4604      	mov	r4, r0
 800fe8a:	4608      	mov	r0, r1
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	2200      	movs	r2, #0
 800fe90:	602a      	str	r2, [r5, #0]
 800fe92:	461a      	mov	r2, r3
 800fe94:	f7f3 f944 	bl	8003120 <_lseek>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_lseek_r+0x1e>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_lseek_r+0x1e>
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	200022ec 	.word	0x200022ec

0800fea8 <_read_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	4d07      	ldr	r5, [pc, #28]	; (800fec8 <_read_r+0x20>)
 800feac:	4604      	mov	r4, r0
 800feae:	4608      	mov	r0, r1
 800feb0:	4611      	mov	r1, r2
 800feb2:	2200      	movs	r2, #0
 800feb4:	602a      	str	r2, [r5, #0]
 800feb6:	461a      	mov	r2, r3
 800feb8:	f7f3 f8d2 	bl	8003060 <_read>
 800febc:	1c43      	adds	r3, r0, #1
 800febe:	d102      	bne.n	800fec6 <_read_r+0x1e>
 800fec0:	682b      	ldr	r3, [r5, #0]
 800fec2:	b103      	cbz	r3, 800fec6 <_read_r+0x1e>
 800fec4:	6023      	str	r3, [r4, #0]
 800fec6:	bd38      	pop	{r3, r4, r5, pc}
 800fec8:	200022ec 	.word	0x200022ec
 800fecc:	00000000 	.word	0x00000000

0800fed0 <cos>:
 800fed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fed2:	ec53 2b10 	vmov	r2, r3, d0
 800fed6:	4826      	ldr	r0, [pc, #152]	; (800ff70 <cos+0xa0>)
 800fed8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fedc:	4281      	cmp	r1, r0
 800fede:	dc06      	bgt.n	800feee <cos+0x1e>
 800fee0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ff68 <cos+0x98>
 800fee4:	b005      	add	sp, #20
 800fee6:	f85d eb04 	ldr.w	lr, [sp], #4
 800feea:	f000 baa9 	b.w	8010440 <__kernel_cos>
 800feee:	4821      	ldr	r0, [pc, #132]	; (800ff74 <cos+0xa4>)
 800fef0:	4281      	cmp	r1, r0
 800fef2:	dd09      	ble.n	800ff08 <cos+0x38>
 800fef4:	ee10 0a10 	vmov	r0, s0
 800fef8:	4619      	mov	r1, r3
 800fefa:	f7f0 f9e5 	bl	80002c8 <__aeabi_dsub>
 800fefe:	ec41 0b10 	vmov	d0, r0, r1
 800ff02:	b005      	add	sp, #20
 800ff04:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff08:	4668      	mov	r0, sp
 800ff0a:	f000 f88d 	bl	8010028 <__ieee754_rem_pio2>
 800ff0e:	f000 0003 	and.w	r0, r0, #3
 800ff12:	2801      	cmp	r0, #1
 800ff14:	d00b      	beq.n	800ff2e <cos+0x5e>
 800ff16:	2802      	cmp	r0, #2
 800ff18:	d016      	beq.n	800ff48 <cos+0x78>
 800ff1a:	b9e0      	cbnz	r0, 800ff56 <cos+0x86>
 800ff1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff20:	ed9d 0b00 	vldr	d0, [sp]
 800ff24:	f000 fa8c 	bl	8010440 <__kernel_cos>
 800ff28:	ec51 0b10 	vmov	r0, r1, d0
 800ff2c:	e7e7      	b.n	800fefe <cos+0x2e>
 800ff2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff32:	ed9d 0b00 	vldr	d0, [sp]
 800ff36:	f000 fe9b 	bl	8010c70 <__kernel_sin>
 800ff3a:	ec53 2b10 	vmov	r2, r3, d0
 800ff3e:	ee10 0a10 	vmov	r0, s0
 800ff42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ff46:	e7da      	b.n	800fefe <cos+0x2e>
 800ff48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff4c:	ed9d 0b00 	vldr	d0, [sp]
 800ff50:	f000 fa76 	bl	8010440 <__kernel_cos>
 800ff54:	e7f1      	b.n	800ff3a <cos+0x6a>
 800ff56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff5a:	ed9d 0b00 	vldr	d0, [sp]
 800ff5e:	2001      	movs	r0, #1
 800ff60:	f000 fe86 	bl	8010c70 <__kernel_sin>
 800ff64:	e7e0      	b.n	800ff28 <cos+0x58>
 800ff66:	bf00      	nop
	...
 800ff70:	3fe921fb 	.word	0x3fe921fb
 800ff74:	7fefffff 	.word	0x7fefffff

0800ff78 <sin>:
 800ff78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff7a:	ec53 2b10 	vmov	r2, r3, d0
 800ff7e:	4828      	ldr	r0, [pc, #160]	; (8010020 <sin+0xa8>)
 800ff80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ff84:	4281      	cmp	r1, r0
 800ff86:	dc07      	bgt.n	800ff98 <sin+0x20>
 800ff88:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010018 <sin+0xa0>
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	b005      	add	sp, #20
 800ff90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff94:	f000 be6c 	b.w	8010c70 <__kernel_sin>
 800ff98:	4822      	ldr	r0, [pc, #136]	; (8010024 <sin+0xac>)
 800ff9a:	4281      	cmp	r1, r0
 800ff9c:	dd09      	ble.n	800ffb2 <sin+0x3a>
 800ff9e:	ee10 0a10 	vmov	r0, s0
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	f7f0 f990 	bl	80002c8 <__aeabi_dsub>
 800ffa8:	ec41 0b10 	vmov	d0, r0, r1
 800ffac:	b005      	add	sp, #20
 800ffae:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffb2:	4668      	mov	r0, sp
 800ffb4:	f000 f838 	bl	8010028 <__ieee754_rem_pio2>
 800ffb8:	f000 0003 	and.w	r0, r0, #3
 800ffbc:	2801      	cmp	r0, #1
 800ffbe:	d00c      	beq.n	800ffda <sin+0x62>
 800ffc0:	2802      	cmp	r0, #2
 800ffc2:	d011      	beq.n	800ffe8 <sin+0x70>
 800ffc4:	b9f0      	cbnz	r0, 8010004 <sin+0x8c>
 800ffc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffca:	ed9d 0b00 	vldr	d0, [sp]
 800ffce:	2001      	movs	r0, #1
 800ffd0:	f000 fe4e 	bl	8010c70 <__kernel_sin>
 800ffd4:	ec51 0b10 	vmov	r0, r1, d0
 800ffd8:	e7e6      	b.n	800ffa8 <sin+0x30>
 800ffda:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffde:	ed9d 0b00 	vldr	d0, [sp]
 800ffe2:	f000 fa2d 	bl	8010440 <__kernel_cos>
 800ffe6:	e7f5      	b.n	800ffd4 <sin+0x5c>
 800ffe8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffec:	ed9d 0b00 	vldr	d0, [sp]
 800fff0:	2001      	movs	r0, #1
 800fff2:	f000 fe3d 	bl	8010c70 <__kernel_sin>
 800fff6:	ec53 2b10 	vmov	r2, r3, d0
 800fffa:	ee10 0a10 	vmov	r0, s0
 800fffe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010002:	e7d1      	b.n	800ffa8 <sin+0x30>
 8010004:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010008:	ed9d 0b00 	vldr	d0, [sp]
 801000c:	f000 fa18 	bl	8010440 <__kernel_cos>
 8010010:	e7f1      	b.n	800fff6 <sin+0x7e>
 8010012:	bf00      	nop
 8010014:	f3af 8000 	nop.w
	...
 8010020:	3fe921fb 	.word	0x3fe921fb
 8010024:	7fefffff 	.word	0x7fefffff

08010028 <__ieee754_rem_pio2>:
 8010028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002c:	ed2d 8b02 	vpush	{d8}
 8010030:	ec55 4b10 	vmov	r4, r5, d0
 8010034:	4bca      	ldr	r3, [pc, #808]	; (8010360 <__ieee754_rem_pio2+0x338>)
 8010036:	b08b      	sub	sp, #44	; 0x2c
 8010038:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801003c:	4598      	cmp	r8, r3
 801003e:	4682      	mov	sl, r0
 8010040:	9502      	str	r5, [sp, #8]
 8010042:	dc08      	bgt.n	8010056 <__ieee754_rem_pio2+0x2e>
 8010044:	2200      	movs	r2, #0
 8010046:	2300      	movs	r3, #0
 8010048:	ed80 0b00 	vstr	d0, [r0]
 801004c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010050:	f04f 0b00 	mov.w	fp, #0
 8010054:	e028      	b.n	80100a8 <__ieee754_rem_pio2+0x80>
 8010056:	4bc3      	ldr	r3, [pc, #780]	; (8010364 <__ieee754_rem_pio2+0x33c>)
 8010058:	4598      	cmp	r8, r3
 801005a:	dc78      	bgt.n	801014e <__ieee754_rem_pio2+0x126>
 801005c:	9b02      	ldr	r3, [sp, #8]
 801005e:	4ec2      	ldr	r6, [pc, #776]	; (8010368 <__ieee754_rem_pio2+0x340>)
 8010060:	2b00      	cmp	r3, #0
 8010062:	ee10 0a10 	vmov	r0, s0
 8010066:	a3b0      	add	r3, pc, #704	; (adr r3, 8010328 <__ieee754_rem_pio2+0x300>)
 8010068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006c:	4629      	mov	r1, r5
 801006e:	dd39      	ble.n	80100e4 <__ieee754_rem_pio2+0xbc>
 8010070:	f7f0 f92a 	bl	80002c8 <__aeabi_dsub>
 8010074:	45b0      	cmp	r8, r6
 8010076:	4604      	mov	r4, r0
 8010078:	460d      	mov	r5, r1
 801007a:	d01b      	beq.n	80100b4 <__ieee754_rem_pio2+0x8c>
 801007c:	a3ac      	add	r3, pc, #688	; (adr r3, 8010330 <__ieee754_rem_pio2+0x308>)
 801007e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010082:	f7f0 f921 	bl	80002c8 <__aeabi_dsub>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	e9ca 2300 	strd	r2, r3, [sl]
 801008e:	4620      	mov	r0, r4
 8010090:	4629      	mov	r1, r5
 8010092:	f7f0 f919 	bl	80002c8 <__aeabi_dsub>
 8010096:	a3a6      	add	r3, pc, #664	; (adr r3, 8010330 <__ieee754_rem_pio2+0x308>)
 8010098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009c:	f7f0 f914 	bl	80002c8 <__aeabi_dsub>
 80100a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80100a4:	f04f 0b01 	mov.w	fp, #1
 80100a8:	4658      	mov	r0, fp
 80100aa:	b00b      	add	sp, #44	; 0x2c
 80100ac:	ecbd 8b02 	vpop	{d8}
 80100b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8010338 <__ieee754_rem_pio2+0x310>)
 80100b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ba:	f7f0 f905 	bl	80002c8 <__aeabi_dsub>
 80100be:	a3a0      	add	r3, pc, #640	; (adr r3, 8010340 <__ieee754_rem_pio2+0x318>)
 80100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c4:	4604      	mov	r4, r0
 80100c6:	460d      	mov	r5, r1
 80100c8:	f7f0 f8fe 	bl	80002c8 <__aeabi_dsub>
 80100cc:	4602      	mov	r2, r0
 80100ce:	460b      	mov	r3, r1
 80100d0:	e9ca 2300 	strd	r2, r3, [sl]
 80100d4:	4620      	mov	r0, r4
 80100d6:	4629      	mov	r1, r5
 80100d8:	f7f0 f8f6 	bl	80002c8 <__aeabi_dsub>
 80100dc:	a398      	add	r3, pc, #608	; (adr r3, 8010340 <__ieee754_rem_pio2+0x318>)
 80100de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e2:	e7db      	b.n	801009c <__ieee754_rem_pio2+0x74>
 80100e4:	f7f0 f8f2 	bl	80002cc <__adddf3>
 80100e8:	45b0      	cmp	r8, r6
 80100ea:	4604      	mov	r4, r0
 80100ec:	460d      	mov	r5, r1
 80100ee:	d016      	beq.n	801011e <__ieee754_rem_pio2+0xf6>
 80100f0:	a38f      	add	r3, pc, #572	; (adr r3, 8010330 <__ieee754_rem_pio2+0x308>)
 80100f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f6:	f7f0 f8e9 	bl	80002cc <__adddf3>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	e9ca 2300 	strd	r2, r3, [sl]
 8010102:	4620      	mov	r0, r4
 8010104:	4629      	mov	r1, r5
 8010106:	f7f0 f8df 	bl	80002c8 <__aeabi_dsub>
 801010a:	a389      	add	r3, pc, #548	; (adr r3, 8010330 <__ieee754_rem_pio2+0x308>)
 801010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010110:	f7f0 f8dc 	bl	80002cc <__adddf3>
 8010114:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8010118:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801011c:	e7c4      	b.n	80100a8 <__ieee754_rem_pio2+0x80>
 801011e:	a386      	add	r3, pc, #536	; (adr r3, 8010338 <__ieee754_rem_pio2+0x310>)
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	f7f0 f8d2 	bl	80002cc <__adddf3>
 8010128:	a385      	add	r3, pc, #532	; (adr r3, 8010340 <__ieee754_rem_pio2+0x318>)
 801012a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012e:	4604      	mov	r4, r0
 8010130:	460d      	mov	r5, r1
 8010132:	f7f0 f8cb 	bl	80002cc <__adddf3>
 8010136:	4602      	mov	r2, r0
 8010138:	460b      	mov	r3, r1
 801013a:	e9ca 2300 	strd	r2, r3, [sl]
 801013e:	4620      	mov	r0, r4
 8010140:	4629      	mov	r1, r5
 8010142:	f7f0 f8c1 	bl	80002c8 <__aeabi_dsub>
 8010146:	a37e      	add	r3, pc, #504	; (adr r3, 8010340 <__ieee754_rem_pio2+0x318>)
 8010148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014c:	e7e0      	b.n	8010110 <__ieee754_rem_pio2+0xe8>
 801014e:	4b87      	ldr	r3, [pc, #540]	; (801036c <__ieee754_rem_pio2+0x344>)
 8010150:	4598      	cmp	r8, r3
 8010152:	f300 80d9 	bgt.w	8010308 <__ieee754_rem_pio2+0x2e0>
 8010156:	f000 fe49 	bl	8010dec <fabs>
 801015a:	ec55 4b10 	vmov	r4, r5, d0
 801015e:	ee10 0a10 	vmov	r0, s0
 8010162:	a379      	add	r3, pc, #484	; (adr r3, 8010348 <__ieee754_rem_pio2+0x320>)
 8010164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010168:	4629      	mov	r1, r5
 801016a:	f7f0 fa65 	bl	8000638 <__aeabi_dmul>
 801016e:	4b80      	ldr	r3, [pc, #512]	; (8010370 <__ieee754_rem_pio2+0x348>)
 8010170:	2200      	movs	r2, #0
 8010172:	f7f0 f8ab 	bl	80002cc <__adddf3>
 8010176:	f7f0 fd0f 	bl	8000b98 <__aeabi_d2iz>
 801017a:	4683      	mov	fp, r0
 801017c:	f7f0 f9f2 	bl	8000564 <__aeabi_i2d>
 8010180:	4602      	mov	r2, r0
 8010182:	460b      	mov	r3, r1
 8010184:	ec43 2b18 	vmov	d8, r2, r3
 8010188:	a367      	add	r3, pc, #412	; (adr r3, 8010328 <__ieee754_rem_pio2+0x300>)
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	f7f0 fa53 	bl	8000638 <__aeabi_dmul>
 8010192:	4602      	mov	r2, r0
 8010194:	460b      	mov	r3, r1
 8010196:	4620      	mov	r0, r4
 8010198:	4629      	mov	r1, r5
 801019a:	f7f0 f895 	bl	80002c8 <__aeabi_dsub>
 801019e:	a364      	add	r3, pc, #400	; (adr r3, 8010330 <__ieee754_rem_pio2+0x308>)
 80101a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a4:	4606      	mov	r6, r0
 80101a6:	460f      	mov	r7, r1
 80101a8:	ec51 0b18 	vmov	r0, r1, d8
 80101ac:	f7f0 fa44 	bl	8000638 <__aeabi_dmul>
 80101b0:	f1bb 0f1f 	cmp.w	fp, #31
 80101b4:	4604      	mov	r4, r0
 80101b6:	460d      	mov	r5, r1
 80101b8:	dc0d      	bgt.n	80101d6 <__ieee754_rem_pio2+0x1ae>
 80101ba:	4b6e      	ldr	r3, [pc, #440]	; (8010374 <__ieee754_rem_pio2+0x34c>)
 80101bc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80101c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c4:	4543      	cmp	r3, r8
 80101c6:	d006      	beq.n	80101d6 <__ieee754_rem_pio2+0x1ae>
 80101c8:	4622      	mov	r2, r4
 80101ca:	462b      	mov	r3, r5
 80101cc:	4630      	mov	r0, r6
 80101ce:	4639      	mov	r1, r7
 80101d0:	f7f0 f87a 	bl	80002c8 <__aeabi_dsub>
 80101d4:	e00f      	b.n	80101f6 <__ieee754_rem_pio2+0x1ce>
 80101d6:	462b      	mov	r3, r5
 80101d8:	4622      	mov	r2, r4
 80101da:	4630      	mov	r0, r6
 80101dc:	4639      	mov	r1, r7
 80101de:	f7f0 f873 	bl	80002c8 <__aeabi_dsub>
 80101e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80101e6:	9303      	str	r3, [sp, #12]
 80101e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80101ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80101f0:	f1b8 0f10 	cmp.w	r8, #16
 80101f4:	dc02      	bgt.n	80101fc <__ieee754_rem_pio2+0x1d4>
 80101f6:	e9ca 0100 	strd	r0, r1, [sl]
 80101fa:	e039      	b.n	8010270 <__ieee754_rem_pio2+0x248>
 80101fc:	a34e      	add	r3, pc, #312	; (adr r3, 8010338 <__ieee754_rem_pio2+0x310>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	ec51 0b18 	vmov	r0, r1, d8
 8010206:	f7f0 fa17 	bl	8000638 <__aeabi_dmul>
 801020a:	4604      	mov	r4, r0
 801020c:	460d      	mov	r5, r1
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	4630      	mov	r0, r6
 8010214:	4639      	mov	r1, r7
 8010216:	f7f0 f857 	bl	80002c8 <__aeabi_dsub>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	4680      	mov	r8, r0
 8010220:	4689      	mov	r9, r1
 8010222:	4630      	mov	r0, r6
 8010224:	4639      	mov	r1, r7
 8010226:	f7f0 f84f 	bl	80002c8 <__aeabi_dsub>
 801022a:	4622      	mov	r2, r4
 801022c:	462b      	mov	r3, r5
 801022e:	f7f0 f84b 	bl	80002c8 <__aeabi_dsub>
 8010232:	a343      	add	r3, pc, #268	; (adr r3, 8010340 <__ieee754_rem_pio2+0x318>)
 8010234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010238:	4604      	mov	r4, r0
 801023a:	460d      	mov	r5, r1
 801023c:	ec51 0b18 	vmov	r0, r1, d8
 8010240:	f7f0 f9fa 	bl	8000638 <__aeabi_dmul>
 8010244:	4622      	mov	r2, r4
 8010246:	462b      	mov	r3, r5
 8010248:	f7f0 f83e 	bl	80002c8 <__aeabi_dsub>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	4604      	mov	r4, r0
 8010252:	460d      	mov	r5, r1
 8010254:	4640      	mov	r0, r8
 8010256:	4649      	mov	r1, r9
 8010258:	f7f0 f836 	bl	80002c8 <__aeabi_dsub>
 801025c:	9a03      	ldr	r2, [sp, #12]
 801025e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010262:	1ad3      	subs	r3, r2, r3
 8010264:	2b31      	cmp	r3, #49	; 0x31
 8010266:	dc24      	bgt.n	80102b2 <__ieee754_rem_pio2+0x28a>
 8010268:	e9ca 0100 	strd	r0, r1, [sl]
 801026c:	4646      	mov	r6, r8
 801026e:	464f      	mov	r7, r9
 8010270:	e9da 8900 	ldrd	r8, r9, [sl]
 8010274:	4630      	mov	r0, r6
 8010276:	4642      	mov	r2, r8
 8010278:	464b      	mov	r3, r9
 801027a:	4639      	mov	r1, r7
 801027c:	f7f0 f824 	bl	80002c8 <__aeabi_dsub>
 8010280:	462b      	mov	r3, r5
 8010282:	4622      	mov	r2, r4
 8010284:	f7f0 f820 	bl	80002c8 <__aeabi_dsub>
 8010288:	9b02      	ldr	r3, [sp, #8]
 801028a:	2b00      	cmp	r3, #0
 801028c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010290:	f6bf af0a 	bge.w	80100a8 <__ieee754_rem_pio2+0x80>
 8010294:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010298:	f8ca 3004 	str.w	r3, [sl, #4]
 801029c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102a0:	f8ca 8000 	str.w	r8, [sl]
 80102a4:	f8ca 0008 	str.w	r0, [sl, #8]
 80102a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80102ac:	f1cb 0b00 	rsb	fp, fp, #0
 80102b0:	e6fa      	b.n	80100a8 <__ieee754_rem_pio2+0x80>
 80102b2:	a327      	add	r3, pc, #156	; (adr r3, 8010350 <__ieee754_rem_pio2+0x328>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	ec51 0b18 	vmov	r0, r1, d8
 80102bc:	f7f0 f9bc 	bl	8000638 <__aeabi_dmul>
 80102c0:	4604      	mov	r4, r0
 80102c2:	460d      	mov	r5, r1
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	4640      	mov	r0, r8
 80102ca:	4649      	mov	r1, r9
 80102cc:	f7ef fffc 	bl	80002c8 <__aeabi_dsub>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4606      	mov	r6, r0
 80102d6:	460f      	mov	r7, r1
 80102d8:	4640      	mov	r0, r8
 80102da:	4649      	mov	r1, r9
 80102dc:	f7ef fff4 	bl	80002c8 <__aeabi_dsub>
 80102e0:	4622      	mov	r2, r4
 80102e2:	462b      	mov	r3, r5
 80102e4:	f7ef fff0 	bl	80002c8 <__aeabi_dsub>
 80102e8:	a31b      	add	r3, pc, #108	; (adr r3, 8010358 <__ieee754_rem_pio2+0x330>)
 80102ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ee:	4604      	mov	r4, r0
 80102f0:	460d      	mov	r5, r1
 80102f2:	ec51 0b18 	vmov	r0, r1, d8
 80102f6:	f7f0 f99f 	bl	8000638 <__aeabi_dmul>
 80102fa:	4622      	mov	r2, r4
 80102fc:	462b      	mov	r3, r5
 80102fe:	f7ef ffe3 	bl	80002c8 <__aeabi_dsub>
 8010302:	4604      	mov	r4, r0
 8010304:	460d      	mov	r5, r1
 8010306:	e75f      	b.n	80101c8 <__ieee754_rem_pio2+0x1a0>
 8010308:	4b1b      	ldr	r3, [pc, #108]	; (8010378 <__ieee754_rem_pio2+0x350>)
 801030a:	4598      	cmp	r8, r3
 801030c:	dd36      	ble.n	801037c <__ieee754_rem_pio2+0x354>
 801030e:	ee10 2a10 	vmov	r2, s0
 8010312:	462b      	mov	r3, r5
 8010314:	4620      	mov	r0, r4
 8010316:	4629      	mov	r1, r5
 8010318:	f7ef ffd6 	bl	80002c8 <__aeabi_dsub>
 801031c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010320:	e9ca 0100 	strd	r0, r1, [sl]
 8010324:	e694      	b.n	8010050 <__ieee754_rem_pio2+0x28>
 8010326:	bf00      	nop
 8010328:	54400000 	.word	0x54400000
 801032c:	3ff921fb 	.word	0x3ff921fb
 8010330:	1a626331 	.word	0x1a626331
 8010334:	3dd0b461 	.word	0x3dd0b461
 8010338:	1a600000 	.word	0x1a600000
 801033c:	3dd0b461 	.word	0x3dd0b461
 8010340:	2e037073 	.word	0x2e037073
 8010344:	3ba3198a 	.word	0x3ba3198a
 8010348:	6dc9c883 	.word	0x6dc9c883
 801034c:	3fe45f30 	.word	0x3fe45f30
 8010350:	2e000000 	.word	0x2e000000
 8010354:	3ba3198a 	.word	0x3ba3198a
 8010358:	252049c1 	.word	0x252049c1
 801035c:	397b839a 	.word	0x397b839a
 8010360:	3fe921fb 	.word	0x3fe921fb
 8010364:	4002d97b 	.word	0x4002d97b
 8010368:	3ff921fb 	.word	0x3ff921fb
 801036c:	413921fb 	.word	0x413921fb
 8010370:	3fe00000 	.word	0x3fe00000
 8010374:	08011464 	.word	0x08011464
 8010378:	7fefffff 	.word	0x7fefffff
 801037c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010380:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010384:	ee10 0a10 	vmov	r0, s0
 8010388:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801038c:	ee10 6a10 	vmov	r6, s0
 8010390:	460f      	mov	r7, r1
 8010392:	f7f0 fc01 	bl	8000b98 <__aeabi_d2iz>
 8010396:	f7f0 f8e5 	bl	8000564 <__aeabi_i2d>
 801039a:	4602      	mov	r2, r0
 801039c:	460b      	mov	r3, r1
 801039e:	4630      	mov	r0, r6
 80103a0:	4639      	mov	r1, r7
 80103a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80103a6:	f7ef ff8f 	bl	80002c8 <__aeabi_dsub>
 80103aa:	4b23      	ldr	r3, [pc, #140]	; (8010438 <__ieee754_rem_pio2+0x410>)
 80103ac:	2200      	movs	r2, #0
 80103ae:	f7f0 f943 	bl	8000638 <__aeabi_dmul>
 80103b2:	460f      	mov	r7, r1
 80103b4:	4606      	mov	r6, r0
 80103b6:	f7f0 fbef 	bl	8000b98 <__aeabi_d2iz>
 80103ba:	f7f0 f8d3 	bl	8000564 <__aeabi_i2d>
 80103be:	4602      	mov	r2, r0
 80103c0:	460b      	mov	r3, r1
 80103c2:	4630      	mov	r0, r6
 80103c4:	4639      	mov	r1, r7
 80103c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80103ca:	f7ef ff7d 	bl	80002c8 <__aeabi_dsub>
 80103ce:	4b1a      	ldr	r3, [pc, #104]	; (8010438 <__ieee754_rem_pio2+0x410>)
 80103d0:	2200      	movs	r2, #0
 80103d2:	f7f0 f931 	bl	8000638 <__aeabi_dmul>
 80103d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80103da:	ad04      	add	r5, sp, #16
 80103dc:	f04f 0803 	mov.w	r8, #3
 80103e0:	46a9      	mov	r9, r5
 80103e2:	2600      	movs	r6, #0
 80103e4:	2700      	movs	r7, #0
 80103e6:	4632      	mov	r2, r6
 80103e8:	463b      	mov	r3, r7
 80103ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80103ee:	46c3      	mov	fp, r8
 80103f0:	3d08      	subs	r5, #8
 80103f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80103f6:	f7f0 fb87 	bl	8000b08 <__aeabi_dcmpeq>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	d1f3      	bne.n	80103e6 <__ieee754_rem_pio2+0x3be>
 80103fe:	4b0f      	ldr	r3, [pc, #60]	; (801043c <__ieee754_rem_pio2+0x414>)
 8010400:	9301      	str	r3, [sp, #4]
 8010402:	2302      	movs	r3, #2
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	4622      	mov	r2, r4
 8010408:	465b      	mov	r3, fp
 801040a:	4651      	mov	r1, sl
 801040c:	4648      	mov	r0, r9
 801040e:	f000 f8df 	bl	80105d0 <__kernel_rem_pio2>
 8010412:	9b02      	ldr	r3, [sp, #8]
 8010414:	2b00      	cmp	r3, #0
 8010416:	4683      	mov	fp, r0
 8010418:	f6bf ae46 	bge.w	80100a8 <__ieee754_rem_pio2+0x80>
 801041c:	e9da 2100 	ldrd	r2, r1, [sl]
 8010420:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010424:	e9ca 2300 	strd	r2, r3, [sl]
 8010428:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801042c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010430:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010434:	e73a      	b.n	80102ac <__ieee754_rem_pio2+0x284>
 8010436:	bf00      	nop
 8010438:	41700000 	.word	0x41700000
 801043c:	080114e4 	.word	0x080114e4

08010440 <__kernel_cos>:
 8010440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010444:	ec57 6b10 	vmov	r6, r7, d0
 8010448:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801044c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010450:	ed8d 1b00 	vstr	d1, [sp]
 8010454:	da07      	bge.n	8010466 <__kernel_cos+0x26>
 8010456:	ee10 0a10 	vmov	r0, s0
 801045a:	4639      	mov	r1, r7
 801045c:	f7f0 fb9c 	bl	8000b98 <__aeabi_d2iz>
 8010460:	2800      	cmp	r0, #0
 8010462:	f000 8088 	beq.w	8010576 <__kernel_cos+0x136>
 8010466:	4632      	mov	r2, r6
 8010468:	463b      	mov	r3, r7
 801046a:	4630      	mov	r0, r6
 801046c:	4639      	mov	r1, r7
 801046e:	f7f0 f8e3 	bl	8000638 <__aeabi_dmul>
 8010472:	4b51      	ldr	r3, [pc, #324]	; (80105b8 <__kernel_cos+0x178>)
 8010474:	2200      	movs	r2, #0
 8010476:	4604      	mov	r4, r0
 8010478:	460d      	mov	r5, r1
 801047a:	f7f0 f8dd 	bl	8000638 <__aeabi_dmul>
 801047e:	a340      	add	r3, pc, #256	; (adr r3, 8010580 <__kernel_cos+0x140>)
 8010480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010484:	4682      	mov	sl, r0
 8010486:	468b      	mov	fp, r1
 8010488:	4620      	mov	r0, r4
 801048a:	4629      	mov	r1, r5
 801048c:	f7f0 f8d4 	bl	8000638 <__aeabi_dmul>
 8010490:	a33d      	add	r3, pc, #244	; (adr r3, 8010588 <__kernel_cos+0x148>)
 8010492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010496:	f7ef ff19 	bl	80002cc <__adddf3>
 801049a:	4622      	mov	r2, r4
 801049c:	462b      	mov	r3, r5
 801049e:	f7f0 f8cb 	bl	8000638 <__aeabi_dmul>
 80104a2:	a33b      	add	r3, pc, #236	; (adr r3, 8010590 <__kernel_cos+0x150>)
 80104a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a8:	f7ef ff0e 	bl	80002c8 <__aeabi_dsub>
 80104ac:	4622      	mov	r2, r4
 80104ae:	462b      	mov	r3, r5
 80104b0:	f7f0 f8c2 	bl	8000638 <__aeabi_dmul>
 80104b4:	a338      	add	r3, pc, #224	; (adr r3, 8010598 <__kernel_cos+0x158>)
 80104b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ba:	f7ef ff07 	bl	80002cc <__adddf3>
 80104be:	4622      	mov	r2, r4
 80104c0:	462b      	mov	r3, r5
 80104c2:	f7f0 f8b9 	bl	8000638 <__aeabi_dmul>
 80104c6:	a336      	add	r3, pc, #216	; (adr r3, 80105a0 <__kernel_cos+0x160>)
 80104c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104cc:	f7ef fefc 	bl	80002c8 <__aeabi_dsub>
 80104d0:	4622      	mov	r2, r4
 80104d2:	462b      	mov	r3, r5
 80104d4:	f7f0 f8b0 	bl	8000638 <__aeabi_dmul>
 80104d8:	a333      	add	r3, pc, #204	; (adr r3, 80105a8 <__kernel_cos+0x168>)
 80104da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104de:	f7ef fef5 	bl	80002cc <__adddf3>
 80104e2:	4622      	mov	r2, r4
 80104e4:	462b      	mov	r3, r5
 80104e6:	f7f0 f8a7 	bl	8000638 <__aeabi_dmul>
 80104ea:	4622      	mov	r2, r4
 80104ec:	462b      	mov	r3, r5
 80104ee:	f7f0 f8a3 	bl	8000638 <__aeabi_dmul>
 80104f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104f6:	4604      	mov	r4, r0
 80104f8:	460d      	mov	r5, r1
 80104fa:	4630      	mov	r0, r6
 80104fc:	4639      	mov	r1, r7
 80104fe:	f7f0 f89b 	bl	8000638 <__aeabi_dmul>
 8010502:	460b      	mov	r3, r1
 8010504:	4602      	mov	r2, r0
 8010506:	4629      	mov	r1, r5
 8010508:	4620      	mov	r0, r4
 801050a:	f7ef fedd 	bl	80002c8 <__aeabi_dsub>
 801050e:	4b2b      	ldr	r3, [pc, #172]	; (80105bc <__kernel_cos+0x17c>)
 8010510:	4598      	cmp	r8, r3
 8010512:	4606      	mov	r6, r0
 8010514:	460f      	mov	r7, r1
 8010516:	dc10      	bgt.n	801053a <__kernel_cos+0xfa>
 8010518:	4602      	mov	r2, r0
 801051a:	460b      	mov	r3, r1
 801051c:	4650      	mov	r0, sl
 801051e:	4659      	mov	r1, fp
 8010520:	f7ef fed2 	bl	80002c8 <__aeabi_dsub>
 8010524:	460b      	mov	r3, r1
 8010526:	4926      	ldr	r1, [pc, #152]	; (80105c0 <__kernel_cos+0x180>)
 8010528:	4602      	mov	r2, r0
 801052a:	2000      	movs	r0, #0
 801052c:	f7ef fecc 	bl	80002c8 <__aeabi_dsub>
 8010530:	ec41 0b10 	vmov	d0, r0, r1
 8010534:	b003      	add	sp, #12
 8010536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053a:	4b22      	ldr	r3, [pc, #136]	; (80105c4 <__kernel_cos+0x184>)
 801053c:	4920      	ldr	r1, [pc, #128]	; (80105c0 <__kernel_cos+0x180>)
 801053e:	4598      	cmp	r8, r3
 8010540:	bfcc      	ite	gt
 8010542:	4d21      	ldrgt	r5, [pc, #132]	; (80105c8 <__kernel_cos+0x188>)
 8010544:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010548:	2400      	movs	r4, #0
 801054a:	4622      	mov	r2, r4
 801054c:	462b      	mov	r3, r5
 801054e:	2000      	movs	r0, #0
 8010550:	f7ef feba 	bl	80002c8 <__aeabi_dsub>
 8010554:	4622      	mov	r2, r4
 8010556:	4680      	mov	r8, r0
 8010558:	4689      	mov	r9, r1
 801055a:	462b      	mov	r3, r5
 801055c:	4650      	mov	r0, sl
 801055e:	4659      	mov	r1, fp
 8010560:	f7ef feb2 	bl	80002c8 <__aeabi_dsub>
 8010564:	4632      	mov	r2, r6
 8010566:	463b      	mov	r3, r7
 8010568:	f7ef feae 	bl	80002c8 <__aeabi_dsub>
 801056c:	4602      	mov	r2, r0
 801056e:	460b      	mov	r3, r1
 8010570:	4640      	mov	r0, r8
 8010572:	4649      	mov	r1, r9
 8010574:	e7da      	b.n	801052c <__kernel_cos+0xec>
 8010576:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80105b0 <__kernel_cos+0x170>
 801057a:	e7db      	b.n	8010534 <__kernel_cos+0xf4>
 801057c:	f3af 8000 	nop.w
 8010580:	be8838d4 	.word	0xbe8838d4
 8010584:	bda8fae9 	.word	0xbda8fae9
 8010588:	bdb4b1c4 	.word	0xbdb4b1c4
 801058c:	3e21ee9e 	.word	0x3e21ee9e
 8010590:	809c52ad 	.word	0x809c52ad
 8010594:	3e927e4f 	.word	0x3e927e4f
 8010598:	19cb1590 	.word	0x19cb1590
 801059c:	3efa01a0 	.word	0x3efa01a0
 80105a0:	16c15177 	.word	0x16c15177
 80105a4:	3f56c16c 	.word	0x3f56c16c
 80105a8:	5555554c 	.word	0x5555554c
 80105ac:	3fa55555 	.word	0x3fa55555
 80105b0:	00000000 	.word	0x00000000
 80105b4:	3ff00000 	.word	0x3ff00000
 80105b8:	3fe00000 	.word	0x3fe00000
 80105bc:	3fd33332 	.word	0x3fd33332
 80105c0:	3ff00000 	.word	0x3ff00000
 80105c4:	3fe90000 	.word	0x3fe90000
 80105c8:	3fd20000 	.word	0x3fd20000
 80105cc:	00000000 	.word	0x00000000

080105d0 <__kernel_rem_pio2>:
 80105d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105d4:	ed2d 8b02 	vpush	{d8}
 80105d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80105dc:	f112 0f14 	cmn.w	r2, #20
 80105e0:	9308      	str	r3, [sp, #32]
 80105e2:	9101      	str	r1, [sp, #4]
 80105e4:	4bc4      	ldr	r3, [pc, #784]	; (80108f8 <__kernel_rem_pio2+0x328>)
 80105e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80105e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80105ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80105ee:	9302      	str	r3, [sp, #8]
 80105f0:	9b08      	ldr	r3, [sp, #32]
 80105f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80105f6:	bfa8      	it	ge
 80105f8:	1ed4      	subge	r4, r2, #3
 80105fa:	9306      	str	r3, [sp, #24]
 80105fc:	bfb2      	itee	lt
 80105fe:	2400      	movlt	r4, #0
 8010600:	2318      	movge	r3, #24
 8010602:	fb94 f4f3 	sdivge	r4, r4, r3
 8010606:	f06f 0317 	mvn.w	r3, #23
 801060a:	fb04 3303 	mla	r3, r4, r3, r3
 801060e:	eb03 0a02 	add.w	sl, r3, r2
 8010612:	9b02      	ldr	r3, [sp, #8]
 8010614:	9a06      	ldr	r2, [sp, #24]
 8010616:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80108e8 <__kernel_rem_pio2+0x318>
 801061a:	eb03 0802 	add.w	r8, r3, r2
 801061e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010620:	1aa7      	subs	r7, r4, r2
 8010622:	ae22      	add	r6, sp, #136	; 0x88
 8010624:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010628:	2500      	movs	r5, #0
 801062a:	4545      	cmp	r5, r8
 801062c:	dd13      	ble.n	8010656 <__kernel_rem_pio2+0x86>
 801062e:	9b08      	ldr	r3, [sp, #32]
 8010630:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80108e8 <__kernel_rem_pio2+0x318>
 8010634:	aa22      	add	r2, sp, #136	; 0x88
 8010636:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801063a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801063e:	f04f 0800 	mov.w	r8, #0
 8010642:	9b02      	ldr	r3, [sp, #8]
 8010644:	4598      	cmp	r8, r3
 8010646:	dc2f      	bgt.n	80106a8 <__kernel_rem_pio2+0xd8>
 8010648:	ed8d 8b04 	vstr	d8, [sp, #16]
 801064c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8010650:	462f      	mov	r7, r5
 8010652:	2600      	movs	r6, #0
 8010654:	e01b      	b.n	801068e <__kernel_rem_pio2+0xbe>
 8010656:	42ef      	cmn	r7, r5
 8010658:	d407      	bmi.n	801066a <__kernel_rem_pio2+0x9a>
 801065a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801065e:	f7ef ff81 	bl	8000564 <__aeabi_i2d>
 8010662:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010666:	3501      	adds	r5, #1
 8010668:	e7df      	b.n	801062a <__kernel_rem_pio2+0x5a>
 801066a:	ec51 0b18 	vmov	r0, r1, d8
 801066e:	e7f8      	b.n	8010662 <__kernel_rem_pio2+0x92>
 8010670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010674:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010678:	f7ef ffde 	bl	8000638 <__aeabi_dmul>
 801067c:	4602      	mov	r2, r0
 801067e:	460b      	mov	r3, r1
 8010680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010684:	f7ef fe22 	bl	80002cc <__adddf3>
 8010688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801068c:	3601      	adds	r6, #1
 801068e:	9b06      	ldr	r3, [sp, #24]
 8010690:	429e      	cmp	r6, r3
 8010692:	f1a7 0708 	sub.w	r7, r7, #8
 8010696:	ddeb      	ble.n	8010670 <__kernel_rem_pio2+0xa0>
 8010698:	ed9d 7b04 	vldr	d7, [sp, #16]
 801069c:	f108 0801 	add.w	r8, r8, #1
 80106a0:	ecab 7b02 	vstmia	fp!, {d7}
 80106a4:	3508      	adds	r5, #8
 80106a6:	e7cc      	b.n	8010642 <__kernel_rem_pio2+0x72>
 80106a8:	9b02      	ldr	r3, [sp, #8]
 80106aa:	aa0e      	add	r2, sp, #56	; 0x38
 80106ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106b0:	930d      	str	r3, [sp, #52]	; 0x34
 80106b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80106b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80106b8:	9c02      	ldr	r4, [sp, #8]
 80106ba:	930c      	str	r3, [sp, #48]	; 0x30
 80106bc:	00e3      	lsls	r3, r4, #3
 80106be:	930a      	str	r3, [sp, #40]	; 0x28
 80106c0:	ab9a      	add	r3, sp, #616	; 0x268
 80106c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80106ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80106ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80106d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80106d4:	46c3      	mov	fp, r8
 80106d6:	46a1      	mov	r9, r4
 80106d8:	f1b9 0f00 	cmp.w	r9, #0
 80106dc:	f1a5 0508 	sub.w	r5, r5, #8
 80106e0:	dc77      	bgt.n	80107d2 <__kernel_rem_pio2+0x202>
 80106e2:	ec47 6b10 	vmov	d0, r6, r7
 80106e6:	4650      	mov	r0, sl
 80106e8:	f000 fc0a 	bl	8010f00 <scalbn>
 80106ec:	ec57 6b10 	vmov	r6, r7, d0
 80106f0:	2200      	movs	r2, #0
 80106f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80106f6:	ee10 0a10 	vmov	r0, s0
 80106fa:	4639      	mov	r1, r7
 80106fc:	f7ef ff9c 	bl	8000638 <__aeabi_dmul>
 8010700:	ec41 0b10 	vmov	d0, r0, r1
 8010704:	f000 fb7c 	bl	8010e00 <floor>
 8010708:	4b7c      	ldr	r3, [pc, #496]	; (80108fc <__kernel_rem_pio2+0x32c>)
 801070a:	ec51 0b10 	vmov	r0, r1, d0
 801070e:	2200      	movs	r2, #0
 8010710:	f7ef ff92 	bl	8000638 <__aeabi_dmul>
 8010714:	4602      	mov	r2, r0
 8010716:	460b      	mov	r3, r1
 8010718:	4630      	mov	r0, r6
 801071a:	4639      	mov	r1, r7
 801071c:	f7ef fdd4 	bl	80002c8 <__aeabi_dsub>
 8010720:	460f      	mov	r7, r1
 8010722:	4606      	mov	r6, r0
 8010724:	f7f0 fa38 	bl	8000b98 <__aeabi_d2iz>
 8010728:	9004      	str	r0, [sp, #16]
 801072a:	f7ef ff1b 	bl	8000564 <__aeabi_i2d>
 801072e:	4602      	mov	r2, r0
 8010730:	460b      	mov	r3, r1
 8010732:	4630      	mov	r0, r6
 8010734:	4639      	mov	r1, r7
 8010736:	f7ef fdc7 	bl	80002c8 <__aeabi_dsub>
 801073a:	f1ba 0f00 	cmp.w	sl, #0
 801073e:	4606      	mov	r6, r0
 8010740:	460f      	mov	r7, r1
 8010742:	dd6d      	ble.n	8010820 <__kernel_rem_pio2+0x250>
 8010744:	1e62      	subs	r2, r4, #1
 8010746:	ab0e      	add	r3, sp, #56	; 0x38
 8010748:	9d04      	ldr	r5, [sp, #16]
 801074a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801074e:	f1ca 0118 	rsb	r1, sl, #24
 8010752:	fa40 f301 	asr.w	r3, r0, r1
 8010756:	441d      	add	r5, r3
 8010758:	408b      	lsls	r3, r1
 801075a:	1ac0      	subs	r0, r0, r3
 801075c:	ab0e      	add	r3, sp, #56	; 0x38
 801075e:	9504      	str	r5, [sp, #16]
 8010760:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010764:	f1ca 0317 	rsb	r3, sl, #23
 8010768:	fa40 fb03 	asr.w	fp, r0, r3
 801076c:	f1bb 0f00 	cmp.w	fp, #0
 8010770:	dd65      	ble.n	801083e <__kernel_rem_pio2+0x26e>
 8010772:	9b04      	ldr	r3, [sp, #16]
 8010774:	2200      	movs	r2, #0
 8010776:	3301      	adds	r3, #1
 8010778:	9304      	str	r3, [sp, #16]
 801077a:	4615      	mov	r5, r2
 801077c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010780:	4294      	cmp	r4, r2
 8010782:	f300 809c 	bgt.w	80108be <__kernel_rem_pio2+0x2ee>
 8010786:	f1ba 0f00 	cmp.w	sl, #0
 801078a:	dd07      	ble.n	801079c <__kernel_rem_pio2+0x1cc>
 801078c:	f1ba 0f01 	cmp.w	sl, #1
 8010790:	f000 80c0 	beq.w	8010914 <__kernel_rem_pio2+0x344>
 8010794:	f1ba 0f02 	cmp.w	sl, #2
 8010798:	f000 80c6 	beq.w	8010928 <__kernel_rem_pio2+0x358>
 801079c:	f1bb 0f02 	cmp.w	fp, #2
 80107a0:	d14d      	bne.n	801083e <__kernel_rem_pio2+0x26e>
 80107a2:	4632      	mov	r2, r6
 80107a4:	463b      	mov	r3, r7
 80107a6:	4956      	ldr	r1, [pc, #344]	; (8010900 <__kernel_rem_pio2+0x330>)
 80107a8:	2000      	movs	r0, #0
 80107aa:	f7ef fd8d 	bl	80002c8 <__aeabi_dsub>
 80107ae:	4606      	mov	r6, r0
 80107b0:	460f      	mov	r7, r1
 80107b2:	2d00      	cmp	r5, #0
 80107b4:	d043      	beq.n	801083e <__kernel_rem_pio2+0x26e>
 80107b6:	4650      	mov	r0, sl
 80107b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80108f0 <__kernel_rem_pio2+0x320>
 80107bc:	f000 fba0 	bl	8010f00 <scalbn>
 80107c0:	4630      	mov	r0, r6
 80107c2:	4639      	mov	r1, r7
 80107c4:	ec53 2b10 	vmov	r2, r3, d0
 80107c8:	f7ef fd7e 	bl	80002c8 <__aeabi_dsub>
 80107cc:	4606      	mov	r6, r0
 80107ce:	460f      	mov	r7, r1
 80107d0:	e035      	b.n	801083e <__kernel_rem_pio2+0x26e>
 80107d2:	4b4c      	ldr	r3, [pc, #304]	; (8010904 <__kernel_rem_pio2+0x334>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	4630      	mov	r0, r6
 80107d8:	4639      	mov	r1, r7
 80107da:	f7ef ff2d 	bl	8000638 <__aeabi_dmul>
 80107de:	f7f0 f9db 	bl	8000b98 <__aeabi_d2iz>
 80107e2:	f7ef febf 	bl	8000564 <__aeabi_i2d>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	ec43 2b18 	vmov	d8, r2, r3
 80107ee:	4b46      	ldr	r3, [pc, #280]	; (8010908 <__kernel_rem_pio2+0x338>)
 80107f0:	2200      	movs	r2, #0
 80107f2:	f7ef ff21 	bl	8000638 <__aeabi_dmul>
 80107f6:	4602      	mov	r2, r0
 80107f8:	460b      	mov	r3, r1
 80107fa:	4630      	mov	r0, r6
 80107fc:	4639      	mov	r1, r7
 80107fe:	f7ef fd63 	bl	80002c8 <__aeabi_dsub>
 8010802:	f7f0 f9c9 	bl	8000b98 <__aeabi_d2iz>
 8010806:	e9d5 2300 	ldrd	r2, r3, [r5]
 801080a:	f84b 0b04 	str.w	r0, [fp], #4
 801080e:	ec51 0b18 	vmov	r0, r1, d8
 8010812:	f7ef fd5b 	bl	80002cc <__adddf3>
 8010816:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801081a:	4606      	mov	r6, r0
 801081c:	460f      	mov	r7, r1
 801081e:	e75b      	b.n	80106d8 <__kernel_rem_pio2+0x108>
 8010820:	d106      	bne.n	8010830 <__kernel_rem_pio2+0x260>
 8010822:	1e63      	subs	r3, r4, #1
 8010824:	aa0e      	add	r2, sp, #56	; 0x38
 8010826:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801082a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801082e:	e79d      	b.n	801076c <__kernel_rem_pio2+0x19c>
 8010830:	4b36      	ldr	r3, [pc, #216]	; (801090c <__kernel_rem_pio2+0x33c>)
 8010832:	2200      	movs	r2, #0
 8010834:	f7f0 f986 	bl	8000b44 <__aeabi_dcmpge>
 8010838:	2800      	cmp	r0, #0
 801083a:	d13d      	bne.n	80108b8 <__kernel_rem_pio2+0x2e8>
 801083c:	4683      	mov	fp, r0
 801083e:	2200      	movs	r2, #0
 8010840:	2300      	movs	r3, #0
 8010842:	4630      	mov	r0, r6
 8010844:	4639      	mov	r1, r7
 8010846:	f7f0 f95f 	bl	8000b08 <__aeabi_dcmpeq>
 801084a:	2800      	cmp	r0, #0
 801084c:	f000 80c0 	beq.w	80109d0 <__kernel_rem_pio2+0x400>
 8010850:	1e65      	subs	r5, r4, #1
 8010852:	462b      	mov	r3, r5
 8010854:	2200      	movs	r2, #0
 8010856:	9902      	ldr	r1, [sp, #8]
 8010858:	428b      	cmp	r3, r1
 801085a:	da6c      	bge.n	8010936 <__kernel_rem_pio2+0x366>
 801085c:	2a00      	cmp	r2, #0
 801085e:	f000 8089 	beq.w	8010974 <__kernel_rem_pio2+0x3a4>
 8010862:	ab0e      	add	r3, sp, #56	; 0x38
 8010864:	f1aa 0a18 	sub.w	sl, sl, #24
 8010868:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801086c:	2b00      	cmp	r3, #0
 801086e:	f000 80ad 	beq.w	80109cc <__kernel_rem_pio2+0x3fc>
 8010872:	4650      	mov	r0, sl
 8010874:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80108f0 <__kernel_rem_pio2+0x320>
 8010878:	f000 fb42 	bl	8010f00 <scalbn>
 801087c:	ab9a      	add	r3, sp, #616	; 0x268
 801087e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010882:	ec57 6b10 	vmov	r6, r7, d0
 8010886:	00ec      	lsls	r4, r5, #3
 8010888:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801088c:	46aa      	mov	sl, r5
 801088e:	f1ba 0f00 	cmp.w	sl, #0
 8010892:	f280 80d6 	bge.w	8010a42 <__kernel_rem_pio2+0x472>
 8010896:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80108e8 <__kernel_rem_pio2+0x318>
 801089a:	462e      	mov	r6, r5
 801089c:	2e00      	cmp	r6, #0
 801089e:	f2c0 8104 	blt.w	8010aaa <__kernel_rem_pio2+0x4da>
 80108a2:	ab72      	add	r3, sp, #456	; 0x1c8
 80108a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80108a8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8010910 <__kernel_rem_pio2+0x340>
 80108ac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80108b0:	f04f 0800 	mov.w	r8, #0
 80108b4:	1baf      	subs	r7, r5, r6
 80108b6:	e0ea      	b.n	8010a8e <__kernel_rem_pio2+0x4be>
 80108b8:	f04f 0b02 	mov.w	fp, #2
 80108bc:	e759      	b.n	8010772 <__kernel_rem_pio2+0x1a2>
 80108be:	f8d8 3000 	ldr.w	r3, [r8]
 80108c2:	b955      	cbnz	r5, 80108da <__kernel_rem_pio2+0x30a>
 80108c4:	b123      	cbz	r3, 80108d0 <__kernel_rem_pio2+0x300>
 80108c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80108ca:	f8c8 3000 	str.w	r3, [r8]
 80108ce:	2301      	movs	r3, #1
 80108d0:	3201      	adds	r2, #1
 80108d2:	f108 0804 	add.w	r8, r8, #4
 80108d6:	461d      	mov	r5, r3
 80108d8:	e752      	b.n	8010780 <__kernel_rem_pio2+0x1b0>
 80108da:	1acb      	subs	r3, r1, r3
 80108dc:	f8c8 3000 	str.w	r3, [r8]
 80108e0:	462b      	mov	r3, r5
 80108e2:	e7f5      	b.n	80108d0 <__kernel_rem_pio2+0x300>
 80108e4:	f3af 8000 	nop.w
	...
 80108f4:	3ff00000 	.word	0x3ff00000
 80108f8:	08011630 	.word	0x08011630
 80108fc:	40200000 	.word	0x40200000
 8010900:	3ff00000 	.word	0x3ff00000
 8010904:	3e700000 	.word	0x3e700000
 8010908:	41700000 	.word	0x41700000
 801090c:	3fe00000 	.word	0x3fe00000
 8010910:	080115f0 	.word	0x080115f0
 8010914:	1e62      	subs	r2, r4, #1
 8010916:	ab0e      	add	r3, sp, #56	; 0x38
 8010918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801091c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010920:	a90e      	add	r1, sp, #56	; 0x38
 8010922:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010926:	e739      	b.n	801079c <__kernel_rem_pio2+0x1cc>
 8010928:	1e62      	subs	r2, r4, #1
 801092a:	ab0e      	add	r3, sp, #56	; 0x38
 801092c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010930:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010934:	e7f4      	b.n	8010920 <__kernel_rem_pio2+0x350>
 8010936:	a90e      	add	r1, sp, #56	; 0x38
 8010938:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801093c:	3b01      	subs	r3, #1
 801093e:	430a      	orrs	r2, r1
 8010940:	e789      	b.n	8010856 <__kernel_rem_pio2+0x286>
 8010942:	3301      	adds	r3, #1
 8010944:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010948:	2900      	cmp	r1, #0
 801094a:	d0fa      	beq.n	8010942 <__kernel_rem_pio2+0x372>
 801094c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801094e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8010952:	446a      	add	r2, sp
 8010954:	3a98      	subs	r2, #152	; 0x98
 8010956:	920a      	str	r2, [sp, #40]	; 0x28
 8010958:	9a08      	ldr	r2, [sp, #32]
 801095a:	18e3      	adds	r3, r4, r3
 801095c:	18a5      	adds	r5, r4, r2
 801095e:	aa22      	add	r2, sp, #136	; 0x88
 8010960:	f104 0801 	add.w	r8, r4, #1
 8010964:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010968:	9304      	str	r3, [sp, #16]
 801096a:	9b04      	ldr	r3, [sp, #16]
 801096c:	4543      	cmp	r3, r8
 801096e:	da04      	bge.n	801097a <__kernel_rem_pio2+0x3aa>
 8010970:	461c      	mov	r4, r3
 8010972:	e6a3      	b.n	80106bc <__kernel_rem_pio2+0xec>
 8010974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010976:	2301      	movs	r3, #1
 8010978:	e7e4      	b.n	8010944 <__kernel_rem_pio2+0x374>
 801097a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801097c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010980:	f7ef fdf0 	bl	8000564 <__aeabi_i2d>
 8010984:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801098a:	46ab      	mov	fp, r5
 801098c:	461c      	mov	r4, r3
 801098e:	f04f 0900 	mov.w	r9, #0
 8010992:	2600      	movs	r6, #0
 8010994:	2700      	movs	r7, #0
 8010996:	9b06      	ldr	r3, [sp, #24]
 8010998:	4599      	cmp	r9, r3
 801099a:	dd06      	ble.n	80109aa <__kernel_rem_pio2+0x3da>
 801099c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801099e:	e8e3 6702 	strd	r6, r7, [r3], #8
 80109a2:	f108 0801 	add.w	r8, r8, #1
 80109a6:	930a      	str	r3, [sp, #40]	; 0x28
 80109a8:	e7df      	b.n	801096a <__kernel_rem_pio2+0x39a>
 80109aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80109ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80109b2:	f7ef fe41 	bl	8000638 <__aeabi_dmul>
 80109b6:	4602      	mov	r2, r0
 80109b8:	460b      	mov	r3, r1
 80109ba:	4630      	mov	r0, r6
 80109bc:	4639      	mov	r1, r7
 80109be:	f7ef fc85 	bl	80002cc <__adddf3>
 80109c2:	f109 0901 	add.w	r9, r9, #1
 80109c6:	4606      	mov	r6, r0
 80109c8:	460f      	mov	r7, r1
 80109ca:	e7e4      	b.n	8010996 <__kernel_rem_pio2+0x3c6>
 80109cc:	3d01      	subs	r5, #1
 80109ce:	e748      	b.n	8010862 <__kernel_rem_pio2+0x292>
 80109d0:	ec47 6b10 	vmov	d0, r6, r7
 80109d4:	f1ca 0000 	rsb	r0, sl, #0
 80109d8:	f000 fa92 	bl	8010f00 <scalbn>
 80109dc:	ec57 6b10 	vmov	r6, r7, d0
 80109e0:	4ba0      	ldr	r3, [pc, #640]	; (8010c64 <__kernel_rem_pio2+0x694>)
 80109e2:	ee10 0a10 	vmov	r0, s0
 80109e6:	2200      	movs	r2, #0
 80109e8:	4639      	mov	r1, r7
 80109ea:	f7f0 f8ab 	bl	8000b44 <__aeabi_dcmpge>
 80109ee:	b1f8      	cbz	r0, 8010a30 <__kernel_rem_pio2+0x460>
 80109f0:	4b9d      	ldr	r3, [pc, #628]	; (8010c68 <__kernel_rem_pio2+0x698>)
 80109f2:	2200      	movs	r2, #0
 80109f4:	4630      	mov	r0, r6
 80109f6:	4639      	mov	r1, r7
 80109f8:	f7ef fe1e 	bl	8000638 <__aeabi_dmul>
 80109fc:	f7f0 f8cc 	bl	8000b98 <__aeabi_d2iz>
 8010a00:	4680      	mov	r8, r0
 8010a02:	f7ef fdaf 	bl	8000564 <__aeabi_i2d>
 8010a06:	4b97      	ldr	r3, [pc, #604]	; (8010c64 <__kernel_rem_pio2+0x694>)
 8010a08:	2200      	movs	r2, #0
 8010a0a:	f7ef fe15 	bl	8000638 <__aeabi_dmul>
 8010a0e:	460b      	mov	r3, r1
 8010a10:	4602      	mov	r2, r0
 8010a12:	4639      	mov	r1, r7
 8010a14:	4630      	mov	r0, r6
 8010a16:	f7ef fc57 	bl	80002c8 <__aeabi_dsub>
 8010a1a:	f7f0 f8bd 	bl	8000b98 <__aeabi_d2iz>
 8010a1e:	1c65      	adds	r5, r4, #1
 8010a20:	ab0e      	add	r3, sp, #56	; 0x38
 8010a22:	f10a 0a18 	add.w	sl, sl, #24
 8010a26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a2a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010a2e:	e720      	b.n	8010872 <__kernel_rem_pio2+0x2a2>
 8010a30:	4630      	mov	r0, r6
 8010a32:	4639      	mov	r1, r7
 8010a34:	f7f0 f8b0 	bl	8000b98 <__aeabi_d2iz>
 8010a38:	ab0e      	add	r3, sp, #56	; 0x38
 8010a3a:	4625      	mov	r5, r4
 8010a3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a40:	e717      	b.n	8010872 <__kernel_rem_pio2+0x2a2>
 8010a42:	ab0e      	add	r3, sp, #56	; 0x38
 8010a44:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010a48:	f7ef fd8c 	bl	8000564 <__aeabi_i2d>
 8010a4c:	4632      	mov	r2, r6
 8010a4e:	463b      	mov	r3, r7
 8010a50:	f7ef fdf2 	bl	8000638 <__aeabi_dmul>
 8010a54:	4b84      	ldr	r3, [pc, #528]	; (8010c68 <__kernel_rem_pio2+0x698>)
 8010a56:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	4639      	mov	r1, r7
 8010a60:	f7ef fdea 	bl	8000638 <__aeabi_dmul>
 8010a64:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010a68:	4606      	mov	r6, r0
 8010a6a:	460f      	mov	r7, r1
 8010a6c:	e70f      	b.n	801088e <__kernel_rem_pio2+0x2be>
 8010a6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010a72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010a76:	f7ef fddf 	bl	8000638 <__aeabi_dmul>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a82:	f7ef fc23 	bl	80002cc <__adddf3>
 8010a86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010a8a:	f108 0801 	add.w	r8, r8, #1
 8010a8e:	9b02      	ldr	r3, [sp, #8]
 8010a90:	4598      	cmp	r8, r3
 8010a92:	dc01      	bgt.n	8010a98 <__kernel_rem_pio2+0x4c8>
 8010a94:	45b8      	cmp	r8, r7
 8010a96:	ddea      	ble.n	8010a6e <__kernel_rem_pio2+0x49e>
 8010a98:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010a9c:	ab4a      	add	r3, sp, #296	; 0x128
 8010a9e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010aa2:	ed87 7b00 	vstr	d7, [r7]
 8010aa6:	3e01      	subs	r6, #1
 8010aa8:	e6f8      	b.n	801089c <__kernel_rem_pio2+0x2cc>
 8010aaa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010aac:	2b02      	cmp	r3, #2
 8010aae:	dc0b      	bgt.n	8010ac8 <__kernel_rem_pio2+0x4f8>
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	dc35      	bgt.n	8010b20 <__kernel_rem_pio2+0x550>
 8010ab4:	d059      	beq.n	8010b6a <__kernel_rem_pio2+0x59a>
 8010ab6:	9b04      	ldr	r3, [sp, #16]
 8010ab8:	f003 0007 	and.w	r0, r3, #7
 8010abc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010ac0:	ecbd 8b02 	vpop	{d8}
 8010ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010aca:	2b03      	cmp	r3, #3
 8010acc:	d1f3      	bne.n	8010ab6 <__kernel_rem_pio2+0x4e6>
 8010ace:	ab4a      	add	r3, sp, #296	; 0x128
 8010ad0:	4423      	add	r3, r4
 8010ad2:	9306      	str	r3, [sp, #24]
 8010ad4:	461c      	mov	r4, r3
 8010ad6:	469a      	mov	sl, r3
 8010ad8:	9502      	str	r5, [sp, #8]
 8010ada:	9b02      	ldr	r3, [sp, #8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f1aa 0a08 	sub.w	sl, sl, #8
 8010ae2:	dc6b      	bgt.n	8010bbc <__kernel_rem_pio2+0x5ec>
 8010ae4:	46aa      	mov	sl, r5
 8010ae6:	f1ba 0f01 	cmp.w	sl, #1
 8010aea:	f1a4 0408 	sub.w	r4, r4, #8
 8010aee:	f300 8085 	bgt.w	8010bfc <__kernel_rem_pio2+0x62c>
 8010af2:	9c06      	ldr	r4, [sp, #24]
 8010af4:	2000      	movs	r0, #0
 8010af6:	3408      	adds	r4, #8
 8010af8:	2100      	movs	r1, #0
 8010afa:	2d01      	cmp	r5, #1
 8010afc:	f300 809d 	bgt.w	8010c3a <__kernel_rem_pio2+0x66a>
 8010b00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010b04:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010b08:	f1bb 0f00 	cmp.w	fp, #0
 8010b0c:	f040 809b 	bne.w	8010c46 <__kernel_rem_pio2+0x676>
 8010b10:	9b01      	ldr	r3, [sp, #4]
 8010b12:	e9c3 5600 	strd	r5, r6, [r3]
 8010b16:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010b1a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010b1e:	e7ca      	b.n	8010ab6 <__kernel_rem_pio2+0x4e6>
 8010b20:	3408      	adds	r4, #8
 8010b22:	ab4a      	add	r3, sp, #296	; 0x128
 8010b24:	441c      	add	r4, r3
 8010b26:	462e      	mov	r6, r5
 8010b28:	2000      	movs	r0, #0
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	2e00      	cmp	r6, #0
 8010b2e:	da36      	bge.n	8010b9e <__kernel_rem_pio2+0x5ce>
 8010b30:	f1bb 0f00 	cmp.w	fp, #0
 8010b34:	d039      	beq.n	8010baa <__kernel_rem_pio2+0x5da>
 8010b36:	4602      	mov	r2, r0
 8010b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b3c:	9c01      	ldr	r4, [sp, #4]
 8010b3e:	e9c4 2300 	strd	r2, r3, [r4]
 8010b42:	4602      	mov	r2, r0
 8010b44:	460b      	mov	r3, r1
 8010b46:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010b4a:	f7ef fbbd 	bl	80002c8 <__aeabi_dsub>
 8010b4e:	ae4c      	add	r6, sp, #304	; 0x130
 8010b50:	2401      	movs	r4, #1
 8010b52:	42a5      	cmp	r5, r4
 8010b54:	da2c      	bge.n	8010bb0 <__kernel_rem_pio2+0x5e0>
 8010b56:	f1bb 0f00 	cmp.w	fp, #0
 8010b5a:	d002      	beq.n	8010b62 <__kernel_rem_pio2+0x592>
 8010b5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b60:	4619      	mov	r1, r3
 8010b62:	9b01      	ldr	r3, [sp, #4]
 8010b64:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010b68:	e7a5      	b.n	8010ab6 <__kernel_rem_pio2+0x4e6>
 8010b6a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8010b6e:	eb0d 0403 	add.w	r4, sp, r3
 8010b72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010b76:	2000      	movs	r0, #0
 8010b78:	2100      	movs	r1, #0
 8010b7a:	2d00      	cmp	r5, #0
 8010b7c:	da09      	bge.n	8010b92 <__kernel_rem_pio2+0x5c2>
 8010b7e:	f1bb 0f00 	cmp.w	fp, #0
 8010b82:	d002      	beq.n	8010b8a <__kernel_rem_pio2+0x5ba>
 8010b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b88:	4619      	mov	r1, r3
 8010b8a:	9b01      	ldr	r3, [sp, #4]
 8010b8c:	e9c3 0100 	strd	r0, r1, [r3]
 8010b90:	e791      	b.n	8010ab6 <__kernel_rem_pio2+0x4e6>
 8010b92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010b96:	f7ef fb99 	bl	80002cc <__adddf3>
 8010b9a:	3d01      	subs	r5, #1
 8010b9c:	e7ed      	b.n	8010b7a <__kernel_rem_pio2+0x5aa>
 8010b9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010ba2:	f7ef fb93 	bl	80002cc <__adddf3>
 8010ba6:	3e01      	subs	r6, #1
 8010ba8:	e7c0      	b.n	8010b2c <__kernel_rem_pio2+0x55c>
 8010baa:	4602      	mov	r2, r0
 8010bac:	460b      	mov	r3, r1
 8010bae:	e7c5      	b.n	8010b3c <__kernel_rem_pio2+0x56c>
 8010bb0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010bb4:	f7ef fb8a 	bl	80002cc <__adddf3>
 8010bb8:	3401      	adds	r4, #1
 8010bba:	e7ca      	b.n	8010b52 <__kernel_rem_pio2+0x582>
 8010bbc:	e9da 8900 	ldrd	r8, r9, [sl]
 8010bc0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010bc4:	9b02      	ldr	r3, [sp, #8]
 8010bc6:	3b01      	subs	r3, #1
 8010bc8:	9302      	str	r3, [sp, #8]
 8010bca:	4632      	mov	r2, r6
 8010bcc:	463b      	mov	r3, r7
 8010bce:	4640      	mov	r0, r8
 8010bd0:	4649      	mov	r1, r9
 8010bd2:	f7ef fb7b 	bl	80002cc <__adddf3>
 8010bd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010bda:	4602      	mov	r2, r0
 8010bdc:	460b      	mov	r3, r1
 8010bde:	4640      	mov	r0, r8
 8010be0:	4649      	mov	r1, r9
 8010be2:	f7ef fb71 	bl	80002c8 <__aeabi_dsub>
 8010be6:	4632      	mov	r2, r6
 8010be8:	463b      	mov	r3, r7
 8010bea:	f7ef fb6f 	bl	80002cc <__adddf3>
 8010bee:	ed9d 7b08 	vldr	d7, [sp, #32]
 8010bf2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010bf6:	ed8a 7b00 	vstr	d7, [sl]
 8010bfa:	e76e      	b.n	8010ada <__kernel_rem_pio2+0x50a>
 8010bfc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010c00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010c04:	4640      	mov	r0, r8
 8010c06:	4632      	mov	r2, r6
 8010c08:	463b      	mov	r3, r7
 8010c0a:	4649      	mov	r1, r9
 8010c0c:	f7ef fb5e 	bl	80002cc <__adddf3>
 8010c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c14:	4602      	mov	r2, r0
 8010c16:	460b      	mov	r3, r1
 8010c18:	4640      	mov	r0, r8
 8010c1a:	4649      	mov	r1, r9
 8010c1c:	f7ef fb54 	bl	80002c8 <__aeabi_dsub>
 8010c20:	4632      	mov	r2, r6
 8010c22:	463b      	mov	r3, r7
 8010c24:	f7ef fb52 	bl	80002cc <__adddf3>
 8010c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c30:	ed84 7b00 	vstr	d7, [r4]
 8010c34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010c38:	e755      	b.n	8010ae6 <__kernel_rem_pio2+0x516>
 8010c3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c3e:	f7ef fb45 	bl	80002cc <__adddf3>
 8010c42:	3d01      	subs	r5, #1
 8010c44:	e759      	b.n	8010afa <__kernel_rem_pio2+0x52a>
 8010c46:	9b01      	ldr	r3, [sp, #4]
 8010c48:	9a01      	ldr	r2, [sp, #4]
 8010c4a:	601d      	str	r5, [r3, #0]
 8010c4c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010c50:	605c      	str	r4, [r3, #4]
 8010c52:	609f      	str	r7, [r3, #8]
 8010c54:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010c58:	60d3      	str	r3, [r2, #12]
 8010c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c5e:	6110      	str	r0, [r2, #16]
 8010c60:	6153      	str	r3, [r2, #20]
 8010c62:	e728      	b.n	8010ab6 <__kernel_rem_pio2+0x4e6>
 8010c64:	41700000 	.word	0x41700000
 8010c68:	3e700000 	.word	0x3e700000
 8010c6c:	00000000 	.word	0x00000000

08010c70 <__kernel_sin>:
 8010c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	ed2d 8b04 	vpush	{d8-d9}
 8010c78:	eeb0 8a41 	vmov.f32	s16, s2
 8010c7c:	eef0 8a61 	vmov.f32	s17, s3
 8010c80:	ec55 4b10 	vmov	r4, r5, d0
 8010c84:	b083      	sub	sp, #12
 8010c86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010c8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010c8e:	9001      	str	r0, [sp, #4]
 8010c90:	da06      	bge.n	8010ca0 <__kernel_sin+0x30>
 8010c92:	ee10 0a10 	vmov	r0, s0
 8010c96:	4629      	mov	r1, r5
 8010c98:	f7ef ff7e 	bl	8000b98 <__aeabi_d2iz>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d051      	beq.n	8010d44 <__kernel_sin+0xd4>
 8010ca0:	4622      	mov	r2, r4
 8010ca2:	462b      	mov	r3, r5
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	f7ef fcc6 	bl	8000638 <__aeabi_dmul>
 8010cac:	4682      	mov	sl, r0
 8010cae:	468b      	mov	fp, r1
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	4629      	mov	r1, r5
 8010cb8:	f7ef fcbe 	bl	8000638 <__aeabi_dmul>
 8010cbc:	a341      	add	r3, pc, #260	; (adr r3, 8010dc4 <__kernel_sin+0x154>)
 8010cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc2:	4680      	mov	r8, r0
 8010cc4:	4689      	mov	r9, r1
 8010cc6:	4650      	mov	r0, sl
 8010cc8:	4659      	mov	r1, fp
 8010cca:	f7ef fcb5 	bl	8000638 <__aeabi_dmul>
 8010cce:	a33f      	add	r3, pc, #252	; (adr r3, 8010dcc <__kernel_sin+0x15c>)
 8010cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd4:	f7ef faf8 	bl	80002c8 <__aeabi_dsub>
 8010cd8:	4652      	mov	r2, sl
 8010cda:	465b      	mov	r3, fp
 8010cdc:	f7ef fcac 	bl	8000638 <__aeabi_dmul>
 8010ce0:	a33c      	add	r3, pc, #240	; (adr r3, 8010dd4 <__kernel_sin+0x164>)
 8010ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce6:	f7ef faf1 	bl	80002cc <__adddf3>
 8010cea:	4652      	mov	r2, sl
 8010cec:	465b      	mov	r3, fp
 8010cee:	f7ef fca3 	bl	8000638 <__aeabi_dmul>
 8010cf2:	a33a      	add	r3, pc, #232	; (adr r3, 8010ddc <__kernel_sin+0x16c>)
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	f7ef fae6 	bl	80002c8 <__aeabi_dsub>
 8010cfc:	4652      	mov	r2, sl
 8010cfe:	465b      	mov	r3, fp
 8010d00:	f7ef fc9a 	bl	8000638 <__aeabi_dmul>
 8010d04:	a337      	add	r3, pc, #220	; (adr r3, 8010de4 <__kernel_sin+0x174>)
 8010d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0a:	f7ef fadf 	bl	80002cc <__adddf3>
 8010d0e:	9b01      	ldr	r3, [sp, #4]
 8010d10:	4606      	mov	r6, r0
 8010d12:	460f      	mov	r7, r1
 8010d14:	b9eb      	cbnz	r3, 8010d52 <__kernel_sin+0xe2>
 8010d16:	4602      	mov	r2, r0
 8010d18:	460b      	mov	r3, r1
 8010d1a:	4650      	mov	r0, sl
 8010d1c:	4659      	mov	r1, fp
 8010d1e:	f7ef fc8b 	bl	8000638 <__aeabi_dmul>
 8010d22:	a325      	add	r3, pc, #148	; (adr r3, 8010db8 <__kernel_sin+0x148>)
 8010d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d28:	f7ef face 	bl	80002c8 <__aeabi_dsub>
 8010d2c:	4642      	mov	r2, r8
 8010d2e:	464b      	mov	r3, r9
 8010d30:	f7ef fc82 	bl	8000638 <__aeabi_dmul>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4620      	mov	r0, r4
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	f7ef fac6 	bl	80002cc <__adddf3>
 8010d40:	4604      	mov	r4, r0
 8010d42:	460d      	mov	r5, r1
 8010d44:	ec45 4b10 	vmov	d0, r4, r5
 8010d48:	b003      	add	sp, #12
 8010d4a:	ecbd 8b04 	vpop	{d8-d9}
 8010d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d52:	4b1b      	ldr	r3, [pc, #108]	; (8010dc0 <__kernel_sin+0x150>)
 8010d54:	ec51 0b18 	vmov	r0, r1, d8
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f7ef fc6d 	bl	8000638 <__aeabi_dmul>
 8010d5e:	4632      	mov	r2, r6
 8010d60:	ec41 0b19 	vmov	d9, r0, r1
 8010d64:	463b      	mov	r3, r7
 8010d66:	4640      	mov	r0, r8
 8010d68:	4649      	mov	r1, r9
 8010d6a:	f7ef fc65 	bl	8000638 <__aeabi_dmul>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	460b      	mov	r3, r1
 8010d72:	ec51 0b19 	vmov	r0, r1, d9
 8010d76:	f7ef faa7 	bl	80002c8 <__aeabi_dsub>
 8010d7a:	4652      	mov	r2, sl
 8010d7c:	465b      	mov	r3, fp
 8010d7e:	f7ef fc5b 	bl	8000638 <__aeabi_dmul>
 8010d82:	ec53 2b18 	vmov	r2, r3, d8
 8010d86:	f7ef fa9f 	bl	80002c8 <__aeabi_dsub>
 8010d8a:	a30b      	add	r3, pc, #44	; (adr r3, 8010db8 <__kernel_sin+0x148>)
 8010d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d90:	4606      	mov	r6, r0
 8010d92:	460f      	mov	r7, r1
 8010d94:	4640      	mov	r0, r8
 8010d96:	4649      	mov	r1, r9
 8010d98:	f7ef fc4e 	bl	8000638 <__aeabi_dmul>
 8010d9c:	4602      	mov	r2, r0
 8010d9e:	460b      	mov	r3, r1
 8010da0:	4630      	mov	r0, r6
 8010da2:	4639      	mov	r1, r7
 8010da4:	f7ef fa92 	bl	80002cc <__adddf3>
 8010da8:	4602      	mov	r2, r0
 8010daa:	460b      	mov	r3, r1
 8010dac:	4620      	mov	r0, r4
 8010dae:	4629      	mov	r1, r5
 8010db0:	f7ef fa8a 	bl	80002c8 <__aeabi_dsub>
 8010db4:	e7c4      	b.n	8010d40 <__kernel_sin+0xd0>
 8010db6:	bf00      	nop
 8010db8:	55555549 	.word	0x55555549
 8010dbc:	3fc55555 	.word	0x3fc55555
 8010dc0:	3fe00000 	.word	0x3fe00000
 8010dc4:	5acfd57c 	.word	0x5acfd57c
 8010dc8:	3de5d93a 	.word	0x3de5d93a
 8010dcc:	8a2b9ceb 	.word	0x8a2b9ceb
 8010dd0:	3e5ae5e6 	.word	0x3e5ae5e6
 8010dd4:	57b1fe7d 	.word	0x57b1fe7d
 8010dd8:	3ec71de3 	.word	0x3ec71de3
 8010ddc:	19c161d5 	.word	0x19c161d5
 8010de0:	3f2a01a0 	.word	0x3f2a01a0
 8010de4:	1110f8a6 	.word	0x1110f8a6
 8010de8:	3f811111 	.word	0x3f811111

08010dec <fabs>:
 8010dec:	ec51 0b10 	vmov	r0, r1, d0
 8010df0:	ee10 2a10 	vmov	r2, s0
 8010df4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010df8:	ec43 2b10 	vmov	d0, r2, r3
 8010dfc:	4770      	bx	lr
	...

08010e00 <floor>:
 8010e00:	ec51 0b10 	vmov	r0, r1, d0
 8010e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010e0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010e10:	2e13      	cmp	r6, #19
 8010e12:	ee10 5a10 	vmov	r5, s0
 8010e16:	ee10 8a10 	vmov	r8, s0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	dc32      	bgt.n	8010e84 <floor+0x84>
 8010e1e:	2e00      	cmp	r6, #0
 8010e20:	da14      	bge.n	8010e4c <floor+0x4c>
 8010e22:	a333      	add	r3, pc, #204	; (adr r3, 8010ef0 <floor+0xf0>)
 8010e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e28:	f7ef fa50 	bl	80002cc <__adddf3>
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	2300      	movs	r3, #0
 8010e30:	f7ef fe92 	bl	8000b58 <__aeabi_dcmpgt>
 8010e34:	b138      	cbz	r0, 8010e46 <floor+0x46>
 8010e36:	2c00      	cmp	r4, #0
 8010e38:	da57      	bge.n	8010eea <floor+0xea>
 8010e3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010e3e:	431d      	orrs	r5, r3
 8010e40:	d001      	beq.n	8010e46 <floor+0x46>
 8010e42:	4c2d      	ldr	r4, [pc, #180]	; (8010ef8 <floor+0xf8>)
 8010e44:	2500      	movs	r5, #0
 8010e46:	4621      	mov	r1, r4
 8010e48:	4628      	mov	r0, r5
 8010e4a:	e025      	b.n	8010e98 <floor+0x98>
 8010e4c:	4f2b      	ldr	r7, [pc, #172]	; (8010efc <floor+0xfc>)
 8010e4e:	4137      	asrs	r7, r6
 8010e50:	ea01 0307 	and.w	r3, r1, r7
 8010e54:	4303      	orrs	r3, r0
 8010e56:	d01f      	beq.n	8010e98 <floor+0x98>
 8010e58:	a325      	add	r3, pc, #148	; (adr r3, 8010ef0 <floor+0xf0>)
 8010e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5e:	f7ef fa35 	bl	80002cc <__adddf3>
 8010e62:	2200      	movs	r2, #0
 8010e64:	2300      	movs	r3, #0
 8010e66:	f7ef fe77 	bl	8000b58 <__aeabi_dcmpgt>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d0eb      	beq.n	8010e46 <floor+0x46>
 8010e6e:	2c00      	cmp	r4, #0
 8010e70:	bfbe      	ittt	lt
 8010e72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010e76:	fa43 f606 	asrlt.w	r6, r3, r6
 8010e7a:	19a4      	addlt	r4, r4, r6
 8010e7c:	ea24 0407 	bic.w	r4, r4, r7
 8010e80:	2500      	movs	r5, #0
 8010e82:	e7e0      	b.n	8010e46 <floor+0x46>
 8010e84:	2e33      	cmp	r6, #51	; 0x33
 8010e86:	dd0b      	ble.n	8010ea0 <floor+0xa0>
 8010e88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010e8c:	d104      	bne.n	8010e98 <floor+0x98>
 8010e8e:	ee10 2a10 	vmov	r2, s0
 8010e92:	460b      	mov	r3, r1
 8010e94:	f7ef fa1a 	bl	80002cc <__adddf3>
 8010e98:	ec41 0b10 	vmov	d0, r0, r1
 8010e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ea8:	fa23 f707 	lsr.w	r7, r3, r7
 8010eac:	4207      	tst	r7, r0
 8010eae:	d0f3      	beq.n	8010e98 <floor+0x98>
 8010eb0:	a30f      	add	r3, pc, #60	; (adr r3, 8010ef0 <floor+0xf0>)
 8010eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb6:	f7ef fa09 	bl	80002cc <__adddf3>
 8010eba:	2200      	movs	r2, #0
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	f7ef fe4b 	bl	8000b58 <__aeabi_dcmpgt>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d0bf      	beq.n	8010e46 <floor+0x46>
 8010ec6:	2c00      	cmp	r4, #0
 8010ec8:	da02      	bge.n	8010ed0 <floor+0xd0>
 8010eca:	2e14      	cmp	r6, #20
 8010ecc:	d103      	bne.n	8010ed6 <floor+0xd6>
 8010ece:	3401      	adds	r4, #1
 8010ed0:	ea25 0507 	bic.w	r5, r5, r7
 8010ed4:	e7b7      	b.n	8010e46 <floor+0x46>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010edc:	fa03 f606 	lsl.w	r6, r3, r6
 8010ee0:	4435      	add	r5, r6
 8010ee2:	4545      	cmp	r5, r8
 8010ee4:	bf38      	it	cc
 8010ee6:	18e4      	addcc	r4, r4, r3
 8010ee8:	e7f2      	b.n	8010ed0 <floor+0xd0>
 8010eea:	2500      	movs	r5, #0
 8010eec:	462c      	mov	r4, r5
 8010eee:	e7aa      	b.n	8010e46 <floor+0x46>
 8010ef0:	8800759c 	.word	0x8800759c
 8010ef4:	7e37e43c 	.word	0x7e37e43c
 8010ef8:	bff00000 	.word	0xbff00000
 8010efc:	000fffff 	.word	0x000fffff

08010f00 <scalbn>:
 8010f00:	b570      	push	{r4, r5, r6, lr}
 8010f02:	ec55 4b10 	vmov	r4, r5, d0
 8010f06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	462b      	mov	r3, r5
 8010f0e:	b99a      	cbnz	r2, 8010f38 <scalbn+0x38>
 8010f10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f14:	4323      	orrs	r3, r4
 8010f16:	d036      	beq.n	8010f86 <scalbn+0x86>
 8010f18:	4b39      	ldr	r3, [pc, #228]	; (8011000 <scalbn+0x100>)
 8010f1a:	4629      	mov	r1, r5
 8010f1c:	ee10 0a10 	vmov	r0, s0
 8010f20:	2200      	movs	r2, #0
 8010f22:	f7ef fb89 	bl	8000638 <__aeabi_dmul>
 8010f26:	4b37      	ldr	r3, [pc, #220]	; (8011004 <scalbn+0x104>)
 8010f28:	429e      	cmp	r6, r3
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	460d      	mov	r5, r1
 8010f2e:	da10      	bge.n	8010f52 <scalbn+0x52>
 8010f30:	a32b      	add	r3, pc, #172	; (adr r3, 8010fe0 <scalbn+0xe0>)
 8010f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f36:	e03a      	b.n	8010fae <scalbn+0xae>
 8010f38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010f3c:	428a      	cmp	r2, r1
 8010f3e:	d10c      	bne.n	8010f5a <scalbn+0x5a>
 8010f40:	ee10 2a10 	vmov	r2, s0
 8010f44:	4620      	mov	r0, r4
 8010f46:	4629      	mov	r1, r5
 8010f48:	f7ef f9c0 	bl	80002cc <__adddf3>
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	460d      	mov	r5, r1
 8010f50:	e019      	b.n	8010f86 <scalbn+0x86>
 8010f52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010f56:	460b      	mov	r3, r1
 8010f58:	3a36      	subs	r2, #54	; 0x36
 8010f5a:	4432      	add	r2, r6
 8010f5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010f60:	428a      	cmp	r2, r1
 8010f62:	dd08      	ble.n	8010f76 <scalbn+0x76>
 8010f64:	2d00      	cmp	r5, #0
 8010f66:	a120      	add	r1, pc, #128	; (adr r1, 8010fe8 <scalbn+0xe8>)
 8010f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f6c:	da1c      	bge.n	8010fa8 <scalbn+0xa8>
 8010f6e:	a120      	add	r1, pc, #128	; (adr r1, 8010ff0 <scalbn+0xf0>)
 8010f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f74:	e018      	b.n	8010fa8 <scalbn+0xa8>
 8010f76:	2a00      	cmp	r2, #0
 8010f78:	dd08      	ble.n	8010f8c <scalbn+0x8c>
 8010f7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010f7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010f82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010f86:	ec45 4b10 	vmov	d0, r4, r5
 8010f8a:	bd70      	pop	{r4, r5, r6, pc}
 8010f8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010f90:	da19      	bge.n	8010fc6 <scalbn+0xc6>
 8010f92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010f96:	429e      	cmp	r6, r3
 8010f98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010f9c:	dd0a      	ble.n	8010fb4 <scalbn+0xb4>
 8010f9e:	a112      	add	r1, pc, #72	; (adr r1, 8010fe8 <scalbn+0xe8>)
 8010fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d1e2      	bne.n	8010f6e <scalbn+0x6e>
 8010fa8:	a30f      	add	r3, pc, #60	; (adr r3, 8010fe8 <scalbn+0xe8>)
 8010faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fae:	f7ef fb43 	bl	8000638 <__aeabi_dmul>
 8010fb2:	e7cb      	b.n	8010f4c <scalbn+0x4c>
 8010fb4:	a10a      	add	r1, pc, #40	; (adr r1, 8010fe0 <scalbn+0xe0>)
 8010fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d0b8      	beq.n	8010f30 <scalbn+0x30>
 8010fbe:	a10e      	add	r1, pc, #56	; (adr r1, 8010ff8 <scalbn+0xf8>)
 8010fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fc4:	e7b4      	b.n	8010f30 <scalbn+0x30>
 8010fc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010fca:	3236      	adds	r2, #54	; 0x36
 8010fcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010fd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	4b0c      	ldr	r3, [pc, #48]	; (8011008 <scalbn+0x108>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	e7e8      	b.n	8010fae <scalbn+0xae>
 8010fdc:	f3af 8000 	nop.w
 8010fe0:	c2f8f359 	.word	0xc2f8f359
 8010fe4:	01a56e1f 	.word	0x01a56e1f
 8010fe8:	8800759c 	.word	0x8800759c
 8010fec:	7e37e43c 	.word	0x7e37e43c
 8010ff0:	8800759c 	.word	0x8800759c
 8010ff4:	fe37e43c 	.word	0xfe37e43c
 8010ff8:	c2f8f359 	.word	0xc2f8f359
 8010ffc:	81a56e1f 	.word	0x81a56e1f
 8011000:	43500000 	.word	0x43500000
 8011004:	ffff3cb0 	.word	0xffff3cb0
 8011008:	3c900000 	.word	0x3c900000

0801100c <_init>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	bf00      	nop
 8011010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011012:	bc08      	pop	{r3}
 8011014:	469e      	mov	lr, r3
 8011016:	4770      	bx	lr

08011018 <_fini>:
 8011018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801101a:	bf00      	nop
 801101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801101e:	bc08      	pop	{r3}
 8011020:	469e      	mov	lr, r3
 8011022:	4770      	bx	lr
