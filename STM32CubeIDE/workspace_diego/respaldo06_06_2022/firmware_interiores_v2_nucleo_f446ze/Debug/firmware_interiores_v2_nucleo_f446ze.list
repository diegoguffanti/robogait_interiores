
firmware_interiores_v2_nucleo_f446ze.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08010690  08010690  00020690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ca8  08010ca8  00030304  2**0
                  CONTENTS
  4 .ARM          00000008  08010ca8  08010ca8  00020ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cb0  08010cb0  00030304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cb0  08010cb0  00020cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cb4  08010cb4  00020cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000304  20000000  08010cb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff4  20000304  08010fbc  00030304  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022f8  08010fbc  000322f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f28e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f72  00000000  00000000  0004f5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  00053538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  00054e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070fb  00000000  00000000  00056638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020380  00000000  00000000  0005d733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e68af  00000000  00000000  0007dab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e34  00000000  00000000  001643b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000304 	.word	0x20000304
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010674 	.word	0x08010674

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000308 	.word	0x20000308
 800020c:	08010674 	.word	0x08010674

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <parse_data>:
int16_t raw_a[3], raw_w[3], raw_ang[3], raw_h[3], raw_q[4];
float a[3], w[3], theta_imu[3], h[3], q[4];
unsigned char rx_buf[11];

void parse_data(unsigned char byte)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	static unsigned char data_buffer[64];
	static unsigned char index = 0;

	data_buffer[index++] = byte;
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <parse_data+0xc8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	b2d1      	uxtb	r1, r2
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <parse_data+0xc8>)
 8000fa0:	7011      	strb	r1, [r2, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <parse_data+0xcc>)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	5453      	strb	r3, [r2, r1]
	if (data_buffer[0] != 0x55)
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <parse_data+0xcc>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b55      	cmp	r3, #85	; 0x55
 8000fb0:	d003      	beq.n	8000fba <parse_data+0x2e>
	{ //Lectura erronea
		index = 0;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <parse_data+0xc8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
		return;
 8000fb8:	e048      	b.n	800104c <parse_data+0xc0>
	}

	if (index < 11) { return; }
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <parse_data+0xc8>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b0a      	cmp	r3, #10
 8000fc0:	d943      	bls.n	800104a <parse_data+0xbe>
	else
	{
		switch (data_buffer[1])
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <parse_data+0xcc>)
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	3b50      	subs	r3, #80	; 0x50
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d83a      	bhi.n	8001042 <parse_data+0xb6>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <parse_data+0x48>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	08001043 	.word	0x08001043
 8000fd8:	08000ffd 	.word	0x08000ffd
 8000fdc:	0800100b 	.word	0x0800100b
 8000fe0:	08001019 	.word	0x08001019
 8000fe4:	08001027 	.word	0x08001027
 8000fe8:	08001043 	.word	0x08001043
 8000fec:	08001043 	.word	0x08001043
 8000ff0:	08001043 	.word	0x08001043
 8000ff4:	08001043 	.word	0x08001043
 8000ff8:	08001035 	.word	0x08001035
		{
		case 0x50:	break; //Time
		case 0x51:	memcpy(raw_a, data_buffer + 2, 6); break; //Acelerometro
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <parse_data+0xd0>)
 8000ffe:	2206      	movs	r2, #6
 8001000:	4619      	mov	r1, r3
 8001002:	4817      	ldr	r0, [pc, #92]	; (8001060 <parse_data+0xd4>)
 8001004:	f00b fd78 	bl	800caf8 <memcpy>
 8001008:	e01b      	b.n	8001042 <parse_data+0xb6>
		case 0x52:	memcpy(raw_w, data_buffer + 2, 6); break; //Giroscopio
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <parse_data+0xd0>)
 800100c:	2206      	movs	r2, #6
 800100e:	4619      	mov	r1, r3
 8001010:	4814      	ldr	r0, [pc, #80]	; (8001064 <parse_data+0xd8>)
 8001012:	f00b fd71 	bl	800caf8 <memcpy>
 8001016:	e014      	b.n	8001042 <parse_data+0xb6>
		case 0x53:	memcpy(raw_ang, data_buffer + 2, 6); break; //Angulos inclinacion
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <parse_data+0xd0>)
 800101a:	2206      	movs	r2, #6
 800101c:	4619      	mov	r1, r3
 800101e:	4812      	ldr	r0, [pc, #72]	; (8001068 <parse_data+0xdc>)
 8001020:	f00b fd6a 	bl	800caf8 <memcpy>
 8001024:	e00d      	b.n	8001042 <parse_data+0xb6>
		case 0x54:	memcpy(raw_h, data_buffer + 2, 6); break; //Magnetometro
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <parse_data+0xd0>)
 8001028:	2206      	movs	r2, #6
 800102a:	4619      	mov	r1, r3
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <parse_data+0xe0>)
 800102e:	f00b fd63 	bl	800caf8 <memcpy>
 8001032:	e006      	b.n	8001042 <parse_data+0xb6>
		case 0x55:	break; //Status
		case 0x56:	break; //Presion y altitud (no disponible en este modelo)
		case 0x57:	break; //GPS (no disponible en este modelo)
		case 0x58:	break; //GPSV (no disponible en este modelo)
		case 0x59:	memcpy(raw_q, data_buffer + 2, 8); break; //Cuaternio orientacion
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <parse_data+0xd0>)
 8001036:	2208      	movs	r2, #8
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <parse_data+0xe4>)
 800103c:	f00b fd5c 	bl	800caf8 <memcpy>
 8001040:	bf00      	nop
		}
		index = 0;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <parse_data+0xc8>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e000      	b.n	800104c <parse_data+0xc0>
	if (index < 11) { return; }
 800104a:	bf00      	nop
	}
}
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000068c 	.word	0x2000068c
 8001058:	20000690 	.word	0x20000690
 800105c:	20000692 	.word	0x20000692
 8001060:	20000320 	.word	0x20000320
 8001064:	20000328 	.word	0x20000328
 8001068:	20000330 	.word	0x20000330
 800106c:	20000338 	.word	0x20000338
 8001070:	20000340 	.word	0x20000340

08001074 <calculate>:

void calculate()
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) a[i] = (float)raw_a[i] / 32768 * 16; //Aceleracion lineal en g
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e018      	b.n	80010b2 <calculate+0x3e>
 8001080:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <calculate+0x134>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001090:	eddf 6a46 	vldr	s13, [pc, #280]	; 80011ac <calculate+0x138>
 8001094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001098:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800109c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a0:	4a43      	ldr	r2, [pc, #268]	; (80011b0 <calculate+0x13c>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	edc3 7a00 	vstr	s15, [r3]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	dde3      	ble.n	8001080 <calculate+0xc>
	for (int i = 0; i < 3; i++) w[i] = (float)raw_w[i] / 32768 * 2000; //Velocidad angular en �/s
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	e018      	b.n	80010f0 <calculate+0x7c>
 80010be:	4a3d      	ldr	r2, [pc, #244]	; (80011b4 <calculate+0x140>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 80011ac <calculate+0x138>
 80010d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80011b8 <calculate+0x144>
 80010da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010de:	4a37      	ldr	r2, [pc, #220]	; (80011bc <calculate+0x148>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	edc3 7a00 	vstr	s15, [r3]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	3301      	adds	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	dde3      	ble.n	80010be <calculate+0x4a>
	for (int i = 0; i < 3; i++) theta_imu[i] = (float)raw_ang[i] / 32768 * 180; //Angulo inclinacion en �
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e018      	b.n	800112e <calculate+0xba>
 80010fc:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <calculate+0x14c>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110c:	eddf 6a27 	vldr	s13, [pc, #156]	; 80011ac <calculate+0x138>
 8001110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001114:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80011c4 <calculate+0x150>
 8001118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111c:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <calculate+0x154>)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	edc3 7a00 	vstr	s15, [r3]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b02      	cmp	r3, #2
 8001132:	dde3      	ble.n	80010fc <calculate+0x88>
	for (int i = 0; i < 3; i++) h[i] = (float)raw_h[i]; //Magnetometro en uT
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	e010      	b.n	800115c <calculate+0xe8>
 800113a:	4a24      	ldr	r2, [pc, #144]	; (80011cc <calculate+0x158>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <calculate+0x15c>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	edc3 7a00 	vstr	s15, [r3]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b02      	cmp	r3, #2
 8001160:	ddeb      	ble.n	800113a <calculate+0xc6>
	for (int i = 0; i < 4; i++) q[i] = (float)raw_q[i] / 32768; //Cuaternio de orientacion
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	e014      	b.n	8001192 <calculate+0x11e>
 8001168:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <calculate+0x160>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001178:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80011ac <calculate+0x138>
 800117c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001180:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <calculate+0x164>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	edc3 7a00 	vstr	s15, [r3]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b03      	cmp	r3, #3
 8001196:	dde7      	ble.n	8001168 <calculate+0xf4>
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000320 	.word	0x20000320
 80011ac:	47000000 	.word	0x47000000
 80011b0:	20000348 	.word	0x20000348
 80011b4:	20000328 	.word	0x20000328
 80011b8:	44fa0000 	.word	0x44fa0000
 80011bc:	20000354 	.word	0x20000354
 80011c0:	20000330 	.word	0x20000330
 80011c4:	43340000 	.word	0x43340000
 80011c8:	20000360 	.word	0x20000360
 80011cc:	20000338 	.word	0x20000338
 80011d0:	2000036c 	.word	0x2000036c
 80011d4:	20000340 	.word	0x20000340
 80011d8:	20000378 	.word	0x20000378

080011dc <HAL_UART_RxCpltCallback>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

//callback it
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 11; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e009      	b.n	80011fe <HAL_UART_RxCpltCallback+0x22>
		parse_data(rx_buf[i]);
 80011ea:	4a0c      	ldr	r2, [pc, #48]	; (800121c <HAL_UART_RxCpltCallback+0x40>)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff feca 	bl	8000f8c <parse_data>
	for (int i = 0; i < 11; i++)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b0a      	cmp	r3, #10
 8001202:	ddf2      	ble.n	80011ea <HAL_UART_RxCpltCallback+0xe>

	    calculate();
 8001204:	f7ff ff36 	bl	8001074 <calculate>

	HAL_UART_Receive_IT(&huart2, rx_buf, 11);
 8001208:	220b      	movs	r2, #11
 800120a:	4904      	ldr	r1, [pc, #16]	; (800121c <HAL_UART_RxCpltCallback+0x40>)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <HAL_UART_RxCpltCallback+0x44>)
 800120e:	f006 fab2 	bl	8007776 <HAL_UART_Receive_IT>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000388 	.word	0x20000388
 8001220:	20000478 	.word	0x20000478

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001228:	f002 f910 	bl	800344c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122c:	f000 f8cc 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f000 fa80 	bl	8001734 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001234:	f000 fa2a 	bl	800168c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001238:	f000 f9b2 	bl	80015a0 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 800123c:	f000 fa50 	bl	80016e0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001240:	f000 f92e 	bl	80014a0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001244:	f00a fe6a 	bl	800bf1c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001248:	f000 f97c 	bl	8001544 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800124c:	f000 f9f4 	bl	8001638 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 8001250:	4842      	ldr	r0, [pc, #264]	; (800135c <main+0x138>)
 8001252:	f005 fcdd 	bl	8006c10 <HAL_TIM_Base_Start_IT>


  //main
  HAL_UART_Receive_IT(&huart2, rx_buf, 11);
 8001256:	220b      	movs	r2, #11
 8001258:	4941      	ldr	r1, [pc, #260]	; (8001360 <main+0x13c>)
 800125a:	4842      	ldr	r0, [pc, #264]	; (8001364 <main+0x140>)
 800125c:	f006 fa8b 	bl	8007776 <HAL_UART_Receive_IT>
  HAL_Delay(200);
 8001260:	20c8      	movs	r0, #200	; 0xc8
 8001262:	f002 f965 	bl	8003530 <HAL_Delay>
  offset_theta=theta_imu[2];
 8001266:	4b40      	ldr	r3, [pc, #256]	; (8001368 <main+0x144>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4a40      	ldr	r2, [pc, #256]	; (800136c <main+0x148>)
 800126c:	6013      	str	r3, [r2, #0]

  status_init_rw1=roboclaw1_init(address_huart1,(uint8_t) address_roboclaw1);
 800126e:	4b40      	ldr	r3, [pc, #256]	; (8001370 <main+0x14c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fc9f 	bl	8002bb8 <roboclaw1_init>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <main+0x150>)
 8001280:	701a      	strb	r2, [r3, #0]
  status_init_rw2=roboclaw2_init(address_huart2,(uint8_t) address_roboclaw2);
 8001282:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <main+0x154>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2180      	movs	r1, #128	; 0x80
 8001288:	4618      	mov	r0, r3
 800128a:	f001 fce7 	bl	8002c5c <roboclaw2_init>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <main+0x158>)
 8001294:	701a      	strb	r2, [r3, #0]
		  }*/




		  setSpeed(v_in, w_in);
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <main+0x15c>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <main+0x160>)
 800129e:	ed93 7a00 	vldr	s14, [r3]
 80012a2:	eef0 0a47 	vmov.f32	s1, s14
 80012a6:	eeb0 0a67 	vmov.f32	s0, s15
 80012aa:	f000 ffe5 	bl	8002278 <setSpeed>
		  status_speedM1=Read_Encoder_Speed(address_huart1,(uint8_t)address_roboclaw1,(uint8_t)1,&speedM1_roboclaw);
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <main+0x14c>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <main+0x164>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	f001 fadc 	bl	8002874 <Read_Encoder_Speed>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <main+0x168>)
 80012c2:	701a      	strb	r2, [r3, #0]
		  status_speedM2=Read_Encoder_Speed(address_huart1,(uint8_t)address_roboclaw1,(uint8_t)2,&speedM2_roboclaw);
 80012c4:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <main+0x14c>)
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <main+0x16c>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	f001 fad1 	bl	8002874 <Read_Encoder_Speed>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <main+0x170>)
 80012d8:	701a      	strb	r2, [r3, #0]
		  status_speedM3=Read_Encoder_Speed(address_huart2,(uint8_t)address_roboclaw2,(uint8_t)1,&speedM3_roboclaw);
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <main+0x154>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <main+0x174>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	f001 fac6 	bl	8002874 <Read_Encoder_Speed>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <main+0x178>)
 80012ee:	701a      	strb	r2, [r3, #0]
		  status_speedM4=Read_Encoder_Speed(address_huart2,(uint8_t)address_roboclaw2,(uint8_t)2,&speedM4_roboclaw);
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <main+0x154>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <main+0x17c>)
 80012f6:	2202      	movs	r2, #2
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	f001 fabb 	bl	8002874 <Read_Encoder_Speed>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <main+0x180>)
 8001304:	701a      	strb	r2, [r3, #0]
		  status_Counters_rw1=Read_Both_Encoder_Counts(address_huart1,(uint8_t)address_roboclaw1,&countsM1_roboclaw,&countsM2_roboclaw);
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <main+0x14c>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <main+0x184>)
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <main+0x188>)
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	f001 fb0b 	bl	800292a <Read_Both_Encoder_Counts>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <main+0x18c>)
 800131a:	701a      	strb	r2, [r3, #0]
		  status_Counters_rw2=Read_Both_Encoder_Counts(address_huart2,(uint8_t)address_roboclaw2,&countsM3_roboclaw,&countsM4_roboclaw);
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <main+0x154>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <main+0x190>)
 8001322:	4a25      	ldr	r2, [pc, #148]	; (80013b8 <main+0x194>)
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	f001 fb00 	bl	800292a <Read_Both_Encoder_Counts>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <main+0x198>)
 8001330:	701a      	strb	r2, [r3, #0]
		  status_button=HAL_GPIO_ReadPin(B1_reset_odom_GPIO_Port, B1_reset_odom_Pin);
 8001332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001336:	4822      	ldr	r0, [pc, #136]	; (80013c0 <main+0x19c>)
 8001338:	f002 fec8 	bl	80040cc <HAL_GPIO_ReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	bf14      	ite	ne
 8001342:	2301      	movne	r3, #1
 8001344:	2300      	moveq	r3, #0
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <main+0x1a0>)
 800134a:	701a      	strb	r2, [r3, #0]
		  if(status_button==true){
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <main+0x1a0>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0a0      	beq.n	8001296 <main+0x72>
			  reset_Odometry();
 8001354:	f000 fb16 	bl	8001984 <reset_Odometry>
		  setSpeed(v_in, w_in);
 8001358:	e79d      	b.n	8001296 <main+0x72>
 800135a:	bf00      	nop
 800135c:	20000430 	.word	0x20000430
 8001360:	20000388 	.word	0x20000388
 8001364:	20000478 	.word	0x20000478
 8001368:	20000360 	.word	0x20000360
 800136c:	2000067c 	.word	0x2000067c
 8001370:	20000000 	.word	0x20000000
 8001374:	2000062e 	.word	0x2000062e
 8001378:	20000004 	.word	0x20000004
 800137c:	2000062f 	.word	0x2000062f
 8001380:	20000600 	.word	0x20000600
 8001384:	20000604 	.word	0x20000604
 8001388:	20000618 	.word	0x20000618
 800138c:	2000062a 	.word	0x2000062a
 8001390:	2000061c 	.word	0x2000061c
 8001394:	2000062b 	.word	0x2000062b
 8001398:	20000620 	.word	0x20000620
 800139c:	2000062c 	.word	0x2000062c
 80013a0:	20000624 	.word	0x20000624
 80013a4:	2000062d 	.word	0x2000062d
 80013a8:	2000060c 	.word	0x2000060c
 80013ac:	20000608 	.word	0x20000608
 80013b0:	20000628 	.word	0x20000628
 80013b4:	20000614 	.word	0x20000614
 80013b8:	20000610 	.word	0x20000610
 80013bc:	20000629 	.word	0x20000629
 80013c0:	40020800 	.word	0x40020800
 80013c4:	20000674 	.word	0x20000674

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2234      	movs	r2, #52	; 0x34
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00b fb9c 	bl	800cb14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <SystemClock_Config+0xd0>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a28      	ldr	r2, [pc, #160]	; (8001498 <SystemClock_Config+0xd0>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <SystemClock_Config+0xd0>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <SystemClock_Config+0xd4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a22      	ldr	r2, [pc, #136]	; (800149c <SystemClock_Config+0xd4>)
 8001412:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <SystemClock_Config+0xd4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001428:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800142c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142e:	2302      	movs	r3, #2
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001432:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001438:	2304      	movs	r3, #4
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800143c:	23a8      	movs	r3, #168	; 0xa8
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001440:	2302      	movs	r3, #2
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001444:	2307      	movs	r3, #7
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4618      	mov	r0, r3
 8001452:	f005 f8ef 	bl	8006634 <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800145c:	f001 fc8c 	bl	8002d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2302      	movs	r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800146c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001470:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2105      	movs	r1, #5
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fa64 	bl	800594c <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800148a:	f001 fc75 	bl	8002d78 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	; 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_ADC1_Init+0x98>)
 80014b4:	4a21      	ldr	r2, [pc, #132]	; (800153c <MX_ADC1_Init+0x9c>)
 80014b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_ADC1_Init+0x98>)
 80014ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_ADC1_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_ADC1_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_ADC1_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_ADC1_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_ADC1_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_ADC1_Init+0x98>)
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <MX_ADC1_Init+0xa0>)
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_ADC1_Init+0x98>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_ADC1_Init+0x98>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_ADC1_Init+0x98>)
 8001502:	f002 f839 	bl	8003578 <HAL_ADC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800150c:	f001 fc34 	bl	8002d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001510:	2304      	movs	r3, #4
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_ADC1_Init+0x98>)
 8001522:	f002 f86d 	bl	8003600 <HAL_ADC_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800152c:	f001 fc24 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000394 	.word	0x20000394
 800153c:	40012000 	.word	0x40012000
 8001540:	0f000001 	.word	0x0f000001

08001544 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_I2C1_Init+0x50>)
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <MX_I2C1_Init+0x54>)
 800154c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_I2C1_Init+0x50>)
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_I2C1_Init+0x58>)
 8001552:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_I2C1_Init+0x50>)
 8001562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001566:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_I2C1_Init+0x50>)
 8001582:	f002 fdd5 	bl	8004130 <HAL_I2C_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800158c:	f001 fbf4 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200003dc 	.word	0x200003dc
 8001598:	40005400 	.word	0x40005400
 800159c:	000186a0 	.word	0x000186a0

080015a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_TIM2_Init+0x94>)
 80015be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_TIM2_Init+0x94>)
 80015c6:	223b      	movs	r2, #59	; 0x3b
 80015c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_TIM2_Init+0x94>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1400;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_TIM2_Init+0x94>)
 80015d2:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80015d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_TIM2_Init+0x94>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_TIM2_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <MX_TIM2_Init+0x94>)
 80015e6:	f005 fac3 	bl	8006b70 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015f0:	f001 fbc2 	bl	8002d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <MX_TIM2_Init+0x94>)
 8001602:	f005 fc7d 	bl	8006f00 <HAL_TIM_ConfigClockSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800160c:	f001 fbb4 	bl	8002d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_TIM2_Init+0x94>)
 800161e:	f005 fe99 	bl	8007354 <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001628:	f001 fba6 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000430 	.word	0x20000430

08001638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f005 ff00 	bl	8007474 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f001 fb7d 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000478 	.word	0x20000478
 8001688:	40004400 	.word	0x40004400

0800168c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <MX_USART3_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001698:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800169c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016c4:	f005 fed6 	bl	8007474 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f001 fb53 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200004bc 	.word	0x200004bc
 80016dc:	40004800 	.word	0x40004800

080016e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART6_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_USART6_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_USART6_UART_Init+0x4c>)
 80016ec:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80016f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USART6_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART6_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART6_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART6_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART6_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART6_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART6_UART_Init+0x4c>)
 8001718:	f005 feac 	bl	8007474 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f001 fb29 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000500 	.word	0x20000500
 8001730:	40011400 	.word	0x40011400

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <MX_GPIO_Init+0x160>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a50      	ldr	r2, [pc, #320]	; (8001894 <MX_GPIO_Init+0x160>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <MX_GPIO_Init+0x160>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <MX_GPIO_Init+0x160>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a49      	ldr	r2, [pc, #292]	; (8001894 <MX_GPIO_Init+0x160>)
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <MX_GPIO_Init+0x160>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <MX_GPIO_Init+0x160>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a42      	ldr	r2, [pc, #264]	; (8001894 <MX_GPIO_Init+0x160>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b40      	ldr	r3, [pc, #256]	; (8001894 <MX_GPIO_Init+0x160>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b3c      	ldr	r3, [pc, #240]	; (8001894 <MX_GPIO_Init+0x160>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a3b      	ldr	r2, [pc, #236]	; (8001894 <MX_GPIO_Init+0x160>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <MX_GPIO_Init+0x160>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <MX_GPIO_Init+0x160>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a34      	ldr	r2, [pc, #208]	; (8001894 <MX_GPIO_Init+0x160>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <MX_GPIO_Init+0x160>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <MX_GPIO_Init+0x160>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a2d      	ldr	r2, [pc, #180]	; (8001894 <MX_GPIO_Init+0x160>)
 80017e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <MX_GPIO_Init+0x160>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2140      	movs	r1, #64	; 0x40
 80017f6:	4828      	ldr	r0, [pc, #160]	; (8001898 <MX_GPIO_Init+0x164>)
 80017f8:	f002 fc80 	bl	80040fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_reset_odom_Pin */
  GPIO_InitStruct.Pin = B1_reset_odom_Pin;
 80017fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_reset_odom_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4822      	ldr	r0, [pc, #136]	; (800189c <MX_GPIO_Init+0x168>)
 8001812:	f002 fac7 	bl	8003da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001816:	2303      	movs	r3, #3
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001826:	2302      	movs	r3, #2
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	481b      	ldr	r0, [pc, #108]	; (80018a0 <MX_GPIO_Init+0x16c>)
 8001832:	f002 fab7 	bl	8003da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001836:	2301      	movs	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001846:	2302      	movs	r3, #2
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4814      	ldr	r0, [pc, #80]	; (80018a4 <MX_GPIO_Init+0x170>)
 8001852:	f002 faa7 	bl	8003da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001856:	2340      	movs	r3, #64	; 0x40
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <MX_GPIO_Init+0x164>)
 800186e:	f002 fa99 	bl	8003da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_GPIO_Init+0x164>)
 8001886:	f002 fa8d 	bl	8003da4 <HAL_GPIO_Init>

}
 800188a:	bf00      	nop
 800188c:	3730      	adds	r7, #48	; 0x30
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40021800 	.word	0x40021800
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400

080018a8 <HAL_TIM_PeriodElapsedCallback>:

//----ODOMETRY---------------------------------------------------


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af04      	add	r7, sp, #16
 80018ae:	6078      	str	r0, [r7, #4]
	  if(htim->Instance==TIM2){
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b8:	d146      	bne.n	8001948 <HAL_TIM_PeriodElapsedCallback+0xa0>
		  timer_indoor_system+=0.001;
 80018ba:	4b27      	ldr	r3, [pc, #156]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe62 	bl	8000588 <__aeabi_f2d>
 80018c4:	a322      	add	r3, pc, #136	; (adr r3, 8001950 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fcff 	bl	80002cc <__adddf3>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f987 	bl	8000be8 <__aeabi_d2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018de:	6013      	str	r3, [r2, #0]
		  indx_odom++;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80018f0:	edc3 7a00 	vstr	s15, [r3]
		  if(indx_odom==sampling_time){
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	eeb4 7a67 	vcmp.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	d11e      	bne.n	8001948 <HAL_TIM_PeriodElapsedCallback+0xa0>
			  odometryUpdater(countsM1_roboclaw,countsM2_roboclaw,countsM3_roboclaw,countsM4_roboclaw,speedM1_roboclaw,speedM2_roboclaw,speedM3_roboclaw,speedM4_roboclaw);
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800190c:	681c      	ldr	r4, [r3, #0]
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001910:	681d      	ldr	r5, [r3, #0]
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001914:	681e      	ldr	r6, [r3, #0]
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	4915      	ldr	r1, [pc, #84]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001926:	6809      	ldr	r1, [r1, #0]
 8001928:	4815      	ldr	r0, [pc, #84]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800192a:	6800      	ldr	r0, [r0, #0]
 800192c:	9003      	str	r0, [sp, #12]
 800192e:	9102      	str	r1, [sp, #8]
 8001930:	9201      	str	r2, [sp, #4]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4632      	mov	r2, r6
 8001938:	4629      	mov	r1, r5
 800193a:	4620      	mov	r0, r4
 800193c:	f000 f87c 	bl	8001a38 <odometryUpdater>
			  indx_odom=0;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001950:	d2f1a9fc 	.word	0xd2f1a9fc
 8001954:	3f50624d 	.word	0x3f50624d
 8001958:	20000678 	.word	0x20000678
 800195c:	20000570 	.word	0x20000570
 8001960:	20000008 	.word	0x20000008
 8001964:	20000608 	.word	0x20000608
 8001968:	2000060c 	.word	0x2000060c
 800196c:	20000610 	.word	0x20000610
 8001970:	20000614 	.word	0x20000614
 8001974:	20000618 	.word	0x20000618
 8001978:	2000061c 	.word	0x2000061c
 800197c:	20000620 	.word	0x20000620
 8001980:	20000624 	.word	0x20000624

08001984 <reset_Odometry>:

void reset_Odometry()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
	bool set_1=Drive_M1_M2_With_Signed_Speed(address_huart1,(uint8_t)address_roboclaw1, 0, 0);
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <reset_Odometry+0x8c>)
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	2300      	movs	r3, #0
 8001990:	2200      	movs	r2, #0
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	f001 f829 	bl	80029ea <Drive_M1_M2_With_Signed_Speed>
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
	bool set_2=Drive_M1_M2_With_Signed_Speed(address_huart2,(uint8_t)address_roboclaw2, 0, 0);
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <reset_Odometry+0x90>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	2300      	movs	r3, #0
 80019a2:	2200      	movs	r2, #0
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	f001 f820 	bl	80029ea <Drive_M1_M2_With_Signed_Speed>
 80019aa:	4603      	mov	r3, r0
 80019ac:	71bb      	strb	r3, [r7, #6]
	bool set_3=Reset_Encoder_Counters(address_huart1,(uint8_t)address_roboclaw1);
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <reset_Odometry+0x8c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 f8cc 	bl	8002b52 <Reset_Encoder_Counters>
 80019ba:	4603      	mov	r3, r0
 80019bc:	717b      	strb	r3, [r7, #5]
	bool set_4=Reset_Encoder_Counters(address_huart2,(uint8_t)address_roboclaw2);
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <reset_Odometry+0x90>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2180      	movs	r1, #128	; 0x80
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 f8c4 	bl	8002b52 <Reset_Encoder_Counters>
 80019ca:	4603      	mov	r3, r0
 80019cc:	713b      	strb	r3, [r7, #4]


	robot_x_pos=0;
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <reset_Odometry+0x94>)
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
	robot_y_pos=0;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <reset_Odometry+0x98>)
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
	robot_angular_pos=0;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <reset_Odometry+0x9c>)
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
	robot_linear_vel=0;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <reset_Odometry+0xa0>)
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
	robot_x_vel=0;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <reset_Odometry+0xa4>)
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
	robot_y_vel=0;
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <reset_Odometry+0xa8>)
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	robot_angular_vel=0;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <reset_Odometry+0xac>)
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]




}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004
 8001a18:	200005dc 	.word	0x200005dc
 8001a1c:	200005e0 	.word	0x200005e0
 8001a20:	200005d0 	.word	0x200005d0
 8001a24:	200005e4 	.word	0x200005e4
 8001a28:	200005d4 	.word	0x200005d4
 8001a2c:	200005d8 	.word	0x200005d8
 8001a30:	200005cc 	.word	0x200005cc
 8001a34:	00000000 	.word	0x00000000

08001a38 <odometryUpdater>:

void odometryUpdater(int32_t enc_FL, int32_t enc_FR, int32_t enc_RL, int32_t enc_RR, int32_t w_FL, int32_t w_FR, int32_t w_RL, int32_t w_RR)
{
 8001a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a3c:	b08a      	sub	sp, #40	; 0x28
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]

    float enc_res=979.2;
 8001a48:	4bcd      	ldr	r3, [pc, #820]	; (8001d80 <odometryUpdater+0x348>)
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24

	counter_test1++;
 8001a4c:	4bcd      	ldr	r3, [pc, #820]	; (8001d84 <odometryUpdater+0x34c>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a5a:	4bca      	ldr	r3, [pc, #808]	; (8001d84 <odometryUpdater+0x34c>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
	wheel_FL_ang_pos = 2 * 3.14 * enc_FL / enc_res;
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7fe fd7f 	bl	8000564 <__aeabi_i2d>
 8001a66:	a3c0      	add	r3, pc, #768	; (adr r3, 8001d68 <odometryUpdater+0x330>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fde4 	bl	8000638 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4692      	mov	sl, r2
 8001a76:	469b      	mov	fp, r3
 8001a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a7a:	f7fe fd85 	bl	8000588 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4650      	mov	r0, sl
 8001a84:	4659      	mov	r1, fp
 8001a86:	f7fe ff01 	bl	800088c <__aeabi_ddiv>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f8a9 	bl	8000be8 <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4abb      	ldr	r2, [pc, #748]	; (8001d88 <odometryUpdater+0x350>)
 8001a9a:	6013      	str	r3, [r2, #0]
    wheel_FR_ang_pos = 2 * 3.14 * enc_FR / enc_res;
 8001a9c:	68b8      	ldr	r0, [r7, #8]
 8001a9e:	f7fe fd61 	bl	8000564 <__aeabi_i2d>
 8001aa2:	a3b1      	add	r3, pc, #708	; (adr r3, 8001d68 <odometryUpdater+0x330>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fdc6 	bl	8000638 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4692      	mov	sl, r2
 8001ab2:	469b      	mov	fp, r3
 8001ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ab6:	f7fe fd67 	bl	8000588 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4650      	mov	r0, sl
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	f7fe fee3 	bl	800088c <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f88b 	bl	8000be8 <__aeabi_d2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4aad      	ldr	r2, [pc, #692]	; (8001d8c <odometryUpdater+0x354>)
 8001ad6:	6013      	str	r3, [r2, #0]
    wheel_RL_ang_pos = 2 * 3.14 * enc_RL / enc_res;
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7fe fd43 	bl	8000564 <__aeabi_i2d>
 8001ade:	a3a2      	add	r3, pc, #648	; (adr r3, 8001d68 <odometryUpdater+0x330>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fda8 	bl	8000638 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4692      	mov	sl, r2
 8001aee:	469b      	mov	fp, r3
 8001af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001af2:	f7fe fd49 	bl	8000588 <__aeabi_f2d>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4650      	mov	r0, sl
 8001afc:	4659      	mov	r1, fp
 8001afe:	f7fe fec5 	bl	800088c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f86d 	bl	8000be8 <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a9f      	ldr	r2, [pc, #636]	; (8001d90 <odometryUpdater+0x358>)
 8001b12:	6013      	str	r3, [r2, #0]
    wheel_RR_ang_pos = 2 * 3.14 * enc_RR / enc_res;
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f7fe fd25 	bl	8000564 <__aeabi_i2d>
 8001b1a:	a393      	add	r3, pc, #588	; (adr r3, 8001d68 <odometryUpdater+0x330>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fd8a 	bl	8000638 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4692      	mov	sl, r2
 8001b2a:	469b      	mov	fp, r3
 8001b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2e:	f7fe fd2b 	bl	8000588 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4650      	mov	r0, sl
 8001b38:	4659      	mov	r1, fp
 8001b3a:	f7fe fea7 	bl	800088c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7ff f84f 	bl	8000be8 <__aeabi_d2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a91      	ldr	r2, [pc, #580]	; (8001d94 <odometryUpdater+0x35c>)
 8001b4e:	6013      	str	r3, [r2, #0]


    testvar1=w_FL;
 8001b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	4b8f      	ldr	r3, [pc, #572]	; (8001d98 <odometryUpdater+0x360>)
 8001b5c:	edc3 7a00 	vstr	s15, [r3]





    enc_L = (enc_FL+enc_RL) / (2 * tyre_deflection);
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <odometryUpdater+0x364>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7c:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <odometryUpdater+0x368>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
    enc_R = (enc_FR+enc_RR) / (2 * tyre_deflection);
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b90:	4b82      	ldr	r3, [pc, #520]	; (8001d9c <odometryUpdater+0x364>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <odometryUpdater+0x36c>)
 8001ba0:	edc3 7a00 	vstr	s15, [r3]

    wheel_L_ang_vel=(((w_FL+w_RL)/2)/979.2)*(2*M_PI);
 8001ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba8:	4413      	add	r3, r2
 8001baa:	0fda      	lsrs	r2, r3, #31
 8001bac:	4413      	add	r3, r2
 8001bae:	105b      	asrs	r3, r3, #1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcd7 	bl	8000564 <__aeabi_i2d>
 8001bb6:	a36e      	add	r3, pc, #440	; (adr r3, 8001d70 <odometryUpdater+0x338>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fe66 	bl	800088c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	a36b      	add	r3, pc, #428	; (adr r3, 8001d78 <odometryUpdater+0x340>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fd33 	bl	8000638 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7ff f805 	bl	8000be8 <__aeabi_d2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <odometryUpdater+0x370>)
 8001be2:	6013      	str	r3, [r2, #0]
    wheel_R_ang_vel=(((w_FR+w_RR)/2)/979.2)*(2*M_PI);
 8001be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be8:	4413      	add	r3, r2
 8001bea:	0fda      	lsrs	r2, r3, #31
 8001bec:	4413      	add	r3, r2
 8001bee:	105b      	asrs	r3, r3, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fcb7 	bl	8000564 <__aeabi_i2d>
 8001bf6:	a35e      	add	r3, pc, #376	; (adr r3, 8001d70 <odometryUpdater+0x338>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fe46 	bl	800088c <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	a35b      	add	r3, pc, #364	; (adr r3, 8001d78 <odometryUpdater+0x340>)
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	f7fe fd13 	bl	8000638 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe ffe5 	bl	8000be8 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a62      	ldr	r2, [pc, #392]	; (8001dac <odometryUpdater+0x374>)
 8001c22:	6013      	str	r3, [r2, #0]

    wheel_L_linear_vel=wheel_L_ang_vel*wheel_radius;
 8001c24:	4b60      	ldr	r3, [pc, #384]	; (8001da8 <odometryUpdater+0x370>)
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <odometryUpdater+0x378>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <odometryUpdater+0x37c>)
 8001c36:	edc3 7a00 	vstr	s15, [r3]
	wheel_R_linear_vel=wheel_R_ang_vel*wheel_radius;
 8001c3a:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <odometryUpdater+0x374>)
 8001c3c:	ed93 7a00 	vldr	s14, [r3]
 8001c40:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <odometryUpdater+0x378>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <odometryUpdater+0x380>)
 8001c4c:	edc3 7a00 	vstr	s15, [r3]

    R=(robot_width/2)*((wheel_L_linear_vel+wheel_R_linear_vel)/(wheel_R_linear_vel-wheel_L_linear_vel));
 8001c50:	4b5a      	ldr	r3, [pc, #360]	; (8001dbc <odometryUpdater+0x384>)
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c5e:	4b55      	ldr	r3, [pc, #340]	; (8001db4 <odometryUpdater+0x37c>)
 8001c60:	edd3 6a00 	vldr	s13, [r3]
 8001c64:	4b54      	ldr	r3, [pc, #336]	; (8001db8 <odometryUpdater+0x380>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8001c6e:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <odometryUpdater+0x380>)
 8001c70:	edd3 6a00 	vldr	s13, [r3]
 8001c74:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <odometryUpdater+0x37c>)
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c7e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c86:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <odometryUpdater+0x388>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
    wr=(wheel_R_linear_vel-wheel_L_linear_vel)/(2*robot_width);
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <odometryUpdater+0x380>)
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <odometryUpdater+0x37c>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c9c:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <odometryUpdater+0x384>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001caa:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <odometryUpdater+0x38c>)
 8001cac:	edc3 7a00 	vstr	s15, [r3]

    float cur_wheel_L_ang_pos = 2 * M_PI * enc_L / 979.2;
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <odometryUpdater+0x368>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc67 	bl	8000588 <__aeabi_f2d>
 8001cba:	a32f      	add	r3, pc, #188	; (adr r3, 8001d78 <odometryUpdater+0x340>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fcba 	bl	8000638 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	a328      	add	r3, pc, #160	; (adr r3, 8001d70 <odometryUpdater+0x338>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fddb 	bl	800088c <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff83 	bl	8000be8 <__aeabi_d2f>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	623b      	str	r3, [r7, #32]
    float cur_wheel_R_ang_pos = 2 * M_PI * enc_R / 979.2;
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <odometryUpdater+0x36c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc4c 	bl	8000588 <__aeabi_f2d>
 8001cf0:	a321      	add	r3, pc, #132	; (adr r3, 8001d78 <odometryUpdater+0x340>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc9f 	bl	8000638 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	a31b      	add	r3, pc, #108	; (adr r3, 8001d70 <odometryUpdater+0x338>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fdc0 	bl	800088c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ff68 	bl	8000be8 <__aeabi_d2f>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	61fb      	str	r3, [r7, #28]

    if(((wheel_L_ang_vel>=0) & (wheel_R_ang_vel>=0))||((wheel_L_ang_vel<=0) & (wheel_R_ang_vel<=0))){
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <odometryUpdater+0x370>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	bfac      	ite	ge
 8001d2c:	2301      	movge	r3, #1
 8001d2e:	2300      	movlt	r3, #0
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <odometryUpdater+0x374>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	bfac      	ite	ge
 8001d42:	2301      	movge	r3, #1
 8001d44:	2300      	movlt	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4013      	ands	r3, r2
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d14d      	bne.n	8001dec <odometryUpdater+0x3b4>
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <odometryUpdater+0x370>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	bf98      	it	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	e031      	b.n	8001dc8 <odometryUpdater+0x390>
 8001d64:	f3af 8000 	nop.w
 8001d68:	51eb851f 	.word	0x51eb851f
 8001d6c:	40191eb8 	.word	0x40191eb8
 8001d70:	9999999a 	.word	0x9999999a
 8001d74:	408e9999 	.word	0x408e9999
 8001d78:	54442d18 	.word	0x54442d18
 8001d7c:	401921fb 	.word	0x401921fb
 8001d80:	4474cccd 	.word	0x4474cccd
 8001d84:	20000574 	.word	0x20000574
 8001d88:	200005b4 	.word	0x200005b4
 8001d8c:	200005b8 	.word	0x200005b8
 8001d90:	200005bc 	.word	0x200005bc
 8001d94:	200005c0 	.word	0x200005c0
 8001d98:	20000630 	.word	0x20000630
 8001d9c:	2000000c 	.word	0x2000000c
 8001da0:	200005c4 	.word	0x200005c4
 8001da4:	200005c8 	.word	0x200005c8
 8001da8:	200005a4 	.word	0x200005a4
 8001dac:	200005a8 	.word	0x200005a8
 8001db0:	20000010 	.word	0x20000010
 8001db4:	200005ac 	.word	0x200005ac
 8001db8:	200005b0 	.word	0x200005b0
 8001dbc:	20000014 	.word	0x20000014
 8001dc0:	200005e8 	.word	0x200005e8
 8001dc4:	200005ec 	.word	0x200005ec
 8001dc8:	bf88      	it	hi
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b7e      	ldr	r3, [pc, #504]	; (8001fc8 <odometryUpdater+0x590>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	bf94      	ite	ls
 8001dde:	2301      	movls	r3, #1
 8001de0:	2300      	movhi	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4013      	ands	r3, r2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <odometryUpdater+0x3e0>
    	robot_angular_vel=((wheel_R_ang_vel-wheel_L_ang_vel)*wheel_radius)/robot_width;
 8001dec:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <odometryUpdater+0x590>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <odometryUpdater+0x594>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dfc:	4b74      	ldr	r3, [pc, #464]	; (8001fd0 <odometryUpdater+0x598>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e06:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <odometryUpdater+0x59c>)
 8001e08:	ed93 7a00 	vldr	s14, [r3]
 8001e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e10:	4b71      	ldr	r3, [pc, #452]	; (8001fd8 <odometryUpdater+0x5a0>)
 8001e12:	edc3 7a00 	vstr	s15, [r3]
 8001e16:	e018      	b.n	8001e4a <odometryUpdater+0x412>

    }else{
    	robot_angular_vel=(((wheel_R_ang_vel-wheel_L_ang_vel)/2)*wheel_radius)/robot_width;
 8001e18:	4b6b      	ldr	r3, [pc, #428]	; (8001fc8 <odometryUpdater+0x590>)
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	4b6b      	ldr	r3, [pc, #428]	; (8001fcc <odometryUpdater+0x594>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e30:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <odometryUpdater+0x598>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e3a:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <odometryUpdater+0x59c>)
 8001e3c:	ed93 7a00 	vldr	s14, [r3]
 8001e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e44:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <odometryUpdater+0x5a0>)
 8001e46:	edc3 7a00 	vstr	s15, [r3]

    }

    float delta_wheel_L_ang_pos=cur_wheel_L_ang_pos-ant_wheel_L_ang_pos;
 8001e4a:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <odometryUpdater+0x5a4>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e58:	edc7 7a06 	vstr	s15, [r7, #24]
    ant_wheel_L_ang_pos=cur_wheel_L_ang_pos;
 8001e5c:	4a5f      	ldr	r2, [pc, #380]	; (8001fdc <odometryUpdater+0x5a4>)
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	6013      	str	r3, [r2, #0]

    float delta_wheel_R_ang_pos=cur_wheel_R_ang_pos-ant_wheel_R_ang_pos;
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <odometryUpdater+0x5a8>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e70:	edc7 7a05 	vstr	s15, [r7, #20]
    ant_wheel_R_ang_pos=cur_wheel_R_ang_pos;
 8001e74:	4a5a      	ldr	r2, [pc, #360]	; (8001fe0 <odometryUpdater+0x5a8>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	6013      	str	r3, [r2, #0]


    if(((delta_wheel_L_ang_pos>=0) & (delta_wheel_R_ang_pos>=0)) || ((delta_wheel_L_ang_pos<=0) & (delta_wheel_R_ang_pos<=0))){
 8001e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	bfac      	ite	ge
 8001e88:	2301      	movge	r3, #1
 8001e8a:	2300      	movlt	r3, #0
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	bfac      	ite	ge
 8001e9c:	2301      	movge	r3, #1
 8001e9e:	2300      	movlt	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d117      	bne.n	8001eda <odometryUpdater+0x4a2>
 8001eaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d018      	beq.n	8001f0c <odometryUpdater+0x4d4>
    	robot_angular_pos=robot_angular_pos+((delta_wheel_R_ang_pos-delta_wheel_L_ang_pos)*wheel_radius/robot_width);
 8001eda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ede:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ee2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <odometryUpdater+0x598>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ef0:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <odometryUpdater+0x59c>)
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001efa:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <odometryUpdater+0x5ac>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <odometryUpdater+0x5ac>)
 8001f06:	edc3 7a00 	vstr	s15, [r3]
 8001f0a:	e0c3      	b.n	8002094 <odometryUpdater+0x65c>
    }else{
    	if(delta_wheel_R_ang_pos>0){
 8001f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	dd66      	ble.n	8001fe8 <odometryUpdater+0x5b0>
    		robot_angular_pos=robot_angular_pos+fabs(((delta_wheel_R_ang_pos+fabs(delta_wheel_L_ang_pos))/2)*wheel_radius/robot_width);
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <odometryUpdater+0x5ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb32 	bl	8000588 <__aeabi_f2d>
 8001f24:	4604      	mov	r4, r0
 8001f26:	460d      	mov	r5, r1
 8001f28:	6978      	ldr	r0, [r7, #20]
 8001f2a:	f7fe fb2d 	bl	8000588 <__aeabi_f2d>
 8001f2e:	4682      	mov	sl, r0
 8001f30:	468b      	mov	fp, r1
 8001f32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f36:	eef0 7ae7 	vabs.f32	s15, s15
 8001f3a:	ee17 0a90 	vmov	r0, s15
 8001f3e:	f7fe fb23 	bl	8000588 <__aeabi_f2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4650      	mov	r0, sl
 8001f48:	4659      	mov	r1, fp
 8001f4a:	f7fe f9bf 	bl	80002cc <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f5e:	f7fe fc95 	bl	800088c <__aeabi_ddiv>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4692      	mov	sl, r2
 8001f68:	469b      	mov	fp, r3
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <odometryUpdater+0x598>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fb0a 	bl	8000588 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4650      	mov	r0, sl
 8001f7a:	4659      	mov	r1, fp
 8001f7c:	f7fe fb5c 	bl	8000638 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4692      	mov	sl, r2
 8001f86:	469b      	mov	fp, r3
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <odometryUpdater+0x59c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fafb 	bl	8000588 <__aeabi_f2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4650      	mov	r0, sl
 8001f98:	4659      	mov	r1, fp
 8001f9a:	f7fe fc77 	bl	800088c <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4690      	mov	r8, r2
 8001fa4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001fa8:	4642      	mov	r2, r8
 8001faa:	464b      	mov	r3, r9
 8001fac:	4620      	mov	r0, r4
 8001fae:	4629      	mov	r1, r5
 8001fb0:	f7fe f98c 	bl	80002cc <__adddf3>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fe14 	bl	8000be8 <__aeabi_d2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <odometryUpdater+0x5ac>)
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e065      	b.n	8002094 <odometryUpdater+0x65c>
 8001fc8:	200005a8 	.word	0x200005a8
 8001fcc:	200005a4 	.word	0x200005a4
 8001fd0:	20000010 	.word	0x20000010
 8001fd4:	20000014 	.word	0x20000014
 8001fd8:	200005cc 	.word	0x200005cc
 8001fdc:	20000638 	.word	0x20000638
 8001fe0:	20000634 	.word	0x20000634
 8001fe4:	200005d0 	.word	0x200005d0
    	}else{
    		robot_angular_pos=robot_angular_pos-fabs(((fabs(delta_wheel_R_ang_pos)+delta_wheel_L_ang_pos)/2)*wheel_radius/robot_width);
 8001fe8:	4b8f      	ldr	r3, [pc, #572]	; (8002228 <odometryUpdater+0x7f0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe facb 	bl	8000588 <__aeabi_f2d>
 8001ff2:	4680      	mov	r8, r0
 8001ff4:	4689      	mov	r9, r1
 8001ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ffa:	eef0 7ae7 	vabs.f32	s15, s15
 8001ffe:	ee17 0a90 	vmov	r0, s15
 8002002:	f7fe fac1 	bl	8000588 <__aeabi_f2d>
 8002006:	4682      	mov	sl, r0
 8002008:	468b      	mov	fp, r1
 800200a:	69b8      	ldr	r0, [r7, #24]
 800200c:	f7fe fabc 	bl	8000588 <__aeabi_f2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4650      	mov	r0, sl
 8002016:	4659      	mov	r1, fp
 8002018:	f7fe f958 	bl	80002cc <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800202c:	f7fe fc2e 	bl	800088c <__aeabi_ddiv>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4692      	mov	sl, r2
 8002036:	469b      	mov	fp, r3
 8002038:	4b7c      	ldr	r3, [pc, #496]	; (800222c <odometryUpdater+0x7f4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe faa3 	bl	8000588 <__aeabi_f2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4650      	mov	r0, sl
 8002048:	4659      	mov	r1, fp
 800204a:	f7fe faf5 	bl	8000638 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4692      	mov	sl, r2
 8002054:	469b      	mov	fp, r3
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <odometryUpdater+0x7f8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa94 	bl	8000588 <__aeabi_f2d>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4650      	mov	r0, sl
 8002066:	4659      	mov	r1, fp
 8002068:	f7fe fc10 	bl	800088c <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4614      	mov	r4, r2
 8002072:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002076:	4622      	mov	r2, r4
 8002078:	462b      	mov	r3, r5
 800207a:	4640      	mov	r0, r8
 800207c:	4649      	mov	r1, r9
 800207e:	f7fe f923 	bl	80002c8 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fdad 	bl	8000be8 <__aeabi_d2f>
 800208e:	4603      	mov	r3, r0
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <odometryUpdater+0x7f0>)
 8002092:	6013      	str	r3, [r2, #0]
    	}
    }


    //robot_angular_pos=robot_angular_pos+robot_angular_vel*0.02;
    robot_angular_pos=theta_imu[2]-offset_theta;
 8002094:	4b67      	ldr	r3, [pc, #412]	; (8002234 <odometryUpdater+0x7fc>)
 8002096:	ed93 7a02 	vldr	s14, [r3, #8]
 800209a:	4b67      	ldr	r3, [pc, #412]	; (8002238 <odometryUpdater+0x800>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a4:	4b60      	ldr	r3, [pc, #384]	; (8002228 <odometryUpdater+0x7f0>)
 80020a6:	edc3 7a00 	vstr	s15, [r3]

    robot_linear_vel=(wheel_L_ang_vel * wheel_radius+(robot_angular_vel*robot_width));
 80020aa:	4b64      	ldr	r3, [pc, #400]	; (800223c <odometryUpdater+0x804>)
 80020ac:	ed93 7a00 	vldr	s14, [r3]
 80020b0:	4b5e      	ldr	r3, [pc, #376]	; (800222c <odometryUpdater+0x7f4>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ba:	4b61      	ldr	r3, [pc, #388]	; (8002240 <odometryUpdater+0x808>)
 80020bc:	edd3 6a00 	vldr	s13, [r3]
 80020c0:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <odometryUpdater+0x7f8>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ce:	4b5d      	ldr	r3, [pc, #372]	; (8002244 <odometryUpdater+0x80c>)
 80020d0:	edc3 7a00 	vstr	s15, [r3]
    robot_x_vel = robot_linear_vel * cos(robot_angular_pos);
 80020d4:	4b5b      	ldr	r3, [pc, #364]	; (8002244 <odometryUpdater+0x80c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fa55 	bl	8000588 <__aeabi_f2d>
 80020de:	4604      	mov	r4, r0
 80020e0:	460d      	mov	r5, r1
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <odometryUpdater+0x7f0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa4e 	bl	8000588 <__aeabi_f2d>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	ec43 2b10 	vmov	d0, r2, r3
 80020f4:	f00d fa20 	bl	800f538 <cos>
 80020f8:	ec53 2b10 	vmov	r2, r3, d0
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe fa9a 	bl	8000638 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd6c 	bl	8000be8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <odometryUpdater+0x810>)
 8002114:	6013      	str	r3, [r2, #0]
    robot_y_vel = robot_linear_vel * sin(robot_angular_pos);
 8002116:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <odometryUpdater+0x80c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa34 	bl	8000588 <__aeabi_f2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4b40      	ldr	r3, [pc, #256]	; (8002228 <odometryUpdater+0x7f0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa2d 	bl	8000588 <__aeabi_f2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	ec43 2b10 	vmov	d0, r2, r3
 8002136:	f00d fa53 	bl	800f5e0 <sin>
 800213a:	ec53 2b10 	vmov	r2, r3, d0
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe fa79 	bl	8000638 <__aeabi_dmul>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fd4b 	bl	8000be8 <__aeabi_d2f>
 8002152:	4603      	mov	r3, r0
 8002154:	4a3d      	ldr	r2, [pc, #244]	; (800224c <odometryUpdater+0x814>)
 8002156:	6013      	str	r3, [r2, #0]
    robot_x_pos = robot_x_pos + robot_x_vel * (sampling_time/1000);
 8002158:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <odometryUpdater+0x818>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002254 <odometryUpdater+0x81c>
 8002162:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <odometryUpdater+0x810>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <odometryUpdater+0x820>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <odometryUpdater+0x820>)
 800217c:	edc3 7a00 	vstr	s15, [r3]
    robot_y_pos = robot_y_pos + robot_y_vel * (sampling_time/1000);
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <odometryUpdater+0x818>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002254 <odometryUpdater+0x81c>
 800218a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <odometryUpdater+0x814>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <odometryUpdater+0x824>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a2:	4b2e      	ldr	r3, [pc, #184]	; (800225c <odometryUpdater+0x824>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]

	//accel_x=imu.acc[0];//x-linear acceleration
	//accel_y=imu.acc[1];
	//accel_z=imu.acc[2];

    mag_y=0;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <odometryUpdater+0x828>)
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
    gyro_z=0;
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <odometryUpdater+0x82c>)
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
    accel_x=0;
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <odometryUpdater+0x830>)
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	601a      	str	r2, [r3, #0]


    buffer_txt[0]=robot_x_pos;
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <odometryUpdater+0x820>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a29      	ldr	r2, [pc, #164]	; (800226c <odometryUpdater+0x834>)
 80021c6:	6013      	str	r3, [r2, #0]
    buffer_txt[1]=robot_y_pos;
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <odometryUpdater+0x824>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <odometryUpdater+0x834>)
 80021ce:	6053      	str	r3, [r2, #4]
    buffer_txt[2]=theta_imu[2]-offset_theta; //robot_angular_pos
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <odometryUpdater+0x7fc>)
 80021d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <odometryUpdater+0x800>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <odometryUpdater+0x834>)
 80021e2:	edc3 7a02 	vstr	s15, [r3, #8]
    buffer_txt[3]=robot_linear_vel;
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <odometryUpdater+0x80c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a20      	ldr	r2, [pc, #128]	; (800226c <odometryUpdater+0x834>)
 80021ec:	60d3      	str	r3, [r2, #12]
    buffer_txt[4]=0;
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <odometryUpdater+0x834>)
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
    buffer_txt[5]=w[2];//robot_angular_vel
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <odometryUpdater+0x838>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <odometryUpdater+0x834>)
 80021fc:	6153      	str	r3, [r2, #20]
    buffer_txt[6]=mag_y;
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <odometryUpdater+0x828>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1a      	ldr	r2, [pc, #104]	; (800226c <odometryUpdater+0x834>)
 8002204:	6193      	str	r3, [r2, #24]
    buffer_txt[7]=gyro_z;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <odometryUpdater+0x82c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <odometryUpdater+0x834>)
 800220c:	61d3      	str	r3, [r2, #28]
    buffer_txt[8]=accel_x;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <odometryUpdater+0x830>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <odometryUpdater+0x834>)
 8002214:	6213      	str	r3, [r2, #32]
    CDC_Transmit_FS(&buffer_txt, 9 * sizeof(float));
 8002216:	2124      	movs	r1, #36	; 0x24
 8002218:	4814      	ldr	r0, [pc, #80]	; (800226c <odometryUpdater+0x834>)
 800221a:	f009 ff63 	bl	800c0e4 <CDC_Transmit_FS>



}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002228:	200005d0 	.word	0x200005d0
 800222c:	20000010 	.word	0x20000010
 8002230:	20000014 	.word	0x20000014
 8002234:	20000360 	.word	0x20000360
 8002238:	2000067c 	.word	0x2000067c
 800223c:	200005a4 	.word	0x200005a4
 8002240:	200005cc 	.word	0x200005cc
 8002244:	200005e4 	.word	0x200005e4
 8002248:	200005d4 	.word	0x200005d4
 800224c:	200005d8 	.word	0x200005d8
 8002250:	20000008 	.word	0x20000008
 8002254:	447a0000 	.word	0x447a0000
 8002258:	200005dc 	.word	0x200005dc
 800225c:	200005e0 	.word	0x200005e0
 8002260:	20000688 	.word	0x20000688
 8002264:	20000684 	.word	0x20000684
 8002268:	20000680 	.word	0x20000680
 800226c:	20000544 	.word	0x20000544
 8002270:	20000354 	.word	0x20000354
 8002274:	00000000 	.word	0x00000000

08002278 <setSpeed>:



void setSpeed(float linear, float angular)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002282:	edc7 0a00 	vstr	s1, [r7]
    float enc_res=979.2;
 8002286:	4bba      	ldr	r3, [pc, #744]	; (8002570 <setSpeed+0x2f8>)
 8002288:	60fb      	str	r3, [r7, #12]

	bool set_0,set_1;
	lin = linear;
 800228a:	4aba      	ldr	r2, [pc, #744]	; (8002574 <setSpeed+0x2fc>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6013      	str	r3, [r2, #0]
    ang = angular;
 8002290:	4ab9      	ldr	r2, [pc, #740]	; (8002578 <setSpeed+0x300>)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6013      	str	r3, [r2, #0]
    if(fabs(lin)>1.5386) 	lin=(linear/fabs(linear))*1.5386;
 8002296:	4bb7      	ldr	r3, [pc, #732]	; (8002574 <setSpeed+0x2fc>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	eef0 7ae7 	vabs.f32	s15, s15
 80022a0:	ee17 0a90 	vmov	r0, s15
 80022a4:	f7fe f970 	bl	8000588 <__aeabi_f2d>
 80022a8:	a3ab      	add	r3, pc, #684	; (adr r3, 8002558 <setSpeed+0x2e0>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fe fc53 	bl	8000b58 <__aeabi_dcmpgt>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d024      	beq.n	8002302 <setSpeed+0x8a>
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe f965 	bl	8000588 <__aeabi_f2d>
 80022be:	4604      	mov	r4, r0
 80022c0:	460d      	mov	r5, r1
 80022c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c6:	eef0 7ae7 	vabs.f32	s15, s15
 80022ca:	ee17 0a90 	vmov	r0, s15
 80022ce:	f7fe f95b 	bl	8000588 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fe fad7 	bl	800088c <__aeabi_ddiv>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	a39c      	add	r3, pc, #624	; (adr r3, 8002558 <setSpeed+0x2e0>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe f9a4 	bl	8000638 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fc76 	bl	8000be8 <__aeabi_d2f>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a9d      	ldr	r2, [pc, #628]	; (8002574 <setSpeed+0x2fc>)
 8002300:	6013      	str	r3, [r2, #0]
    if(fabs(ang)>14.65) 	ang=(angular/fabs(angular))*14.65;
 8002302:	4b9d      	ldr	r3, [pc, #628]	; (8002578 <setSpeed+0x300>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	eef0 7ae7 	vabs.f32	s15, s15
 800230c:	ee17 0a90 	vmov	r0, s15
 8002310:	f7fe f93a 	bl	8000588 <__aeabi_f2d>
 8002314:	a392      	add	r3, pc, #584	; (adr r3, 8002560 <setSpeed+0x2e8>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe fc1d 	bl	8000b58 <__aeabi_dcmpgt>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d024      	beq.n	800236e <setSpeed+0xf6>
 8002324:	6838      	ldr	r0, [r7, #0]
 8002326:	f7fe f92f 	bl	8000588 <__aeabi_f2d>
 800232a:	4604      	mov	r4, r0
 800232c:	460d      	mov	r5, r1
 800232e:	edd7 7a00 	vldr	s15, [r7]
 8002332:	eef0 7ae7 	vabs.f32	s15, s15
 8002336:	ee17 0a90 	vmov	r0, s15
 800233a:	f7fe f925 	bl	8000588 <__aeabi_f2d>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4620      	mov	r0, r4
 8002344:	4629      	mov	r1, r5
 8002346:	f7fe faa1 	bl	800088c <__aeabi_ddiv>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	a383      	add	r3, pc, #524	; (adr r3, 8002560 <setSpeed+0x2e8>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe f96e 	bl	8000638 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fc40 	bl	8000be8 <__aeabi_d2f>
 8002368:	4603      	mov	r3, r0
 800236a:	4a83      	ldr	r2, [pc, #524]	; (8002578 <setSpeed+0x300>)
 800236c:	6013      	str	r3, [r2, #0]



    L_wheel_lin_speed = lin - (ang * robot_width);
 800236e:	4b81      	ldr	r3, [pc, #516]	; (8002574 <setSpeed+0x2fc>)
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	4b80      	ldr	r3, [pc, #512]	; (8002578 <setSpeed+0x300>)
 8002376:	edd3 6a00 	vldr	s13, [r3]
 800237a:	4b80      	ldr	r3, [pc, #512]	; (800257c <setSpeed+0x304>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002388:	4b7d      	ldr	r3, [pc, #500]	; (8002580 <setSpeed+0x308>)
 800238a:	edc3 7a00 	vstr	s15, [r3]
    R_wheel_lin_speed = lin + (ang * robot_width);
 800238e:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <setSpeed+0x300>)
 8002390:	ed93 7a00 	vldr	s14, [r3]
 8002394:	4b79      	ldr	r3, [pc, #484]	; (800257c <setSpeed+0x304>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239e:	4b75      	ldr	r3, [pc, #468]	; (8002574 <setSpeed+0x2fc>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a8:	4b76      	ldr	r3, [pc, #472]	; (8002584 <setSpeed+0x30c>)
 80023aa:	edc3 7a00 	vstr	s15, [r3]
    L_wheel_angular_velocity = L_wheel_lin_speed / wheel_radius;
 80023ae:	4b74      	ldr	r3, [pc, #464]	; (8002580 <setSpeed+0x308>)
 80023b0:	edd3 6a00 	vldr	s13, [r3]
 80023b4:	4b74      	ldr	r3, [pc, #464]	; (8002588 <setSpeed+0x310>)
 80023b6:	ed93 7a00 	vldr	s14, [r3]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	4b73      	ldr	r3, [pc, #460]	; (800258c <setSpeed+0x314>)
 80023c0:	edc3 7a00 	vstr	s15, [r3]
    R_wheel_angular_velocity = R_wheel_lin_speed / wheel_radius;
 80023c4:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <setSpeed+0x30c>)
 80023c6:	edd3 6a00 	vldr	s13, [r3]
 80023ca:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <setSpeed+0x310>)
 80023cc:	ed93 7a00 	vldr	s14, [r3]
 80023d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d4:	4b6e      	ldr	r3, [pc, #440]	; (8002590 <setSpeed+0x318>)
 80023d6:	edc3 7a00 	vstr	s15, [r3]
    L_enc_speed = enc_res * L_wheel_angular_velocity / (2 * M_PI);
 80023da:	4b6c      	ldr	r3, [pc, #432]	; (800258c <setSpeed+0x314>)
 80023dc:	ed93 7a00 	vldr	s14, [r3]
 80023e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e8:	ee17 0a90 	vmov	r0, s15
 80023ec:	f7fe f8cc 	bl	8000588 <__aeabi_f2d>
 80023f0:	a35d      	add	r3, pc, #372	; (adr r3, 8002568 <setSpeed+0x2f0>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe fa49 	bl	800088c <__aeabi_ddiv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fbf1 	bl	8000be8 <__aeabi_d2f>
 8002406:	4603      	mov	r3, r0
 8002408:	4a62      	ldr	r2, [pc, #392]	; (8002594 <setSpeed+0x31c>)
 800240a:	6013      	str	r3, [r2, #0]
    R_enc_speed = enc_res * R_wheel_angular_velocity / (2 * M_PI);
 800240c:	4b60      	ldr	r3, [pc, #384]	; (8002590 <setSpeed+0x318>)
 800240e:	ed93 7a00 	vldr	s14, [r3]
 8002412:	edd7 7a03 	vldr	s15, [r7, #12]
 8002416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241a:	ee17 0a90 	vmov	r0, s15
 800241e:	f7fe f8b3 	bl	8000588 <__aeabi_f2d>
 8002422:	a351      	add	r3, pc, #324	; (adr r3, 8002568 <setSpeed+0x2f0>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe fa30 	bl	800088c <__aeabi_ddiv>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fbd8 	bl	8000be8 <__aeabi_d2f>
 8002438:	4603      	mov	r3, r0
 800243a:	4a57      	ldr	r2, [pc, #348]	; (8002598 <setSpeed+0x320>)
 800243c:	6013      	str	r3, [r2, #0]



    if(abs(L_enc_speed)>max_speed || abs(R_enc_speed)>max_speed)
 800243e:	4b55      	ldr	r3, [pc, #340]	; (8002594 <setSpeed+0x31c>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002448:	ee17 3a90 	vmov	r3, s15
 800244c:	2b00      	cmp	r3, #0
 800244e:	bfb8      	it	lt
 8002450:	425b      	neglt	r3, r3
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245a:	4b50      	ldr	r3, [pc, #320]	; (800259c <setSpeed+0x324>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dc16      	bgt.n	8002498 <setSpeed+0x220>
 800246a:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <setSpeed+0x320>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002474:	ee17 3a90 	vmov	r3, s15
 8002478:	2b00      	cmp	r3, #0
 800247a:	bfb8      	it	lt
 800247c:	425b      	neglt	r3, r3
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002486:	4b45      	ldr	r3, [pc, #276]	; (800259c <setSpeed+0x324>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002494:	f340 80e7 	ble.w	8002666 <setSpeed+0x3ee>
    {
    	if(abs(R_enc_speed)>abs(L_enc_speed))
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <setSpeed+0x320>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a2:	ee17 3a90 	vmov	r3, s15
 80024a6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80024aa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <setSpeed+0x31c>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b8:	ee17 3a90 	vmov	r3, s15
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bfb8      	it	lt
 80024c0:	425b      	neglt	r3, r3
 80024c2:	429a      	cmp	r2, r3
 80024c4:	dd72      	ble.n	80025ac <setSpeed+0x334>
    	{
    		rot_radio= fabs(R_enc_speed/max_speed);
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <setSpeed+0x320>)
 80024c8:	edd3 6a00 	vldr	s13, [r3]
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <setSpeed+0x324>)
 80024ce:	ed93 7a00 	vldr	s14, [r3]
 80024d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d6:	eef0 7ae7 	vabs.f32	s15, s15
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <setSpeed+0x328>)
 80024dc:	edc3 7a00 	vstr	s15, [r3]
    		new_R_enc_speed=(R_enc_speed/fabs(R_enc_speed))*max_speed;  //(R_enc_speed/fabs(R_enc_speed)) is to get the sign of the original command
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <setSpeed+0x320>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f84f 	bl	8000588 <__aeabi_f2d>
 80024ea:	4604      	mov	r4, r0
 80024ec:	460d      	mov	r5, r1
 80024ee:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <setSpeed+0x320>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eef0 7ae7 	vabs.f32	s15, s15
 80024f8:	ee17 0a90 	vmov	r0, s15
 80024fc:	f7fe f844 	bl	8000588 <__aeabi_f2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4620      	mov	r0, r4
 8002506:	4629      	mov	r1, r5
 8002508:	f7fe f9c0 	bl	800088c <__aeabi_ddiv>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4614      	mov	r4, r2
 8002512:	461d      	mov	r5, r3
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <setSpeed+0x324>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f835 	bl	8000588 <__aeabi_f2d>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4620      	mov	r0, r4
 8002524:	4629      	mov	r1, r5
 8002526:	f7fe f887 	bl	8000638 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe fb59 	bl	8000be8 <__aeabi_d2f>
 8002536:	4603      	mov	r3, r0
 8002538:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <setSpeed+0x32c>)
 800253a:	6013      	str	r3, [r2, #0]
    		new_L_enc_speed=L_enc_speed/rot_radio;
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <setSpeed+0x31c>)
 800253e:	edd3 6a00 	vldr	s13, [r3]
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <setSpeed+0x328>)
 8002544:	ed93 7a00 	vldr	s14, [r3]
 8002548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <setSpeed+0x330>)
 800254e:	edc3 7a00 	vstr	s15, [r3]
 8002552:	e071      	b.n	8002638 <setSpeed+0x3c0>
 8002554:	f3af 8000 	nop.w
 8002558:	089a0275 	.word	0x089a0275
 800255c:	3ff89e1b 	.word	0x3ff89e1b
 8002560:	cccccccd 	.word	0xcccccccd
 8002564:	402d4ccc 	.word	0x402d4ccc
 8002568:	54442d18 	.word	0x54442d18
 800256c:	401921fb 	.word	0x401921fb
 8002570:	4474cccd 	.word	0x4474cccd
 8002574:	20000578 	.word	0x20000578
 8002578:	2000057c 	.word	0x2000057c
 800257c:	20000014 	.word	0x20000014
 8002580:	20000580 	.word	0x20000580
 8002584:	20000584 	.word	0x20000584
 8002588:	20000010 	.word	0x20000010
 800258c:	20000588 	.word	0x20000588
 8002590:	2000058c 	.word	0x2000058c
 8002594:	20000590 	.word	0x20000590
 8002598:	20000594 	.word	0x20000594
 800259c:	20000018 	.word	0x20000018
 80025a0:	20000598 	.word	0x20000598
 80025a4:	200005a0 	.word	0x200005a0
 80025a8:	2000059c 	.word	0x2000059c
    	}else{
    		rot_radio= fabs(L_enc_speed/max_speed);
 80025ac:	4b45      	ldr	r3, [pc, #276]	; (80026c4 <setSpeed+0x44c>)
 80025ae:	edd3 6a00 	vldr	s13, [r3]
 80025b2:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <setSpeed+0x450>)
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025bc:	eef0 7ae7 	vabs.f32	s15, s15
 80025c0:	4b42      	ldr	r3, [pc, #264]	; (80026cc <setSpeed+0x454>)
 80025c2:	edc3 7a00 	vstr	s15, [r3]
    		new_L_enc_speed=(R_enc_speed/fabs(R_enc_speed))*max_speed;
 80025c6:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <setSpeed+0x458>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffdc 	bl	8000588 <__aeabi_f2d>
 80025d0:	4604      	mov	r4, r0
 80025d2:	460d      	mov	r5, r1
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <setSpeed+0x458>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	eef0 7ae7 	vabs.f32	s15, s15
 80025de:	ee17 0a90 	vmov	r0, s15
 80025e2:	f7fd ffd1 	bl	8000588 <__aeabi_f2d>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4620      	mov	r0, r4
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7fe f94d 	bl	800088c <__aeabi_ddiv>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <setSpeed+0x450>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ffc2 	bl	8000588 <__aeabi_f2d>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fe f814 	bl	8000638 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe fae6 	bl	8000be8 <__aeabi_d2f>
 800261c:	4603      	mov	r3, r0
 800261e:	4a2d      	ldr	r2, [pc, #180]	; (80026d4 <setSpeed+0x45c>)
 8002620:	6013      	str	r3, [r2, #0]
    		new_R_enc_speed=R_enc_speed/rot_radio;
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <setSpeed+0x458>)
 8002624:	edd3 6a00 	vldr	s13, [r3]
 8002628:	4b28      	ldr	r3, [pc, #160]	; (80026cc <setSpeed+0x454>)
 800262a:	ed93 7a00 	vldr	s14, [r3]
 800262e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <setSpeed+0x460>)
 8002634:	edc3 7a00 	vstr	s15, [r3]
    	}



    	setPower(new_L_enc_speed, new_R_enc_speed, new_R_enc_speed, new_L_enc_speed);  //M1-M2-M3-M4
 8002638:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <setSpeed+0x45c>)
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <setSpeed+0x460>)
 8002640:	ed93 7a00 	vldr	s14, [r3]
 8002644:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <setSpeed+0x460>)
 8002646:	edd3 6a00 	vldr	s13, [r3]
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <setSpeed+0x45c>)
 800264c:	ed93 6a00 	vldr	s12, [r3]
 8002650:	eef0 1a46 	vmov.f32	s3, s12
 8002654:	eeb0 1a66 	vmov.f32	s2, s13
 8002658:	eef0 0a47 	vmov.f32	s1, s14
 800265c:	eeb0 0a67 	vmov.f32	s0, s15
 8002660:	f000 f874 	bl	800274c <setPower>
 8002664:	e02a      	b.n	80026bc <setSpeed+0x444>
    }else
    {



    	set_0=Drive_M1_M2_With_Signed_Speed(address_huart1,(uint8_t)address_roboclaw1, L_enc_speed, R_enc_speed);
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <setSpeed+0x464>)
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <setSpeed+0x44c>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <setSpeed+0x458>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800267e:	ee17 3a90 	vmov	r3, s15
 8002682:	ee17 2a10 	vmov	r2, s14
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	f000 f9af 	bl	80029ea <Drive_M1_M2_With_Signed_Speed>
 800268c:	4603      	mov	r3, r0
 800268e:	72fb      	strb	r3, [r7, #11]
    	set_1=Drive_M1_M2_With_Signed_Speed(address_huart2,(uint8_t)address_roboclaw2, L_enc_speed, R_enc_speed);
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <setSpeed+0x468>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <setSpeed+0x44c>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <setSpeed+0x458>)
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026a8:	ee17 3a90 	vmov	r3, s15
 80026ac:	ee17 2a10 	vmov	r2, s14
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	f000 f99a 	bl	80029ea <Drive_M1_M2_With_Signed_Speed>
 80026b6:	4603      	mov	r3, r0
 80026b8:	72bb      	strb	r3, [r7, #10]
    }

}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdb0      	pop	{r4, r5, r7, pc}
 80026c4:	20000590 	.word	0x20000590
 80026c8:	20000018 	.word	0x20000018
 80026cc:	20000598 	.word	0x20000598
 80026d0:	20000594 	.word	0x20000594
 80026d4:	2000059c 	.word	0x2000059c
 80026d8:	200005a0 	.word	0x200005a0
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000004 	.word	0x20000004

080026e4 <map>:
//----------------------------------------------------



float map(float value, float in_low, float in_high, float out_low, float out_high)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	ed87 0a05 	vstr	s0, [r7, #20]
 80026ee:	edc7 0a04 	vstr	s1, [r7, #16]
 80026f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80026f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80026fa:	ed87 2a01 	vstr	s4, [r7, #4]
    float outgoing = out_low + (out_high - out_low) * ((value - in_low) / (in_high - in_low));
 80026fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002702:	edd7 7a02 	vldr	s15, [r7, #8]
 8002706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800270a:	edd7 6a05 	vldr	s13, [r7, #20]
 800270e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002712:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002716:	edd7 6a03 	vldr	s13, [r7, #12]
 800271a:	edd7 7a04 	vldr	s15, [r7, #16]
 800271e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002722:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272a:	ed97 7a02 	vldr	s14, [r7, #8]
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	edc7 7a07 	vstr	s15, [r7, #28]
    return outgoing;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	ee07 3a90 	vmov	s15, r3
  }
 800273c:	eeb0 0a67 	vmov.f32	s0, s15
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <setPower>:

void setPower(float power_M1, float power_M2, float power_M3, float power_M4)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	ed87 0a03 	vstr	s0, [r7, #12]
 8002756:	edc7 0a02 	vstr	s1, [r7, #8]
 800275a:	ed87 1a01 	vstr	s2, [r7, #4]
 800275e:	edc7 1a00 	vstr	s3, [r7]
	M1_pwm = map(power_M1,min_speed,max_speed,min_pwm,max_pwm);
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <setPower+0x108>)
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <setPower+0x10c>)
 800276a:	ed93 7a00 	vldr	s14, [r3]
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <setPower+0x110>)
 8002770:	edd3 6a00 	vldr	s13, [r3]
 8002774:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <setPower+0x114>)
 8002776:	ed93 6a00 	vldr	s12, [r3]
 800277a:	eeb0 2a46 	vmov.f32	s4, s12
 800277e:	eef0 1a66 	vmov.f32	s3, s13
 8002782:	eeb0 1a47 	vmov.f32	s2, s14
 8002786:	eef0 0a67 	vmov.f32	s1, s15
 800278a:	ed97 0a03 	vldr	s0, [r7, #12]
 800278e:	f7ff ffa9 	bl	80026e4 <map>
 8002792:	eef0 7a40 	vmov.f32	s15, s0
 8002796:	4b33      	ldr	r3, [pc, #204]	; (8002864 <setPower+0x118>)
 8002798:	edc3 7a00 	vstr	s15, [r3]
	M2_pwm = map(power_M2,min_speed,max_speed,min_pwm,max_pwm);
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <setPower+0x108>)
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <setPower+0x10c>)
 80027a4:	ed93 7a00 	vldr	s14, [r3]
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <setPower+0x110>)
 80027aa:	edd3 6a00 	vldr	s13, [r3]
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <setPower+0x114>)
 80027b0:	ed93 6a00 	vldr	s12, [r3]
 80027b4:	eeb0 2a46 	vmov.f32	s4, s12
 80027b8:	eef0 1a66 	vmov.f32	s3, s13
 80027bc:	eeb0 1a47 	vmov.f32	s2, s14
 80027c0:	eef0 0a67 	vmov.f32	s1, s15
 80027c4:	ed97 0a02 	vldr	s0, [r7, #8]
 80027c8:	f7ff ff8c 	bl	80026e4 <map>
 80027cc:	eef0 7a40 	vmov.f32	s15, s0
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <setPower+0x11c>)
 80027d2:	edc3 7a00 	vstr	s15, [r3]
	M3_pwm = map(power_M3,min_speed,max_speed,min_pwm,max_pwm);
 80027d6:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <setPower+0x108>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <setPower+0x10c>)
 80027de:	ed93 7a00 	vldr	s14, [r3]
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <setPower+0x110>)
 80027e4:	edd3 6a00 	vldr	s13, [r3]
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <setPower+0x114>)
 80027ea:	ed93 6a00 	vldr	s12, [r3]
 80027ee:	eeb0 2a46 	vmov.f32	s4, s12
 80027f2:	eef0 1a66 	vmov.f32	s3, s13
 80027f6:	eeb0 1a47 	vmov.f32	s2, s14
 80027fa:	eef0 0a67 	vmov.f32	s1, s15
 80027fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002802:	f7ff ff6f 	bl	80026e4 <map>
 8002806:	eef0 7a40 	vmov.f32	s15, s0
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <setPower+0x120>)
 800280c:	edc3 7a00 	vstr	s15, [r3]
	M4_pwm = map(power_M4,min_speed,max_speed,min_pwm,max_pwm);
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <setPower+0x108>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <setPower+0x10c>)
 8002818:	ed93 7a00 	vldr	s14, [r3]
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <setPower+0x110>)
 800281e:	edd3 6a00 	vldr	s13, [r3]
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <setPower+0x114>)
 8002824:	ed93 6a00 	vldr	s12, [r3]
 8002828:	eeb0 2a46 	vmov.f32	s4, s12
 800282c:	eef0 1a66 	vmov.f32	s3, s13
 8002830:	eeb0 1a47 	vmov.f32	s2, s14
 8002834:	eef0 0a67 	vmov.f32	s1, s15
 8002838:	ed97 0a00 	vldr	s0, [r7]
 800283c:	f7ff ff52 	bl	80026e4 <map>
 8002840:	eef0 7a40 	vmov.f32	s15, s0
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <setPower+0x124>)
 8002846:	edc3 7a00 	vstr	s15, [r3]
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, M2_pwm);
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, M3_pwm);
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, M4_pwm);


}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000001c 	.word	0x2000001c
 8002858:	20000018 	.word	0x20000018
 800285c:	20000020 	.word	0x20000020
 8002860:	20000024 	.word	0x20000024
 8002864:	200005f0 	.word	0x200005f0
 8002868:	200005f4 	.word	0x200005f4
 800286c:	200005f8 	.word	0x200005f8
 8002870:	200005fc 	.word	0x200005fc

08002874 <Read_Encoder_Speed>:
	  HAL_UART_Receive(address_huart, rxBuff, 7,100);
	  return (int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
}

bool Read_Encoder_Speed(UART_HandleTypeDef* address_huart, uint8_t address_roboclaw, int motor, int32_t *speedMX_roboclaw)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	460b      	mov	r3, r1
 8002882:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd_motor;
	if (motor==1) cmd_motor=18;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <Read_Encoder_Speed+0x1c>
 800288a:	2312      	movs	r3, #18
 800288c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (motor==2) cmd_motor=19;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d102      	bne.n	800289c <Read_Encoder_Speed+0x28>
 8002896:	2313      	movs	r3, #19
 8002898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t txBuff[2]; // two bytes for address and cmd, two for value
	txBuff[0] = address_roboclaw; //first to write is address
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	f887 3020 	strb.w	r3, [r7, #32]
	txBuff[1] = cmd_motor; // second is cmd
 80028a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 100);
 80028aa:	f107 0120 	add.w	r1, r7, #32
 80028ae:	2364      	movs	r3, #100	; 0x64
 80028b0:	2202      	movs	r2, #2
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f004 fe2b 	bl	800750e <HAL_UART_Transmit>

	uint8_t rxBuff[7];
	HAL_UART_Receive(address_huart, rxBuff, 7,100);
 80028b8:	f107 0118 	add.w	r1, r7, #24
 80028bc:	2364      	movs	r3, #100	; 0x64
 80028be:	2207      	movs	r2, #7
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f004 feb6 	bl	8007632 <HAL_UART_Receive>
 80028c6:	8c3b      	ldrh	r3, [r7, #32]


	//CHECK THE CHK REGISTER-----------------
	uint8_t chk[7];
	memcpy(&chk[0],&txBuff[0],2);
 80028c8:	823b      	strh	r3, [r7, #16]
	memcpy(&chk[2],&rxBuff[0],5);
 80028ca:	f107 0118 	add.w	r1, r7, #24
 80028ce:	f107 0310 	add.w	r3, r7, #16
 80028d2:	3302      	adds	r3, #2
 80028d4:	2205      	movs	r2, #5
 80028d6:	4618      	mov	r0, r3
 80028d8:	f00a f90e 	bl	800caf8 <memcpy>
	uint16_t crc_tx= crc16((unsigned char *)chk,7);
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	2107      	movs	r1, #7
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fa0c 	bl	8002d00 <crc16>
 80028e8:	4603      	mov	r3, r0
 80028ea:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t crc_rx= (rxBuff[5]<<8 | rxBuff[6]);
 80028ec:	7f7b      	ldrb	r3, [r7, #29]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	7fbb      	ldrb	r3, [r7, #30]
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	847b      	strh	r3, [r7, #34]	; 0x22
	//---------------------------------------

	if(crc_tx==crc_rx){
 80028fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002900:	429a      	cmp	r2, r3
 8002902:	d10d      	bne.n	8002920 <Read_Encoder_Speed+0xac>
		*speedMX_roboclaw=(int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
 8002904:	7e3b      	ldrb	r3, [r7, #24]
 8002906:	061a      	lsls	r2, r3, #24
 8002908:	7e7b      	ldrb	r3, [r7, #25]
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	431a      	orrs	r2, r3
 800290e:	7ebb      	ldrb	r3, [r7, #26]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	4313      	orrs	r3, r2
 8002914:	7efa      	ldrb	r2, [r7, #27]
 8002916:	431a      	orrs	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]
		return true;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <Read_Encoder_Speed+0xae>
	}
	else{
		return false;
 8002920:	2300      	movs	r3, #0
	}
}
 8002922:	4618      	mov	r0, r3
 8002924:	3728      	adds	r7, #40	; 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <Read_Both_Encoder_Counts>:
	}

}


bool Read_Both_Encoder_Counts(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw, int32_t *countsM1_roboclaw, int32_t *countsM2_roboclaw){
 800292a:	b580      	push	{r7, lr}
 800292c:	b08c      	sub	sp, #48	; 0x30
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	460b      	mov	r3, r1
 8002938:	72fb      	strb	r3, [r7, #11]
	uint8_t txBuff[2]; // two bytes for address and cmd, two for value
	txBuff[0] = address_roboclaw; //first to write is address
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	txBuff[1] = (uint8_t)78; // second is cmd
 8002940:	234e      	movs	r3, #78	; 0x4e
 8002942:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 100);
 8002946:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800294a:	2364      	movs	r3, #100	; 0x64
 800294c:	2202      	movs	r2, #2
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f004 fddd 	bl	800750e <HAL_UART_Transmit>

	uint8_t rxBuff[10];
	HAL_UART_Receive(address_huart, rxBuff, 10,100);
 8002954:	f107 011c 	add.w	r1, r7, #28
 8002958:	2364      	movs	r3, #100	; 0x64
 800295a:	220a      	movs	r2, #10
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f004 fe68 	bl	8007632 <HAL_UART_Receive>
 8002962:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

	//CHECK THE CHK REGISTER-----------------
	uint8_t chk[10];
	memcpy(chk,txBuff,2);
 8002964:	823b      	strh	r3, [r7, #16]
	memcpy(chk+2,rxBuff,8);
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	3302      	adds	r3, #2
 800296c:	f107 011c 	add.w	r1, r7, #28
 8002970:	2208      	movs	r2, #8
 8002972:	4618      	mov	r0, r3
 8002974:	f00a f8c0 	bl	800caf8 <memcpy>
	uint16_t crc_tx= crc16((unsigned char *)chk,10);
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	210a      	movs	r1, #10
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f9be 	bl	8002d00 <crc16>
 8002984:	4603      	mov	r3, r0
 8002986:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t crc_rx= (rxBuff[8]<<8 | rxBuff[9]);
 8002988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	b21a      	sxth	r2, r3
 8002990:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002994:	b21b      	sxth	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	b21b      	sxth	r3, r3
 800299a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	//---------------------------------------

	if(crc_tx==crc_rx){
 800299c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800299e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d11d      	bne.n	80029e0 <Read_Both_Encoder_Counts+0xb6>
		*countsM1_roboclaw=(int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
 80029a4:	7f3b      	ldrb	r3, [r7, #28]
 80029a6:	061a      	lsls	r2, r3, #24
 80029a8:	7f7b      	ldrb	r3, [r7, #29]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	7fbb      	ldrb	r3, [r7, #30]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	4313      	orrs	r3, r2
 80029b4:	7ffa      	ldrb	r2, [r7, #31]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	601a      	str	r2, [r3, #0]
		*countsM2_roboclaw=(int32_t) ((uint32_t)((rxBuff[4] << 24) | (rxBuff[5] << 16) | (rxBuff[6] << 8) | rxBuff[7]));
 80029bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029c0:	061a      	lsls	r2, r3, #24
 80029c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029d6:	431a      	orrs	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	601a      	str	r2, [r3, #0]
		return true;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <Read_Both_Encoder_Counts+0xb8>
	}
	else{
		return false;
 80029e0:	2300      	movs	r3, #0
	}

}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3730      	adds	r7, #48	; 0x30
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <Drive_M1_M2_With_Signed_Speed>:
		for(int i=0;i<=7;i++){
			chk[i+2]=*(rxBuff_dir+i);
		}
*/

bool Drive_M1_M2_With_Signed_Speed(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw, int32_t SpeedM1, int32_t SpeedM2){
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08a      	sub	sp, #40	; 0x28
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	460b      	mov	r3, r1
 80029f8:	72fb      	strb	r3, [r7, #11]

	  uint8_t txBuff[12];
	  txBuff[0] = address_roboclaw;
 80029fa:	7afb      	ldrb	r3, [r7, #11]
 80029fc:	763b      	strb	r3, [r7, #24]
	  txBuff[1] = (uint8_t)37;
 80029fe:	2325      	movs	r3, #37	; 0x25
 8002a00:	767b      	strb	r3, [r7, #25]
	  txBuff[2] = SpeedM1>>24;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	161b      	asrs	r3, r3, #24
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	76bb      	strb	r3, [r7, #26]
	  txBuff[3] = SpeedM1>>16;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	141b      	asrs	r3, r3, #16
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	76fb      	strb	r3, [r7, #27]
	  txBuff[4] = SpeedM1>>8;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	121b      	asrs	r3, r3, #8
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	773b      	strb	r3, [r7, #28]
	  txBuff[5] = SpeedM1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	777b      	strb	r3, [r7, #29]

	  txBuff[6] = SpeedM2>>24;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	161b      	asrs	r3, r3, #24
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	77bb      	strb	r3, [r7, #30]
	  txBuff[7] = SpeedM2>>16;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	141b      	asrs	r3, r3, #16
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	77fb      	strb	r3, [r7, #31]
	  txBuff[8] = SpeedM2>>8;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	121b      	asrs	r3, r3, #8
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f887 3020 	strb.w	r3, [r7, #32]
	  txBuff[9] = SpeedM2;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  uint16_t crc_chk = crc16(txBuff, 10);
 8002a42:	f107 0318 	add.w	r3, r7, #24
 8002a46:	210a      	movs	r1, #10
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f959 	bl	8002d00 <crc16>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	84fb      	strh	r3, [r7, #38]	; 0x26
  	  txBuff[10] = crc_chk >> 8; // high value byte
 8002a52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  	  txBuff[11] = crc_chk; // low value byte
 8002a5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   	  HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 10);
 8002a66:	f107 0118 	add.w	r1, r7, #24
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	220c      	movs	r2, #12
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f004 fd4d 	bl	800750e <HAL_UART_Transmit>

   	  uint8_t rxBuff[1];
   	  HAL_UART_Receive(address_huart, rxBuff, 1,10);
 8002a74:	f107 0114 	add.w	r1, r7, #20
 8002a78:	230a      	movs	r3, #10
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f004 fdd8 	bl	8007632 <HAL_UART_Receive>

   	  if(rxBuff[0]==(uint8_t)255){
 8002a82:	7d3b      	ldrb	r3, [r7, #20]
 8002a84:	2bff      	cmp	r3, #255	; 0xff
 8002a86:	d101      	bne.n	8002a8c <Drive_M1_M2_With_Signed_Speed+0xa2>
   		  return true;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <Drive_M1_M2_With_Signed_Speed+0xa4>
   	  }
   	  else{
   		  return false;
 8002a8c:	2300      	movs	r3, #0
   	  }

}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3728      	adds	r7, #40	; 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <Set_Max_Motor_Current>:

bool Set_Max_Motor_Current(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw, int motor, int32_t max_current_value){
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b08a      	sub	sp, #40	; 0x28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	72fb      	strb	r3, [r7, #11]

	  uint8_t cmd_motor;
	  if (motor==1) cmd_motor=133;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <Set_Max_Motor_Current+0x1c>
 8002aac:	2385      	movs	r3, #133	; 0x85
 8002aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if (motor==2) cmd_motor=134;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d102      	bne.n	8002abe <Set_Max_Motor_Current+0x28>
 8002ab8:	2386      	movs	r3, #134	; 0x86
 8002aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  uint8_t txBuff[12];
	  txBuff[0] = address_roboclaw;
 8002abe:	7afb      	ldrb	r3, [r7, #11]
 8002ac0:	763b      	strb	r3, [r7, #24]
	  txBuff[1] = (uint8_t)cmd_motor;
 8002ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ac6:	767b      	strb	r3, [r7, #25]
	  txBuff[2] = max_current_value>>24;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	161b      	asrs	r3, r3, #24
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	76bb      	strb	r3, [r7, #26]
	  txBuff[3] = max_current_value>>16;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	141b      	asrs	r3, r3, #16
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	76fb      	strb	r3, [r7, #27]
	  txBuff[4] = max_current_value>>8;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	121b      	asrs	r3, r3, #8
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	773b      	strb	r3, [r7, #28]
	  txBuff[5] = max_current_value;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	777b      	strb	r3, [r7, #29]

	  txBuff[6] = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	77bb      	strb	r3, [r7, #30]
	  txBuff[7] = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	77fb      	strb	r3, [r7, #31]
	  txBuff[8] = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 3020 	strb.w	r3, [r7, #32]
	  txBuff[9] = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  uint16_t crc_chk = crc16(txBuff, 10);
 8002afa:	f107 0318 	add.w	r3, r7, #24
 8002afe:	210a      	movs	r1, #10
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f8fd 	bl	8002d00 <crc16>
 8002b06:	4603      	mov	r3, r0
 8002b08:	84bb      	strh	r3, [r7, #36]	; 0x24
  	  txBuff[10] = crc_chk >> 8; // high value byte
 8002b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  	  txBuff[11] = crc_chk; // low value byte
 8002b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   	  HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 10);
 8002b1e:	f107 0118 	add.w	r1, r7, #24
 8002b22:	230a      	movs	r3, #10
 8002b24:	220c      	movs	r2, #12
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f004 fcf1 	bl	800750e <HAL_UART_Transmit>

   	  uint8_t rxBuff=0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	75fb      	strb	r3, [r7, #23]
   	  HAL_UART_Receive(address_huart, &rxBuff, 1,10);
 8002b30:	f107 0117 	add.w	r1, r7, #23
 8002b34:	230a      	movs	r3, #10
 8002b36:	2201      	movs	r2, #1
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f004 fd7a 	bl	8007632 <HAL_UART_Receive>

   	  if(rxBuff==(uint8_t)255){
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2bff      	cmp	r3, #255	; 0xff
 8002b42:	d101      	bne.n	8002b48 <Set_Max_Motor_Current+0xb2>
   		  return true;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <Set_Max_Motor_Current+0xb4>
   	  }
   	  else{
   		  return false;
 8002b48:	2300      	movs	r3, #0
   	  }

}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <Reset_Encoder_Counters>:
		return false;
	}

}

bool Reset_Encoder_Counters(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw){
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70fb      	strb	r3, [r7, #3]
	  uint8_t txBuff[4];
	  txBuff[0] = address_roboclaw;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	743b      	strb	r3, [r7, #16]
	  txBuff[1] = (uint8_t)20;
 8002b62:	2314      	movs	r3, #20
 8002b64:	747b      	strb	r3, [r7, #17]


	  uint16_t crc_chk = crc16(txBuff, 2);
 8002b66:	f107 0310 	add.w	r3, r7, #16
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f8c7 	bl	8002d00 <crc16>
 8002b72:	4603      	mov	r3, r0
 8002b74:	82fb      	strh	r3, [r7, #22]
	  txBuff[2] = crc_chk >> 8; // high value byte
 8002b76:	8afb      	ldrh	r3, [r7, #22]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	74bb      	strb	r3, [r7, #18]
	  txBuff[3] = crc_chk; // low value byte
 8002b80:	8afb      	ldrh	r3, [r7, #22]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	74fb      	strb	r3, [r7, #19]
 	  HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 10);
 8002b86:	f107 0110 	add.w	r1, r7, #16
 8002b8a:	230a      	movs	r3, #10
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f004 fcbd 	bl	800750e <HAL_UART_Transmit>

 	  uint8_t rxBuff[1];
 	  HAL_UART_Receive(address_huart, rxBuff, 1,10);
 8002b94:	f107 010c 	add.w	r1, r7, #12
 8002b98:	230a      	movs	r3, #10
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f004 fd48 	bl	8007632 <HAL_UART_Receive>

 	  if(rxBuff[0]==(uint8_t)255){
 8002ba2:	7b3b      	ldrb	r3, [r7, #12]
 8002ba4:	2bff      	cmp	r3, #255	; 0xff
 8002ba6:	d101      	bne.n	8002bac <Reset_Encoder_Counters+0x5a>
 		  return true;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <Reset_Encoder_Counters+0x5c>
 	  }
 	  else{
 		  return false;
 8002bac:	2300      	movs	r3, #0
 	  }

}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <roboclaw1_init>:

bool roboclaw1_init(UART_HandleTypeDef* address_huart_roboclaw,uint8_t address_roboclaw){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
		flag_status_register_rw1[0]=0;
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <roboclaw1_init+0xa0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
		flag_status_register_rw1[1]=0;
 8002bca:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <roboclaw1_init+0xa0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	605a      	str	r2, [r3, #4]
		flag_status_register_rw1[2]=0;
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <roboclaw1_init+0xa0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
		flag_status_register_rw1[3]=0;
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <roboclaw1_init+0xa0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]
		flag_status_register_rw1[4]=0;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <roboclaw1_init+0xa0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
		flag_status_register_rw1[5]=0;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <roboclaw1_init+0xa0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]
		flag_status_register_rw1[6]=0;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <roboclaw1_init+0xa0>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	619a      	str	r2, [r3, #24]

	  	bool set_1=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,1,3000);
 8002bee:	78f9      	ldrb	r1, [r7, #3]
 8002bf0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff4d 	bl	8002a96 <Set_Max_Motor_Current>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	73fb      	strb	r3, [r7, #15]
	  	bool set_2=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,2,3000);
 8002c00:	78f9      	ldrb	r1, [r7, #3]
 8002c02:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002c06:	2202      	movs	r2, #2
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff44 	bl	8002a96 <Set_Max_Motor_Current>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73bb      	strb	r3, [r7, #14]
	  	bool set_3=Drive_M1_M2_With_Signed_Speed(address_huart_roboclaw,(uint8_t)address_roboclaw, 0, 0);
 8002c12:	78f9      	ldrb	r1, [r7, #3]
 8002c14:	2300      	movs	r3, #0
 8002c16:	2200      	movs	r2, #0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fee6 	bl	80029ea <Drive_M1_M2_With_Signed_Speed>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	737b      	strb	r3, [r7, #13]
	  	bool set_4=Reset_Encoder_Counters(address_huart_roboclaw,(uint8_t)address_roboclaw);
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ff93 	bl	8002b52 <Reset_Encoder_Counters>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	733b      	strb	r3, [r7, #12]

	  	if((set_1*set_2*set_3*set_4)==true){
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	7bba      	ldrb	r2, [r7, #14]
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	7b7a      	ldrb	r2, [r7, #13]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	7b3a      	ldrb	r2, [r7, #12]
 8002c40:	fb02 f303 	mul.w	r3, r2, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <roboclaw1_init+0x94>
	  	   		  return true;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <roboclaw1_init+0x96>
	  	}
	  	else{
	  		return false;
 8002c4c:	2300      	movs	r3, #0
	  	}

}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000658 	.word	0x20000658

08002c5c <roboclaw2_init>:
bool roboclaw2_init(UART_HandleTypeDef* address_huart_roboclaw,uint8_t address_roboclaw){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
		flag_status_register_rw2[0]=0;
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <roboclaw2_init+0xa0>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
		flag_status_register_rw2[1]=0;
 8002c6e:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <roboclaw2_init+0xa0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
		flag_status_register_rw2[2]=0;
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <roboclaw2_init+0xa0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
		flag_status_register_rw2[3]=0;
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <roboclaw2_init+0xa0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
		flag_status_register_rw2[4]=0;
 8002c80:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <roboclaw2_init+0xa0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
		flag_status_register_rw2[5]=0;
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <roboclaw2_init+0xa0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	615a      	str	r2, [r3, #20]
		flag_status_register_rw2[6]=0;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <roboclaw2_init+0xa0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]

	  	bool set_1=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,1,3000);
 8002c92:	78f9      	ldrb	r1, [r7, #3]
 8002c94:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002c98:	2201      	movs	r2, #1
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fefb 	bl	8002a96 <Set_Max_Motor_Current>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]
	  	bool set_2=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,2,3000);
 8002ca4:	78f9      	ldrb	r1, [r7, #3]
 8002ca6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002caa:	2202      	movs	r2, #2
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fef2 	bl	8002a96 <Set_Max_Motor_Current>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73bb      	strb	r3, [r7, #14]
	  	bool set_3=Drive_M1_M2_With_Signed_Speed(address_huart_roboclaw,(uint8_t)address_roboclaw, 0, 0);
 8002cb6:	78f9      	ldrb	r1, [r7, #3]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2200      	movs	r2, #0
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fe94 	bl	80029ea <Drive_M1_M2_With_Signed_Speed>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	737b      	strb	r3, [r7, #13]
	  	bool set_4=Reset_Encoder_Counters(address_huart_roboclaw,(uint8_t)address_roboclaw);
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ff41 	bl	8002b52 <Reset_Encoder_Counters>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	733b      	strb	r3, [r7, #12]

	  	if((set_1*set_2*set_3*set_4)==true){
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	7bba      	ldrb	r2, [r7, #14]
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	7b7a      	ldrb	r2, [r7, #13]
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	7b3a      	ldrb	r2, [r7, #12]
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <roboclaw2_init+0x94>
	  	   		  return true;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <roboclaw2_init+0x96>
	  	}
	  	else{
	  		return false;
 8002cf0:	2300      	movs	r3, #0
	  	}

}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000063c 	.word	0x2000063c

08002d00 <crc16>:

uint16_t crc16(unsigned char *packet, int nBytes) {
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint16_t crc=0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	82fb      	strh	r3, [r7, #22]
  for (int byte = 0; byte < nBytes; byte++) {
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e026      	b.n	8002d62 <crc16+0x62>
    crc = crc ^ ((unsigned int)packet[byte] << 8);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	8afb      	ldrh	r3, [r7, #22]
 8002d24:	4053      	eors	r3, r2
 8002d26:	82fb      	strh	r3, [r7, #22]
    for (unsigned char bit = 0; bit < 8; bit++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e013      	b.n	8002d56 <crc16+0x56>
      if (crc & 0x8000) {
 8002d2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	da09      	bge.n	8002d4a <crc16+0x4a>
        crc = (crc << 1) ^ 0x1021;
 8002d36:	8afb      	ldrh	r3, [r7, #22]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	b21b      	sxth	r3, r3
 8002d3c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	82fb      	strh	r3, [r7, #22]
 8002d48:	e002      	b.n	8002d50 <crc16+0x50>
      } else {
        crc = crc << 1;
 8002d4a:	8afb      	ldrh	r3, [r7, #22]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	82fb      	strh	r3, [r7, #22]
    for (unsigned char bit = 0; bit < 8; bit++) {
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	3301      	adds	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b07      	cmp	r3, #7
 8002d5a:	d9e8      	bls.n	8002d2e <crc16+0x2e>
  for (int byte = 0; byte < nBytes; byte++) {
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	dbd4      	blt.n	8002d14 <crc16+0x14>
      }
    }
  }
  return crc;
 8002d6a:	8afb      	ldrh	r3, [r7, #22]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7c:	b672      	cpsid	i
}
 8002d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <Error_Handler+0x8>
	...

08002d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_MspInit+0x4c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <HAL_ADC_MspInit+0x7c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d127      	bne.n	8002e46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <HAL_ADC_MspInit+0x80>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <HAL_ADC_MspInit+0x80>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_ADC_MspInit+0x80>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <HAL_ADC_MspInit+0x80>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_ADC_MspInit+0x80>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <HAL_ADC_MspInit+0x80>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e2e:	2310      	movs	r3, #16
 8002e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e32:	2303      	movs	r3, #3
 8002e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4805      	ldr	r0, [pc, #20]	; (8002e58 <HAL_ADC_MspInit+0x84>)
 8002e42:	f000 ffaf 	bl	8003da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e46:	bf00      	nop
 8002e48:	3728      	adds	r7, #40	; 0x28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40012000 	.word	0x40012000
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020000 	.word	0x40020000

08002e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_I2C_MspInit+0x84>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d12b      	bne.n	8002ed6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e9a:	23c0      	movs	r3, #192	; 0xc0
 8002e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9e:	2312      	movs	r3, #18
 8002ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <HAL_I2C_MspInit+0x8c>)
 8002eb6:	f000 ff75 	bl	8003da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ed6:	bf00      	nop
 8002ed8:	3728      	adds	r7, #40	; 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40005400 	.word	0x40005400
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020400 	.word	0x40020400

08002eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d134      	bne.n	8002f78 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_TIM_Base_MspInit+0x94>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_TIM_Base_MspInit+0x94>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_TIM_Base_MspInit+0x94>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_TIM_Base_MspInit+0x94>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <HAL_TIM_Base_MspInit+0x94>)
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_TIM_Base_MspInit+0x94>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4619      	mov	r1, r3
 8002f62:	4808      	ldr	r0, [pc, #32]	; (8002f84 <HAL_TIM_Base_MspInit+0x98>)
 8002f64:	f000 ff1e 	bl	8003da4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	201c      	movs	r0, #28
 8002f6e:	f000 fe50 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f72:	201c      	movs	r0, #28
 8002f74:	f000 fe69 	bl	8003c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f78:	bf00      	nop
 8002f7a:	3728      	adds	r7, #40	; 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020400 	.word	0x40020400

08002f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08e      	sub	sp, #56	; 0x38
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a66      	ldr	r2, [pc, #408]	; (8003140 <HAL_UART_MspInit+0x1b8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d134      	bne.n	8003014 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	4b65      	ldr	r3, [pc, #404]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a64      	ldr	r2, [pc, #400]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b62      	ldr	r3, [pc, #392]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	4b5e      	ldr	r3, [pc, #376]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a5d      	ldr	r2, [pc, #372]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4852      	ldr	r0, [pc, #328]	; (8003148 <HAL_UART_MspInit+0x1c0>)
 8002ffe:	f000 fed1 	bl	8003da4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	2026      	movs	r0, #38	; 0x26
 8003008:	f000 fe03 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800300c:	2026      	movs	r0, #38	; 0x26
 800300e:	f000 fe1c 	bl	8003c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003012:	e091      	b.n	8003138 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_UART_MspInit+0x1c4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d153      	bne.n	80030c6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	4a47      	ldr	r2, [pc, #284]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6413      	str	r3, [r2, #64]	; 0x40
 800302e:	4b45      	ldr	r3, [pc, #276]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a40      	ldr	r2, [pc, #256]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a39      	ldr	r2, [pc, #228]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8003060:	f043 0308 	orr.w	r3, r3, #8
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003072:	2320      	movs	r3, #32
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003082:	2307      	movs	r3, #7
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308a:	4619      	mov	r1, r3
 800308c:	4830      	ldr	r0, [pc, #192]	; (8003150 <HAL_UART_MspInit+0x1c8>)
 800308e:	f000 fe89 	bl	8003da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a0:	2303      	movs	r3, #3
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030a4:	2307      	movs	r3, #7
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ac:	4619      	mov	r1, r3
 80030ae:	4829      	ldr	r0, [pc, #164]	; (8003154 <HAL_UART_MspInit+0x1cc>)
 80030b0:	f000 fe78 	bl	8003da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030b4:	2200      	movs	r2, #0
 80030b6:	2100      	movs	r1, #0
 80030b8:	2027      	movs	r0, #39	; 0x27
 80030ba:	f000 fdaa 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030be:	2027      	movs	r0, #39	; 0x27
 80030c0:	f000 fdc3 	bl	8003c4a <HAL_NVIC_EnableIRQ>
}
 80030c4:	e038      	b.n	8003138 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a23      	ldr	r2, [pc, #140]	; (8003158 <HAL_UART_MspInit+0x1d0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d133      	bne.n	8003138 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	6453      	str	r3, [r2, #68]	; 0x44
 80030e0:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4a13      	ldr	r2, [pc, #76]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	6313      	str	r3, [r2, #48]	; 0x30
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_UART_MspInit+0x1bc>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003108:	23c0      	movs	r3, #192	; 0xc0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003118:	2308      	movs	r3, #8
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003120:	4619      	mov	r1, r3
 8003122:	480b      	ldr	r0, [pc, #44]	; (8003150 <HAL_UART_MspInit+0x1c8>)
 8003124:	f000 fe3e 	bl	8003da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	2047      	movs	r0, #71	; 0x47
 800312e:	f000 fd70 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003132:	2047      	movs	r0, #71	; 0x47
 8003134:	f000 fd89 	bl	8003c4a <HAL_NVIC_EnableIRQ>
}
 8003138:	bf00      	nop
 800313a:	3738      	adds	r7, #56	; 0x38
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40004400 	.word	0x40004400
 8003144:	40023800 	.word	0x40023800
 8003148:	40020000 	.word	0x40020000
 800314c:	40004800 	.word	0x40004800
 8003150:	40020800 	.word	0x40020800
 8003154:	40020c00 	.word	0x40020c00
 8003158:	40011400 	.word	0x40011400

0800315c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003160:	e7fe      	b.n	8003160 <NMI_Handler+0x4>

08003162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <HardFault_Handler+0x4>

08003168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800316c:	e7fe      	b.n	800316c <MemManage_Handler+0x4>

0800316e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003172:	e7fe      	b.n	8003172 <BusFault_Handler+0x4>

08003174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003178:	e7fe      	b.n	8003178 <UsageFault_Handler+0x4>

0800317a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <SysTick_Handler+0x38>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <SysTick_Handler+0x38>)
 80031b0:	6013      	str	r3, [r2, #0]
	if(indx==sampling_time){
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <SysTick_Handler+0x38>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <SysTick_Handler+0x3c>)
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	d102      	bne.n	80031d4 <SysTick_Handler+0x30>

		indx=0;
 80031ce:	4b03      	ldr	r3, [pc, #12]	; (80031dc <SysTick_Handler+0x38>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d4:	f000 f98c 	bl	80034f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200006d0 	.word	0x200006d0
 80031e0:	20000008 	.word	0x20000008

080031e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <TIM2_IRQHandler+0x10>)
 80031ea:	f003 fd81 	bl	8006cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000430 	.word	0x20000430

080031f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <USART2_IRQHandler+0x10>)
 80031fe:	f004 faeb 	bl	80077d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000478 	.word	0x20000478

0800320c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <USART3_IRQHandler+0x10>)
 8003212:	f004 fae1 	bl	80077d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200004bc 	.word	0x200004bc

08003220 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <OTG_FS_IRQHandler+0x10>)
 8003226:	f001 fa1e 	bl	8004666 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20001bbc 	.word	0x20001bbc

08003234 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <USART6_IRQHandler+0x10>)
 800323a:	f004 facd 	bl	80077d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000500 	.word	0x20000500

08003248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
	return 1;
 800324c:	2301      	movs	r3, #1
}
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <_kill>:

int _kill(int pid, int sig)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003262:	f009 fc1f 	bl	800caa4 <__errno>
 8003266:	4603      	mov	r3, r0
 8003268:	2216      	movs	r2, #22
 800326a:	601a      	str	r2, [r3, #0]
	return -1;
 800326c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_exit>:

void _exit (int status)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff ffe7 	bl	8003258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800328a:	e7fe      	b.n	800328a <_exit+0x12>

0800328c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e00a      	b.n	80032b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800329e:	f3af 8000 	nop.w
 80032a2:	4601      	mov	r1, r0
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	60ba      	str	r2, [r7, #8]
 80032aa:	b2ca      	uxtb	r2, r1
 80032ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3301      	adds	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dbf0      	blt.n	800329e <_read+0x12>
	}

return len;
 80032bc:	687b      	ldr	r3, [r7, #4]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e009      	b.n	80032ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	60ba      	str	r2, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	3301      	adds	r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dbf1      	blt.n	80032d8 <_write+0x12>
	}
	return len;
 80032f4:	687b      	ldr	r3, [r7, #4]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <_close>:

int _close(int file)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
	return -1;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003326:	605a      	str	r2, [r3, #4]
	return 0;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <_isatty>:

int _isatty(int file)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
	return 1;
 800333e:	2301      	movs	r3, #1
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
	return 0;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003370:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <_sbrk+0x5c>)
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <_sbrk+0x60>)
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <_sbrk+0x64>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <_sbrk+0x64>)
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <_sbrk+0x68>)
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <_sbrk+0x64>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	429a      	cmp	r2, r3
 8003396:	d207      	bcs.n	80033a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003398:	f009 fb84 	bl	800caa4 <__errno>
 800339c:	4603      	mov	r3, r0
 800339e:	220c      	movs	r2, #12
 80033a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a6:	e009      	b.n	80033bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <_sbrk+0x64>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <_sbrk+0x64>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	4a05      	ldr	r2, [pc, #20]	; (80033cc <_sbrk+0x64>)
 80033b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ba:	68fb      	ldr	r3, [r7, #12]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20020000 	.word	0x20020000
 80033c8:	00000400 	.word	0x00000400
 80033cc:	200006d4 	.word	0x200006d4
 80033d0:	200022f8 	.word	0x200022f8

080033d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <SystemInit+0x20>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <SystemInit+0x20>)
 80033e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033fc:	480d      	ldr	r0, [pc, #52]	; (8003434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033fe:	490e      	ldr	r1, [pc, #56]	; (8003438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003414:	4c0b      	ldr	r4, [pc, #44]	; (8003444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003422:	f7ff ffd7 	bl	80033d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003426:	f009 fb43 	bl	800cab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800342a:	f7fd fefb 	bl	8001224 <main>
  bx  lr    
 800342e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003438:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 800343c:	08010cb8 	.word	0x08010cb8
  ldr r2, =_sbss
 8003440:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8003444:	200022f8 	.word	0x200022f8

08003448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003448:	e7fe      	b.n	8003448 <ADC_IRQHandler>
	...

0800344c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_Init+0x40>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0d      	ldr	r2, [pc, #52]	; (800348c <HAL_Init+0x40>)
 8003456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800345a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_Init+0x40>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_Init+0x40>)
 8003462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_Init+0x40>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_Init+0x40>)
 800346e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003474:	2003      	movs	r0, #3
 8003476:	f000 fbc1 	bl	8003bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800347a:	2000      	movs	r0, #0
 800347c:	f000 f808 	bl	8003490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003480:	f7ff fc80 	bl	8002d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023c00 	.word	0x40023c00

08003490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_InitTick+0x54>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_InitTick+0x58>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fbd9 	bl	8003c66 <HAL_SYSTICK_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00e      	b.n	80034dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d80a      	bhi.n	80034da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c4:	2200      	movs	r2, #0
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034cc:	f000 fba1 	bl	8003c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034d0:	4a06      	ldr	r2, [pc, #24]	; (80034ec <HAL_InitTick+0x5c>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e000      	b.n	80034dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000028 	.word	0x20000028
 80034e8:	20000030 	.word	0x20000030
 80034ec:	2000002c 	.word	0x2000002c

080034f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_IncTick+0x20>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_IncTick+0x24>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <HAL_IncTick+0x24>)
 8003502:	6013      	str	r3, [r2, #0]
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000030 	.word	0x20000030
 8003514:	200006d8 	.word	0x200006d8

08003518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return uwTick;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_GetTick+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200006d8 	.word	0x200006d8

08003530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff ffee 	bl	8003518 <HAL_GetTick>
 800353c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003548:	d005      	beq.n	8003556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_Delay+0x44>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003556:	bf00      	nop
 8003558:	f7ff ffde 	bl	8003518 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	429a      	cmp	r2, r3
 8003566:	d8f7      	bhi.n	8003558 <HAL_Delay+0x28>
  {
  }
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000030 	.word	0x20000030

08003578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e033      	b.n	80035f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fc1c 	bl	8002dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d118      	bne.n	80035e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035be:	f023 0302 	bic.w	r3, r3, #2
 80035c2:	f043 0202 	orr.w	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f94a 	bl	8003864 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
 80035e6:	e001      	b.n	80035ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_ADC_ConfigChannel+0x1c>
 8003618:	2302      	movs	r3, #2
 800361a:	e113      	b.n	8003844 <HAL_ADC_ConfigChannel+0x244>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b09      	cmp	r3, #9
 800362a:	d925      	bls.n	8003678 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68d9      	ldr	r1, [r3, #12]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	3b1e      	subs	r3, #30
 8003642:	2207      	movs	r2, #7
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43da      	mvns	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	400a      	ands	r2, r1
 8003650:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	4618      	mov	r0, r3
 8003664:	4603      	mov	r3, r0
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4403      	add	r3, r0
 800366a:	3b1e      	subs	r3, #30
 800366c:	409a      	lsls	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	e022      	b.n	80036be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6919      	ldr	r1, [r3, #16]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	2207      	movs	r2, #7
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	400a      	ands	r2, r1
 800369a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6919      	ldr	r1, [r3, #16]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4403      	add	r3, r0
 80036b4:	409a      	lsls	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d824      	bhi.n	8003710 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	3b05      	subs	r3, #5
 80036d8:	221f      	movs	r2, #31
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	400a      	ands	r2, r1
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4618      	mov	r0, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	3b05      	subs	r3, #5
 8003702:	fa00 f203 	lsl.w	r2, r0, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	635a      	str	r2, [r3, #52]	; 0x34
 800370e:	e04c      	b.n	80037aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d824      	bhi.n	8003762 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	3b23      	subs	r3, #35	; 0x23
 800372a:	221f      	movs	r2, #31
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43da      	mvns	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	400a      	ands	r2, r1
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	4618      	mov	r0, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	3b23      	subs	r3, #35	; 0x23
 8003754:	fa00 f203 	lsl.w	r2, r0, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
 8003760:	e023      	b.n	80037aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	3b41      	subs	r3, #65	; 0x41
 8003774:	221f      	movs	r2, #31
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	400a      	ands	r2, r1
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	3b41      	subs	r3, #65	; 0x41
 800379e:	fa00 f203 	lsl.w	r2, r0, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037aa:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_ADC_ConfigChannel+0x250>)
 80037ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a28      	ldr	r2, [pc, #160]	; (8003854 <HAL_ADC_ConfigChannel+0x254>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10f      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x1d8>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b12      	cmp	r3, #18
 80037be:	d10b      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <HAL_ADC_ConfigChannel+0x254>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d12b      	bne.n	800383a <HAL_ADC_ConfigChannel+0x23a>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_ADC_ConfigChannel+0x258>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <HAL_ADC_ConfigChannel+0x1f4>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b11      	cmp	r3, #17
 80037f2:	d122      	bne.n	800383a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a11      	ldr	r2, [pc, #68]	; (8003858 <HAL_ADC_ConfigChannel+0x258>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d111      	bne.n	800383a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_ADC_ConfigChannel+0x25c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a11      	ldr	r2, [pc, #68]	; (8003860 <HAL_ADC_ConfigChannel+0x260>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	0c9a      	lsrs	r2, r3, #18
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800382c:	e002      	b.n	8003834 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3b01      	subs	r3, #1
 8003832:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f9      	bne.n	800382e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40012300 	.word	0x40012300
 8003854:	40012000 	.word	0x40012000
 8003858:	10000012 	.word	0x10000012
 800385c:	20000028 	.word	0x20000028
 8003860:	431bde83 	.word	0x431bde83

08003864 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800386c:	4b79      	ldr	r3, [pc, #484]	; (8003a54 <ADC_Init+0x1f0>)
 800386e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <ADC_Init+0x1f4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800390a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800392c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6899      	ldr	r1, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	e00f      	b.n	8003962 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003960:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0202 	bic.w	r2, r2, #2
 8003970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6899      	ldr	r1, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7e1b      	ldrb	r3, [r3, #24]
 800397c:	005a      	lsls	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01b      	beq.n	80039c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	3b01      	subs	r3, #1
 80039bc:	035a      	lsls	r2, r3, #13
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	e007      	b.n	80039d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	051a      	lsls	r2, r3, #20
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6899      	ldr	r1, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a1a:	025a      	lsls	r2, r3, #9
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6899      	ldr	r1, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	029a      	lsls	r2, r3, #10
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40012300 	.word	0x40012300
 8003a58:	0f000001 	.word	0x0f000001

08003a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8e:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	60d3      	str	r3, [r2, #12]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <__NVIC_GetPriorityGrouping+0x18>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 0307 	and.w	r3, r3, #7
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	db0b      	blt.n	8003aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	f003 021f 	and.w	r2, r3, #31
 8003ad8:	4907      	ldr	r1, [pc, #28]	; (8003af8 <__NVIC_EnableIRQ+0x38>)
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000e100 	.word	0xe000e100

08003afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	db0a      	blt.n	8003b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	490c      	ldr	r1, [pc, #48]	; (8003b48 <__NVIC_SetPriority+0x4c>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	0112      	lsls	r2, r2, #4
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b24:	e00a      	b.n	8003b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4908      	ldr	r1, [pc, #32]	; (8003b4c <__NVIC_SetPriority+0x50>)
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	3b04      	subs	r3, #4
 8003b34:	0112      	lsls	r2, r2, #4
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	440b      	add	r3, r1
 8003b3a:	761a      	strb	r2, [r3, #24]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000e100 	.word	0xe000e100
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	; 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f1c3 0307 	rsb	r3, r3, #7
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	bf28      	it	cs
 8003b6e:	2304      	movcs	r3, #4
 8003b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3304      	adds	r3, #4
 8003b76:	2b06      	cmp	r3, #6
 8003b78:	d902      	bls.n	8003b80 <NVIC_EncodePriority+0x30>
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3b03      	subs	r3, #3
 8003b7e:	e000      	b.n	8003b82 <NVIC_EncodePriority+0x32>
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	401a      	ands	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	43d9      	mvns	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	4313      	orrs	r3, r2
         );
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3724      	adds	r7, #36	; 0x24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc8:	d301      	bcc.n	8003bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e00f      	b.n	8003bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <SysTick_Config+0x40>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bd6:	210f      	movs	r1, #15
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bdc:	f7ff ff8e 	bl	8003afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <SysTick_Config+0x40>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <SysTick_Config+0x40>)
 8003be8:	2207      	movs	r2, #7
 8003bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	e000e010 	.word	0xe000e010

08003bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff29 	bl	8003a5c <__NVIC_SetPriorityGrouping>
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c24:	f7ff ff3e 	bl	8003aa4 <__NVIC_GetPriorityGrouping>
 8003c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	6978      	ldr	r0, [r7, #20]
 8003c30:	f7ff ff8e 	bl	8003b50 <NVIC_EncodePriority>
 8003c34:	4602      	mov	r2, r0
 8003c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff5d 	bl	8003afc <__NVIC_SetPriority>
}
 8003c42:	bf00      	nop
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4603      	mov	r3, r0
 8003c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ff31 	bl	8003ac0 <__NVIC_EnableIRQ>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffa2 	bl	8003bb8 <SysTick_Config>
 8003c74:	4603      	mov	r3, r0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c8c:	f7ff fc44 	bl	8003518 <HAL_GetTick>
 8003c90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d008      	beq.n	8003cb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e052      	b.n	8003d56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0216 	bic.w	r2, r2, #22
 8003cbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_DMA_Abort+0x62>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0208 	bic.w	r2, r2, #8
 8003cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d00:	e013      	b.n	8003d2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d02:	f7ff fc09 	bl	8003518 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d90c      	bls.n	8003d2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e015      	b.n	8003d56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e4      	bne.n	8003d02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	223f      	movs	r2, #63	; 0x3f
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2280      	movs	r2, #128	; 0x80
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e00c      	b.n	8003d96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	e165      	b.n	800408c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	f040 8154 	bne.w	8004086 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d005      	beq.n	8003df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d130      	bne.n	8003e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 0201 	and.w	r2, r3, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d017      	beq.n	8003e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	2203      	movs	r2, #3
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d123      	bne.n	8003ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	08da      	lsrs	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3208      	adds	r2, #8
 8003ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	220f      	movs	r2, #15
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	69b9      	ldr	r1, [r7, #24]
 8003ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0203 	and.w	r2, r3, #3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80ae 	beq.w	8004086 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	4a5c      	ldr	r2, [pc, #368]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f38:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3a:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f46:	4a58      	ldr	r2, [pc, #352]	; (80040a8 <HAL_GPIO_Init+0x304>)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a4f      	ldr	r2, [pc, #316]	; (80040ac <HAL_GPIO_Init+0x308>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d025      	beq.n	8003fbe <HAL_GPIO_Init+0x21a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a4e      	ldr	r2, [pc, #312]	; (80040b0 <HAL_GPIO_Init+0x30c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <HAL_GPIO_Init+0x216>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4d      	ldr	r2, [pc, #308]	; (80040b4 <HAL_GPIO_Init+0x310>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d019      	beq.n	8003fb6 <HAL_GPIO_Init+0x212>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a4c      	ldr	r2, [pc, #304]	; (80040b8 <HAL_GPIO_Init+0x314>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_GPIO_Init+0x20e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4b      	ldr	r2, [pc, #300]	; (80040bc <HAL_GPIO_Init+0x318>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HAL_GPIO_Init+0x20a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a4a      	ldr	r2, [pc, #296]	; (80040c0 <HAL_GPIO_Init+0x31c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <HAL_GPIO_Init+0x206>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a49      	ldr	r2, [pc, #292]	; (80040c4 <HAL_GPIO_Init+0x320>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_GPIO_Init+0x202>
 8003fa2:	2306      	movs	r3, #6
 8003fa4:	e00c      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fa6:	2307      	movs	r3, #7
 8003fa8:	e00a      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003faa:	2305      	movs	r3, #5
 8003fac:	e008      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fae:	2304      	movs	r3, #4
 8003fb0:	e006      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e004      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e002      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f002 0203 	and.w	r2, r2, #3
 8003fc6:	0092      	lsls	r2, r2, #2
 8003fc8:	4093      	lsls	r3, r2
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd0:	4935      	ldr	r1, [pc, #212]	; (80040a8 <HAL_GPIO_Init+0x304>)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	089b      	lsrs	r3, r3, #2
 8003fd6:	3302      	adds	r3, #2
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fde:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004002:	4a31      	ldr	r2, [pc, #196]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004008:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <HAL_GPIO_Init+0x324>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800402c:	4a26      	ldr	r2, [pc, #152]	; (80040c8 <HAL_GPIO_Init+0x324>)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004056:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_GPIO_Init+0x324>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004080:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3301      	adds	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b0f      	cmp	r3, #15
 8004090:	f67f ae96 	bls.w	8003dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3724      	adds	r7, #36	; 0x24
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40020000 	.word	0x40020000
 80040b0:	40020400 	.word	0x40020400
 80040b4:	40020800 	.word	0x40020800
 80040b8:	40020c00 	.word	0x40020c00
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40021400 	.word	0x40021400
 80040c4:	40021800 	.word	0x40021800
 80040c8:	40013c00 	.word	0x40013c00

080040cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e001      	b.n	80040ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
 8004108:	4613      	mov	r3, r2
 800410a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800410c:	787b      	ldrb	r3, [r7, #1]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004118:	e003      	b.n	8004122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800411a:	887b      	ldrh	r3, [r7, #2]
 800411c:	041a      	lsls	r2, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	619a      	str	r2, [r3, #24]
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e12b      	b.n	800439a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fe fe80 	bl	8002e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004194:	f001 fccc 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 8004198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4a81      	ldr	r2, [pc, #516]	; (80043a4 <HAL_I2C_Init+0x274>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d807      	bhi.n	80041b4 <HAL_I2C_Init+0x84>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a80      	ldr	r2, [pc, #512]	; (80043a8 <HAL_I2C_Init+0x278>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	bf94      	ite	ls
 80041ac:	2301      	movls	r3, #1
 80041ae:	2300      	movhi	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	e006      	b.n	80041c2 <HAL_I2C_Init+0x92>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4a7d      	ldr	r2, [pc, #500]	; (80043ac <HAL_I2C_Init+0x27c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	bf94      	ite	ls
 80041bc:	2301      	movls	r3, #1
 80041be:	2300      	movhi	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e0e7      	b.n	800439a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a78      	ldr	r2, [pc, #480]	; (80043b0 <HAL_I2C_Init+0x280>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0c9b      	lsrs	r3, r3, #18
 80041d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4a6a      	ldr	r2, [pc, #424]	; (80043a4 <HAL_I2C_Init+0x274>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d802      	bhi.n	8004204 <HAL_I2C_Init+0xd4>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	3301      	adds	r3, #1
 8004202:	e009      	b.n	8004218 <HAL_I2C_Init+0xe8>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	4a69      	ldr	r2, [pc, #420]	; (80043b4 <HAL_I2C_Init+0x284>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	3301      	adds	r3, #1
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	430b      	orrs	r3, r1
 800421e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800422a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	495c      	ldr	r1, [pc, #368]	; (80043a4 <HAL_I2C_Init+0x274>)
 8004234:	428b      	cmp	r3, r1
 8004236:	d819      	bhi.n	800426c <HAL_I2C_Init+0x13c>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1e59      	subs	r1, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	fbb1 f3f3 	udiv	r3, r1, r3
 8004246:	1c59      	adds	r1, r3, #1
 8004248:	f640 73fc 	movw	r3, #4092	; 0xffc
 800424c:	400b      	ands	r3, r1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_I2C_Init+0x138>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1e59      	subs	r1, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004260:	3301      	adds	r3, #1
 8004262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004266:	e051      	b.n	800430c <HAL_I2C_Init+0x1dc>
 8004268:	2304      	movs	r3, #4
 800426a:	e04f      	b.n	800430c <HAL_I2C_Init+0x1dc>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d111      	bne.n	8004298 <HAL_I2C_Init+0x168>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1e58      	subs	r0, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	440b      	add	r3, r1
 8004282:	fbb0 f3f3 	udiv	r3, r0, r3
 8004286:	3301      	adds	r3, #1
 8004288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e012      	b.n	80042be <HAL_I2C_Init+0x18e>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1e58      	subs	r0, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	0099      	lsls	r1, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ae:	3301      	adds	r3, #1
 80042b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Init+0x196>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e022      	b.n	800430c <HAL_I2C_Init+0x1dc>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10e      	bne.n	80042ec <HAL_I2C_Init+0x1bc>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1e58      	subs	r0, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	440b      	add	r3, r1
 80042dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e0:	3301      	adds	r3, #1
 80042e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ea:	e00f      	b.n	800430c <HAL_I2C_Init+0x1dc>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1e58      	subs	r0, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	0099      	lsls	r1, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004302:	3301      	adds	r3, #1
 8004304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	6809      	ldr	r1, [r1, #0]
 8004310:	4313      	orrs	r3, r2
 8004312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800433a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6911      	ldr	r1, [r2, #16]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68d2      	ldr	r2, [r2, #12]
 8004346:	4311      	orrs	r1, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	000186a0 	.word	0x000186a0
 80043a8:	001e847f 	.word	0x001e847f
 80043ac:	003d08ff 	.word	0x003d08ff
 80043b0:	431bde83 	.word	0x431bde83
 80043b4:	10624dd3 	.word	0x10624dd3

080043b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ba:	b08f      	sub	sp, #60	; 0x3c
 80043bc:	af0a      	add	r7, sp, #40	; 0x28
 80043be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e116      	b.n	80045f8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f007 ffd7 	bl	800c398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f004 fa62 	bl	80088d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	687e      	ldr	r6, [r7, #4]
 8004416:	466d      	mov	r5, sp
 8004418:	f106 0410 	add.w	r4, r6, #16
 800441c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800441e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004424:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004428:	e885 0003 	stmia.w	r5, {r0, r1}
 800442c:	1d33      	adds	r3, r6, #4
 800442e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004430:	6838      	ldr	r0, [r7, #0]
 8004432:	f004 f939 	bl	80086a8 <USB_CoreInit>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0d7      	b.n	80045f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f004 fa50 	bl	80088f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	e04a      	b.n	80044f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800445a:	7bfa      	ldrb	r2, [r7, #15]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	333d      	adds	r3, #61	; 0x3d
 800446a:	2201      	movs	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800446e:	7bfa      	ldrb	r2, [r7, #15]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	333c      	adds	r3, #60	; 0x3c
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	b298      	uxth	r0, r3
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	3344      	adds	r3, #68	; 0x44
 8004496:	4602      	mov	r2, r0
 8004498:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	3340      	adds	r3, #64	; 0x40
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	3348      	adds	r3, #72	; 0x48
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	334c      	adds	r3, #76	; 0x4c
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3354      	adds	r3, #84	; 0x54
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	3301      	adds	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d3af      	bcc.n	800445a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	e044      	b.n	800458a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	3301      	adds	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
 800458a:	7bfa      	ldrb	r2, [r7, #15]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d3b5      	bcc.n	8004500 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	687e      	ldr	r6, [r7, #4]
 800459c:	466d      	mov	r5, sp
 800459e:	f106 0410 	add.w	r4, r6, #16
 80045a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80045b2:	1d33      	adds	r3, r6, #4
 80045b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b6:	6838      	ldr	r0, [r7, #0]
 80045b8:	f004 f9e8 	bl	800898c <USB_DevInit>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e014      	b.n	80045f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 f98c 	bl	8005904 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f005 fb2a 	bl	8009c4a <USB_DevDisconnect>

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004600 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_PCD_Start+0x1c>
 8004618:	2302      	movs	r3, #2
 800461a:	e020      	b.n	800465e <HAL_PCD_Start+0x5e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	2b01      	cmp	r3, #1
 800462a:	d109      	bne.n	8004640 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004630:	2b01      	cmp	r3, #1
 8004632:	d005      	beq.n	8004640 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f004 f933 	bl	80088b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f005 fada 	bl	8009c08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004666:	b590      	push	{r4, r7, lr}
 8004668:	b08d      	sub	sp, #52	; 0x34
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f005 fb98 	bl	8009db2 <USB_GetMode>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 84b7 	bne.w	8004ff8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f005 fafc 	bl	8009c8c <USB_ReadInterrupts>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 84ad 	beq.w	8004ff6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f005 fae9 	bl	8009c8c <USB_ReadInterrupts>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d107      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f002 0202 	and.w	r2, r2, #2
 80046d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f005 fad7 	bl	8009c8c <USB_ReadInterrupts>
 80046de:	4603      	mov	r3, r0
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d161      	bne.n	80047ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0210 	bic.w	r2, r2, #16
 80046f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f003 020f 	and.w	r2, r3, #15
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	3304      	adds	r3, #4
 8004716:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	0c5b      	lsrs	r3, r3, #17
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	2b02      	cmp	r3, #2
 8004722:	d124      	bne.n	800476e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d035      	beq.n	800479c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800473a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800473e:	b29b      	uxth	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	6a38      	ldr	r0, [r7, #32]
 8004744:	f005 f90e 	bl	8009964 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004754:	441a      	add	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004766:	441a      	add	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	621a      	str	r2, [r3, #32]
 800476c:	e016      	b.n	800479c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	0c5b      	lsrs	r3, r3, #17
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	2b06      	cmp	r3, #6
 8004778:	d110      	bne.n	800479c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004780:	2208      	movs	r2, #8
 8004782:	4619      	mov	r1, r3
 8004784:	6a38      	ldr	r0, [r7, #32]
 8004786:	f005 f8ed 	bl	8009964 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	6a1a      	ldr	r2, [r3, #32]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004796:	441a      	add	r2, r3
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0210 	orr.w	r2, r2, #16
 80047aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f005 fa6b 	bl	8009c8c <USB_ReadInterrupts>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047c0:	f040 80a7 	bne.w	8004912 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f005 fa70 	bl	8009cb2 <USB_ReadDevAllOutEpInterrupt>
 80047d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80047d4:	e099      	b.n	800490a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 808e 	beq.w	80048fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f005 fa94 	bl	8009d1a <USB_ReadDevOutEPInterrupt>
 80047f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00c      	beq.n	8004818 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	461a      	mov	r2, r3
 800480c:	2301      	movs	r3, #1
 800480e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fef0 	bl	80055f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	461a      	mov	r2, r3
 8004830:	2308      	movs	r3, #8
 8004832:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 ffc6 	bl	80057c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	461a      	mov	r2, r3
 8004854:	2310      	movs	r3, #16
 8004856:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d030      	beq.n	80048c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d109      	bne.n	8004882 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800487c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004880:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	3304      	adds	r3, #4
 8004896:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	78db      	ldrb	r3, [r3, #3]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d108      	bne.n	80048b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2200      	movs	r2, #0
 80048a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f007 fe9d 	bl	800c5ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	461a      	mov	r2, r3
 80048c0:	2302      	movs	r3, #2
 80048c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	461a      	mov	r2, r3
 80048dc:	2320      	movs	r3, #32
 80048de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	461a      	mov	r2, r3
 80048f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	3301      	adds	r3, #1
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	f47f af62 	bne.w	80047d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f005 f9b8 	bl	8009c8c <USB_ReadInterrupts>
 800491c:	4603      	mov	r3, r0
 800491e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004926:	f040 80db 	bne.w	8004ae0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f005 f9d9 	bl	8009ce6 <USB_ReadDevAllInEpInterrupt>
 8004934:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800493a:	e0cd      	b.n	8004ad8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80c2 	beq.w	8004acc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	4611      	mov	r1, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f005 f9ff 	bl	8009d56 <USB_ReadDevInEPInterrupt>
 8004958:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d057      	beq.n	8004a14 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	2201      	movs	r2, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	43db      	mvns	r3, r3
 800497e:	69f9      	ldr	r1, [r7, #28]
 8004980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004984:	4013      	ands	r3, r2
 8004986:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	461a      	mov	r2, r3
 8004996:	2301      	movs	r3, #1
 8004998:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d132      	bne.n	8004a08 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	334c      	adds	r3, #76	; 0x4c
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4403      	add	r3, r0
 80049c2:	3348      	adds	r3, #72	; 0x48
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4419      	add	r1, r3
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4403      	add	r3, r0
 80049d6:	334c      	adds	r3, #76	; 0x4c
 80049d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d113      	bne.n	8004a08 <HAL_PCD_IRQHandler+0x3a2>
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	3354      	adds	r3, #84	; 0x54
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d108      	bne.n	8004a08 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a00:	461a      	mov	r2, r3
 8004a02:	2101      	movs	r1, #1
 8004a04:	f005 fa06 	bl	8009e14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f007 fd67 	bl	800c4e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	461a      	mov	r2, r3
 8004a48:	2310      	movs	r3, #16
 8004a4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	461a      	mov	r2, r3
 8004a64:	2340      	movs	r3, #64	; 0x40
 8004a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d023      	beq.n	8004aba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a74:	6a38      	ldr	r0, [r7, #32]
 8004a76:	f004 f8e7 	bl	8008c48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	3338      	adds	r3, #56	; 0x38
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4413      	add	r3, r2
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	78db      	ldrb	r3, [r3, #3]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d108      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f007 fdb4 	bl	800c610 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fd08 	bl	80054dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	3301      	adds	r3, #1
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f47f af2e 	bne.w	800493c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f005 f8d1 	bl	8009c8c <USB_ReadInterrupts>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af4:	d122      	bne.n	8004b3c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d108      	bne.n	8004b26 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f007 ff2e 	bl	800c980 <HAL_PCDEx_LPM_Callback>
 8004b24:	e002      	b.n	8004b2c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f007 fd52 	bl	800c5d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f005 f8a3 	bl	8009c8c <USB_ReadInterrupts>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b50:	d112      	bne.n	8004b78 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d102      	bne.n	8004b68 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f007 fd0e 	bl	800c584 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b76:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f005 f885 	bl	8009c8c <USB_ReadInterrupts>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b8c:	d121      	bne.n	8004bd2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004b9c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d111      	bne.n	8004bcc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	f003 020f 	and.w	r2, r3, #15
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f007 fedb 	bl	800c980 <HAL_PCDEx_LPM_Callback>
 8004bca:	e002      	b.n	8004bd2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f007 fcd9 	bl	800c584 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f005 f858 	bl	8009c8c <USB_ReadInterrupts>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	f040 80b7 	bne.w	8004d58 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2110      	movs	r1, #16
 8004c04:	4618      	mov	r0, r3
 8004c06:	f004 f81f 	bl	8008c48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0e:	e046      	b.n	8004c9e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	461a      	mov	r2, r3
 8004c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c88:	0151      	lsls	r1, r2, #5
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	440a      	add	r2, r1
 8004c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d3b3      	bcc.n	8004c10 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004cba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d016      	beq.n	8004cf2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd4:	f043 030b 	orr.w	r3, r3, #11
 8004cd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cea:	f043 030b 	orr.w	r3, r3, #11
 8004cee:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf0:	e015      	b.n	8004d1e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d18:	f043 030b 	orr.w	r3, r3, #11
 8004d1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d42:	461a      	mov	r2, r3
 8004d44:	f005 f866 	bl	8009e14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f004 ff95 	bl	8009c8c <USB_ReadInterrupts>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6c:	d124      	bne.n	8004db8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f005 f82b 	bl	8009dce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f003 ffe0 	bl	8008d42 <USB_GetDevSpeed>
 8004d82:	4603      	mov	r3, r0
 8004d84:	461a      	mov	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681c      	ldr	r4, [r3, #0]
 8004d8e:	f000 fec3 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8004d92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f003 fce5 	bl	800876c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f007 fbc5 	bl	800c532 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 ff65 	bl	8009c8c <USB_ReadInterrupts>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d10a      	bne.n	8004de2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f007 fba2 	bl	800c516 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f002 0208 	and.w	r2, r2, #8
 8004de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f004 ff50 	bl	8009c8c <USB_ReadInterrupts>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b80      	cmp	r3, #128	; 0x80
 8004df4:	d122      	bne.n	8004e3c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e02:	2301      	movs	r3, #1
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	e014      	b.n	8004e32 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d105      	bne.n	8004e2c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fb27 	bl	800547a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	3301      	adds	r3, #1
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d3e5      	bcc.n	8004e08 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f004 ff23 	bl	8009c8c <USB_ReadInterrupts>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e50:	d13b      	bne.n	8004eca <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e52:	2301      	movs	r3, #1
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	e02b      	b.n	8004eb0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3340      	adds	r3, #64	; 0x40
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d115      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da12      	bge.n	8004eaa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	333f      	adds	r3, #63	; 0x3f
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fae8 	bl	800547a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	3301      	adds	r3, #1
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d3ce      	bcc.n	8004e58 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f004 fedc 	bl	8009c8c <USB_ReadInterrupts>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ede:	d155      	bne.n	8004f8c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee4:	e045      	b.n	8004f72 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	4613      	mov	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d12e      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	da2b      	bge.n	8004f6c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004f20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d121      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f68:	6053      	str	r3, [r2, #4]
            break;
 8004f6a:	e007      	b.n	8004f7c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	3301      	adds	r3, #1
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d3b4      	bcc.n	8004ee6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f004 fe7b 	bl	8009c8c <USB_ReadInterrupts>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f007 fb46 	bl	800c634 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f004 fe65 	bl	8009c8c <USB_ReadInterrupts>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d115      	bne.n	8004ff8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f007 fb36 	bl	800c650 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	e000      	b.n	8004ff8 <HAL_PCD_IRQHandler+0x992>
      return;
 8004ff6:	bf00      	nop
    }
  }
}
 8004ff8:	3734      	adds	r7, #52	; 0x34
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd90      	pop	{r4, r7, pc}

08004ffe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_PCD_SetAddress+0x1a>
 8005014:	2302      	movs	r3, #2
 8005016:	e013      	b.n	8005040 <HAL_PCD_SetAddress+0x42>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f004 fdc3 	bl	8009bbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	461a      	mov	r2, r3
 8005056:	4603      	mov	r3, r0
 8005058:	70fb      	strb	r3, [r7, #3]
 800505a:	460b      	mov	r3, r1
 800505c:	803b      	strh	r3, [r7, #0]
 800505e:	4613      	mov	r3, r2
 8005060:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800506a:	2b00      	cmp	r3, #0
 800506c:	da0f      	bge.n	800508e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	f003 020f 	and.w	r2, r3, #15
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	3338      	adds	r3, #56	; 0x38
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	3304      	adds	r3, #4
 8005084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	705a      	strb	r2, [r3, #1]
 800508c:	e00f      	b.n	80050ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	4413      	add	r3, r2
 80050a4:	3304      	adds	r3, #4
 80050a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050ba:	883a      	ldrh	r2, [r7, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	78ba      	ldrb	r2, [r7, #2]
 80050c4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050d8:	78bb      	ldrb	r3, [r7, #2]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d102      	bne.n	80050e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_PCD_EP_Open+0xaa>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e00e      	b.n	8005110 <HAL_PCD_EP_Open+0xc8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	4618      	mov	r0, r3
 8005102:	f003 fe43 	bl	8008d8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800510e:	7afb      	ldrb	r3, [r7, #11]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005128:	2b00      	cmp	r3, #0
 800512a:	da0f      	bge.n	800514c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	f003 020f 	and.w	r2, r3, #15
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	3338      	adds	r3, #56	; 0x38
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	3304      	adds	r3, #4
 8005142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	705a      	strb	r2, [r3, #1]
 800514a:	e00f      	b.n	800516c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f003 020f 	and.w	r2, r3, #15
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4413      	add	r3, r2
 8005162:	3304      	adds	r3, #4
 8005164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_PCD_EP_Close+0x6e>
 8005182:	2302      	movs	r3, #2
 8005184:	e00e      	b.n	80051a4 <HAL_PCD_EP_Close+0x8c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	4618      	mov	r0, r3
 8005196:	f003 fe81 	bl	8008e9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	607a      	str	r2, [r7, #4]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	460b      	mov	r3, r1
 80051ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051bc:	7afb      	ldrb	r3, [r7, #11]
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ee:	7afb      	ldrb	r3, [r7, #11]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d102      	bne.n	8005208 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005208:	7afb      	ldrb	r3, [r7, #11]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	6979      	ldr	r1, [r7, #20]
 8005220:	f004 f960 	bl	80094e4 <USB_EP0StartXfer>
 8005224:	e008      	b.n	8005238 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	6979      	ldr	r1, [r7, #20]
 8005234:	f003 ff0e 	bl	8009054 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	460b      	mov	r3, r1
 800524c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005264:	681b      	ldr	r3, [r3, #0]
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	460b      	mov	r3, r1
 8005280:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	3338      	adds	r3, #56	; 0x38
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	3304      	adds	r3, #4
 8005298:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2201      	movs	r2, #1
 80052b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b2:	7afb      	ldrb	r3, [r7, #11]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d102      	bne.n	80052cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052cc:	7afb      	ldrb	r3, [r7, #11]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	6979      	ldr	r1, [r7, #20]
 80052e4:	f004 f8fe 	bl	80094e4 <USB_EP0StartXfer>
 80052e8:	e008      	b.n	80052fc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	6979      	ldr	r1, [r7, #20]
 80052f8:	f003 feac 	bl	8009054 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d901      	bls.n	8005324 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e050      	b.n	80053c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005328:	2b00      	cmp	r3, #0
 800532a:	da0f      	bge.n	800534c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	f003 020f 	and.w	r2, r3, #15
 8005332:	4613      	mov	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	3338      	adds	r3, #56	; 0x38
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	4413      	add	r3, r2
 8005340:	3304      	adds	r3, #4
 8005342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	705a      	strb	r2, [r3, #1]
 800534a:	e00d      	b.n	8005368 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	3304      	adds	r3, #4
 8005360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_PCD_EP_SetStall+0x82>
 8005384:	2302      	movs	r3, #2
 8005386:	e01e      	b.n	80053c6 <HAL_PCD_EP_SetStall+0xc0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	4618      	mov	r0, r3
 8005398:	f004 fb3c 	bl	8009a14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	b2d9      	uxtb	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053b6:	461a      	mov	r2, r3
 80053b8:	f004 fd2c 	bl	8009e14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d901      	bls.n	80053ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e042      	b.n	8005472 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da0f      	bge.n	8005414 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	f003 020f 	and.w	r2, r3, #15
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	3338      	adds	r3, #56	; 0x38
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	3304      	adds	r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	705a      	strb	r2, [r3, #1]
 8005412:	e00f      	b.n	8005434 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	3304      	adds	r3, #4
 800542c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_PCD_EP_ClrStall+0x86>
 8005450:	2302      	movs	r3, #2
 8005452:	e00e      	b.n	8005472 <HAL_PCD_EP_ClrStall+0xa4>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	4618      	mov	r0, r3
 8005464:	f004 fb44 	bl	8009af0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800548a:	2b00      	cmp	r3, #0
 800548c:	da0c      	bge.n	80054a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	f003 020f 	and.w	r2, r3, #15
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	3338      	adds	r3, #56	; 0x38
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	3304      	adds	r3, #4
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e00c      	b.n	80054c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	f003 020f 	and.w	r2, r3, #15
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	3304      	adds	r3, #4
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f004 f963 	bl	8009794 <USB_EPStopXfer>
 80054ce:	4603      	mov	r3, r0
 80054d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80054d2:	7afb      	ldrb	r3, [r7, #11]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	4613      	mov	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	3338      	adds	r3, #56	; 0x38
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	3304      	adds	r3, #4
 8005502:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	429a      	cmp	r2, r3
 800550e:	d901      	bls.n	8005514 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e06c      	b.n	80055ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	429a      	cmp	r2, r3
 8005528:	d902      	bls.n	8005530 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3303      	adds	r3, #3
 8005534:	089b      	lsrs	r3, r3, #2
 8005536:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005538:	e02b      	b.n	8005592 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	429a      	cmp	r2, r3
 800554e:	d902      	bls.n	8005556 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	3303      	adds	r3, #3
 800555a:	089b      	lsrs	r3, r3, #2
 800555c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6919      	ldr	r1, [r3, #16]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800556e:	b2db      	uxtb	r3, r3
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4603      	mov	r3, r0
 8005574:	6978      	ldr	r0, [r7, #20]
 8005576:	f004 f9b7 	bl	80098e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	441a      	add	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	441a      	add	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d809      	bhi.n	80055bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d203      	bcs.n	80055bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1be      	bne.n	800553a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d811      	bhi.n	80055ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	2201      	movs	r2, #1
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e8:	4013      	ands	r3, r2
 80055ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	333c      	adds	r3, #60	; 0x3c
 8005610:	3304      	adds	r3, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d17b      	bne.n	8005726 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4a61      	ldr	r2, [pc, #388]	; (80057c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	f240 80b9 	bls.w	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80b3 	beq.w	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005660:	6093      	str	r3, [r2, #8]
 8005662:	e0a7      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	461a      	mov	r2, r3
 800567c:	2320      	movs	r3, #32
 800567e:	6093      	str	r3, [r2, #8]
 8005680:	e098      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005688:	2b00      	cmp	r3, #0
 800568a:	f040 8093 	bne.w	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	4a4b      	ldr	r2, [pc, #300]	; (80057c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d90f      	bls.n	80056b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	461a      	mov	r2, r3
 80056ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b2:	6093      	str	r3, [r2, #8]
 80056b4:	e07e      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	3304      	adds	r3, #4
 80056ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	0159      	lsls	r1, r3, #5
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	440b      	add	r3, r1
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d114      	bne.n	8005718 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005700:	461a      	mov	r2, r3
 8005702:	2101      	movs	r1, #1
 8005704:	f004 fb86 	bl	8009e14 <USB_EP0_OutStart>
 8005708:	e006      	b.n	8005718 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	441a      	add	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f006 fec4 	bl	800c4ac <HAL_PCD_DataOutStageCallback>
 8005724:	e046      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d124      	bne.n	8005778 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	461a      	mov	r2, r3
 8005746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574a:	6093      	str	r3, [r2, #8]
 800574c:	e032      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	461a      	mov	r2, r3
 8005766:	2320      	movs	r3, #32
 8005768:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f006 fe9b 	bl	800c4ac <HAL_PCD_DataOutStageCallback>
 8005776:	e01d      	b.n	80057b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d114      	bne.n	80057a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d108      	bne.n	80057a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057a0:	461a      	mov	r2, r3
 80057a2:	2100      	movs	r1, #0
 80057a4:	f004 fb36 	bl	8009e14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f006 fe7c 	bl	800c4ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	4f54300a 	.word	0x4f54300a
 80057c4:	4f54310a 	.word	0x4f54310a

080057c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	333c      	adds	r3, #60	; 0x3c
 80057e0:	3304      	adds	r3, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4a15      	ldr	r2, [pc, #84]	; (8005850 <PCD_EP_OutSetupPacket_int+0x88>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d90e      	bls.n	800581c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005814:	461a      	mov	r2, r3
 8005816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f006 fe33 	bl	800c488 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <PCD_EP_OutSetupPacket_int+0x88>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d90c      	bls.n	8005844 <PCD_EP_OutSetupPacket_int+0x7c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d108      	bne.n	8005844 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800583c:	461a      	mov	r2, r3
 800583e:	2101      	movs	r1, #1
 8005840:	f004 fae8 	bl	8009e14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	4f54300a 	.word	0x4f54300a

08005854 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
 8005860:	4613      	mov	r3, r2
 8005862:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005872:	883b      	ldrh	r3, [r7, #0]
 8005874:	0419      	lsls	r1, r3, #16
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	430a      	orrs	r2, r1
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
 8005880:	e028      	b.n	80058d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005890:	2300      	movs	r3, #0
 8005892:	73fb      	strb	r3, [r7, #15]
 8005894:	e00d      	b.n	80058b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	3340      	adds	r3, #64	; 0x40
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4413      	add	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	3301      	adds	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
 80058b2:	7bfa      	ldrb	r2, [r7, #15]
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3ec      	bcc.n	8005896 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80058bc:	883b      	ldrh	r3, [r7, #0]
 80058be:	0418      	lsls	r0, r3, #16
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	4302      	orrs	r2, r0
 80058cc:	3340      	adds	r3, #64	; 0x40
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	460b      	mov	r3, r1
 80058ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	887a      	ldrh	r2, [r7, #2]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005936:	f043 0303 	orr.w	r3, r3, #3
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0cc      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005960:	4b68      	ldr	r3, [pc, #416]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d90c      	bls.n	8005988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b65      	ldr	r3, [pc, #404]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b63      	ldr	r3, [pc, #396]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0b8      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a0:	4b59      	ldr	r3, [pc, #356]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4a58      	ldr	r2, [pc, #352]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b8:	4b53      	ldr	r3, [pc, #332]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a52      	ldr	r2, [pc, #328]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c4:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	494d      	ldr	r1, [pc, #308]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d044      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d119      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e07f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d003      	beq.n	8005a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0a:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e06f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1a:	4b3b      	ldr	r3, [pc, #236]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e067      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2a:	4b37      	ldr	r3, [pc, #220]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 0203 	bic.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4934      	ldr	r1, [pc, #208]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a3c:	f7fd fd6c 	bl	8003518 <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a44:	f7fd fd68 	bl	8003518 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e04f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 020c 	and.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d1eb      	bne.n	8005a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d20c      	bcs.n	8005a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e032      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa0:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4916      	ldr	r1, [pc, #88]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	490e      	ldr	r1, [pc, #56]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ad2:	f000 fb7f 	bl	80061d4 <HAL_RCC_GetSysClockFreq>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	490a      	ldr	r1, [pc, #40]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005ae4:	5ccb      	ldrb	r3, [r1, r3]
 8005ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aea:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fd fccc 	bl	8003490 <HAL_InitTick>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40023c00 	.word	0x40023c00
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	080106d8 	.word	0x080106d8
 8005b10:	20000028 	.word	0x20000028
 8005b14:	2000002c 	.word	0x2000002c

08005b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000028 	.word	0x20000028

08005b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b34:	f7ff fff0 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	4903      	ldr	r1, [pc, #12]	; (8005b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b46:	5ccb      	ldrb	r3, [r1, r3]
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40023800 	.word	0x40023800
 8005b54:	080106e8 	.word	0x080106e8

08005b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b5c:	f7ff ffdc 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0b5b      	lsrs	r3, r3, #13
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4903      	ldr	r1, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	080106e8 	.word	0x080106e8

08005b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	; 0x30
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d010      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005bb8:	4b6f      	ldr	r3, [pc, #444]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bbe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	496c      	ldr	r1, [pc, #432]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d010      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005be6:	4b64      	ldr	r3, [pc, #400]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf4:	4960      	ldr	r1, [pc, #384]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005c04:	2301      	movs	r3, #1
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d017      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c14:	4b58      	ldr	r3, [pc, #352]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	4955      	ldr	r1, [pc, #340]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c32:	d101      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005c34:	2301      	movs	r3, #1
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005c40:	2301      	movs	r3, #1
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d017      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c50:	4b49      	ldr	r3, [pc, #292]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	4946      	ldr	r1, [pc, #280]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005c70:	2301      	movs	r3, #1
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 808a 	beq.w	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	4b39      	ldr	r3, [pc, #228]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	4a38      	ldr	r2, [pc, #224]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c9e:	4b36      	ldr	r3, [pc, #216]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005caa:	4b34      	ldr	r3, [pc, #208]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a33      	ldr	r2, [pc, #204]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb6:	f7fd fc2f 	bl	8003518 <HAL_GetTick>
 8005cba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cbe:	f7fd fc2b 	bl	8003518 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e278      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cd0:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0f0      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cdc:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d02f      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d028      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d02:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d04:	4b1e      	ldr	r3, [pc, #120]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d114      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fd fbf9 	bl	8003518 <HAL_GetTick>
 8005d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d28:	e00a      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d2a:	f7fd fbf5 	bl	8003518 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e240      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d40:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ee      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d58:	d114      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005d5a:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6e:	4902      	ldr	r1, [pc, #8]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	608b      	str	r3, [r1, #8]
 8005d74:	e00c      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005d76:	bf00      	nop
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40007000 	.word	0x40007000
 8005d80:	42470e40 	.word	0x42470e40
 8005d84:	4b4a      	ldr	r3, [pc, #296]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	4a49      	ldr	r2, [pc, #292]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d8e:	6093      	str	r3, [r2, #8]
 8005d90:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d9c:	4944      	ldr	r1, [pc, #272]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005db4:	4b3f      	ldr	r3, [pc, #252]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005db6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005dc4:	4b3a      	ldr	r3, [pc, #232]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	4937      	ldr	r1, [pc, #220]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005de6:	4b32      	ldr	r3, [pc, #200]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df4:	492e      	ldr	r1, [pc, #184]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d011      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e0e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	4926      	ldr	r1, [pc, #152]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e26:	d101      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	491a      	ldr	r1, [pc, #104]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d011      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e68:	4911      	ldr	r1, [pc, #68]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e78:	d101      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d005      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8c:	f040 80ff 	bne.w	800608e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e90:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e96:	f7fd fb3f 	bl	8003518 <HAL_GetTick>
 8005e9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e9c:	e00e      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e9e:	f7fd fb3b 	bl	8003518 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d907      	bls.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e188      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	424711e0 	.word	0x424711e0
 8005eb8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ebc:	4b7e      	ldr	r3, [pc, #504]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1ea      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d009      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d028      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d124      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005ef0:	4b71      	ldr	r3, [pc, #452]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	3301      	adds	r3, #1
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f02:	4b6d      	ldr	r3, [pc, #436]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f08:	0e1b      	lsrs	r3, r3, #24
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	3b01      	subs	r3, #1
 8005f22:	041b      	lsls	r3, r3, #16
 8005f24:	431a      	orrs	r2, r3
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	061b      	lsls	r3, r3, #24
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	071b      	lsls	r3, r3, #28
 8005f32:	4961      	ldr	r1, [pc, #388]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f4e:	d00a      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d035      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f64:	d130      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005f66:	4b54      	ldr	r3, [pc, #336]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	3301      	adds	r3, #1
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f78:	4b4f      	ldr	r3, [pc, #316]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7e:	0f1b      	lsrs	r3, r3, #28
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	019b      	lsls	r3, r3, #6
 8005f90:	431a      	orrs	r2, r3
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	085b      	lsrs	r3, r3, #1
 8005f96:	3b01      	subs	r3, #1
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	071b      	lsls	r3, r3, #28
 8005fa8:	4943      	ldr	r1, [pc, #268]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fb0:	4b41      	ldr	r3, [pc, #260]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb6:	f023 021f 	bic.w	r2, r3, #31
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	493d      	ldr	r1, [pc, #244]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d029      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fdc:	d124      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005fde:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	3301      	adds	r3, #1
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ff0:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff6:	0f1b      	lsrs	r3, r3, #28
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	019b      	lsls	r3, r3, #6
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	3b01      	subs	r3, #1
 8006012:	041b      	lsls	r3, r3, #16
 8006014:	431a      	orrs	r2, r3
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	061b      	lsls	r3, r3, #24
 800601a:	431a      	orrs	r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	071b      	lsls	r3, r3, #28
 8006020:	4925      	ldr	r1, [pc, #148]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	019b      	lsls	r3, r3, #6
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	3b01      	subs	r3, #1
 8006048:	041b      	lsls	r3, r3, #16
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	061b      	lsls	r3, r3, #24
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	071b      	lsls	r3, r3, #28
 800605a:	4917      	ldr	r1, [pc, #92]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006062:	4b16      	ldr	r3, [pc, #88]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006064:	2201      	movs	r2, #1
 8006066:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006068:	f7fd fa56 	bl	8003518 <HAL_GetTick>
 800606c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006070:	f7fd fa52 	bl	8003518 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e09f      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006082:	4b0d      	ldr	r3, [pc, #52]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0f0      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	2b01      	cmp	r3, #1
 8006092:	f040 8095 	bne.w	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800609c:	f7fd fa3c 	bl	8003518 <HAL_GetTick>
 80060a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060a2:	e00f      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80060a4:	f7fd fa38 	bl	8003518 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d908      	bls.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e085      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800
 80060bc:	42470068 	.word	0x42470068
 80060c0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060c4:	4b41      	ldr	r3, [pc, #260]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d0:	d0e8      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02b      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d127      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80060fa:	4b34      	ldr	r3, [pc, #208]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80060fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	3301      	adds	r3, #1
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	431a      	orrs	r2, r3
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	3b01      	subs	r3, #1
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	061b      	lsls	r3, r3, #24
 8006128:	4928      	ldr	r1, [pc, #160]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006130:	4b26      	ldr	r3, [pc, #152]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006136:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	3b01      	subs	r3, #1
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	4922      	ldr	r1, [pc, #136]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d01d      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800615e:	d118      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	0e1b      	lsrs	r3, r3, #24
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	019b      	lsls	r3, r3, #6
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	3b01      	subs	r3, #1
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	431a      	orrs	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	061b      	lsls	r3, r3, #24
 800618a:	4910      	ldr	r1, [pc, #64]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006192:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006198:	f7fd f9be 	bl	8003518 <HAL_GetTick>
 800619c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80061a0:	f7fd f9ba 	bl	8003518 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e007      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061be:	d1ef      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3730      	adds	r7, #48	; 0x30
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40023800 	.word	0x40023800
 80061d0:	42470070 	.word	0x42470070

080061d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061d8:	b0ae      	sub	sp, #184	; 0xb8
 80061da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061fa:	4bcb      	ldr	r3, [pc, #812]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b0c      	cmp	r3, #12
 8006204:	f200 8206 	bhi.w	8006614 <HAL_RCC_GetSysClockFreq+0x440>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <HAL_RCC_GetSysClockFreq+0x3c>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006245 	.word	0x08006245
 8006214:	08006615 	.word	0x08006615
 8006218:	08006615 	.word	0x08006615
 800621c:	08006615 	.word	0x08006615
 8006220:	0800624d 	.word	0x0800624d
 8006224:	08006615 	.word	0x08006615
 8006228:	08006615 	.word	0x08006615
 800622c:	08006615 	.word	0x08006615
 8006230:	08006255 	.word	0x08006255
 8006234:	08006615 	.word	0x08006615
 8006238:	08006615 	.word	0x08006615
 800623c:	08006615 	.word	0x08006615
 8006240:	08006445 	.word	0x08006445
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006244:	4bb9      	ldr	r3, [pc, #740]	; (800652c <HAL_RCC_GetSysClockFreq+0x358>)
 8006246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800624a:	e1e7      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624c:	4bb8      	ldr	r3, [pc, #736]	; (8006530 <HAL_RCC_GetSysClockFreq+0x35c>)
 800624e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006252:	e1e3      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006254:	4bb4      	ldr	r3, [pc, #720]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800625c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006260:	4bb1      	ldr	r3, [pc, #708]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d071      	beq.n	8006350 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626c:	4bae      	ldr	r3, [pc, #696]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	099b      	lsrs	r3, r3, #6
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006278:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800627c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006288:	2300      	movs	r3, #0
 800628a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800628e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006292:	4622      	mov	r2, r4
 8006294:	462b      	mov	r3, r5
 8006296:	f04f 0000 	mov.w	r0, #0
 800629a:	f04f 0100 	mov.w	r1, #0
 800629e:	0159      	lsls	r1, r3, #5
 80062a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062a4:	0150      	lsls	r0, r2, #5
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4621      	mov	r1, r4
 80062ac:	1a51      	subs	r1, r2, r1
 80062ae:	6439      	str	r1, [r7, #64]	; 0x40
 80062b0:	4629      	mov	r1, r5
 80062b2:	eb63 0301 	sbc.w	r3, r3, r1
 80062b6:	647b      	str	r3, [r7, #68]	; 0x44
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80062c4:	4649      	mov	r1, r9
 80062c6:	018b      	lsls	r3, r1, #6
 80062c8:	4641      	mov	r1, r8
 80062ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ce:	4641      	mov	r1, r8
 80062d0:	018a      	lsls	r2, r1, #6
 80062d2:	4641      	mov	r1, r8
 80062d4:	1a51      	subs	r1, r2, r1
 80062d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062d8:	4649      	mov	r1, r9
 80062da:	eb63 0301 	sbc.w	r3, r3, r1
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80062ec:	4649      	mov	r1, r9
 80062ee:	00cb      	lsls	r3, r1, #3
 80062f0:	4641      	mov	r1, r8
 80062f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f6:	4641      	mov	r1, r8
 80062f8:	00ca      	lsls	r2, r1, #3
 80062fa:	4610      	mov	r0, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	4622      	mov	r2, r4
 8006302:	189b      	adds	r3, r3, r2
 8006304:	633b      	str	r3, [r7, #48]	; 0x30
 8006306:	462b      	mov	r3, r5
 8006308:	460a      	mov	r2, r1
 800630a:	eb42 0303 	adc.w	r3, r2, r3
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800631c:	4629      	mov	r1, r5
 800631e:	024b      	lsls	r3, r1, #9
 8006320:	4621      	mov	r1, r4
 8006322:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006326:	4621      	mov	r1, r4
 8006328:	024a      	lsls	r2, r1, #9
 800632a:	4610      	mov	r0, r2
 800632c:	4619      	mov	r1, r3
 800632e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800633c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006340:	f7fa fca2 	bl	8000c88 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4613      	mov	r3, r2
 800634a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800634e:	e067      	b.n	8006420 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006350:	4b75      	ldr	r3, [pc, #468]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	099b      	lsrs	r3, r3, #6
 8006356:	2200      	movs	r2, #0
 8006358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800635c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006368:	67bb      	str	r3, [r7, #120]	; 0x78
 800636a:	2300      	movs	r3, #0
 800636c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800636e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006372:	4622      	mov	r2, r4
 8006374:	462b      	mov	r3, r5
 8006376:	f04f 0000 	mov.w	r0, #0
 800637a:	f04f 0100 	mov.w	r1, #0
 800637e:	0159      	lsls	r1, r3, #5
 8006380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006384:	0150      	lsls	r0, r2, #5
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4621      	mov	r1, r4
 800638c:	1a51      	subs	r1, r2, r1
 800638e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006390:	4629      	mov	r1, r5
 8006392:	eb63 0301 	sbc.w	r3, r3, r1
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80063a4:	4649      	mov	r1, r9
 80063a6:	018b      	lsls	r3, r1, #6
 80063a8:	4641      	mov	r1, r8
 80063aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063ae:	4641      	mov	r1, r8
 80063b0:	018a      	lsls	r2, r1, #6
 80063b2:	4641      	mov	r1, r8
 80063b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80063b8:	4649      	mov	r1, r9
 80063ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063d2:	4692      	mov	sl, r2
 80063d4:	469b      	mov	fp, r3
 80063d6:	4623      	mov	r3, r4
 80063d8:	eb1a 0303 	adds.w	r3, sl, r3
 80063dc:	623b      	str	r3, [r7, #32]
 80063de:	462b      	mov	r3, r5
 80063e0:	eb4b 0303 	adc.w	r3, fp, r3
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80063f2:	4629      	mov	r1, r5
 80063f4:	028b      	lsls	r3, r1, #10
 80063f6:	4621      	mov	r1, r4
 80063f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063fc:	4621      	mov	r1, r4
 80063fe:	028a      	lsls	r2, r1, #10
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006408:	2200      	movs	r2, #0
 800640a:	673b      	str	r3, [r7, #112]	; 0x70
 800640c:	677a      	str	r2, [r7, #116]	; 0x74
 800640e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006412:	f7fa fc39 	bl	8000c88 <__aeabi_uldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4613      	mov	r3, r2
 800641c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006420:	4b41      	ldr	r3, [pc, #260]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	3301      	adds	r3, #1
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006442:	e0eb      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006444:	4b38      	ldr	r3, [pc, #224]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800644c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006450:	4b35      	ldr	r3, [pc, #212]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d06b      	beq.n	8006534 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800645c:	4b32      	ldr	r3, [pc, #200]	; (8006528 <HAL_RCC_GetSysClockFreq+0x354>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	099b      	lsrs	r3, r3, #6
 8006462:	2200      	movs	r2, #0
 8006464:	66bb      	str	r3, [r7, #104]	; 0x68
 8006466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800646a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646e:	663b      	str	r3, [r7, #96]	; 0x60
 8006470:	2300      	movs	r3, #0
 8006472:	667b      	str	r3, [r7, #100]	; 0x64
 8006474:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006478:	4622      	mov	r2, r4
 800647a:	462b      	mov	r3, r5
 800647c:	f04f 0000 	mov.w	r0, #0
 8006480:	f04f 0100 	mov.w	r1, #0
 8006484:	0159      	lsls	r1, r3, #5
 8006486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800648a:	0150      	lsls	r0, r2, #5
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4621      	mov	r1, r4
 8006492:	1a51      	subs	r1, r2, r1
 8006494:	61b9      	str	r1, [r7, #24]
 8006496:	4629      	mov	r1, r5
 8006498:	eb63 0301 	sbc.w	r3, r3, r1
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80064aa:	4659      	mov	r1, fp
 80064ac:	018b      	lsls	r3, r1, #6
 80064ae:	4651      	mov	r1, sl
 80064b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064b4:	4651      	mov	r1, sl
 80064b6:	018a      	lsls	r2, r1, #6
 80064b8:	4651      	mov	r1, sl
 80064ba:	ebb2 0801 	subs.w	r8, r2, r1
 80064be:	4659      	mov	r1, fp
 80064c0:	eb63 0901 	sbc.w	r9, r3, r1
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064d8:	4690      	mov	r8, r2
 80064da:	4699      	mov	r9, r3
 80064dc:	4623      	mov	r3, r4
 80064de:	eb18 0303 	adds.w	r3, r8, r3
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	462b      	mov	r3, r5
 80064e6:	eb49 0303 	adc.w	r3, r9, r3
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80064f8:	4629      	mov	r1, r5
 80064fa:	024b      	lsls	r3, r1, #9
 80064fc:	4621      	mov	r1, r4
 80064fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006502:	4621      	mov	r1, r4
 8006504:	024a      	lsls	r2, r1, #9
 8006506:	4610      	mov	r0, r2
 8006508:	4619      	mov	r1, r3
 800650a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800650e:	2200      	movs	r2, #0
 8006510:	65bb      	str	r3, [r7, #88]	; 0x58
 8006512:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006514:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006518:	f7fa fbb6 	bl	8000c88 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4613      	mov	r3, r2
 8006522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006526:	e065      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x420>
 8006528:	40023800 	.word	0x40023800
 800652c:	00f42400 	.word	0x00f42400
 8006530:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006534:	4b3d      	ldr	r3, [pc, #244]	; (800662c <HAL_RCC_GetSysClockFreq+0x458>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	099b      	lsrs	r3, r3, #6
 800653a:	2200      	movs	r2, #0
 800653c:	4618      	mov	r0, r3
 800653e:	4611      	mov	r1, r2
 8006540:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006544:	653b      	str	r3, [r7, #80]	; 0x50
 8006546:	2300      	movs	r3, #0
 8006548:	657b      	str	r3, [r7, #84]	; 0x54
 800654a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800654e:	4642      	mov	r2, r8
 8006550:	464b      	mov	r3, r9
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f04f 0100 	mov.w	r1, #0
 800655a:	0159      	lsls	r1, r3, #5
 800655c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006560:	0150      	lsls	r0, r2, #5
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4641      	mov	r1, r8
 8006568:	1a51      	subs	r1, r2, r1
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	4649      	mov	r1, r9
 800656e:	eb63 0301 	sbc.w	r3, r3, r1
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006580:	4659      	mov	r1, fp
 8006582:	018b      	lsls	r3, r1, #6
 8006584:	4651      	mov	r1, sl
 8006586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800658a:	4651      	mov	r1, sl
 800658c:	018a      	lsls	r2, r1, #6
 800658e:	4651      	mov	r1, sl
 8006590:	1a54      	subs	r4, r2, r1
 8006592:	4659      	mov	r1, fp
 8006594:	eb63 0501 	sbc.w	r5, r3, r1
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	00eb      	lsls	r3, r5, #3
 80065a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065a6:	00e2      	lsls	r2, r4, #3
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	4643      	mov	r3, r8
 80065ae:	18e3      	adds	r3, r4, r3
 80065b0:	603b      	str	r3, [r7, #0]
 80065b2:	464b      	mov	r3, r9
 80065b4:	eb45 0303 	adc.w	r3, r5, r3
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065c6:	4629      	mov	r1, r5
 80065c8:	028b      	lsls	r3, r1, #10
 80065ca:	4621      	mov	r1, r4
 80065cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d0:	4621      	mov	r1, r4
 80065d2:	028a      	lsls	r2, r1, #10
 80065d4:	4610      	mov	r0, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065dc:	2200      	movs	r2, #0
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80065e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065e6:	f7fa fb4f 	bl	8000c88 <__aeabi_uldivmod>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4613      	mov	r3, r2
 80065f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80065f4:	4b0d      	ldr	r3, [pc, #52]	; (800662c <HAL_RCC_GetSysClockFreq+0x458>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	0f1b      	lsrs	r3, r3, #28
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006612:	e003      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006614:	4b06      	ldr	r3, [pc, #24]	; (8006630 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800661a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800661c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006620:	4618      	mov	r0, r3
 8006622:	37b8      	adds	r7, #184	; 0xb8
 8006624:	46bd      	mov	sp, r7
 8006626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800662a:	bf00      	nop
 800662c:	40023800 	.word	0x40023800
 8006630:	00f42400 	.word	0x00f42400

08006634 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e28d      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8083 	beq.w	800675a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006654:	4b94      	ldr	r3, [pc, #592]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 030c 	and.w	r3, r3, #12
 800665c:	2b04      	cmp	r3, #4
 800665e:	d019      	beq.n	8006694 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006660:	4b91      	ldr	r3, [pc, #580]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006668:	2b08      	cmp	r3, #8
 800666a:	d106      	bne.n	800667a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800666c:	4b8e      	ldr	r3, [pc, #568]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006678:	d00c      	beq.n	8006694 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800667a:	4b8b      	ldr	r3, [pc, #556]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006682:	2b0c      	cmp	r3, #12
 8006684:	d112      	bne.n	80066ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006686:	4b88      	ldr	r3, [pc, #544]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006692:	d10b      	bne.n	80066ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006694:	4b84      	ldr	r3, [pc, #528]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d05b      	beq.n	8006758 <HAL_RCC_OscConfig+0x124>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d157      	bne.n	8006758 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e25a      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b4:	d106      	bne.n	80066c4 <HAL_RCC_OscConfig+0x90>
 80066b6:	4b7c      	ldr	r3, [pc, #496]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a7b      	ldr	r2, [pc, #492]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e01d      	b.n	8006700 <HAL_RCC_OscConfig+0xcc>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0xb4>
 80066ce:	4b76      	ldr	r3, [pc, #472]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a75      	ldr	r2, [pc, #468]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b73      	ldr	r3, [pc, #460]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a72      	ldr	r2, [pc, #456]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0xcc>
 80066e8:	4b6f      	ldr	r3, [pc, #444]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a6e      	ldr	r2, [pc, #440]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	4b6c      	ldr	r3, [pc, #432]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a6b      	ldr	r2, [pc, #428]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80066fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d013      	beq.n	8006730 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fc ff06 	bl	8003518 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006710:	f7fc ff02 	bl	8003518 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b64      	cmp	r3, #100	; 0x64
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e21f      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006722:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0xdc>
 800672e:	e014      	b.n	800675a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fc fef2 	bl	8003518 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006738:	f7fc feee 	bl	8003518 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	; 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e20b      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674a:	4b57      	ldr	r3, [pc, #348]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x104>
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d06f      	beq.n	8006846 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006766:	4b50      	ldr	r3, [pc, #320]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 030c 	and.w	r3, r3, #12
 800676e:	2b00      	cmp	r3, #0
 8006770:	d017      	beq.n	80067a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006772:	4b4d      	ldr	r3, [pc, #308]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800677a:	2b08      	cmp	r3, #8
 800677c:	d105      	bne.n	800678a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800677e:	4b4a      	ldr	r3, [pc, #296]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678a:	4b47      	ldr	r3, [pc, #284]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006792:	2b0c      	cmp	r3, #12
 8006794:	d11c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006796:	4b44      	ldr	r3, [pc, #272]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d116      	bne.n	80067d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a2:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_RCC_OscConfig+0x186>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d001      	beq.n	80067ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e1d3      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ba:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4937      	ldr	r1, [pc, #220]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ce:	e03a      	b.n	8006846 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d020      	beq.n	800681a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d8:	4b34      	ldr	r3, [pc, #208]	; (80068ac <HAL_RCC_OscConfig+0x278>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fc fe9b 	bl	8003518 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067e6:	f7fc fe97 	bl	8003518 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e1b4      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f8:	4b2b      	ldr	r3, [pc, #172]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006804:	4b28      	ldr	r3, [pc, #160]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4925      	ldr	r1, [pc, #148]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 8006814:	4313      	orrs	r3, r2
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	e015      	b.n	8006846 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <HAL_RCC_OscConfig+0x278>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006820:	f7fc fe7a 	bl	8003518 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006828:	f7fc fe76 	bl	8003518 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e193      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d036      	beq.n	80068c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d016      	beq.n	8006888 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <HAL_RCC_OscConfig+0x27c>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006860:	f7fc fe5a 	bl	8003518 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006868:	f7fc fe56 	bl	8003518 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e173      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_RCC_OscConfig+0x274>)
 800687c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x234>
 8006886:	e01b      	b.n	80068c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <HAL_RCC_OscConfig+0x27c>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688e:	f7fc fe43 	bl	8003518 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006894:	e00e      	b.n	80068b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006896:	f7fc fe3f 	bl	8003518 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d907      	bls.n	80068b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e15c      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
 80068a8:	40023800 	.word	0x40023800
 80068ac:	42470000 	.word	0x42470000
 80068b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b4:	4b8a      	ldr	r3, [pc, #552]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ea      	bne.n	8006896 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8097 	beq.w	80069fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d2:	4b83      	ldr	r3, [pc, #524]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10f      	bne.n	80068fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	4b7f      	ldr	r3, [pc, #508]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	4a7e      	ldr	r2, [pc, #504]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80068e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ec:	6413      	str	r3, [r2, #64]	; 0x40
 80068ee:	4b7c      	ldr	r3, [pc, #496]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f6:	60bb      	str	r3, [r7, #8]
 80068f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fa:	2301      	movs	r3, #1
 80068fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fe:	4b79      	ldr	r3, [pc, #484]	; (8006ae4 <HAL_RCC_OscConfig+0x4b0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d118      	bne.n	800693c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690a:	4b76      	ldr	r3, [pc, #472]	; (8006ae4 <HAL_RCC_OscConfig+0x4b0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a75      	ldr	r2, [pc, #468]	; (8006ae4 <HAL_RCC_OscConfig+0x4b0>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006916:	f7fc fdff 	bl	8003518 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fc fdfb 	bl	8003518 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e118      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006930:	4b6c      	ldr	r3, [pc, #432]	; (8006ae4 <HAL_RCC_OscConfig+0x4b0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x31e>
 8006944:	4b66      	ldr	r3, [pc, #408]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006948:	4a65      	ldr	r2, [pc, #404]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6713      	str	r3, [r2, #112]	; 0x70
 8006950:	e01c      	b.n	800698c <HAL_RCC_OscConfig+0x358>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b05      	cmp	r3, #5
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x340>
 800695a:	4b61      	ldr	r3, [pc, #388]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a60      	ldr	r2, [pc, #384]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006960:	f043 0304 	orr.w	r3, r3, #4
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	4b5e      	ldr	r3, [pc, #376]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a5d      	ldr	r2, [pc, #372]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0x358>
 8006974:	4b5a      	ldr	r3, [pc, #360]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4a59      	ldr	r2, [pc, #356]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	; 0x70
 8006980:	4b57      	ldr	r3, [pc, #348]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	4a56      	ldr	r2, [pc, #344]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006986:	f023 0304 	bic.w	r3, r3, #4
 800698a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006994:	f7fc fdc0 	bl	8003518 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800699c:	f7fc fdbc 	bl	8003518 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e0d7      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b2:	4b4b      	ldr	r3, [pc, #300]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0ee      	beq.n	800699c <HAL_RCC_OscConfig+0x368>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c0:	f7fc fdaa 	bl	8003518 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c6:	e00a      	b.n	80069de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fc fda6 	bl	8003518 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0c1      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069de:	4b40      	ldr	r3, [pc, #256]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1ee      	bne.n	80069c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d105      	bne.n	80069fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f0:	4b3b      	ldr	r3, [pc, #236]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	4a3a      	ldr	r2, [pc, #232]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 80069f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80ad 	beq.w	8006b60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a06:	4b36      	ldr	r3, [pc, #216]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d060      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d145      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1a:	4b33      	ldr	r3, [pc, #204]	; (8006ae8 <HAL_RCC_OscConfig+0x4b4>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fc fd7a 	bl	8003518 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fc fd76 	bl	8003518 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e093      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3a:	4b29      	ldr	r3, [pc, #164]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	019b      	lsls	r3, r3, #6
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	085b      	lsrs	r3, r3, #1
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	061b      	lsls	r3, r3, #24
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	071b      	lsls	r3, r3, #28
 8006a72:	491b      	ldr	r1, [pc, #108]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a78:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <HAL_RCC_OscConfig+0x4b4>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7e:	f7fc fd4b 	bl	8003518 <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a86:	f7fc fd47 	bl	8003518 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e064      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a98:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <HAL_RCC_OscConfig+0x452>
 8006aa4:	e05c      	b.n	8006b60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa6:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <HAL_RCC_OscConfig+0x4b4>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fc fd34 	bl	8003518 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ab4:	f7fc fd30 	bl	8003518 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e04d      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <HAL_RCC_OscConfig+0x4ac>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x480>
 8006ad2:	e045      	b.n	8006b60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d107      	bne.n	8006aec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e040      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	40007000 	.word	0x40007000
 8006ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006aec:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <HAL_RCC_OscConfig+0x538>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d030      	beq.n	8006b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d129      	bne.n	8006b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d122      	bne.n	8006b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d119      	bne.n	8006b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	3b01      	subs	r3, #1
 8006b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d10f      	bne.n	8006b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800

08006b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e041      	b.n	8006c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fc f9a8 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f000 fa96 	bl	80070e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d001      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e04e      	b.n	8006cc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a23      	ldr	r2, [pc, #140]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x80>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d01d      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x80>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1f      	ldr	r2, [pc, #124]	; (8006cd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x80>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1e      	ldr	r2, [pc, #120]	; (8006cdc <HAL_TIM_Base_Start_IT+0xcc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x80>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ce0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x80>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1b      	ldr	r2, [pc, #108]	; (8006ce4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x80>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x80>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a18      	ldr	r2, [pc, #96]	; (8006cec <HAL_TIM_Base_Start_IT+0xdc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d111      	bne.n	8006cb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b06      	cmp	r3, #6
 8006ca0:	d010      	beq.n	8006cc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0201 	orr.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb2:	e007      	b.n	8006cc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	40000400 	.word	0x40000400
 8006cdc:	40000800 	.word	0x40000800
 8006ce0:	40000c00 	.word	0x40000c00
 8006ce4:	40010400 	.word	0x40010400
 8006ce8:	40014000 	.word	0x40014000
 8006cec:	40001800 	.word	0x40001800

08006cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d122      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d11b      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0202 	mvn.w	r2, #2
 8006d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9b5 	bl	80070a2 <HAL_TIM_IC_CaptureCallback>
 8006d38:	e005      	b.n	8006d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f9a7 	bl	800708e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f9b8 	bl	80070b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d122      	bne.n	8006da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d11b      	bne.n	8006da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0204 	mvn.w	r2, #4
 8006d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f98b 	bl	80070a2 <HAL_TIM_IC_CaptureCallback>
 8006d8c:	e005      	b.n	8006d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f97d 	bl	800708e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f98e 	bl	80070b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d122      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d11b      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0208 	mvn.w	r2, #8
 8006dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f961 	bl	80070a2 <HAL_TIM_IC_CaptureCallback>
 8006de0:	e005      	b.n	8006dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f953 	bl	800708e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f964 	bl	80070b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	2b10      	cmp	r3, #16
 8006e00:	d122      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0310 	and.w	r3, r3, #16
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	d11b      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0210 	mvn.w	r2, #16
 8006e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f937 	bl	80070a2 <HAL_TIM_IC_CaptureCallback>
 8006e34:	e005      	b.n	8006e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f929 	bl	800708e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f93a 	bl	80070b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10e      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d107      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0201 	mvn.w	r2, #1
 8006e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fa fd1a 	bl	80018a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7e:	2b80      	cmp	r3, #128	; 0x80
 8006e80:	d10e      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8c:	2b80      	cmp	r3, #128	; 0x80
 8006e8e:	d107      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fae0 	bl	8007460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eaa:	2b40      	cmp	r3, #64	; 0x40
 8006eac:	d10e      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b40      	cmp	r3, #64	; 0x40
 8006eba:	d107      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f8ff 	bl	80070ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d107      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0220 	mvn.w	r2, #32
 8006ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 faaa 	bl	800744c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_TIM_ConfigClockSource+0x1c>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e0b4      	b.n	8007086 <HAL_TIM_ConfigClockSource+0x186>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f54:	d03e      	beq.n	8006fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8006f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f5a:	f200 8087 	bhi.w	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f62:	f000 8086 	beq.w	8007072 <HAL_TIM_ConfigClockSource+0x172>
 8006f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6a:	d87f      	bhi.n	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f6c:	2b70      	cmp	r3, #112	; 0x70
 8006f6e:	d01a      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8006f70:	2b70      	cmp	r3, #112	; 0x70
 8006f72:	d87b      	bhi.n	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f74:	2b60      	cmp	r3, #96	; 0x60
 8006f76:	d050      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x11a>
 8006f78:	2b60      	cmp	r3, #96	; 0x60
 8006f7a:	d877      	bhi.n	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f7c:	2b50      	cmp	r3, #80	; 0x50
 8006f7e:	d03c      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0xfa>
 8006f80:	2b50      	cmp	r3, #80	; 0x50
 8006f82:	d873      	bhi.n	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d058      	beq.n	800703a <HAL_TIM_ConfigClockSource+0x13a>
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d86f      	bhi.n	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f8c:	2b30      	cmp	r3, #48	; 0x30
 8006f8e:	d064      	beq.n	800705a <HAL_TIM_ConfigClockSource+0x15a>
 8006f90:	2b30      	cmp	r3, #48	; 0x30
 8006f92:	d86b      	bhi.n	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d060      	beq.n	800705a <HAL_TIM_ConfigClockSource+0x15a>
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d867      	bhi.n	800706c <HAL_TIM_ConfigClockSource+0x16c>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d05c      	beq.n	800705a <HAL_TIM_ConfigClockSource+0x15a>
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d05a      	beq.n	800705a <HAL_TIM_ConfigClockSource+0x15a>
 8006fa4:	e062      	b.n	800706c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6899      	ldr	r1, [r3, #8]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f000 f9ad 	bl	8007314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	609a      	str	r2, [r3, #8]
      break;
 8006fd2:	e04f      	b.n	8007074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6899      	ldr	r1, [r3, #8]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f000 f996 	bl	8007314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ff6:	609a      	str	r2, [r3, #8]
      break;
 8006ff8:	e03c      	b.n	8007074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6859      	ldr	r1, [r3, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	461a      	mov	r2, r3
 8007008:	f000 f90a 	bl	8007220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2150      	movs	r1, #80	; 0x50
 8007012:	4618      	mov	r0, r3
 8007014:	f000 f963 	bl	80072de <TIM_ITRx_SetConfig>
      break;
 8007018:	e02c      	b.n	8007074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6859      	ldr	r1, [r3, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	461a      	mov	r2, r3
 8007028:	f000 f929 	bl	800727e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2160      	movs	r1, #96	; 0x60
 8007032:	4618      	mov	r0, r3
 8007034:	f000 f953 	bl	80072de <TIM_ITRx_SetConfig>
      break;
 8007038:	e01c      	b.n	8007074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6859      	ldr	r1, [r3, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	461a      	mov	r2, r3
 8007048:	f000 f8ea 	bl	8007220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2140      	movs	r1, #64	; 0x40
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f943 	bl	80072de <TIM_ITRx_SetConfig>
      break;
 8007058:	e00c      	b.n	8007074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4619      	mov	r1, r3
 8007064:	4610      	mov	r0, r2
 8007066:	f000 f93a 	bl	80072de <TIM_ITRx_SetConfig>
      break;
 800706a:	e003      	b.n	8007074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
      break;
 8007070:	e000      	b.n	8007074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a40      	ldr	r2, [pc, #256]	; (80071f4 <TIM_Base_SetConfig+0x114>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d013      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fe:	d00f      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a3d      	ldr	r2, [pc, #244]	; (80071f8 <TIM_Base_SetConfig+0x118>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00b      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a3c      	ldr	r2, [pc, #240]	; (80071fc <TIM_Base_SetConfig+0x11c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d007      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a3b      	ldr	r2, [pc, #236]	; (8007200 <TIM_Base_SetConfig+0x120>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a3a      	ldr	r2, [pc, #232]	; (8007204 <TIM_Base_SetConfig+0x124>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d108      	bne.n	8007132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a2f      	ldr	r2, [pc, #188]	; (80071f4 <TIM_Base_SetConfig+0x114>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d02b      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007140:	d027      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a2c      	ldr	r2, [pc, #176]	; (80071f8 <TIM_Base_SetConfig+0x118>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d023      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a2b      	ldr	r2, [pc, #172]	; (80071fc <TIM_Base_SetConfig+0x11c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01f      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a2a      	ldr	r2, [pc, #168]	; (8007200 <TIM_Base_SetConfig+0x120>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01b      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a29      	ldr	r2, [pc, #164]	; (8007204 <TIM_Base_SetConfig+0x124>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d017      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a28      	ldr	r2, [pc, #160]	; (8007208 <TIM_Base_SetConfig+0x128>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a27      	ldr	r2, [pc, #156]	; (800720c <TIM_Base_SetConfig+0x12c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00f      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a26      	ldr	r2, [pc, #152]	; (8007210 <TIM_Base_SetConfig+0x130>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00b      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a25      	ldr	r2, [pc, #148]	; (8007214 <TIM_Base_SetConfig+0x134>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d007      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a24      	ldr	r2, [pc, #144]	; (8007218 <TIM_Base_SetConfig+0x138>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a23      	ldr	r2, [pc, #140]	; (800721c <TIM_Base_SetConfig+0x13c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d108      	bne.n	80071a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a0a      	ldr	r2, [pc, #40]	; (80071f4 <TIM_Base_SetConfig+0x114>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d003      	beq.n	80071d8 <TIM_Base_SetConfig+0xf8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a0c      	ldr	r2, [pc, #48]	; (8007204 <TIM_Base_SetConfig+0x124>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d103      	bne.n	80071e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	615a      	str	r2, [r3, #20]
}
 80071e6:	bf00      	nop
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40010000 	.word	0x40010000
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	40010400 	.word	0x40010400
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800
 8007214:	40001800 	.word	0x40001800
 8007218:	40001c00 	.word	0x40001c00
 800721c:	40002000 	.word	0x40002000

08007220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f023 0201 	bic.w	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800724a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f023 030a 	bic.w	r3, r3, #10
 800725c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	621a      	str	r2, [r3, #32]
}
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800727e:	b480      	push	{r7}
 8007280:	b087      	sub	sp, #28
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0210 	bic.w	r2, r3, #16
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	031b      	lsls	r3, r3, #12
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	621a      	str	r2, [r3, #32]
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072de:	b480      	push	{r7}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f043 0307 	orr.w	r3, r3, #7
 8007300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	609a      	str	r2, [r3, #8]
}
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800732e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	021a      	lsls	r2, r3, #8
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	431a      	orrs	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4313      	orrs	r3, r2
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	609a      	str	r2, [r3, #8]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007368:	2302      	movs	r3, #2
 800736a:	e05a      	b.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a21      	ldr	r2, [pc, #132]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d022      	beq.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b8:	d01d      	beq.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d018      	beq.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a1a      	ldr	r2, [pc, #104]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00e      	beq.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a18      	ldr	r2, [pc, #96]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d009      	beq.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a17      	ldr	r2, [pc, #92]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d004      	beq.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a15      	ldr	r2, [pc, #84]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d10c      	bne.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	4313      	orrs	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40010000 	.word	0x40010000
 8007434:	40000400 	.word	0x40000400
 8007438:	40000800 	.word	0x40000800
 800743c:	40000c00 	.word	0x40000c00
 8007440:	40010400 	.word	0x40010400
 8007444:	40014000 	.word	0x40014000
 8007448:	40001800 	.word	0x40001800

0800744c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e03f      	b.n	8007506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fb fd74 	bl	8002f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2224      	movs	r2, #36	; 0x24
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fe81 	bl	80081c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b08a      	sub	sp, #40	; 0x28
 8007512:	af02      	add	r7, sp, #8
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	4613      	mov	r3, r2
 800751c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b20      	cmp	r3, #32
 800752c:	d17c      	bne.n	8007628 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_UART_Transmit+0x2c>
 8007534:	88fb      	ldrh	r3, [r7, #6]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e075      	b.n	800762a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_UART_Transmit+0x3e>
 8007548:	2302      	movs	r3, #2
 800754a:	e06e      	b.n	800762a <HAL_UART_Transmit+0x11c>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2221      	movs	r2, #33	; 0x21
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007562:	f7fb ffd9 	bl	8003518 <HAL_GetTick>
 8007566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	88fa      	ldrh	r2, [r7, #6]
 800756c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	88fa      	ldrh	r2, [r7, #6]
 8007572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800757c:	d108      	bne.n	8007590 <HAL_UART_Transmit+0x82>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e003      	b.n	8007598 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80075a0:	e02a      	b.n	80075f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2200      	movs	r2, #0
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fbc1 	bl	8007d34 <UART_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e036      	b.n	800762a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10b      	bne.n	80075da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	3302      	adds	r3, #2
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	e007      	b.n	80075ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	3301      	adds	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1cf      	bne.n	80075a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2200      	movs	r2, #0
 800760a:	2140      	movs	r1, #64	; 0x40
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fb91 	bl	8007d34 <UART_WaitOnFlagUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e006      	b.n	800762a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	e000      	b.n	800762a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007628:	2302      	movs	r3, #2
  }
}
 800762a:	4618      	mov	r0, r3
 800762c:	3720      	adds	r7, #32
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b08a      	sub	sp, #40	; 0x28
 8007636:	af02      	add	r7, sp, #8
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	603b      	str	r3, [r7, #0]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b20      	cmp	r3, #32
 8007650:	f040 808c 	bne.w	800776c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_UART_Receive+0x2e>
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e084      	b.n	800776e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_UART_Receive+0x40>
 800766e:	2302      	movs	r3, #2
 8007670:	e07d      	b.n	800776e <HAL_UART_Receive+0x13c>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2222      	movs	r2, #34	; 0x22
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800768e:	f7fb ff43 	bl	8003518 <HAL_GetTick>
 8007692:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	88fa      	ldrh	r2, [r7, #6]
 8007698:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	88fa      	ldrh	r2, [r7, #6]
 800769e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a8:	d108      	bne.n	80076bc <HAL_UART_Receive+0x8a>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d104      	bne.n	80076bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	e003      	b.n	80076c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80076cc:	e043      	b.n	8007756 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2120      	movs	r1, #32
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fb2b 	bl	8007d34 <UART_WaitOnFlagUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e042      	b.n	800776e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10c      	bne.n	8007708 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	3302      	adds	r3, #2
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e01f      	b.n	8007748 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007710:	d007      	beq.n	8007722 <HAL_UART_Receive+0xf0>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <HAL_UART_Receive+0xfe>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	b2da      	uxtb	r2, r3
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	e008      	b.n	8007742 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773c:	b2da      	uxtb	r2, r3
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	3301      	adds	r3, #1
 8007746:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1b6      	bne.n	80076ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	e000      	b.n	800776e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800776c:	2302      	movs	r3, #2
  }
}
 800776e:	4618      	mov	r0, r3
 8007770:	3720      	adds	r7, #32
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	4613      	mov	r3, r2
 8007782:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b20      	cmp	r3, #32
 800778e:	d11d      	bne.n	80077cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_UART_Receive_IT+0x26>
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e016      	b.n	80077ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Receive_IT+0x38>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e00f      	b.n	80077ce <HAL_UART_Receive_IT+0x58>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	461a      	mov	r2, r3
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fb24 	bl	8007e10 <UART_Start_Receive_IT>
 80077c8:	4603      	mov	r3, r0
 80077ca:	e000      	b.n	80077ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077cc:	2302      	movs	r3, #2
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b0ba      	sub	sp, #232	; 0xe8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007804:	2300      	movs	r3, #0
 8007806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800780a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10f      	bne.n	800783e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007822:	f003 0320 	and.w	r3, r3, #32
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <HAL_UART_IRQHandler+0x66>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fc07 	bl	800804a <UART_Receive_IT>
      return;
 800783c:	e256      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800783e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 80de 	beq.w	8007a04 <HAL_UART_IRQHandler+0x22c>
 8007848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007858:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80d1 	beq.w	8007a04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <HAL_UART_IRQHandler+0xae>
 800786e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f043 0201 	orr.w	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <HAL_UART_IRQHandler+0xd2>
 8007892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	f043 0202 	orr.w	r2, r3, #2
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <HAL_UART_IRQHandler+0xf6>
 80078b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	f043 0204 	orr.w	r2, r3, #4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d011      	beq.n	80078fe <HAL_UART_IRQHandler+0x126>
 80078da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f043 0208 	orr.w	r2, r3, #8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 81ed 	beq.w	8007ce2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <HAL_UART_IRQHandler+0x14e>
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fb92 	bl	800804a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <HAL_UART_IRQHandler+0x17a>
 800794a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d04f      	beq.n	80079f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa9a 	bl	8007e8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d141      	bne.n	80079ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3314      	adds	r3, #20
 800796c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800797c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3314      	adds	r3, #20
 800798e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800799e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1d9      	bne.n	8007966 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d013      	beq.n	80079e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	4a7d      	ldr	r2, [pc, #500]	; (8007bb4 <HAL_UART_IRQHandler+0x3dc>)
 80079c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fc f9c9 	bl	8003d5e <HAL_DMA_Abort_IT>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d016      	beq.n	8007a00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079dc:	4610      	mov	r0, r2
 80079de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	e00e      	b.n	8007a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f990 	bl	8007d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	e00a      	b.n	8007a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f98c 	bl	8007d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	e006      	b.n	8007a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f988 	bl	8007d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079fe:	e170      	b.n	8007ce2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a00:	bf00      	nop
    return;
 8007a02:	e16e      	b.n	8007ce2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	f040 814a 	bne.w	8007ca2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8143 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 813c 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	f040 80b4 	bne.w	8007bb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8140 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	f080 8139 	bcs.w	8007ce6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a86:	f000 8088 	beq.w	8007b9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1d9      	bne.n	8007a8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae8:	f023 0301 	bic.w	r3, r3, #1
 8007aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3314      	adds	r3, #20
 8007af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007afa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007afe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e1      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3314      	adds	r3, #20
 8007b18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3314      	adds	r3, #20
 8007b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e3      	bne.n	8007b12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b6a:	f023 0310 	bic.w	r3, r3, #16
 8007b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	330c      	adds	r3, #12
 8007b78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e3      	bne.n	8007b58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fc f872 	bl	8003c7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8b6 	bl	8007d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bb0:	e099      	b.n	8007ce6 <HAL_UART_IRQHandler+0x50e>
 8007bb2:	bf00      	nop
 8007bb4:	08007f53 	.word	0x08007f53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 808b 	beq.w	8007cea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8086 	beq.w	8007cea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c02:	647a      	str	r2, [r7, #68]	; 0x44
 8007c04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e3      	bne.n	8007bde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3314      	adds	r3, #20
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	623b      	str	r3, [r7, #32]
   return(result);
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3314      	adds	r3, #20
 8007c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e3      	bne.n	8007c16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0310 	bic.w	r3, r3, #16
 8007c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	330c      	adds	r3, #12
 8007c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c80:	61fa      	str	r2, [r7, #28]
 8007c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	69b9      	ldr	r1, [r7, #24]
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e3      	bne.n	8007c5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f83e 	bl	8007d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ca0:	e023      	b.n	8007cea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d009      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x4ea>
 8007cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f95d 	bl	8007f7a <UART_Transmit_IT>
    return;
 8007cc0:	e014      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00e      	beq.n	8007cec <HAL_UART_IRQHandler+0x514>
 8007cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f99d 	bl	800801a <UART_EndTransmit_IT>
    return;
 8007ce0:	e004      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
    return;
 8007ce2:	bf00      	nop
 8007ce4:	e002      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
      return;
 8007ce6:	bf00      	nop
 8007ce8:	e000      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
      return;
 8007cea:	bf00      	nop
  }
}
 8007cec:	37e8      	adds	r7, #232	; 0xe8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop

08007cf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b090      	sub	sp, #64	; 0x40
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	4613      	mov	r3, r2
 8007d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d44:	e050      	b.n	8007de8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d4c:	d04c      	beq.n	8007de8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d54:	f7fb fbe0 	bl	8003518 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d241      	bcs.n	8007de8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d84:	637a      	str	r2, [r7, #52]	; 0x34
 8007d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e5      	bne.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3314      	adds	r3, #20
 8007d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	613b      	str	r3, [r7, #16]
   return(result);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3314      	adds	r3, #20
 8007db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007db8:	623a      	str	r2, [r7, #32]
 8007dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	69f9      	ldr	r1, [r7, #28]
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e5      	bne.n	8007d98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e00f      	b.n	8007e08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4013      	ands	r3, r2
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	461a      	mov	r2, r3
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d09f      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3740      	adds	r7, #64	; 0x40
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	88fa      	ldrh	r2, [r7, #6]
 8007e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2222      	movs	r2, #34	; 0x22
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	695a      	ldr	r2, [r3, #20]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0201 	orr.w	r2, r2, #1
 8007e6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0220 	orr.w	r2, r2, #32
 8007e7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b095      	sub	sp, #84	; 0x54
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	330c      	adds	r3, #12
 8007eb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eb4:	643a      	str	r2, [r7, #64]	; 0x40
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e5      	bne.n	8007e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3314      	adds	r3, #20
 8007ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3314      	adds	r3, #20
 8007ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e5      	bne.n	8007ec8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d119      	bne.n	8007f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f023 0310 	bic.w	r3, r3, #16
 8007f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f24:	61ba      	str	r2, [r7, #24]
 8007f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6979      	ldr	r1, [r7, #20]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	613b      	str	r3, [r7, #16]
   return(result);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e5      	bne.n	8007f04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f46:	bf00      	nop
 8007f48:	3754      	adds	r7, #84	; 0x54
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fecb 	bl	8007d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b21      	cmp	r3, #33	; 0x21
 8007f8c:	d13e      	bne.n	800800c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f96:	d114      	bne.n	8007fc2 <UART_Transmit_IT+0x48>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d110      	bne.n	8007fc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	1c9a      	adds	r2, r3, #2
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	621a      	str	r2, [r3, #32]
 8007fc0:	e008      	b.n	8007fd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	1c59      	adds	r1, r3, #1
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6211      	str	r1, [r2, #32]
 8007fcc:	781a      	ldrb	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10f      	bne.n	8008008 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ff6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008006:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800800c:	2302      	movs	r3, #2
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008030:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fe5a 	bl	8007cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b08c      	sub	sp, #48	; 0x30
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b22      	cmp	r3, #34	; 0x22
 800805c:	f040 80ab 	bne.w	80081b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008068:	d117      	bne.n	800809a <UART_Receive_IT+0x50>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d113      	bne.n	800809a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	b29b      	uxth	r3, r3
 8008084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008088:	b29a      	uxth	r2, r3
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	1c9a      	adds	r2, r3, #2
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	629a      	str	r2, [r3, #40]	; 0x28
 8008098:	e026      	b.n	80080e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ac:	d007      	beq.n	80080be <UART_Receive_IT+0x74>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <UART_Receive_IT+0x82>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	e008      	b.n	80080de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4619      	mov	r1, r3
 80080f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d15a      	bne.n	80081b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0220 	bic.w	r2, r2, #32
 800810a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800811a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695a      	ldr	r2, [r3, #20]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008138:	2b01      	cmp	r3, #1
 800813a:	d135      	bne.n	80081a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	613b      	str	r3, [r7, #16]
   return(result);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f023 0310 	bic.w	r3, r3, #16
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	330c      	adds	r3, #12
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	623a      	str	r2, [r7, #32]
 8008164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	69f9      	ldr	r1, [r7, #28]
 8008168:	6a3a      	ldr	r2, [r7, #32]
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b10      	cmp	r3, #16
 8008182:	d10a      	bne.n	800819a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fdbb 	bl	8007d1c <HAL_UARTEx_RxEventCallback>
 80081a6:	e002      	b.n	80081ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7f9 f817 	bl	80011dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	e002      	b.n	80081b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	e000      	b.n	80081b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081b6:	2302      	movs	r3, #2
  }
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3730      	adds	r7, #48	; 0x30
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c4:	b0c0      	sub	sp, #256	; 0x100
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081dc:	68d9      	ldr	r1, [r3, #12]
 80081de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	ea40 0301 	orr.w	r3, r0, r1
 80081e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	431a      	orrs	r2, r3
 8008200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008218:	f021 010c 	bic.w	r1, r1, #12
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008226:	430b      	orrs	r3, r1
 8008228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800822a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823a:	6999      	ldr	r1, [r3, #24]
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	ea40 0301 	orr.w	r3, r0, r1
 8008246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b8f      	ldr	r3, [pc, #572]	; (800848c <UART_SetConfig+0x2cc>)
 8008250:	429a      	cmp	r2, r3
 8008252:	d005      	beq.n	8008260 <UART_SetConfig+0xa0>
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b8d      	ldr	r3, [pc, #564]	; (8008490 <UART_SetConfig+0x2d0>)
 800825c:	429a      	cmp	r2, r3
 800825e:	d104      	bne.n	800826a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008260:	f7fd fc7a 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 8008264:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008268:	e003      	b.n	8008272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800826a:	f7fd fc61 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 800826e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827c:	f040 810c 	bne.w	8008498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008284:	2200      	movs	r2, #0
 8008286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800828a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800828e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008292:	4622      	mov	r2, r4
 8008294:	462b      	mov	r3, r5
 8008296:	1891      	adds	r1, r2, r2
 8008298:	65b9      	str	r1, [r7, #88]	; 0x58
 800829a:	415b      	adcs	r3, r3
 800829c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800829e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082a2:	4621      	mov	r1, r4
 80082a4:	eb12 0801 	adds.w	r8, r2, r1
 80082a8:	4629      	mov	r1, r5
 80082aa:	eb43 0901 	adc.w	r9, r3, r1
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082c2:	4690      	mov	r8, r2
 80082c4:	4699      	mov	r9, r3
 80082c6:	4623      	mov	r3, r4
 80082c8:	eb18 0303 	adds.w	r3, r8, r3
 80082cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082d0:	462b      	mov	r3, r5
 80082d2:	eb49 0303 	adc.w	r3, r9, r3
 80082d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082ee:	460b      	mov	r3, r1
 80082f0:	18db      	adds	r3, r3, r3
 80082f2:	653b      	str	r3, [r7, #80]	; 0x50
 80082f4:	4613      	mov	r3, r2
 80082f6:	eb42 0303 	adc.w	r3, r2, r3
 80082fa:	657b      	str	r3, [r7, #84]	; 0x54
 80082fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008304:	f7f8 fcc0 	bl	8000c88 <__aeabi_uldivmod>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4b61      	ldr	r3, [pc, #388]	; (8008494 <UART_SetConfig+0x2d4>)
 800830e:	fba3 2302 	umull	r2, r3, r3, r2
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	011c      	lsls	r4, r3, #4
 8008316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800831a:	2200      	movs	r2, #0
 800831c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008320:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008328:	4642      	mov	r2, r8
 800832a:	464b      	mov	r3, r9
 800832c:	1891      	adds	r1, r2, r2
 800832e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008330:	415b      	adcs	r3, r3
 8008332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008338:	4641      	mov	r1, r8
 800833a:	eb12 0a01 	adds.w	sl, r2, r1
 800833e:	4649      	mov	r1, r9
 8008340:	eb43 0b01 	adc.w	fp, r3, r1
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008358:	4692      	mov	sl, r2
 800835a:	469b      	mov	fp, r3
 800835c:	4643      	mov	r3, r8
 800835e:	eb1a 0303 	adds.w	r3, sl, r3
 8008362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008366:	464b      	mov	r3, r9
 8008368:	eb4b 0303 	adc.w	r3, fp, r3
 800836c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800837c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008384:	460b      	mov	r3, r1
 8008386:	18db      	adds	r3, r3, r3
 8008388:	643b      	str	r3, [r7, #64]	; 0x40
 800838a:	4613      	mov	r3, r2
 800838c:	eb42 0303 	adc.w	r3, r2, r3
 8008390:	647b      	str	r3, [r7, #68]	; 0x44
 8008392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800839a:	f7f8 fc75 	bl	8000c88 <__aeabi_uldivmod>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	4b3b      	ldr	r3, [pc, #236]	; (8008494 <UART_SetConfig+0x2d4>)
 80083a6:	fba3 2301 	umull	r2, r3, r3, r1
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	2264      	movs	r2, #100	; 0x64
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	1acb      	subs	r3, r1, r3
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083ba:	4b36      	ldr	r3, [pc, #216]	; (8008494 <UART_SetConfig+0x2d4>)
 80083bc:	fba3 2302 	umull	r2, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083c8:	441c      	add	r4, r3
 80083ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083dc:	4642      	mov	r2, r8
 80083de:	464b      	mov	r3, r9
 80083e0:	1891      	adds	r1, r2, r2
 80083e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80083e4:	415b      	adcs	r3, r3
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083ec:	4641      	mov	r1, r8
 80083ee:	1851      	adds	r1, r2, r1
 80083f0:	6339      	str	r1, [r7, #48]	; 0x30
 80083f2:	4649      	mov	r1, r9
 80083f4:	414b      	adcs	r3, r1
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008404:	4659      	mov	r1, fp
 8008406:	00cb      	lsls	r3, r1, #3
 8008408:	4651      	mov	r1, sl
 800840a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800840e:	4651      	mov	r1, sl
 8008410:	00ca      	lsls	r2, r1, #3
 8008412:	4610      	mov	r0, r2
 8008414:	4619      	mov	r1, r3
 8008416:	4603      	mov	r3, r0
 8008418:	4642      	mov	r2, r8
 800841a:	189b      	adds	r3, r3, r2
 800841c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008420:	464b      	mov	r3, r9
 8008422:	460a      	mov	r2, r1
 8008424:	eb42 0303 	adc.w	r3, r2, r3
 8008428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800842c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008438:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800843c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008440:	460b      	mov	r3, r1
 8008442:	18db      	adds	r3, r3, r3
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
 8008446:	4613      	mov	r3, r2
 8008448:	eb42 0303 	adc.w	r3, r2, r3
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800844e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008456:	f7f8 fc17 	bl	8000c88 <__aeabi_uldivmod>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <UART_SetConfig+0x2d4>)
 8008460:	fba3 1302 	umull	r1, r3, r3, r2
 8008464:	095b      	lsrs	r3, r3, #5
 8008466:	2164      	movs	r1, #100	; 0x64
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	3332      	adds	r3, #50	; 0x32
 8008472:	4a08      	ldr	r2, [pc, #32]	; (8008494 <UART_SetConfig+0x2d4>)
 8008474:	fba2 2303 	umull	r2, r3, r2, r3
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	f003 0207 	and.w	r2, r3, #7
 800847e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4422      	add	r2, r4
 8008486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008488:	e105      	b.n	8008696 <UART_SetConfig+0x4d6>
 800848a:	bf00      	nop
 800848c:	40011000 	.word	0x40011000
 8008490:	40011400 	.word	0x40011400
 8008494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849c:	2200      	movs	r2, #0
 800849e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084aa:	4642      	mov	r2, r8
 80084ac:	464b      	mov	r3, r9
 80084ae:	1891      	adds	r1, r2, r2
 80084b0:	6239      	str	r1, [r7, #32]
 80084b2:	415b      	adcs	r3, r3
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
 80084b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084ba:	4641      	mov	r1, r8
 80084bc:	1854      	adds	r4, r2, r1
 80084be:	4649      	mov	r1, r9
 80084c0:	eb43 0501 	adc.w	r5, r3, r1
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	00eb      	lsls	r3, r5, #3
 80084ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084d2:	00e2      	lsls	r2, r4, #3
 80084d4:	4614      	mov	r4, r2
 80084d6:	461d      	mov	r5, r3
 80084d8:	4643      	mov	r3, r8
 80084da:	18e3      	adds	r3, r4, r3
 80084dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084e0:	464b      	mov	r3, r9
 80084e2:	eb45 0303 	adc.w	r3, r5, r3
 80084e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084fa:	f04f 0200 	mov.w	r2, #0
 80084fe:	f04f 0300 	mov.w	r3, #0
 8008502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008506:	4629      	mov	r1, r5
 8008508:	008b      	lsls	r3, r1, #2
 800850a:	4621      	mov	r1, r4
 800850c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008510:	4621      	mov	r1, r4
 8008512:	008a      	lsls	r2, r1, #2
 8008514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008518:	f7f8 fbb6 	bl	8000c88 <__aeabi_uldivmod>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4b60      	ldr	r3, [pc, #384]	; (80086a4 <UART_SetConfig+0x4e4>)
 8008522:	fba3 2302 	umull	r2, r3, r3, r2
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	011c      	lsls	r4, r3, #4
 800852a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800852e:	2200      	movs	r2, #0
 8008530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008534:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800853c:	4642      	mov	r2, r8
 800853e:	464b      	mov	r3, r9
 8008540:	1891      	adds	r1, r2, r2
 8008542:	61b9      	str	r1, [r7, #24]
 8008544:	415b      	adcs	r3, r3
 8008546:	61fb      	str	r3, [r7, #28]
 8008548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800854c:	4641      	mov	r1, r8
 800854e:	1851      	adds	r1, r2, r1
 8008550:	6139      	str	r1, [r7, #16]
 8008552:	4649      	mov	r1, r9
 8008554:	414b      	adcs	r3, r1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008564:	4659      	mov	r1, fp
 8008566:	00cb      	lsls	r3, r1, #3
 8008568:	4651      	mov	r1, sl
 800856a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800856e:	4651      	mov	r1, sl
 8008570:	00ca      	lsls	r2, r1, #3
 8008572:	4610      	mov	r0, r2
 8008574:	4619      	mov	r1, r3
 8008576:	4603      	mov	r3, r0
 8008578:	4642      	mov	r2, r8
 800857a:	189b      	adds	r3, r3, r2
 800857c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008580:	464b      	mov	r3, r9
 8008582:	460a      	mov	r2, r1
 8008584:	eb42 0303 	adc.w	r3, r2, r3
 8008588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	67bb      	str	r3, [r7, #120]	; 0x78
 8008596:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085a4:	4649      	mov	r1, r9
 80085a6:	008b      	lsls	r3, r1, #2
 80085a8:	4641      	mov	r1, r8
 80085aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ae:	4641      	mov	r1, r8
 80085b0:	008a      	lsls	r2, r1, #2
 80085b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085b6:	f7f8 fb67 	bl	8000c88 <__aeabi_uldivmod>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4b39      	ldr	r3, [pc, #228]	; (80086a4 <UART_SetConfig+0x4e4>)
 80085c0:	fba3 1302 	umull	r1, r3, r3, r2
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	2164      	movs	r1, #100	; 0x64
 80085c8:	fb01 f303 	mul.w	r3, r1, r3
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	3332      	adds	r3, #50	; 0x32
 80085d2:	4a34      	ldr	r2, [pc, #208]	; (80086a4 <UART_SetConfig+0x4e4>)
 80085d4:	fba2 2303 	umull	r2, r3, r2, r3
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085de:	441c      	add	r4, r3
 80085e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e4:	2200      	movs	r2, #0
 80085e6:	673b      	str	r3, [r7, #112]	; 0x70
 80085e8:	677a      	str	r2, [r7, #116]	; 0x74
 80085ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085ee:	4642      	mov	r2, r8
 80085f0:	464b      	mov	r3, r9
 80085f2:	1891      	adds	r1, r2, r2
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	415b      	adcs	r3, r3
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085fe:	4641      	mov	r1, r8
 8008600:	1851      	adds	r1, r2, r1
 8008602:	6039      	str	r1, [r7, #0]
 8008604:	4649      	mov	r1, r9
 8008606:	414b      	adcs	r3, r1
 8008608:	607b      	str	r3, [r7, #4]
 800860a:	f04f 0200 	mov.w	r2, #0
 800860e:	f04f 0300 	mov.w	r3, #0
 8008612:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008616:	4659      	mov	r1, fp
 8008618:	00cb      	lsls	r3, r1, #3
 800861a:	4651      	mov	r1, sl
 800861c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008620:	4651      	mov	r1, sl
 8008622:	00ca      	lsls	r2, r1, #3
 8008624:	4610      	mov	r0, r2
 8008626:	4619      	mov	r1, r3
 8008628:	4603      	mov	r3, r0
 800862a:	4642      	mov	r2, r8
 800862c:	189b      	adds	r3, r3, r2
 800862e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008630:	464b      	mov	r3, r9
 8008632:	460a      	mov	r2, r1
 8008634:	eb42 0303 	adc.w	r3, r2, r3
 8008638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800863a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	663b      	str	r3, [r7, #96]	; 0x60
 8008644:	667a      	str	r2, [r7, #100]	; 0x64
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008652:	4649      	mov	r1, r9
 8008654:	008b      	lsls	r3, r1, #2
 8008656:	4641      	mov	r1, r8
 8008658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800865c:	4641      	mov	r1, r8
 800865e:	008a      	lsls	r2, r1, #2
 8008660:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008664:	f7f8 fb10 	bl	8000c88 <__aeabi_uldivmod>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <UART_SetConfig+0x4e4>)
 800866e:	fba3 1302 	umull	r1, r3, r3, r2
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	2164      	movs	r1, #100	; 0x64
 8008676:	fb01 f303 	mul.w	r3, r1, r3
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	3332      	adds	r3, #50	; 0x32
 8008680:	4a08      	ldr	r2, [pc, #32]	; (80086a4 <UART_SetConfig+0x4e4>)
 8008682:	fba2 2303 	umull	r2, r3, r2, r3
 8008686:	095b      	lsrs	r3, r3, #5
 8008688:	f003 020f 	and.w	r2, r3, #15
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4422      	add	r2, r4
 8008694:	609a      	str	r2, [r3, #8]
}
 8008696:	bf00      	nop
 8008698:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800869c:	46bd      	mov	sp, r7
 800869e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086a2:	bf00      	nop
 80086a4:	51eb851f 	.word	0x51eb851f

080086a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086a8:	b084      	sub	sp, #16
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	f107 001c 	add.w	r0, r7, #28
 80086b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d122      	bne.n	8008706 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d105      	bne.n	80086fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fbe8 	bl	8009ed0 <USB_CoreReset>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]
 8008704:	e01a      	b.n	800873c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 fbdc 	bl	8009ed0 <USB_CoreReset>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800871c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	639a      	str	r2, [r3, #56]	; 0x38
 800872e:	e005      	b.n	800873c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10b      	bne.n	800875a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f043 0206 	orr.w	r2, r3, #6
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f043 0220 	orr.w	r2, r3, #32
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008766:	b004      	add	sp, #16
 8008768:	4770      	bx	lr
	...

0800876c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d165      	bne.n	800884c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	4a41      	ldr	r2, [pc, #260]	; (8008888 <USB_SetTurnaroundTime+0x11c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d906      	bls.n	8008796 <USB_SetTurnaroundTime+0x2a>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4a40      	ldr	r2, [pc, #256]	; (800888c <USB_SetTurnaroundTime+0x120>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d202      	bcs.n	8008796 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008790:	230f      	movs	r3, #15
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	e062      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	4a3c      	ldr	r2, [pc, #240]	; (800888c <USB_SetTurnaroundTime+0x120>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d306      	bcc.n	80087ac <USB_SetTurnaroundTime+0x40>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4a3b      	ldr	r2, [pc, #236]	; (8008890 <USB_SetTurnaroundTime+0x124>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d202      	bcs.n	80087ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80087a6:	230e      	movs	r3, #14
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	e057      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	4a38      	ldr	r2, [pc, #224]	; (8008890 <USB_SetTurnaroundTime+0x124>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d306      	bcc.n	80087c2 <USB_SetTurnaroundTime+0x56>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4a37      	ldr	r2, [pc, #220]	; (8008894 <USB_SetTurnaroundTime+0x128>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d202      	bcs.n	80087c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80087bc:	230d      	movs	r3, #13
 80087be:	617b      	str	r3, [r7, #20]
 80087c0:	e04c      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4a33      	ldr	r2, [pc, #204]	; (8008894 <USB_SetTurnaroundTime+0x128>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d306      	bcc.n	80087d8 <USB_SetTurnaroundTime+0x6c>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	4a32      	ldr	r2, [pc, #200]	; (8008898 <USB_SetTurnaroundTime+0x12c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d802      	bhi.n	80087d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80087d2:	230c      	movs	r3, #12
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	e041      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	4a2f      	ldr	r2, [pc, #188]	; (8008898 <USB_SetTurnaroundTime+0x12c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d906      	bls.n	80087ee <USB_SetTurnaroundTime+0x82>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4a2e      	ldr	r2, [pc, #184]	; (800889c <USB_SetTurnaroundTime+0x130>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d802      	bhi.n	80087ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80087e8:	230b      	movs	r3, #11
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	e036      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4a2a      	ldr	r2, [pc, #168]	; (800889c <USB_SetTurnaroundTime+0x130>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d906      	bls.n	8008804 <USB_SetTurnaroundTime+0x98>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	4a29      	ldr	r2, [pc, #164]	; (80088a0 <USB_SetTurnaroundTime+0x134>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d802      	bhi.n	8008804 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80087fe:	230a      	movs	r3, #10
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e02b      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	4a26      	ldr	r2, [pc, #152]	; (80088a0 <USB_SetTurnaroundTime+0x134>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d906      	bls.n	800881a <USB_SetTurnaroundTime+0xae>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4a25      	ldr	r2, [pc, #148]	; (80088a4 <USB_SetTurnaroundTime+0x138>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d202      	bcs.n	800881a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008814:	2309      	movs	r3, #9
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	e020      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4a21      	ldr	r2, [pc, #132]	; (80088a4 <USB_SetTurnaroundTime+0x138>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d306      	bcc.n	8008830 <USB_SetTurnaroundTime+0xc4>
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4a20      	ldr	r2, [pc, #128]	; (80088a8 <USB_SetTurnaroundTime+0x13c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d802      	bhi.n	8008830 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800882a:	2308      	movs	r3, #8
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	e015      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4a1d      	ldr	r2, [pc, #116]	; (80088a8 <USB_SetTurnaroundTime+0x13c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d906      	bls.n	8008846 <USB_SetTurnaroundTime+0xda>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4a1c      	ldr	r2, [pc, #112]	; (80088ac <USB_SetTurnaroundTime+0x140>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d202      	bcs.n	8008846 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008840:	2307      	movs	r3, #7
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	e00a      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008846:	2306      	movs	r3, #6
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	e007      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008852:	2309      	movs	r3, #9
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e001      	b.n	800885c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008858:	2309      	movs	r3, #9
 800885a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	029b      	lsls	r3, r3, #10
 8008870:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	00d8acbf 	.word	0x00d8acbf
 800888c:	00e4e1c0 	.word	0x00e4e1c0
 8008890:	00f42400 	.word	0x00f42400
 8008894:	01067380 	.word	0x01067380
 8008898:	011a499f 	.word	0x011a499f
 800889c:	01312cff 	.word	0x01312cff
 80088a0:	014ca43f 	.word	0x014ca43f
 80088a4:	016e3600 	.word	0x016e3600
 80088a8:	01a6ab1f 	.word	0x01a6ab1f
 80088ac:	01e84800 	.word	0x01e84800

080088b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f043 0201 	orr.w	r2, r3, #1
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f023 0201 	bic.w	r2, r3, #1
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d115      	bne.n	8008942 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008922:	2001      	movs	r0, #1
 8008924:	f7fa fe04 	bl	8003530 <HAL_Delay>
      ms++;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3301      	adds	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fa3f 	bl	8009db2 <USB_GetMode>
 8008934:	4603      	mov	r3, r0
 8008936:	2b01      	cmp	r3, #1
 8008938:	d01e      	beq.n	8008978 <USB_SetCurrentMode+0x84>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b31      	cmp	r3, #49	; 0x31
 800893e:	d9f0      	bls.n	8008922 <USB_SetCurrentMode+0x2e>
 8008940:	e01a      	b.n	8008978 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d115      	bne.n	8008974 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008954:	2001      	movs	r0, #1
 8008956:	f7fa fdeb 	bl	8003530 <HAL_Delay>
      ms++;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 fa26 	bl	8009db2 <USB_GetMode>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <USB_SetCurrentMode+0x84>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b31      	cmp	r3, #49	; 0x31
 8008970:	d9f0      	bls.n	8008954 <USB_SetCurrentMode+0x60>
 8008972:	e001      	b.n	8008978 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e005      	b.n	8008984 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b32      	cmp	r3, #50	; 0x32
 800897c:	d101      	bne.n	8008982 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e000      	b.n	8008984 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800898c:	b084      	sub	sp, #16
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800899a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]
 80089aa:	e009      	b.n	80089c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	3340      	adds	r3, #64	; 0x40
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	3301      	adds	r3, #1
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b0e      	cmp	r3, #14
 80089c4:	d9f2      	bls.n	80089ac <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d11c      	bne.n	8008a06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089da:	f043 0302 	orr.w	r3, r3, #2
 80089de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	e005      	b.n	8008a12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a18:	461a      	mov	r2, r3
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a24:	4619      	mov	r1, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	680b      	ldr	r3, [r1, #0]
 8008a30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d10c      	bne.n	8008a52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d104      	bne.n	8008a48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a3e:	2100      	movs	r1, #0
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f965 	bl	8008d10 <USB_SetDevSpeed>
 8008a46:	e008      	b.n	8008a5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a48:	2101      	movs	r1, #1
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f960 	bl	8008d10 <USB_SetDevSpeed>
 8008a50:	e003      	b.n	8008a5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a52:	2103      	movs	r1, #3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f95b 	bl	8008d10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a5a:	2110      	movs	r1, #16
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8f3 	bl	8008c48 <USB_FlushTxFifo>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f91f 	bl	8008cb0 <USB_FlushRxFifo>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a82:	461a      	mov	r2, r3
 8008a84:	2300      	movs	r3, #0
 8008a86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]
 8008aa4:	e043      	b.n	8008b2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008abc:	d118      	bne.n	8008af0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10a      	bne.n	8008ada <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	e013      	b.n	8008b02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	e008      	b.n	8008b02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afc:	461a      	mov	r2, r3
 8008afe:	2300      	movs	r3, #0
 8008b00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0e:	461a      	mov	r2, r3
 8008b10:	2300      	movs	r3, #0
 8008b12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	461a      	mov	r2, r3
 8008b22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	613b      	str	r3, [r7, #16]
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d3b7      	bcc.n	8008aa6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b36:	2300      	movs	r3, #0
 8008b38:	613b      	str	r3, [r7, #16]
 8008b3a:	e043      	b.n	8008bc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b52:	d118      	bne.n	8008b86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b66:	461a      	mov	r2, r3
 8008b68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	e013      	b.n	8008b98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	e008      	b.n	8008b98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b92:	461a      	mov	r2, r3
 8008b94:	2300      	movs	r3, #0
 8008b96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	613b      	str	r3, [r7, #16]
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d3b7      	bcc.n	8008b3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008bec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	f043 0210 	orr.w	r2, r3, #16
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699a      	ldr	r2, [r3, #24]
 8008c04:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <USB_DevInit+0x2b8>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d005      	beq.n	8008c1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f043 0208 	orr.w	r2, r3, #8
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d107      	bne.n	8008c34 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c2c:	f043 0304 	orr.w	r3, r3, #4
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c40:	b004      	add	sp, #16
 8008c42:	4770      	bx	lr
 8008c44:	803c3800 	.word	0x803c3800

08008c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4a13      	ldr	r2, [pc, #76]	; (8008cac <USB_FlushTxFifo+0x64>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d901      	bls.n	8008c68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e01b      	b.n	8008ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	daf2      	bge.n	8008c56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	019b      	lsls	r3, r3, #6
 8008c78:	f043 0220 	orr.w	r2, r3, #32
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4a08      	ldr	r2, [pc, #32]	; (8008cac <USB_FlushTxFifo+0x64>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d901      	bls.n	8008c92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e006      	b.n	8008ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d0f0      	beq.n	8008c80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	00030d40 	.word	0x00030d40

08008cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4a11      	ldr	r2, [pc, #68]	; (8008d0c <USB_FlushRxFifo+0x5c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d901      	bls.n	8008cce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e018      	b.n	8008d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	daf2      	bge.n	8008cbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2210      	movs	r2, #16
 8008cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <USB_FlushRxFifo+0x5c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d901      	bls.n	8008cf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e006      	b.n	8008d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f003 0310 	and.w	r3, r3, #16
 8008cfa:	2b10      	cmp	r3, #16
 8008cfc:	d0f0      	beq.n	8008ce0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	00030d40 	.word	0x00030d40

08008d10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	68f9      	ldr	r1, [r7, #12]
 8008d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d30:	4313      	orrs	r3, r2
 8008d32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b087      	sub	sp, #28
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f003 0306 	and.w	r3, r3, #6
 8008d5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008d62:	2300      	movs	r3, #0
 8008d64:	75fb      	strb	r3, [r7, #23]
 8008d66:	e00a      	b.n	8008d7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d002      	beq.n	8008d74 <USB_GetDevSpeed+0x32>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b06      	cmp	r3, #6
 8008d72:	d102      	bne.n	8008d7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d74:	2302      	movs	r3, #2
 8008d76:	75fb      	strb	r3, [r7, #23]
 8008d78:	e001      	b.n	8008d7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d7a:	230f      	movs	r3, #15
 8008d7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	371c      	adds	r7, #28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d13a      	bne.n	8008e1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dae:	69da      	ldr	r2, [r3, #28]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	68f9      	ldr	r1, [r7, #12]
 8008dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d155      	bne.n	8008e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	791b      	ldrb	r3, [r3, #4]
 8008dfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008dfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	059b      	lsls	r3, r3, #22
 8008e02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e04:	4313      	orrs	r3, r2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e1a:	6013      	str	r3, [r2, #0]
 8008e1c:	e036      	b.n	8008e8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e24:	69da      	ldr	r2, [r3, #28]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	f003 030f 	and.w	r3, r3, #15
 8008e2e:	2101      	movs	r1, #1
 8008e30:	fa01 f303 	lsl.w	r3, r1, r3
 8008e34:	041b      	lsls	r3, r3, #16
 8008e36:	68f9      	ldr	r1, [r7, #12]
 8008e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d11a      	bne.n	8008e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e72:	430b      	orrs	r3, r1
 8008e74:	4313      	orrs	r3, r2
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
	...

08008e9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d161      	bne.n	8008f7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ece:	d11f      	bne.n	8008f10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	0151      	lsls	r1, r2, #5
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	440a      	add	r2, r1
 8008ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008eee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	2101      	movs	r1, #1
 8008f22:	fa01 f303 	lsl.w	r3, r1, r3
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f30:	4013      	ands	r3, r2
 8008f32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3a:	69da      	ldr	r2, [r3, #28]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	f003 030f 	and.w	r3, r3, #15
 8008f44:	2101      	movs	r1, #1
 8008f46:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f54:	4013      	ands	r3, r2
 8008f56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	0159      	lsls	r1, r3, #5
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	440b      	add	r3, r1
 8008f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f72:	4619      	mov	r1, r3
 8008f74:	4b35      	ldr	r3, [pc, #212]	; (800904c <USB_DeactivateEndpoint+0x1b0>)
 8008f76:	4013      	ands	r3, r2
 8008f78:	600b      	str	r3, [r1, #0]
 8008f7a:	e060      	b.n	800903e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f92:	d11f      	bne.n	8008fd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fea:	041b      	lsls	r3, r3, #16
 8008fec:	43db      	mvns	r3, r3
 8008fee:	68f9      	ldr	r1, [r7, #12]
 8008ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	69da      	ldr	r2, [r3, #28]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	2101      	movs	r1, #1
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	43db      	mvns	r3, r3
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009018:	4013      	ands	r3, r2
 800901a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	0159      	lsls	r1, r3, #5
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	440b      	add	r3, r1
 8009032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009036:	4619      	mov	r1, r3
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <USB_DeactivateEndpoint+0x1b4>)
 800903a:	4013      	ands	r3, r2
 800903c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	ec337800 	.word	0xec337800
 8009050:	eff37800 	.word	0xeff37800

08009054 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08a      	sub	sp, #40	; 0x28
 8009058:	af02      	add	r7, sp, #8
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	4613      	mov	r3, r2
 8009060:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	785b      	ldrb	r3, [r3, #1]
 8009070:	2b01      	cmp	r3, #1
 8009072:	f040 815c 	bne.w	800932e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d132      	bne.n	80090e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	0151      	lsls	r1, r2, #5
 8009090:	69fa      	ldr	r2, [r7, #28]
 8009092:	440a      	add	r2, r1
 8009094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009098:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800909c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	0151      	lsls	r1, r2, #5
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	440a      	add	r2, r1
 80090b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	0151      	lsls	r1, r2, #5
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	440a      	add	r2, r1
 80090d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090dc:	0cdb      	lsrs	r3, r3, #19
 80090de:	04db      	lsls	r3, r3, #19
 80090e0:	6113      	str	r3, [r2, #16]
 80090e2:	e074      	b.n	80091ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	69fa      	ldr	r2, [r7, #28]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fe:	0cdb      	lsrs	r3, r3, #19
 8009100:	04db      	lsls	r3, r3, #19
 8009102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009122:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009134:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	6999      	ldr	r1, [r3, #24]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	440b      	add	r3, r1
 8009140:	1e59      	subs	r1, r3, #1
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	fbb1 f3f3 	udiv	r3, r1, r3
 800914a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800914c:	4b9d      	ldr	r3, [pc, #628]	; (80093c4 <USB_EPStartXfer+0x370>)
 800914e:	400b      	ands	r3, r1
 8009150:	69b9      	ldr	r1, [r7, #24]
 8009152:	0148      	lsls	r0, r1, #5
 8009154:	69f9      	ldr	r1, [r7, #28]
 8009156:	4401      	add	r1, r0
 8009158:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800915c:	4313      	orrs	r3, r2
 800915e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916c:	691a      	ldr	r2, [r3, #16]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009176:	69b9      	ldr	r1, [r7, #24]
 8009178:	0148      	lsls	r0, r1, #5
 800917a:	69f9      	ldr	r1, [r7, #28]
 800917c:	4401      	add	r1, r0
 800917e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009182:	4313      	orrs	r3, r2
 8009184:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	791b      	ldrb	r3, [r3, #4]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d11f      	bne.n	80091ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	0151      	lsls	r1, r2, #5
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	440a      	add	r2, r1
 80091a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80091ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	0151      	lsls	r1, r2, #5
 80091c0:	69fa      	ldr	r2, [r7, #28]
 80091c2:	440a      	add	r2, r1
 80091c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d14b      	bne.n	800926c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d009      	beq.n	80091f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e8:	461a      	mov	r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	791b      	ldrb	r3, [r3, #4]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d128      	bne.n	800924a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009204:	2b00      	cmp	r3, #0
 8009206:	d110      	bne.n	800922a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	e00f      	b.n	800924a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009248:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	69fa      	ldr	r2, [r7, #28]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	e133      	b.n	80094d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	0151      	lsls	r1, r2, #5
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	440a      	add	r2, r1
 8009282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800928a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	791b      	ldrb	r3, [r3, #4]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d015      	beq.n	80092c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 811b 	beq.w	80094d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	2101      	movs	r1, #1
 80092b0:	fa01 f303 	lsl.w	r3, r1, r3
 80092b4:	69f9      	ldr	r1, [r7, #28]
 80092b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092ba:	4313      	orrs	r3, r2
 80092bc:	634b      	str	r3, [r1, #52]	; 0x34
 80092be:	e109      	b.n	80094d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d110      	bne.n	80092f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	0151      	lsls	r1, r2, #5
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	440a      	add	r2, r1
 80092e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	e00f      	b.n	8009312 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	0151      	lsls	r1, r2, #5
 8009304:	69fa      	ldr	r2, [r7, #28]
 8009306:	440a      	add	r2, r1
 8009308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009310:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6919      	ldr	r1, [r3, #16]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	b298      	uxth	r0, r3
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	4603      	mov	r3, r0
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 fade 	bl	80098e8 <USB_WritePacket>
 800932c:	e0d2      	b.n	80094d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	0151      	lsls	r1, r2, #5
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	440a      	add	r2, r1
 8009344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009348:	0cdb      	lsrs	r3, r3, #19
 800934a:	04db      	lsls	r3, r3, #19
 800934c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800936c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009370:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d126      	bne.n	80093c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	4413      	add	r3, r2
 8009382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009390:	69b9      	ldr	r1, [r7, #24]
 8009392:	0148      	lsls	r0, r1, #5
 8009394:	69f9      	ldr	r1, [r7, #28]
 8009396:	4401      	add	r1, r0
 8009398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800939c:	4313      	orrs	r3, r2
 800939e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	0151      	lsls	r1, r2, #5
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	440a      	add	r2, r1
 80093b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093be:	6113      	str	r3, [r2, #16]
 80093c0:	e03a      	b.n	8009438 <USB_EPStartXfer+0x3e4>
 80093c2:	bf00      	nop
 80093c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	699a      	ldr	r2, [r3, #24]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	1e5a      	subs	r2, r3, #1
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	8afa      	ldrh	r2, [r7, #22]
 80093e4:	fb03 f202 	mul.w	r2, r3, r2
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f8:	691a      	ldr	r2, [r3, #16]
 80093fa:	8afb      	ldrh	r3, [r7, #22]
 80093fc:	04d9      	lsls	r1, r3, #19
 80093fe:	4b38      	ldr	r3, [pc, #224]	; (80094e0 <USB_EPStartXfer+0x48c>)
 8009400:	400b      	ands	r3, r1
 8009402:	69b9      	ldr	r1, [r7, #24]
 8009404:	0148      	lsls	r0, r1, #5
 8009406:	69f9      	ldr	r1, [r7, #28]
 8009408:	4401      	add	r1, r0
 800940a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800940e:	4313      	orrs	r3, r2
 8009410:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941e:	691a      	ldr	r2, [r3, #16]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009428:	69b9      	ldr	r1, [r7, #24]
 800942a:	0148      	lsls	r0, r1, #5
 800942c:	69f9      	ldr	r1, [r7, #28]
 800942e:	4401      	add	r1, r0
 8009430:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009434:	4313      	orrs	r3, r2
 8009436:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d10d      	bne.n	800945a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	6919      	ldr	r1, [r3, #16]
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009456:	460a      	mov	r2, r1
 8009458:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	791b      	ldrb	r3, [r3, #4]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d128      	bne.n	80094b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800946e:	2b00      	cmp	r3, #0
 8009470:	d110      	bne.n	8009494 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	0151      	lsls	r1, r2, #5
 8009484:	69fa      	ldr	r2, [r7, #28]
 8009486:	440a      	add	r2, r1
 8009488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800948c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	e00f      	b.n	80094b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	0151      	lsls	r1, r2, #5
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	440a      	add	r2, r1
 80094aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	0151      	lsls	r1, r2, #5
 80094c6:	69fa      	ldr	r2, [r7, #28]
 80094c8:	440a      	add	r2, r1
 80094ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3720      	adds	r7, #32
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	1ff80000 	.word	0x1ff80000

080094e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	4613      	mov	r3, r2
 80094f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	785b      	ldrb	r3, [r3, #1]
 8009500:	2b01      	cmp	r3, #1
 8009502:	f040 80ce 	bne.w	80096a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d132      	bne.n	8009574 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	015a      	lsls	r2, r3, #5
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	4413      	add	r3, r2
 8009516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	0151      	lsls	r1, r2, #5
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	440a      	add	r2, r1
 8009524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800952c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009530:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	0151      	lsls	r1, r2, #5
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	440a      	add	r2, r1
 8009548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800954c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	0151      	lsls	r1, r2, #5
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	440a      	add	r2, r1
 8009568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800956c:	0cdb      	lsrs	r3, r3, #19
 800956e:	04db      	lsls	r3, r3, #19
 8009570:	6113      	str	r3, [r2, #16]
 8009572:	e04e      	b.n	8009612 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	0151      	lsls	r1, r2, #5
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	440a      	add	r2, r1
 800958a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958e:	0cdb      	lsrs	r3, r3, #19
 8009590:	04db      	lsls	r3, r3, #19
 8009592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	0151      	lsls	r1, r2, #5
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	440a      	add	r2, r1
 80095aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d903      	bls.n	80095cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	0151      	lsls	r1, r2, #5
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	440a      	add	r2, r1
 80095e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f8:	691a      	ldr	r2, [r3, #16]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009602:	6939      	ldr	r1, [r7, #16]
 8009604:	0148      	lsls	r0, r1, #5
 8009606:	6979      	ldr	r1, [r7, #20]
 8009608:	4401      	add	r1, r0
 800960a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800960e:	4313      	orrs	r3, r2
 8009610:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d11e      	bne.n	8009656 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800962c:	461a      	mov	r2, r3
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	0151      	lsls	r1, r2, #5
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	440a      	add	r2, r1
 800964a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800964e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	e097      	b.n	8009786 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	0151      	lsls	r1, r2, #5
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	440a      	add	r2, r1
 800966c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009670:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009674:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 8083 	beq.w	8009786 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	2101      	movs	r1, #1
 8009692:	fa01 f303 	lsl.w	r3, r1, r3
 8009696:	6979      	ldr	r1, [r7, #20]
 8009698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800969c:	4313      	orrs	r3, r2
 800969e:	634b      	str	r3, [r1, #52]	; 0x34
 80096a0:	e071      	b.n	8009786 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	0151      	lsls	r1, r2, #5
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	440a      	add	r2, r1
 80096b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096bc:	0cdb      	lsrs	r3, r3, #19
 80096be:	04db      	lsls	r3, r3, #19
 80096c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	0151      	lsls	r1, r2, #5
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	440a      	add	r2, r1
 80096d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	0151      	lsls	r1, r2, #5
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	440a      	add	r2, r1
 8009714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800971c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972a:	691a      	ldr	r2, [r3, #16]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009734:	6939      	ldr	r1, [r7, #16]
 8009736:	0148      	lsls	r0, r1, #5
 8009738:	6979      	ldr	r1, [r7, #20]
 800973a:	4401      	add	r1, r0
 800973c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009740:	4313      	orrs	r3, r2
 8009742:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d10d      	bne.n	8009766 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	6919      	ldr	r1, [r3, #16]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	460a      	mov	r2, r1
 8009764:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	0151      	lsls	r1, r2, #5
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	440a      	add	r2, r1
 800977c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009784:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	371c      	adds	r7, #28
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	785b      	ldrb	r3, [r3, #1]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d14a      	bne.n	8009848 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097ca:	f040 8086 	bne.w	80098da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	7812      	ldrb	r2, [r2, #0]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	0151      	lsls	r1, r2, #5
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	440a      	add	r2, r1
 800980c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3301      	adds	r3, #1
 800981a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009822:	4293      	cmp	r3, r2
 8009824:	d902      	bls.n	800982c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	75fb      	strb	r3, [r7, #23]
          break;
 800982a:	e056      	b.n	80098da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009844:	d0e7      	beq.n	8009816 <USB_EPStopXfer+0x82>
 8009846:	e048      	b.n	80098da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800985c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009860:	d13b      	bne.n	80098da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	7812      	ldrb	r2, [r2, #0]
 8009876:	0151      	lsls	r1, r2, #5
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	440a      	add	r2, r1
 800987c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009880:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009884:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	4413      	add	r3, r2
 8009890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	7812      	ldrb	r2, [r2, #0]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d902      	bls.n	80098c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	75fb      	strb	r3, [r7, #23]
          break;
 80098be:	e00c      	b.n	80098da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d8:	d0e7      	beq.n	80098aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80098da:	7dfb      	ldrb	r3, [r7, #23]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b089      	sub	sp, #36	; 0x24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4611      	mov	r1, r2
 80098f4:	461a      	mov	r2, r3
 80098f6:	460b      	mov	r3, r1
 80098f8:	71fb      	strb	r3, [r7, #7]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009906:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800990a:	2b00      	cmp	r3, #0
 800990c:	d123      	bne.n	8009956 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800990e:	88bb      	ldrh	r3, [r7, #4]
 8009910:	3303      	adds	r3, #3
 8009912:	089b      	lsrs	r3, r3, #2
 8009914:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009916:	2300      	movs	r3, #0
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	e018      	b.n	800994e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	031a      	lsls	r2, r3, #12
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	4413      	add	r3, r2
 8009924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009928:	461a      	mov	r2, r3
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	3301      	adds	r3, #1
 8009934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	3301      	adds	r3, #1
 800993a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	3301      	adds	r3, #1
 8009940:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	3301      	adds	r3, #1
 8009946:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	3301      	adds	r3, #1
 800994c:	61bb      	str	r3, [r7, #24]
 800994e:	69ba      	ldr	r2, [r7, #24]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	429a      	cmp	r2, r3
 8009954:	d3e2      	bcc.n	800991c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3724      	adds	r7, #36	; 0x24
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009964:	b480      	push	{r7}
 8009966:	b08b      	sub	sp, #44	; 0x2c
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4613      	mov	r3, r2
 8009970:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	089b      	lsrs	r3, r3, #2
 800997e:	b29b      	uxth	r3, r3
 8009980:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009982:	88fb      	ldrh	r3, [r7, #6]
 8009984:	f003 0303 	and.w	r3, r3, #3
 8009988:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800998a:	2300      	movs	r3, #0
 800998c:	623b      	str	r3, [r7, #32]
 800998e:	e014      	b.n	80099ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	601a      	str	r2, [r3, #0]
    pDest++;
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	3301      	adds	r3, #1
 80099a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	3301      	adds	r3, #1
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	3301      	adds	r3, #1
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	3301      	adds	r3, #1
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	3301      	adds	r3, #1
 80099b8:	623b      	str	r3, [r7, #32]
 80099ba:	6a3a      	ldr	r2, [r7, #32]
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d3e6      	bcc.n	8009990 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099c2:	8bfb      	ldrh	r3, [r7, #30]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01e      	beq.n	8009a06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d2:	461a      	mov	r2, r3
 80099d4:	f107 0310 	add.w	r3, r7, #16
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	fa22 f303 	lsr.w	r3, r2, r3
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	701a      	strb	r2, [r3, #0]
      i++;
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	3301      	adds	r3, #1
 80099f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	3301      	adds	r3, #1
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80099fa:	8bfb      	ldrh	r3, [r7, #30]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a00:	8bfb      	ldrh	r3, [r7, #30]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1ea      	bne.n	80099dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	372c      	adds	r7, #44	; 0x2c
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	785b      	ldrb	r3, [r3, #1]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d12c      	bne.n	8009a8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	db12      	blt.n	8009a68 <USB_EPSetStall+0x54>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00f      	beq.n	8009a68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	0151      	lsls	r1, r2, #5
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	440a      	add	r2, r1
 8009a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	0151      	lsls	r1, r2, #5
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	440a      	add	r2, r1
 8009a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	e02b      	b.n	8009ae2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	db12      	blt.n	8009ac2 <USB_EPSetStall+0xae>
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00f      	beq.n	8009ac2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	0151      	lsls	r1, r2, #5
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	440a      	add	r2, r1
 8009ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ac0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	0151      	lsls	r1, r2, #5
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	440a      	add	r2, r1
 8009ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d128      	bne.n	8009b5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	0151      	lsls	r1, r2, #5
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	440a      	add	r2, r1
 8009b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	791b      	ldrb	r3, [r3, #4]
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d003      	beq.n	8009b3c <USB_EPClearStall+0x4c>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	791b      	ldrb	r3, [r3, #4]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d138      	bne.n	8009bae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	0151      	lsls	r1, r2, #5
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	440a      	add	r2, r1
 8009b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	e027      	b.n	8009bae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	0151      	lsls	r1, r2, #5
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	440a      	add	r2, r1
 8009b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	791b      	ldrb	r3, [r3, #4]
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d003      	beq.n	8009b8e <USB_EPClearStall+0x9e>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	791b      	ldrb	r3, [r3, #4]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d10f      	bne.n	8009bae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	0151      	lsls	r1, r2, #5
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	440a      	add	r2, r1
 8009ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009bde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	78fb      	ldrb	r3, [r7, #3]
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009bf0:	68f9      	ldr	r1, [r7, #12]
 8009bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c36:	f023 0302 	bic.w	r3, r3, #2
 8009c3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c64:	f023 0303 	bic.w	r3, r3, #3
 8009c68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c78:	f043 0302 	orr.w	r3, r3, #2
 8009c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b085      	sub	sp, #20
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	0c1b      	lsrs	r3, r3, #16
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	4013      	ands	r3, r2
 8009d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	b29b      	uxth	r3, r3
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d2a:	78fb      	ldrb	r3, [r7, #3]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	4013      	ands	r3, r2
 8009d46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d48:	68bb      	ldr	r3, [r7, #8]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b087      	sub	sp, #28
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	f003 030f 	and.w	r3, r3, #15
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	fa22 f303 	lsr.w	r3, r2, r3
 8009d86:	01db      	lsls	r3, r3, #7
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009d90:	78fb      	ldrb	r3, [r7, #3]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	4013      	ands	r3, r2
 8009da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009da4:	68bb      	ldr	r3, [r7, #8]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	f003 0301 	and.w	r3, r3, #1
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009dec:	f023 0307 	bic.w	r3, r3, #7
 8009df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	333c      	adds	r3, #60	; 0x3c
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	4a26      	ldr	r2, [pc, #152]	; (8009ecc <USB_EP0_OutStart+0xb8>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d90a      	bls.n	8009e4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e48:	d101      	bne.n	8009e4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e037      	b.n	8009ebe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e54:	461a      	mov	r2, r3
 8009e56:	2300      	movs	r3, #0
 8009e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e7c:	f043 0318 	orr.w	r3, r3, #24
 8009e80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009e94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009e96:	7afb      	ldrb	r3, [r7, #11]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d10f      	bne.n	8009ebc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009eba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	4f54300a 	.word	0x4f54300a

08009ed0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4a13      	ldr	r2, [pc, #76]	; (8009f34 <USB_CoreReset+0x64>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d901      	bls.n	8009eee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e01b      	b.n	8009f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	daf2      	bge.n	8009edc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	f043 0201 	orr.w	r2, r3, #1
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4a09      	ldr	r2, [pc, #36]	; (8009f34 <USB_CoreReset+0x64>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d901      	bls.n	8009f18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e006      	b.n	8009f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d0f0      	beq.n	8009f06 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	00030d40 	.word	0x00030d40

08009f38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009f48:	f002 fd68 	bl	800ca1c <USBD_static_malloc>
 8009f4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d109      	bne.n	8009f68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	32b0      	adds	r2, #176	; 0xb0
 8009f5e:	2100      	movs	r1, #0
 8009f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009f64:	2302      	movs	r3, #2
 8009f66:	e0d4      	b.n	800a112 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009f68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f002 fdd0 	bl	800cb14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	32b0      	adds	r2, #176	; 0xb0
 8009f7e:	68f9      	ldr	r1, [r7, #12]
 8009f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	32b0      	adds	r2, #176	; 0xb0
 8009f8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	7c1b      	ldrb	r3, [r3, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d138      	bne.n	800a012 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009fa0:	4b5e      	ldr	r3, [pc, #376]	; (800a11c <USBD_CDC_Init+0x1e4>)
 8009fa2:	7819      	ldrb	r1, [r3, #0]
 8009fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fa8:	2202      	movs	r2, #2
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f002 fbc5 	bl	800c73a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009fb0:	4b5a      	ldr	r3, [pc, #360]	; (800a11c <USBD_CDC_Init+0x1e4>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	f003 020f 	and.w	r2, r3, #15
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	440b      	add	r3, r1
 8009fc4:	3324      	adds	r3, #36	; 0x24
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009fca:	4b55      	ldr	r3, [pc, #340]	; (800a120 <USBD_CDC_Init+0x1e8>)
 8009fcc:	7819      	ldrb	r1, [r3, #0]
 8009fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f002 fbb0 	bl	800c73a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009fda:	4b51      	ldr	r3, [pc, #324]	; (800a120 <USBD_CDC_Init+0x1e8>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	f003 020f 	and.w	r2, r3, #15
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	440b      	add	r3, r1
 8009fee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ff6:	4b4b      	ldr	r3, [pc, #300]	; (800a124 <USBD_CDC_Init+0x1ec>)
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	f003 020f 	and.w	r2, r3, #15
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	440b      	add	r3, r1
 800a00a:	3326      	adds	r3, #38	; 0x26
 800a00c:	2210      	movs	r2, #16
 800a00e:	801a      	strh	r2, [r3, #0]
 800a010:	e035      	b.n	800a07e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a012:	4b42      	ldr	r3, [pc, #264]	; (800a11c <USBD_CDC_Init+0x1e4>)
 800a014:	7819      	ldrb	r1, [r3, #0]
 800a016:	2340      	movs	r3, #64	; 0x40
 800a018:	2202      	movs	r2, #2
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f002 fb8d 	bl	800c73a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a020:	4b3e      	ldr	r3, [pc, #248]	; (800a11c <USBD_CDC_Init+0x1e4>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	f003 020f 	and.w	r2, r3, #15
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4613      	mov	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	3324      	adds	r3, #36	; 0x24
 800a036:	2201      	movs	r2, #1
 800a038:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a03a:	4b39      	ldr	r3, [pc, #228]	; (800a120 <USBD_CDC_Init+0x1e8>)
 800a03c:	7819      	ldrb	r1, [r3, #0]
 800a03e:	2340      	movs	r3, #64	; 0x40
 800a040:	2202      	movs	r2, #2
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f002 fb79 	bl	800c73a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a048:	4b35      	ldr	r3, [pc, #212]	; (800a120 <USBD_CDC_Init+0x1e8>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	f003 020f 	and.w	r2, r3, #15
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	440b      	add	r3, r1
 800a05c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a060:	2201      	movs	r2, #1
 800a062:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a064:	4b2f      	ldr	r3, [pc, #188]	; (800a124 <USBD_CDC_Init+0x1ec>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	f003 020f 	and.w	r2, r3, #15
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	3326      	adds	r3, #38	; 0x26
 800a07a:	2210      	movs	r2, #16
 800a07c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a07e:	4b29      	ldr	r3, [pc, #164]	; (800a124 <USBD_CDC_Init+0x1ec>)
 800a080:	7819      	ldrb	r1, [r3, #0]
 800a082:	2308      	movs	r3, #8
 800a084:	2203      	movs	r2, #3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f002 fb57 	bl	800c73a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a08c:	4b25      	ldr	r3, [pc, #148]	; (800a124 <USBD_CDC_Init+0x1ec>)
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	f003 020f 	and.w	r2, r3, #15
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	440b      	add	r3, r1
 800a0a0:	3324      	adds	r3, #36	; 0x24
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	33b0      	adds	r3, #176	; 0xb0
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e018      	b.n	800a112 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	7c1b      	ldrb	r3, [r3, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0e8:	4b0d      	ldr	r3, [pc, #52]	; (800a120 <USBD_CDC_Init+0x1e8>)
 800a0ea:	7819      	ldrb	r1, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f002 fc0e 	bl	800c918 <USBD_LL_PrepareReceive>
 800a0fc:	e008      	b.n	800a110 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0fe:	4b08      	ldr	r3, [pc, #32]	; (800a120 <USBD_CDC_Init+0x1e8>)
 800a100:	7819      	ldrb	r1, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a108:	2340      	movs	r3, #64	; 0x40
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f002 fc04 	bl	800c918 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	200000bb 	.word	0x200000bb
 800a120:	200000bc 	.word	0x200000bc
 800a124:	200000bd 	.word	0x200000bd

0800a128 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	460b      	mov	r3, r1
 800a132:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a134:	4b3a      	ldr	r3, [pc, #232]	; (800a220 <USBD_CDC_DeInit+0xf8>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f002 fb23 	bl	800c786 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a140:	4b37      	ldr	r3, [pc, #220]	; (800a220 <USBD_CDC_DeInit+0xf8>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 020f 	and.w	r2, r3, #15
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4613      	mov	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	3324      	adds	r3, #36	; 0x24
 800a156:	2200      	movs	r2, #0
 800a158:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a15a:	4b32      	ldr	r3, [pc, #200]	; (800a224 <USBD_CDC_DeInit+0xfc>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f002 fb10 	bl	800c786 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a166:	4b2f      	ldr	r3, [pc, #188]	; (800a224 <USBD_CDC_DeInit+0xfc>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f003 020f 	and.w	r2, r3, #15
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a17e:	2200      	movs	r2, #0
 800a180:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a182:	4b29      	ldr	r3, [pc, #164]	; (800a228 <USBD_CDC_DeInit+0x100>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f002 fafc 	bl	800c786 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a18e:	4b26      	ldr	r3, [pc, #152]	; (800a228 <USBD_CDC_DeInit+0x100>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	f003 020f 	and.w	r2, r3, #15
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	4613      	mov	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	440b      	add	r3, r1
 800a1a2:	3324      	adds	r3, #36	; 0x24
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a1a8:	4b1f      	ldr	r3, [pc, #124]	; (800a228 <USBD_CDC_DeInit+0x100>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	f003 020f 	and.w	r2, r3, #15
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3326      	adds	r3, #38	; 0x26
 800a1be:	2200      	movs	r2, #0
 800a1c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	32b0      	adds	r2, #176	; 0xb0
 800a1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d01f      	beq.n	800a214 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	33b0      	adds	r3, #176	; 0xb0
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	32b0      	adds	r2, #176	; 0xb0
 800a1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f002 fc1e 	bl	800ca38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	32b0      	adds	r2, #176	; 0xb0
 800a206:	2100      	movs	r1, #0
 800a208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	200000bb 	.word	0x200000bb
 800a224:	200000bc 	.word	0x200000bc
 800a228:	200000bd 	.word	0x200000bd

0800a22c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	32b0      	adds	r2, #176	; 0xb0
 800a240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a244:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a258:	2303      	movs	r3, #3
 800a25a:	e0bf      	b.n	800a3dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a264:	2b00      	cmp	r3, #0
 800a266:	d050      	beq.n	800a30a <USBD_CDC_Setup+0xde>
 800a268:	2b20      	cmp	r3, #32
 800a26a:	f040 80af 	bne.w	800a3cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	88db      	ldrh	r3, [r3, #6]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d03a      	beq.n	800a2ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b25b      	sxtb	r3, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	da1b      	bge.n	800a2b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	33b0      	adds	r3, #176	; 0xb0
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a296:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	88d2      	ldrh	r2, [r2, #6]
 800a29c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	88db      	ldrh	r3, [r3, #6]
 800a2a2:	2b07      	cmp	r3, #7
 800a2a4:	bf28      	it	cs
 800a2a6:	2307      	movcs	r3, #7
 800a2a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	89fa      	ldrh	r2, [r7, #14]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fdb3 	bl	800be1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a2b6:	e090      	b.n	800a3da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	785a      	ldrb	r2, [r3, #1]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	88db      	ldrh	r3, [r3, #6]
 800a2c6:	2b3f      	cmp	r3, #63	; 0x3f
 800a2c8:	d803      	bhi.n	800a2d2 <USBD_CDC_Setup+0xa6>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	88db      	ldrh	r3, [r3, #6]
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	e000      	b.n	800a2d4 <USBD_CDC_Setup+0xa8>
 800a2d2:	2240      	movs	r2, #64	; 0x40
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a2da:	6939      	ldr	r1, [r7, #16]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f001 fdc5 	bl	800be74 <USBD_CtlPrepareRx>
      break;
 800a2ea:	e076      	b.n	800a3da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	33b0      	adds	r3, #176	; 0xb0
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	7850      	ldrb	r0, [r2, #1]
 800a302:	2200      	movs	r2, #0
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	4798      	blx	r3
      break;
 800a308:	e067      	b.n	800a3da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2b0b      	cmp	r3, #11
 800a310:	d851      	bhi.n	800a3b6 <USBD_CDC_Setup+0x18a>
 800a312:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <USBD_CDC_Setup+0xec>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a349 	.word	0x0800a349
 800a31c:	0800a3c5 	.word	0x0800a3c5
 800a320:	0800a3b7 	.word	0x0800a3b7
 800a324:	0800a3b7 	.word	0x0800a3b7
 800a328:	0800a3b7 	.word	0x0800a3b7
 800a32c:	0800a3b7 	.word	0x0800a3b7
 800a330:	0800a3b7 	.word	0x0800a3b7
 800a334:	0800a3b7 	.word	0x0800a3b7
 800a338:	0800a3b7 	.word	0x0800a3b7
 800a33c:	0800a3b7 	.word	0x0800a3b7
 800a340:	0800a373 	.word	0x0800a373
 800a344:	0800a39d 	.word	0x0800a39d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b03      	cmp	r3, #3
 800a352:	d107      	bne.n	800a364 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a354:	f107 030a 	add.w	r3, r7, #10
 800a358:	2202      	movs	r2, #2
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f001 fd5d 	bl	800be1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a362:	e032      	b.n	800a3ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 fce7 	bl	800bd3a <USBD_CtlError>
            ret = USBD_FAIL;
 800a36c:	2303      	movs	r3, #3
 800a36e:	75fb      	strb	r3, [r7, #23]
          break;
 800a370:	e02b      	b.n	800a3ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d107      	bne.n	800a38e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a37e:	f107 030d 	add.w	r3, r7, #13
 800a382:	2201      	movs	r2, #1
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 fd48 	bl	800be1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a38c:	e01d      	b.n	800a3ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 fcd2 	bl	800bd3a <USBD_CtlError>
            ret = USBD_FAIL;
 800a396:	2303      	movs	r3, #3
 800a398:	75fb      	strb	r3, [r7, #23]
          break;
 800a39a:	e016      	b.n	800a3ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	d00f      	beq.n	800a3c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 fcc5 	bl	800bd3a <USBD_CtlError>
            ret = USBD_FAIL;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a3b4:	e008      	b.n	800a3c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f001 fcbe 	bl	800bd3a <USBD_CtlError>
          ret = USBD_FAIL;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a3c2:	e002      	b.n	800a3ca <USBD_CDC_Setup+0x19e>
          break;
 800a3c4:	bf00      	nop
 800a3c6:	e008      	b.n	800a3da <USBD_CDC_Setup+0x1ae>
          break;
 800a3c8:	bf00      	nop
      }
      break;
 800a3ca:	e006      	b.n	800a3da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f001 fcb3 	bl	800bd3a <USBD_CtlError>
      ret = USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	32b0      	adds	r2, #176	; 0xb0
 800a402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e065      	b.n	800a4da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	32b0      	adds	r2, #176	; 0xb0
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a41e:	78fb      	ldrb	r3, [r7, #3]
 800a420:	f003 020f 	and.w	r2, r3, #15
 800a424:	6879      	ldr	r1, [r7, #4]
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	440b      	add	r3, r1
 800a430:	3318      	adds	r3, #24
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d02f      	beq.n	800a498 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a438:	78fb      	ldrb	r3, [r7, #3]
 800a43a:	f003 020f 	and.w	r2, r3, #15
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	4613      	mov	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	440b      	add	r3, r1
 800a44a:	3318      	adds	r3, #24
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	78fb      	ldrb	r3, [r7, #3]
 800a450:	f003 010f 	and.w	r1, r3, #15
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	460b      	mov	r3, r1
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	440b      	add	r3, r1
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4403      	add	r3, r0
 800a460:	3348      	adds	r3, #72	; 0x48
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	fbb2 f1f3 	udiv	r1, r2, r3
 800a468:	fb01 f303 	mul.w	r3, r1, r3
 800a46c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d112      	bne.n	800a498 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	f003 020f 	and.w	r2, r3, #15
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	440b      	add	r3, r1
 800a484:	3318      	adds	r3, #24
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a48a:	78f9      	ldrb	r1, [r7, #3]
 800a48c:	2300      	movs	r3, #0
 800a48e:	2200      	movs	r2, #0
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f002 fa20 	bl	800c8d6 <USBD_LL_Transmit>
 800a496:	e01f      	b.n	800a4d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	33b0      	adds	r3, #176	; 0xb0
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d010      	beq.n	800a4d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	33b0      	adds	r3, #176	; 0xb0
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a4d4:	78fa      	ldrb	r2, [r7, #3]
 800a4d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	32b0      	adds	r2, #176	; 0xb0
 800a4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	32b0      	adds	r2, #176	; 0xb0
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a510:	2303      	movs	r3, #3
 800a512:	e01a      	b.n	800a54a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f002 fa1e 	bl	800c95a <USBD_LL_GetRxDataSize>
 800a51e:	4602      	mov	r2, r0
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	33b0      	adds	r3, #176	; 0xb0
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a544:	4611      	mov	r1, r2
 800a546:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	32b0      	adds	r2, #176	; 0xb0
 800a564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a568:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d101      	bne.n	800a574 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a570:	2303      	movs	r3, #3
 800a572:	e025      	b.n	800a5c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	33b0      	adds	r3, #176	; 0xb0
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d01a      	beq.n	800a5be <USBD_CDC_EP0_RxReady+0x6c>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a58e:	2bff      	cmp	r3, #255	; 0xff
 800a590:	d015      	beq.n	800a5be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	33b0      	adds	r3, #176	; 0xb0
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a5aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a5b2:	b292      	uxth	r2, r2
 800a5b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	22ff      	movs	r2, #255	; 0xff
 800a5ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5d0:	2182      	movs	r1, #130	; 0x82
 800a5d2:	4818      	ldr	r0, [pc, #96]	; (800a634 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5d4:	f000 fd4f 	bl	800b076 <USBD_GetEpDesc>
 800a5d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a5da:	2101      	movs	r1, #1
 800a5dc:	4815      	ldr	r0, [pc, #84]	; (800a634 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5de:	f000 fd4a 	bl	800b076 <USBD_GetEpDesc>
 800a5e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5e4:	2181      	movs	r1, #129	; 0x81
 800a5e6:	4813      	ldr	r0, [pc, #76]	; (800a634 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5e8:	f000 fd45 	bl	800b076 <USBD_GetEpDesc>
 800a5ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2210      	movs	r2, #16
 800a5f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	2200      	movs	r2, #0
 800a604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a608:	711a      	strb	r2, [r3, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d006      	beq.n	800a622 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a61c:	711a      	strb	r2, [r3, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2243      	movs	r2, #67	; 0x43
 800a626:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a628:	4b02      	ldr	r3, [pc, #8]	; (800a634 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20000078 	.word	0x20000078

0800a638 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a640:	2182      	movs	r1, #130	; 0x82
 800a642:	4818      	ldr	r0, [pc, #96]	; (800a6a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a644:	f000 fd17 	bl	800b076 <USBD_GetEpDesc>
 800a648:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a64a:	2101      	movs	r1, #1
 800a64c:	4815      	ldr	r0, [pc, #84]	; (800a6a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a64e:	f000 fd12 	bl	800b076 <USBD_GetEpDesc>
 800a652:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a654:	2181      	movs	r1, #129	; 0x81
 800a656:	4813      	ldr	r0, [pc, #76]	; (800a6a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a658:	f000 fd0d 	bl	800b076 <USBD_GetEpDesc>
 800a65c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2210      	movs	r2, #16
 800a668:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d006      	beq.n	800a67e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2200      	movs	r2, #0
 800a674:	711a      	strb	r2, [r3, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f042 0202 	orr.w	r2, r2, #2
 800a67c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d006      	beq.n	800a692 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	711a      	strb	r2, [r3, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f042 0202 	orr.w	r2, r2, #2
 800a690:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2243      	movs	r2, #67	; 0x43
 800a696:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000078 	.word	0x20000078

0800a6a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6b0:	2182      	movs	r1, #130	; 0x82
 800a6b2:	4818      	ldr	r0, [pc, #96]	; (800a714 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a6b4:	f000 fcdf 	bl	800b076 <USBD_GetEpDesc>
 800a6b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	4815      	ldr	r0, [pc, #84]	; (800a714 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a6be:	f000 fcda 	bl	800b076 <USBD_GetEpDesc>
 800a6c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a6c4:	2181      	movs	r1, #129	; 0x81
 800a6c6:	4813      	ldr	r0, [pc, #76]	; (800a714 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a6c8:	f000 fcd5 	bl	800b076 <USBD_GetEpDesc>
 800a6cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2210      	movs	r2, #16
 800a6d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d006      	beq.n	800a6ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6e8:	711a      	strb	r2, [r3, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d006      	beq.n	800a702 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6fc:	711a      	strb	r2, [r3, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2243      	movs	r2, #67	; 0x43
 800a706:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a708:	4b02      	ldr	r3, [pc, #8]	; (800a714 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20000078 	.word	0x20000078

0800a718 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	220a      	movs	r2, #10
 800a724:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a726:	4b03      	ldr	r3, [pc, #12]	; (800a734 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a728:	4618      	mov	r0, r3
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	20000034 	.word	0x20000034

0800a738 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a748:	2303      	movs	r3, #3
 800a74a:	e009      	b.n	800a760 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	33b0      	adds	r3, #176	; 0xb0
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	32b0      	adds	r2, #176	; 0xb0
 800a782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a786:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a78e:	2303      	movs	r3, #3
 800a790:	e008      	b.n	800a7a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	371c      	adds	r7, #28
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	32b0      	adds	r2, #176	; 0xb0
 800a7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e004      	b.n	800a7de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
	...

0800a7ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	32b0      	adds	r2, #176	; 0xb0
 800a7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a802:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a804:	2301      	movs	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	32b0      	adds	r2, #176	; 0xb0
 800a812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e025      	b.n	800a86a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a824:	2b00      	cmp	r3, #0
 800a826:	d11f      	bne.n	800a868 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a830:	4b10      	ldr	r3, [pc, #64]	; (800a874 <USBD_CDC_TransmitPacket+0x88>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	f003 020f 	and.w	r2, r3, #15
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	4613      	mov	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4403      	add	r3, r0
 800a84a:	3318      	adds	r3, #24
 800a84c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a84e:	4b09      	ldr	r3, [pc, #36]	; (800a874 <USBD_CDC_TransmitPacket+0x88>)
 800a850:	7819      	ldrb	r1, [r3, #0]
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f002 f839 	bl	800c8d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	200000bb 	.word	0x200000bb

0800a878 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	32b0      	adds	r2, #176	; 0xb0
 800a88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	32b0      	adds	r2, #176	; 0xb0
 800a89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e018      	b.n	800a8d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7c1b      	ldrb	r3, [r3, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10a      	bne.n	800a8c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8ae:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <USBD_CDC_ReceivePacket+0x68>)
 800a8b0:	7819      	ldrb	r1, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f002 f82b 	bl	800c918 <USBD_LL_PrepareReceive>
 800a8c2:	e008      	b.n	800a8d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8c4:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <USBD_CDC_ReceivePacket+0x68>)
 800a8c6:	7819      	ldrb	r1, [r3, #0]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8ce:	2340      	movs	r3, #64	; 0x40
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f002 f821 	bl	800c918 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	200000bc 	.word	0x200000bc

0800a8e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e01f      	b.n	800a93c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	79fa      	ldrb	r2, [r7, #7]
 800a92e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f001 fe9b 	bl	800c66c <USBD_LL_Init>
 800a936:	4603      	mov	r3, r0
 800a938:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a94e:	2300      	movs	r3, #0
 800a950:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a958:	2303      	movs	r3, #3
 800a95a:	e025      	b.n	800a9a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	32ae      	adds	r2, #174	; 0xae
 800a96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00f      	beq.n	800a998 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	32ae      	adds	r2, #174	; 0xae
 800a982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a988:	f107 020e 	add.w	r2, r7, #14
 800a98c:	4610      	mov	r0, r2
 800a98e:	4798      	blx	r3
 800a990:	4602      	mov	r2, r0
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f001 fea3 	bl	800c704 <USBD_LL_Start>
 800a9be:	4603      	mov	r3, r0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	78fa      	ldrb	r2, [r7, #3]
 800aa02:	4611      	mov	r1, r2
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	4798      	blx	r3
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
 800aa1e:	460b      	mov	r3, r1
 800aa20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	78fa      	ldrb	r2, [r7, #3]
 800aa30:	4611      	mov	r1, r2
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f001 f932 	bl	800bcc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aa70:	461a      	mov	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa7e:	f003 031f 	and.w	r3, r3, #31
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d01a      	beq.n	800aabc <USBD_LL_SetupStage+0x72>
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d822      	bhi.n	800aad0 <USBD_LL_SetupStage+0x86>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <USBD_LL_SetupStage+0x4a>
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d00a      	beq.n	800aaa8 <USBD_LL_SetupStage+0x5e>
 800aa92:	e01d      	b.n	800aad0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fb5f 	bl	800b160 <USBD_StdDevReq>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa6:	e020      	b.n	800aaea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fbc7 	bl	800b244 <USBD_StdItfReq>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73fb      	strb	r3, [r7, #15]
      break;
 800aaba:	e016      	b.n	800aaea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fc29 	bl	800b31c <USBD_StdEPReq>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73fb      	strb	r3, [r7, #15]
      break;
 800aace:	e00c      	b.n	800aaea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aad6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 fe70 	bl	800c7c4 <USBD_LL_StallEP>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73fb      	strb	r3, [r7, #15]
      break;
 800aae8:	bf00      	nop
  }

  return ret;
 800aaea:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	460b      	mov	r3, r1
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d16e      	bne.n	800abea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	f040 8098 	bne.w	800ac50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	689a      	ldr	r2, [r3, #8]
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d913      	bls.n	800ab54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	1ad2      	subs	r2, r2, r3
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	68da      	ldr	r2, [r3, #12]
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	4293      	cmp	r3, r2
 800ab44:	bf28      	it	cs
 800ab46:	4613      	movcs	r3, r2
 800ab48:	461a      	mov	r2, r3
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f001 f9ae 	bl	800beae <USBD_CtlContinueRx>
 800ab52:	e07d      	b.n	800ac50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab5a:	f003 031f 	and.w	r3, r3, #31
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d014      	beq.n	800ab8c <USBD_LL_DataOutStage+0x98>
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d81d      	bhi.n	800aba2 <USBD_LL_DataOutStage+0xae>
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d002      	beq.n	800ab70 <USBD_LL_DataOutStage+0x7c>
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d003      	beq.n	800ab76 <USBD_LL_DataOutStage+0x82>
 800ab6e:	e018      	b.n	800aba2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ab70:	2300      	movs	r3, #0
 800ab72:	75bb      	strb	r3, [r7, #22]
            break;
 800ab74:	e018      	b.n	800aba8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	4619      	mov	r1, r3
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 fa5e 	bl	800b042 <USBD_CoreFindIF>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75bb      	strb	r3, [r7, #22]
            break;
 800ab8a:	e00d      	b.n	800aba8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	4619      	mov	r1, r3
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f000 fa60 	bl	800b05c <USBD_CoreFindEP>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	75bb      	strb	r3, [r7, #22]
            break;
 800aba0:	e002      	b.n	800aba8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	75bb      	strb	r3, [r7, #22]
            break;
 800aba6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aba8:	7dbb      	ldrb	r3, [r7, #22]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d119      	bne.n	800abe2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b03      	cmp	r3, #3
 800abb8:	d113      	bne.n	800abe2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800abba:	7dba      	ldrb	r2, [r7, #22]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	32ae      	adds	r2, #174	; 0xae
 800abc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00b      	beq.n	800abe2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800abca:	7dba      	ldrb	r2, [r7, #22]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800abd2:	7dba      	ldrb	r2, [r7, #22]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	32ae      	adds	r2, #174	; 0xae
 800abd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f001 f974 	bl	800bed0 <USBD_CtlSendStatus>
 800abe8:	e032      	b.n	800ac50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800abea:	7afb      	ldrb	r3, [r7, #11]
 800abec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	4619      	mov	r1, r3
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 fa31 	bl	800b05c <USBD_CoreFindEP>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abfe:	7dbb      	ldrb	r3, [r7, #22]
 800ac00:	2bff      	cmp	r3, #255	; 0xff
 800ac02:	d025      	beq.n	800ac50 <USBD_LL_DataOutStage+0x15c>
 800ac04:	7dbb      	ldrb	r3, [r7, #22]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d122      	bne.n	800ac50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d117      	bne.n	800ac46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ac16:	7dba      	ldrb	r2, [r7, #22]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	32ae      	adds	r2, #174	; 0xae
 800ac1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00f      	beq.n	800ac46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ac26:	7dba      	ldrb	r2, [r7, #22]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ac2e:	7dba      	ldrb	r2, [r7, #22]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	32ae      	adds	r2, #174	; 0xae
 800ac34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	7afa      	ldrb	r2, [r7, #11]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	4798      	blx	r3
 800ac42:	4603      	mov	r3, r0
 800ac44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d001      	beq.n	800ac50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ac4c:	7dfb      	ldrb	r3, [r7, #23]
 800ac4e:	e000      	b.n	800ac52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	460b      	mov	r3, r1
 800ac64:	607a      	str	r2, [r7, #4]
 800ac66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ac68:	7afb      	ldrb	r3, [r7, #11]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d16f      	bne.n	800ad4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3314      	adds	r3, #20
 800ac72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d15a      	bne.n	800ad34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d914      	bls.n	800acb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	689a      	ldr	r2, [r3, #8]
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	1ad2      	subs	r2, r2, r3
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f001 f8d6 	bl	800be52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aca6:	2300      	movs	r3, #0
 800aca8:	2200      	movs	r2, #0
 800acaa:	2100      	movs	r1, #0
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f001 fe33 	bl	800c918 <USBD_LL_PrepareReceive>
 800acb2:	e03f      	b.n	800ad34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	68da      	ldr	r2, [r3, #12]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d11c      	bne.n	800acfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800acc8:	429a      	cmp	r2, r3
 800acca:	d316      	bcc.n	800acfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	685a      	ldr	r2, [r3, #4]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d20f      	bcs.n	800acfa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acda:	2200      	movs	r2, #0
 800acdc:	2100      	movs	r1, #0
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f001 f8b7 	bl	800be52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acec:	2300      	movs	r3, #0
 800acee:	2200      	movs	r2, #0
 800acf0:	2100      	movs	r1, #0
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f001 fe10 	bl	800c918 <USBD_LL_PrepareReceive>
 800acf8:	e01c      	b.n	800ad34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b03      	cmp	r3, #3
 800ad04:	d10f      	bne.n	800ad26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d009      	beq.n	800ad26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad26:	2180      	movs	r1, #128	; 0x80
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f001 fd4b 	bl	800c7c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f001 f8e1 	bl	800bef6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d03a      	beq.n	800adb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7ff fe42 	bl	800a9c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ad4c:	e032      	b.n	800adb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ad4e:	7afb      	ldrb	r3, [r7, #11]
 800ad50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	4619      	mov	r1, r3
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 f97f 	bl	800b05c <USBD_CoreFindEP>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	2bff      	cmp	r3, #255	; 0xff
 800ad66:	d025      	beq.n	800adb4 <USBD_LL_DataInStage+0x15a>
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d122      	bne.n	800adb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d11c      	bne.n	800adb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ad7a:	7dfa      	ldrb	r2, [r7, #23]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	32ae      	adds	r2, #174	; 0xae
 800ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d014      	beq.n	800adb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ad8a:	7dfa      	ldrb	r2, [r7, #23]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ad92:	7dfa      	ldrb	r2, [r7, #23]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	32ae      	adds	r2, #174	; 0xae
 800ad98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	7afa      	ldrb	r2, [r7, #11]
 800ada0:	4611      	mov	r1, r2
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	4798      	blx	r3
 800ada6:	4603      	mov	r3, r0
 800ada8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800adaa:	7dbb      	ldrb	r3, [r7, #22]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d001      	beq.n	800adb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800adb0:	7dbb      	ldrb	r3, [r7, #22]
 800adb2:	e000      	b.n	800adb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d014      	beq.n	800ae24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00e      	beq.n	800ae24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6852      	ldr	r2, [r2, #4]
 800ae12:	b2d2      	uxtb	r2, r2
 800ae14:	4611      	mov	r1, r2
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	4798      	blx	r3
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ae20:	2303      	movs	r3, #3
 800ae22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae24:	2340      	movs	r3, #64	; 0x40
 800ae26:	2200      	movs	r2, #0
 800ae28:	2100      	movs	r1, #0
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f001 fc85 	bl	800c73a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2240      	movs	r2, #64	; 0x40
 800ae3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae40:	2340      	movs	r3, #64	; 0x40
 800ae42:	2200      	movs	r2, #0
 800ae44:	2180      	movs	r1, #128	; 0x80
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f001 fc77 	bl	800c73a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2240      	movs	r2, #64	; 0x40
 800ae56:	621a      	str	r2, [r3, #32]

  return ret;
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	78fa      	ldrb	r2, [r7, #3]
 800ae72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2204      	movs	r2, #4
 800ae9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d106      	bne.n	800aed0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	d110      	bne.n	800af14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00b      	beq.n	800af14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	32ae      	adds	r2, #174	; 0xae
 800af34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d101      	bne.n	800af40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e01c      	b.n	800af7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d115      	bne.n	800af78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	32ae      	adds	r2, #174	; 0xae
 800af56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5a:	6a1b      	ldr	r3, [r3, #32]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	32ae      	adds	r2, #174	; 0xae
 800af6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6e:	6a1b      	ldr	r3, [r3, #32]
 800af70:	78fa      	ldrb	r2, [r7, #3]
 800af72:	4611      	mov	r1, r2
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	460b      	mov	r3, r1
 800af8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	32ae      	adds	r2, #174	; 0xae
 800af98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e01c      	b.n	800afde <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b03      	cmp	r3, #3
 800afae:	d115      	bne.n	800afdc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	32ae      	adds	r2, #174	; 0xae
 800afba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00b      	beq.n	800afdc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	32ae      	adds	r2, #174	; 0xae
 800afce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	78fa      	ldrb	r2, [r7, #3]
 800afd6:	4611      	mov	r1, r2
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3708      	adds	r7, #8
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b083      	sub	sp, #12
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00e      	beq.n	800b038 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	6852      	ldr	r2, [r2, #4]
 800b026:	b2d2      	uxtb	r2, r2
 800b028:	4611      	mov	r1, r2
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b034:	2303      	movs	r3, #3
 800b036:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b038:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	460b      	mov	r3, r1
 800b04c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b04e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b050:	4618      	mov	r0, r3
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b068:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b086      	sub	sp, #24
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	885b      	ldrh	r3, [r3, #2]
 800b092:	b29a      	uxth	r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d920      	bls.n	800b0e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b0a6:	e013      	b.n	800b0d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b0a8:	f107 030a 	add.w	r3, r7, #10
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6978      	ldr	r0, [r7, #20]
 800b0b0:	f000 f81b 	bl	800b0ea <USBD_GetNextDesc>
 800b0b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	785b      	ldrb	r3, [r3, #1]
 800b0ba:	2b05      	cmp	r3, #5
 800b0bc:	d108      	bne.n	800b0d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	789b      	ldrb	r3, [r3, #2]
 800b0c6:	78fa      	ldrb	r2, [r7, #3]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d008      	beq.n	800b0de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	885b      	ldrh	r3, [r3, #2]
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	897b      	ldrh	r3, [r7, #10]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d8e5      	bhi.n	800b0a8 <USBD_GetEpDesc+0x32>
 800b0dc:	e000      	b.n	800b0e0 <USBD_GetEpDesc+0x6a>
          break;
 800b0de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b0e0:	693b      	ldr	r3, [r7, #16]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b085      	sub	sp, #20
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	881a      	ldrh	r2, [r3, #0]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	b29b      	uxth	r3, r3
 800b102:	4413      	add	r3, r2
 800b104:	b29a      	uxth	r2, r3
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4413      	add	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b116:	68fb      	ldr	r3, [r7, #12]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	3301      	adds	r3, #1
 800b13a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b142:	8a3b      	ldrh	r3, [r7, #16]
 800b144:	021b      	lsls	r3, r3, #8
 800b146:	b21a      	sxth	r2, r3
 800b148:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	b21b      	sxth	r3, r3
 800b150:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b152:	89fb      	ldrh	r3, [r7, #14]
}
 800b154:	4618      	mov	r0, r3
 800b156:	371c      	adds	r7, #28
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b176:	2b40      	cmp	r3, #64	; 0x40
 800b178:	d005      	beq.n	800b186 <USBD_StdDevReq+0x26>
 800b17a:	2b40      	cmp	r3, #64	; 0x40
 800b17c:	d857      	bhi.n	800b22e <USBD_StdDevReq+0xce>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00f      	beq.n	800b1a2 <USBD_StdDevReq+0x42>
 800b182:	2b20      	cmp	r3, #32
 800b184:	d153      	bne.n	800b22e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	32ae      	adds	r2, #174	; 0xae
 800b190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	4798      	blx	r3
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a0:	e04a      	b.n	800b238 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	785b      	ldrb	r3, [r3, #1]
 800b1a6:	2b09      	cmp	r3, #9
 800b1a8:	d83b      	bhi.n	800b222 <USBD_StdDevReq+0xc2>
 800b1aa:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <USBD_StdDevReq+0x50>)
 800b1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b0:	0800b205 	.word	0x0800b205
 800b1b4:	0800b219 	.word	0x0800b219
 800b1b8:	0800b223 	.word	0x0800b223
 800b1bc:	0800b20f 	.word	0x0800b20f
 800b1c0:	0800b223 	.word	0x0800b223
 800b1c4:	0800b1e3 	.word	0x0800b1e3
 800b1c8:	0800b1d9 	.word	0x0800b1d9
 800b1cc:	0800b223 	.word	0x0800b223
 800b1d0:	0800b1fb 	.word	0x0800b1fb
 800b1d4:	0800b1ed 	.word	0x0800b1ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fa3c 	bl	800b658 <USBD_GetDescriptor>
          break;
 800b1e0:	e024      	b.n	800b22c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fbcb 	bl	800b980 <USBD_SetAddress>
          break;
 800b1ea:	e01f      	b.n	800b22c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fc0a 	bl	800ba08 <USBD_SetConfig>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]
          break;
 800b1f8:	e018      	b.n	800b22c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fcad 	bl	800bb5c <USBD_GetConfig>
          break;
 800b202:	e013      	b.n	800b22c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fcde 	bl	800bbc8 <USBD_GetStatus>
          break;
 800b20c:	e00e      	b.n	800b22c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fd0d 	bl	800bc30 <USBD_SetFeature>
          break;
 800b216:	e009      	b.n	800b22c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fd31 	bl	800bc82 <USBD_ClrFeature>
          break;
 800b220:	e004      	b.n	800b22c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fd88 	bl	800bd3a <USBD_CtlError>
          break;
 800b22a:	bf00      	nop
      }
      break;
 800b22c:	e004      	b.n	800b238 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fd82 	bl	800bd3a <USBD_CtlError>
      break;
 800b236:	bf00      	nop
  }

  return ret;
 800b238:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop

0800b244 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b25a:	2b40      	cmp	r3, #64	; 0x40
 800b25c:	d005      	beq.n	800b26a <USBD_StdItfReq+0x26>
 800b25e:	2b40      	cmp	r3, #64	; 0x40
 800b260:	d852      	bhi.n	800b308 <USBD_StdItfReq+0xc4>
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <USBD_StdItfReq+0x26>
 800b266:	2b20      	cmp	r3, #32
 800b268:	d14e      	bne.n	800b308 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b270:	b2db      	uxtb	r3, r3
 800b272:	3b01      	subs	r3, #1
 800b274:	2b02      	cmp	r3, #2
 800b276:	d840      	bhi.n	800b2fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	889b      	ldrh	r3, [r3, #4]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d836      	bhi.n	800b2f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	889b      	ldrh	r3, [r3, #4]
 800b286:	b2db      	uxtb	r3, r3
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7ff fed9 	bl	800b042 <USBD_CoreFindIF>
 800b290:	4603      	mov	r3, r0
 800b292:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2bff      	cmp	r3, #255	; 0xff
 800b298:	d01d      	beq.n	800b2d6 <USBD_StdItfReq+0x92>
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d11a      	bne.n	800b2d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b2a0:	7bba      	ldrb	r2, [r7, #14]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	32ae      	adds	r2, #174	; 0xae
 800b2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00f      	beq.n	800b2d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b2b0:	7bba      	ldrb	r2, [r7, #14]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b2b8:	7bba      	ldrb	r2, [r7, #14]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	32ae      	adds	r2, #174	; 0xae
 800b2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	4798      	blx	r3
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b2ce:	e004      	b.n	800b2da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b2d4:	e001      	b.n	800b2da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	88db      	ldrh	r3, [r3, #6]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d110      	bne.n	800b304 <USBD_StdItfReq+0xc0>
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10d      	bne.n	800b304 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fdf1 	bl	800bed0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b2ee:	e009      	b.n	800b304 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fd21 	bl	800bd3a <USBD_CtlError>
          break;
 800b2f8:	e004      	b.n	800b304 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fd1c 	bl	800bd3a <USBD_CtlError>
          break;
 800b302:	e000      	b.n	800b306 <USBD_StdItfReq+0xc2>
          break;
 800b304:	bf00      	nop
      }
      break;
 800b306:	e004      	b.n	800b312 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fd15 	bl	800bd3a <USBD_CtlError>
      break;
 800b310:	bf00      	nop
  }

  return ret;
 800b312:	7bfb      	ldrb	r3, [r7, #15]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	889b      	ldrh	r3, [r3, #4]
 800b32e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b338:	2b40      	cmp	r3, #64	; 0x40
 800b33a:	d007      	beq.n	800b34c <USBD_StdEPReq+0x30>
 800b33c:	2b40      	cmp	r3, #64	; 0x40
 800b33e:	f200 817f 	bhi.w	800b640 <USBD_StdEPReq+0x324>
 800b342:	2b00      	cmp	r3, #0
 800b344:	d02a      	beq.n	800b39c <USBD_StdEPReq+0x80>
 800b346:	2b20      	cmp	r3, #32
 800b348:	f040 817a 	bne.w	800b640 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff fe83 	bl	800b05c <USBD_CoreFindEP>
 800b356:	4603      	mov	r3, r0
 800b358:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b35a:	7b7b      	ldrb	r3, [r7, #13]
 800b35c:	2bff      	cmp	r3, #255	; 0xff
 800b35e:	f000 8174 	beq.w	800b64a <USBD_StdEPReq+0x32e>
 800b362:	7b7b      	ldrb	r3, [r7, #13]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f040 8170 	bne.w	800b64a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b36a:	7b7a      	ldrb	r2, [r7, #13]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b372:	7b7a      	ldrb	r2, [r7, #13]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	32ae      	adds	r2, #174	; 0xae
 800b378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f000 8163 	beq.w	800b64a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b384:	7b7a      	ldrb	r2, [r7, #13]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	32ae      	adds	r2, #174	; 0xae
 800b38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	4798      	blx	r3
 800b396:	4603      	mov	r3, r0
 800b398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b39a:	e156      	b.n	800b64a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	785b      	ldrb	r3, [r3, #1]
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d008      	beq.n	800b3b6 <USBD_StdEPReq+0x9a>
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	f300 8145 	bgt.w	800b634 <USBD_StdEPReq+0x318>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 809b 	beq.w	800b4e6 <USBD_StdEPReq+0x1ca>
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d03c      	beq.n	800b42e <USBD_StdEPReq+0x112>
 800b3b4:	e13e      	b.n	800b634 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d002      	beq.n	800b3c8 <USBD_StdEPReq+0xac>
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d016      	beq.n	800b3f4 <USBD_StdEPReq+0xd8>
 800b3c6:	e02c      	b.n	800b422 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00d      	beq.n	800b3ea <USBD_StdEPReq+0xce>
 800b3ce:	7bbb      	ldrb	r3, [r7, #14]
 800b3d0:	2b80      	cmp	r3, #128	; 0x80
 800b3d2:	d00a      	beq.n	800b3ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3d4:	7bbb      	ldrb	r3, [r7, #14]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 f9f3 	bl	800c7c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3de:	2180      	movs	r1, #128	; 0x80
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f001 f9ef 	bl	800c7c4 <USBD_LL_StallEP>
 800b3e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3e8:	e020      	b.n	800b42c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fca4 	bl	800bd3a <USBD_CtlError>
              break;
 800b3f2:	e01b      	b.n	800b42c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	885b      	ldrh	r3, [r3, #2]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10e      	bne.n	800b41a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00b      	beq.n	800b41a <USBD_StdEPReq+0xfe>
 800b402:	7bbb      	ldrb	r3, [r7, #14]
 800b404:	2b80      	cmp	r3, #128	; 0x80
 800b406:	d008      	beq.n	800b41a <USBD_StdEPReq+0xfe>
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	88db      	ldrh	r3, [r3, #6]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d104      	bne.n	800b41a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f001 f9d5 	bl	800c7c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fd58 	bl	800bed0 <USBD_CtlSendStatus>

              break;
 800b420:	e004      	b.n	800b42c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fc88 	bl	800bd3a <USBD_CtlError>
              break;
 800b42a:	bf00      	nop
          }
          break;
 800b42c:	e107      	b.n	800b63e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b02      	cmp	r3, #2
 800b438:	d002      	beq.n	800b440 <USBD_StdEPReq+0x124>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d016      	beq.n	800b46c <USBD_StdEPReq+0x150>
 800b43e:	e04b      	b.n	800b4d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b440:	7bbb      	ldrb	r3, [r7, #14]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00d      	beq.n	800b462 <USBD_StdEPReq+0x146>
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	2b80      	cmp	r3, #128	; 0x80
 800b44a:	d00a      	beq.n	800b462 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b44c:	7bbb      	ldrb	r3, [r7, #14]
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 f9b7 	bl	800c7c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b456:	2180      	movs	r1, #128	; 0x80
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f001 f9b3 	bl	800c7c4 <USBD_LL_StallEP>
 800b45e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b460:	e040      	b.n	800b4e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fc68 	bl	800bd3a <USBD_CtlError>
              break;
 800b46a:	e03b      	b.n	800b4e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	885b      	ldrh	r3, [r3, #2]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d136      	bne.n	800b4e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d004      	beq.n	800b488 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f001 f9bd 	bl	800c802 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 fd21 	bl	800bed0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff fde2 	bl	800b05c <USBD_CoreFindEP>
 800b498:	4603      	mov	r3, r0
 800b49a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b49c:	7b7b      	ldrb	r3, [r7, #13]
 800b49e:	2bff      	cmp	r3, #255	; 0xff
 800b4a0:	d01f      	beq.n	800b4e2 <USBD_StdEPReq+0x1c6>
 800b4a2:	7b7b      	ldrb	r3, [r7, #13]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d11c      	bne.n	800b4e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b4a8:	7b7a      	ldrb	r2, [r7, #13]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b4b0:	7b7a      	ldrb	r2, [r7, #13]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	32ae      	adds	r2, #174	; 0xae
 800b4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d010      	beq.n	800b4e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b4c0:	7b7a      	ldrb	r2, [r7, #13]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32ae      	adds	r2, #174	; 0xae
 800b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	4798      	blx	r3
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b4d6:	e004      	b.n	800b4e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fc2d 	bl	800bd3a <USBD_CtlError>
              break;
 800b4e0:	e000      	b.n	800b4e4 <USBD_StdEPReq+0x1c8>
              break;
 800b4e2:	bf00      	nop
          }
          break;
 800b4e4:	e0ab      	b.n	800b63e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d002      	beq.n	800b4f8 <USBD_StdEPReq+0x1dc>
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d032      	beq.n	800b55c <USBD_StdEPReq+0x240>
 800b4f6:	e097      	b.n	800b628 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d007      	beq.n	800b50e <USBD_StdEPReq+0x1f2>
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	2b80      	cmp	r3, #128	; 0x80
 800b502:	d004      	beq.n	800b50e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fc17 	bl	800bd3a <USBD_CtlError>
                break;
 800b50c:	e091      	b.n	800b632 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b50e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b512:	2b00      	cmp	r3, #0
 800b514:	da0b      	bge.n	800b52e <USBD_StdEPReq+0x212>
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b51c:	4613      	mov	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	3310      	adds	r3, #16
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	4413      	add	r3, r2
 800b52a:	3304      	adds	r3, #4
 800b52c:	e00b      	b.n	800b546 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b534:	4613      	mov	r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	4413      	add	r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	4413      	add	r3, r2
 800b544:	3304      	adds	r3, #4
 800b546:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2202      	movs	r2, #2
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fc61 	bl	800be1c <USBD_CtlSendData>
              break;
 800b55a:	e06a      	b.n	800b632 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b55c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b560:	2b00      	cmp	r3, #0
 800b562:	da11      	bge.n	800b588 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	f003 020f 	and.w	r2, r3, #15
 800b56a:	6879      	ldr	r1, [r7, #4]
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	440b      	add	r3, r1
 800b576:	3324      	adds	r3, #36	; 0x24
 800b578:	881b      	ldrh	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d117      	bne.n	800b5ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fbda 	bl	800bd3a <USBD_CtlError>
                  break;
 800b586:	e054      	b.n	800b632 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b588:	7bbb      	ldrb	r3, [r7, #14]
 800b58a:	f003 020f 	and.w	r2, r3, #15
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	440b      	add	r3, r1
 800b59a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d104      	bne.n	800b5ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fbc7 	bl	800bd3a <USBD_CtlError>
                  break;
 800b5ac:	e041      	b.n	800b632 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	da0b      	bge.n	800b5ce <USBD_StdEPReq+0x2b2>
 800b5b6:	7bbb      	ldrb	r3, [r7, #14]
 800b5b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	3310      	adds	r3, #16
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	e00b      	b.n	800b5e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <USBD_StdEPReq+0x2d8>
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b80      	cmp	r3, #128	; 0x80
 800b5f2:	d103      	bne.n	800b5fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	e00e      	b.n	800b61a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f001 f91d 	bl	800c840 <USBD_LL_IsStallEP>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d003      	beq.n	800b614 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2201      	movs	r2, #1
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	e002      	b.n	800b61a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2202      	movs	r2, #2
 800b61e:	4619      	mov	r1, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fbfb 	bl	800be1c <USBD_CtlSendData>
              break;
 800b626:	e004      	b.n	800b632 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b628:	6839      	ldr	r1, [r7, #0]
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fb85 	bl	800bd3a <USBD_CtlError>
              break;
 800b630:	bf00      	nop
          }
          break;
 800b632:	e004      	b.n	800b63e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fb7f 	bl	800bd3a <USBD_CtlError>
          break;
 800b63c:	bf00      	nop
      }
      break;
 800b63e:	e005      	b.n	800b64c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fb79 	bl	800bd3a <USBD_CtlError>
      break;
 800b648:	e000      	b.n	800b64c <USBD_StdEPReq+0x330>
      break;
 800b64a:	bf00      	nop
  }

  return ret;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b662:	2300      	movs	r3, #0
 800b664:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b666:	2300      	movs	r3, #0
 800b668:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	885b      	ldrh	r3, [r3, #2]
 800b672:	0a1b      	lsrs	r3, r3, #8
 800b674:	b29b      	uxth	r3, r3
 800b676:	3b01      	subs	r3, #1
 800b678:	2b0e      	cmp	r3, #14
 800b67a:	f200 8152 	bhi.w	800b922 <USBD_GetDescriptor+0x2ca>
 800b67e:	a201      	add	r2, pc, #4	; (adr r2, 800b684 <USBD_GetDescriptor+0x2c>)
 800b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b684:	0800b6f5 	.word	0x0800b6f5
 800b688:	0800b70d 	.word	0x0800b70d
 800b68c:	0800b74d 	.word	0x0800b74d
 800b690:	0800b923 	.word	0x0800b923
 800b694:	0800b923 	.word	0x0800b923
 800b698:	0800b8c3 	.word	0x0800b8c3
 800b69c:	0800b8ef 	.word	0x0800b8ef
 800b6a0:	0800b923 	.word	0x0800b923
 800b6a4:	0800b923 	.word	0x0800b923
 800b6a8:	0800b923 	.word	0x0800b923
 800b6ac:	0800b923 	.word	0x0800b923
 800b6b0:	0800b923 	.word	0x0800b923
 800b6b4:	0800b923 	.word	0x0800b923
 800b6b8:	0800b923 	.word	0x0800b923
 800b6bc:	0800b6c1 	.word	0x0800b6c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00b      	beq.n	800b6e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d2:	69db      	ldr	r3, [r3, #28]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	7c12      	ldrb	r2, [r2, #16]
 800b6d8:	f107 0108 	add.w	r1, r7, #8
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4798      	blx	r3
 800b6e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6e2:	e126      	b.n	800b932 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fb27 	bl	800bd3a <USBD_CtlError>
        err++;
 800b6ec:	7afb      	ldrb	r3, [r7, #11]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	72fb      	strb	r3, [r7, #11]
      break;
 800b6f2:	e11e      	b.n	800b932 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	7c12      	ldrb	r2, [r2, #16]
 800b700:	f107 0108 	add.w	r1, r7, #8
 800b704:	4610      	mov	r0, r2
 800b706:	4798      	blx	r3
 800b708:	60f8      	str	r0, [r7, #12]
      break;
 800b70a:	e112      	b.n	800b932 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	7c1b      	ldrb	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10d      	bne.n	800b730 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71c:	f107 0208 	add.w	r2, r7, #8
 800b720:	4610      	mov	r0, r2
 800b722:	4798      	blx	r3
 800b724:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	3301      	adds	r3, #1
 800b72a:	2202      	movs	r2, #2
 800b72c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b72e:	e100      	b.n	800b932 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b738:	f107 0208 	add.w	r2, r7, #8
 800b73c:	4610      	mov	r0, r2
 800b73e:	4798      	blx	r3
 800b740:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3301      	adds	r3, #1
 800b746:	2202      	movs	r2, #2
 800b748:	701a      	strb	r2, [r3, #0]
      break;
 800b74a:	e0f2      	b.n	800b932 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	885b      	ldrh	r3, [r3, #2]
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b05      	cmp	r3, #5
 800b754:	f200 80ac 	bhi.w	800b8b0 <USBD_GetDescriptor+0x258>
 800b758:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <USBD_GetDescriptor+0x108>)
 800b75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75e:	bf00      	nop
 800b760:	0800b779 	.word	0x0800b779
 800b764:	0800b7ad 	.word	0x0800b7ad
 800b768:	0800b7e1 	.word	0x0800b7e1
 800b76c:	0800b815 	.word	0x0800b815
 800b770:	0800b849 	.word	0x0800b849
 800b774:	0800b87d 	.word	0x0800b87d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00b      	beq.n	800b79c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	7c12      	ldrb	r2, [r2, #16]
 800b790:	f107 0108 	add.w	r1, r7, #8
 800b794:	4610      	mov	r0, r2
 800b796:	4798      	blx	r3
 800b798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b79a:	e091      	b.n	800b8c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 facb 	bl	800bd3a <USBD_CtlError>
            err++;
 800b7a4:	7afb      	ldrb	r3, [r7, #11]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7aa:	e089      	b.n	800b8c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00b      	beq.n	800b7d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	7c12      	ldrb	r2, [r2, #16]
 800b7c4:	f107 0108 	add.w	r1, r7, #8
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
 800b7cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ce:	e077      	b.n	800b8c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fab1 	bl	800bd3a <USBD_CtlError>
            err++;
 800b7d8:	7afb      	ldrb	r3, [r7, #11]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7de:	e06f      	b.n	800b8c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00b      	beq.n	800b804 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	7c12      	ldrb	r2, [r2, #16]
 800b7f8:	f107 0108 	add.w	r1, r7, #8
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	4798      	blx	r3
 800b800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b802:	e05d      	b.n	800b8c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fa97 	bl	800bd3a <USBD_CtlError>
            err++;
 800b80c:	7afb      	ldrb	r3, [r7, #11]
 800b80e:	3301      	adds	r3, #1
 800b810:	72fb      	strb	r3, [r7, #11]
          break;
 800b812:	e055      	b.n	800b8c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00b      	beq.n	800b838 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	7c12      	ldrb	r2, [r2, #16]
 800b82c:	f107 0108 	add.w	r1, r7, #8
 800b830:	4610      	mov	r0, r2
 800b832:	4798      	blx	r3
 800b834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b836:	e043      	b.n	800b8c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fa7d 	bl	800bd3a <USBD_CtlError>
            err++;
 800b840:	7afb      	ldrb	r3, [r7, #11]
 800b842:	3301      	adds	r3, #1
 800b844:	72fb      	strb	r3, [r7, #11]
          break;
 800b846:	e03b      	b.n	800b8c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b84e:	695b      	ldr	r3, [r3, #20]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00b      	beq.n	800b86c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	7c12      	ldrb	r2, [r2, #16]
 800b860:	f107 0108 	add.w	r1, r7, #8
 800b864:	4610      	mov	r0, r2
 800b866:	4798      	blx	r3
 800b868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b86a:	e029      	b.n	800b8c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fa63 	bl	800bd3a <USBD_CtlError>
            err++;
 800b874:	7afb      	ldrb	r3, [r7, #11]
 800b876:	3301      	adds	r3, #1
 800b878:	72fb      	strb	r3, [r7, #11]
          break;
 800b87a:	e021      	b.n	800b8c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00b      	beq.n	800b8a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	7c12      	ldrb	r2, [r2, #16]
 800b894:	f107 0108 	add.w	r1, r7, #8
 800b898:	4610      	mov	r0, r2
 800b89a:	4798      	blx	r3
 800b89c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b89e:	e00f      	b.n	800b8c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fa49 	bl	800bd3a <USBD_CtlError>
            err++;
 800b8a8:	7afb      	ldrb	r3, [r7, #11]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ae:	e007      	b.n	800b8c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fa41 	bl	800bd3a <USBD_CtlError>
          err++;
 800b8b8:	7afb      	ldrb	r3, [r7, #11]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b8be:	bf00      	nop
      }
      break;
 800b8c0:	e037      	b.n	800b932 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	7c1b      	ldrb	r3, [r3, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d2:	f107 0208 	add.w	r2, r7, #8
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	4798      	blx	r3
 800b8da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8dc:	e029      	b.n	800b932 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fa2a 	bl	800bd3a <USBD_CtlError>
        err++;
 800b8e6:	7afb      	ldrb	r3, [r7, #11]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b8ec:	e021      	b.n	800b932 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7c1b      	ldrb	r3, [r3, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10d      	bne.n	800b912 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fe:	f107 0208 	add.w	r2, r7, #8
 800b902:	4610      	mov	r0, r2
 800b904:	4798      	blx	r3
 800b906:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3301      	adds	r3, #1
 800b90c:	2207      	movs	r2, #7
 800b90e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b910:	e00f      	b.n	800b932 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fa10 	bl	800bd3a <USBD_CtlError>
        err++;
 800b91a:	7afb      	ldrb	r3, [r7, #11]
 800b91c:	3301      	adds	r3, #1
 800b91e:	72fb      	strb	r3, [r7, #11]
      break;
 800b920:	e007      	b.n	800b932 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fa08 	bl	800bd3a <USBD_CtlError>
      err++;
 800b92a:	7afb      	ldrb	r3, [r7, #11]
 800b92c:	3301      	adds	r3, #1
 800b92e:	72fb      	strb	r3, [r7, #11]
      break;
 800b930:	bf00      	nop
  }

  if (err != 0U)
 800b932:	7afb      	ldrb	r3, [r7, #11]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d11e      	bne.n	800b976 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	88db      	ldrh	r3, [r3, #6]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d016      	beq.n	800b96e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b940:	893b      	ldrh	r3, [r7, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00e      	beq.n	800b964 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	88da      	ldrh	r2, [r3, #6]
 800b94a:	893b      	ldrh	r3, [r7, #8]
 800b94c:	4293      	cmp	r3, r2
 800b94e:	bf28      	it	cs
 800b950:	4613      	movcs	r3, r2
 800b952:	b29b      	uxth	r3, r3
 800b954:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b956:	893b      	ldrh	r3, [r7, #8]
 800b958:	461a      	mov	r2, r3
 800b95a:	68f9      	ldr	r1, [r7, #12]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fa5d 	bl	800be1c <USBD_CtlSendData>
 800b962:	e009      	b.n	800b978 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f9e7 	bl	800bd3a <USBD_CtlError>
 800b96c:	e004      	b.n	800b978 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 faae 	bl	800bed0 <USBD_CtlSendStatus>
 800b974:	e000      	b.n	800b978 <USBD_GetDescriptor+0x320>
    return;
 800b976:	bf00      	nop
  }
}
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop

0800b980 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	889b      	ldrh	r3, [r3, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d131      	bne.n	800b9f6 <USBD_SetAddress+0x76>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	88db      	ldrh	r3, [r3, #6]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d12d      	bne.n	800b9f6 <USBD_SetAddress+0x76>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	885b      	ldrh	r3, [r3, #2]
 800b99e:	2b7f      	cmp	r3, #127	; 0x7f
 800b9a0:	d829      	bhi.n	800b9f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	885b      	ldrh	r3, [r3, #2]
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d104      	bne.n	800b9c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f9bc 	bl	800bd3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c2:	e01d      	b.n	800ba00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	7bfa      	ldrb	r2, [r7, #15]
 800b9c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 ff61 	bl	800c898 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fa7a 	bl	800bed0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d004      	beq.n	800b9ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ea:	e009      	b.n	800ba00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f4:	e004      	b.n	800ba00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f99e 	bl	800bd3a <USBD_CtlError>
  }
}
 800b9fe:	bf00      	nop
 800ba00:	bf00      	nop
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	885b      	ldrh	r3, [r3, #2]
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	4b4e      	ldr	r3, [pc, #312]	; (800bb58 <USBD_SetConfig+0x150>)
 800ba1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba20:	4b4d      	ldr	r3, [pc, #308]	; (800bb58 <USBD_SetConfig+0x150>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d905      	bls.n	800ba34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f985 	bl	800bd3a <USBD_CtlError>
    return USBD_FAIL;
 800ba30:	2303      	movs	r3, #3
 800ba32:	e08c      	b.n	800bb4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d002      	beq.n	800ba46 <USBD_SetConfig+0x3e>
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d029      	beq.n	800ba98 <USBD_SetConfig+0x90>
 800ba44:	e075      	b.n	800bb32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba46:	4b44      	ldr	r3, [pc, #272]	; (800bb58 <USBD_SetConfig+0x150>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d020      	beq.n	800ba90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ba4e:	4b42      	ldr	r3, [pc, #264]	; (800bb58 <USBD_SetConfig+0x150>)
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	461a      	mov	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba58:	4b3f      	ldr	r3, [pc, #252]	; (800bb58 <USBD_SetConfig+0x150>)
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7fe ffbd 	bl	800a9de <USBD_SetClassConfig>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d008      	beq.n	800ba80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f962 	bl	800bd3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba7e:	e065      	b.n	800bb4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fa25 	bl	800bed0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2203      	movs	r2, #3
 800ba8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba8e:	e05d      	b.n	800bb4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fa1d 	bl	800bed0 <USBD_CtlSendStatus>
      break;
 800ba96:	e059      	b.n	800bb4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ba98:	4b2f      	ldr	r3, [pc, #188]	; (800bb58 <USBD_SetConfig+0x150>)
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d112      	bne.n	800bac6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2202      	movs	r2, #2
 800baa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800baa8:	4b2b      	ldr	r3, [pc, #172]	; (800bb58 <USBD_SetConfig+0x150>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bab2:	4b29      	ldr	r3, [pc, #164]	; (800bb58 <USBD_SetConfig+0x150>)
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7fe ffac 	bl	800aa16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa06 	bl	800bed0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bac4:	e042      	b.n	800bb4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bac6:	4b24      	ldr	r3, [pc, #144]	; (800bb58 <USBD_SetConfig+0x150>)
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d02a      	beq.n	800bb2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7fe ff9a 	bl	800aa16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bae2:	4b1d      	ldr	r3, [pc, #116]	; (800bb58 <USBD_SetConfig+0x150>)
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800baec:	4b1a      	ldr	r3, [pc, #104]	; (800bb58 <USBD_SetConfig+0x150>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7fe ff73 	bl	800a9de <USBD_SetClassConfig>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00f      	beq.n	800bb22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bb02:	6839      	ldr	r1, [r7, #0]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f918 	bl	800bd3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7fe ff7f 	bl	800aa16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb20:	e014      	b.n	800bb4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9d4 	bl	800bed0 <USBD_CtlSendStatus>
      break;
 800bb28:	e010      	b.n	800bb4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f9d0 	bl	800bed0 <USBD_CtlSendStatus>
      break;
 800bb30:	e00c      	b.n	800bb4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f900 	bl	800bd3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb3a:	4b07      	ldr	r3, [pc, #28]	; (800bb58 <USBD_SetConfig+0x150>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7fe ff68 	bl	800aa16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb46:	2303      	movs	r3, #3
 800bb48:	73fb      	strb	r3, [r7, #15]
      break;
 800bb4a:	bf00      	nop
  }

  return ret;
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	200006dc 	.word	0x200006dc

0800bb5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	88db      	ldrh	r3, [r3, #6]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d004      	beq.n	800bb78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f8e2 	bl	800bd3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb76:	e023      	b.n	800bbc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	dc02      	bgt.n	800bb8a <USBD_GetConfig+0x2e>
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	dc03      	bgt.n	800bb90 <USBD_GetConfig+0x34>
 800bb88:	e015      	b.n	800bbb6 <USBD_GetConfig+0x5a>
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d00b      	beq.n	800bba6 <USBD_GetConfig+0x4a>
 800bb8e:	e012      	b.n	800bbb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3308      	adds	r3, #8
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f93c 	bl	800be1c <USBD_CtlSendData>
        break;
 800bba4:	e00c      	b.n	800bbc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f934 	bl	800be1c <USBD_CtlSendData>
        break;
 800bbb4:	e004      	b.n	800bbc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f8be 	bl	800bd3a <USBD_CtlError>
        break;
 800bbbe:	bf00      	nop
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d81e      	bhi.n	800bc1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	88db      	ldrh	r3, [r3, #6]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d004      	beq.n	800bbf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f8a5 	bl	800bd3a <USBD_CtlError>
        break;
 800bbf0:	e01a      	b.n	800bc28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d005      	beq.n	800bc0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	f043 0202 	orr.w	r2, r3, #2
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	330c      	adds	r3, #12
 800bc12:	2202      	movs	r2, #2
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f900 	bl	800be1c <USBD_CtlSendData>
      break;
 800bc1c:	e004      	b.n	800bc28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f88a 	bl	800bd3a <USBD_CtlError>
      break;
 800bc26:	bf00      	nop
  }
}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	885b      	ldrh	r3, [r3, #2]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d107      	bne.n	800bc52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f940 	bl	800bed0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bc50:	e013      	b.n	800bc7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	885b      	ldrh	r3, [r3, #2]
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d10b      	bne.n	800bc72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	889b      	ldrh	r3, [r3, #4]
 800bc5e:	0a1b      	lsrs	r3, r3, #8
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f930 	bl	800bed0 <USBD_CtlSendStatus>
}
 800bc70:	e003      	b.n	800bc7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f860 	bl	800bd3a <USBD_CtlError>
}
 800bc7a:	bf00      	nop
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	3b01      	subs	r3, #1
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d80b      	bhi.n	800bcb2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	885b      	ldrh	r3, [r3, #2]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d10c      	bne.n	800bcbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f910 	bl	800bed0 <USBD_CtlSendStatus>
      }
      break;
 800bcb0:	e004      	b.n	800bcbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f840 	bl	800bd3a <USBD_CtlError>
      break;
 800bcba:	e000      	b.n	800bcbe <USBD_ClrFeature+0x3c>
      break;
 800bcbc:	bf00      	nop
  }
}
 800bcbe:	bf00      	nop
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b084      	sub	sp, #16
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	781a      	ldrb	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	3301      	adds	r3, #1
 800bce0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	781a      	ldrb	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	3301      	adds	r3, #1
 800bcee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f7ff fa17 	bl	800b124 <SWAPBYTE>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3301      	adds	r3, #1
 800bd02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3301      	adds	r3, #1
 800bd08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f7ff fa0a 	bl	800b124 <SWAPBYTE>
 800bd10:	4603      	mov	r3, r0
 800bd12:	461a      	mov	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	3301      	adds	r3, #1
 800bd22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f7ff f9fd 	bl	800b124 <SWAPBYTE>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	80da      	strh	r2, [r3, #6]
}
 800bd32:	bf00      	nop
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd44:	2180      	movs	r1, #128	; 0x80
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fd3c 	bl	800c7c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fd38 	bl	800c7c4 <USBD_LL_StallEP>
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d036      	beq.n	800bde0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd76:	6938      	ldr	r0, [r7, #16]
 800bd78:	f000 f836 	bl	800bde8 <USBD_GetLen>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	3301      	adds	r3, #1
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	4413      	add	r3, r2
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	7812      	ldrb	r2, [r2, #0]
 800bd94:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4413      	add	r3, r2
 800bda2:	2203      	movs	r2, #3
 800bda4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bdac:	e013      	b.n	800bdd6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	7812      	ldrb	r2, [r2, #0]
 800bdb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	613b      	str	r3, [r7, #16]
    idx++;
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	4413      	add	r3, r2
 800bdcc:	2200      	movs	r2, #0
 800bdce:	701a      	strb	r2, [r3, #0]
    idx++;
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1e7      	bne.n	800bdae <USBD_GetString+0x52>
 800bdde:	e000      	b.n	800bde2 <USBD_GetString+0x86>
    return;
 800bde0:	bf00      	nop
  }
}
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bdf8:	e005      	b.n	800be06 <USBD_GetLen+0x1e>
  {
    len++;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	3301      	adds	r3, #1
 800be04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1f5      	bne.n	800bdfa <USBD_GetLen+0x12>
  }

  return len;
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2202      	movs	r2, #2
 800be2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	2100      	movs	r1, #0
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f000 fd47 	bl	800c8d6 <USBD_LL_Transmit>

  return USBD_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b084      	sub	sp, #16
 800be56:	af00      	add	r7, sp, #0
 800be58:	60f8      	str	r0, [r7, #12]
 800be5a:	60b9      	str	r1, [r7, #8]
 800be5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	2100      	movs	r1, #0
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 fd36 	bl	800c8d6 <USBD_LL_Transmit>

  return USBD_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2203      	movs	r2, #3
 800be84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	2100      	movs	r1, #0
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f000 fd3a 	bl	800c918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	2100      	movs	r1, #0
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 fd29 	bl	800c918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2204      	movs	r2, #4
 800bedc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bee0:	2300      	movs	r3, #0
 800bee2:	2200      	movs	r2, #0
 800bee4:	2100      	movs	r1, #0
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fcf5 	bl	800c8d6 <USBD_LL_Transmit>

  return USBD_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b082      	sub	sp, #8
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2205      	movs	r2, #5
 800bf02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf06:	2300      	movs	r3, #0
 800bf08:	2200      	movs	r2, #0
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fd03 	bl	800c918 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf20:	2200      	movs	r2, #0
 800bf22:	4912      	ldr	r1, [pc, #72]	; (800bf6c <MX_USB_DEVICE_Init+0x50>)
 800bf24:	4812      	ldr	r0, [pc, #72]	; (800bf70 <MX_USB_DEVICE_Init+0x54>)
 800bf26:	f7fe fcdd 	bl	800a8e4 <USBD_Init>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf30:	f7f6 ff22 	bl	8002d78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf34:	490f      	ldr	r1, [pc, #60]	; (800bf74 <MX_USB_DEVICE_Init+0x58>)
 800bf36:	480e      	ldr	r0, [pc, #56]	; (800bf70 <MX_USB_DEVICE_Init+0x54>)
 800bf38:	f7fe fd04 	bl	800a944 <USBD_RegisterClass>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf42:	f7f6 ff19 	bl	8002d78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf46:	490c      	ldr	r1, [pc, #48]	; (800bf78 <MX_USB_DEVICE_Init+0x5c>)
 800bf48:	4809      	ldr	r0, [pc, #36]	; (800bf70 <MX_USB_DEVICE_Init+0x54>)
 800bf4a:	f7fe fbf5 	bl	800a738 <USBD_CDC_RegisterInterface>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf54:	f7f6 ff10 	bl	8002d78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf58:	4805      	ldr	r0, [pc, #20]	; (800bf70 <MX_USB_DEVICE_Init+0x54>)
 800bf5a:	f7fe fd29 	bl	800a9b0 <USBD_Start>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d001      	beq.n	800bf68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf64:	f7f6 ff08 	bl	8002d78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf68:	bf00      	nop
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	200000d4 	.word	0x200000d4
 800bf70:	200006e0 	.word	0x200006e0
 800bf74:	20000040 	.word	0x20000040
 800bf78:	200000c0 	.word	0x200000c0

0800bf7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf80:	2200      	movs	r2, #0
 800bf82:	4905      	ldr	r1, [pc, #20]	; (800bf98 <CDC_Init_FS+0x1c>)
 800bf84:	4805      	ldr	r0, [pc, #20]	; (800bf9c <CDC_Init_FS+0x20>)
 800bf86:	f7fe fbf1 	bl	800a76c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf8a:	4905      	ldr	r1, [pc, #20]	; (800bfa0 <CDC_Init_FS+0x24>)
 800bf8c:	4803      	ldr	r0, [pc, #12]	; (800bf9c <CDC_Init_FS+0x20>)
 800bf8e:	f7fe fc0f 	bl	800a7b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	200011bc 	.word	0x200011bc
 800bf9c:	200006e0 	.word	0x200006e0
 800bfa0:	200009bc 	.word	0x200009bc

0800bfa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bfa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	4603      	mov	r3, r0
 800bfbc:	6039      	str	r1, [r7, #0]
 800bfbe:	71fb      	strb	r3, [r7, #7]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	2b23      	cmp	r3, #35	; 0x23
 800bfc8:	d84a      	bhi.n	800c060 <CDC_Control_FS+0xac>
 800bfca:	a201      	add	r2, pc, #4	; (adr r2, 800bfd0 <CDC_Control_FS+0x1c>)
 800bfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd0:	0800c061 	.word	0x0800c061
 800bfd4:	0800c061 	.word	0x0800c061
 800bfd8:	0800c061 	.word	0x0800c061
 800bfdc:	0800c061 	.word	0x0800c061
 800bfe0:	0800c061 	.word	0x0800c061
 800bfe4:	0800c061 	.word	0x0800c061
 800bfe8:	0800c061 	.word	0x0800c061
 800bfec:	0800c061 	.word	0x0800c061
 800bff0:	0800c061 	.word	0x0800c061
 800bff4:	0800c061 	.word	0x0800c061
 800bff8:	0800c061 	.word	0x0800c061
 800bffc:	0800c061 	.word	0x0800c061
 800c000:	0800c061 	.word	0x0800c061
 800c004:	0800c061 	.word	0x0800c061
 800c008:	0800c061 	.word	0x0800c061
 800c00c:	0800c061 	.word	0x0800c061
 800c010:	0800c061 	.word	0x0800c061
 800c014:	0800c061 	.word	0x0800c061
 800c018:	0800c061 	.word	0x0800c061
 800c01c:	0800c061 	.word	0x0800c061
 800c020:	0800c061 	.word	0x0800c061
 800c024:	0800c061 	.word	0x0800c061
 800c028:	0800c061 	.word	0x0800c061
 800c02c:	0800c061 	.word	0x0800c061
 800c030:	0800c061 	.word	0x0800c061
 800c034:	0800c061 	.word	0x0800c061
 800c038:	0800c061 	.word	0x0800c061
 800c03c:	0800c061 	.word	0x0800c061
 800c040:	0800c061 	.word	0x0800c061
 800c044:	0800c061 	.word	0x0800c061
 800c048:	0800c061 	.word	0x0800c061
 800c04c:	0800c061 	.word	0x0800c061
 800c050:	0800c061 	.word	0x0800c061
 800c054:	0800c061 	.word	0x0800c061
 800c058:	0800c061 	.word	0x0800c061
 800c05c:	0800c061 	.word	0x0800c061
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c060:	bf00      	nop
  }

  return (USBD_OK);
 800c062:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c064:	4618      	mov	r0, r3
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c07a:	6879      	ldr	r1, [r7, #4]
 800c07c:	4815      	ldr	r0, [pc, #84]	; (800c0d4 <CDC_Receive_FS+0x64>)
 800c07e:	f7fe fb97 	bl	800a7b0 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c082:	4814      	ldr	r0, [pc, #80]	; (800c0d4 <CDC_Receive_FS+0x64>)
 800c084:	f7fe fbf8 	bl	800a878 <USBD_CDC_ReceivePacket>



	  uint8_t len=(uint8_t)*Len;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	73fb      	strb	r3, [r7, #15]
	  memset(&buffer[0],0,8);
 800c08e:	2208      	movs	r2, #8
 800c090:	2100      	movs	r1, #0
 800c092:	4811      	ldr	r0, [pc, #68]	; (800c0d8 <CDC_Receive_FS+0x68>)
 800c094:	f000 fd3e 	bl	800cb14 <memset>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	461a      	mov	r2, r3
	  memcpy(&buffer[0],&Buf[0],4);
 800c09e:	4b0e      	ldr	r3, [pc, #56]	; (800c0d8 <CDC_Receive_FS+0x68>)
 800c0a0:	601a      	str	r2, [r3, #0]
	  memcpy(&buffer[1],&Buf[0]+4,4);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4b0b      	ldr	r3, [pc, #44]	; (800c0d8 <CDC_Receive_FS+0x68>)
 800c0ac:	605a      	str	r2, [r3, #4]
	  memset(Buf,'\0',len);
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fd2d 	bl	800cb14 <memset>

	  v_in=buffer[0];
 800c0ba:	4b07      	ldr	r3, [pc, #28]	; (800c0d8 <CDC_Receive_FS+0x68>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a07      	ldr	r2, [pc, #28]	; (800c0dc <CDC_Receive_FS+0x6c>)
 800c0c0:	6013      	str	r3, [r2, #0]
	  w_in=buffer[1];
 800c0c2:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <CDC_Receive_FS+0x68>)
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	4a06      	ldr	r2, [pc, #24]	; (800c0e0 <CDC_Receive_FS+0x70>)
 800c0c8:	6013      	str	r3, [r2, #0]

	  //setSpeed(buffer[0], buffer[1]);//buffer[0] is v_linear, buffer[1] is w_angular

	  //CDC_Transmit_FS(Buf, *Len);
	  return (USBD_OK);
 800c0ca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	200006e0 	.word	0x200006e0
 800c0d8:	20000568 	.word	0x20000568
 800c0dc:	20000600 	.word	0x20000600
 800c0e0:	20000604 	.word	0x20000604

0800c0e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <CDC_Transmit_FS+0x48>)
 800c0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c106:	2301      	movs	r3, #1
 800c108:	e00b      	b.n	800c122 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c10a:	887b      	ldrh	r3, [r7, #2]
 800c10c:	461a      	mov	r2, r3
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	4806      	ldr	r0, [pc, #24]	; (800c12c <CDC_Transmit_FS+0x48>)
 800c112:	f7fe fb2b 	bl	800a76c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c116:	4805      	ldr	r0, [pc, #20]	; (800c12c <CDC_Transmit_FS+0x48>)
 800c118:	f7fe fb68 	bl	800a7ec <USBD_CDC_TransmitPacket>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]


  /* USER CODE END 7 */
  return result;
 800c120:	7bfb      	ldrb	r3, [r7, #15]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	200006e0 	.word	0x200006e0

0800c130 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	4613      	mov	r3, r2
 800c13c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c142:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c146:	4618      	mov	r0, r3
 800c148:	371c      	adds	r7, #28
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	6039      	str	r1, [r7, #0]
 800c15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2212      	movs	r2, #18
 800c164:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c166:	4b03      	ldr	r3, [pc, #12]	; (800c174 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c168:	4618      	mov	r0, r3
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	200000f4 	.word	0x200000f4

0800c178 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2204      	movs	r2, #4
 800c188:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c18a:	4b03      	ldr	r3, [pc, #12]	; (800c198 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr
 800c198:	20000114 	.word	0x20000114

0800c19c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	6039      	str	r1, [r7, #0]
 800c1a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1a8:	79fb      	ldrb	r3, [r7, #7]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d105      	bne.n	800c1ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	4907      	ldr	r1, [pc, #28]	; (800c1d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1b2:	4808      	ldr	r0, [pc, #32]	; (800c1d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1b4:	f7ff fdd2 	bl	800bd5c <USBD_GetString>
 800c1b8:	e004      	b.n	800c1c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	4904      	ldr	r1, [pc, #16]	; (800c1d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1be:	4805      	ldr	r0, [pc, #20]	; (800c1d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1c0:	f7ff fdcc 	bl	800bd5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1c4:	4b02      	ldr	r3, [pc, #8]	; (800c1d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200019bc 	.word	0x200019bc
 800c1d4:	08010690 	.word	0x08010690

0800c1d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	6039      	str	r1, [r7, #0]
 800c1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	4904      	ldr	r1, [pc, #16]	; (800c1f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1e8:	4804      	ldr	r0, [pc, #16]	; (800c1fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1ea:	f7ff fdb7 	bl	800bd5c <USBD_GetString>
  return USBD_StrDesc;
 800c1ee:	4b02      	ldr	r3, [pc, #8]	; (800c1f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	200019bc 	.word	0x200019bc
 800c1fc:	080106a8 	.word	0x080106a8

0800c200 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	6039      	str	r1, [r7, #0]
 800c20a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	221a      	movs	r2, #26
 800c210:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c212:	f000 f855 	bl	800c2c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c216:	4b02      	ldr	r3, [pc, #8]	; (800c220 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	20000118 	.word	0x20000118

0800c224 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	4603      	mov	r3, r0
 800c22c:	6039      	str	r1, [r7, #0]
 800c22e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c230:	79fb      	ldrb	r3, [r7, #7]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d105      	bne.n	800c242 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	4907      	ldr	r1, [pc, #28]	; (800c258 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c23a:	4808      	ldr	r0, [pc, #32]	; (800c25c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c23c:	f7ff fd8e 	bl	800bd5c <USBD_GetString>
 800c240:	e004      	b.n	800c24c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	4904      	ldr	r1, [pc, #16]	; (800c258 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c246:	4805      	ldr	r0, [pc, #20]	; (800c25c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c248:	f7ff fd88 	bl	800bd5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c24c:	4b02      	ldr	r3, [pc, #8]	; (800c258 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	200019bc 	.word	0x200019bc
 800c25c:	080106bc 	.word	0x080106bc

0800c260 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	6039      	str	r1, [r7, #0]
 800c26a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c26c:	79fb      	ldrb	r3, [r7, #7]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d105      	bne.n	800c27e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	4907      	ldr	r1, [pc, #28]	; (800c294 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c276:	4808      	ldr	r0, [pc, #32]	; (800c298 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c278:	f7ff fd70 	bl	800bd5c <USBD_GetString>
 800c27c:	e004      	b.n	800c288 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	4904      	ldr	r1, [pc, #16]	; (800c294 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c282:	4805      	ldr	r0, [pc, #20]	; (800c298 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c284:	f7ff fd6a 	bl	800bd5c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c288:	4b02      	ldr	r3, [pc, #8]	; (800c294 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	200019bc 	.word	0x200019bc
 800c298:	080106c8 	.word	0x080106c8

0800c29c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	6039      	str	r1, [r7, #0]
 800c2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	220c      	movs	r2, #12
 800c2ac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c2ae:	4b03      	ldr	r3, [pc, #12]	; (800c2bc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	20000108 	.word	0x20000108

0800c2c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2c6:	4b0f      	ldr	r3, [pc, #60]	; (800c304 <Get_SerialNum+0x44>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2cc:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <Get_SerialNum+0x48>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2d2:	4b0e      	ldr	r3, [pc, #56]	; (800c30c <Get_SerialNum+0x4c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4413      	add	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d009      	beq.n	800c2fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2e6:	2208      	movs	r2, #8
 800c2e8:	4909      	ldr	r1, [pc, #36]	; (800c310 <Get_SerialNum+0x50>)
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f000 f814 	bl	800c318 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2f0:	2204      	movs	r2, #4
 800c2f2:	4908      	ldr	r1, [pc, #32]	; (800c314 <Get_SerialNum+0x54>)
 800c2f4:	68b8      	ldr	r0, [r7, #8]
 800c2f6:	f000 f80f 	bl	800c318 <IntToUnicode>
  }
}
 800c2fa:	bf00      	nop
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	1fff7a10 	.word	0x1fff7a10
 800c308:	1fff7a14 	.word	0x1fff7a14
 800c30c:	1fff7a18 	.word	0x1fff7a18
 800c310:	2000011a 	.word	0x2000011a
 800c314:	2000012a 	.word	0x2000012a

0800c318 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c318:	b480      	push	{r7}
 800c31a:	b087      	sub	sp, #28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	4613      	mov	r3, r2
 800c324:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c32a:	2300      	movs	r3, #0
 800c32c:	75fb      	strb	r3, [r7, #23]
 800c32e:	e027      	b.n	800c380 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	0f1b      	lsrs	r3, r3, #28
 800c334:	2b09      	cmp	r3, #9
 800c336:	d80b      	bhi.n	800c350 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	0f1b      	lsrs	r3, r3, #28
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	7dfb      	ldrb	r3, [r7, #23]
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4619      	mov	r1, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	440b      	add	r3, r1
 800c348:	3230      	adds	r2, #48	; 0x30
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	e00a      	b.n	800c366 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	0f1b      	lsrs	r3, r3, #28
 800c354:	b2da      	uxtb	r2, r3
 800c356:	7dfb      	ldrb	r3, [r7, #23]
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	4619      	mov	r1, r3
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	440b      	add	r3, r1
 800c360:	3237      	adds	r2, #55	; 0x37
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	011b      	lsls	r3, r3, #4
 800c36a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c36c:	7dfb      	ldrb	r3, [r7, #23]
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	3301      	adds	r3, #1
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	4413      	add	r3, r2
 800c376:	2200      	movs	r2, #0
 800c378:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c37a:	7dfb      	ldrb	r3, [r7, #23]
 800c37c:	3301      	adds	r3, #1
 800c37e:	75fb      	strb	r3, [r7, #23]
 800c380:	7dfa      	ldrb	r2, [r7, #23]
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	429a      	cmp	r2, r3
 800c386:	d3d3      	bcc.n	800c330 <IntToUnicode+0x18>
  }
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	371c      	adds	r7, #28
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
	...

0800c398 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b0a0      	sub	sp, #128	; 0x80
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	605a      	str	r2, [r3, #4]
 800c3aa:	609a      	str	r2, [r3, #8]
 800c3ac:	60da      	str	r2, [r3, #12]
 800c3ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c3b0:	f107 0310 	add.w	r3, r7, #16
 800c3b4:	225c      	movs	r2, #92	; 0x5c
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 fbab 	bl	800cb14 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3c6:	d156      	bne.n	800c476 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c3c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c3d2:	f107 0310 	add.w	r3, r7, #16
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7f9 fbd2 	bl	8005b80 <HAL_RCCEx_PeriphCLKConfig>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c3e2:	f7f6 fcc9 	bl	8002d78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	4b25      	ldr	r3, [pc, #148]	; (800c480 <HAL_PCD_MspInit+0xe8>)
 800c3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ee:	4a24      	ldr	r2, [pc, #144]	; (800c480 <HAL_PCD_MspInit+0xe8>)
 800c3f0:	f043 0301 	orr.w	r3, r3, #1
 800c3f4:	6313      	str	r3, [r2, #48]	; 0x30
 800c3f6:	4b22      	ldr	r3, [pc, #136]	; (800c480 <HAL_PCD_MspInit+0xe8>)
 800c3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	60fb      	str	r3, [r7, #12]
 800c400:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800c402:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c406:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c408:	2302      	movs	r3, #2
 800c40a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c40c:	2300      	movs	r3, #0
 800c40e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c410:	2303      	movs	r3, #3
 800c412:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c414:	230a      	movs	r3, #10
 800c416:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c418:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c41c:	4619      	mov	r1, r3
 800c41e:	4819      	ldr	r0, [pc, #100]	; (800c484 <HAL_PCD_MspInit+0xec>)
 800c420:	f7f7 fcc0 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c424:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c428:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c42a:	2300      	movs	r3, #0
 800c42c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c432:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c436:	4619      	mov	r1, r3
 800c438:	4812      	ldr	r0, [pc, #72]	; (800c484 <HAL_PCD_MspInit+0xec>)
 800c43a:	f7f7 fcb3 	bl	8003da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c43e:	4b10      	ldr	r3, [pc, #64]	; (800c480 <HAL_PCD_MspInit+0xe8>)
 800c440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c442:	4a0f      	ldr	r2, [pc, #60]	; (800c480 <HAL_PCD_MspInit+0xe8>)
 800c444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c448:	6353      	str	r3, [r2, #52]	; 0x34
 800c44a:	2300      	movs	r3, #0
 800c44c:	60bb      	str	r3, [r7, #8]
 800c44e:	4b0c      	ldr	r3, [pc, #48]	; (800c480 <HAL_PCD_MspInit+0xe8>)
 800c450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c452:	4a0b      	ldr	r2, [pc, #44]	; (800c480 <HAL_PCD_MspInit+0xe8>)
 800c454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c458:	6453      	str	r3, [r2, #68]	; 0x44
 800c45a:	4b09      	ldr	r3, [pc, #36]	; (800c480 <HAL_PCD_MspInit+0xe8>)
 800c45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c462:	60bb      	str	r3, [r7, #8]
 800c464:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c466:	2200      	movs	r2, #0
 800c468:	2100      	movs	r1, #0
 800c46a:	2043      	movs	r0, #67	; 0x43
 800c46c:	f7f7 fbd1 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c470:	2043      	movs	r0, #67	; 0x43
 800c472:	f7f7 fbea 	bl	8003c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c476:	bf00      	nop
 800c478:	3780      	adds	r7, #128	; 0x80
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	40023800 	.word	0x40023800
 800c484:	40020000 	.word	0x40020000

0800c488 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c49c:	4619      	mov	r1, r3
 800c49e:	4610      	mov	r0, r2
 800c4a0:	f7fe fad3 	bl	800aa4a <USBD_LL_SetupStage>
}
 800c4a4:	bf00      	nop
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4be:	78fa      	ldrb	r2, [r7, #3]
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	00db      	lsls	r3, r3, #3
 800c4c6:	4413      	add	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	440b      	add	r3, r1
 800c4cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	78fb      	ldrb	r3, [r7, #3]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	f7fe fb0d 	bl	800aaf4 <USBD_LL_DataOutStage>
}
 800c4da:	bf00      	nop
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4f4:	78fa      	ldrb	r2, [r7, #3]
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	00db      	lsls	r3, r3, #3
 800c4fc:	4413      	add	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	440b      	add	r3, r1
 800c502:	334c      	adds	r3, #76	; 0x4c
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	78fb      	ldrb	r3, [r7, #3]
 800c508:	4619      	mov	r1, r3
 800c50a:	f7fe fba6 	bl	800ac5a <USBD_LL_DataInStage>
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c524:	4618      	mov	r0, r3
 800c526:	f7fe fcda 	bl	800aede <USBD_LL_SOF>
}
 800c52a:	bf00      	nop
 800c52c:	3708      	adds	r7, #8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b084      	sub	sp, #16
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c53a:	2301      	movs	r3, #1
 800c53c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d102      	bne.n	800c54c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c546:	2300      	movs	r3, #0
 800c548:	73fb      	strb	r3, [r7, #15]
 800c54a:	e008      	b.n	800c55e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	2b02      	cmp	r3, #2
 800c552:	d102      	bne.n	800c55a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c554:	2301      	movs	r3, #1
 800c556:	73fb      	strb	r3, [r7, #15]
 800c558:	e001      	b.n	800c55e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c55a:	f7f6 fc0d 	bl	8002d78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c564:	7bfa      	ldrb	r2, [r7, #15]
 800c566:	4611      	mov	r1, r2
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fe fc7a 	bl	800ae62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe fc22 	bl	800adbe <USBD_LL_Reset>
}
 800c57a:	bf00      	nop
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
	...

0800c584 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe fc75 	bl	800ae82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	6812      	ldr	r2, [r2, #0]
 800c5a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5aa:	f043 0301 	orr.w	r3, r3, #1
 800c5ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a1b      	ldr	r3, [r3, #32]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d005      	beq.n	800c5c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5b8:	4b04      	ldr	r3, [pc, #16]	; (800c5cc <HAL_PCD_SuspendCallback+0x48>)
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	4a03      	ldr	r2, [pc, #12]	; (800c5cc <HAL_PCD_SuspendCallback+0x48>)
 800c5be:	f043 0306 	orr.w	r3, r3, #6
 800c5c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5c4:	bf00      	nop
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	e000ed00 	.word	0xe000ed00

0800c5d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7fe fc65 	bl	800aeae <USBD_LL_Resume>
}
 800c5e4:	bf00      	nop
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5fe:	78fa      	ldrb	r2, [r7, #3]
 800c600:	4611      	mov	r1, r2
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe fcbd 	bl	800af82 <USBD_LL_IsoOUTIncomplete>
}
 800c608:	bf00      	nop
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c622:	78fa      	ldrb	r2, [r7, #3]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f7fe fc79 	bl	800af1e <USBD_LL_IsoINIncomplete>
}
 800c62c:	bf00      	nop
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe fccf 	bl	800afe6 <USBD_LL_DevConnected>
}
 800c648:	bf00      	nop
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fe fccc 	bl	800affc <USBD_LL_DevDisconnected>
}
 800c664:	bf00      	nop
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d13c      	bne.n	800c6f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c67c:	4a20      	ldr	r2, [pc, #128]	; (800c700 <USBD_LL_Init+0x94>)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a1e      	ldr	r2, [pc, #120]	; (800c700 <USBD_LL_Init+0x94>)
 800c688:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c68c:	4b1c      	ldr	r3, [pc, #112]	; (800c700 <USBD_LL_Init+0x94>)
 800c68e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c692:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c694:	4b1a      	ldr	r3, [pc, #104]	; (800c700 <USBD_LL_Init+0x94>)
 800c696:	2206      	movs	r2, #6
 800c698:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c69a:	4b19      	ldr	r3, [pc, #100]	; (800c700 <USBD_LL_Init+0x94>)
 800c69c:	2202      	movs	r2, #2
 800c69e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c6a0:	4b17      	ldr	r3, [pc, #92]	; (800c700 <USBD_LL_Init+0x94>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6a6:	4b16      	ldr	r3, [pc, #88]	; (800c700 <USBD_LL_Init+0x94>)
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c6ac:	4b14      	ldr	r3, [pc, #80]	; (800c700 <USBD_LL_Init+0x94>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c6b2:	4b13      	ldr	r3, [pc, #76]	; (800c700 <USBD_LL_Init+0x94>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c6b8:	4b11      	ldr	r3, [pc, #68]	; (800c700 <USBD_LL_Init+0x94>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c6be:	4b10      	ldr	r3, [pc, #64]	; (800c700 <USBD_LL_Init+0x94>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c6c4:	4b0e      	ldr	r3, [pc, #56]	; (800c700 <USBD_LL_Init+0x94>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c6ca:	480d      	ldr	r0, [pc, #52]	; (800c700 <USBD_LL_Init+0x94>)
 800c6cc:	f7f7 fe74 	bl	80043b8 <HAL_PCD_Init>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c6d6:	f7f6 fb4f 	bl	8002d78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6da:	2180      	movs	r1, #128	; 0x80
 800c6dc:	4808      	ldr	r0, [pc, #32]	; (800c700 <USBD_LL_Init+0x94>)
 800c6de:	f7f9 f900 	bl	80058e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6e2:	2240      	movs	r2, #64	; 0x40
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4806      	ldr	r0, [pc, #24]	; (800c700 <USBD_LL_Init+0x94>)
 800c6e8:	f7f9 f8b4 	bl	8005854 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6ec:	2280      	movs	r2, #128	; 0x80
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	4803      	ldr	r0, [pc, #12]	; (800c700 <USBD_LL_Init+0x94>)
 800c6f2:	f7f9 f8af 	bl	8005854 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	20001bbc 	.word	0x20001bbc

0800c704 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c710:	2300      	movs	r3, #0
 800c712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7f7 ff70 	bl	8004600 <HAL_PCD_Start>
 800c720:	4603      	mov	r3, r0
 800c722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f990 	bl	800ca4c <USBD_Get_USB_Status>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c730:	7bbb      	ldrb	r3, [r7, #14]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	4608      	mov	r0, r1
 800c744:	4611      	mov	r1, r2
 800c746:	461a      	mov	r2, r3
 800c748:	4603      	mov	r3, r0
 800c74a:	70fb      	strb	r3, [r7, #3]
 800c74c:	460b      	mov	r3, r1
 800c74e:	70bb      	strb	r3, [r7, #2]
 800c750:	4613      	mov	r3, r2
 800c752:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c754:	2300      	movs	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c758:	2300      	movs	r3, #0
 800c75a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c762:	78bb      	ldrb	r3, [r7, #2]
 800c764:	883a      	ldrh	r2, [r7, #0]
 800c766:	78f9      	ldrb	r1, [r7, #3]
 800c768:	f7f8 fc6e 	bl	8005048 <HAL_PCD_EP_Open>
 800c76c:	4603      	mov	r3, r0
 800c76e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c770:	7bfb      	ldrb	r3, [r7, #15]
 800c772:	4618      	mov	r0, r3
 800c774:	f000 f96a 	bl	800ca4c <USBD_Get_USB_Status>
 800c778:	4603      	mov	r3, r0
 800c77a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c77c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	460b      	mov	r3, r1
 800c790:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c796:	2300      	movs	r3, #0
 800c798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7a0:	78fa      	ldrb	r2, [r7, #3]
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7f8 fcb7 	bl	8005118 <HAL_PCD_EP_Close>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f94b 	bl	800ca4c <USBD_Get_USB_Status>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7de:	78fa      	ldrb	r2, [r7, #3]
 800c7e0:	4611      	mov	r1, r2
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7f8 fd8f 	bl	8005306 <HAL_PCD_EP_SetStall>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 f92c 	bl	800ca4c <USBD_Get_USB_Status>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	460b      	mov	r3, r1
 800c80c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c81c:	78fa      	ldrb	r2, [r7, #3]
 800c81e:	4611      	mov	r1, r2
 800c820:	4618      	mov	r0, r3
 800c822:	f7f8 fdd4 	bl	80053ce <HAL_PCD_EP_ClrStall>
 800c826:	4603      	mov	r3, r0
 800c828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c82a:	7bfb      	ldrb	r3, [r7, #15]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 f90d 	bl	800ca4c <USBD_Get_USB_Status>
 800c832:	4603      	mov	r3, r0
 800c834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c836:	7bbb      	ldrb	r3, [r7, #14]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	460b      	mov	r3, r1
 800c84a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c852:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	da0b      	bge.n	800c874 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c85c:	78fb      	ldrb	r3, [r7, #3]
 800c85e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c862:	68f9      	ldr	r1, [r7, #12]
 800c864:	4613      	mov	r3, r2
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	4413      	add	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	440b      	add	r3, r1
 800c86e:	333e      	adds	r3, #62	; 0x3e
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	e00b      	b.n	800c88c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c874:	78fb      	ldrb	r3, [r7, #3]
 800c876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c87a:	68f9      	ldr	r1, [r7, #12]
 800c87c:	4613      	mov	r3, r2
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	4413      	add	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	440b      	add	r3, r1
 800c886:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c88a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8b2:	78fa      	ldrb	r2, [r7, #3]
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7f8 fba1 	bl	8004ffe <HAL_PCD_SetAddress>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 f8c2 	bl	800ca4c <USBD_Get_USB_Status>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b086      	sub	sp, #24
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	60f8      	str	r0, [r7, #12]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8f4:	7af9      	ldrb	r1, [r7, #11]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	f7f8 fcba 	bl	8005272 <HAL_PCD_EP_Transmit>
 800c8fe:	4603      	mov	r3, r0
 800c900:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c902:	7dfb      	ldrb	r3, [r7, #23]
 800c904:	4618      	mov	r0, r3
 800c906:	f000 f8a1 	bl	800ca4c <USBD_Get_USB_Status>
 800c90a:	4603      	mov	r3, r0
 800c90c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c90e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3718      	adds	r7, #24
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	607a      	str	r2, [r7, #4]
 800c922:	603b      	str	r3, [r7, #0]
 800c924:	460b      	mov	r3, r1
 800c926:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c928:	2300      	movs	r3, #0
 800c92a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c936:	7af9      	ldrb	r1, [r7, #11]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	f7f8 fc36 	bl	80051ac <HAL_PCD_EP_Receive>
 800c940:	4603      	mov	r3, r0
 800c942:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f880 	bl	800ca4c <USBD_Get_USB_Status>
 800c94c:	4603      	mov	r3, r0
 800c94e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c950:	7dbb      	ldrb	r3, [r7, #22]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3718      	adds	r7, #24
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	460b      	mov	r3, r1
 800c964:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c96c:	78fa      	ldrb	r2, [r7, #3]
 800c96e:	4611      	mov	r1, r2
 800c970:	4618      	mov	r0, r3
 800c972:	f7f8 fc66 	bl	8005242 <HAL_PCD_EP_GetRxCount>
 800c976:	4603      	mov	r3, r0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c98c:	78fb      	ldrb	r3, [r7, #3]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <HAL_PCDEx_LPM_Callback+0x18>
 800c992:	2b01      	cmp	r3, #1
 800c994:	d01f      	beq.n	800c9d6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c996:	e03b      	b.n	800ca10 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a1b      	ldr	r3, [r3, #32]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d007      	beq.n	800c9b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c9a0:	f7f4 fd12 	bl	80013c8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9a4:	4b1c      	ldr	r3, [pc, #112]	; (800ca18 <HAL_PCDEx_LPM_Callback+0x98>)
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	4a1b      	ldr	r2, [pc, #108]	; (800ca18 <HAL_PCDEx_LPM_Callback+0x98>)
 800c9aa:	f023 0306 	bic.w	r3, r3, #6
 800c9ae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	6812      	ldr	r2, [r2, #0]
 800c9be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9c2:	f023 0301 	bic.w	r3, r3, #1
 800c9c6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe fa6d 	bl	800aeae <USBD_LL_Resume>
    break;
 800c9d4:	e01c      	b.n	800ca10 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	6812      	ldr	r2, [r2, #0]
 800c9e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9e8:	f043 0301 	orr.w	r3, r3, #1
 800c9ec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fe fa44 	bl	800ae82 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d005      	beq.n	800ca0e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca02:	4b05      	ldr	r3, [pc, #20]	; (800ca18 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	4a04      	ldr	r2, [pc, #16]	; (800ca18 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca08:	f043 0306 	orr.w	r3, r3, #6
 800ca0c:	6113      	str	r3, [r2, #16]
    break;
 800ca0e:	bf00      	nop
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	e000ed00 	.word	0xe000ed00

0800ca1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca24:	4b03      	ldr	r3, [pc, #12]	; (800ca34 <USBD_static_malloc+0x18>)
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	200020c8 	.word	0x200020c8

0800ca38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]

}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	4603      	mov	r3, r0
 800ca54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca5a:	79fb      	ldrb	r3, [r7, #7]
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d817      	bhi.n	800ca90 <USBD_Get_USB_Status+0x44>
 800ca60:	a201      	add	r2, pc, #4	; (adr r2, 800ca68 <USBD_Get_USB_Status+0x1c>)
 800ca62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca66:	bf00      	nop
 800ca68:	0800ca79 	.word	0x0800ca79
 800ca6c:	0800ca7f 	.word	0x0800ca7f
 800ca70:	0800ca85 	.word	0x0800ca85
 800ca74:	0800ca8b 	.word	0x0800ca8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca7c:	e00b      	b.n	800ca96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	73fb      	strb	r3, [r7, #15]
    break;
 800ca82:	e008      	b.n	800ca96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca84:	2301      	movs	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]
    break;
 800ca88:	e005      	b.n	800ca96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca8e:	e002      	b.n	800ca96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca90:	2303      	movs	r3, #3
 800ca92:	73fb      	strb	r3, [r7, #15]
    break;
 800ca94:	bf00      	nop
  }
  return usb_status;
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <__errno>:
 800caa4:	4b01      	ldr	r3, [pc, #4]	; (800caac <__errno+0x8>)
 800caa6:	6818      	ldr	r0, [r3, #0]
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	20000134 	.word	0x20000134

0800cab0 <__libc_init_array>:
 800cab0:	b570      	push	{r4, r5, r6, lr}
 800cab2:	4d0d      	ldr	r5, [pc, #52]	; (800cae8 <__libc_init_array+0x38>)
 800cab4:	4c0d      	ldr	r4, [pc, #52]	; (800caec <__libc_init_array+0x3c>)
 800cab6:	1b64      	subs	r4, r4, r5
 800cab8:	10a4      	asrs	r4, r4, #2
 800caba:	2600      	movs	r6, #0
 800cabc:	42a6      	cmp	r6, r4
 800cabe:	d109      	bne.n	800cad4 <__libc_init_array+0x24>
 800cac0:	4d0b      	ldr	r5, [pc, #44]	; (800caf0 <__libc_init_array+0x40>)
 800cac2:	4c0c      	ldr	r4, [pc, #48]	; (800caf4 <__libc_init_array+0x44>)
 800cac4:	f003 fdd6 	bl	8010674 <_init>
 800cac8:	1b64      	subs	r4, r4, r5
 800caca:	10a4      	asrs	r4, r4, #2
 800cacc:	2600      	movs	r6, #0
 800cace:	42a6      	cmp	r6, r4
 800cad0:	d105      	bne.n	800cade <__libc_init_array+0x2e>
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cad8:	4798      	blx	r3
 800cada:	3601      	adds	r6, #1
 800cadc:	e7ee      	b.n	800cabc <__libc_init_array+0xc>
 800cade:	f855 3b04 	ldr.w	r3, [r5], #4
 800cae2:	4798      	blx	r3
 800cae4:	3601      	adds	r6, #1
 800cae6:	e7f2      	b.n	800cace <__libc_init_array+0x1e>
 800cae8:	08010cb0 	.word	0x08010cb0
 800caec:	08010cb0 	.word	0x08010cb0
 800caf0:	08010cb0 	.word	0x08010cb0
 800caf4:	08010cb4 	.word	0x08010cb4

0800caf8 <memcpy>:
 800caf8:	440a      	add	r2, r1
 800cafa:	4291      	cmp	r1, r2
 800cafc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cb00:	d100      	bne.n	800cb04 <memcpy+0xc>
 800cb02:	4770      	bx	lr
 800cb04:	b510      	push	{r4, lr}
 800cb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb0e:	4291      	cmp	r1, r2
 800cb10:	d1f9      	bne.n	800cb06 <memcpy+0xe>
 800cb12:	bd10      	pop	{r4, pc}

0800cb14 <memset>:
 800cb14:	4402      	add	r2, r0
 800cb16:	4603      	mov	r3, r0
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d100      	bne.n	800cb1e <memset+0xa>
 800cb1c:	4770      	bx	lr
 800cb1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb22:	e7f9      	b.n	800cb18 <memset+0x4>

0800cb24 <__cvt>:
 800cb24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb28:	ec55 4b10 	vmov	r4, r5, d0
 800cb2c:	2d00      	cmp	r5, #0
 800cb2e:	460e      	mov	r6, r1
 800cb30:	4619      	mov	r1, r3
 800cb32:	462b      	mov	r3, r5
 800cb34:	bfbb      	ittet	lt
 800cb36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb3a:	461d      	movlt	r5, r3
 800cb3c:	2300      	movge	r3, #0
 800cb3e:	232d      	movlt	r3, #45	; 0x2d
 800cb40:	700b      	strb	r3, [r1, #0]
 800cb42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb48:	4691      	mov	r9, r2
 800cb4a:	f023 0820 	bic.w	r8, r3, #32
 800cb4e:	bfbc      	itt	lt
 800cb50:	4622      	movlt	r2, r4
 800cb52:	4614      	movlt	r4, r2
 800cb54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb58:	d005      	beq.n	800cb66 <__cvt+0x42>
 800cb5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb5e:	d100      	bne.n	800cb62 <__cvt+0x3e>
 800cb60:	3601      	adds	r6, #1
 800cb62:	2102      	movs	r1, #2
 800cb64:	e000      	b.n	800cb68 <__cvt+0x44>
 800cb66:	2103      	movs	r1, #3
 800cb68:	ab03      	add	r3, sp, #12
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	ab02      	add	r3, sp, #8
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	ec45 4b10 	vmov	d0, r4, r5
 800cb74:	4653      	mov	r3, sl
 800cb76:	4632      	mov	r2, r6
 800cb78:	f000 fcca 	bl	800d510 <_dtoa_r>
 800cb7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb80:	4607      	mov	r7, r0
 800cb82:	d102      	bne.n	800cb8a <__cvt+0x66>
 800cb84:	f019 0f01 	tst.w	r9, #1
 800cb88:	d022      	beq.n	800cbd0 <__cvt+0xac>
 800cb8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb8e:	eb07 0906 	add.w	r9, r7, r6
 800cb92:	d110      	bne.n	800cbb6 <__cvt+0x92>
 800cb94:	783b      	ldrb	r3, [r7, #0]
 800cb96:	2b30      	cmp	r3, #48	; 0x30
 800cb98:	d10a      	bne.n	800cbb0 <__cvt+0x8c>
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4620      	mov	r0, r4
 800cba0:	4629      	mov	r1, r5
 800cba2:	f7f3 ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 800cba6:	b918      	cbnz	r0, 800cbb0 <__cvt+0x8c>
 800cba8:	f1c6 0601 	rsb	r6, r6, #1
 800cbac:	f8ca 6000 	str.w	r6, [sl]
 800cbb0:	f8da 3000 	ldr.w	r3, [sl]
 800cbb4:	4499      	add	r9, r3
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4620      	mov	r0, r4
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	f7f3 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 800cbc2:	b108      	cbz	r0, 800cbc8 <__cvt+0xa4>
 800cbc4:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbc8:	2230      	movs	r2, #48	; 0x30
 800cbca:	9b03      	ldr	r3, [sp, #12]
 800cbcc:	454b      	cmp	r3, r9
 800cbce:	d307      	bcc.n	800cbe0 <__cvt+0xbc>
 800cbd0:	9b03      	ldr	r3, [sp, #12]
 800cbd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbd4:	1bdb      	subs	r3, r3, r7
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	6013      	str	r3, [r2, #0]
 800cbda:	b004      	add	sp, #16
 800cbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe0:	1c59      	adds	r1, r3, #1
 800cbe2:	9103      	str	r1, [sp, #12]
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	e7f0      	b.n	800cbca <__cvt+0xa6>

0800cbe8 <__exponent>:
 800cbe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbea:	4603      	mov	r3, r0
 800cbec:	2900      	cmp	r1, #0
 800cbee:	bfb8      	it	lt
 800cbf0:	4249      	neglt	r1, r1
 800cbf2:	f803 2b02 	strb.w	r2, [r3], #2
 800cbf6:	bfb4      	ite	lt
 800cbf8:	222d      	movlt	r2, #45	; 0x2d
 800cbfa:	222b      	movge	r2, #43	; 0x2b
 800cbfc:	2909      	cmp	r1, #9
 800cbfe:	7042      	strb	r2, [r0, #1]
 800cc00:	dd2a      	ble.n	800cc58 <__exponent+0x70>
 800cc02:	f10d 0407 	add.w	r4, sp, #7
 800cc06:	46a4      	mov	ip, r4
 800cc08:	270a      	movs	r7, #10
 800cc0a:	46a6      	mov	lr, r4
 800cc0c:	460a      	mov	r2, r1
 800cc0e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cc12:	fb07 1516 	mls	r5, r7, r6, r1
 800cc16:	3530      	adds	r5, #48	; 0x30
 800cc18:	2a63      	cmp	r2, #99	; 0x63
 800cc1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cc1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cc22:	4631      	mov	r1, r6
 800cc24:	dcf1      	bgt.n	800cc0a <__exponent+0x22>
 800cc26:	3130      	adds	r1, #48	; 0x30
 800cc28:	f1ae 0502 	sub.w	r5, lr, #2
 800cc2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cc30:	1c44      	adds	r4, r0, #1
 800cc32:	4629      	mov	r1, r5
 800cc34:	4561      	cmp	r1, ip
 800cc36:	d30a      	bcc.n	800cc4e <__exponent+0x66>
 800cc38:	f10d 0209 	add.w	r2, sp, #9
 800cc3c:	eba2 020e 	sub.w	r2, r2, lr
 800cc40:	4565      	cmp	r5, ip
 800cc42:	bf88      	it	hi
 800cc44:	2200      	movhi	r2, #0
 800cc46:	4413      	add	r3, r2
 800cc48:	1a18      	subs	r0, r3, r0
 800cc4a:	b003      	add	sp, #12
 800cc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc52:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc56:	e7ed      	b.n	800cc34 <__exponent+0x4c>
 800cc58:	2330      	movs	r3, #48	; 0x30
 800cc5a:	3130      	adds	r1, #48	; 0x30
 800cc5c:	7083      	strb	r3, [r0, #2]
 800cc5e:	70c1      	strb	r1, [r0, #3]
 800cc60:	1d03      	adds	r3, r0, #4
 800cc62:	e7f1      	b.n	800cc48 <__exponent+0x60>

0800cc64 <_printf_float>:
 800cc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	ed2d 8b02 	vpush	{d8}
 800cc6c:	b08d      	sub	sp, #52	; 0x34
 800cc6e:	460c      	mov	r4, r1
 800cc70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc74:	4616      	mov	r6, r2
 800cc76:	461f      	mov	r7, r3
 800cc78:	4605      	mov	r5, r0
 800cc7a:	f001 fa37 	bl	800e0ec <_localeconv_r>
 800cc7e:	f8d0 a000 	ldr.w	sl, [r0]
 800cc82:	4650      	mov	r0, sl
 800cc84:	f7f3 fac4 	bl	8000210 <strlen>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	9305      	str	r3, [sp, #20]
 800cc90:	f8d8 3000 	ldr.w	r3, [r8]
 800cc94:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc98:	3307      	adds	r3, #7
 800cc9a:	f023 0307 	bic.w	r3, r3, #7
 800cc9e:	f103 0208 	add.w	r2, r3, #8
 800cca2:	f8c8 2000 	str.w	r2, [r8]
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ccae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ccb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccb6:	9307      	str	r3, [sp, #28]
 800ccb8:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccbc:	ee08 0a10 	vmov	s16, r0
 800ccc0:	4b9f      	ldr	r3, [pc, #636]	; (800cf40 <_printf_float+0x2dc>)
 800ccc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccca:	f7f3 ff4f 	bl	8000b6c <__aeabi_dcmpun>
 800ccce:	bb88      	cbnz	r0, 800cd34 <_printf_float+0xd0>
 800ccd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccd4:	4b9a      	ldr	r3, [pc, #616]	; (800cf40 <_printf_float+0x2dc>)
 800ccd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccda:	f7f3 ff29 	bl	8000b30 <__aeabi_dcmple>
 800ccde:	bb48      	cbnz	r0, 800cd34 <_printf_float+0xd0>
 800cce0:	2200      	movs	r2, #0
 800cce2:	2300      	movs	r3, #0
 800cce4:	4640      	mov	r0, r8
 800cce6:	4649      	mov	r1, r9
 800cce8:	f7f3 ff18 	bl	8000b1c <__aeabi_dcmplt>
 800ccec:	b110      	cbz	r0, 800ccf4 <_printf_float+0x90>
 800ccee:	232d      	movs	r3, #45	; 0x2d
 800ccf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf4:	4b93      	ldr	r3, [pc, #588]	; (800cf44 <_printf_float+0x2e0>)
 800ccf6:	4894      	ldr	r0, [pc, #592]	; (800cf48 <_printf_float+0x2e4>)
 800ccf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ccfc:	bf94      	ite	ls
 800ccfe:	4698      	movls	r8, r3
 800cd00:	4680      	movhi	r8, r0
 800cd02:	2303      	movs	r3, #3
 800cd04:	6123      	str	r3, [r4, #16]
 800cd06:	9b05      	ldr	r3, [sp, #20]
 800cd08:	f023 0204 	bic.w	r2, r3, #4
 800cd0c:	6022      	str	r2, [r4, #0]
 800cd0e:	f04f 0900 	mov.w	r9, #0
 800cd12:	9700      	str	r7, [sp, #0]
 800cd14:	4633      	mov	r3, r6
 800cd16:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f000 f9d8 	bl	800d0d0 <_printf_common>
 800cd20:	3001      	adds	r0, #1
 800cd22:	f040 8090 	bne.w	800ce46 <_printf_float+0x1e2>
 800cd26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd2a:	b00d      	add	sp, #52	; 0x34
 800cd2c:	ecbd 8b02 	vpop	{d8}
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	4642      	mov	r2, r8
 800cd36:	464b      	mov	r3, r9
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	f7f3 ff16 	bl	8000b6c <__aeabi_dcmpun>
 800cd40:	b140      	cbz	r0, 800cd54 <_printf_float+0xf0>
 800cd42:	464b      	mov	r3, r9
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	bfbc      	itt	lt
 800cd48:	232d      	movlt	r3, #45	; 0x2d
 800cd4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd4e:	487f      	ldr	r0, [pc, #508]	; (800cf4c <_printf_float+0x2e8>)
 800cd50:	4b7f      	ldr	r3, [pc, #508]	; (800cf50 <_printf_float+0x2ec>)
 800cd52:	e7d1      	b.n	800ccf8 <_printf_float+0x94>
 800cd54:	6863      	ldr	r3, [r4, #4]
 800cd56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd5a:	9206      	str	r2, [sp, #24]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	d13f      	bne.n	800cde0 <_printf_float+0x17c>
 800cd60:	2306      	movs	r3, #6
 800cd62:	6063      	str	r3, [r4, #4]
 800cd64:	9b05      	ldr	r3, [sp, #20]
 800cd66:	6861      	ldr	r1, [r4, #4]
 800cd68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	9303      	str	r3, [sp, #12]
 800cd70:	ab0a      	add	r3, sp, #40	; 0x28
 800cd72:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd76:	ab09      	add	r3, sp, #36	; 0x24
 800cd78:	ec49 8b10 	vmov	d0, r8, r9
 800cd7c:	9300      	str	r3, [sp, #0]
 800cd7e:	6022      	str	r2, [r4, #0]
 800cd80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd84:	4628      	mov	r0, r5
 800cd86:	f7ff fecd 	bl	800cb24 <__cvt>
 800cd8a:	9b06      	ldr	r3, [sp, #24]
 800cd8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd8e:	2b47      	cmp	r3, #71	; 0x47
 800cd90:	4680      	mov	r8, r0
 800cd92:	d108      	bne.n	800cda6 <_printf_float+0x142>
 800cd94:	1cc8      	adds	r0, r1, #3
 800cd96:	db02      	blt.n	800cd9e <_printf_float+0x13a>
 800cd98:	6863      	ldr	r3, [r4, #4]
 800cd9a:	4299      	cmp	r1, r3
 800cd9c:	dd41      	ble.n	800ce22 <_printf_float+0x1be>
 800cd9e:	f1ab 0b02 	sub.w	fp, fp, #2
 800cda2:	fa5f fb8b 	uxtb.w	fp, fp
 800cda6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdaa:	d820      	bhi.n	800cdee <_printf_float+0x18a>
 800cdac:	3901      	subs	r1, #1
 800cdae:	465a      	mov	r2, fp
 800cdb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cdb4:	9109      	str	r1, [sp, #36]	; 0x24
 800cdb6:	f7ff ff17 	bl	800cbe8 <__exponent>
 800cdba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdbc:	1813      	adds	r3, r2, r0
 800cdbe:	2a01      	cmp	r2, #1
 800cdc0:	4681      	mov	r9, r0
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	dc02      	bgt.n	800cdcc <_printf_float+0x168>
 800cdc6:	6822      	ldr	r2, [r4, #0]
 800cdc8:	07d2      	lsls	r2, r2, #31
 800cdca:	d501      	bpl.n	800cdd0 <_printf_float+0x16c>
 800cdcc:	3301      	adds	r3, #1
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d09c      	beq.n	800cd12 <_printf_float+0xae>
 800cdd8:	232d      	movs	r3, #45	; 0x2d
 800cdda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdde:	e798      	b.n	800cd12 <_printf_float+0xae>
 800cde0:	9a06      	ldr	r2, [sp, #24]
 800cde2:	2a47      	cmp	r2, #71	; 0x47
 800cde4:	d1be      	bne.n	800cd64 <_printf_float+0x100>
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1bc      	bne.n	800cd64 <_printf_float+0x100>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e7b9      	b.n	800cd62 <_printf_float+0xfe>
 800cdee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cdf2:	d118      	bne.n	800ce26 <_printf_float+0x1c2>
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	dd0b      	ble.n	800ce12 <_printf_float+0x1ae>
 800cdfa:	6121      	str	r1, [r4, #16]
 800cdfc:	b913      	cbnz	r3, 800ce04 <_printf_float+0x1a0>
 800cdfe:	6822      	ldr	r2, [r4, #0]
 800ce00:	07d0      	lsls	r0, r2, #31
 800ce02:	d502      	bpl.n	800ce0a <_printf_float+0x1a6>
 800ce04:	3301      	adds	r3, #1
 800ce06:	440b      	add	r3, r1
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ce0c:	f04f 0900 	mov.w	r9, #0
 800ce10:	e7de      	b.n	800cdd0 <_printf_float+0x16c>
 800ce12:	b913      	cbnz	r3, 800ce1a <_printf_float+0x1b6>
 800ce14:	6822      	ldr	r2, [r4, #0]
 800ce16:	07d2      	lsls	r2, r2, #31
 800ce18:	d501      	bpl.n	800ce1e <_printf_float+0x1ba>
 800ce1a:	3302      	adds	r3, #2
 800ce1c:	e7f4      	b.n	800ce08 <_printf_float+0x1a4>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e7f2      	b.n	800ce08 <_printf_float+0x1a4>
 800ce22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce28:	4299      	cmp	r1, r3
 800ce2a:	db05      	blt.n	800ce38 <_printf_float+0x1d4>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	6121      	str	r1, [r4, #16]
 800ce30:	07d8      	lsls	r0, r3, #31
 800ce32:	d5ea      	bpl.n	800ce0a <_printf_float+0x1a6>
 800ce34:	1c4b      	adds	r3, r1, #1
 800ce36:	e7e7      	b.n	800ce08 <_printf_float+0x1a4>
 800ce38:	2900      	cmp	r1, #0
 800ce3a:	bfd4      	ite	le
 800ce3c:	f1c1 0202 	rsble	r2, r1, #2
 800ce40:	2201      	movgt	r2, #1
 800ce42:	4413      	add	r3, r2
 800ce44:	e7e0      	b.n	800ce08 <_printf_float+0x1a4>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	055a      	lsls	r2, r3, #21
 800ce4a:	d407      	bmi.n	800ce5c <_printf_float+0x1f8>
 800ce4c:	6923      	ldr	r3, [r4, #16]
 800ce4e:	4642      	mov	r2, r8
 800ce50:	4631      	mov	r1, r6
 800ce52:	4628      	mov	r0, r5
 800ce54:	47b8      	blx	r7
 800ce56:	3001      	adds	r0, #1
 800ce58:	d12c      	bne.n	800ceb4 <_printf_float+0x250>
 800ce5a:	e764      	b.n	800cd26 <_printf_float+0xc2>
 800ce5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce60:	f240 80e0 	bls.w	800d024 <_printf_float+0x3c0>
 800ce64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f7f3 fe4c 	bl	8000b08 <__aeabi_dcmpeq>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d034      	beq.n	800cede <_printf_float+0x27a>
 800ce74:	4a37      	ldr	r2, [pc, #220]	; (800cf54 <_printf_float+0x2f0>)
 800ce76:	2301      	movs	r3, #1
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	47b8      	blx	r7
 800ce7e:	3001      	adds	r0, #1
 800ce80:	f43f af51 	beq.w	800cd26 <_printf_float+0xc2>
 800ce84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	db02      	blt.n	800ce92 <_printf_float+0x22e>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	07d8      	lsls	r0, r3, #31
 800ce90:	d510      	bpl.n	800ceb4 <_printf_float+0x250>
 800ce92:	ee18 3a10 	vmov	r3, s16
 800ce96:	4652      	mov	r2, sl
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	47b8      	blx	r7
 800ce9e:	3001      	adds	r0, #1
 800cea0:	f43f af41 	beq.w	800cd26 <_printf_float+0xc2>
 800cea4:	f04f 0800 	mov.w	r8, #0
 800cea8:	f104 091a 	add.w	r9, r4, #26
 800ceac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	4543      	cmp	r3, r8
 800ceb2:	dc09      	bgt.n	800cec8 <_printf_float+0x264>
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	079b      	lsls	r3, r3, #30
 800ceb8:	f100 8105 	bmi.w	800d0c6 <_printf_float+0x462>
 800cebc:	68e0      	ldr	r0, [r4, #12]
 800cebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec0:	4298      	cmp	r0, r3
 800cec2:	bfb8      	it	lt
 800cec4:	4618      	movlt	r0, r3
 800cec6:	e730      	b.n	800cd2a <_printf_float+0xc6>
 800cec8:	2301      	movs	r3, #1
 800ceca:	464a      	mov	r2, r9
 800cecc:	4631      	mov	r1, r6
 800cece:	4628      	mov	r0, r5
 800ced0:	47b8      	blx	r7
 800ced2:	3001      	adds	r0, #1
 800ced4:	f43f af27 	beq.w	800cd26 <_printf_float+0xc2>
 800ced8:	f108 0801 	add.w	r8, r8, #1
 800cedc:	e7e6      	b.n	800ceac <_printf_float+0x248>
 800cede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	dc39      	bgt.n	800cf58 <_printf_float+0x2f4>
 800cee4:	4a1b      	ldr	r2, [pc, #108]	; (800cf54 <_printf_float+0x2f0>)
 800cee6:	2301      	movs	r3, #1
 800cee8:	4631      	mov	r1, r6
 800ceea:	4628      	mov	r0, r5
 800ceec:	47b8      	blx	r7
 800ceee:	3001      	adds	r0, #1
 800cef0:	f43f af19 	beq.w	800cd26 <_printf_float+0xc2>
 800cef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cef8:	4313      	orrs	r3, r2
 800cefa:	d102      	bne.n	800cf02 <_printf_float+0x29e>
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	07d9      	lsls	r1, r3, #31
 800cf00:	d5d8      	bpl.n	800ceb4 <_printf_float+0x250>
 800cf02:	ee18 3a10 	vmov	r3, s16
 800cf06:	4652      	mov	r2, sl
 800cf08:	4631      	mov	r1, r6
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	47b8      	blx	r7
 800cf0e:	3001      	adds	r0, #1
 800cf10:	f43f af09 	beq.w	800cd26 <_printf_float+0xc2>
 800cf14:	f04f 0900 	mov.w	r9, #0
 800cf18:	f104 0a1a 	add.w	sl, r4, #26
 800cf1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf1e:	425b      	negs	r3, r3
 800cf20:	454b      	cmp	r3, r9
 800cf22:	dc01      	bgt.n	800cf28 <_printf_float+0x2c4>
 800cf24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf26:	e792      	b.n	800ce4e <_printf_float+0x1ea>
 800cf28:	2301      	movs	r3, #1
 800cf2a:	4652      	mov	r2, sl
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	4628      	mov	r0, r5
 800cf30:	47b8      	blx	r7
 800cf32:	3001      	adds	r0, #1
 800cf34:	f43f aef7 	beq.w	800cd26 <_printf_float+0xc2>
 800cf38:	f109 0901 	add.w	r9, r9, #1
 800cf3c:	e7ee      	b.n	800cf1c <_printf_float+0x2b8>
 800cf3e:	bf00      	nop
 800cf40:	7fefffff 	.word	0x7fefffff
 800cf44:	080106f4 	.word	0x080106f4
 800cf48:	080106f8 	.word	0x080106f8
 800cf4c:	08010700 	.word	0x08010700
 800cf50:	080106fc 	.word	0x080106fc
 800cf54:	08010704 	.word	0x08010704
 800cf58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	bfa8      	it	ge
 800cf60:	461a      	movge	r2, r3
 800cf62:	2a00      	cmp	r2, #0
 800cf64:	4691      	mov	r9, r2
 800cf66:	dc37      	bgt.n	800cfd8 <_printf_float+0x374>
 800cf68:	f04f 0b00 	mov.w	fp, #0
 800cf6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf70:	f104 021a 	add.w	r2, r4, #26
 800cf74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf76:	9305      	str	r3, [sp, #20]
 800cf78:	eba3 0309 	sub.w	r3, r3, r9
 800cf7c:	455b      	cmp	r3, fp
 800cf7e:	dc33      	bgt.n	800cfe8 <_printf_float+0x384>
 800cf80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf84:	429a      	cmp	r2, r3
 800cf86:	db3b      	blt.n	800d000 <_printf_float+0x39c>
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	07da      	lsls	r2, r3, #31
 800cf8c:	d438      	bmi.n	800d000 <_printf_float+0x39c>
 800cf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf90:	9a05      	ldr	r2, [sp, #20]
 800cf92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf94:	1a9a      	subs	r2, r3, r2
 800cf96:	eba3 0901 	sub.w	r9, r3, r1
 800cf9a:	4591      	cmp	r9, r2
 800cf9c:	bfa8      	it	ge
 800cf9e:	4691      	movge	r9, r2
 800cfa0:	f1b9 0f00 	cmp.w	r9, #0
 800cfa4:	dc35      	bgt.n	800d012 <_printf_float+0x3ae>
 800cfa6:	f04f 0800 	mov.w	r8, #0
 800cfaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfae:	f104 0a1a 	add.w	sl, r4, #26
 800cfb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfb6:	1a9b      	subs	r3, r3, r2
 800cfb8:	eba3 0309 	sub.w	r3, r3, r9
 800cfbc:	4543      	cmp	r3, r8
 800cfbe:	f77f af79 	ble.w	800ceb4 <_printf_float+0x250>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	4652      	mov	r2, sl
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b8      	blx	r7
 800cfcc:	3001      	adds	r0, #1
 800cfce:	f43f aeaa 	beq.w	800cd26 <_printf_float+0xc2>
 800cfd2:	f108 0801 	add.w	r8, r8, #1
 800cfd6:	e7ec      	b.n	800cfb2 <_printf_float+0x34e>
 800cfd8:	4613      	mov	r3, r2
 800cfda:	4631      	mov	r1, r6
 800cfdc:	4642      	mov	r2, r8
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b8      	blx	r7
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	d1c0      	bne.n	800cf68 <_printf_float+0x304>
 800cfe6:	e69e      	b.n	800cd26 <_printf_float+0xc2>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4631      	mov	r1, r6
 800cfec:	4628      	mov	r0, r5
 800cfee:	9205      	str	r2, [sp, #20]
 800cff0:	47b8      	blx	r7
 800cff2:	3001      	adds	r0, #1
 800cff4:	f43f ae97 	beq.w	800cd26 <_printf_float+0xc2>
 800cff8:	9a05      	ldr	r2, [sp, #20]
 800cffa:	f10b 0b01 	add.w	fp, fp, #1
 800cffe:	e7b9      	b.n	800cf74 <_printf_float+0x310>
 800d000:	ee18 3a10 	vmov	r3, s16
 800d004:	4652      	mov	r2, sl
 800d006:	4631      	mov	r1, r6
 800d008:	4628      	mov	r0, r5
 800d00a:	47b8      	blx	r7
 800d00c:	3001      	adds	r0, #1
 800d00e:	d1be      	bne.n	800cf8e <_printf_float+0x32a>
 800d010:	e689      	b.n	800cd26 <_printf_float+0xc2>
 800d012:	9a05      	ldr	r2, [sp, #20]
 800d014:	464b      	mov	r3, r9
 800d016:	4442      	add	r2, r8
 800d018:	4631      	mov	r1, r6
 800d01a:	4628      	mov	r0, r5
 800d01c:	47b8      	blx	r7
 800d01e:	3001      	adds	r0, #1
 800d020:	d1c1      	bne.n	800cfa6 <_printf_float+0x342>
 800d022:	e680      	b.n	800cd26 <_printf_float+0xc2>
 800d024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d026:	2a01      	cmp	r2, #1
 800d028:	dc01      	bgt.n	800d02e <_printf_float+0x3ca>
 800d02a:	07db      	lsls	r3, r3, #31
 800d02c:	d538      	bpl.n	800d0a0 <_printf_float+0x43c>
 800d02e:	2301      	movs	r3, #1
 800d030:	4642      	mov	r2, r8
 800d032:	4631      	mov	r1, r6
 800d034:	4628      	mov	r0, r5
 800d036:	47b8      	blx	r7
 800d038:	3001      	adds	r0, #1
 800d03a:	f43f ae74 	beq.w	800cd26 <_printf_float+0xc2>
 800d03e:	ee18 3a10 	vmov	r3, s16
 800d042:	4652      	mov	r2, sl
 800d044:	4631      	mov	r1, r6
 800d046:	4628      	mov	r0, r5
 800d048:	47b8      	blx	r7
 800d04a:	3001      	adds	r0, #1
 800d04c:	f43f ae6b 	beq.w	800cd26 <_printf_float+0xc2>
 800d050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d054:	2200      	movs	r2, #0
 800d056:	2300      	movs	r3, #0
 800d058:	f7f3 fd56 	bl	8000b08 <__aeabi_dcmpeq>
 800d05c:	b9d8      	cbnz	r0, 800d096 <_printf_float+0x432>
 800d05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d060:	f108 0201 	add.w	r2, r8, #1
 800d064:	3b01      	subs	r3, #1
 800d066:	4631      	mov	r1, r6
 800d068:	4628      	mov	r0, r5
 800d06a:	47b8      	blx	r7
 800d06c:	3001      	adds	r0, #1
 800d06e:	d10e      	bne.n	800d08e <_printf_float+0x42a>
 800d070:	e659      	b.n	800cd26 <_printf_float+0xc2>
 800d072:	2301      	movs	r3, #1
 800d074:	4652      	mov	r2, sl
 800d076:	4631      	mov	r1, r6
 800d078:	4628      	mov	r0, r5
 800d07a:	47b8      	blx	r7
 800d07c:	3001      	adds	r0, #1
 800d07e:	f43f ae52 	beq.w	800cd26 <_printf_float+0xc2>
 800d082:	f108 0801 	add.w	r8, r8, #1
 800d086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d088:	3b01      	subs	r3, #1
 800d08a:	4543      	cmp	r3, r8
 800d08c:	dcf1      	bgt.n	800d072 <_printf_float+0x40e>
 800d08e:	464b      	mov	r3, r9
 800d090:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d094:	e6dc      	b.n	800ce50 <_printf_float+0x1ec>
 800d096:	f04f 0800 	mov.w	r8, #0
 800d09a:	f104 0a1a 	add.w	sl, r4, #26
 800d09e:	e7f2      	b.n	800d086 <_printf_float+0x422>
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	4642      	mov	r2, r8
 800d0a4:	e7df      	b.n	800d066 <_printf_float+0x402>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	464a      	mov	r2, r9
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	47b8      	blx	r7
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	f43f ae38 	beq.w	800cd26 <_printf_float+0xc2>
 800d0b6:	f108 0801 	add.w	r8, r8, #1
 800d0ba:	68e3      	ldr	r3, [r4, #12]
 800d0bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0be:	1a5b      	subs	r3, r3, r1
 800d0c0:	4543      	cmp	r3, r8
 800d0c2:	dcf0      	bgt.n	800d0a6 <_printf_float+0x442>
 800d0c4:	e6fa      	b.n	800cebc <_printf_float+0x258>
 800d0c6:	f04f 0800 	mov.w	r8, #0
 800d0ca:	f104 0919 	add.w	r9, r4, #25
 800d0ce:	e7f4      	b.n	800d0ba <_printf_float+0x456>

0800d0d0 <_printf_common>:
 800d0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d4:	4616      	mov	r6, r2
 800d0d6:	4699      	mov	r9, r3
 800d0d8:	688a      	ldr	r2, [r1, #8]
 800d0da:	690b      	ldr	r3, [r1, #16]
 800d0dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	bfb8      	it	lt
 800d0e4:	4613      	movlt	r3, r2
 800d0e6:	6033      	str	r3, [r6, #0]
 800d0e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0ec:	4607      	mov	r7, r0
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	b10a      	cbz	r2, 800d0f6 <_printf_common+0x26>
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	6033      	str	r3, [r6, #0]
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	0699      	lsls	r1, r3, #26
 800d0fa:	bf42      	ittt	mi
 800d0fc:	6833      	ldrmi	r3, [r6, #0]
 800d0fe:	3302      	addmi	r3, #2
 800d100:	6033      	strmi	r3, [r6, #0]
 800d102:	6825      	ldr	r5, [r4, #0]
 800d104:	f015 0506 	ands.w	r5, r5, #6
 800d108:	d106      	bne.n	800d118 <_printf_common+0x48>
 800d10a:	f104 0a19 	add.w	sl, r4, #25
 800d10e:	68e3      	ldr	r3, [r4, #12]
 800d110:	6832      	ldr	r2, [r6, #0]
 800d112:	1a9b      	subs	r3, r3, r2
 800d114:	42ab      	cmp	r3, r5
 800d116:	dc26      	bgt.n	800d166 <_printf_common+0x96>
 800d118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d11c:	1e13      	subs	r3, r2, #0
 800d11e:	6822      	ldr	r2, [r4, #0]
 800d120:	bf18      	it	ne
 800d122:	2301      	movne	r3, #1
 800d124:	0692      	lsls	r2, r2, #26
 800d126:	d42b      	bmi.n	800d180 <_printf_common+0xb0>
 800d128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d12c:	4649      	mov	r1, r9
 800d12e:	4638      	mov	r0, r7
 800d130:	47c0      	blx	r8
 800d132:	3001      	adds	r0, #1
 800d134:	d01e      	beq.n	800d174 <_printf_common+0xa4>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	68e5      	ldr	r5, [r4, #12]
 800d13a:	6832      	ldr	r2, [r6, #0]
 800d13c:	f003 0306 	and.w	r3, r3, #6
 800d140:	2b04      	cmp	r3, #4
 800d142:	bf08      	it	eq
 800d144:	1aad      	subeq	r5, r5, r2
 800d146:	68a3      	ldr	r3, [r4, #8]
 800d148:	6922      	ldr	r2, [r4, #16]
 800d14a:	bf0c      	ite	eq
 800d14c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d150:	2500      	movne	r5, #0
 800d152:	4293      	cmp	r3, r2
 800d154:	bfc4      	itt	gt
 800d156:	1a9b      	subgt	r3, r3, r2
 800d158:	18ed      	addgt	r5, r5, r3
 800d15a:	2600      	movs	r6, #0
 800d15c:	341a      	adds	r4, #26
 800d15e:	42b5      	cmp	r5, r6
 800d160:	d11a      	bne.n	800d198 <_printf_common+0xc8>
 800d162:	2000      	movs	r0, #0
 800d164:	e008      	b.n	800d178 <_printf_common+0xa8>
 800d166:	2301      	movs	r3, #1
 800d168:	4652      	mov	r2, sl
 800d16a:	4649      	mov	r1, r9
 800d16c:	4638      	mov	r0, r7
 800d16e:	47c0      	blx	r8
 800d170:	3001      	adds	r0, #1
 800d172:	d103      	bne.n	800d17c <_printf_common+0xac>
 800d174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d17c:	3501      	adds	r5, #1
 800d17e:	e7c6      	b.n	800d10e <_printf_common+0x3e>
 800d180:	18e1      	adds	r1, r4, r3
 800d182:	1c5a      	adds	r2, r3, #1
 800d184:	2030      	movs	r0, #48	; 0x30
 800d186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d18a:	4422      	add	r2, r4
 800d18c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d194:	3302      	adds	r3, #2
 800d196:	e7c7      	b.n	800d128 <_printf_common+0x58>
 800d198:	2301      	movs	r3, #1
 800d19a:	4622      	mov	r2, r4
 800d19c:	4649      	mov	r1, r9
 800d19e:	4638      	mov	r0, r7
 800d1a0:	47c0      	blx	r8
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	d0e6      	beq.n	800d174 <_printf_common+0xa4>
 800d1a6:	3601      	adds	r6, #1
 800d1a8:	e7d9      	b.n	800d15e <_printf_common+0x8e>
	...

0800d1ac <_printf_i>:
 800d1ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b0:	7e0f      	ldrb	r7, [r1, #24]
 800d1b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1b4:	2f78      	cmp	r7, #120	; 0x78
 800d1b6:	4691      	mov	r9, r2
 800d1b8:	4680      	mov	r8, r0
 800d1ba:	460c      	mov	r4, r1
 800d1bc:	469a      	mov	sl, r3
 800d1be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1c2:	d807      	bhi.n	800d1d4 <_printf_i+0x28>
 800d1c4:	2f62      	cmp	r7, #98	; 0x62
 800d1c6:	d80a      	bhi.n	800d1de <_printf_i+0x32>
 800d1c8:	2f00      	cmp	r7, #0
 800d1ca:	f000 80d8 	beq.w	800d37e <_printf_i+0x1d2>
 800d1ce:	2f58      	cmp	r7, #88	; 0x58
 800d1d0:	f000 80a3 	beq.w	800d31a <_printf_i+0x16e>
 800d1d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1dc:	e03a      	b.n	800d254 <_printf_i+0xa8>
 800d1de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1e2:	2b15      	cmp	r3, #21
 800d1e4:	d8f6      	bhi.n	800d1d4 <_printf_i+0x28>
 800d1e6:	a101      	add	r1, pc, #4	; (adr r1, 800d1ec <_printf_i+0x40>)
 800d1e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1ec:	0800d245 	.word	0x0800d245
 800d1f0:	0800d259 	.word	0x0800d259
 800d1f4:	0800d1d5 	.word	0x0800d1d5
 800d1f8:	0800d1d5 	.word	0x0800d1d5
 800d1fc:	0800d1d5 	.word	0x0800d1d5
 800d200:	0800d1d5 	.word	0x0800d1d5
 800d204:	0800d259 	.word	0x0800d259
 800d208:	0800d1d5 	.word	0x0800d1d5
 800d20c:	0800d1d5 	.word	0x0800d1d5
 800d210:	0800d1d5 	.word	0x0800d1d5
 800d214:	0800d1d5 	.word	0x0800d1d5
 800d218:	0800d365 	.word	0x0800d365
 800d21c:	0800d289 	.word	0x0800d289
 800d220:	0800d347 	.word	0x0800d347
 800d224:	0800d1d5 	.word	0x0800d1d5
 800d228:	0800d1d5 	.word	0x0800d1d5
 800d22c:	0800d387 	.word	0x0800d387
 800d230:	0800d1d5 	.word	0x0800d1d5
 800d234:	0800d289 	.word	0x0800d289
 800d238:	0800d1d5 	.word	0x0800d1d5
 800d23c:	0800d1d5 	.word	0x0800d1d5
 800d240:	0800d34f 	.word	0x0800d34f
 800d244:	682b      	ldr	r3, [r5, #0]
 800d246:	1d1a      	adds	r2, r3, #4
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	602a      	str	r2, [r5, #0]
 800d24c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d254:	2301      	movs	r3, #1
 800d256:	e0a3      	b.n	800d3a0 <_printf_i+0x1f4>
 800d258:	6820      	ldr	r0, [r4, #0]
 800d25a:	6829      	ldr	r1, [r5, #0]
 800d25c:	0606      	lsls	r6, r0, #24
 800d25e:	f101 0304 	add.w	r3, r1, #4
 800d262:	d50a      	bpl.n	800d27a <_printf_i+0xce>
 800d264:	680e      	ldr	r6, [r1, #0]
 800d266:	602b      	str	r3, [r5, #0]
 800d268:	2e00      	cmp	r6, #0
 800d26a:	da03      	bge.n	800d274 <_printf_i+0xc8>
 800d26c:	232d      	movs	r3, #45	; 0x2d
 800d26e:	4276      	negs	r6, r6
 800d270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d274:	485e      	ldr	r0, [pc, #376]	; (800d3f0 <_printf_i+0x244>)
 800d276:	230a      	movs	r3, #10
 800d278:	e019      	b.n	800d2ae <_printf_i+0x102>
 800d27a:	680e      	ldr	r6, [r1, #0]
 800d27c:	602b      	str	r3, [r5, #0]
 800d27e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d282:	bf18      	it	ne
 800d284:	b236      	sxthne	r6, r6
 800d286:	e7ef      	b.n	800d268 <_printf_i+0xbc>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	6820      	ldr	r0, [r4, #0]
 800d28c:	1d19      	adds	r1, r3, #4
 800d28e:	6029      	str	r1, [r5, #0]
 800d290:	0601      	lsls	r1, r0, #24
 800d292:	d501      	bpl.n	800d298 <_printf_i+0xec>
 800d294:	681e      	ldr	r6, [r3, #0]
 800d296:	e002      	b.n	800d29e <_printf_i+0xf2>
 800d298:	0646      	lsls	r6, r0, #25
 800d29a:	d5fb      	bpl.n	800d294 <_printf_i+0xe8>
 800d29c:	881e      	ldrh	r6, [r3, #0]
 800d29e:	4854      	ldr	r0, [pc, #336]	; (800d3f0 <_printf_i+0x244>)
 800d2a0:	2f6f      	cmp	r7, #111	; 0x6f
 800d2a2:	bf0c      	ite	eq
 800d2a4:	2308      	moveq	r3, #8
 800d2a6:	230a      	movne	r3, #10
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2ae:	6865      	ldr	r5, [r4, #4]
 800d2b0:	60a5      	str	r5, [r4, #8]
 800d2b2:	2d00      	cmp	r5, #0
 800d2b4:	bfa2      	ittt	ge
 800d2b6:	6821      	ldrge	r1, [r4, #0]
 800d2b8:	f021 0104 	bicge.w	r1, r1, #4
 800d2bc:	6021      	strge	r1, [r4, #0]
 800d2be:	b90e      	cbnz	r6, 800d2c4 <_printf_i+0x118>
 800d2c0:	2d00      	cmp	r5, #0
 800d2c2:	d04d      	beq.n	800d360 <_printf_i+0x1b4>
 800d2c4:	4615      	mov	r5, r2
 800d2c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2ca:	fb03 6711 	mls	r7, r3, r1, r6
 800d2ce:	5dc7      	ldrb	r7, [r0, r7]
 800d2d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2d4:	4637      	mov	r7, r6
 800d2d6:	42bb      	cmp	r3, r7
 800d2d8:	460e      	mov	r6, r1
 800d2da:	d9f4      	bls.n	800d2c6 <_printf_i+0x11a>
 800d2dc:	2b08      	cmp	r3, #8
 800d2de:	d10b      	bne.n	800d2f8 <_printf_i+0x14c>
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	07de      	lsls	r6, r3, #31
 800d2e4:	d508      	bpl.n	800d2f8 <_printf_i+0x14c>
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	6861      	ldr	r1, [r4, #4]
 800d2ea:	4299      	cmp	r1, r3
 800d2ec:	bfde      	ittt	le
 800d2ee:	2330      	movle	r3, #48	; 0x30
 800d2f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d2f8:	1b52      	subs	r2, r2, r5
 800d2fa:	6122      	str	r2, [r4, #16]
 800d2fc:	f8cd a000 	str.w	sl, [sp]
 800d300:	464b      	mov	r3, r9
 800d302:	aa03      	add	r2, sp, #12
 800d304:	4621      	mov	r1, r4
 800d306:	4640      	mov	r0, r8
 800d308:	f7ff fee2 	bl	800d0d0 <_printf_common>
 800d30c:	3001      	adds	r0, #1
 800d30e:	d14c      	bne.n	800d3aa <_printf_i+0x1fe>
 800d310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d314:	b004      	add	sp, #16
 800d316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31a:	4835      	ldr	r0, [pc, #212]	; (800d3f0 <_printf_i+0x244>)
 800d31c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d320:	6829      	ldr	r1, [r5, #0]
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	f851 6b04 	ldr.w	r6, [r1], #4
 800d328:	6029      	str	r1, [r5, #0]
 800d32a:	061d      	lsls	r5, r3, #24
 800d32c:	d514      	bpl.n	800d358 <_printf_i+0x1ac>
 800d32e:	07df      	lsls	r7, r3, #31
 800d330:	bf44      	itt	mi
 800d332:	f043 0320 	orrmi.w	r3, r3, #32
 800d336:	6023      	strmi	r3, [r4, #0]
 800d338:	b91e      	cbnz	r6, 800d342 <_printf_i+0x196>
 800d33a:	6823      	ldr	r3, [r4, #0]
 800d33c:	f023 0320 	bic.w	r3, r3, #32
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	2310      	movs	r3, #16
 800d344:	e7b0      	b.n	800d2a8 <_printf_i+0xfc>
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	f043 0320 	orr.w	r3, r3, #32
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	2378      	movs	r3, #120	; 0x78
 800d350:	4828      	ldr	r0, [pc, #160]	; (800d3f4 <_printf_i+0x248>)
 800d352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d356:	e7e3      	b.n	800d320 <_printf_i+0x174>
 800d358:	0659      	lsls	r1, r3, #25
 800d35a:	bf48      	it	mi
 800d35c:	b2b6      	uxthmi	r6, r6
 800d35e:	e7e6      	b.n	800d32e <_printf_i+0x182>
 800d360:	4615      	mov	r5, r2
 800d362:	e7bb      	b.n	800d2dc <_printf_i+0x130>
 800d364:	682b      	ldr	r3, [r5, #0]
 800d366:	6826      	ldr	r6, [r4, #0]
 800d368:	6961      	ldr	r1, [r4, #20]
 800d36a:	1d18      	adds	r0, r3, #4
 800d36c:	6028      	str	r0, [r5, #0]
 800d36e:	0635      	lsls	r5, r6, #24
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	d501      	bpl.n	800d378 <_printf_i+0x1cc>
 800d374:	6019      	str	r1, [r3, #0]
 800d376:	e002      	b.n	800d37e <_printf_i+0x1d2>
 800d378:	0670      	lsls	r0, r6, #25
 800d37a:	d5fb      	bpl.n	800d374 <_printf_i+0x1c8>
 800d37c:	8019      	strh	r1, [r3, #0]
 800d37e:	2300      	movs	r3, #0
 800d380:	6123      	str	r3, [r4, #16]
 800d382:	4615      	mov	r5, r2
 800d384:	e7ba      	b.n	800d2fc <_printf_i+0x150>
 800d386:	682b      	ldr	r3, [r5, #0]
 800d388:	1d1a      	adds	r2, r3, #4
 800d38a:	602a      	str	r2, [r5, #0]
 800d38c:	681d      	ldr	r5, [r3, #0]
 800d38e:	6862      	ldr	r2, [r4, #4]
 800d390:	2100      	movs	r1, #0
 800d392:	4628      	mov	r0, r5
 800d394:	f7f2 ff44 	bl	8000220 <memchr>
 800d398:	b108      	cbz	r0, 800d39e <_printf_i+0x1f2>
 800d39a:	1b40      	subs	r0, r0, r5
 800d39c:	6060      	str	r0, [r4, #4]
 800d39e:	6863      	ldr	r3, [r4, #4]
 800d3a0:	6123      	str	r3, [r4, #16]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3a8:	e7a8      	b.n	800d2fc <_printf_i+0x150>
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	462a      	mov	r2, r5
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	4640      	mov	r0, r8
 800d3b2:	47d0      	blx	sl
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	d0ab      	beq.n	800d310 <_printf_i+0x164>
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	079b      	lsls	r3, r3, #30
 800d3bc:	d413      	bmi.n	800d3e6 <_printf_i+0x23a>
 800d3be:	68e0      	ldr	r0, [r4, #12]
 800d3c0:	9b03      	ldr	r3, [sp, #12]
 800d3c2:	4298      	cmp	r0, r3
 800d3c4:	bfb8      	it	lt
 800d3c6:	4618      	movlt	r0, r3
 800d3c8:	e7a4      	b.n	800d314 <_printf_i+0x168>
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	4632      	mov	r2, r6
 800d3ce:	4649      	mov	r1, r9
 800d3d0:	4640      	mov	r0, r8
 800d3d2:	47d0      	blx	sl
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d09b      	beq.n	800d310 <_printf_i+0x164>
 800d3d8:	3501      	adds	r5, #1
 800d3da:	68e3      	ldr	r3, [r4, #12]
 800d3dc:	9903      	ldr	r1, [sp, #12]
 800d3de:	1a5b      	subs	r3, r3, r1
 800d3e0:	42ab      	cmp	r3, r5
 800d3e2:	dcf2      	bgt.n	800d3ca <_printf_i+0x21e>
 800d3e4:	e7eb      	b.n	800d3be <_printf_i+0x212>
 800d3e6:	2500      	movs	r5, #0
 800d3e8:	f104 0619 	add.w	r6, r4, #25
 800d3ec:	e7f5      	b.n	800d3da <_printf_i+0x22e>
 800d3ee:	bf00      	nop
 800d3f0:	08010706 	.word	0x08010706
 800d3f4:	08010717 	.word	0x08010717

0800d3f8 <quorem>:
 800d3f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	6903      	ldr	r3, [r0, #16]
 800d3fe:	690c      	ldr	r4, [r1, #16]
 800d400:	42a3      	cmp	r3, r4
 800d402:	4607      	mov	r7, r0
 800d404:	f2c0 8081 	blt.w	800d50a <quorem+0x112>
 800d408:	3c01      	subs	r4, #1
 800d40a:	f101 0814 	add.w	r8, r1, #20
 800d40e:	f100 0514 	add.w	r5, r0, #20
 800d412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d41c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d420:	3301      	adds	r3, #1
 800d422:	429a      	cmp	r2, r3
 800d424:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d428:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d42c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d430:	d331      	bcc.n	800d496 <quorem+0x9e>
 800d432:	f04f 0e00 	mov.w	lr, #0
 800d436:	4640      	mov	r0, r8
 800d438:	46ac      	mov	ip, r5
 800d43a:	46f2      	mov	sl, lr
 800d43c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d440:	b293      	uxth	r3, r2
 800d442:	fb06 e303 	mla	r3, r6, r3, lr
 800d446:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	ebaa 0303 	sub.w	r3, sl, r3
 800d450:	f8dc a000 	ldr.w	sl, [ip]
 800d454:	0c12      	lsrs	r2, r2, #16
 800d456:	fa13 f38a 	uxtah	r3, r3, sl
 800d45a:	fb06 e202 	mla	r2, r6, r2, lr
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	9b00      	ldr	r3, [sp, #0]
 800d462:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d466:	b292      	uxth	r2, r2
 800d468:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d46c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d470:	f8bd 3000 	ldrh.w	r3, [sp]
 800d474:	4581      	cmp	r9, r0
 800d476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d47a:	f84c 3b04 	str.w	r3, [ip], #4
 800d47e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d482:	d2db      	bcs.n	800d43c <quorem+0x44>
 800d484:	f855 300b 	ldr.w	r3, [r5, fp]
 800d488:	b92b      	cbnz	r3, 800d496 <quorem+0x9e>
 800d48a:	9b01      	ldr	r3, [sp, #4]
 800d48c:	3b04      	subs	r3, #4
 800d48e:	429d      	cmp	r5, r3
 800d490:	461a      	mov	r2, r3
 800d492:	d32e      	bcc.n	800d4f2 <quorem+0xfa>
 800d494:	613c      	str	r4, [r7, #16]
 800d496:	4638      	mov	r0, r7
 800d498:	f001 f8b6 	bl	800e608 <__mcmp>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	db24      	blt.n	800d4ea <quorem+0xf2>
 800d4a0:	3601      	adds	r6, #1
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	f04f 0c00 	mov.w	ip, #0
 800d4a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4ac:	f8d0 e000 	ldr.w	lr, [r0]
 800d4b0:	b293      	uxth	r3, r2
 800d4b2:	ebac 0303 	sub.w	r3, ip, r3
 800d4b6:	0c12      	lsrs	r2, r2, #16
 800d4b8:	fa13 f38e 	uxtah	r3, r3, lr
 800d4bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d4c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4ca:	45c1      	cmp	r9, r8
 800d4cc:	f840 3b04 	str.w	r3, [r0], #4
 800d4d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d4d4:	d2e8      	bcs.n	800d4a8 <quorem+0xb0>
 800d4d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4de:	b922      	cbnz	r2, 800d4ea <quorem+0xf2>
 800d4e0:	3b04      	subs	r3, #4
 800d4e2:	429d      	cmp	r5, r3
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	d30a      	bcc.n	800d4fe <quorem+0x106>
 800d4e8:	613c      	str	r4, [r7, #16]
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	b003      	add	sp, #12
 800d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f2:	6812      	ldr	r2, [r2, #0]
 800d4f4:	3b04      	subs	r3, #4
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	d1cc      	bne.n	800d494 <quorem+0x9c>
 800d4fa:	3c01      	subs	r4, #1
 800d4fc:	e7c7      	b.n	800d48e <quorem+0x96>
 800d4fe:	6812      	ldr	r2, [r2, #0]
 800d500:	3b04      	subs	r3, #4
 800d502:	2a00      	cmp	r2, #0
 800d504:	d1f0      	bne.n	800d4e8 <quorem+0xf0>
 800d506:	3c01      	subs	r4, #1
 800d508:	e7eb      	b.n	800d4e2 <quorem+0xea>
 800d50a:	2000      	movs	r0, #0
 800d50c:	e7ee      	b.n	800d4ec <quorem+0xf4>
	...

0800d510 <_dtoa_r>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	ed2d 8b04 	vpush	{d8-d9}
 800d518:	ec57 6b10 	vmov	r6, r7, d0
 800d51c:	b093      	sub	sp, #76	; 0x4c
 800d51e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d520:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d524:	9106      	str	r1, [sp, #24]
 800d526:	ee10 aa10 	vmov	sl, s0
 800d52a:	4604      	mov	r4, r0
 800d52c:	9209      	str	r2, [sp, #36]	; 0x24
 800d52e:	930c      	str	r3, [sp, #48]	; 0x30
 800d530:	46bb      	mov	fp, r7
 800d532:	b975      	cbnz	r5, 800d552 <_dtoa_r+0x42>
 800d534:	2010      	movs	r0, #16
 800d536:	f000 fddd 	bl	800e0f4 <malloc>
 800d53a:	4602      	mov	r2, r0
 800d53c:	6260      	str	r0, [r4, #36]	; 0x24
 800d53e:	b920      	cbnz	r0, 800d54a <_dtoa_r+0x3a>
 800d540:	4ba7      	ldr	r3, [pc, #668]	; (800d7e0 <_dtoa_r+0x2d0>)
 800d542:	21ea      	movs	r1, #234	; 0xea
 800d544:	48a7      	ldr	r0, [pc, #668]	; (800d7e4 <_dtoa_r+0x2d4>)
 800d546:	f001 fa67 	bl	800ea18 <__assert_func>
 800d54a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d54e:	6005      	str	r5, [r0, #0]
 800d550:	60c5      	str	r5, [r0, #12]
 800d552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d554:	6819      	ldr	r1, [r3, #0]
 800d556:	b151      	cbz	r1, 800d56e <_dtoa_r+0x5e>
 800d558:	685a      	ldr	r2, [r3, #4]
 800d55a:	604a      	str	r2, [r1, #4]
 800d55c:	2301      	movs	r3, #1
 800d55e:	4093      	lsls	r3, r2
 800d560:	608b      	str	r3, [r1, #8]
 800d562:	4620      	mov	r0, r4
 800d564:	f000 fe0e 	bl	800e184 <_Bfree>
 800d568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d56a:	2200      	movs	r2, #0
 800d56c:	601a      	str	r2, [r3, #0]
 800d56e:	1e3b      	subs	r3, r7, #0
 800d570:	bfaa      	itet	ge
 800d572:	2300      	movge	r3, #0
 800d574:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d578:	f8c8 3000 	strge.w	r3, [r8]
 800d57c:	4b9a      	ldr	r3, [pc, #616]	; (800d7e8 <_dtoa_r+0x2d8>)
 800d57e:	bfbc      	itt	lt
 800d580:	2201      	movlt	r2, #1
 800d582:	f8c8 2000 	strlt.w	r2, [r8]
 800d586:	ea33 030b 	bics.w	r3, r3, fp
 800d58a:	d11b      	bne.n	800d5c4 <_dtoa_r+0xb4>
 800d58c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d58e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d592:	6013      	str	r3, [r2, #0]
 800d594:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d598:	4333      	orrs	r3, r6
 800d59a:	f000 8592 	beq.w	800e0c2 <_dtoa_r+0xbb2>
 800d59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5a0:	b963      	cbnz	r3, 800d5bc <_dtoa_r+0xac>
 800d5a2:	4b92      	ldr	r3, [pc, #584]	; (800d7ec <_dtoa_r+0x2dc>)
 800d5a4:	e022      	b.n	800d5ec <_dtoa_r+0xdc>
 800d5a6:	4b92      	ldr	r3, [pc, #584]	; (800d7f0 <_dtoa_r+0x2e0>)
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	3308      	adds	r3, #8
 800d5ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	9801      	ldr	r0, [sp, #4]
 800d5b2:	b013      	add	sp, #76	; 0x4c
 800d5b4:	ecbd 8b04 	vpop	{d8-d9}
 800d5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5bc:	4b8b      	ldr	r3, [pc, #556]	; (800d7ec <_dtoa_r+0x2dc>)
 800d5be:	9301      	str	r3, [sp, #4]
 800d5c0:	3303      	adds	r3, #3
 800d5c2:	e7f3      	b.n	800d5ac <_dtoa_r+0x9c>
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	4650      	mov	r0, sl
 800d5ca:	4659      	mov	r1, fp
 800d5cc:	f7f3 fa9c 	bl	8000b08 <__aeabi_dcmpeq>
 800d5d0:	ec4b ab19 	vmov	d9, sl, fp
 800d5d4:	4680      	mov	r8, r0
 800d5d6:	b158      	cbz	r0, 800d5f0 <_dtoa_r+0xe0>
 800d5d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5da:	2301      	movs	r3, #1
 800d5dc:	6013      	str	r3, [r2, #0]
 800d5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 856b 	beq.w	800e0bc <_dtoa_r+0xbac>
 800d5e6:	4883      	ldr	r0, [pc, #524]	; (800d7f4 <_dtoa_r+0x2e4>)
 800d5e8:	6018      	str	r0, [r3, #0]
 800d5ea:	1e43      	subs	r3, r0, #1
 800d5ec:	9301      	str	r3, [sp, #4]
 800d5ee:	e7df      	b.n	800d5b0 <_dtoa_r+0xa0>
 800d5f0:	ec4b ab10 	vmov	d0, sl, fp
 800d5f4:	aa10      	add	r2, sp, #64	; 0x40
 800d5f6:	a911      	add	r1, sp, #68	; 0x44
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f001 f8ab 	bl	800e754 <__d2b>
 800d5fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d602:	ee08 0a10 	vmov	s16, r0
 800d606:	2d00      	cmp	r5, #0
 800d608:	f000 8084 	beq.w	800d714 <_dtoa_r+0x204>
 800d60c:	ee19 3a90 	vmov	r3, s19
 800d610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d614:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d618:	4656      	mov	r6, sl
 800d61a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d61e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d622:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d626:	4b74      	ldr	r3, [pc, #464]	; (800d7f8 <_dtoa_r+0x2e8>)
 800d628:	2200      	movs	r2, #0
 800d62a:	4630      	mov	r0, r6
 800d62c:	4639      	mov	r1, r7
 800d62e:	f7f2 fe4b 	bl	80002c8 <__aeabi_dsub>
 800d632:	a365      	add	r3, pc, #404	; (adr r3, 800d7c8 <_dtoa_r+0x2b8>)
 800d634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d638:	f7f2 fffe 	bl	8000638 <__aeabi_dmul>
 800d63c:	a364      	add	r3, pc, #400	; (adr r3, 800d7d0 <_dtoa_r+0x2c0>)
 800d63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d642:	f7f2 fe43 	bl	80002cc <__adddf3>
 800d646:	4606      	mov	r6, r0
 800d648:	4628      	mov	r0, r5
 800d64a:	460f      	mov	r7, r1
 800d64c:	f7f2 ff8a 	bl	8000564 <__aeabi_i2d>
 800d650:	a361      	add	r3, pc, #388	; (adr r3, 800d7d8 <_dtoa_r+0x2c8>)
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	f7f2 ffef 	bl	8000638 <__aeabi_dmul>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4630      	mov	r0, r6
 800d660:	4639      	mov	r1, r7
 800d662:	f7f2 fe33 	bl	80002cc <__adddf3>
 800d666:	4606      	mov	r6, r0
 800d668:	460f      	mov	r7, r1
 800d66a:	f7f3 fa95 	bl	8000b98 <__aeabi_d2iz>
 800d66e:	2200      	movs	r2, #0
 800d670:	9000      	str	r0, [sp, #0]
 800d672:	2300      	movs	r3, #0
 800d674:	4630      	mov	r0, r6
 800d676:	4639      	mov	r1, r7
 800d678:	f7f3 fa50 	bl	8000b1c <__aeabi_dcmplt>
 800d67c:	b150      	cbz	r0, 800d694 <_dtoa_r+0x184>
 800d67e:	9800      	ldr	r0, [sp, #0]
 800d680:	f7f2 ff70 	bl	8000564 <__aeabi_i2d>
 800d684:	4632      	mov	r2, r6
 800d686:	463b      	mov	r3, r7
 800d688:	f7f3 fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 800d68c:	b910      	cbnz	r0, 800d694 <_dtoa_r+0x184>
 800d68e:	9b00      	ldr	r3, [sp, #0]
 800d690:	3b01      	subs	r3, #1
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	9b00      	ldr	r3, [sp, #0]
 800d696:	2b16      	cmp	r3, #22
 800d698:	d85a      	bhi.n	800d750 <_dtoa_r+0x240>
 800d69a:	9a00      	ldr	r2, [sp, #0]
 800d69c:	4b57      	ldr	r3, [pc, #348]	; (800d7fc <_dtoa_r+0x2ec>)
 800d69e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	ec51 0b19 	vmov	r0, r1, d9
 800d6aa:	f7f3 fa37 	bl	8000b1c <__aeabi_dcmplt>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d050      	beq.n	800d754 <_dtoa_r+0x244>
 800d6b2:	9b00      	ldr	r3, [sp, #0]
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6be:	1b5d      	subs	r5, r3, r5
 800d6c0:	1e6b      	subs	r3, r5, #1
 800d6c2:	9305      	str	r3, [sp, #20]
 800d6c4:	bf45      	ittet	mi
 800d6c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d6ca:	9304      	strmi	r3, [sp, #16]
 800d6cc:	2300      	movpl	r3, #0
 800d6ce:	2300      	movmi	r3, #0
 800d6d0:	bf4c      	ite	mi
 800d6d2:	9305      	strmi	r3, [sp, #20]
 800d6d4:	9304      	strpl	r3, [sp, #16]
 800d6d6:	9b00      	ldr	r3, [sp, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	db3d      	blt.n	800d758 <_dtoa_r+0x248>
 800d6dc:	9b05      	ldr	r3, [sp, #20]
 800d6de:	9a00      	ldr	r2, [sp, #0]
 800d6e0:	920a      	str	r2, [sp, #40]	; 0x28
 800d6e2:	4413      	add	r3, r2
 800d6e4:	9305      	str	r3, [sp, #20]
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	9307      	str	r3, [sp, #28]
 800d6ea:	9b06      	ldr	r3, [sp, #24]
 800d6ec:	2b09      	cmp	r3, #9
 800d6ee:	f200 8089 	bhi.w	800d804 <_dtoa_r+0x2f4>
 800d6f2:	2b05      	cmp	r3, #5
 800d6f4:	bfc4      	itt	gt
 800d6f6:	3b04      	subgt	r3, #4
 800d6f8:	9306      	strgt	r3, [sp, #24]
 800d6fa:	9b06      	ldr	r3, [sp, #24]
 800d6fc:	f1a3 0302 	sub.w	r3, r3, #2
 800d700:	bfcc      	ite	gt
 800d702:	2500      	movgt	r5, #0
 800d704:	2501      	movle	r5, #1
 800d706:	2b03      	cmp	r3, #3
 800d708:	f200 8087 	bhi.w	800d81a <_dtoa_r+0x30a>
 800d70c:	e8df f003 	tbb	[pc, r3]
 800d710:	59383a2d 	.word	0x59383a2d
 800d714:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d718:	441d      	add	r5, r3
 800d71a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d71e:	2b20      	cmp	r3, #32
 800d720:	bfc1      	itttt	gt
 800d722:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d726:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d72a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d72e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d732:	bfda      	itte	le
 800d734:	f1c3 0320 	rsble	r3, r3, #32
 800d738:	fa06 f003 	lslle.w	r0, r6, r3
 800d73c:	4318      	orrgt	r0, r3
 800d73e:	f7f2 ff01 	bl	8000544 <__aeabi_ui2d>
 800d742:	2301      	movs	r3, #1
 800d744:	4606      	mov	r6, r0
 800d746:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d74a:	3d01      	subs	r5, #1
 800d74c:	930e      	str	r3, [sp, #56]	; 0x38
 800d74e:	e76a      	b.n	800d626 <_dtoa_r+0x116>
 800d750:	2301      	movs	r3, #1
 800d752:	e7b2      	b.n	800d6ba <_dtoa_r+0x1aa>
 800d754:	900b      	str	r0, [sp, #44]	; 0x2c
 800d756:	e7b1      	b.n	800d6bc <_dtoa_r+0x1ac>
 800d758:	9b04      	ldr	r3, [sp, #16]
 800d75a:	9a00      	ldr	r2, [sp, #0]
 800d75c:	1a9b      	subs	r3, r3, r2
 800d75e:	9304      	str	r3, [sp, #16]
 800d760:	4253      	negs	r3, r2
 800d762:	9307      	str	r3, [sp, #28]
 800d764:	2300      	movs	r3, #0
 800d766:	930a      	str	r3, [sp, #40]	; 0x28
 800d768:	e7bf      	b.n	800d6ea <_dtoa_r+0x1da>
 800d76a:	2300      	movs	r3, #0
 800d76c:	9308      	str	r3, [sp, #32]
 800d76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d770:	2b00      	cmp	r3, #0
 800d772:	dc55      	bgt.n	800d820 <_dtoa_r+0x310>
 800d774:	2301      	movs	r3, #1
 800d776:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d77a:	461a      	mov	r2, r3
 800d77c:	9209      	str	r2, [sp, #36]	; 0x24
 800d77e:	e00c      	b.n	800d79a <_dtoa_r+0x28a>
 800d780:	2301      	movs	r3, #1
 800d782:	e7f3      	b.n	800d76c <_dtoa_r+0x25c>
 800d784:	2300      	movs	r3, #0
 800d786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d788:	9308      	str	r3, [sp, #32]
 800d78a:	9b00      	ldr	r3, [sp, #0]
 800d78c:	4413      	add	r3, r2
 800d78e:	9302      	str	r3, [sp, #8]
 800d790:	3301      	adds	r3, #1
 800d792:	2b01      	cmp	r3, #1
 800d794:	9303      	str	r3, [sp, #12]
 800d796:	bfb8      	it	lt
 800d798:	2301      	movlt	r3, #1
 800d79a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d79c:	2200      	movs	r2, #0
 800d79e:	6042      	str	r2, [r0, #4]
 800d7a0:	2204      	movs	r2, #4
 800d7a2:	f102 0614 	add.w	r6, r2, #20
 800d7a6:	429e      	cmp	r6, r3
 800d7a8:	6841      	ldr	r1, [r0, #4]
 800d7aa:	d93d      	bls.n	800d828 <_dtoa_r+0x318>
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 fca9 	bl	800e104 <_Balloc>
 800d7b2:	9001      	str	r0, [sp, #4]
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d13b      	bne.n	800d830 <_dtoa_r+0x320>
 800d7b8:	4b11      	ldr	r3, [pc, #68]	; (800d800 <_dtoa_r+0x2f0>)
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d7c0:	e6c0      	b.n	800d544 <_dtoa_r+0x34>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e7df      	b.n	800d786 <_dtoa_r+0x276>
 800d7c6:	bf00      	nop
 800d7c8:	636f4361 	.word	0x636f4361
 800d7cc:	3fd287a7 	.word	0x3fd287a7
 800d7d0:	8b60c8b3 	.word	0x8b60c8b3
 800d7d4:	3fc68a28 	.word	0x3fc68a28
 800d7d8:	509f79fb 	.word	0x509f79fb
 800d7dc:	3fd34413 	.word	0x3fd34413
 800d7e0:	08010735 	.word	0x08010735
 800d7e4:	0801074c 	.word	0x0801074c
 800d7e8:	7ff00000 	.word	0x7ff00000
 800d7ec:	08010731 	.word	0x08010731
 800d7f0:	08010728 	.word	0x08010728
 800d7f4:	08010705 	.word	0x08010705
 800d7f8:	3ff80000 	.word	0x3ff80000
 800d7fc:	08010840 	.word	0x08010840
 800d800:	080107a7 	.word	0x080107a7
 800d804:	2501      	movs	r5, #1
 800d806:	2300      	movs	r3, #0
 800d808:	9306      	str	r3, [sp, #24]
 800d80a:	9508      	str	r5, [sp, #32]
 800d80c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d810:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d814:	2200      	movs	r2, #0
 800d816:	2312      	movs	r3, #18
 800d818:	e7b0      	b.n	800d77c <_dtoa_r+0x26c>
 800d81a:	2301      	movs	r3, #1
 800d81c:	9308      	str	r3, [sp, #32]
 800d81e:	e7f5      	b.n	800d80c <_dtoa_r+0x2fc>
 800d820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d822:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d826:	e7b8      	b.n	800d79a <_dtoa_r+0x28a>
 800d828:	3101      	adds	r1, #1
 800d82a:	6041      	str	r1, [r0, #4]
 800d82c:	0052      	lsls	r2, r2, #1
 800d82e:	e7b8      	b.n	800d7a2 <_dtoa_r+0x292>
 800d830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d832:	9a01      	ldr	r2, [sp, #4]
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	2b0e      	cmp	r3, #14
 800d83a:	f200 809d 	bhi.w	800d978 <_dtoa_r+0x468>
 800d83e:	2d00      	cmp	r5, #0
 800d840:	f000 809a 	beq.w	800d978 <_dtoa_r+0x468>
 800d844:	9b00      	ldr	r3, [sp, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	dd32      	ble.n	800d8b0 <_dtoa_r+0x3a0>
 800d84a:	4ab7      	ldr	r2, [pc, #732]	; (800db28 <_dtoa_r+0x618>)
 800d84c:	f003 030f 	and.w	r3, r3, #15
 800d850:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d854:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d858:	9b00      	ldr	r3, [sp, #0]
 800d85a:	05d8      	lsls	r0, r3, #23
 800d85c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d860:	d516      	bpl.n	800d890 <_dtoa_r+0x380>
 800d862:	4bb2      	ldr	r3, [pc, #712]	; (800db2c <_dtoa_r+0x61c>)
 800d864:	ec51 0b19 	vmov	r0, r1, d9
 800d868:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d86c:	f7f3 f80e 	bl	800088c <__aeabi_ddiv>
 800d870:	f007 070f 	and.w	r7, r7, #15
 800d874:	4682      	mov	sl, r0
 800d876:	468b      	mov	fp, r1
 800d878:	2503      	movs	r5, #3
 800d87a:	4eac      	ldr	r6, [pc, #688]	; (800db2c <_dtoa_r+0x61c>)
 800d87c:	b957      	cbnz	r7, 800d894 <_dtoa_r+0x384>
 800d87e:	4642      	mov	r2, r8
 800d880:	464b      	mov	r3, r9
 800d882:	4650      	mov	r0, sl
 800d884:	4659      	mov	r1, fp
 800d886:	f7f3 f801 	bl	800088c <__aeabi_ddiv>
 800d88a:	4682      	mov	sl, r0
 800d88c:	468b      	mov	fp, r1
 800d88e:	e028      	b.n	800d8e2 <_dtoa_r+0x3d2>
 800d890:	2502      	movs	r5, #2
 800d892:	e7f2      	b.n	800d87a <_dtoa_r+0x36a>
 800d894:	07f9      	lsls	r1, r7, #31
 800d896:	d508      	bpl.n	800d8aa <_dtoa_r+0x39a>
 800d898:	4640      	mov	r0, r8
 800d89a:	4649      	mov	r1, r9
 800d89c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8a0:	f7f2 feca 	bl	8000638 <__aeabi_dmul>
 800d8a4:	3501      	adds	r5, #1
 800d8a6:	4680      	mov	r8, r0
 800d8a8:	4689      	mov	r9, r1
 800d8aa:	107f      	asrs	r7, r7, #1
 800d8ac:	3608      	adds	r6, #8
 800d8ae:	e7e5      	b.n	800d87c <_dtoa_r+0x36c>
 800d8b0:	f000 809b 	beq.w	800d9ea <_dtoa_r+0x4da>
 800d8b4:	9b00      	ldr	r3, [sp, #0]
 800d8b6:	4f9d      	ldr	r7, [pc, #628]	; (800db2c <_dtoa_r+0x61c>)
 800d8b8:	425e      	negs	r6, r3
 800d8ba:	4b9b      	ldr	r3, [pc, #620]	; (800db28 <_dtoa_r+0x618>)
 800d8bc:	f006 020f 	and.w	r2, r6, #15
 800d8c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	ec51 0b19 	vmov	r0, r1, d9
 800d8cc:	f7f2 feb4 	bl	8000638 <__aeabi_dmul>
 800d8d0:	1136      	asrs	r6, r6, #4
 800d8d2:	4682      	mov	sl, r0
 800d8d4:	468b      	mov	fp, r1
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	2502      	movs	r5, #2
 800d8da:	2e00      	cmp	r6, #0
 800d8dc:	d17a      	bne.n	800d9d4 <_dtoa_r+0x4c4>
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1d3      	bne.n	800d88a <_dtoa_r+0x37a>
 800d8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f000 8082 	beq.w	800d9ee <_dtoa_r+0x4de>
 800d8ea:	4b91      	ldr	r3, [pc, #580]	; (800db30 <_dtoa_r+0x620>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4650      	mov	r0, sl
 800d8f0:	4659      	mov	r1, fp
 800d8f2:	f7f3 f913 	bl	8000b1c <__aeabi_dcmplt>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d079      	beq.n	800d9ee <_dtoa_r+0x4de>
 800d8fa:	9b03      	ldr	r3, [sp, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d076      	beq.n	800d9ee <_dtoa_r+0x4de>
 800d900:	9b02      	ldr	r3, [sp, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	dd36      	ble.n	800d974 <_dtoa_r+0x464>
 800d906:	9b00      	ldr	r3, [sp, #0]
 800d908:	4650      	mov	r0, sl
 800d90a:	4659      	mov	r1, fp
 800d90c:	1e5f      	subs	r7, r3, #1
 800d90e:	2200      	movs	r2, #0
 800d910:	4b88      	ldr	r3, [pc, #544]	; (800db34 <_dtoa_r+0x624>)
 800d912:	f7f2 fe91 	bl	8000638 <__aeabi_dmul>
 800d916:	9e02      	ldr	r6, [sp, #8]
 800d918:	4682      	mov	sl, r0
 800d91a:	468b      	mov	fp, r1
 800d91c:	3501      	adds	r5, #1
 800d91e:	4628      	mov	r0, r5
 800d920:	f7f2 fe20 	bl	8000564 <__aeabi_i2d>
 800d924:	4652      	mov	r2, sl
 800d926:	465b      	mov	r3, fp
 800d928:	f7f2 fe86 	bl	8000638 <__aeabi_dmul>
 800d92c:	4b82      	ldr	r3, [pc, #520]	; (800db38 <_dtoa_r+0x628>)
 800d92e:	2200      	movs	r2, #0
 800d930:	f7f2 fccc 	bl	80002cc <__adddf3>
 800d934:	46d0      	mov	r8, sl
 800d936:	46d9      	mov	r9, fp
 800d938:	4682      	mov	sl, r0
 800d93a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d93e:	2e00      	cmp	r6, #0
 800d940:	d158      	bne.n	800d9f4 <_dtoa_r+0x4e4>
 800d942:	4b7e      	ldr	r3, [pc, #504]	; (800db3c <_dtoa_r+0x62c>)
 800d944:	2200      	movs	r2, #0
 800d946:	4640      	mov	r0, r8
 800d948:	4649      	mov	r1, r9
 800d94a:	f7f2 fcbd 	bl	80002c8 <__aeabi_dsub>
 800d94e:	4652      	mov	r2, sl
 800d950:	465b      	mov	r3, fp
 800d952:	4680      	mov	r8, r0
 800d954:	4689      	mov	r9, r1
 800d956:	f7f3 f8ff 	bl	8000b58 <__aeabi_dcmpgt>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	f040 8295 	bne.w	800de8a <_dtoa_r+0x97a>
 800d960:	4652      	mov	r2, sl
 800d962:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d966:	4640      	mov	r0, r8
 800d968:	4649      	mov	r1, r9
 800d96a:	f7f3 f8d7 	bl	8000b1c <__aeabi_dcmplt>
 800d96e:	2800      	cmp	r0, #0
 800d970:	f040 8289 	bne.w	800de86 <_dtoa_r+0x976>
 800d974:	ec5b ab19 	vmov	sl, fp, d9
 800d978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f2c0 8148 	blt.w	800dc10 <_dtoa_r+0x700>
 800d980:	9a00      	ldr	r2, [sp, #0]
 800d982:	2a0e      	cmp	r2, #14
 800d984:	f300 8144 	bgt.w	800dc10 <_dtoa_r+0x700>
 800d988:	4b67      	ldr	r3, [pc, #412]	; (800db28 <_dtoa_r+0x618>)
 800d98a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d98e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d994:	2b00      	cmp	r3, #0
 800d996:	f280 80d5 	bge.w	800db44 <_dtoa_r+0x634>
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	f300 80d1 	bgt.w	800db44 <_dtoa_r+0x634>
 800d9a2:	f040 826f 	bne.w	800de84 <_dtoa_r+0x974>
 800d9a6:	4b65      	ldr	r3, [pc, #404]	; (800db3c <_dtoa_r+0x62c>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	4649      	mov	r1, r9
 800d9ae:	f7f2 fe43 	bl	8000638 <__aeabi_dmul>
 800d9b2:	4652      	mov	r2, sl
 800d9b4:	465b      	mov	r3, fp
 800d9b6:	f7f3 f8c5 	bl	8000b44 <__aeabi_dcmpge>
 800d9ba:	9e03      	ldr	r6, [sp, #12]
 800d9bc:	4637      	mov	r7, r6
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	f040 8245 	bne.w	800de4e <_dtoa_r+0x93e>
 800d9c4:	9d01      	ldr	r5, [sp, #4]
 800d9c6:	2331      	movs	r3, #49	; 0x31
 800d9c8:	f805 3b01 	strb.w	r3, [r5], #1
 800d9cc:	9b00      	ldr	r3, [sp, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	e240      	b.n	800de56 <_dtoa_r+0x946>
 800d9d4:	07f2      	lsls	r2, r6, #31
 800d9d6:	d505      	bpl.n	800d9e4 <_dtoa_r+0x4d4>
 800d9d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9dc:	f7f2 fe2c 	bl	8000638 <__aeabi_dmul>
 800d9e0:	3501      	adds	r5, #1
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	1076      	asrs	r6, r6, #1
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	e777      	b.n	800d8da <_dtoa_r+0x3ca>
 800d9ea:	2502      	movs	r5, #2
 800d9ec:	e779      	b.n	800d8e2 <_dtoa_r+0x3d2>
 800d9ee:	9f00      	ldr	r7, [sp, #0]
 800d9f0:	9e03      	ldr	r6, [sp, #12]
 800d9f2:	e794      	b.n	800d91e <_dtoa_r+0x40e>
 800d9f4:	9901      	ldr	r1, [sp, #4]
 800d9f6:	4b4c      	ldr	r3, [pc, #304]	; (800db28 <_dtoa_r+0x618>)
 800d9f8:	4431      	add	r1, r6
 800d9fa:	910d      	str	r1, [sp, #52]	; 0x34
 800d9fc:	9908      	ldr	r1, [sp, #32]
 800d9fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800da02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da06:	2900      	cmp	r1, #0
 800da08:	d043      	beq.n	800da92 <_dtoa_r+0x582>
 800da0a:	494d      	ldr	r1, [pc, #308]	; (800db40 <_dtoa_r+0x630>)
 800da0c:	2000      	movs	r0, #0
 800da0e:	f7f2 ff3d 	bl	800088c <__aeabi_ddiv>
 800da12:	4652      	mov	r2, sl
 800da14:	465b      	mov	r3, fp
 800da16:	f7f2 fc57 	bl	80002c8 <__aeabi_dsub>
 800da1a:	9d01      	ldr	r5, [sp, #4]
 800da1c:	4682      	mov	sl, r0
 800da1e:	468b      	mov	fp, r1
 800da20:	4649      	mov	r1, r9
 800da22:	4640      	mov	r0, r8
 800da24:	f7f3 f8b8 	bl	8000b98 <__aeabi_d2iz>
 800da28:	4606      	mov	r6, r0
 800da2a:	f7f2 fd9b 	bl	8000564 <__aeabi_i2d>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	4640      	mov	r0, r8
 800da34:	4649      	mov	r1, r9
 800da36:	f7f2 fc47 	bl	80002c8 <__aeabi_dsub>
 800da3a:	3630      	adds	r6, #48	; 0x30
 800da3c:	f805 6b01 	strb.w	r6, [r5], #1
 800da40:	4652      	mov	r2, sl
 800da42:	465b      	mov	r3, fp
 800da44:	4680      	mov	r8, r0
 800da46:	4689      	mov	r9, r1
 800da48:	f7f3 f868 	bl	8000b1c <__aeabi_dcmplt>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d163      	bne.n	800db18 <_dtoa_r+0x608>
 800da50:	4642      	mov	r2, r8
 800da52:	464b      	mov	r3, r9
 800da54:	4936      	ldr	r1, [pc, #216]	; (800db30 <_dtoa_r+0x620>)
 800da56:	2000      	movs	r0, #0
 800da58:	f7f2 fc36 	bl	80002c8 <__aeabi_dsub>
 800da5c:	4652      	mov	r2, sl
 800da5e:	465b      	mov	r3, fp
 800da60:	f7f3 f85c 	bl	8000b1c <__aeabi_dcmplt>
 800da64:	2800      	cmp	r0, #0
 800da66:	f040 80b5 	bne.w	800dbd4 <_dtoa_r+0x6c4>
 800da6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da6c:	429d      	cmp	r5, r3
 800da6e:	d081      	beq.n	800d974 <_dtoa_r+0x464>
 800da70:	4b30      	ldr	r3, [pc, #192]	; (800db34 <_dtoa_r+0x624>)
 800da72:	2200      	movs	r2, #0
 800da74:	4650      	mov	r0, sl
 800da76:	4659      	mov	r1, fp
 800da78:	f7f2 fdde 	bl	8000638 <__aeabi_dmul>
 800da7c:	4b2d      	ldr	r3, [pc, #180]	; (800db34 <_dtoa_r+0x624>)
 800da7e:	4682      	mov	sl, r0
 800da80:	468b      	mov	fp, r1
 800da82:	4640      	mov	r0, r8
 800da84:	4649      	mov	r1, r9
 800da86:	2200      	movs	r2, #0
 800da88:	f7f2 fdd6 	bl	8000638 <__aeabi_dmul>
 800da8c:	4680      	mov	r8, r0
 800da8e:	4689      	mov	r9, r1
 800da90:	e7c6      	b.n	800da20 <_dtoa_r+0x510>
 800da92:	4650      	mov	r0, sl
 800da94:	4659      	mov	r1, fp
 800da96:	f7f2 fdcf 	bl	8000638 <__aeabi_dmul>
 800da9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da9c:	9d01      	ldr	r5, [sp, #4]
 800da9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800daa0:	4682      	mov	sl, r0
 800daa2:	468b      	mov	fp, r1
 800daa4:	4649      	mov	r1, r9
 800daa6:	4640      	mov	r0, r8
 800daa8:	f7f3 f876 	bl	8000b98 <__aeabi_d2iz>
 800daac:	4606      	mov	r6, r0
 800daae:	f7f2 fd59 	bl	8000564 <__aeabi_i2d>
 800dab2:	3630      	adds	r6, #48	; 0x30
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	4640      	mov	r0, r8
 800daba:	4649      	mov	r1, r9
 800dabc:	f7f2 fc04 	bl	80002c8 <__aeabi_dsub>
 800dac0:	f805 6b01 	strb.w	r6, [r5], #1
 800dac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dac6:	429d      	cmp	r5, r3
 800dac8:	4680      	mov	r8, r0
 800daca:	4689      	mov	r9, r1
 800dacc:	f04f 0200 	mov.w	r2, #0
 800dad0:	d124      	bne.n	800db1c <_dtoa_r+0x60c>
 800dad2:	4b1b      	ldr	r3, [pc, #108]	; (800db40 <_dtoa_r+0x630>)
 800dad4:	4650      	mov	r0, sl
 800dad6:	4659      	mov	r1, fp
 800dad8:	f7f2 fbf8 	bl	80002cc <__adddf3>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	4640      	mov	r0, r8
 800dae2:	4649      	mov	r1, r9
 800dae4:	f7f3 f838 	bl	8000b58 <__aeabi_dcmpgt>
 800dae8:	2800      	cmp	r0, #0
 800daea:	d173      	bne.n	800dbd4 <_dtoa_r+0x6c4>
 800daec:	4652      	mov	r2, sl
 800daee:	465b      	mov	r3, fp
 800daf0:	4913      	ldr	r1, [pc, #76]	; (800db40 <_dtoa_r+0x630>)
 800daf2:	2000      	movs	r0, #0
 800daf4:	f7f2 fbe8 	bl	80002c8 <__aeabi_dsub>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4640      	mov	r0, r8
 800dafe:	4649      	mov	r1, r9
 800db00:	f7f3 f80c 	bl	8000b1c <__aeabi_dcmplt>
 800db04:	2800      	cmp	r0, #0
 800db06:	f43f af35 	beq.w	800d974 <_dtoa_r+0x464>
 800db0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800db0c:	1e6b      	subs	r3, r5, #1
 800db0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db14:	2b30      	cmp	r3, #48	; 0x30
 800db16:	d0f8      	beq.n	800db0a <_dtoa_r+0x5fa>
 800db18:	9700      	str	r7, [sp, #0]
 800db1a:	e049      	b.n	800dbb0 <_dtoa_r+0x6a0>
 800db1c:	4b05      	ldr	r3, [pc, #20]	; (800db34 <_dtoa_r+0x624>)
 800db1e:	f7f2 fd8b 	bl	8000638 <__aeabi_dmul>
 800db22:	4680      	mov	r8, r0
 800db24:	4689      	mov	r9, r1
 800db26:	e7bd      	b.n	800daa4 <_dtoa_r+0x594>
 800db28:	08010840 	.word	0x08010840
 800db2c:	08010818 	.word	0x08010818
 800db30:	3ff00000 	.word	0x3ff00000
 800db34:	40240000 	.word	0x40240000
 800db38:	401c0000 	.word	0x401c0000
 800db3c:	40140000 	.word	0x40140000
 800db40:	3fe00000 	.word	0x3fe00000
 800db44:	9d01      	ldr	r5, [sp, #4]
 800db46:	4656      	mov	r6, sl
 800db48:	465f      	mov	r7, fp
 800db4a:	4642      	mov	r2, r8
 800db4c:	464b      	mov	r3, r9
 800db4e:	4630      	mov	r0, r6
 800db50:	4639      	mov	r1, r7
 800db52:	f7f2 fe9b 	bl	800088c <__aeabi_ddiv>
 800db56:	f7f3 f81f 	bl	8000b98 <__aeabi_d2iz>
 800db5a:	4682      	mov	sl, r0
 800db5c:	f7f2 fd02 	bl	8000564 <__aeabi_i2d>
 800db60:	4642      	mov	r2, r8
 800db62:	464b      	mov	r3, r9
 800db64:	f7f2 fd68 	bl	8000638 <__aeabi_dmul>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4630      	mov	r0, r6
 800db6e:	4639      	mov	r1, r7
 800db70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db74:	f7f2 fba8 	bl	80002c8 <__aeabi_dsub>
 800db78:	f805 6b01 	strb.w	r6, [r5], #1
 800db7c:	9e01      	ldr	r6, [sp, #4]
 800db7e:	9f03      	ldr	r7, [sp, #12]
 800db80:	1bae      	subs	r6, r5, r6
 800db82:	42b7      	cmp	r7, r6
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	d135      	bne.n	800dbf6 <_dtoa_r+0x6e6>
 800db8a:	f7f2 fb9f 	bl	80002cc <__adddf3>
 800db8e:	4642      	mov	r2, r8
 800db90:	464b      	mov	r3, r9
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	f7f2 ffdf 	bl	8000b58 <__aeabi_dcmpgt>
 800db9a:	b9d0      	cbnz	r0, 800dbd2 <_dtoa_r+0x6c2>
 800db9c:	4642      	mov	r2, r8
 800db9e:	464b      	mov	r3, r9
 800dba0:	4630      	mov	r0, r6
 800dba2:	4639      	mov	r1, r7
 800dba4:	f7f2 ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 800dba8:	b110      	cbz	r0, 800dbb0 <_dtoa_r+0x6a0>
 800dbaa:	f01a 0f01 	tst.w	sl, #1
 800dbae:	d110      	bne.n	800dbd2 <_dtoa_r+0x6c2>
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	ee18 1a10 	vmov	r1, s16
 800dbb6:	f000 fae5 	bl	800e184 <_Bfree>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	9800      	ldr	r0, [sp, #0]
 800dbbe:	702b      	strb	r3, [r5, #0]
 800dbc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbc2:	3001      	adds	r0, #1
 800dbc4:	6018      	str	r0, [r3, #0]
 800dbc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f43f acf1 	beq.w	800d5b0 <_dtoa_r+0xa0>
 800dbce:	601d      	str	r5, [r3, #0]
 800dbd0:	e4ee      	b.n	800d5b0 <_dtoa_r+0xa0>
 800dbd2:	9f00      	ldr	r7, [sp, #0]
 800dbd4:	462b      	mov	r3, r5
 800dbd6:	461d      	mov	r5, r3
 800dbd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbdc:	2a39      	cmp	r2, #57	; 0x39
 800dbde:	d106      	bne.n	800dbee <_dtoa_r+0x6de>
 800dbe0:	9a01      	ldr	r2, [sp, #4]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d1f7      	bne.n	800dbd6 <_dtoa_r+0x6c6>
 800dbe6:	9901      	ldr	r1, [sp, #4]
 800dbe8:	2230      	movs	r2, #48	; 0x30
 800dbea:	3701      	adds	r7, #1
 800dbec:	700a      	strb	r2, [r1, #0]
 800dbee:	781a      	ldrb	r2, [r3, #0]
 800dbf0:	3201      	adds	r2, #1
 800dbf2:	701a      	strb	r2, [r3, #0]
 800dbf4:	e790      	b.n	800db18 <_dtoa_r+0x608>
 800dbf6:	4ba6      	ldr	r3, [pc, #664]	; (800de90 <_dtoa_r+0x980>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f7f2 fd1d 	bl	8000638 <__aeabi_dmul>
 800dbfe:	2200      	movs	r2, #0
 800dc00:	2300      	movs	r3, #0
 800dc02:	4606      	mov	r6, r0
 800dc04:	460f      	mov	r7, r1
 800dc06:	f7f2 ff7f 	bl	8000b08 <__aeabi_dcmpeq>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d09d      	beq.n	800db4a <_dtoa_r+0x63a>
 800dc0e:	e7cf      	b.n	800dbb0 <_dtoa_r+0x6a0>
 800dc10:	9a08      	ldr	r2, [sp, #32]
 800dc12:	2a00      	cmp	r2, #0
 800dc14:	f000 80d7 	beq.w	800ddc6 <_dtoa_r+0x8b6>
 800dc18:	9a06      	ldr	r2, [sp, #24]
 800dc1a:	2a01      	cmp	r2, #1
 800dc1c:	f300 80ba 	bgt.w	800dd94 <_dtoa_r+0x884>
 800dc20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	f000 80b2 	beq.w	800dd8c <_dtoa_r+0x87c>
 800dc28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dc2c:	9e07      	ldr	r6, [sp, #28]
 800dc2e:	9d04      	ldr	r5, [sp, #16]
 800dc30:	9a04      	ldr	r2, [sp, #16]
 800dc32:	441a      	add	r2, r3
 800dc34:	9204      	str	r2, [sp, #16]
 800dc36:	9a05      	ldr	r2, [sp, #20]
 800dc38:	2101      	movs	r1, #1
 800dc3a:	441a      	add	r2, r3
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	9205      	str	r2, [sp, #20]
 800dc40:	f000 fb58 	bl	800e2f4 <__i2b>
 800dc44:	4607      	mov	r7, r0
 800dc46:	2d00      	cmp	r5, #0
 800dc48:	dd0c      	ble.n	800dc64 <_dtoa_r+0x754>
 800dc4a:	9b05      	ldr	r3, [sp, #20]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	dd09      	ble.n	800dc64 <_dtoa_r+0x754>
 800dc50:	42ab      	cmp	r3, r5
 800dc52:	9a04      	ldr	r2, [sp, #16]
 800dc54:	bfa8      	it	ge
 800dc56:	462b      	movge	r3, r5
 800dc58:	1ad2      	subs	r2, r2, r3
 800dc5a:	9204      	str	r2, [sp, #16]
 800dc5c:	9a05      	ldr	r2, [sp, #20]
 800dc5e:	1aed      	subs	r5, r5, r3
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	9305      	str	r3, [sp, #20]
 800dc64:	9b07      	ldr	r3, [sp, #28]
 800dc66:	b31b      	cbz	r3, 800dcb0 <_dtoa_r+0x7a0>
 800dc68:	9b08      	ldr	r3, [sp, #32]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 80af 	beq.w	800ddce <_dtoa_r+0x8be>
 800dc70:	2e00      	cmp	r6, #0
 800dc72:	dd13      	ble.n	800dc9c <_dtoa_r+0x78c>
 800dc74:	4639      	mov	r1, r7
 800dc76:	4632      	mov	r2, r6
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f000 fbfb 	bl	800e474 <__pow5mult>
 800dc7e:	ee18 2a10 	vmov	r2, s16
 800dc82:	4601      	mov	r1, r0
 800dc84:	4607      	mov	r7, r0
 800dc86:	4620      	mov	r0, r4
 800dc88:	f000 fb4a 	bl	800e320 <__multiply>
 800dc8c:	ee18 1a10 	vmov	r1, s16
 800dc90:	4680      	mov	r8, r0
 800dc92:	4620      	mov	r0, r4
 800dc94:	f000 fa76 	bl	800e184 <_Bfree>
 800dc98:	ee08 8a10 	vmov	s16, r8
 800dc9c:	9b07      	ldr	r3, [sp, #28]
 800dc9e:	1b9a      	subs	r2, r3, r6
 800dca0:	d006      	beq.n	800dcb0 <_dtoa_r+0x7a0>
 800dca2:	ee18 1a10 	vmov	r1, s16
 800dca6:	4620      	mov	r0, r4
 800dca8:	f000 fbe4 	bl	800e474 <__pow5mult>
 800dcac:	ee08 0a10 	vmov	s16, r0
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f000 fb1e 	bl	800e2f4 <__i2b>
 800dcb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	f340 8088 	ble.w	800ddd2 <_dtoa_r+0x8c2>
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	4601      	mov	r1, r0
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f000 fbd4 	bl	800e474 <__pow5mult>
 800dccc:	9b06      	ldr	r3, [sp, #24]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	f340 8081 	ble.w	800ddd8 <_dtoa_r+0x8c8>
 800dcd6:	f04f 0800 	mov.w	r8, #0
 800dcda:	6933      	ldr	r3, [r6, #16]
 800dcdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dce0:	6918      	ldr	r0, [r3, #16]
 800dce2:	f000 fab7 	bl	800e254 <__hi0bits>
 800dce6:	f1c0 0020 	rsb	r0, r0, #32
 800dcea:	9b05      	ldr	r3, [sp, #20]
 800dcec:	4418      	add	r0, r3
 800dcee:	f010 001f 	ands.w	r0, r0, #31
 800dcf2:	f000 8092 	beq.w	800de1a <_dtoa_r+0x90a>
 800dcf6:	f1c0 0320 	rsb	r3, r0, #32
 800dcfa:	2b04      	cmp	r3, #4
 800dcfc:	f340 808a 	ble.w	800de14 <_dtoa_r+0x904>
 800dd00:	f1c0 001c 	rsb	r0, r0, #28
 800dd04:	9b04      	ldr	r3, [sp, #16]
 800dd06:	4403      	add	r3, r0
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	9b05      	ldr	r3, [sp, #20]
 800dd0c:	4403      	add	r3, r0
 800dd0e:	4405      	add	r5, r0
 800dd10:	9305      	str	r3, [sp, #20]
 800dd12:	9b04      	ldr	r3, [sp, #16]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	dd07      	ble.n	800dd28 <_dtoa_r+0x818>
 800dd18:	ee18 1a10 	vmov	r1, s16
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f000 fc02 	bl	800e528 <__lshift>
 800dd24:	ee08 0a10 	vmov	s16, r0
 800dd28:	9b05      	ldr	r3, [sp, #20]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	dd05      	ble.n	800dd3a <_dtoa_r+0x82a>
 800dd2e:	4631      	mov	r1, r6
 800dd30:	461a      	mov	r2, r3
 800dd32:	4620      	mov	r0, r4
 800dd34:	f000 fbf8 	bl	800e528 <__lshift>
 800dd38:	4606      	mov	r6, r0
 800dd3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d06e      	beq.n	800de1e <_dtoa_r+0x90e>
 800dd40:	ee18 0a10 	vmov	r0, s16
 800dd44:	4631      	mov	r1, r6
 800dd46:	f000 fc5f 	bl	800e608 <__mcmp>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	da67      	bge.n	800de1e <_dtoa_r+0x90e>
 800dd4e:	9b00      	ldr	r3, [sp, #0]
 800dd50:	3b01      	subs	r3, #1
 800dd52:	ee18 1a10 	vmov	r1, s16
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	220a      	movs	r2, #10
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f000 fa33 	bl	800e1c8 <__multadd>
 800dd62:	9b08      	ldr	r3, [sp, #32]
 800dd64:	ee08 0a10 	vmov	s16, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f000 81b1 	beq.w	800e0d0 <_dtoa_r+0xbc0>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	4639      	mov	r1, r7
 800dd72:	220a      	movs	r2, #10
 800dd74:	4620      	mov	r0, r4
 800dd76:	f000 fa27 	bl	800e1c8 <__multadd>
 800dd7a:	9b02      	ldr	r3, [sp, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	4607      	mov	r7, r0
 800dd80:	f300 808e 	bgt.w	800dea0 <_dtoa_r+0x990>
 800dd84:	9b06      	ldr	r3, [sp, #24]
 800dd86:	2b02      	cmp	r3, #2
 800dd88:	dc51      	bgt.n	800de2e <_dtoa_r+0x91e>
 800dd8a:	e089      	b.n	800dea0 <_dtoa_r+0x990>
 800dd8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd92:	e74b      	b.n	800dc2c <_dtoa_r+0x71c>
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	1e5e      	subs	r6, r3, #1
 800dd98:	9b07      	ldr	r3, [sp, #28]
 800dd9a:	42b3      	cmp	r3, r6
 800dd9c:	bfbf      	itttt	lt
 800dd9e:	9b07      	ldrlt	r3, [sp, #28]
 800dda0:	9607      	strlt	r6, [sp, #28]
 800dda2:	1af2      	sublt	r2, r6, r3
 800dda4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dda6:	bfb6      	itet	lt
 800dda8:	189b      	addlt	r3, r3, r2
 800ddaa:	1b9e      	subge	r6, r3, r6
 800ddac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	bfb8      	it	lt
 800ddb2:	2600      	movlt	r6, #0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	bfb7      	itett	lt
 800ddb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ddbc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ddc0:	1a9d      	sublt	r5, r3, r2
 800ddc2:	2300      	movlt	r3, #0
 800ddc4:	e734      	b.n	800dc30 <_dtoa_r+0x720>
 800ddc6:	9e07      	ldr	r6, [sp, #28]
 800ddc8:	9d04      	ldr	r5, [sp, #16]
 800ddca:	9f08      	ldr	r7, [sp, #32]
 800ddcc:	e73b      	b.n	800dc46 <_dtoa_r+0x736>
 800ddce:	9a07      	ldr	r2, [sp, #28]
 800ddd0:	e767      	b.n	800dca2 <_dtoa_r+0x792>
 800ddd2:	9b06      	ldr	r3, [sp, #24]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	dc18      	bgt.n	800de0a <_dtoa_r+0x8fa>
 800ddd8:	f1ba 0f00 	cmp.w	sl, #0
 800dddc:	d115      	bne.n	800de0a <_dtoa_r+0x8fa>
 800ddde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dde2:	b993      	cbnz	r3, 800de0a <_dtoa_r+0x8fa>
 800dde4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dde8:	0d1b      	lsrs	r3, r3, #20
 800ddea:	051b      	lsls	r3, r3, #20
 800ddec:	b183      	cbz	r3, 800de10 <_dtoa_r+0x900>
 800ddee:	9b04      	ldr	r3, [sp, #16]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	9304      	str	r3, [sp, #16]
 800ddf4:	9b05      	ldr	r3, [sp, #20]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	9305      	str	r3, [sp, #20]
 800ddfa:	f04f 0801 	mov.w	r8, #1
 800ddfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de00:	2b00      	cmp	r3, #0
 800de02:	f47f af6a 	bne.w	800dcda <_dtoa_r+0x7ca>
 800de06:	2001      	movs	r0, #1
 800de08:	e76f      	b.n	800dcea <_dtoa_r+0x7da>
 800de0a:	f04f 0800 	mov.w	r8, #0
 800de0e:	e7f6      	b.n	800ddfe <_dtoa_r+0x8ee>
 800de10:	4698      	mov	r8, r3
 800de12:	e7f4      	b.n	800ddfe <_dtoa_r+0x8ee>
 800de14:	f43f af7d 	beq.w	800dd12 <_dtoa_r+0x802>
 800de18:	4618      	mov	r0, r3
 800de1a:	301c      	adds	r0, #28
 800de1c:	e772      	b.n	800dd04 <_dtoa_r+0x7f4>
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	dc37      	bgt.n	800de94 <_dtoa_r+0x984>
 800de24:	9b06      	ldr	r3, [sp, #24]
 800de26:	2b02      	cmp	r3, #2
 800de28:	dd34      	ble.n	800de94 <_dtoa_r+0x984>
 800de2a:	9b03      	ldr	r3, [sp, #12]
 800de2c:	9302      	str	r3, [sp, #8]
 800de2e:	9b02      	ldr	r3, [sp, #8]
 800de30:	b96b      	cbnz	r3, 800de4e <_dtoa_r+0x93e>
 800de32:	4631      	mov	r1, r6
 800de34:	2205      	movs	r2, #5
 800de36:	4620      	mov	r0, r4
 800de38:	f000 f9c6 	bl	800e1c8 <__multadd>
 800de3c:	4601      	mov	r1, r0
 800de3e:	4606      	mov	r6, r0
 800de40:	ee18 0a10 	vmov	r0, s16
 800de44:	f000 fbe0 	bl	800e608 <__mcmp>
 800de48:	2800      	cmp	r0, #0
 800de4a:	f73f adbb 	bgt.w	800d9c4 <_dtoa_r+0x4b4>
 800de4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de50:	9d01      	ldr	r5, [sp, #4]
 800de52:	43db      	mvns	r3, r3
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	f04f 0800 	mov.w	r8, #0
 800de5a:	4631      	mov	r1, r6
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 f991 	bl	800e184 <_Bfree>
 800de62:	2f00      	cmp	r7, #0
 800de64:	f43f aea4 	beq.w	800dbb0 <_dtoa_r+0x6a0>
 800de68:	f1b8 0f00 	cmp.w	r8, #0
 800de6c:	d005      	beq.n	800de7a <_dtoa_r+0x96a>
 800de6e:	45b8      	cmp	r8, r7
 800de70:	d003      	beq.n	800de7a <_dtoa_r+0x96a>
 800de72:	4641      	mov	r1, r8
 800de74:	4620      	mov	r0, r4
 800de76:	f000 f985 	bl	800e184 <_Bfree>
 800de7a:	4639      	mov	r1, r7
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 f981 	bl	800e184 <_Bfree>
 800de82:	e695      	b.n	800dbb0 <_dtoa_r+0x6a0>
 800de84:	2600      	movs	r6, #0
 800de86:	4637      	mov	r7, r6
 800de88:	e7e1      	b.n	800de4e <_dtoa_r+0x93e>
 800de8a:	9700      	str	r7, [sp, #0]
 800de8c:	4637      	mov	r7, r6
 800de8e:	e599      	b.n	800d9c4 <_dtoa_r+0x4b4>
 800de90:	40240000 	.word	0x40240000
 800de94:	9b08      	ldr	r3, [sp, #32]
 800de96:	2b00      	cmp	r3, #0
 800de98:	f000 80ca 	beq.w	800e030 <_dtoa_r+0xb20>
 800de9c:	9b03      	ldr	r3, [sp, #12]
 800de9e:	9302      	str	r3, [sp, #8]
 800dea0:	2d00      	cmp	r5, #0
 800dea2:	dd05      	ble.n	800deb0 <_dtoa_r+0x9a0>
 800dea4:	4639      	mov	r1, r7
 800dea6:	462a      	mov	r2, r5
 800dea8:	4620      	mov	r0, r4
 800deaa:	f000 fb3d 	bl	800e528 <__lshift>
 800deae:	4607      	mov	r7, r0
 800deb0:	f1b8 0f00 	cmp.w	r8, #0
 800deb4:	d05b      	beq.n	800df6e <_dtoa_r+0xa5e>
 800deb6:	6879      	ldr	r1, [r7, #4]
 800deb8:	4620      	mov	r0, r4
 800deba:	f000 f923 	bl	800e104 <_Balloc>
 800debe:	4605      	mov	r5, r0
 800dec0:	b928      	cbnz	r0, 800dece <_dtoa_r+0x9be>
 800dec2:	4b87      	ldr	r3, [pc, #540]	; (800e0e0 <_dtoa_r+0xbd0>)
 800dec4:	4602      	mov	r2, r0
 800dec6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800deca:	f7ff bb3b 	b.w	800d544 <_dtoa_r+0x34>
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	3202      	adds	r2, #2
 800ded2:	0092      	lsls	r2, r2, #2
 800ded4:	f107 010c 	add.w	r1, r7, #12
 800ded8:	300c      	adds	r0, #12
 800deda:	f7fe fe0d 	bl	800caf8 <memcpy>
 800dede:	2201      	movs	r2, #1
 800dee0:	4629      	mov	r1, r5
 800dee2:	4620      	mov	r0, r4
 800dee4:	f000 fb20 	bl	800e528 <__lshift>
 800dee8:	9b01      	ldr	r3, [sp, #4]
 800deea:	f103 0901 	add.w	r9, r3, #1
 800deee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800def2:	4413      	add	r3, r2
 800def4:	9305      	str	r3, [sp, #20]
 800def6:	f00a 0301 	and.w	r3, sl, #1
 800defa:	46b8      	mov	r8, r7
 800defc:	9304      	str	r3, [sp, #16]
 800defe:	4607      	mov	r7, r0
 800df00:	4631      	mov	r1, r6
 800df02:	ee18 0a10 	vmov	r0, s16
 800df06:	f7ff fa77 	bl	800d3f8 <quorem>
 800df0a:	4641      	mov	r1, r8
 800df0c:	9002      	str	r0, [sp, #8]
 800df0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df12:	ee18 0a10 	vmov	r0, s16
 800df16:	f000 fb77 	bl	800e608 <__mcmp>
 800df1a:	463a      	mov	r2, r7
 800df1c:	9003      	str	r0, [sp, #12]
 800df1e:	4631      	mov	r1, r6
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fb8d 	bl	800e640 <__mdiff>
 800df26:	68c2      	ldr	r2, [r0, #12]
 800df28:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800df2c:	4605      	mov	r5, r0
 800df2e:	bb02      	cbnz	r2, 800df72 <_dtoa_r+0xa62>
 800df30:	4601      	mov	r1, r0
 800df32:	ee18 0a10 	vmov	r0, s16
 800df36:	f000 fb67 	bl	800e608 <__mcmp>
 800df3a:	4602      	mov	r2, r0
 800df3c:	4629      	mov	r1, r5
 800df3e:	4620      	mov	r0, r4
 800df40:	9207      	str	r2, [sp, #28]
 800df42:	f000 f91f 	bl	800e184 <_Bfree>
 800df46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800df4a:	ea43 0102 	orr.w	r1, r3, r2
 800df4e:	9b04      	ldr	r3, [sp, #16]
 800df50:	430b      	orrs	r3, r1
 800df52:	464d      	mov	r5, r9
 800df54:	d10f      	bne.n	800df76 <_dtoa_r+0xa66>
 800df56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df5a:	d02a      	beq.n	800dfb2 <_dtoa_r+0xaa2>
 800df5c:	9b03      	ldr	r3, [sp, #12]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	dd02      	ble.n	800df68 <_dtoa_r+0xa58>
 800df62:	9b02      	ldr	r3, [sp, #8]
 800df64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800df68:	f88b a000 	strb.w	sl, [fp]
 800df6c:	e775      	b.n	800de5a <_dtoa_r+0x94a>
 800df6e:	4638      	mov	r0, r7
 800df70:	e7ba      	b.n	800dee8 <_dtoa_r+0x9d8>
 800df72:	2201      	movs	r2, #1
 800df74:	e7e2      	b.n	800df3c <_dtoa_r+0xa2c>
 800df76:	9b03      	ldr	r3, [sp, #12]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	db04      	blt.n	800df86 <_dtoa_r+0xa76>
 800df7c:	9906      	ldr	r1, [sp, #24]
 800df7e:	430b      	orrs	r3, r1
 800df80:	9904      	ldr	r1, [sp, #16]
 800df82:	430b      	orrs	r3, r1
 800df84:	d122      	bne.n	800dfcc <_dtoa_r+0xabc>
 800df86:	2a00      	cmp	r2, #0
 800df88:	ddee      	ble.n	800df68 <_dtoa_r+0xa58>
 800df8a:	ee18 1a10 	vmov	r1, s16
 800df8e:	2201      	movs	r2, #1
 800df90:	4620      	mov	r0, r4
 800df92:	f000 fac9 	bl	800e528 <__lshift>
 800df96:	4631      	mov	r1, r6
 800df98:	ee08 0a10 	vmov	s16, r0
 800df9c:	f000 fb34 	bl	800e608 <__mcmp>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	dc03      	bgt.n	800dfac <_dtoa_r+0xa9c>
 800dfa4:	d1e0      	bne.n	800df68 <_dtoa_r+0xa58>
 800dfa6:	f01a 0f01 	tst.w	sl, #1
 800dfaa:	d0dd      	beq.n	800df68 <_dtoa_r+0xa58>
 800dfac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dfb0:	d1d7      	bne.n	800df62 <_dtoa_r+0xa52>
 800dfb2:	2339      	movs	r3, #57	; 0x39
 800dfb4:	f88b 3000 	strb.w	r3, [fp]
 800dfb8:	462b      	mov	r3, r5
 800dfba:	461d      	mov	r5, r3
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dfc2:	2a39      	cmp	r2, #57	; 0x39
 800dfc4:	d071      	beq.n	800e0aa <_dtoa_r+0xb9a>
 800dfc6:	3201      	adds	r2, #1
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	e746      	b.n	800de5a <_dtoa_r+0x94a>
 800dfcc:	2a00      	cmp	r2, #0
 800dfce:	dd07      	ble.n	800dfe0 <_dtoa_r+0xad0>
 800dfd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dfd4:	d0ed      	beq.n	800dfb2 <_dtoa_r+0xaa2>
 800dfd6:	f10a 0301 	add.w	r3, sl, #1
 800dfda:	f88b 3000 	strb.w	r3, [fp]
 800dfde:	e73c      	b.n	800de5a <_dtoa_r+0x94a>
 800dfe0:	9b05      	ldr	r3, [sp, #20]
 800dfe2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dfe6:	4599      	cmp	r9, r3
 800dfe8:	d047      	beq.n	800e07a <_dtoa_r+0xb6a>
 800dfea:	ee18 1a10 	vmov	r1, s16
 800dfee:	2300      	movs	r3, #0
 800dff0:	220a      	movs	r2, #10
 800dff2:	4620      	mov	r0, r4
 800dff4:	f000 f8e8 	bl	800e1c8 <__multadd>
 800dff8:	45b8      	cmp	r8, r7
 800dffa:	ee08 0a10 	vmov	s16, r0
 800dffe:	f04f 0300 	mov.w	r3, #0
 800e002:	f04f 020a 	mov.w	r2, #10
 800e006:	4641      	mov	r1, r8
 800e008:	4620      	mov	r0, r4
 800e00a:	d106      	bne.n	800e01a <_dtoa_r+0xb0a>
 800e00c:	f000 f8dc 	bl	800e1c8 <__multadd>
 800e010:	4680      	mov	r8, r0
 800e012:	4607      	mov	r7, r0
 800e014:	f109 0901 	add.w	r9, r9, #1
 800e018:	e772      	b.n	800df00 <_dtoa_r+0x9f0>
 800e01a:	f000 f8d5 	bl	800e1c8 <__multadd>
 800e01e:	4639      	mov	r1, r7
 800e020:	4680      	mov	r8, r0
 800e022:	2300      	movs	r3, #0
 800e024:	220a      	movs	r2, #10
 800e026:	4620      	mov	r0, r4
 800e028:	f000 f8ce 	bl	800e1c8 <__multadd>
 800e02c:	4607      	mov	r7, r0
 800e02e:	e7f1      	b.n	800e014 <_dtoa_r+0xb04>
 800e030:	9b03      	ldr	r3, [sp, #12]
 800e032:	9302      	str	r3, [sp, #8]
 800e034:	9d01      	ldr	r5, [sp, #4]
 800e036:	ee18 0a10 	vmov	r0, s16
 800e03a:	4631      	mov	r1, r6
 800e03c:	f7ff f9dc 	bl	800d3f8 <quorem>
 800e040:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e044:	9b01      	ldr	r3, [sp, #4]
 800e046:	f805 ab01 	strb.w	sl, [r5], #1
 800e04a:	1aea      	subs	r2, r5, r3
 800e04c:	9b02      	ldr	r3, [sp, #8]
 800e04e:	4293      	cmp	r3, r2
 800e050:	dd09      	ble.n	800e066 <_dtoa_r+0xb56>
 800e052:	ee18 1a10 	vmov	r1, s16
 800e056:	2300      	movs	r3, #0
 800e058:	220a      	movs	r2, #10
 800e05a:	4620      	mov	r0, r4
 800e05c:	f000 f8b4 	bl	800e1c8 <__multadd>
 800e060:	ee08 0a10 	vmov	s16, r0
 800e064:	e7e7      	b.n	800e036 <_dtoa_r+0xb26>
 800e066:	9b02      	ldr	r3, [sp, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	bfc8      	it	gt
 800e06c:	461d      	movgt	r5, r3
 800e06e:	9b01      	ldr	r3, [sp, #4]
 800e070:	bfd8      	it	le
 800e072:	2501      	movle	r5, #1
 800e074:	441d      	add	r5, r3
 800e076:	f04f 0800 	mov.w	r8, #0
 800e07a:	ee18 1a10 	vmov	r1, s16
 800e07e:	2201      	movs	r2, #1
 800e080:	4620      	mov	r0, r4
 800e082:	f000 fa51 	bl	800e528 <__lshift>
 800e086:	4631      	mov	r1, r6
 800e088:	ee08 0a10 	vmov	s16, r0
 800e08c:	f000 fabc 	bl	800e608 <__mcmp>
 800e090:	2800      	cmp	r0, #0
 800e092:	dc91      	bgt.n	800dfb8 <_dtoa_r+0xaa8>
 800e094:	d102      	bne.n	800e09c <_dtoa_r+0xb8c>
 800e096:	f01a 0f01 	tst.w	sl, #1
 800e09a:	d18d      	bne.n	800dfb8 <_dtoa_r+0xaa8>
 800e09c:	462b      	mov	r3, r5
 800e09e:	461d      	mov	r5, r3
 800e0a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0a4:	2a30      	cmp	r2, #48	; 0x30
 800e0a6:	d0fa      	beq.n	800e09e <_dtoa_r+0xb8e>
 800e0a8:	e6d7      	b.n	800de5a <_dtoa_r+0x94a>
 800e0aa:	9a01      	ldr	r2, [sp, #4]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d184      	bne.n	800dfba <_dtoa_r+0xaaa>
 800e0b0:	9b00      	ldr	r3, [sp, #0]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	2331      	movs	r3, #49	; 0x31
 800e0b8:	7013      	strb	r3, [r2, #0]
 800e0ba:	e6ce      	b.n	800de5a <_dtoa_r+0x94a>
 800e0bc:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <_dtoa_r+0xbd4>)
 800e0be:	f7ff ba95 	b.w	800d5ec <_dtoa_r+0xdc>
 800e0c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f47f aa6e 	bne.w	800d5a6 <_dtoa_r+0x96>
 800e0ca:	4b07      	ldr	r3, [pc, #28]	; (800e0e8 <_dtoa_r+0xbd8>)
 800e0cc:	f7ff ba8e 	b.w	800d5ec <_dtoa_r+0xdc>
 800e0d0:	9b02      	ldr	r3, [sp, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	dcae      	bgt.n	800e034 <_dtoa_r+0xb24>
 800e0d6:	9b06      	ldr	r3, [sp, #24]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	f73f aea8 	bgt.w	800de2e <_dtoa_r+0x91e>
 800e0de:	e7a9      	b.n	800e034 <_dtoa_r+0xb24>
 800e0e0:	080107a7 	.word	0x080107a7
 800e0e4:	08010704 	.word	0x08010704
 800e0e8:	08010728 	.word	0x08010728

0800e0ec <_localeconv_r>:
 800e0ec:	4800      	ldr	r0, [pc, #0]	; (800e0f0 <_localeconv_r+0x4>)
 800e0ee:	4770      	bx	lr
 800e0f0:	20000288 	.word	0x20000288

0800e0f4 <malloc>:
 800e0f4:	4b02      	ldr	r3, [pc, #8]	; (800e100 <malloc+0xc>)
 800e0f6:	4601      	mov	r1, r0
 800e0f8:	6818      	ldr	r0, [r3, #0]
 800e0fa:	f000 bc09 	b.w	800e910 <_malloc_r>
 800e0fe:	bf00      	nop
 800e100:	20000134 	.word	0x20000134

0800e104 <_Balloc>:
 800e104:	b570      	push	{r4, r5, r6, lr}
 800e106:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e108:	4604      	mov	r4, r0
 800e10a:	460d      	mov	r5, r1
 800e10c:	b976      	cbnz	r6, 800e12c <_Balloc+0x28>
 800e10e:	2010      	movs	r0, #16
 800e110:	f7ff fff0 	bl	800e0f4 <malloc>
 800e114:	4602      	mov	r2, r0
 800e116:	6260      	str	r0, [r4, #36]	; 0x24
 800e118:	b920      	cbnz	r0, 800e124 <_Balloc+0x20>
 800e11a:	4b18      	ldr	r3, [pc, #96]	; (800e17c <_Balloc+0x78>)
 800e11c:	4818      	ldr	r0, [pc, #96]	; (800e180 <_Balloc+0x7c>)
 800e11e:	2166      	movs	r1, #102	; 0x66
 800e120:	f000 fc7a 	bl	800ea18 <__assert_func>
 800e124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e128:	6006      	str	r6, [r0, #0]
 800e12a:	60c6      	str	r6, [r0, #12]
 800e12c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e12e:	68f3      	ldr	r3, [r6, #12]
 800e130:	b183      	cbz	r3, 800e154 <_Balloc+0x50>
 800e132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e13a:	b9b8      	cbnz	r0, 800e16c <_Balloc+0x68>
 800e13c:	2101      	movs	r1, #1
 800e13e:	fa01 f605 	lsl.w	r6, r1, r5
 800e142:	1d72      	adds	r2, r6, #5
 800e144:	0092      	lsls	r2, r2, #2
 800e146:	4620      	mov	r0, r4
 800e148:	f000 fb60 	bl	800e80c <_calloc_r>
 800e14c:	b160      	cbz	r0, 800e168 <_Balloc+0x64>
 800e14e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e152:	e00e      	b.n	800e172 <_Balloc+0x6e>
 800e154:	2221      	movs	r2, #33	; 0x21
 800e156:	2104      	movs	r1, #4
 800e158:	4620      	mov	r0, r4
 800e15a:	f000 fb57 	bl	800e80c <_calloc_r>
 800e15e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e160:	60f0      	str	r0, [r6, #12]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1e4      	bne.n	800e132 <_Balloc+0x2e>
 800e168:	2000      	movs	r0, #0
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	6802      	ldr	r2, [r0, #0]
 800e16e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e172:	2300      	movs	r3, #0
 800e174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e178:	e7f7      	b.n	800e16a <_Balloc+0x66>
 800e17a:	bf00      	nop
 800e17c:	08010735 	.word	0x08010735
 800e180:	080107b8 	.word	0x080107b8

0800e184 <_Bfree>:
 800e184:	b570      	push	{r4, r5, r6, lr}
 800e186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e188:	4605      	mov	r5, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	b976      	cbnz	r6, 800e1ac <_Bfree+0x28>
 800e18e:	2010      	movs	r0, #16
 800e190:	f7ff ffb0 	bl	800e0f4 <malloc>
 800e194:	4602      	mov	r2, r0
 800e196:	6268      	str	r0, [r5, #36]	; 0x24
 800e198:	b920      	cbnz	r0, 800e1a4 <_Bfree+0x20>
 800e19a:	4b09      	ldr	r3, [pc, #36]	; (800e1c0 <_Bfree+0x3c>)
 800e19c:	4809      	ldr	r0, [pc, #36]	; (800e1c4 <_Bfree+0x40>)
 800e19e:	218a      	movs	r1, #138	; 0x8a
 800e1a0:	f000 fc3a 	bl	800ea18 <__assert_func>
 800e1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1a8:	6006      	str	r6, [r0, #0]
 800e1aa:	60c6      	str	r6, [r0, #12]
 800e1ac:	b13c      	cbz	r4, 800e1be <_Bfree+0x3a>
 800e1ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1b0:	6862      	ldr	r2, [r4, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1b8:	6021      	str	r1, [r4, #0]
 800e1ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1be:	bd70      	pop	{r4, r5, r6, pc}
 800e1c0:	08010735 	.word	0x08010735
 800e1c4:	080107b8 	.word	0x080107b8

0800e1c8 <__multadd>:
 800e1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1cc:	690d      	ldr	r5, [r1, #16]
 800e1ce:	4607      	mov	r7, r0
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	461e      	mov	r6, r3
 800e1d4:	f101 0c14 	add.w	ip, r1, #20
 800e1d8:	2000      	movs	r0, #0
 800e1da:	f8dc 3000 	ldr.w	r3, [ip]
 800e1de:	b299      	uxth	r1, r3
 800e1e0:	fb02 6101 	mla	r1, r2, r1, r6
 800e1e4:	0c1e      	lsrs	r6, r3, #16
 800e1e6:	0c0b      	lsrs	r3, r1, #16
 800e1e8:	fb02 3306 	mla	r3, r2, r6, r3
 800e1ec:	b289      	uxth	r1, r1
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1f4:	4285      	cmp	r5, r0
 800e1f6:	f84c 1b04 	str.w	r1, [ip], #4
 800e1fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1fe:	dcec      	bgt.n	800e1da <__multadd+0x12>
 800e200:	b30e      	cbz	r6, 800e246 <__multadd+0x7e>
 800e202:	68a3      	ldr	r3, [r4, #8]
 800e204:	42ab      	cmp	r3, r5
 800e206:	dc19      	bgt.n	800e23c <__multadd+0x74>
 800e208:	6861      	ldr	r1, [r4, #4]
 800e20a:	4638      	mov	r0, r7
 800e20c:	3101      	adds	r1, #1
 800e20e:	f7ff ff79 	bl	800e104 <_Balloc>
 800e212:	4680      	mov	r8, r0
 800e214:	b928      	cbnz	r0, 800e222 <__multadd+0x5a>
 800e216:	4602      	mov	r2, r0
 800e218:	4b0c      	ldr	r3, [pc, #48]	; (800e24c <__multadd+0x84>)
 800e21a:	480d      	ldr	r0, [pc, #52]	; (800e250 <__multadd+0x88>)
 800e21c:	21b5      	movs	r1, #181	; 0xb5
 800e21e:	f000 fbfb 	bl	800ea18 <__assert_func>
 800e222:	6922      	ldr	r2, [r4, #16]
 800e224:	3202      	adds	r2, #2
 800e226:	f104 010c 	add.w	r1, r4, #12
 800e22a:	0092      	lsls	r2, r2, #2
 800e22c:	300c      	adds	r0, #12
 800e22e:	f7fe fc63 	bl	800caf8 <memcpy>
 800e232:	4621      	mov	r1, r4
 800e234:	4638      	mov	r0, r7
 800e236:	f7ff ffa5 	bl	800e184 <_Bfree>
 800e23a:	4644      	mov	r4, r8
 800e23c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e240:	3501      	adds	r5, #1
 800e242:	615e      	str	r6, [r3, #20]
 800e244:	6125      	str	r5, [r4, #16]
 800e246:	4620      	mov	r0, r4
 800e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24c:	080107a7 	.word	0x080107a7
 800e250:	080107b8 	.word	0x080107b8

0800e254 <__hi0bits>:
 800e254:	0c03      	lsrs	r3, r0, #16
 800e256:	041b      	lsls	r3, r3, #16
 800e258:	b9d3      	cbnz	r3, 800e290 <__hi0bits+0x3c>
 800e25a:	0400      	lsls	r0, r0, #16
 800e25c:	2310      	movs	r3, #16
 800e25e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e262:	bf04      	itt	eq
 800e264:	0200      	lsleq	r0, r0, #8
 800e266:	3308      	addeq	r3, #8
 800e268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e26c:	bf04      	itt	eq
 800e26e:	0100      	lsleq	r0, r0, #4
 800e270:	3304      	addeq	r3, #4
 800e272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e276:	bf04      	itt	eq
 800e278:	0080      	lsleq	r0, r0, #2
 800e27a:	3302      	addeq	r3, #2
 800e27c:	2800      	cmp	r0, #0
 800e27e:	db05      	blt.n	800e28c <__hi0bits+0x38>
 800e280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e284:	f103 0301 	add.w	r3, r3, #1
 800e288:	bf08      	it	eq
 800e28a:	2320      	moveq	r3, #32
 800e28c:	4618      	mov	r0, r3
 800e28e:	4770      	bx	lr
 800e290:	2300      	movs	r3, #0
 800e292:	e7e4      	b.n	800e25e <__hi0bits+0xa>

0800e294 <__lo0bits>:
 800e294:	6803      	ldr	r3, [r0, #0]
 800e296:	f013 0207 	ands.w	r2, r3, #7
 800e29a:	4601      	mov	r1, r0
 800e29c:	d00b      	beq.n	800e2b6 <__lo0bits+0x22>
 800e29e:	07da      	lsls	r2, r3, #31
 800e2a0:	d423      	bmi.n	800e2ea <__lo0bits+0x56>
 800e2a2:	0798      	lsls	r0, r3, #30
 800e2a4:	bf49      	itett	mi
 800e2a6:	085b      	lsrmi	r3, r3, #1
 800e2a8:	089b      	lsrpl	r3, r3, #2
 800e2aa:	2001      	movmi	r0, #1
 800e2ac:	600b      	strmi	r3, [r1, #0]
 800e2ae:	bf5c      	itt	pl
 800e2b0:	600b      	strpl	r3, [r1, #0]
 800e2b2:	2002      	movpl	r0, #2
 800e2b4:	4770      	bx	lr
 800e2b6:	b298      	uxth	r0, r3
 800e2b8:	b9a8      	cbnz	r0, 800e2e6 <__lo0bits+0x52>
 800e2ba:	0c1b      	lsrs	r3, r3, #16
 800e2bc:	2010      	movs	r0, #16
 800e2be:	b2da      	uxtb	r2, r3
 800e2c0:	b90a      	cbnz	r2, 800e2c6 <__lo0bits+0x32>
 800e2c2:	3008      	adds	r0, #8
 800e2c4:	0a1b      	lsrs	r3, r3, #8
 800e2c6:	071a      	lsls	r2, r3, #28
 800e2c8:	bf04      	itt	eq
 800e2ca:	091b      	lsreq	r3, r3, #4
 800e2cc:	3004      	addeq	r0, #4
 800e2ce:	079a      	lsls	r2, r3, #30
 800e2d0:	bf04      	itt	eq
 800e2d2:	089b      	lsreq	r3, r3, #2
 800e2d4:	3002      	addeq	r0, #2
 800e2d6:	07da      	lsls	r2, r3, #31
 800e2d8:	d403      	bmi.n	800e2e2 <__lo0bits+0x4e>
 800e2da:	085b      	lsrs	r3, r3, #1
 800e2dc:	f100 0001 	add.w	r0, r0, #1
 800e2e0:	d005      	beq.n	800e2ee <__lo0bits+0x5a>
 800e2e2:	600b      	str	r3, [r1, #0]
 800e2e4:	4770      	bx	lr
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	e7e9      	b.n	800e2be <__lo0bits+0x2a>
 800e2ea:	2000      	movs	r0, #0
 800e2ec:	4770      	bx	lr
 800e2ee:	2020      	movs	r0, #32
 800e2f0:	4770      	bx	lr
	...

0800e2f4 <__i2b>:
 800e2f4:	b510      	push	{r4, lr}
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	2101      	movs	r1, #1
 800e2fa:	f7ff ff03 	bl	800e104 <_Balloc>
 800e2fe:	4602      	mov	r2, r0
 800e300:	b928      	cbnz	r0, 800e30e <__i2b+0x1a>
 800e302:	4b05      	ldr	r3, [pc, #20]	; (800e318 <__i2b+0x24>)
 800e304:	4805      	ldr	r0, [pc, #20]	; (800e31c <__i2b+0x28>)
 800e306:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e30a:	f000 fb85 	bl	800ea18 <__assert_func>
 800e30e:	2301      	movs	r3, #1
 800e310:	6144      	str	r4, [r0, #20]
 800e312:	6103      	str	r3, [r0, #16]
 800e314:	bd10      	pop	{r4, pc}
 800e316:	bf00      	nop
 800e318:	080107a7 	.word	0x080107a7
 800e31c:	080107b8 	.word	0x080107b8

0800e320 <__multiply>:
 800e320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e324:	4691      	mov	r9, r2
 800e326:	690a      	ldr	r2, [r1, #16]
 800e328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	bfb8      	it	lt
 800e330:	460b      	movlt	r3, r1
 800e332:	460c      	mov	r4, r1
 800e334:	bfbc      	itt	lt
 800e336:	464c      	movlt	r4, r9
 800e338:	4699      	movlt	r9, r3
 800e33a:	6927      	ldr	r7, [r4, #16]
 800e33c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e340:	68a3      	ldr	r3, [r4, #8]
 800e342:	6861      	ldr	r1, [r4, #4]
 800e344:	eb07 060a 	add.w	r6, r7, sl
 800e348:	42b3      	cmp	r3, r6
 800e34a:	b085      	sub	sp, #20
 800e34c:	bfb8      	it	lt
 800e34e:	3101      	addlt	r1, #1
 800e350:	f7ff fed8 	bl	800e104 <_Balloc>
 800e354:	b930      	cbnz	r0, 800e364 <__multiply+0x44>
 800e356:	4602      	mov	r2, r0
 800e358:	4b44      	ldr	r3, [pc, #272]	; (800e46c <__multiply+0x14c>)
 800e35a:	4845      	ldr	r0, [pc, #276]	; (800e470 <__multiply+0x150>)
 800e35c:	f240 115d 	movw	r1, #349	; 0x15d
 800e360:	f000 fb5a 	bl	800ea18 <__assert_func>
 800e364:	f100 0514 	add.w	r5, r0, #20
 800e368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e36c:	462b      	mov	r3, r5
 800e36e:	2200      	movs	r2, #0
 800e370:	4543      	cmp	r3, r8
 800e372:	d321      	bcc.n	800e3b8 <__multiply+0x98>
 800e374:	f104 0314 	add.w	r3, r4, #20
 800e378:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e37c:	f109 0314 	add.w	r3, r9, #20
 800e380:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e384:	9202      	str	r2, [sp, #8]
 800e386:	1b3a      	subs	r2, r7, r4
 800e388:	3a15      	subs	r2, #21
 800e38a:	f022 0203 	bic.w	r2, r2, #3
 800e38e:	3204      	adds	r2, #4
 800e390:	f104 0115 	add.w	r1, r4, #21
 800e394:	428f      	cmp	r7, r1
 800e396:	bf38      	it	cc
 800e398:	2204      	movcc	r2, #4
 800e39a:	9201      	str	r2, [sp, #4]
 800e39c:	9a02      	ldr	r2, [sp, #8]
 800e39e:	9303      	str	r3, [sp, #12]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d80c      	bhi.n	800e3be <__multiply+0x9e>
 800e3a4:	2e00      	cmp	r6, #0
 800e3a6:	dd03      	ble.n	800e3b0 <__multiply+0x90>
 800e3a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d05a      	beq.n	800e466 <__multiply+0x146>
 800e3b0:	6106      	str	r6, [r0, #16]
 800e3b2:	b005      	add	sp, #20
 800e3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b8:	f843 2b04 	str.w	r2, [r3], #4
 800e3bc:	e7d8      	b.n	800e370 <__multiply+0x50>
 800e3be:	f8b3 a000 	ldrh.w	sl, [r3]
 800e3c2:	f1ba 0f00 	cmp.w	sl, #0
 800e3c6:	d024      	beq.n	800e412 <__multiply+0xf2>
 800e3c8:	f104 0e14 	add.w	lr, r4, #20
 800e3cc:	46a9      	mov	r9, r5
 800e3ce:	f04f 0c00 	mov.w	ip, #0
 800e3d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e3d6:	f8d9 1000 	ldr.w	r1, [r9]
 800e3da:	fa1f fb82 	uxth.w	fp, r2
 800e3de:	b289      	uxth	r1, r1
 800e3e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e3e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e3e8:	f8d9 2000 	ldr.w	r2, [r9]
 800e3ec:	4461      	add	r1, ip
 800e3ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3fa:	b289      	uxth	r1, r1
 800e3fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e400:	4577      	cmp	r7, lr
 800e402:	f849 1b04 	str.w	r1, [r9], #4
 800e406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e40a:	d8e2      	bhi.n	800e3d2 <__multiply+0xb2>
 800e40c:	9a01      	ldr	r2, [sp, #4]
 800e40e:	f845 c002 	str.w	ip, [r5, r2]
 800e412:	9a03      	ldr	r2, [sp, #12]
 800e414:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e418:	3304      	adds	r3, #4
 800e41a:	f1b9 0f00 	cmp.w	r9, #0
 800e41e:	d020      	beq.n	800e462 <__multiply+0x142>
 800e420:	6829      	ldr	r1, [r5, #0]
 800e422:	f104 0c14 	add.w	ip, r4, #20
 800e426:	46ae      	mov	lr, r5
 800e428:	f04f 0a00 	mov.w	sl, #0
 800e42c:	f8bc b000 	ldrh.w	fp, [ip]
 800e430:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e434:	fb09 220b 	mla	r2, r9, fp, r2
 800e438:	4492      	add	sl, r2
 800e43a:	b289      	uxth	r1, r1
 800e43c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e440:	f84e 1b04 	str.w	r1, [lr], #4
 800e444:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e448:	f8be 1000 	ldrh.w	r1, [lr]
 800e44c:	0c12      	lsrs	r2, r2, #16
 800e44e:	fb09 1102 	mla	r1, r9, r2, r1
 800e452:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e456:	4567      	cmp	r7, ip
 800e458:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e45c:	d8e6      	bhi.n	800e42c <__multiply+0x10c>
 800e45e:	9a01      	ldr	r2, [sp, #4]
 800e460:	50a9      	str	r1, [r5, r2]
 800e462:	3504      	adds	r5, #4
 800e464:	e79a      	b.n	800e39c <__multiply+0x7c>
 800e466:	3e01      	subs	r6, #1
 800e468:	e79c      	b.n	800e3a4 <__multiply+0x84>
 800e46a:	bf00      	nop
 800e46c:	080107a7 	.word	0x080107a7
 800e470:	080107b8 	.word	0x080107b8

0800e474 <__pow5mult>:
 800e474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e478:	4615      	mov	r5, r2
 800e47a:	f012 0203 	ands.w	r2, r2, #3
 800e47e:	4606      	mov	r6, r0
 800e480:	460f      	mov	r7, r1
 800e482:	d007      	beq.n	800e494 <__pow5mult+0x20>
 800e484:	4c25      	ldr	r4, [pc, #148]	; (800e51c <__pow5mult+0xa8>)
 800e486:	3a01      	subs	r2, #1
 800e488:	2300      	movs	r3, #0
 800e48a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e48e:	f7ff fe9b 	bl	800e1c8 <__multadd>
 800e492:	4607      	mov	r7, r0
 800e494:	10ad      	asrs	r5, r5, #2
 800e496:	d03d      	beq.n	800e514 <__pow5mult+0xa0>
 800e498:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e49a:	b97c      	cbnz	r4, 800e4bc <__pow5mult+0x48>
 800e49c:	2010      	movs	r0, #16
 800e49e:	f7ff fe29 	bl	800e0f4 <malloc>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	6270      	str	r0, [r6, #36]	; 0x24
 800e4a6:	b928      	cbnz	r0, 800e4b4 <__pow5mult+0x40>
 800e4a8:	4b1d      	ldr	r3, [pc, #116]	; (800e520 <__pow5mult+0xac>)
 800e4aa:	481e      	ldr	r0, [pc, #120]	; (800e524 <__pow5mult+0xb0>)
 800e4ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e4b0:	f000 fab2 	bl	800ea18 <__assert_func>
 800e4b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4b8:	6004      	str	r4, [r0, #0]
 800e4ba:	60c4      	str	r4, [r0, #12]
 800e4bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e4c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4c4:	b94c      	cbnz	r4, 800e4da <__pow5mult+0x66>
 800e4c6:	f240 2171 	movw	r1, #625	; 0x271
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f7ff ff12 	bl	800e2f4 <__i2b>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	6003      	str	r3, [r0, #0]
 800e4da:	f04f 0900 	mov.w	r9, #0
 800e4de:	07eb      	lsls	r3, r5, #31
 800e4e0:	d50a      	bpl.n	800e4f8 <__pow5mult+0x84>
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	4622      	mov	r2, r4
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f7ff ff1a 	bl	800e320 <__multiply>
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	4680      	mov	r8, r0
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f7ff fe47 	bl	800e184 <_Bfree>
 800e4f6:	4647      	mov	r7, r8
 800e4f8:	106d      	asrs	r5, r5, #1
 800e4fa:	d00b      	beq.n	800e514 <__pow5mult+0xa0>
 800e4fc:	6820      	ldr	r0, [r4, #0]
 800e4fe:	b938      	cbnz	r0, 800e510 <__pow5mult+0x9c>
 800e500:	4622      	mov	r2, r4
 800e502:	4621      	mov	r1, r4
 800e504:	4630      	mov	r0, r6
 800e506:	f7ff ff0b 	bl	800e320 <__multiply>
 800e50a:	6020      	str	r0, [r4, #0]
 800e50c:	f8c0 9000 	str.w	r9, [r0]
 800e510:	4604      	mov	r4, r0
 800e512:	e7e4      	b.n	800e4de <__pow5mult+0x6a>
 800e514:	4638      	mov	r0, r7
 800e516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e51a:	bf00      	nop
 800e51c:	08010908 	.word	0x08010908
 800e520:	08010735 	.word	0x08010735
 800e524:	080107b8 	.word	0x080107b8

0800e528 <__lshift>:
 800e528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e52c:	460c      	mov	r4, r1
 800e52e:	6849      	ldr	r1, [r1, #4]
 800e530:	6923      	ldr	r3, [r4, #16]
 800e532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e536:	68a3      	ldr	r3, [r4, #8]
 800e538:	4607      	mov	r7, r0
 800e53a:	4691      	mov	r9, r2
 800e53c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e540:	f108 0601 	add.w	r6, r8, #1
 800e544:	42b3      	cmp	r3, r6
 800e546:	db0b      	blt.n	800e560 <__lshift+0x38>
 800e548:	4638      	mov	r0, r7
 800e54a:	f7ff fddb 	bl	800e104 <_Balloc>
 800e54e:	4605      	mov	r5, r0
 800e550:	b948      	cbnz	r0, 800e566 <__lshift+0x3e>
 800e552:	4602      	mov	r2, r0
 800e554:	4b2a      	ldr	r3, [pc, #168]	; (800e600 <__lshift+0xd8>)
 800e556:	482b      	ldr	r0, [pc, #172]	; (800e604 <__lshift+0xdc>)
 800e558:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e55c:	f000 fa5c 	bl	800ea18 <__assert_func>
 800e560:	3101      	adds	r1, #1
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	e7ee      	b.n	800e544 <__lshift+0x1c>
 800e566:	2300      	movs	r3, #0
 800e568:	f100 0114 	add.w	r1, r0, #20
 800e56c:	f100 0210 	add.w	r2, r0, #16
 800e570:	4618      	mov	r0, r3
 800e572:	4553      	cmp	r3, sl
 800e574:	db37      	blt.n	800e5e6 <__lshift+0xbe>
 800e576:	6920      	ldr	r0, [r4, #16]
 800e578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e57c:	f104 0314 	add.w	r3, r4, #20
 800e580:	f019 091f 	ands.w	r9, r9, #31
 800e584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e588:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e58c:	d02f      	beq.n	800e5ee <__lshift+0xc6>
 800e58e:	f1c9 0e20 	rsb	lr, r9, #32
 800e592:	468a      	mov	sl, r1
 800e594:	f04f 0c00 	mov.w	ip, #0
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	fa02 f209 	lsl.w	r2, r2, r9
 800e59e:	ea42 020c 	orr.w	r2, r2, ip
 800e5a2:	f84a 2b04 	str.w	r2, [sl], #4
 800e5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5aa:	4298      	cmp	r0, r3
 800e5ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e5b0:	d8f2      	bhi.n	800e598 <__lshift+0x70>
 800e5b2:	1b03      	subs	r3, r0, r4
 800e5b4:	3b15      	subs	r3, #21
 800e5b6:	f023 0303 	bic.w	r3, r3, #3
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	f104 0215 	add.w	r2, r4, #21
 800e5c0:	4290      	cmp	r0, r2
 800e5c2:	bf38      	it	cc
 800e5c4:	2304      	movcc	r3, #4
 800e5c6:	f841 c003 	str.w	ip, [r1, r3]
 800e5ca:	f1bc 0f00 	cmp.w	ip, #0
 800e5ce:	d001      	beq.n	800e5d4 <__lshift+0xac>
 800e5d0:	f108 0602 	add.w	r6, r8, #2
 800e5d4:	3e01      	subs	r6, #1
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	612e      	str	r6, [r5, #16]
 800e5da:	4621      	mov	r1, r4
 800e5dc:	f7ff fdd2 	bl	800e184 <_Bfree>
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	e7c1      	b.n	800e572 <__lshift+0x4a>
 800e5ee:	3904      	subs	r1, #4
 800e5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5f8:	4298      	cmp	r0, r3
 800e5fa:	d8f9      	bhi.n	800e5f0 <__lshift+0xc8>
 800e5fc:	e7ea      	b.n	800e5d4 <__lshift+0xac>
 800e5fe:	bf00      	nop
 800e600:	080107a7 	.word	0x080107a7
 800e604:	080107b8 	.word	0x080107b8

0800e608 <__mcmp>:
 800e608:	b530      	push	{r4, r5, lr}
 800e60a:	6902      	ldr	r2, [r0, #16]
 800e60c:	690c      	ldr	r4, [r1, #16]
 800e60e:	1b12      	subs	r2, r2, r4
 800e610:	d10e      	bne.n	800e630 <__mcmp+0x28>
 800e612:	f100 0314 	add.w	r3, r0, #20
 800e616:	3114      	adds	r1, #20
 800e618:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e61c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e620:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e624:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e628:	42a5      	cmp	r5, r4
 800e62a:	d003      	beq.n	800e634 <__mcmp+0x2c>
 800e62c:	d305      	bcc.n	800e63a <__mcmp+0x32>
 800e62e:	2201      	movs	r2, #1
 800e630:	4610      	mov	r0, r2
 800e632:	bd30      	pop	{r4, r5, pc}
 800e634:	4283      	cmp	r3, r0
 800e636:	d3f3      	bcc.n	800e620 <__mcmp+0x18>
 800e638:	e7fa      	b.n	800e630 <__mcmp+0x28>
 800e63a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e63e:	e7f7      	b.n	800e630 <__mcmp+0x28>

0800e640 <__mdiff>:
 800e640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	460c      	mov	r4, r1
 800e646:	4606      	mov	r6, r0
 800e648:	4611      	mov	r1, r2
 800e64a:	4620      	mov	r0, r4
 800e64c:	4690      	mov	r8, r2
 800e64e:	f7ff ffdb 	bl	800e608 <__mcmp>
 800e652:	1e05      	subs	r5, r0, #0
 800e654:	d110      	bne.n	800e678 <__mdiff+0x38>
 800e656:	4629      	mov	r1, r5
 800e658:	4630      	mov	r0, r6
 800e65a:	f7ff fd53 	bl	800e104 <_Balloc>
 800e65e:	b930      	cbnz	r0, 800e66e <__mdiff+0x2e>
 800e660:	4b3a      	ldr	r3, [pc, #232]	; (800e74c <__mdiff+0x10c>)
 800e662:	4602      	mov	r2, r0
 800e664:	f240 2132 	movw	r1, #562	; 0x232
 800e668:	4839      	ldr	r0, [pc, #228]	; (800e750 <__mdiff+0x110>)
 800e66a:	f000 f9d5 	bl	800ea18 <__assert_func>
 800e66e:	2301      	movs	r3, #1
 800e670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e678:	bfa4      	itt	ge
 800e67a:	4643      	movge	r3, r8
 800e67c:	46a0      	movge	r8, r4
 800e67e:	4630      	mov	r0, r6
 800e680:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e684:	bfa6      	itte	ge
 800e686:	461c      	movge	r4, r3
 800e688:	2500      	movge	r5, #0
 800e68a:	2501      	movlt	r5, #1
 800e68c:	f7ff fd3a 	bl	800e104 <_Balloc>
 800e690:	b920      	cbnz	r0, 800e69c <__mdiff+0x5c>
 800e692:	4b2e      	ldr	r3, [pc, #184]	; (800e74c <__mdiff+0x10c>)
 800e694:	4602      	mov	r2, r0
 800e696:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e69a:	e7e5      	b.n	800e668 <__mdiff+0x28>
 800e69c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e6a0:	6926      	ldr	r6, [r4, #16]
 800e6a2:	60c5      	str	r5, [r0, #12]
 800e6a4:	f104 0914 	add.w	r9, r4, #20
 800e6a8:	f108 0514 	add.w	r5, r8, #20
 800e6ac:	f100 0e14 	add.w	lr, r0, #20
 800e6b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e6b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e6b8:	f108 0210 	add.w	r2, r8, #16
 800e6bc:	46f2      	mov	sl, lr
 800e6be:	2100      	movs	r1, #0
 800e6c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e6c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e6c8:	fa1f f883 	uxth.w	r8, r3
 800e6cc:	fa11 f18b 	uxtah	r1, r1, fp
 800e6d0:	0c1b      	lsrs	r3, r3, #16
 800e6d2:	eba1 0808 	sub.w	r8, r1, r8
 800e6d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e6da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e6de:	fa1f f888 	uxth.w	r8, r8
 800e6e2:	1419      	asrs	r1, r3, #16
 800e6e4:	454e      	cmp	r6, r9
 800e6e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e6ea:	f84a 3b04 	str.w	r3, [sl], #4
 800e6ee:	d8e7      	bhi.n	800e6c0 <__mdiff+0x80>
 800e6f0:	1b33      	subs	r3, r6, r4
 800e6f2:	3b15      	subs	r3, #21
 800e6f4:	f023 0303 	bic.w	r3, r3, #3
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	3415      	adds	r4, #21
 800e6fc:	42a6      	cmp	r6, r4
 800e6fe:	bf38      	it	cc
 800e700:	2304      	movcc	r3, #4
 800e702:	441d      	add	r5, r3
 800e704:	4473      	add	r3, lr
 800e706:	469e      	mov	lr, r3
 800e708:	462e      	mov	r6, r5
 800e70a:	4566      	cmp	r6, ip
 800e70c:	d30e      	bcc.n	800e72c <__mdiff+0xec>
 800e70e:	f10c 0203 	add.w	r2, ip, #3
 800e712:	1b52      	subs	r2, r2, r5
 800e714:	f022 0203 	bic.w	r2, r2, #3
 800e718:	3d03      	subs	r5, #3
 800e71a:	45ac      	cmp	ip, r5
 800e71c:	bf38      	it	cc
 800e71e:	2200      	movcc	r2, #0
 800e720:	441a      	add	r2, r3
 800e722:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e726:	b17b      	cbz	r3, 800e748 <__mdiff+0x108>
 800e728:	6107      	str	r7, [r0, #16]
 800e72a:	e7a3      	b.n	800e674 <__mdiff+0x34>
 800e72c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e730:	fa11 f288 	uxtah	r2, r1, r8
 800e734:	1414      	asrs	r4, r2, #16
 800e736:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e73a:	b292      	uxth	r2, r2
 800e73c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e740:	f84e 2b04 	str.w	r2, [lr], #4
 800e744:	1421      	asrs	r1, r4, #16
 800e746:	e7e0      	b.n	800e70a <__mdiff+0xca>
 800e748:	3f01      	subs	r7, #1
 800e74a:	e7ea      	b.n	800e722 <__mdiff+0xe2>
 800e74c:	080107a7 	.word	0x080107a7
 800e750:	080107b8 	.word	0x080107b8

0800e754 <__d2b>:
 800e754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e758:	4689      	mov	r9, r1
 800e75a:	2101      	movs	r1, #1
 800e75c:	ec57 6b10 	vmov	r6, r7, d0
 800e760:	4690      	mov	r8, r2
 800e762:	f7ff fccf 	bl	800e104 <_Balloc>
 800e766:	4604      	mov	r4, r0
 800e768:	b930      	cbnz	r0, 800e778 <__d2b+0x24>
 800e76a:	4602      	mov	r2, r0
 800e76c:	4b25      	ldr	r3, [pc, #148]	; (800e804 <__d2b+0xb0>)
 800e76e:	4826      	ldr	r0, [pc, #152]	; (800e808 <__d2b+0xb4>)
 800e770:	f240 310a 	movw	r1, #778	; 0x30a
 800e774:	f000 f950 	bl	800ea18 <__assert_func>
 800e778:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e77c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e780:	bb35      	cbnz	r5, 800e7d0 <__d2b+0x7c>
 800e782:	2e00      	cmp	r6, #0
 800e784:	9301      	str	r3, [sp, #4]
 800e786:	d028      	beq.n	800e7da <__d2b+0x86>
 800e788:	4668      	mov	r0, sp
 800e78a:	9600      	str	r6, [sp, #0]
 800e78c:	f7ff fd82 	bl	800e294 <__lo0bits>
 800e790:	9900      	ldr	r1, [sp, #0]
 800e792:	b300      	cbz	r0, 800e7d6 <__d2b+0x82>
 800e794:	9a01      	ldr	r2, [sp, #4]
 800e796:	f1c0 0320 	rsb	r3, r0, #32
 800e79a:	fa02 f303 	lsl.w	r3, r2, r3
 800e79e:	430b      	orrs	r3, r1
 800e7a0:	40c2      	lsrs	r2, r0
 800e7a2:	6163      	str	r3, [r4, #20]
 800e7a4:	9201      	str	r2, [sp, #4]
 800e7a6:	9b01      	ldr	r3, [sp, #4]
 800e7a8:	61a3      	str	r3, [r4, #24]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bf14      	ite	ne
 800e7ae:	2202      	movne	r2, #2
 800e7b0:	2201      	moveq	r2, #1
 800e7b2:	6122      	str	r2, [r4, #16]
 800e7b4:	b1d5      	cbz	r5, 800e7ec <__d2b+0x98>
 800e7b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e7ba:	4405      	add	r5, r0
 800e7bc:	f8c9 5000 	str.w	r5, [r9]
 800e7c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e7c4:	f8c8 0000 	str.w	r0, [r8]
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	b003      	add	sp, #12
 800e7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7d4:	e7d5      	b.n	800e782 <__d2b+0x2e>
 800e7d6:	6161      	str	r1, [r4, #20]
 800e7d8:	e7e5      	b.n	800e7a6 <__d2b+0x52>
 800e7da:	a801      	add	r0, sp, #4
 800e7dc:	f7ff fd5a 	bl	800e294 <__lo0bits>
 800e7e0:	9b01      	ldr	r3, [sp, #4]
 800e7e2:	6163      	str	r3, [r4, #20]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	6122      	str	r2, [r4, #16]
 800e7e8:	3020      	adds	r0, #32
 800e7ea:	e7e3      	b.n	800e7b4 <__d2b+0x60>
 800e7ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7f4:	f8c9 0000 	str.w	r0, [r9]
 800e7f8:	6918      	ldr	r0, [r3, #16]
 800e7fa:	f7ff fd2b 	bl	800e254 <__hi0bits>
 800e7fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e802:	e7df      	b.n	800e7c4 <__d2b+0x70>
 800e804:	080107a7 	.word	0x080107a7
 800e808:	080107b8 	.word	0x080107b8

0800e80c <_calloc_r>:
 800e80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e80e:	fba1 2402 	umull	r2, r4, r1, r2
 800e812:	b94c      	cbnz	r4, 800e828 <_calloc_r+0x1c>
 800e814:	4611      	mov	r1, r2
 800e816:	9201      	str	r2, [sp, #4]
 800e818:	f000 f87a 	bl	800e910 <_malloc_r>
 800e81c:	9a01      	ldr	r2, [sp, #4]
 800e81e:	4605      	mov	r5, r0
 800e820:	b930      	cbnz	r0, 800e830 <_calloc_r+0x24>
 800e822:	4628      	mov	r0, r5
 800e824:	b003      	add	sp, #12
 800e826:	bd30      	pop	{r4, r5, pc}
 800e828:	220c      	movs	r2, #12
 800e82a:	6002      	str	r2, [r0, #0]
 800e82c:	2500      	movs	r5, #0
 800e82e:	e7f8      	b.n	800e822 <_calloc_r+0x16>
 800e830:	4621      	mov	r1, r4
 800e832:	f7fe f96f 	bl	800cb14 <memset>
 800e836:	e7f4      	b.n	800e822 <_calloc_r+0x16>

0800e838 <_free_r>:
 800e838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e83a:	2900      	cmp	r1, #0
 800e83c:	d044      	beq.n	800e8c8 <_free_r+0x90>
 800e83e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e842:	9001      	str	r0, [sp, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	f1a1 0404 	sub.w	r4, r1, #4
 800e84a:	bfb8      	it	lt
 800e84c:	18e4      	addlt	r4, r4, r3
 800e84e:	f000 f925 	bl	800ea9c <__malloc_lock>
 800e852:	4a1e      	ldr	r2, [pc, #120]	; (800e8cc <_free_r+0x94>)
 800e854:	9801      	ldr	r0, [sp, #4]
 800e856:	6813      	ldr	r3, [r2, #0]
 800e858:	b933      	cbnz	r3, 800e868 <_free_r+0x30>
 800e85a:	6063      	str	r3, [r4, #4]
 800e85c:	6014      	str	r4, [r2, #0]
 800e85e:	b003      	add	sp, #12
 800e860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e864:	f000 b920 	b.w	800eaa8 <__malloc_unlock>
 800e868:	42a3      	cmp	r3, r4
 800e86a:	d908      	bls.n	800e87e <_free_r+0x46>
 800e86c:	6825      	ldr	r5, [r4, #0]
 800e86e:	1961      	adds	r1, r4, r5
 800e870:	428b      	cmp	r3, r1
 800e872:	bf01      	itttt	eq
 800e874:	6819      	ldreq	r1, [r3, #0]
 800e876:	685b      	ldreq	r3, [r3, #4]
 800e878:	1949      	addeq	r1, r1, r5
 800e87a:	6021      	streq	r1, [r4, #0]
 800e87c:	e7ed      	b.n	800e85a <_free_r+0x22>
 800e87e:	461a      	mov	r2, r3
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	b10b      	cbz	r3, 800e888 <_free_r+0x50>
 800e884:	42a3      	cmp	r3, r4
 800e886:	d9fa      	bls.n	800e87e <_free_r+0x46>
 800e888:	6811      	ldr	r1, [r2, #0]
 800e88a:	1855      	adds	r5, r2, r1
 800e88c:	42a5      	cmp	r5, r4
 800e88e:	d10b      	bne.n	800e8a8 <_free_r+0x70>
 800e890:	6824      	ldr	r4, [r4, #0]
 800e892:	4421      	add	r1, r4
 800e894:	1854      	adds	r4, r2, r1
 800e896:	42a3      	cmp	r3, r4
 800e898:	6011      	str	r1, [r2, #0]
 800e89a:	d1e0      	bne.n	800e85e <_free_r+0x26>
 800e89c:	681c      	ldr	r4, [r3, #0]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	6053      	str	r3, [r2, #4]
 800e8a2:	4421      	add	r1, r4
 800e8a4:	6011      	str	r1, [r2, #0]
 800e8a6:	e7da      	b.n	800e85e <_free_r+0x26>
 800e8a8:	d902      	bls.n	800e8b0 <_free_r+0x78>
 800e8aa:	230c      	movs	r3, #12
 800e8ac:	6003      	str	r3, [r0, #0]
 800e8ae:	e7d6      	b.n	800e85e <_free_r+0x26>
 800e8b0:	6825      	ldr	r5, [r4, #0]
 800e8b2:	1961      	adds	r1, r4, r5
 800e8b4:	428b      	cmp	r3, r1
 800e8b6:	bf04      	itt	eq
 800e8b8:	6819      	ldreq	r1, [r3, #0]
 800e8ba:	685b      	ldreq	r3, [r3, #4]
 800e8bc:	6063      	str	r3, [r4, #4]
 800e8be:	bf04      	itt	eq
 800e8c0:	1949      	addeq	r1, r1, r5
 800e8c2:	6021      	streq	r1, [r4, #0]
 800e8c4:	6054      	str	r4, [r2, #4]
 800e8c6:	e7ca      	b.n	800e85e <_free_r+0x26>
 800e8c8:	b003      	add	sp, #12
 800e8ca:	bd30      	pop	{r4, r5, pc}
 800e8cc:	200022e8 	.word	0x200022e8

0800e8d0 <sbrk_aligned>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	4e0e      	ldr	r6, [pc, #56]	; (800e90c <sbrk_aligned+0x3c>)
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	6831      	ldr	r1, [r6, #0]
 800e8d8:	4605      	mov	r5, r0
 800e8da:	b911      	cbnz	r1, 800e8e2 <sbrk_aligned+0x12>
 800e8dc:	f000 f88c 	bl	800e9f8 <_sbrk_r>
 800e8e0:	6030      	str	r0, [r6, #0]
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	f000 f887 	bl	800e9f8 <_sbrk_r>
 800e8ea:	1c43      	adds	r3, r0, #1
 800e8ec:	d00a      	beq.n	800e904 <sbrk_aligned+0x34>
 800e8ee:	1cc4      	adds	r4, r0, #3
 800e8f0:	f024 0403 	bic.w	r4, r4, #3
 800e8f4:	42a0      	cmp	r0, r4
 800e8f6:	d007      	beq.n	800e908 <sbrk_aligned+0x38>
 800e8f8:	1a21      	subs	r1, r4, r0
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f000 f87c 	bl	800e9f8 <_sbrk_r>
 800e900:	3001      	adds	r0, #1
 800e902:	d101      	bne.n	800e908 <sbrk_aligned+0x38>
 800e904:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e908:	4620      	mov	r0, r4
 800e90a:	bd70      	pop	{r4, r5, r6, pc}
 800e90c:	200022ec 	.word	0x200022ec

0800e910 <_malloc_r>:
 800e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e914:	1ccd      	adds	r5, r1, #3
 800e916:	f025 0503 	bic.w	r5, r5, #3
 800e91a:	3508      	adds	r5, #8
 800e91c:	2d0c      	cmp	r5, #12
 800e91e:	bf38      	it	cc
 800e920:	250c      	movcc	r5, #12
 800e922:	2d00      	cmp	r5, #0
 800e924:	4607      	mov	r7, r0
 800e926:	db01      	blt.n	800e92c <_malloc_r+0x1c>
 800e928:	42a9      	cmp	r1, r5
 800e92a:	d905      	bls.n	800e938 <_malloc_r+0x28>
 800e92c:	230c      	movs	r3, #12
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	2600      	movs	r6, #0
 800e932:	4630      	mov	r0, r6
 800e934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e938:	4e2e      	ldr	r6, [pc, #184]	; (800e9f4 <_malloc_r+0xe4>)
 800e93a:	f000 f8af 	bl	800ea9c <__malloc_lock>
 800e93e:	6833      	ldr	r3, [r6, #0]
 800e940:	461c      	mov	r4, r3
 800e942:	bb34      	cbnz	r4, 800e992 <_malloc_r+0x82>
 800e944:	4629      	mov	r1, r5
 800e946:	4638      	mov	r0, r7
 800e948:	f7ff ffc2 	bl	800e8d0 <sbrk_aligned>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	4604      	mov	r4, r0
 800e950:	d14d      	bne.n	800e9ee <_malloc_r+0xde>
 800e952:	6834      	ldr	r4, [r6, #0]
 800e954:	4626      	mov	r6, r4
 800e956:	2e00      	cmp	r6, #0
 800e958:	d140      	bne.n	800e9dc <_malloc_r+0xcc>
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	4631      	mov	r1, r6
 800e95e:	4638      	mov	r0, r7
 800e960:	eb04 0803 	add.w	r8, r4, r3
 800e964:	f000 f848 	bl	800e9f8 <_sbrk_r>
 800e968:	4580      	cmp	r8, r0
 800e96a:	d13a      	bne.n	800e9e2 <_malloc_r+0xd2>
 800e96c:	6821      	ldr	r1, [r4, #0]
 800e96e:	3503      	adds	r5, #3
 800e970:	1a6d      	subs	r5, r5, r1
 800e972:	f025 0503 	bic.w	r5, r5, #3
 800e976:	3508      	adds	r5, #8
 800e978:	2d0c      	cmp	r5, #12
 800e97a:	bf38      	it	cc
 800e97c:	250c      	movcc	r5, #12
 800e97e:	4629      	mov	r1, r5
 800e980:	4638      	mov	r0, r7
 800e982:	f7ff ffa5 	bl	800e8d0 <sbrk_aligned>
 800e986:	3001      	adds	r0, #1
 800e988:	d02b      	beq.n	800e9e2 <_malloc_r+0xd2>
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	442b      	add	r3, r5
 800e98e:	6023      	str	r3, [r4, #0]
 800e990:	e00e      	b.n	800e9b0 <_malloc_r+0xa0>
 800e992:	6822      	ldr	r2, [r4, #0]
 800e994:	1b52      	subs	r2, r2, r5
 800e996:	d41e      	bmi.n	800e9d6 <_malloc_r+0xc6>
 800e998:	2a0b      	cmp	r2, #11
 800e99a:	d916      	bls.n	800e9ca <_malloc_r+0xba>
 800e99c:	1961      	adds	r1, r4, r5
 800e99e:	42a3      	cmp	r3, r4
 800e9a0:	6025      	str	r5, [r4, #0]
 800e9a2:	bf18      	it	ne
 800e9a4:	6059      	strne	r1, [r3, #4]
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	bf08      	it	eq
 800e9aa:	6031      	streq	r1, [r6, #0]
 800e9ac:	5162      	str	r2, [r4, r5]
 800e9ae:	604b      	str	r3, [r1, #4]
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f104 060b 	add.w	r6, r4, #11
 800e9b6:	f000 f877 	bl	800eaa8 <__malloc_unlock>
 800e9ba:	f026 0607 	bic.w	r6, r6, #7
 800e9be:	1d23      	adds	r3, r4, #4
 800e9c0:	1af2      	subs	r2, r6, r3
 800e9c2:	d0b6      	beq.n	800e932 <_malloc_r+0x22>
 800e9c4:	1b9b      	subs	r3, r3, r6
 800e9c6:	50a3      	str	r3, [r4, r2]
 800e9c8:	e7b3      	b.n	800e932 <_malloc_r+0x22>
 800e9ca:	6862      	ldr	r2, [r4, #4]
 800e9cc:	42a3      	cmp	r3, r4
 800e9ce:	bf0c      	ite	eq
 800e9d0:	6032      	streq	r2, [r6, #0]
 800e9d2:	605a      	strne	r2, [r3, #4]
 800e9d4:	e7ec      	b.n	800e9b0 <_malloc_r+0xa0>
 800e9d6:	4623      	mov	r3, r4
 800e9d8:	6864      	ldr	r4, [r4, #4]
 800e9da:	e7b2      	b.n	800e942 <_malloc_r+0x32>
 800e9dc:	4634      	mov	r4, r6
 800e9de:	6876      	ldr	r6, [r6, #4]
 800e9e0:	e7b9      	b.n	800e956 <_malloc_r+0x46>
 800e9e2:	230c      	movs	r3, #12
 800e9e4:	603b      	str	r3, [r7, #0]
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	f000 f85e 	bl	800eaa8 <__malloc_unlock>
 800e9ec:	e7a1      	b.n	800e932 <_malloc_r+0x22>
 800e9ee:	6025      	str	r5, [r4, #0]
 800e9f0:	e7de      	b.n	800e9b0 <_malloc_r+0xa0>
 800e9f2:	bf00      	nop
 800e9f4:	200022e8 	.word	0x200022e8

0800e9f8 <_sbrk_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4d06      	ldr	r5, [pc, #24]	; (800ea14 <_sbrk_r+0x1c>)
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	4604      	mov	r4, r0
 800ea00:	4608      	mov	r0, r1
 800ea02:	602b      	str	r3, [r5, #0]
 800ea04:	f7f4 fcb0 	bl	8003368 <_sbrk>
 800ea08:	1c43      	adds	r3, r0, #1
 800ea0a:	d102      	bne.n	800ea12 <_sbrk_r+0x1a>
 800ea0c:	682b      	ldr	r3, [r5, #0]
 800ea0e:	b103      	cbz	r3, 800ea12 <_sbrk_r+0x1a>
 800ea10:	6023      	str	r3, [r4, #0]
 800ea12:	bd38      	pop	{r3, r4, r5, pc}
 800ea14:	200022f0 	.word	0x200022f0

0800ea18 <__assert_func>:
 800ea18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea1a:	4614      	mov	r4, r2
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	4b09      	ldr	r3, [pc, #36]	; (800ea44 <__assert_func+0x2c>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4605      	mov	r5, r0
 800ea24:	68d8      	ldr	r0, [r3, #12]
 800ea26:	b14c      	cbz	r4, 800ea3c <__assert_func+0x24>
 800ea28:	4b07      	ldr	r3, [pc, #28]	; (800ea48 <__assert_func+0x30>)
 800ea2a:	9100      	str	r1, [sp, #0]
 800ea2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea30:	4906      	ldr	r1, [pc, #24]	; (800ea4c <__assert_func+0x34>)
 800ea32:	462b      	mov	r3, r5
 800ea34:	f000 f80e 	bl	800ea54 <fiprintf>
 800ea38:	f000 fa64 	bl	800ef04 <abort>
 800ea3c:	4b04      	ldr	r3, [pc, #16]	; (800ea50 <__assert_func+0x38>)
 800ea3e:	461c      	mov	r4, r3
 800ea40:	e7f3      	b.n	800ea2a <__assert_func+0x12>
 800ea42:	bf00      	nop
 800ea44:	20000134 	.word	0x20000134
 800ea48:	08010914 	.word	0x08010914
 800ea4c:	08010921 	.word	0x08010921
 800ea50:	0801094f 	.word	0x0801094f

0800ea54 <fiprintf>:
 800ea54:	b40e      	push	{r1, r2, r3}
 800ea56:	b503      	push	{r0, r1, lr}
 800ea58:	4601      	mov	r1, r0
 800ea5a:	ab03      	add	r3, sp, #12
 800ea5c:	4805      	ldr	r0, [pc, #20]	; (800ea74 <fiprintf+0x20>)
 800ea5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea62:	6800      	ldr	r0, [r0, #0]
 800ea64:	9301      	str	r3, [sp, #4]
 800ea66:	f000 f84f 	bl	800eb08 <_vfiprintf_r>
 800ea6a:	b002      	add	sp, #8
 800ea6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea70:	b003      	add	sp, #12
 800ea72:	4770      	bx	lr
 800ea74:	20000134 	.word	0x20000134

0800ea78 <__ascii_mbtowc>:
 800ea78:	b082      	sub	sp, #8
 800ea7a:	b901      	cbnz	r1, 800ea7e <__ascii_mbtowc+0x6>
 800ea7c:	a901      	add	r1, sp, #4
 800ea7e:	b142      	cbz	r2, 800ea92 <__ascii_mbtowc+0x1a>
 800ea80:	b14b      	cbz	r3, 800ea96 <__ascii_mbtowc+0x1e>
 800ea82:	7813      	ldrb	r3, [r2, #0]
 800ea84:	600b      	str	r3, [r1, #0]
 800ea86:	7812      	ldrb	r2, [r2, #0]
 800ea88:	1e10      	subs	r0, r2, #0
 800ea8a:	bf18      	it	ne
 800ea8c:	2001      	movne	r0, #1
 800ea8e:	b002      	add	sp, #8
 800ea90:	4770      	bx	lr
 800ea92:	4610      	mov	r0, r2
 800ea94:	e7fb      	b.n	800ea8e <__ascii_mbtowc+0x16>
 800ea96:	f06f 0001 	mvn.w	r0, #1
 800ea9a:	e7f8      	b.n	800ea8e <__ascii_mbtowc+0x16>

0800ea9c <__malloc_lock>:
 800ea9c:	4801      	ldr	r0, [pc, #4]	; (800eaa4 <__malloc_lock+0x8>)
 800ea9e:	f000 bbf1 	b.w	800f284 <__retarget_lock_acquire_recursive>
 800eaa2:	bf00      	nop
 800eaa4:	200022f4 	.word	0x200022f4

0800eaa8 <__malloc_unlock>:
 800eaa8:	4801      	ldr	r0, [pc, #4]	; (800eab0 <__malloc_unlock+0x8>)
 800eaaa:	f000 bbec 	b.w	800f286 <__retarget_lock_release_recursive>
 800eaae:	bf00      	nop
 800eab0:	200022f4 	.word	0x200022f4

0800eab4 <__sfputc_r>:
 800eab4:	6893      	ldr	r3, [r2, #8]
 800eab6:	3b01      	subs	r3, #1
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	b410      	push	{r4}
 800eabc:	6093      	str	r3, [r2, #8]
 800eabe:	da08      	bge.n	800ead2 <__sfputc_r+0x1e>
 800eac0:	6994      	ldr	r4, [r2, #24]
 800eac2:	42a3      	cmp	r3, r4
 800eac4:	db01      	blt.n	800eaca <__sfputc_r+0x16>
 800eac6:	290a      	cmp	r1, #10
 800eac8:	d103      	bne.n	800ead2 <__sfputc_r+0x1e>
 800eaca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eace:	f000 b94b 	b.w	800ed68 <__swbuf_r>
 800ead2:	6813      	ldr	r3, [r2, #0]
 800ead4:	1c58      	adds	r0, r3, #1
 800ead6:	6010      	str	r0, [r2, #0]
 800ead8:	7019      	strb	r1, [r3, #0]
 800eada:	4608      	mov	r0, r1
 800eadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <__sfputs_r>:
 800eae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae4:	4606      	mov	r6, r0
 800eae6:	460f      	mov	r7, r1
 800eae8:	4614      	mov	r4, r2
 800eaea:	18d5      	adds	r5, r2, r3
 800eaec:	42ac      	cmp	r4, r5
 800eaee:	d101      	bne.n	800eaf4 <__sfputs_r+0x12>
 800eaf0:	2000      	movs	r0, #0
 800eaf2:	e007      	b.n	800eb04 <__sfputs_r+0x22>
 800eaf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaf8:	463a      	mov	r2, r7
 800eafa:	4630      	mov	r0, r6
 800eafc:	f7ff ffda 	bl	800eab4 <__sfputc_r>
 800eb00:	1c43      	adds	r3, r0, #1
 800eb02:	d1f3      	bne.n	800eaec <__sfputs_r+0xa>
 800eb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb08 <_vfiprintf_r>:
 800eb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb0c:	460d      	mov	r5, r1
 800eb0e:	b09d      	sub	sp, #116	; 0x74
 800eb10:	4614      	mov	r4, r2
 800eb12:	4698      	mov	r8, r3
 800eb14:	4606      	mov	r6, r0
 800eb16:	b118      	cbz	r0, 800eb20 <_vfiprintf_r+0x18>
 800eb18:	6983      	ldr	r3, [r0, #24]
 800eb1a:	b90b      	cbnz	r3, 800eb20 <_vfiprintf_r+0x18>
 800eb1c:	f000 fb14 	bl	800f148 <__sinit>
 800eb20:	4b89      	ldr	r3, [pc, #548]	; (800ed48 <_vfiprintf_r+0x240>)
 800eb22:	429d      	cmp	r5, r3
 800eb24:	d11b      	bne.n	800eb5e <_vfiprintf_r+0x56>
 800eb26:	6875      	ldr	r5, [r6, #4]
 800eb28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb2a:	07d9      	lsls	r1, r3, #31
 800eb2c:	d405      	bmi.n	800eb3a <_vfiprintf_r+0x32>
 800eb2e:	89ab      	ldrh	r3, [r5, #12]
 800eb30:	059a      	lsls	r2, r3, #22
 800eb32:	d402      	bmi.n	800eb3a <_vfiprintf_r+0x32>
 800eb34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb36:	f000 fba5 	bl	800f284 <__retarget_lock_acquire_recursive>
 800eb3a:	89ab      	ldrh	r3, [r5, #12]
 800eb3c:	071b      	lsls	r3, r3, #28
 800eb3e:	d501      	bpl.n	800eb44 <_vfiprintf_r+0x3c>
 800eb40:	692b      	ldr	r3, [r5, #16]
 800eb42:	b9eb      	cbnz	r3, 800eb80 <_vfiprintf_r+0x78>
 800eb44:	4629      	mov	r1, r5
 800eb46:	4630      	mov	r0, r6
 800eb48:	f000 f96e 	bl	800ee28 <__swsetup_r>
 800eb4c:	b1c0      	cbz	r0, 800eb80 <_vfiprintf_r+0x78>
 800eb4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb50:	07dc      	lsls	r4, r3, #31
 800eb52:	d50e      	bpl.n	800eb72 <_vfiprintf_r+0x6a>
 800eb54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb58:	b01d      	add	sp, #116	; 0x74
 800eb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5e:	4b7b      	ldr	r3, [pc, #492]	; (800ed4c <_vfiprintf_r+0x244>)
 800eb60:	429d      	cmp	r5, r3
 800eb62:	d101      	bne.n	800eb68 <_vfiprintf_r+0x60>
 800eb64:	68b5      	ldr	r5, [r6, #8]
 800eb66:	e7df      	b.n	800eb28 <_vfiprintf_r+0x20>
 800eb68:	4b79      	ldr	r3, [pc, #484]	; (800ed50 <_vfiprintf_r+0x248>)
 800eb6a:	429d      	cmp	r5, r3
 800eb6c:	bf08      	it	eq
 800eb6e:	68f5      	ldreq	r5, [r6, #12]
 800eb70:	e7da      	b.n	800eb28 <_vfiprintf_r+0x20>
 800eb72:	89ab      	ldrh	r3, [r5, #12]
 800eb74:	0598      	lsls	r0, r3, #22
 800eb76:	d4ed      	bmi.n	800eb54 <_vfiprintf_r+0x4c>
 800eb78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb7a:	f000 fb84 	bl	800f286 <__retarget_lock_release_recursive>
 800eb7e:	e7e9      	b.n	800eb54 <_vfiprintf_r+0x4c>
 800eb80:	2300      	movs	r3, #0
 800eb82:	9309      	str	r3, [sp, #36]	; 0x24
 800eb84:	2320      	movs	r3, #32
 800eb86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb8e:	2330      	movs	r3, #48	; 0x30
 800eb90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed54 <_vfiprintf_r+0x24c>
 800eb94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb98:	f04f 0901 	mov.w	r9, #1
 800eb9c:	4623      	mov	r3, r4
 800eb9e:	469a      	mov	sl, r3
 800eba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eba4:	b10a      	cbz	r2, 800ebaa <_vfiprintf_r+0xa2>
 800eba6:	2a25      	cmp	r2, #37	; 0x25
 800eba8:	d1f9      	bne.n	800eb9e <_vfiprintf_r+0x96>
 800ebaa:	ebba 0b04 	subs.w	fp, sl, r4
 800ebae:	d00b      	beq.n	800ebc8 <_vfiprintf_r+0xc0>
 800ebb0:	465b      	mov	r3, fp
 800ebb2:	4622      	mov	r2, r4
 800ebb4:	4629      	mov	r1, r5
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	f7ff ff93 	bl	800eae2 <__sfputs_r>
 800ebbc:	3001      	adds	r0, #1
 800ebbe:	f000 80aa 	beq.w	800ed16 <_vfiprintf_r+0x20e>
 800ebc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebc4:	445a      	add	r2, fp
 800ebc6:	9209      	str	r2, [sp, #36]	; 0x24
 800ebc8:	f89a 3000 	ldrb.w	r3, [sl]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f000 80a2 	beq.w	800ed16 <_vfiprintf_r+0x20e>
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebdc:	f10a 0a01 	add.w	sl, sl, #1
 800ebe0:	9304      	str	r3, [sp, #16]
 800ebe2:	9307      	str	r3, [sp, #28]
 800ebe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebe8:	931a      	str	r3, [sp, #104]	; 0x68
 800ebea:	4654      	mov	r4, sl
 800ebec:	2205      	movs	r2, #5
 800ebee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebf2:	4858      	ldr	r0, [pc, #352]	; (800ed54 <_vfiprintf_r+0x24c>)
 800ebf4:	f7f1 fb14 	bl	8000220 <memchr>
 800ebf8:	9a04      	ldr	r2, [sp, #16]
 800ebfa:	b9d8      	cbnz	r0, 800ec34 <_vfiprintf_r+0x12c>
 800ebfc:	06d1      	lsls	r1, r2, #27
 800ebfe:	bf44      	itt	mi
 800ec00:	2320      	movmi	r3, #32
 800ec02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec06:	0713      	lsls	r3, r2, #28
 800ec08:	bf44      	itt	mi
 800ec0a:	232b      	movmi	r3, #43	; 0x2b
 800ec0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec10:	f89a 3000 	ldrb.w	r3, [sl]
 800ec14:	2b2a      	cmp	r3, #42	; 0x2a
 800ec16:	d015      	beq.n	800ec44 <_vfiprintf_r+0x13c>
 800ec18:	9a07      	ldr	r2, [sp, #28]
 800ec1a:	4654      	mov	r4, sl
 800ec1c:	2000      	movs	r0, #0
 800ec1e:	f04f 0c0a 	mov.w	ip, #10
 800ec22:	4621      	mov	r1, r4
 800ec24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec28:	3b30      	subs	r3, #48	; 0x30
 800ec2a:	2b09      	cmp	r3, #9
 800ec2c:	d94e      	bls.n	800eccc <_vfiprintf_r+0x1c4>
 800ec2e:	b1b0      	cbz	r0, 800ec5e <_vfiprintf_r+0x156>
 800ec30:	9207      	str	r2, [sp, #28]
 800ec32:	e014      	b.n	800ec5e <_vfiprintf_r+0x156>
 800ec34:	eba0 0308 	sub.w	r3, r0, r8
 800ec38:	fa09 f303 	lsl.w	r3, r9, r3
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	9304      	str	r3, [sp, #16]
 800ec40:	46a2      	mov	sl, r4
 800ec42:	e7d2      	b.n	800ebea <_vfiprintf_r+0xe2>
 800ec44:	9b03      	ldr	r3, [sp, #12]
 800ec46:	1d19      	adds	r1, r3, #4
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	9103      	str	r1, [sp, #12]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	bfbb      	ittet	lt
 800ec50:	425b      	neglt	r3, r3
 800ec52:	f042 0202 	orrlt.w	r2, r2, #2
 800ec56:	9307      	strge	r3, [sp, #28]
 800ec58:	9307      	strlt	r3, [sp, #28]
 800ec5a:	bfb8      	it	lt
 800ec5c:	9204      	strlt	r2, [sp, #16]
 800ec5e:	7823      	ldrb	r3, [r4, #0]
 800ec60:	2b2e      	cmp	r3, #46	; 0x2e
 800ec62:	d10c      	bne.n	800ec7e <_vfiprintf_r+0x176>
 800ec64:	7863      	ldrb	r3, [r4, #1]
 800ec66:	2b2a      	cmp	r3, #42	; 0x2a
 800ec68:	d135      	bne.n	800ecd6 <_vfiprintf_r+0x1ce>
 800ec6a:	9b03      	ldr	r3, [sp, #12]
 800ec6c:	1d1a      	adds	r2, r3, #4
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	9203      	str	r2, [sp, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	bfb8      	it	lt
 800ec76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec7a:	3402      	adds	r4, #2
 800ec7c:	9305      	str	r3, [sp, #20]
 800ec7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed64 <_vfiprintf_r+0x25c>
 800ec82:	7821      	ldrb	r1, [r4, #0]
 800ec84:	2203      	movs	r2, #3
 800ec86:	4650      	mov	r0, sl
 800ec88:	f7f1 faca 	bl	8000220 <memchr>
 800ec8c:	b140      	cbz	r0, 800eca0 <_vfiprintf_r+0x198>
 800ec8e:	2340      	movs	r3, #64	; 0x40
 800ec90:	eba0 000a 	sub.w	r0, r0, sl
 800ec94:	fa03 f000 	lsl.w	r0, r3, r0
 800ec98:	9b04      	ldr	r3, [sp, #16]
 800ec9a:	4303      	orrs	r3, r0
 800ec9c:	3401      	adds	r4, #1
 800ec9e:	9304      	str	r3, [sp, #16]
 800eca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca4:	482c      	ldr	r0, [pc, #176]	; (800ed58 <_vfiprintf_r+0x250>)
 800eca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecaa:	2206      	movs	r2, #6
 800ecac:	f7f1 fab8 	bl	8000220 <memchr>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d03f      	beq.n	800ed34 <_vfiprintf_r+0x22c>
 800ecb4:	4b29      	ldr	r3, [pc, #164]	; (800ed5c <_vfiprintf_r+0x254>)
 800ecb6:	bb1b      	cbnz	r3, 800ed00 <_vfiprintf_r+0x1f8>
 800ecb8:	9b03      	ldr	r3, [sp, #12]
 800ecba:	3307      	adds	r3, #7
 800ecbc:	f023 0307 	bic.w	r3, r3, #7
 800ecc0:	3308      	adds	r3, #8
 800ecc2:	9303      	str	r3, [sp, #12]
 800ecc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecc6:	443b      	add	r3, r7
 800ecc8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecca:	e767      	b.n	800eb9c <_vfiprintf_r+0x94>
 800eccc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecd0:	460c      	mov	r4, r1
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	e7a5      	b.n	800ec22 <_vfiprintf_r+0x11a>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	3401      	adds	r4, #1
 800ecda:	9305      	str	r3, [sp, #20]
 800ecdc:	4619      	mov	r1, r3
 800ecde:	f04f 0c0a 	mov.w	ip, #10
 800ece2:	4620      	mov	r0, r4
 800ece4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ece8:	3a30      	subs	r2, #48	; 0x30
 800ecea:	2a09      	cmp	r2, #9
 800ecec:	d903      	bls.n	800ecf6 <_vfiprintf_r+0x1ee>
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d0c5      	beq.n	800ec7e <_vfiprintf_r+0x176>
 800ecf2:	9105      	str	r1, [sp, #20]
 800ecf4:	e7c3      	b.n	800ec7e <_vfiprintf_r+0x176>
 800ecf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e7f0      	b.n	800ece2 <_vfiprintf_r+0x1da>
 800ed00:	ab03      	add	r3, sp, #12
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	462a      	mov	r2, r5
 800ed06:	4b16      	ldr	r3, [pc, #88]	; (800ed60 <_vfiprintf_r+0x258>)
 800ed08:	a904      	add	r1, sp, #16
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	f7fd ffaa 	bl	800cc64 <_printf_float>
 800ed10:	4607      	mov	r7, r0
 800ed12:	1c78      	adds	r0, r7, #1
 800ed14:	d1d6      	bne.n	800ecc4 <_vfiprintf_r+0x1bc>
 800ed16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed18:	07d9      	lsls	r1, r3, #31
 800ed1a:	d405      	bmi.n	800ed28 <_vfiprintf_r+0x220>
 800ed1c:	89ab      	ldrh	r3, [r5, #12]
 800ed1e:	059a      	lsls	r2, r3, #22
 800ed20:	d402      	bmi.n	800ed28 <_vfiprintf_r+0x220>
 800ed22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed24:	f000 faaf 	bl	800f286 <__retarget_lock_release_recursive>
 800ed28:	89ab      	ldrh	r3, [r5, #12]
 800ed2a:	065b      	lsls	r3, r3, #25
 800ed2c:	f53f af12 	bmi.w	800eb54 <_vfiprintf_r+0x4c>
 800ed30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed32:	e711      	b.n	800eb58 <_vfiprintf_r+0x50>
 800ed34:	ab03      	add	r3, sp, #12
 800ed36:	9300      	str	r3, [sp, #0]
 800ed38:	462a      	mov	r2, r5
 800ed3a:	4b09      	ldr	r3, [pc, #36]	; (800ed60 <_vfiprintf_r+0x258>)
 800ed3c:	a904      	add	r1, sp, #16
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f7fe fa34 	bl	800d1ac <_printf_i>
 800ed44:	e7e4      	b.n	800ed10 <_vfiprintf_r+0x208>
 800ed46:	bf00      	nop
 800ed48:	08010a8c 	.word	0x08010a8c
 800ed4c:	08010aac 	.word	0x08010aac
 800ed50:	08010a6c 	.word	0x08010a6c
 800ed54:	0801095a 	.word	0x0801095a
 800ed58:	08010964 	.word	0x08010964
 800ed5c:	0800cc65 	.word	0x0800cc65
 800ed60:	0800eae3 	.word	0x0800eae3
 800ed64:	08010960 	.word	0x08010960

0800ed68 <__swbuf_r>:
 800ed68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6a:	460e      	mov	r6, r1
 800ed6c:	4614      	mov	r4, r2
 800ed6e:	4605      	mov	r5, r0
 800ed70:	b118      	cbz	r0, 800ed7a <__swbuf_r+0x12>
 800ed72:	6983      	ldr	r3, [r0, #24]
 800ed74:	b90b      	cbnz	r3, 800ed7a <__swbuf_r+0x12>
 800ed76:	f000 f9e7 	bl	800f148 <__sinit>
 800ed7a:	4b21      	ldr	r3, [pc, #132]	; (800ee00 <__swbuf_r+0x98>)
 800ed7c:	429c      	cmp	r4, r3
 800ed7e:	d12b      	bne.n	800edd8 <__swbuf_r+0x70>
 800ed80:	686c      	ldr	r4, [r5, #4]
 800ed82:	69a3      	ldr	r3, [r4, #24]
 800ed84:	60a3      	str	r3, [r4, #8]
 800ed86:	89a3      	ldrh	r3, [r4, #12]
 800ed88:	071a      	lsls	r2, r3, #28
 800ed8a:	d52f      	bpl.n	800edec <__swbuf_r+0x84>
 800ed8c:	6923      	ldr	r3, [r4, #16]
 800ed8e:	b36b      	cbz	r3, 800edec <__swbuf_r+0x84>
 800ed90:	6923      	ldr	r3, [r4, #16]
 800ed92:	6820      	ldr	r0, [r4, #0]
 800ed94:	1ac0      	subs	r0, r0, r3
 800ed96:	6963      	ldr	r3, [r4, #20]
 800ed98:	b2f6      	uxtb	r6, r6
 800ed9a:	4283      	cmp	r3, r0
 800ed9c:	4637      	mov	r7, r6
 800ed9e:	dc04      	bgt.n	800edaa <__swbuf_r+0x42>
 800eda0:	4621      	mov	r1, r4
 800eda2:	4628      	mov	r0, r5
 800eda4:	f000 f93c 	bl	800f020 <_fflush_r>
 800eda8:	bb30      	cbnz	r0, 800edf8 <__swbuf_r+0x90>
 800edaa:	68a3      	ldr	r3, [r4, #8]
 800edac:	3b01      	subs	r3, #1
 800edae:	60a3      	str	r3, [r4, #8]
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	1c5a      	adds	r2, r3, #1
 800edb4:	6022      	str	r2, [r4, #0]
 800edb6:	701e      	strb	r6, [r3, #0]
 800edb8:	6963      	ldr	r3, [r4, #20]
 800edba:	3001      	adds	r0, #1
 800edbc:	4283      	cmp	r3, r0
 800edbe:	d004      	beq.n	800edca <__swbuf_r+0x62>
 800edc0:	89a3      	ldrh	r3, [r4, #12]
 800edc2:	07db      	lsls	r3, r3, #31
 800edc4:	d506      	bpl.n	800edd4 <__swbuf_r+0x6c>
 800edc6:	2e0a      	cmp	r6, #10
 800edc8:	d104      	bne.n	800edd4 <__swbuf_r+0x6c>
 800edca:	4621      	mov	r1, r4
 800edcc:	4628      	mov	r0, r5
 800edce:	f000 f927 	bl	800f020 <_fflush_r>
 800edd2:	b988      	cbnz	r0, 800edf8 <__swbuf_r+0x90>
 800edd4:	4638      	mov	r0, r7
 800edd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edd8:	4b0a      	ldr	r3, [pc, #40]	; (800ee04 <__swbuf_r+0x9c>)
 800edda:	429c      	cmp	r4, r3
 800eddc:	d101      	bne.n	800ede2 <__swbuf_r+0x7a>
 800edde:	68ac      	ldr	r4, [r5, #8]
 800ede0:	e7cf      	b.n	800ed82 <__swbuf_r+0x1a>
 800ede2:	4b09      	ldr	r3, [pc, #36]	; (800ee08 <__swbuf_r+0xa0>)
 800ede4:	429c      	cmp	r4, r3
 800ede6:	bf08      	it	eq
 800ede8:	68ec      	ldreq	r4, [r5, #12]
 800edea:	e7ca      	b.n	800ed82 <__swbuf_r+0x1a>
 800edec:	4621      	mov	r1, r4
 800edee:	4628      	mov	r0, r5
 800edf0:	f000 f81a 	bl	800ee28 <__swsetup_r>
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d0cb      	beq.n	800ed90 <__swbuf_r+0x28>
 800edf8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800edfc:	e7ea      	b.n	800edd4 <__swbuf_r+0x6c>
 800edfe:	bf00      	nop
 800ee00:	08010a8c 	.word	0x08010a8c
 800ee04:	08010aac 	.word	0x08010aac
 800ee08:	08010a6c 	.word	0x08010a6c

0800ee0c <__ascii_wctomb>:
 800ee0c:	b149      	cbz	r1, 800ee22 <__ascii_wctomb+0x16>
 800ee0e:	2aff      	cmp	r2, #255	; 0xff
 800ee10:	bf85      	ittet	hi
 800ee12:	238a      	movhi	r3, #138	; 0x8a
 800ee14:	6003      	strhi	r3, [r0, #0]
 800ee16:	700a      	strbls	r2, [r1, #0]
 800ee18:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ee1c:	bf98      	it	ls
 800ee1e:	2001      	movls	r0, #1
 800ee20:	4770      	bx	lr
 800ee22:	4608      	mov	r0, r1
 800ee24:	4770      	bx	lr
	...

0800ee28 <__swsetup_r>:
 800ee28:	4b32      	ldr	r3, [pc, #200]	; (800eef4 <__swsetup_r+0xcc>)
 800ee2a:	b570      	push	{r4, r5, r6, lr}
 800ee2c:	681d      	ldr	r5, [r3, #0]
 800ee2e:	4606      	mov	r6, r0
 800ee30:	460c      	mov	r4, r1
 800ee32:	b125      	cbz	r5, 800ee3e <__swsetup_r+0x16>
 800ee34:	69ab      	ldr	r3, [r5, #24]
 800ee36:	b913      	cbnz	r3, 800ee3e <__swsetup_r+0x16>
 800ee38:	4628      	mov	r0, r5
 800ee3a:	f000 f985 	bl	800f148 <__sinit>
 800ee3e:	4b2e      	ldr	r3, [pc, #184]	; (800eef8 <__swsetup_r+0xd0>)
 800ee40:	429c      	cmp	r4, r3
 800ee42:	d10f      	bne.n	800ee64 <__swsetup_r+0x3c>
 800ee44:	686c      	ldr	r4, [r5, #4]
 800ee46:	89a3      	ldrh	r3, [r4, #12]
 800ee48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee4c:	0719      	lsls	r1, r3, #28
 800ee4e:	d42c      	bmi.n	800eeaa <__swsetup_r+0x82>
 800ee50:	06dd      	lsls	r5, r3, #27
 800ee52:	d411      	bmi.n	800ee78 <__swsetup_r+0x50>
 800ee54:	2309      	movs	r3, #9
 800ee56:	6033      	str	r3, [r6, #0]
 800ee58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee5c:	81a3      	strh	r3, [r4, #12]
 800ee5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee62:	e03e      	b.n	800eee2 <__swsetup_r+0xba>
 800ee64:	4b25      	ldr	r3, [pc, #148]	; (800eefc <__swsetup_r+0xd4>)
 800ee66:	429c      	cmp	r4, r3
 800ee68:	d101      	bne.n	800ee6e <__swsetup_r+0x46>
 800ee6a:	68ac      	ldr	r4, [r5, #8]
 800ee6c:	e7eb      	b.n	800ee46 <__swsetup_r+0x1e>
 800ee6e:	4b24      	ldr	r3, [pc, #144]	; (800ef00 <__swsetup_r+0xd8>)
 800ee70:	429c      	cmp	r4, r3
 800ee72:	bf08      	it	eq
 800ee74:	68ec      	ldreq	r4, [r5, #12]
 800ee76:	e7e6      	b.n	800ee46 <__swsetup_r+0x1e>
 800ee78:	0758      	lsls	r0, r3, #29
 800ee7a:	d512      	bpl.n	800eea2 <__swsetup_r+0x7a>
 800ee7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee7e:	b141      	cbz	r1, 800ee92 <__swsetup_r+0x6a>
 800ee80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee84:	4299      	cmp	r1, r3
 800ee86:	d002      	beq.n	800ee8e <__swsetup_r+0x66>
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f7ff fcd5 	bl	800e838 <_free_r>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	6363      	str	r3, [r4, #52]	; 0x34
 800ee92:	89a3      	ldrh	r3, [r4, #12]
 800ee94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee98:	81a3      	strh	r3, [r4, #12]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	6063      	str	r3, [r4, #4]
 800ee9e:	6923      	ldr	r3, [r4, #16]
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	89a3      	ldrh	r3, [r4, #12]
 800eea4:	f043 0308 	orr.w	r3, r3, #8
 800eea8:	81a3      	strh	r3, [r4, #12]
 800eeaa:	6923      	ldr	r3, [r4, #16]
 800eeac:	b94b      	cbnz	r3, 800eec2 <__swsetup_r+0x9a>
 800eeae:	89a3      	ldrh	r3, [r4, #12]
 800eeb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eeb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eeb8:	d003      	beq.n	800eec2 <__swsetup_r+0x9a>
 800eeba:	4621      	mov	r1, r4
 800eebc:	4630      	mov	r0, r6
 800eebe:	f000 fa09 	bl	800f2d4 <__smakebuf_r>
 800eec2:	89a0      	ldrh	r0, [r4, #12]
 800eec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eec8:	f010 0301 	ands.w	r3, r0, #1
 800eecc:	d00a      	beq.n	800eee4 <__swsetup_r+0xbc>
 800eece:	2300      	movs	r3, #0
 800eed0:	60a3      	str	r3, [r4, #8]
 800eed2:	6963      	ldr	r3, [r4, #20]
 800eed4:	425b      	negs	r3, r3
 800eed6:	61a3      	str	r3, [r4, #24]
 800eed8:	6923      	ldr	r3, [r4, #16]
 800eeda:	b943      	cbnz	r3, 800eeee <__swsetup_r+0xc6>
 800eedc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eee0:	d1ba      	bne.n	800ee58 <__swsetup_r+0x30>
 800eee2:	bd70      	pop	{r4, r5, r6, pc}
 800eee4:	0781      	lsls	r1, r0, #30
 800eee6:	bf58      	it	pl
 800eee8:	6963      	ldrpl	r3, [r4, #20]
 800eeea:	60a3      	str	r3, [r4, #8]
 800eeec:	e7f4      	b.n	800eed8 <__swsetup_r+0xb0>
 800eeee:	2000      	movs	r0, #0
 800eef0:	e7f7      	b.n	800eee2 <__swsetup_r+0xba>
 800eef2:	bf00      	nop
 800eef4:	20000134 	.word	0x20000134
 800eef8:	08010a8c 	.word	0x08010a8c
 800eefc:	08010aac 	.word	0x08010aac
 800ef00:	08010a6c 	.word	0x08010a6c

0800ef04 <abort>:
 800ef04:	b508      	push	{r3, lr}
 800ef06:	2006      	movs	r0, #6
 800ef08:	f000 fa4c 	bl	800f3a4 <raise>
 800ef0c:	2001      	movs	r0, #1
 800ef0e:	f7f4 f9b3 	bl	8003278 <_exit>
	...

0800ef14 <__sflush_r>:
 800ef14:	898a      	ldrh	r2, [r1, #12]
 800ef16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	0710      	lsls	r0, r2, #28
 800ef1e:	460c      	mov	r4, r1
 800ef20:	d458      	bmi.n	800efd4 <__sflush_r+0xc0>
 800ef22:	684b      	ldr	r3, [r1, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	dc05      	bgt.n	800ef34 <__sflush_r+0x20>
 800ef28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dc02      	bgt.n	800ef34 <__sflush_r+0x20>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef36:	2e00      	cmp	r6, #0
 800ef38:	d0f9      	beq.n	800ef2e <__sflush_r+0x1a>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef40:	682f      	ldr	r7, [r5, #0]
 800ef42:	602b      	str	r3, [r5, #0]
 800ef44:	d032      	beq.n	800efac <__sflush_r+0x98>
 800ef46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef48:	89a3      	ldrh	r3, [r4, #12]
 800ef4a:	075a      	lsls	r2, r3, #29
 800ef4c:	d505      	bpl.n	800ef5a <__sflush_r+0x46>
 800ef4e:	6863      	ldr	r3, [r4, #4]
 800ef50:	1ac0      	subs	r0, r0, r3
 800ef52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef54:	b10b      	cbz	r3, 800ef5a <__sflush_r+0x46>
 800ef56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef58:	1ac0      	subs	r0, r0, r3
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef60:	6a21      	ldr	r1, [r4, #32]
 800ef62:	4628      	mov	r0, r5
 800ef64:	47b0      	blx	r6
 800ef66:	1c43      	adds	r3, r0, #1
 800ef68:	89a3      	ldrh	r3, [r4, #12]
 800ef6a:	d106      	bne.n	800ef7a <__sflush_r+0x66>
 800ef6c:	6829      	ldr	r1, [r5, #0]
 800ef6e:	291d      	cmp	r1, #29
 800ef70:	d82c      	bhi.n	800efcc <__sflush_r+0xb8>
 800ef72:	4a2a      	ldr	r2, [pc, #168]	; (800f01c <__sflush_r+0x108>)
 800ef74:	40ca      	lsrs	r2, r1
 800ef76:	07d6      	lsls	r6, r2, #31
 800ef78:	d528      	bpl.n	800efcc <__sflush_r+0xb8>
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	6062      	str	r2, [r4, #4]
 800ef7e:	04d9      	lsls	r1, r3, #19
 800ef80:	6922      	ldr	r2, [r4, #16]
 800ef82:	6022      	str	r2, [r4, #0]
 800ef84:	d504      	bpl.n	800ef90 <__sflush_r+0x7c>
 800ef86:	1c42      	adds	r2, r0, #1
 800ef88:	d101      	bne.n	800ef8e <__sflush_r+0x7a>
 800ef8a:	682b      	ldr	r3, [r5, #0]
 800ef8c:	b903      	cbnz	r3, 800ef90 <__sflush_r+0x7c>
 800ef8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ef90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef92:	602f      	str	r7, [r5, #0]
 800ef94:	2900      	cmp	r1, #0
 800ef96:	d0ca      	beq.n	800ef2e <__sflush_r+0x1a>
 800ef98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef9c:	4299      	cmp	r1, r3
 800ef9e:	d002      	beq.n	800efa6 <__sflush_r+0x92>
 800efa0:	4628      	mov	r0, r5
 800efa2:	f7ff fc49 	bl	800e838 <_free_r>
 800efa6:	2000      	movs	r0, #0
 800efa8:	6360      	str	r0, [r4, #52]	; 0x34
 800efaa:	e7c1      	b.n	800ef30 <__sflush_r+0x1c>
 800efac:	6a21      	ldr	r1, [r4, #32]
 800efae:	2301      	movs	r3, #1
 800efb0:	4628      	mov	r0, r5
 800efb2:	47b0      	blx	r6
 800efb4:	1c41      	adds	r1, r0, #1
 800efb6:	d1c7      	bne.n	800ef48 <__sflush_r+0x34>
 800efb8:	682b      	ldr	r3, [r5, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d0c4      	beq.n	800ef48 <__sflush_r+0x34>
 800efbe:	2b1d      	cmp	r3, #29
 800efc0:	d001      	beq.n	800efc6 <__sflush_r+0xb2>
 800efc2:	2b16      	cmp	r3, #22
 800efc4:	d101      	bne.n	800efca <__sflush_r+0xb6>
 800efc6:	602f      	str	r7, [r5, #0]
 800efc8:	e7b1      	b.n	800ef2e <__sflush_r+0x1a>
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efd0:	81a3      	strh	r3, [r4, #12]
 800efd2:	e7ad      	b.n	800ef30 <__sflush_r+0x1c>
 800efd4:	690f      	ldr	r7, [r1, #16]
 800efd6:	2f00      	cmp	r7, #0
 800efd8:	d0a9      	beq.n	800ef2e <__sflush_r+0x1a>
 800efda:	0793      	lsls	r3, r2, #30
 800efdc:	680e      	ldr	r6, [r1, #0]
 800efde:	bf08      	it	eq
 800efe0:	694b      	ldreq	r3, [r1, #20]
 800efe2:	600f      	str	r7, [r1, #0]
 800efe4:	bf18      	it	ne
 800efe6:	2300      	movne	r3, #0
 800efe8:	eba6 0807 	sub.w	r8, r6, r7
 800efec:	608b      	str	r3, [r1, #8]
 800efee:	f1b8 0f00 	cmp.w	r8, #0
 800eff2:	dd9c      	ble.n	800ef2e <__sflush_r+0x1a>
 800eff4:	6a21      	ldr	r1, [r4, #32]
 800eff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eff8:	4643      	mov	r3, r8
 800effa:	463a      	mov	r2, r7
 800effc:	4628      	mov	r0, r5
 800effe:	47b0      	blx	r6
 800f000:	2800      	cmp	r0, #0
 800f002:	dc06      	bgt.n	800f012 <__sflush_r+0xfe>
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f00a:	81a3      	strh	r3, [r4, #12]
 800f00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f010:	e78e      	b.n	800ef30 <__sflush_r+0x1c>
 800f012:	4407      	add	r7, r0
 800f014:	eba8 0800 	sub.w	r8, r8, r0
 800f018:	e7e9      	b.n	800efee <__sflush_r+0xda>
 800f01a:	bf00      	nop
 800f01c:	20400001 	.word	0x20400001

0800f020 <_fflush_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	690b      	ldr	r3, [r1, #16]
 800f024:	4605      	mov	r5, r0
 800f026:	460c      	mov	r4, r1
 800f028:	b913      	cbnz	r3, 800f030 <_fflush_r+0x10>
 800f02a:	2500      	movs	r5, #0
 800f02c:	4628      	mov	r0, r5
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	b118      	cbz	r0, 800f03a <_fflush_r+0x1a>
 800f032:	6983      	ldr	r3, [r0, #24]
 800f034:	b90b      	cbnz	r3, 800f03a <_fflush_r+0x1a>
 800f036:	f000 f887 	bl	800f148 <__sinit>
 800f03a:	4b14      	ldr	r3, [pc, #80]	; (800f08c <_fflush_r+0x6c>)
 800f03c:	429c      	cmp	r4, r3
 800f03e:	d11b      	bne.n	800f078 <_fflush_r+0x58>
 800f040:	686c      	ldr	r4, [r5, #4]
 800f042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d0ef      	beq.n	800f02a <_fflush_r+0xa>
 800f04a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f04c:	07d0      	lsls	r0, r2, #31
 800f04e:	d404      	bmi.n	800f05a <_fflush_r+0x3a>
 800f050:	0599      	lsls	r1, r3, #22
 800f052:	d402      	bmi.n	800f05a <_fflush_r+0x3a>
 800f054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f056:	f000 f915 	bl	800f284 <__retarget_lock_acquire_recursive>
 800f05a:	4628      	mov	r0, r5
 800f05c:	4621      	mov	r1, r4
 800f05e:	f7ff ff59 	bl	800ef14 <__sflush_r>
 800f062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f064:	07da      	lsls	r2, r3, #31
 800f066:	4605      	mov	r5, r0
 800f068:	d4e0      	bmi.n	800f02c <_fflush_r+0xc>
 800f06a:	89a3      	ldrh	r3, [r4, #12]
 800f06c:	059b      	lsls	r3, r3, #22
 800f06e:	d4dd      	bmi.n	800f02c <_fflush_r+0xc>
 800f070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f072:	f000 f908 	bl	800f286 <__retarget_lock_release_recursive>
 800f076:	e7d9      	b.n	800f02c <_fflush_r+0xc>
 800f078:	4b05      	ldr	r3, [pc, #20]	; (800f090 <_fflush_r+0x70>)
 800f07a:	429c      	cmp	r4, r3
 800f07c:	d101      	bne.n	800f082 <_fflush_r+0x62>
 800f07e:	68ac      	ldr	r4, [r5, #8]
 800f080:	e7df      	b.n	800f042 <_fflush_r+0x22>
 800f082:	4b04      	ldr	r3, [pc, #16]	; (800f094 <_fflush_r+0x74>)
 800f084:	429c      	cmp	r4, r3
 800f086:	bf08      	it	eq
 800f088:	68ec      	ldreq	r4, [r5, #12]
 800f08a:	e7da      	b.n	800f042 <_fflush_r+0x22>
 800f08c:	08010a8c 	.word	0x08010a8c
 800f090:	08010aac 	.word	0x08010aac
 800f094:	08010a6c 	.word	0x08010a6c

0800f098 <std>:
 800f098:	2300      	movs	r3, #0
 800f09a:	b510      	push	{r4, lr}
 800f09c:	4604      	mov	r4, r0
 800f09e:	e9c0 3300 	strd	r3, r3, [r0]
 800f0a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0a6:	6083      	str	r3, [r0, #8]
 800f0a8:	8181      	strh	r1, [r0, #12]
 800f0aa:	6643      	str	r3, [r0, #100]	; 0x64
 800f0ac:	81c2      	strh	r2, [r0, #14]
 800f0ae:	6183      	str	r3, [r0, #24]
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	2208      	movs	r2, #8
 800f0b4:	305c      	adds	r0, #92	; 0x5c
 800f0b6:	f7fd fd2d 	bl	800cb14 <memset>
 800f0ba:	4b05      	ldr	r3, [pc, #20]	; (800f0d0 <std+0x38>)
 800f0bc:	6263      	str	r3, [r4, #36]	; 0x24
 800f0be:	4b05      	ldr	r3, [pc, #20]	; (800f0d4 <std+0x3c>)
 800f0c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0c2:	4b05      	ldr	r3, [pc, #20]	; (800f0d8 <std+0x40>)
 800f0c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0c6:	4b05      	ldr	r3, [pc, #20]	; (800f0dc <std+0x44>)
 800f0c8:	6224      	str	r4, [r4, #32]
 800f0ca:	6323      	str	r3, [r4, #48]	; 0x30
 800f0cc:	bd10      	pop	{r4, pc}
 800f0ce:	bf00      	nop
 800f0d0:	0800f3dd 	.word	0x0800f3dd
 800f0d4:	0800f3ff 	.word	0x0800f3ff
 800f0d8:	0800f437 	.word	0x0800f437
 800f0dc:	0800f45b 	.word	0x0800f45b

0800f0e0 <_cleanup_r>:
 800f0e0:	4901      	ldr	r1, [pc, #4]	; (800f0e8 <_cleanup_r+0x8>)
 800f0e2:	f000 b8af 	b.w	800f244 <_fwalk_reent>
 800f0e6:	bf00      	nop
 800f0e8:	0800f021 	.word	0x0800f021

0800f0ec <__sfmoreglue>:
 800f0ec:	b570      	push	{r4, r5, r6, lr}
 800f0ee:	2268      	movs	r2, #104	; 0x68
 800f0f0:	1e4d      	subs	r5, r1, #1
 800f0f2:	4355      	muls	r5, r2
 800f0f4:	460e      	mov	r6, r1
 800f0f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f0fa:	f7ff fc09 	bl	800e910 <_malloc_r>
 800f0fe:	4604      	mov	r4, r0
 800f100:	b140      	cbz	r0, 800f114 <__sfmoreglue+0x28>
 800f102:	2100      	movs	r1, #0
 800f104:	e9c0 1600 	strd	r1, r6, [r0]
 800f108:	300c      	adds	r0, #12
 800f10a:	60a0      	str	r0, [r4, #8]
 800f10c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f110:	f7fd fd00 	bl	800cb14 <memset>
 800f114:	4620      	mov	r0, r4
 800f116:	bd70      	pop	{r4, r5, r6, pc}

0800f118 <__sfp_lock_acquire>:
 800f118:	4801      	ldr	r0, [pc, #4]	; (800f120 <__sfp_lock_acquire+0x8>)
 800f11a:	f000 b8b3 	b.w	800f284 <__retarget_lock_acquire_recursive>
 800f11e:	bf00      	nop
 800f120:	200022f5 	.word	0x200022f5

0800f124 <__sfp_lock_release>:
 800f124:	4801      	ldr	r0, [pc, #4]	; (800f12c <__sfp_lock_release+0x8>)
 800f126:	f000 b8ae 	b.w	800f286 <__retarget_lock_release_recursive>
 800f12a:	bf00      	nop
 800f12c:	200022f5 	.word	0x200022f5

0800f130 <__sinit_lock_acquire>:
 800f130:	4801      	ldr	r0, [pc, #4]	; (800f138 <__sinit_lock_acquire+0x8>)
 800f132:	f000 b8a7 	b.w	800f284 <__retarget_lock_acquire_recursive>
 800f136:	bf00      	nop
 800f138:	200022f6 	.word	0x200022f6

0800f13c <__sinit_lock_release>:
 800f13c:	4801      	ldr	r0, [pc, #4]	; (800f144 <__sinit_lock_release+0x8>)
 800f13e:	f000 b8a2 	b.w	800f286 <__retarget_lock_release_recursive>
 800f142:	bf00      	nop
 800f144:	200022f6 	.word	0x200022f6

0800f148 <__sinit>:
 800f148:	b510      	push	{r4, lr}
 800f14a:	4604      	mov	r4, r0
 800f14c:	f7ff fff0 	bl	800f130 <__sinit_lock_acquire>
 800f150:	69a3      	ldr	r3, [r4, #24]
 800f152:	b11b      	cbz	r3, 800f15c <__sinit+0x14>
 800f154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f158:	f7ff bff0 	b.w	800f13c <__sinit_lock_release>
 800f15c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f160:	6523      	str	r3, [r4, #80]	; 0x50
 800f162:	4b13      	ldr	r3, [pc, #76]	; (800f1b0 <__sinit+0x68>)
 800f164:	4a13      	ldr	r2, [pc, #76]	; (800f1b4 <__sinit+0x6c>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	62a2      	str	r2, [r4, #40]	; 0x28
 800f16a:	42a3      	cmp	r3, r4
 800f16c:	bf04      	itt	eq
 800f16e:	2301      	moveq	r3, #1
 800f170:	61a3      	streq	r3, [r4, #24]
 800f172:	4620      	mov	r0, r4
 800f174:	f000 f820 	bl	800f1b8 <__sfp>
 800f178:	6060      	str	r0, [r4, #4]
 800f17a:	4620      	mov	r0, r4
 800f17c:	f000 f81c 	bl	800f1b8 <__sfp>
 800f180:	60a0      	str	r0, [r4, #8]
 800f182:	4620      	mov	r0, r4
 800f184:	f000 f818 	bl	800f1b8 <__sfp>
 800f188:	2200      	movs	r2, #0
 800f18a:	60e0      	str	r0, [r4, #12]
 800f18c:	2104      	movs	r1, #4
 800f18e:	6860      	ldr	r0, [r4, #4]
 800f190:	f7ff ff82 	bl	800f098 <std>
 800f194:	68a0      	ldr	r0, [r4, #8]
 800f196:	2201      	movs	r2, #1
 800f198:	2109      	movs	r1, #9
 800f19a:	f7ff ff7d 	bl	800f098 <std>
 800f19e:	68e0      	ldr	r0, [r4, #12]
 800f1a0:	2202      	movs	r2, #2
 800f1a2:	2112      	movs	r1, #18
 800f1a4:	f7ff ff78 	bl	800f098 <std>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	61a3      	str	r3, [r4, #24]
 800f1ac:	e7d2      	b.n	800f154 <__sinit+0xc>
 800f1ae:	bf00      	nop
 800f1b0:	080106f0 	.word	0x080106f0
 800f1b4:	0800f0e1 	.word	0x0800f0e1

0800f1b8 <__sfp>:
 800f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ba:	4607      	mov	r7, r0
 800f1bc:	f7ff ffac 	bl	800f118 <__sfp_lock_acquire>
 800f1c0:	4b1e      	ldr	r3, [pc, #120]	; (800f23c <__sfp+0x84>)
 800f1c2:	681e      	ldr	r6, [r3, #0]
 800f1c4:	69b3      	ldr	r3, [r6, #24]
 800f1c6:	b913      	cbnz	r3, 800f1ce <__sfp+0x16>
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7ff ffbd 	bl	800f148 <__sinit>
 800f1ce:	3648      	adds	r6, #72	; 0x48
 800f1d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	d503      	bpl.n	800f1e0 <__sfp+0x28>
 800f1d8:	6833      	ldr	r3, [r6, #0]
 800f1da:	b30b      	cbz	r3, 800f220 <__sfp+0x68>
 800f1dc:	6836      	ldr	r6, [r6, #0]
 800f1de:	e7f7      	b.n	800f1d0 <__sfp+0x18>
 800f1e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f1e4:	b9d5      	cbnz	r5, 800f21c <__sfp+0x64>
 800f1e6:	4b16      	ldr	r3, [pc, #88]	; (800f240 <__sfp+0x88>)
 800f1e8:	60e3      	str	r3, [r4, #12]
 800f1ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f1ee:	6665      	str	r5, [r4, #100]	; 0x64
 800f1f0:	f000 f847 	bl	800f282 <__retarget_lock_init_recursive>
 800f1f4:	f7ff ff96 	bl	800f124 <__sfp_lock_release>
 800f1f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f1fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f200:	6025      	str	r5, [r4, #0]
 800f202:	61a5      	str	r5, [r4, #24]
 800f204:	2208      	movs	r2, #8
 800f206:	4629      	mov	r1, r5
 800f208:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f20c:	f7fd fc82 	bl	800cb14 <memset>
 800f210:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f214:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f218:	4620      	mov	r0, r4
 800f21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f21c:	3468      	adds	r4, #104	; 0x68
 800f21e:	e7d9      	b.n	800f1d4 <__sfp+0x1c>
 800f220:	2104      	movs	r1, #4
 800f222:	4638      	mov	r0, r7
 800f224:	f7ff ff62 	bl	800f0ec <__sfmoreglue>
 800f228:	4604      	mov	r4, r0
 800f22a:	6030      	str	r0, [r6, #0]
 800f22c:	2800      	cmp	r0, #0
 800f22e:	d1d5      	bne.n	800f1dc <__sfp+0x24>
 800f230:	f7ff ff78 	bl	800f124 <__sfp_lock_release>
 800f234:	230c      	movs	r3, #12
 800f236:	603b      	str	r3, [r7, #0]
 800f238:	e7ee      	b.n	800f218 <__sfp+0x60>
 800f23a:	bf00      	nop
 800f23c:	080106f0 	.word	0x080106f0
 800f240:	ffff0001 	.word	0xffff0001

0800f244 <_fwalk_reent>:
 800f244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f248:	4606      	mov	r6, r0
 800f24a:	4688      	mov	r8, r1
 800f24c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f250:	2700      	movs	r7, #0
 800f252:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f256:	f1b9 0901 	subs.w	r9, r9, #1
 800f25a:	d505      	bpl.n	800f268 <_fwalk_reent+0x24>
 800f25c:	6824      	ldr	r4, [r4, #0]
 800f25e:	2c00      	cmp	r4, #0
 800f260:	d1f7      	bne.n	800f252 <_fwalk_reent+0xe>
 800f262:	4638      	mov	r0, r7
 800f264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f268:	89ab      	ldrh	r3, [r5, #12]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d907      	bls.n	800f27e <_fwalk_reent+0x3a>
 800f26e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f272:	3301      	adds	r3, #1
 800f274:	d003      	beq.n	800f27e <_fwalk_reent+0x3a>
 800f276:	4629      	mov	r1, r5
 800f278:	4630      	mov	r0, r6
 800f27a:	47c0      	blx	r8
 800f27c:	4307      	orrs	r7, r0
 800f27e:	3568      	adds	r5, #104	; 0x68
 800f280:	e7e9      	b.n	800f256 <_fwalk_reent+0x12>

0800f282 <__retarget_lock_init_recursive>:
 800f282:	4770      	bx	lr

0800f284 <__retarget_lock_acquire_recursive>:
 800f284:	4770      	bx	lr

0800f286 <__retarget_lock_release_recursive>:
 800f286:	4770      	bx	lr

0800f288 <__swhatbuf_r>:
 800f288:	b570      	push	{r4, r5, r6, lr}
 800f28a:	460e      	mov	r6, r1
 800f28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f290:	2900      	cmp	r1, #0
 800f292:	b096      	sub	sp, #88	; 0x58
 800f294:	4614      	mov	r4, r2
 800f296:	461d      	mov	r5, r3
 800f298:	da08      	bge.n	800f2ac <__swhatbuf_r+0x24>
 800f29a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	602a      	str	r2, [r5, #0]
 800f2a2:	061a      	lsls	r2, r3, #24
 800f2a4:	d410      	bmi.n	800f2c8 <__swhatbuf_r+0x40>
 800f2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2aa:	e00e      	b.n	800f2ca <__swhatbuf_r+0x42>
 800f2ac:	466a      	mov	r2, sp
 800f2ae:	f000 f8fb 	bl	800f4a8 <_fstat_r>
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	dbf1      	blt.n	800f29a <__swhatbuf_r+0x12>
 800f2b6:	9a01      	ldr	r2, [sp, #4]
 800f2b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f2bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f2c0:	425a      	negs	r2, r3
 800f2c2:	415a      	adcs	r2, r3
 800f2c4:	602a      	str	r2, [r5, #0]
 800f2c6:	e7ee      	b.n	800f2a6 <__swhatbuf_r+0x1e>
 800f2c8:	2340      	movs	r3, #64	; 0x40
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	6023      	str	r3, [r4, #0]
 800f2ce:	b016      	add	sp, #88	; 0x58
 800f2d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f2d4 <__smakebuf_r>:
 800f2d4:	898b      	ldrh	r3, [r1, #12]
 800f2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2d8:	079d      	lsls	r5, r3, #30
 800f2da:	4606      	mov	r6, r0
 800f2dc:	460c      	mov	r4, r1
 800f2de:	d507      	bpl.n	800f2f0 <__smakebuf_r+0x1c>
 800f2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2e4:	6023      	str	r3, [r4, #0]
 800f2e6:	6123      	str	r3, [r4, #16]
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	6163      	str	r3, [r4, #20]
 800f2ec:	b002      	add	sp, #8
 800f2ee:	bd70      	pop	{r4, r5, r6, pc}
 800f2f0:	ab01      	add	r3, sp, #4
 800f2f2:	466a      	mov	r2, sp
 800f2f4:	f7ff ffc8 	bl	800f288 <__swhatbuf_r>
 800f2f8:	9900      	ldr	r1, [sp, #0]
 800f2fa:	4605      	mov	r5, r0
 800f2fc:	4630      	mov	r0, r6
 800f2fe:	f7ff fb07 	bl	800e910 <_malloc_r>
 800f302:	b948      	cbnz	r0, 800f318 <__smakebuf_r+0x44>
 800f304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f308:	059a      	lsls	r2, r3, #22
 800f30a:	d4ef      	bmi.n	800f2ec <__smakebuf_r+0x18>
 800f30c:	f023 0303 	bic.w	r3, r3, #3
 800f310:	f043 0302 	orr.w	r3, r3, #2
 800f314:	81a3      	strh	r3, [r4, #12]
 800f316:	e7e3      	b.n	800f2e0 <__smakebuf_r+0xc>
 800f318:	4b0d      	ldr	r3, [pc, #52]	; (800f350 <__smakebuf_r+0x7c>)
 800f31a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f31c:	89a3      	ldrh	r3, [r4, #12]
 800f31e:	6020      	str	r0, [r4, #0]
 800f320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f324:	81a3      	strh	r3, [r4, #12]
 800f326:	9b00      	ldr	r3, [sp, #0]
 800f328:	6163      	str	r3, [r4, #20]
 800f32a:	9b01      	ldr	r3, [sp, #4]
 800f32c:	6120      	str	r0, [r4, #16]
 800f32e:	b15b      	cbz	r3, 800f348 <__smakebuf_r+0x74>
 800f330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f334:	4630      	mov	r0, r6
 800f336:	f000 f8c9 	bl	800f4cc <_isatty_r>
 800f33a:	b128      	cbz	r0, 800f348 <__smakebuf_r+0x74>
 800f33c:	89a3      	ldrh	r3, [r4, #12]
 800f33e:	f023 0303 	bic.w	r3, r3, #3
 800f342:	f043 0301 	orr.w	r3, r3, #1
 800f346:	81a3      	strh	r3, [r4, #12]
 800f348:	89a0      	ldrh	r0, [r4, #12]
 800f34a:	4305      	orrs	r5, r0
 800f34c:	81a5      	strh	r5, [r4, #12]
 800f34e:	e7cd      	b.n	800f2ec <__smakebuf_r+0x18>
 800f350:	0800f0e1 	.word	0x0800f0e1

0800f354 <_raise_r>:
 800f354:	291f      	cmp	r1, #31
 800f356:	b538      	push	{r3, r4, r5, lr}
 800f358:	4604      	mov	r4, r0
 800f35a:	460d      	mov	r5, r1
 800f35c:	d904      	bls.n	800f368 <_raise_r+0x14>
 800f35e:	2316      	movs	r3, #22
 800f360:	6003      	str	r3, [r0, #0]
 800f362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f366:	bd38      	pop	{r3, r4, r5, pc}
 800f368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f36a:	b112      	cbz	r2, 800f372 <_raise_r+0x1e>
 800f36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f370:	b94b      	cbnz	r3, 800f386 <_raise_r+0x32>
 800f372:	4620      	mov	r0, r4
 800f374:	f000 f830 	bl	800f3d8 <_getpid_r>
 800f378:	462a      	mov	r2, r5
 800f37a:	4601      	mov	r1, r0
 800f37c:	4620      	mov	r0, r4
 800f37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f382:	f000 b817 	b.w	800f3b4 <_kill_r>
 800f386:	2b01      	cmp	r3, #1
 800f388:	d00a      	beq.n	800f3a0 <_raise_r+0x4c>
 800f38a:	1c59      	adds	r1, r3, #1
 800f38c:	d103      	bne.n	800f396 <_raise_r+0x42>
 800f38e:	2316      	movs	r3, #22
 800f390:	6003      	str	r3, [r0, #0]
 800f392:	2001      	movs	r0, #1
 800f394:	e7e7      	b.n	800f366 <_raise_r+0x12>
 800f396:	2400      	movs	r4, #0
 800f398:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f39c:	4628      	mov	r0, r5
 800f39e:	4798      	blx	r3
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	e7e0      	b.n	800f366 <_raise_r+0x12>

0800f3a4 <raise>:
 800f3a4:	4b02      	ldr	r3, [pc, #8]	; (800f3b0 <raise+0xc>)
 800f3a6:	4601      	mov	r1, r0
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	f7ff bfd3 	b.w	800f354 <_raise_r>
 800f3ae:	bf00      	nop
 800f3b0:	20000134 	.word	0x20000134

0800f3b4 <_kill_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	4d07      	ldr	r5, [pc, #28]	; (800f3d4 <_kill_r+0x20>)
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	4608      	mov	r0, r1
 800f3be:	4611      	mov	r1, r2
 800f3c0:	602b      	str	r3, [r5, #0]
 800f3c2:	f7f3 ff49 	bl	8003258 <_kill>
 800f3c6:	1c43      	adds	r3, r0, #1
 800f3c8:	d102      	bne.n	800f3d0 <_kill_r+0x1c>
 800f3ca:	682b      	ldr	r3, [r5, #0]
 800f3cc:	b103      	cbz	r3, 800f3d0 <_kill_r+0x1c>
 800f3ce:	6023      	str	r3, [r4, #0]
 800f3d0:	bd38      	pop	{r3, r4, r5, pc}
 800f3d2:	bf00      	nop
 800f3d4:	200022f0 	.word	0x200022f0

0800f3d8 <_getpid_r>:
 800f3d8:	f7f3 bf36 	b.w	8003248 <_getpid>

0800f3dc <__sread>:
 800f3dc:	b510      	push	{r4, lr}
 800f3de:	460c      	mov	r4, r1
 800f3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e4:	f000 f894 	bl	800f510 <_read_r>
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	bfab      	itete	ge
 800f3ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800f3f0:	181b      	addge	r3, r3, r0
 800f3f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3f6:	bfac      	ite	ge
 800f3f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3fa:	81a3      	strhlt	r3, [r4, #12]
 800f3fc:	bd10      	pop	{r4, pc}

0800f3fe <__swrite>:
 800f3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f402:	461f      	mov	r7, r3
 800f404:	898b      	ldrh	r3, [r1, #12]
 800f406:	05db      	lsls	r3, r3, #23
 800f408:	4605      	mov	r5, r0
 800f40a:	460c      	mov	r4, r1
 800f40c:	4616      	mov	r6, r2
 800f40e:	d505      	bpl.n	800f41c <__swrite+0x1e>
 800f410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f414:	2302      	movs	r3, #2
 800f416:	2200      	movs	r2, #0
 800f418:	f000 f868 	bl	800f4ec <_lseek_r>
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f426:	81a3      	strh	r3, [r4, #12]
 800f428:	4632      	mov	r2, r6
 800f42a:	463b      	mov	r3, r7
 800f42c:	4628      	mov	r0, r5
 800f42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f432:	f000 b817 	b.w	800f464 <_write_r>

0800f436 <__sseek>:
 800f436:	b510      	push	{r4, lr}
 800f438:	460c      	mov	r4, r1
 800f43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f43e:	f000 f855 	bl	800f4ec <_lseek_r>
 800f442:	1c43      	adds	r3, r0, #1
 800f444:	89a3      	ldrh	r3, [r4, #12]
 800f446:	bf15      	itete	ne
 800f448:	6560      	strne	r0, [r4, #84]	; 0x54
 800f44a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f44e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f452:	81a3      	strheq	r3, [r4, #12]
 800f454:	bf18      	it	ne
 800f456:	81a3      	strhne	r3, [r4, #12]
 800f458:	bd10      	pop	{r4, pc}

0800f45a <__sclose>:
 800f45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f45e:	f000 b813 	b.w	800f488 <_close_r>
	...

0800f464 <_write_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4d07      	ldr	r5, [pc, #28]	; (800f484 <_write_r+0x20>)
 800f468:	4604      	mov	r4, r0
 800f46a:	4608      	mov	r0, r1
 800f46c:	4611      	mov	r1, r2
 800f46e:	2200      	movs	r2, #0
 800f470:	602a      	str	r2, [r5, #0]
 800f472:	461a      	mov	r2, r3
 800f474:	f7f3 ff27 	bl	80032c6 <_write>
 800f478:	1c43      	adds	r3, r0, #1
 800f47a:	d102      	bne.n	800f482 <_write_r+0x1e>
 800f47c:	682b      	ldr	r3, [r5, #0]
 800f47e:	b103      	cbz	r3, 800f482 <_write_r+0x1e>
 800f480:	6023      	str	r3, [r4, #0]
 800f482:	bd38      	pop	{r3, r4, r5, pc}
 800f484:	200022f0 	.word	0x200022f0

0800f488 <_close_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	4d06      	ldr	r5, [pc, #24]	; (800f4a4 <_close_r+0x1c>)
 800f48c:	2300      	movs	r3, #0
 800f48e:	4604      	mov	r4, r0
 800f490:	4608      	mov	r0, r1
 800f492:	602b      	str	r3, [r5, #0]
 800f494:	f7f3 ff33 	bl	80032fe <_close>
 800f498:	1c43      	adds	r3, r0, #1
 800f49a:	d102      	bne.n	800f4a2 <_close_r+0x1a>
 800f49c:	682b      	ldr	r3, [r5, #0]
 800f49e:	b103      	cbz	r3, 800f4a2 <_close_r+0x1a>
 800f4a0:	6023      	str	r3, [r4, #0]
 800f4a2:	bd38      	pop	{r3, r4, r5, pc}
 800f4a4:	200022f0 	.word	0x200022f0

0800f4a8 <_fstat_r>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	4d07      	ldr	r5, [pc, #28]	; (800f4c8 <_fstat_r+0x20>)
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	4608      	mov	r0, r1
 800f4b2:	4611      	mov	r1, r2
 800f4b4:	602b      	str	r3, [r5, #0]
 800f4b6:	f7f3 ff2e 	bl	8003316 <_fstat>
 800f4ba:	1c43      	adds	r3, r0, #1
 800f4bc:	d102      	bne.n	800f4c4 <_fstat_r+0x1c>
 800f4be:	682b      	ldr	r3, [r5, #0]
 800f4c0:	b103      	cbz	r3, 800f4c4 <_fstat_r+0x1c>
 800f4c2:	6023      	str	r3, [r4, #0]
 800f4c4:	bd38      	pop	{r3, r4, r5, pc}
 800f4c6:	bf00      	nop
 800f4c8:	200022f0 	.word	0x200022f0

0800f4cc <_isatty_r>:
 800f4cc:	b538      	push	{r3, r4, r5, lr}
 800f4ce:	4d06      	ldr	r5, [pc, #24]	; (800f4e8 <_isatty_r+0x1c>)
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	4608      	mov	r0, r1
 800f4d6:	602b      	str	r3, [r5, #0]
 800f4d8:	f7f3 ff2d 	bl	8003336 <_isatty>
 800f4dc:	1c43      	adds	r3, r0, #1
 800f4de:	d102      	bne.n	800f4e6 <_isatty_r+0x1a>
 800f4e0:	682b      	ldr	r3, [r5, #0]
 800f4e2:	b103      	cbz	r3, 800f4e6 <_isatty_r+0x1a>
 800f4e4:	6023      	str	r3, [r4, #0]
 800f4e6:	bd38      	pop	{r3, r4, r5, pc}
 800f4e8:	200022f0 	.word	0x200022f0

0800f4ec <_lseek_r>:
 800f4ec:	b538      	push	{r3, r4, r5, lr}
 800f4ee:	4d07      	ldr	r5, [pc, #28]	; (800f50c <_lseek_r+0x20>)
 800f4f0:	4604      	mov	r4, r0
 800f4f2:	4608      	mov	r0, r1
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	602a      	str	r2, [r5, #0]
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	f7f3 ff26 	bl	800334c <_lseek>
 800f500:	1c43      	adds	r3, r0, #1
 800f502:	d102      	bne.n	800f50a <_lseek_r+0x1e>
 800f504:	682b      	ldr	r3, [r5, #0]
 800f506:	b103      	cbz	r3, 800f50a <_lseek_r+0x1e>
 800f508:	6023      	str	r3, [r4, #0]
 800f50a:	bd38      	pop	{r3, r4, r5, pc}
 800f50c:	200022f0 	.word	0x200022f0

0800f510 <_read_r>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	4d07      	ldr	r5, [pc, #28]	; (800f530 <_read_r+0x20>)
 800f514:	4604      	mov	r4, r0
 800f516:	4608      	mov	r0, r1
 800f518:	4611      	mov	r1, r2
 800f51a:	2200      	movs	r2, #0
 800f51c:	602a      	str	r2, [r5, #0]
 800f51e:	461a      	mov	r2, r3
 800f520:	f7f3 feb4 	bl	800328c <_read>
 800f524:	1c43      	adds	r3, r0, #1
 800f526:	d102      	bne.n	800f52e <_read_r+0x1e>
 800f528:	682b      	ldr	r3, [r5, #0]
 800f52a:	b103      	cbz	r3, 800f52e <_read_r+0x1e>
 800f52c:	6023      	str	r3, [r4, #0]
 800f52e:	bd38      	pop	{r3, r4, r5, pc}
 800f530:	200022f0 	.word	0x200022f0
 800f534:	00000000 	.word	0x00000000

0800f538 <cos>:
 800f538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f53a:	ec53 2b10 	vmov	r2, r3, d0
 800f53e:	4826      	ldr	r0, [pc, #152]	; (800f5d8 <cos+0xa0>)
 800f540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f544:	4281      	cmp	r1, r0
 800f546:	dc06      	bgt.n	800f556 <cos+0x1e>
 800f548:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f5d0 <cos+0x98>
 800f54c:	b005      	add	sp, #20
 800f54e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f552:	f000 baa9 	b.w	800faa8 <__kernel_cos>
 800f556:	4821      	ldr	r0, [pc, #132]	; (800f5dc <cos+0xa4>)
 800f558:	4281      	cmp	r1, r0
 800f55a:	dd09      	ble.n	800f570 <cos+0x38>
 800f55c:	ee10 0a10 	vmov	r0, s0
 800f560:	4619      	mov	r1, r3
 800f562:	f7f0 feb1 	bl	80002c8 <__aeabi_dsub>
 800f566:	ec41 0b10 	vmov	d0, r0, r1
 800f56a:	b005      	add	sp, #20
 800f56c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f570:	4668      	mov	r0, sp
 800f572:	f000 f88d 	bl	800f690 <__ieee754_rem_pio2>
 800f576:	f000 0003 	and.w	r0, r0, #3
 800f57a:	2801      	cmp	r0, #1
 800f57c:	d00b      	beq.n	800f596 <cos+0x5e>
 800f57e:	2802      	cmp	r0, #2
 800f580:	d016      	beq.n	800f5b0 <cos+0x78>
 800f582:	b9e0      	cbnz	r0, 800f5be <cos+0x86>
 800f584:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f588:	ed9d 0b00 	vldr	d0, [sp]
 800f58c:	f000 fa8c 	bl	800faa8 <__kernel_cos>
 800f590:	ec51 0b10 	vmov	r0, r1, d0
 800f594:	e7e7      	b.n	800f566 <cos+0x2e>
 800f596:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f59a:	ed9d 0b00 	vldr	d0, [sp]
 800f59e:	f000 fe9b 	bl	80102d8 <__kernel_sin>
 800f5a2:	ec53 2b10 	vmov	r2, r3, d0
 800f5a6:	ee10 0a10 	vmov	r0, s0
 800f5aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f5ae:	e7da      	b.n	800f566 <cos+0x2e>
 800f5b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5b4:	ed9d 0b00 	vldr	d0, [sp]
 800f5b8:	f000 fa76 	bl	800faa8 <__kernel_cos>
 800f5bc:	e7f1      	b.n	800f5a2 <cos+0x6a>
 800f5be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5c2:	ed9d 0b00 	vldr	d0, [sp]
 800f5c6:	2001      	movs	r0, #1
 800f5c8:	f000 fe86 	bl	80102d8 <__kernel_sin>
 800f5cc:	e7e0      	b.n	800f590 <cos+0x58>
 800f5ce:	bf00      	nop
	...
 800f5d8:	3fe921fb 	.word	0x3fe921fb
 800f5dc:	7fefffff 	.word	0x7fefffff

0800f5e0 <sin>:
 800f5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5e2:	ec53 2b10 	vmov	r2, r3, d0
 800f5e6:	4828      	ldr	r0, [pc, #160]	; (800f688 <sin+0xa8>)
 800f5e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f5ec:	4281      	cmp	r1, r0
 800f5ee:	dc07      	bgt.n	800f600 <sin+0x20>
 800f5f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f680 <sin+0xa0>
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	b005      	add	sp, #20
 800f5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5fc:	f000 be6c 	b.w	80102d8 <__kernel_sin>
 800f600:	4822      	ldr	r0, [pc, #136]	; (800f68c <sin+0xac>)
 800f602:	4281      	cmp	r1, r0
 800f604:	dd09      	ble.n	800f61a <sin+0x3a>
 800f606:	ee10 0a10 	vmov	r0, s0
 800f60a:	4619      	mov	r1, r3
 800f60c:	f7f0 fe5c 	bl	80002c8 <__aeabi_dsub>
 800f610:	ec41 0b10 	vmov	d0, r0, r1
 800f614:	b005      	add	sp, #20
 800f616:	f85d fb04 	ldr.w	pc, [sp], #4
 800f61a:	4668      	mov	r0, sp
 800f61c:	f000 f838 	bl	800f690 <__ieee754_rem_pio2>
 800f620:	f000 0003 	and.w	r0, r0, #3
 800f624:	2801      	cmp	r0, #1
 800f626:	d00c      	beq.n	800f642 <sin+0x62>
 800f628:	2802      	cmp	r0, #2
 800f62a:	d011      	beq.n	800f650 <sin+0x70>
 800f62c:	b9f0      	cbnz	r0, 800f66c <sin+0x8c>
 800f62e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f632:	ed9d 0b00 	vldr	d0, [sp]
 800f636:	2001      	movs	r0, #1
 800f638:	f000 fe4e 	bl	80102d8 <__kernel_sin>
 800f63c:	ec51 0b10 	vmov	r0, r1, d0
 800f640:	e7e6      	b.n	800f610 <sin+0x30>
 800f642:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f646:	ed9d 0b00 	vldr	d0, [sp]
 800f64a:	f000 fa2d 	bl	800faa8 <__kernel_cos>
 800f64e:	e7f5      	b.n	800f63c <sin+0x5c>
 800f650:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f654:	ed9d 0b00 	vldr	d0, [sp]
 800f658:	2001      	movs	r0, #1
 800f65a:	f000 fe3d 	bl	80102d8 <__kernel_sin>
 800f65e:	ec53 2b10 	vmov	r2, r3, d0
 800f662:	ee10 0a10 	vmov	r0, s0
 800f666:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f66a:	e7d1      	b.n	800f610 <sin+0x30>
 800f66c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f670:	ed9d 0b00 	vldr	d0, [sp]
 800f674:	f000 fa18 	bl	800faa8 <__kernel_cos>
 800f678:	e7f1      	b.n	800f65e <sin+0x7e>
 800f67a:	bf00      	nop
 800f67c:	f3af 8000 	nop.w
	...
 800f688:	3fe921fb 	.word	0x3fe921fb
 800f68c:	7fefffff 	.word	0x7fefffff

0800f690 <__ieee754_rem_pio2>:
 800f690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f694:	ed2d 8b02 	vpush	{d8}
 800f698:	ec55 4b10 	vmov	r4, r5, d0
 800f69c:	4bca      	ldr	r3, [pc, #808]	; (800f9c8 <__ieee754_rem_pio2+0x338>)
 800f69e:	b08b      	sub	sp, #44	; 0x2c
 800f6a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f6a4:	4598      	cmp	r8, r3
 800f6a6:	4682      	mov	sl, r0
 800f6a8:	9502      	str	r5, [sp, #8]
 800f6aa:	dc08      	bgt.n	800f6be <__ieee754_rem_pio2+0x2e>
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	ed80 0b00 	vstr	d0, [r0]
 800f6b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f6b8:	f04f 0b00 	mov.w	fp, #0
 800f6bc:	e028      	b.n	800f710 <__ieee754_rem_pio2+0x80>
 800f6be:	4bc3      	ldr	r3, [pc, #780]	; (800f9cc <__ieee754_rem_pio2+0x33c>)
 800f6c0:	4598      	cmp	r8, r3
 800f6c2:	dc78      	bgt.n	800f7b6 <__ieee754_rem_pio2+0x126>
 800f6c4:	9b02      	ldr	r3, [sp, #8]
 800f6c6:	4ec2      	ldr	r6, [pc, #776]	; (800f9d0 <__ieee754_rem_pio2+0x340>)
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	ee10 0a10 	vmov	r0, s0
 800f6ce:	a3b0      	add	r3, pc, #704	; (adr r3, 800f990 <__ieee754_rem_pio2+0x300>)
 800f6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	dd39      	ble.n	800f74c <__ieee754_rem_pio2+0xbc>
 800f6d8:	f7f0 fdf6 	bl	80002c8 <__aeabi_dsub>
 800f6dc:	45b0      	cmp	r8, r6
 800f6de:	4604      	mov	r4, r0
 800f6e0:	460d      	mov	r5, r1
 800f6e2:	d01b      	beq.n	800f71c <__ieee754_rem_pio2+0x8c>
 800f6e4:	a3ac      	add	r3, pc, #688	; (adr r3, 800f998 <__ieee754_rem_pio2+0x308>)
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	f7f0 fded 	bl	80002c8 <__aeabi_dsub>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	e9ca 2300 	strd	r2, r3, [sl]
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7f0 fde5 	bl	80002c8 <__aeabi_dsub>
 800f6fe:	a3a6      	add	r3, pc, #664	; (adr r3, 800f998 <__ieee754_rem_pio2+0x308>)
 800f700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f704:	f7f0 fde0 	bl	80002c8 <__aeabi_dsub>
 800f708:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f70c:	f04f 0b01 	mov.w	fp, #1
 800f710:	4658      	mov	r0, fp
 800f712:	b00b      	add	sp, #44	; 0x2c
 800f714:	ecbd 8b02 	vpop	{d8}
 800f718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f9a0 <__ieee754_rem_pio2+0x310>)
 800f71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f722:	f7f0 fdd1 	bl	80002c8 <__aeabi_dsub>
 800f726:	a3a0      	add	r3, pc, #640	; (adr r3, 800f9a8 <__ieee754_rem_pio2+0x318>)
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	4604      	mov	r4, r0
 800f72e:	460d      	mov	r5, r1
 800f730:	f7f0 fdca 	bl	80002c8 <__aeabi_dsub>
 800f734:	4602      	mov	r2, r0
 800f736:	460b      	mov	r3, r1
 800f738:	e9ca 2300 	strd	r2, r3, [sl]
 800f73c:	4620      	mov	r0, r4
 800f73e:	4629      	mov	r1, r5
 800f740:	f7f0 fdc2 	bl	80002c8 <__aeabi_dsub>
 800f744:	a398      	add	r3, pc, #608	; (adr r3, 800f9a8 <__ieee754_rem_pio2+0x318>)
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	e7db      	b.n	800f704 <__ieee754_rem_pio2+0x74>
 800f74c:	f7f0 fdbe 	bl	80002cc <__adddf3>
 800f750:	45b0      	cmp	r8, r6
 800f752:	4604      	mov	r4, r0
 800f754:	460d      	mov	r5, r1
 800f756:	d016      	beq.n	800f786 <__ieee754_rem_pio2+0xf6>
 800f758:	a38f      	add	r3, pc, #572	; (adr r3, 800f998 <__ieee754_rem_pio2+0x308>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f0 fdb5 	bl	80002cc <__adddf3>
 800f762:	4602      	mov	r2, r0
 800f764:	460b      	mov	r3, r1
 800f766:	e9ca 2300 	strd	r2, r3, [sl]
 800f76a:	4620      	mov	r0, r4
 800f76c:	4629      	mov	r1, r5
 800f76e:	f7f0 fdab 	bl	80002c8 <__aeabi_dsub>
 800f772:	a389      	add	r3, pc, #548	; (adr r3, 800f998 <__ieee754_rem_pio2+0x308>)
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	f7f0 fda8 	bl	80002cc <__adddf3>
 800f77c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800f780:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f784:	e7c4      	b.n	800f710 <__ieee754_rem_pio2+0x80>
 800f786:	a386      	add	r3, pc, #536	; (adr r3, 800f9a0 <__ieee754_rem_pio2+0x310>)
 800f788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78c:	f7f0 fd9e 	bl	80002cc <__adddf3>
 800f790:	a385      	add	r3, pc, #532	; (adr r3, 800f9a8 <__ieee754_rem_pio2+0x318>)
 800f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f796:	4604      	mov	r4, r0
 800f798:	460d      	mov	r5, r1
 800f79a:	f7f0 fd97 	bl	80002cc <__adddf3>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	e9ca 2300 	strd	r2, r3, [sl]
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	f7f0 fd8d 	bl	80002c8 <__aeabi_dsub>
 800f7ae:	a37e      	add	r3, pc, #504	; (adr r3, 800f9a8 <__ieee754_rem_pio2+0x318>)
 800f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b4:	e7e0      	b.n	800f778 <__ieee754_rem_pio2+0xe8>
 800f7b6:	4b87      	ldr	r3, [pc, #540]	; (800f9d4 <__ieee754_rem_pio2+0x344>)
 800f7b8:	4598      	cmp	r8, r3
 800f7ba:	f300 80d9 	bgt.w	800f970 <__ieee754_rem_pio2+0x2e0>
 800f7be:	f000 fe49 	bl	8010454 <fabs>
 800f7c2:	ec55 4b10 	vmov	r4, r5, d0
 800f7c6:	ee10 0a10 	vmov	r0, s0
 800f7ca:	a379      	add	r3, pc, #484	; (adr r3, 800f9b0 <__ieee754_rem_pio2+0x320>)
 800f7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	f7f0 ff31 	bl	8000638 <__aeabi_dmul>
 800f7d6:	4b80      	ldr	r3, [pc, #512]	; (800f9d8 <__ieee754_rem_pio2+0x348>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f7f0 fd77 	bl	80002cc <__adddf3>
 800f7de:	f7f1 f9db 	bl	8000b98 <__aeabi_d2iz>
 800f7e2:	4683      	mov	fp, r0
 800f7e4:	f7f0 febe 	bl	8000564 <__aeabi_i2d>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	ec43 2b18 	vmov	d8, r2, r3
 800f7f0:	a367      	add	r3, pc, #412	; (adr r3, 800f990 <__ieee754_rem_pio2+0x300>)
 800f7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f6:	f7f0 ff1f 	bl	8000638 <__aeabi_dmul>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	4620      	mov	r0, r4
 800f800:	4629      	mov	r1, r5
 800f802:	f7f0 fd61 	bl	80002c8 <__aeabi_dsub>
 800f806:	a364      	add	r3, pc, #400	; (adr r3, 800f998 <__ieee754_rem_pio2+0x308>)
 800f808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80c:	4606      	mov	r6, r0
 800f80e:	460f      	mov	r7, r1
 800f810:	ec51 0b18 	vmov	r0, r1, d8
 800f814:	f7f0 ff10 	bl	8000638 <__aeabi_dmul>
 800f818:	f1bb 0f1f 	cmp.w	fp, #31
 800f81c:	4604      	mov	r4, r0
 800f81e:	460d      	mov	r5, r1
 800f820:	dc0d      	bgt.n	800f83e <__ieee754_rem_pio2+0x1ae>
 800f822:	4b6e      	ldr	r3, [pc, #440]	; (800f9dc <__ieee754_rem_pio2+0x34c>)
 800f824:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800f828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f82c:	4543      	cmp	r3, r8
 800f82e:	d006      	beq.n	800f83e <__ieee754_rem_pio2+0x1ae>
 800f830:	4622      	mov	r2, r4
 800f832:	462b      	mov	r3, r5
 800f834:	4630      	mov	r0, r6
 800f836:	4639      	mov	r1, r7
 800f838:	f7f0 fd46 	bl	80002c8 <__aeabi_dsub>
 800f83c:	e00f      	b.n	800f85e <__ieee754_rem_pio2+0x1ce>
 800f83e:	462b      	mov	r3, r5
 800f840:	4622      	mov	r2, r4
 800f842:	4630      	mov	r0, r6
 800f844:	4639      	mov	r1, r7
 800f846:	f7f0 fd3f 	bl	80002c8 <__aeabi_dsub>
 800f84a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f84e:	9303      	str	r3, [sp, #12]
 800f850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f854:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f858:	f1b8 0f10 	cmp.w	r8, #16
 800f85c:	dc02      	bgt.n	800f864 <__ieee754_rem_pio2+0x1d4>
 800f85e:	e9ca 0100 	strd	r0, r1, [sl]
 800f862:	e039      	b.n	800f8d8 <__ieee754_rem_pio2+0x248>
 800f864:	a34e      	add	r3, pc, #312	; (adr r3, 800f9a0 <__ieee754_rem_pio2+0x310>)
 800f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86a:	ec51 0b18 	vmov	r0, r1, d8
 800f86e:	f7f0 fee3 	bl	8000638 <__aeabi_dmul>
 800f872:	4604      	mov	r4, r0
 800f874:	460d      	mov	r5, r1
 800f876:	4602      	mov	r2, r0
 800f878:	460b      	mov	r3, r1
 800f87a:	4630      	mov	r0, r6
 800f87c:	4639      	mov	r1, r7
 800f87e:	f7f0 fd23 	bl	80002c8 <__aeabi_dsub>
 800f882:	4602      	mov	r2, r0
 800f884:	460b      	mov	r3, r1
 800f886:	4680      	mov	r8, r0
 800f888:	4689      	mov	r9, r1
 800f88a:	4630      	mov	r0, r6
 800f88c:	4639      	mov	r1, r7
 800f88e:	f7f0 fd1b 	bl	80002c8 <__aeabi_dsub>
 800f892:	4622      	mov	r2, r4
 800f894:	462b      	mov	r3, r5
 800f896:	f7f0 fd17 	bl	80002c8 <__aeabi_dsub>
 800f89a:	a343      	add	r3, pc, #268	; (adr r3, 800f9a8 <__ieee754_rem_pio2+0x318>)
 800f89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	460d      	mov	r5, r1
 800f8a4:	ec51 0b18 	vmov	r0, r1, d8
 800f8a8:	f7f0 fec6 	bl	8000638 <__aeabi_dmul>
 800f8ac:	4622      	mov	r2, r4
 800f8ae:	462b      	mov	r3, r5
 800f8b0:	f7f0 fd0a 	bl	80002c8 <__aeabi_dsub>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	460d      	mov	r5, r1
 800f8bc:	4640      	mov	r0, r8
 800f8be:	4649      	mov	r1, r9
 800f8c0:	f7f0 fd02 	bl	80002c8 <__aeabi_dsub>
 800f8c4:	9a03      	ldr	r2, [sp, #12]
 800f8c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	2b31      	cmp	r3, #49	; 0x31
 800f8ce:	dc24      	bgt.n	800f91a <__ieee754_rem_pio2+0x28a>
 800f8d0:	e9ca 0100 	strd	r0, r1, [sl]
 800f8d4:	4646      	mov	r6, r8
 800f8d6:	464f      	mov	r7, r9
 800f8d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800f8dc:	4630      	mov	r0, r6
 800f8de:	4642      	mov	r2, r8
 800f8e0:	464b      	mov	r3, r9
 800f8e2:	4639      	mov	r1, r7
 800f8e4:	f7f0 fcf0 	bl	80002c8 <__aeabi_dsub>
 800f8e8:	462b      	mov	r3, r5
 800f8ea:	4622      	mov	r2, r4
 800f8ec:	f7f0 fcec 	bl	80002c8 <__aeabi_dsub>
 800f8f0:	9b02      	ldr	r3, [sp, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f8f8:	f6bf af0a 	bge.w	800f710 <__ieee754_rem_pio2+0x80>
 800f8fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f900:	f8ca 3004 	str.w	r3, [sl, #4]
 800f904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f908:	f8ca 8000 	str.w	r8, [sl]
 800f90c:	f8ca 0008 	str.w	r0, [sl, #8]
 800f910:	f8ca 300c 	str.w	r3, [sl, #12]
 800f914:	f1cb 0b00 	rsb	fp, fp, #0
 800f918:	e6fa      	b.n	800f710 <__ieee754_rem_pio2+0x80>
 800f91a:	a327      	add	r3, pc, #156	; (adr r3, 800f9b8 <__ieee754_rem_pio2+0x328>)
 800f91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f920:	ec51 0b18 	vmov	r0, r1, d8
 800f924:	f7f0 fe88 	bl	8000638 <__aeabi_dmul>
 800f928:	4604      	mov	r4, r0
 800f92a:	460d      	mov	r5, r1
 800f92c:	4602      	mov	r2, r0
 800f92e:	460b      	mov	r3, r1
 800f930:	4640      	mov	r0, r8
 800f932:	4649      	mov	r1, r9
 800f934:	f7f0 fcc8 	bl	80002c8 <__aeabi_dsub>
 800f938:	4602      	mov	r2, r0
 800f93a:	460b      	mov	r3, r1
 800f93c:	4606      	mov	r6, r0
 800f93e:	460f      	mov	r7, r1
 800f940:	4640      	mov	r0, r8
 800f942:	4649      	mov	r1, r9
 800f944:	f7f0 fcc0 	bl	80002c8 <__aeabi_dsub>
 800f948:	4622      	mov	r2, r4
 800f94a:	462b      	mov	r3, r5
 800f94c:	f7f0 fcbc 	bl	80002c8 <__aeabi_dsub>
 800f950:	a31b      	add	r3, pc, #108	; (adr r3, 800f9c0 <__ieee754_rem_pio2+0x330>)
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	4604      	mov	r4, r0
 800f958:	460d      	mov	r5, r1
 800f95a:	ec51 0b18 	vmov	r0, r1, d8
 800f95e:	f7f0 fe6b 	bl	8000638 <__aeabi_dmul>
 800f962:	4622      	mov	r2, r4
 800f964:	462b      	mov	r3, r5
 800f966:	f7f0 fcaf 	bl	80002c8 <__aeabi_dsub>
 800f96a:	4604      	mov	r4, r0
 800f96c:	460d      	mov	r5, r1
 800f96e:	e75f      	b.n	800f830 <__ieee754_rem_pio2+0x1a0>
 800f970:	4b1b      	ldr	r3, [pc, #108]	; (800f9e0 <__ieee754_rem_pio2+0x350>)
 800f972:	4598      	cmp	r8, r3
 800f974:	dd36      	ble.n	800f9e4 <__ieee754_rem_pio2+0x354>
 800f976:	ee10 2a10 	vmov	r2, s0
 800f97a:	462b      	mov	r3, r5
 800f97c:	4620      	mov	r0, r4
 800f97e:	4629      	mov	r1, r5
 800f980:	f7f0 fca2 	bl	80002c8 <__aeabi_dsub>
 800f984:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f988:	e9ca 0100 	strd	r0, r1, [sl]
 800f98c:	e694      	b.n	800f6b8 <__ieee754_rem_pio2+0x28>
 800f98e:	bf00      	nop
 800f990:	54400000 	.word	0x54400000
 800f994:	3ff921fb 	.word	0x3ff921fb
 800f998:	1a626331 	.word	0x1a626331
 800f99c:	3dd0b461 	.word	0x3dd0b461
 800f9a0:	1a600000 	.word	0x1a600000
 800f9a4:	3dd0b461 	.word	0x3dd0b461
 800f9a8:	2e037073 	.word	0x2e037073
 800f9ac:	3ba3198a 	.word	0x3ba3198a
 800f9b0:	6dc9c883 	.word	0x6dc9c883
 800f9b4:	3fe45f30 	.word	0x3fe45f30
 800f9b8:	2e000000 	.word	0x2e000000
 800f9bc:	3ba3198a 	.word	0x3ba3198a
 800f9c0:	252049c1 	.word	0x252049c1
 800f9c4:	397b839a 	.word	0x397b839a
 800f9c8:	3fe921fb 	.word	0x3fe921fb
 800f9cc:	4002d97b 	.word	0x4002d97b
 800f9d0:	3ff921fb 	.word	0x3ff921fb
 800f9d4:	413921fb 	.word	0x413921fb
 800f9d8:	3fe00000 	.word	0x3fe00000
 800f9dc:	08010acc 	.word	0x08010acc
 800f9e0:	7fefffff 	.word	0x7fefffff
 800f9e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f9e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f9ec:	ee10 0a10 	vmov	r0, s0
 800f9f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f9f4:	ee10 6a10 	vmov	r6, s0
 800f9f8:	460f      	mov	r7, r1
 800f9fa:	f7f1 f8cd 	bl	8000b98 <__aeabi_d2iz>
 800f9fe:	f7f0 fdb1 	bl	8000564 <__aeabi_i2d>
 800fa02:	4602      	mov	r2, r0
 800fa04:	460b      	mov	r3, r1
 800fa06:	4630      	mov	r0, r6
 800fa08:	4639      	mov	r1, r7
 800fa0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa0e:	f7f0 fc5b 	bl	80002c8 <__aeabi_dsub>
 800fa12:	4b23      	ldr	r3, [pc, #140]	; (800faa0 <__ieee754_rem_pio2+0x410>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	f7f0 fe0f 	bl	8000638 <__aeabi_dmul>
 800fa1a:	460f      	mov	r7, r1
 800fa1c:	4606      	mov	r6, r0
 800fa1e:	f7f1 f8bb 	bl	8000b98 <__aeabi_d2iz>
 800fa22:	f7f0 fd9f 	bl	8000564 <__aeabi_i2d>
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	4639      	mov	r1, r7
 800fa2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fa32:	f7f0 fc49 	bl	80002c8 <__aeabi_dsub>
 800fa36:	4b1a      	ldr	r3, [pc, #104]	; (800faa0 <__ieee754_rem_pio2+0x410>)
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f7f0 fdfd 	bl	8000638 <__aeabi_dmul>
 800fa3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa42:	ad04      	add	r5, sp, #16
 800fa44:	f04f 0803 	mov.w	r8, #3
 800fa48:	46a9      	mov	r9, r5
 800fa4a:	2600      	movs	r6, #0
 800fa4c:	2700      	movs	r7, #0
 800fa4e:	4632      	mov	r2, r6
 800fa50:	463b      	mov	r3, r7
 800fa52:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fa56:	46c3      	mov	fp, r8
 800fa58:	3d08      	subs	r5, #8
 800fa5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fa5e:	f7f1 f853 	bl	8000b08 <__aeabi_dcmpeq>
 800fa62:	2800      	cmp	r0, #0
 800fa64:	d1f3      	bne.n	800fa4e <__ieee754_rem_pio2+0x3be>
 800fa66:	4b0f      	ldr	r3, [pc, #60]	; (800faa4 <__ieee754_rem_pio2+0x414>)
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	2302      	movs	r3, #2
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	4622      	mov	r2, r4
 800fa70:	465b      	mov	r3, fp
 800fa72:	4651      	mov	r1, sl
 800fa74:	4648      	mov	r0, r9
 800fa76:	f000 f8df 	bl	800fc38 <__kernel_rem_pio2>
 800fa7a:	9b02      	ldr	r3, [sp, #8]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	4683      	mov	fp, r0
 800fa80:	f6bf ae46 	bge.w	800f710 <__ieee754_rem_pio2+0x80>
 800fa84:	e9da 2100 	ldrd	r2, r1, [sl]
 800fa88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa8c:	e9ca 2300 	strd	r2, r3, [sl]
 800fa90:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800fa94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa98:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800fa9c:	e73a      	b.n	800f914 <__ieee754_rem_pio2+0x284>
 800fa9e:	bf00      	nop
 800faa0:	41700000 	.word	0x41700000
 800faa4:	08010b4c 	.word	0x08010b4c

0800faa8 <__kernel_cos>:
 800faa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	ec57 6b10 	vmov	r6, r7, d0
 800fab0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fab4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fab8:	ed8d 1b00 	vstr	d1, [sp]
 800fabc:	da07      	bge.n	800face <__kernel_cos+0x26>
 800fabe:	ee10 0a10 	vmov	r0, s0
 800fac2:	4639      	mov	r1, r7
 800fac4:	f7f1 f868 	bl	8000b98 <__aeabi_d2iz>
 800fac8:	2800      	cmp	r0, #0
 800faca:	f000 8088 	beq.w	800fbde <__kernel_cos+0x136>
 800face:	4632      	mov	r2, r6
 800fad0:	463b      	mov	r3, r7
 800fad2:	4630      	mov	r0, r6
 800fad4:	4639      	mov	r1, r7
 800fad6:	f7f0 fdaf 	bl	8000638 <__aeabi_dmul>
 800fada:	4b51      	ldr	r3, [pc, #324]	; (800fc20 <__kernel_cos+0x178>)
 800fadc:	2200      	movs	r2, #0
 800fade:	4604      	mov	r4, r0
 800fae0:	460d      	mov	r5, r1
 800fae2:	f7f0 fda9 	bl	8000638 <__aeabi_dmul>
 800fae6:	a340      	add	r3, pc, #256	; (adr r3, 800fbe8 <__kernel_cos+0x140>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	4682      	mov	sl, r0
 800faee:	468b      	mov	fp, r1
 800faf0:	4620      	mov	r0, r4
 800faf2:	4629      	mov	r1, r5
 800faf4:	f7f0 fda0 	bl	8000638 <__aeabi_dmul>
 800faf8:	a33d      	add	r3, pc, #244	; (adr r3, 800fbf0 <__kernel_cos+0x148>)
 800fafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafe:	f7f0 fbe5 	bl	80002cc <__adddf3>
 800fb02:	4622      	mov	r2, r4
 800fb04:	462b      	mov	r3, r5
 800fb06:	f7f0 fd97 	bl	8000638 <__aeabi_dmul>
 800fb0a:	a33b      	add	r3, pc, #236	; (adr r3, 800fbf8 <__kernel_cos+0x150>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f7f0 fbda 	bl	80002c8 <__aeabi_dsub>
 800fb14:	4622      	mov	r2, r4
 800fb16:	462b      	mov	r3, r5
 800fb18:	f7f0 fd8e 	bl	8000638 <__aeabi_dmul>
 800fb1c:	a338      	add	r3, pc, #224	; (adr r3, 800fc00 <__kernel_cos+0x158>)
 800fb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb22:	f7f0 fbd3 	bl	80002cc <__adddf3>
 800fb26:	4622      	mov	r2, r4
 800fb28:	462b      	mov	r3, r5
 800fb2a:	f7f0 fd85 	bl	8000638 <__aeabi_dmul>
 800fb2e:	a336      	add	r3, pc, #216	; (adr r3, 800fc08 <__kernel_cos+0x160>)
 800fb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb34:	f7f0 fbc8 	bl	80002c8 <__aeabi_dsub>
 800fb38:	4622      	mov	r2, r4
 800fb3a:	462b      	mov	r3, r5
 800fb3c:	f7f0 fd7c 	bl	8000638 <__aeabi_dmul>
 800fb40:	a333      	add	r3, pc, #204	; (adr r3, 800fc10 <__kernel_cos+0x168>)
 800fb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb46:	f7f0 fbc1 	bl	80002cc <__adddf3>
 800fb4a:	4622      	mov	r2, r4
 800fb4c:	462b      	mov	r3, r5
 800fb4e:	f7f0 fd73 	bl	8000638 <__aeabi_dmul>
 800fb52:	4622      	mov	r2, r4
 800fb54:	462b      	mov	r3, r5
 800fb56:	f7f0 fd6f 	bl	8000638 <__aeabi_dmul>
 800fb5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb5e:	4604      	mov	r4, r0
 800fb60:	460d      	mov	r5, r1
 800fb62:	4630      	mov	r0, r6
 800fb64:	4639      	mov	r1, r7
 800fb66:	f7f0 fd67 	bl	8000638 <__aeabi_dmul>
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	4629      	mov	r1, r5
 800fb70:	4620      	mov	r0, r4
 800fb72:	f7f0 fba9 	bl	80002c8 <__aeabi_dsub>
 800fb76:	4b2b      	ldr	r3, [pc, #172]	; (800fc24 <__kernel_cos+0x17c>)
 800fb78:	4598      	cmp	r8, r3
 800fb7a:	4606      	mov	r6, r0
 800fb7c:	460f      	mov	r7, r1
 800fb7e:	dc10      	bgt.n	800fba2 <__kernel_cos+0xfa>
 800fb80:	4602      	mov	r2, r0
 800fb82:	460b      	mov	r3, r1
 800fb84:	4650      	mov	r0, sl
 800fb86:	4659      	mov	r1, fp
 800fb88:	f7f0 fb9e 	bl	80002c8 <__aeabi_dsub>
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	4926      	ldr	r1, [pc, #152]	; (800fc28 <__kernel_cos+0x180>)
 800fb90:	4602      	mov	r2, r0
 800fb92:	2000      	movs	r0, #0
 800fb94:	f7f0 fb98 	bl	80002c8 <__aeabi_dsub>
 800fb98:	ec41 0b10 	vmov	d0, r0, r1
 800fb9c:	b003      	add	sp, #12
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba2:	4b22      	ldr	r3, [pc, #136]	; (800fc2c <__kernel_cos+0x184>)
 800fba4:	4920      	ldr	r1, [pc, #128]	; (800fc28 <__kernel_cos+0x180>)
 800fba6:	4598      	cmp	r8, r3
 800fba8:	bfcc      	ite	gt
 800fbaa:	4d21      	ldrgt	r5, [pc, #132]	; (800fc30 <__kernel_cos+0x188>)
 800fbac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fbb0:	2400      	movs	r4, #0
 800fbb2:	4622      	mov	r2, r4
 800fbb4:	462b      	mov	r3, r5
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	f7f0 fb86 	bl	80002c8 <__aeabi_dsub>
 800fbbc:	4622      	mov	r2, r4
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	4689      	mov	r9, r1
 800fbc2:	462b      	mov	r3, r5
 800fbc4:	4650      	mov	r0, sl
 800fbc6:	4659      	mov	r1, fp
 800fbc8:	f7f0 fb7e 	bl	80002c8 <__aeabi_dsub>
 800fbcc:	4632      	mov	r2, r6
 800fbce:	463b      	mov	r3, r7
 800fbd0:	f7f0 fb7a 	bl	80002c8 <__aeabi_dsub>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	4640      	mov	r0, r8
 800fbda:	4649      	mov	r1, r9
 800fbdc:	e7da      	b.n	800fb94 <__kernel_cos+0xec>
 800fbde:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fc18 <__kernel_cos+0x170>
 800fbe2:	e7db      	b.n	800fb9c <__kernel_cos+0xf4>
 800fbe4:	f3af 8000 	nop.w
 800fbe8:	be8838d4 	.word	0xbe8838d4
 800fbec:	bda8fae9 	.word	0xbda8fae9
 800fbf0:	bdb4b1c4 	.word	0xbdb4b1c4
 800fbf4:	3e21ee9e 	.word	0x3e21ee9e
 800fbf8:	809c52ad 	.word	0x809c52ad
 800fbfc:	3e927e4f 	.word	0x3e927e4f
 800fc00:	19cb1590 	.word	0x19cb1590
 800fc04:	3efa01a0 	.word	0x3efa01a0
 800fc08:	16c15177 	.word	0x16c15177
 800fc0c:	3f56c16c 	.word	0x3f56c16c
 800fc10:	5555554c 	.word	0x5555554c
 800fc14:	3fa55555 	.word	0x3fa55555
 800fc18:	00000000 	.word	0x00000000
 800fc1c:	3ff00000 	.word	0x3ff00000
 800fc20:	3fe00000 	.word	0x3fe00000
 800fc24:	3fd33332 	.word	0x3fd33332
 800fc28:	3ff00000 	.word	0x3ff00000
 800fc2c:	3fe90000 	.word	0x3fe90000
 800fc30:	3fd20000 	.word	0x3fd20000
 800fc34:	00000000 	.word	0x00000000

0800fc38 <__kernel_rem_pio2>:
 800fc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc3c:	ed2d 8b02 	vpush	{d8}
 800fc40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fc44:	f112 0f14 	cmn.w	r2, #20
 800fc48:	9308      	str	r3, [sp, #32]
 800fc4a:	9101      	str	r1, [sp, #4]
 800fc4c:	4bc4      	ldr	r3, [pc, #784]	; (800ff60 <__kernel_rem_pio2+0x328>)
 800fc4e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fc50:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc56:	9302      	str	r3, [sp, #8]
 800fc58:	9b08      	ldr	r3, [sp, #32]
 800fc5a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fc5e:	bfa8      	it	ge
 800fc60:	1ed4      	subge	r4, r2, #3
 800fc62:	9306      	str	r3, [sp, #24]
 800fc64:	bfb2      	itee	lt
 800fc66:	2400      	movlt	r4, #0
 800fc68:	2318      	movge	r3, #24
 800fc6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800fc6e:	f06f 0317 	mvn.w	r3, #23
 800fc72:	fb04 3303 	mla	r3, r4, r3, r3
 800fc76:	eb03 0a02 	add.w	sl, r3, r2
 800fc7a:	9b02      	ldr	r3, [sp, #8]
 800fc7c:	9a06      	ldr	r2, [sp, #24]
 800fc7e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ff50 <__kernel_rem_pio2+0x318>
 800fc82:	eb03 0802 	add.w	r8, r3, r2
 800fc86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fc88:	1aa7      	subs	r7, r4, r2
 800fc8a:	ae22      	add	r6, sp, #136	; 0x88
 800fc8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fc90:	2500      	movs	r5, #0
 800fc92:	4545      	cmp	r5, r8
 800fc94:	dd13      	ble.n	800fcbe <__kernel_rem_pio2+0x86>
 800fc96:	9b08      	ldr	r3, [sp, #32]
 800fc98:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ff50 <__kernel_rem_pio2+0x318>
 800fc9c:	aa22      	add	r2, sp, #136	; 0x88
 800fc9e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fca2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fca6:	f04f 0800 	mov.w	r8, #0
 800fcaa:	9b02      	ldr	r3, [sp, #8]
 800fcac:	4598      	cmp	r8, r3
 800fcae:	dc2f      	bgt.n	800fd10 <__kernel_rem_pio2+0xd8>
 800fcb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fcb4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fcb8:	462f      	mov	r7, r5
 800fcba:	2600      	movs	r6, #0
 800fcbc:	e01b      	b.n	800fcf6 <__kernel_rem_pio2+0xbe>
 800fcbe:	42ef      	cmn	r7, r5
 800fcc0:	d407      	bmi.n	800fcd2 <__kernel_rem_pio2+0x9a>
 800fcc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fcc6:	f7f0 fc4d 	bl	8000564 <__aeabi_i2d>
 800fcca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fcce:	3501      	adds	r5, #1
 800fcd0:	e7df      	b.n	800fc92 <__kernel_rem_pio2+0x5a>
 800fcd2:	ec51 0b18 	vmov	r0, r1, d8
 800fcd6:	e7f8      	b.n	800fcca <__kernel_rem_pio2+0x92>
 800fcd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fce0:	f7f0 fcaa 	bl	8000638 <__aeabi_dmul>
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcec:	f7f0 faee 	bl	80002cc <__adddf3>
 800fcf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fcf4:	3601      	adds	r6, #1
 800fcf6:	9b06      	ldr	r3, [sp, #24]
 800fcf8:	429e      	cmp	r6, r3
 800fcfa:	f1a7 0708 	sub.w	r7, r7, #8
 800fcfe:	ddeb      	ble.n	800fcd8 <__kernel_rem_pio2+0xa0>
 800fd00:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fd04:	f108 0801 	add.w	r8, r8, #1
 800fd08:	ecab 7b02 	vstmia	fp!, {d7}
 800fd0c:	3508      	adds	r5, #8
 800fd0e:	e7cc      	b.n	800fcaa <__kernel_rem_pio2+0x72>
 800fd10:	9b02      	ldr	r3, [sp, #8]
 800fd12:	aa0e      	add	r2, sp, #56	; 0x38
 800fd14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd18:	930d      	str	r3, [sp, #52]	; 0x34
 800fd1a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fd1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fd20:	9c02      	ldr	r4, [sp, #8]
 800fd22:	930c      	str	r3, [sp, #48]	; 0x30
 800fd24:	00e3      	lsls	r3, r4, #3
 800fd26:	930a      	str	r3, [sp, #40]	; 0x28
 800fd28:	ab9a      	add	r3, sp, #616	; 0x268
 800fd2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fd32:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fd36:	ab72      	add	r3, sp, #456	; 0x1c8
 800fd38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fd3c:	46c3      	mov	fp, r8
 800fd3e:	46a1      	mov	r9, r4
 800fd40:	f1b9 0f00 	cmp.w	r9, #0
 800fd44:	f1a5 0508 	sub.w	r5, r5, #8
 800fd48:	dc77      	bgt.n	800fe3a <__kernel_rem_pio2+0x202>
 800fd4a:	ec47 6b10 	vmov	d0, r6, r7
 800fd4e:	4650      	mov	r0, sl
 800fd50:	f000 fc0a 	bl	8010568 <scalbn>
 800fd54:	ec57 6b10 	vmov	r6, r7, d0
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fd5e:	ee10 0a10 	vmov	r0, s0
 800fd62:	4639      	mov	r1, r7
 800fd64:	f7f0 fc68 	bl	8000638 <__aeabi_dmul>
 800fd68:	ec41 0b10 	vmov	d0, r0, r1
 800fd6c:	f000 fb7c 	bl	8010468 <floor>
 800fd70:	4b7c      	ldr	r3, [pc, #496]	; (800ff64 <__kernel_rem_pio2+0x32c>)
 800fd72:	ec51 0b10 	vmov	r0, r1, d0
 800fd76:	2200      	movs	r2, #0
 800fd78:	f7f0 fc5e 	bl	8000638 <__aeabi_dmul>
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4630      	mov	r0, r6
 800fd82:	4639      	mov	r1, r7
 800fd84:	f7f0 faa0 	bl	80002c8 <__aeabi_dsub>
 800fd88:	460f      	mov	r7, r1
 800fd8a:	4606      	mov	r6, r0
 800fd8c:	f7f0 ff04 	bl	8000b98 <__aeabi_d2iz>
 800fd90:	9004      	str	r0, [sp, #16]
 800fd92:	f7f0 fbe7 	bl	8000564 <__aeabi_i2d>
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4630      	mov	r0, r6
 800fd9c:	4639      	mov	r1, r7
 800fd9e:	f7f0 fa93 	bl	80002c8 <__aeabi_dsub>
 800fda2:	f1ba 0f00 	cmp.w	sl, #0
 800fda6:	4606      	mov	r6, r0
 800fda8:	460f      	mov	r7, r1
 800fdaa:	dd6d      	ble.n	800fe88 <__kernel_rem_pio2+0x250>
 800fdac:	1e62      	subs	r2, r4, #1
 800fdae:	ab0e      	add	r3, sp, #56	; 0x38
 800fdb0:	9d04      	ldr	r5, [sp, #16]
 800fdb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fdb6:	f1ca 0118 	rsb	r1, sl, #24
 800fdba:	fa40 f301 	asr.w	r3, r0, r1
 800fdbe:	441d      	add	r5, r3
 800fdc0:	408b      	lsls	r3, r1
 800fdc2:	1ac0      	subs	r0, r0, r3
 800fdc4:	ab0e      	add	r3, sp, #56	; 0x38
 800fdc6:	9504      	str	r5, [sp, #16]
 800fdc8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fdcc:	f1ca 0317 	rsb	r3, sl, #23
 800fdd0:	fa40 fb03 	asr.w	fp, r0, r3
 800fdd4:	f1bb 0f00 	cmp.w	fp, #0
 800fdd8:	dd65      	ble.n	800fea6 <__kernel_rem_pio2+0x26e>
 800fdda:	9b04      	ldr	r3, [sp, #16]
 800fddc:	2200      	movs	r2, #0
 800fdde:	3301      	adds	r3, #1
 800fde0:	9304      	str	r3, [sp, #16]
 800fde2:	4615      	mov	r5, r2
 800fde4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fde8:	4294      	cmp	r4, r2
 800fdea:	f300 809c 	bgt.w	800ff26 <__kernel_rem_pio2+0x2ee>
 800fdee:	f1ba 0f00 	cmp.w	sl, #0
 800fdf2:	dd07      	ble.n	800fe04 <__kernel_rem_pio2+0x1cc>
 800fdf4:	f1ba 0f01 	cmp.w	sl, #1
 800fdf8:	f000 80c0 	beq.w	800ff7c <__kernel_rem_pio2+0x344>
 800fdfc:	f1ba 0f02 	cmp.w	sl, #2
 800fe00:	f000 80c6 	beq.w	800ff90 <__kernel_rem_pio2+0x358>
 800fe04:	f1bb 0f02 	cmp.w	fp, #2
 800fe08:	d14d      	bne.n	800fea6 <__kernel_rem_pio2+0x26e>
 800fe0a:	4632      	mov	r2, r6
 800fe0c:	463b      	mov	r3, r7
 800fe0e:	4956      	ldr	r1, [pc, #344]	; (800ff68 <__kernel_rem_pio2+0x330>)
 800fe10:	2000      	movs	r0, #0
 800fe12:	f7f0 fa59 	bl	80002c8 <__aeabi_dsub>
 800fe16:	4606      	mov	r6, r0
 800fe18:	460f      	mov	r7, r1
 800fe1a:	2d00      	cmp	r5, #0
 800fe1c:	d043      	beq.n	800fea6 <__kernel_rem_pio2+0x26e>
 800fe1e:	4650      	mov	r0, sl
 800fe20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ff58 <__kernel_rem_pio2+0x320>
 800fe24:	f000 fba0 	bl	8010568 <scalbn>
 800fe28:	4630      	mov	r0, r6
 800fe2a:	4639      	mov	r1, r7
 800fe2c:	ec53 2b10 	vmov	r2, r3, d0
 800fe30:	f7f0 fa4a 	bl	80002c8 <__aeabi_dsub>
 800fe34:	4606      	mov	r6, r0
 800fe36:	460f      	mov	r7, r1
 800fe38:	e035      	b.n	800fea6 <__kernel_rem_pio2+0x26e>
 800fe3a:	4b4c      	ldr	r3, [pc, #304]	; (800ff6c <__kernel_rem_pio2+0x334>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	4630      	mov	r0, r6
 800fe40:	4639      	mov	r1, r7
 800fe42:	f7f0 fbf9 	bl	8000638 <__aeabi_dmul>
 800fe46:	f7f0 fea7 	bl	8000b98 <__aeabi_d2iz>
 800fe4a:	f7f0 fb8b 	bl	8000564 <__aeabi_i2d>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	460b      	mov	r3, r1
 800fe52:	ec43 2b18 	vmov	d8, r2, r3
 800fe56:	4b46      	ldr	r3, [pc, #280]	; (800ff70 <__kernel_rem_pio2+0x338>)
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f7f0 fbed 	bl	8000638 <__aeabi_dmul>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	460b      	mov	r3, r1
 800fe62:	4630      	mov	r0, r6
 800fe64:	4639      	mov	r1, r7
 800fe66:	f7f0 fa2f 	bl	80002c8 <__aeabi_dsub>
 800fe6a:	f7f0 fe95 	bl	8000b98 <__aeabi_d2iz>
 800fe6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe72:	f84b 0b04 	str.w	r0, [fp], #4
 800fe76:	ec51 0b18 	vmov	r0, r1, d8
 800fe7a:	f7f0 fa27 	bl	80002cc <__adddf3>
 800fe7e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fe82:	4606      	mov	r6, r0
 800fe84:	460f      	mov	r7, r1
 800fe86:	e75b      	b.n	800fd40 <__kernel_rem_pio2+0x108>
 800fe88:	d106      	bne.n	800fe98 <__kernel_rem_pio2+0x260>
 800fe8a:	1e63      	subs	r3, r4, #1
 800fe8c:	aa0e      	add	r2, sp, #56	; 0x38
 800fe8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800fe96:	e79d      	b.n	800fdd4 <__kernel_rem_pio2+0x19c>
 800fe98:	4b36      	ldr	r3, [pc, #216]	; (800ff74 <__kernel_rem_pio2+0x33c>)
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f7f0 fe52 	bl	8000b44 <__aeabi_dcmpge>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	d13d      	bne.n	800ff20 <__kernel_rem_pio2+0x2e8>
 800fea4:	4683      	mov	fp, r0
 800fea6:	2200      	movs	r2, #0
 800fea8:	2300      	movs	r3, #0
 800feaa:	4630      	mov	r0, r6
 800feac:	4639      	mov	r1, r7
 800feae:	f7f0 fe2b 	bl	8000b08 <__aeabi_dcmpeq>
 800feb2:	2800      	cmp	r0, #0
 800feb4:	f000 80c0 	beq.w	8010038 <__kernel_rem_pio2+0x400>
 800feb8:	1e65      	subs	r5, r4, #1
 800feba:	462b      	mov	r3, r5
 800febc:	2200      	movs	r2, #0
 800febe:	9902      	ldr	r1, [sp, #8]
 800fec0:	428b      	cmp	r3, r1
 800fec2:	da6c      	bge.n	800ff9e <__kernel_rem_pio2+0x366>
 800fec4:	2a00      	cmp	r2, #0
 800fec6:	f000 8089 	beq.w	800ffdc <__kernel_rem_pio2+0x3a4>
 800feca:	ab0e      	add	r3, sp, #56	; 0x38
 800fecc:	f1aa 0a18 	sub.w	sl, sl, #24
 800fed0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 80ad 	beq.w	8010034 <__kernel_rem_pio2+0x3fc>
 800feda:	4650      	mov	r0, sl
 800fedc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ff58 <__kernel_rem_pio2+0x320>
 800fee0:	f000 fb42 	bl	8010568 <scalbn>
 800fee4:	ab9a      	add	r3, sp, #616	; 0x268
 800fee6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800feea:	ec57 6b10 	vmov	r6, r7, d0
 800feee:	00ec      	lsls	r4, r5, #3
 800fef0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800fef4:	46aa      	mov	sl, r5
 800fef6:	f1ba 0f00 	cmp.w	sl, #0
 800fefa:	f280 80d6 	bge.w	80100aa <__kernel_rem_pio2+0x472>
 800fefe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ff50 <__kernel_rem_pio2+0x318>
 800ff02:	462e      	mov	r6, r5
 800ff04:	2e00      	cmp	r6, #0
 800ff06:	f2c0 8104 	blt.w	8010112 <__kernel_rem_pio2+0x4da>
 800ff0a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ff0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ff10:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ff78 <__kernel_rem_pio2+0x340>
 800ff14:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ff18:	f04f 0800 	mov.w	r8, #0
 800ff1c:	1baf      	subs	r7, r5, r6
 800ff1e:	e0ea      	b.n	80100f6 <__kernel_rem_pio2+0x4be>
 800ff20:	f04f 0b02 	mov.w	fp, #2
 800ff24:	e759      	b.n	800fdda <__kernel_rem_pio2+0x1a2>
 800ff26:	f8d8 3000 	ldr.w	r3, [r8]
 800ff2a:	b955      	cbnz	r5, 800ff42 <__kernel_rem_pio2+0x30a>
 800ff2c:	b123      	cbz	r3, 800ff38 <__kernel_rem_pio2+0x300>
 800ff2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ff32:	f8c8 3000 	str.w	r3, [r8]
 800ff36:	2301      	movs	r3, #1
 800ff38:	3201      	adds	r2, #1
 800ff3a:	f108 0804 	add.w	r8, r8, #4
 800ff3e:	461d      	mov	r5, r3
 800ff40:	e752      	b.n	800fde8 <__kernel_rem_pio2+0x1b0>
 800ff42:	1acb      	subs	r3, r1, r3
 800ff44:	f8c8 3000 	str.w	r3, [r8]
 800ff48:	462b      	mov	r3, r5
 800ff4a:	e7f5      	b.n	800ff38 <__kernel_rem_pio2+0x300>
 800ff4c:	f3af 8000 	nop.w
	...
 800ff5c:	3ff00000 	.word	0x3ff00000
 800ff60:	08010c98 	.word	0x08010c98
 800ff64:	40200000 	.word	0x40200000
 800ff68:	3ff00000 	.word	0x3ff00000
 800ff6c:	3e700000 	.word	0x3e700000
 800ff70:	41700000 	.word	0x41700000
 800ff74:	3fe00000 	.word	0x3fe00000
 800ff78:	08010c58 	.word	0x08010c58
 800ff7c:	1e62      	subs	r2, r4, #1
 800ff7e:	ab0e      	add	r3, sp, #56	; 0x38
 800ff80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ff88:	a90e      	add	r1, sp, #56	; 0x38
 800ff8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ff8e:	e739      	b.n	800fe04 <__kernel_rem_pio2+0x1cc>
 800ff90:	1e62      	subs	r2, r4, #1
 800ff92:	ab0e      	add	r3, sp, #56	; 0x38
 800ff94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ff9c:	e7f4      	b.n	800ff88 <__kernel_rem_pio2+0x350>
 800ff9e:	a90e      	add	r1, sp, #56	; 0x38
 800ffa0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	430a      	orrs	r2, r1
 800ffa8:	e789      	b.n	800febe <__kernel_rem_pio2+0x286>
 800ffaa:	3301      	adds	r3, #1
 800ffac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ffb0:	2900      	cmp	r1, #0
 800ffb2:	d0fa      	beq.n	800ffaa <__kernel_rem_pio2+0x372>
 800ffb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffb6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ffba:	446a      	add	r2, sp
 800ffbc:	3a98      	subs	r2, #152	; 0x98
 800ffbe:	920a      	str	r2, [sp, #40]	; 0x28
 800ffc0:	9a08      	ldr	r2, [sp, #32]
 800ffc2:	18e3      	adds	r3, r4, r3
 800ffc4:	18a5      	adds	r5, r4, r2
 800ffc6:	aa22      	add	r2, sp, #136	; 0x88
 800ffc8:	f104 0801 	add.w	r8, r4, #1
 800ffcc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	9b04      	ldr	r3, [sp, #16]
 800ffd4:	4543      	cmp	r3, r8
 800ffd6:	da04      	bge.n	800ffe2 <__kernel_rem_pio2+0x3aa>
 800ffd8:	461c      	mov	r4, r3
 800ffda:	e6a3      	b.n	800fd24 <__kernel_rem_pio2+0xec>
 800ffdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e7e4      	b.n	800ffac <__kernel_rem_pio2+0x374>
 800ffe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffe4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ffe8:	f7f0 fabc 	bl	8000564 <__aeabi_i2d>
 800ffec:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fff2:	46ab      	mov	fp, r5
 800fff4:	461c      	mov	r4, r3
 800fff6:	f04f 0900 	mov.w	r9, #0
 800fffa:	2600      	movs	r6, #0
 800fffc:	2700      	movs	r7, #0
 800fffe:	9b06      	ldr	r3, [sp, #24]
 8010000:	4599      	cmp	r9, r3
 8010002:	dd06      	ble.n	8010012 <__kernel_rem_pio2+0x3da>
 8010004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010006:	e8e3 6702 	strd	r6, r7, [r3], #8
 801000a:	f108 0801 	add.w	r8, r8, #1
 801000e:	930a      	str	r3, [sp, #40]	; 0x28
 8010010:	e7df      	b.n	800ffd2 <__kernel_rem_pio2+0x39a>
 8010012:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010016:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801001a:	f7f0 fb0d 	bl	8000638 <__aeabi_dmul>
 801001e:	4602      	mov	r2, r0
 8010020:	460b      	mov	r3, r1
 8010022:	4630      	mov	r0, r6
 8010024:	4639      	mov	r1, r7
 8010026:	f7f0 f951 	bl	80002cc <__adddf3>
 801002a:	f109 0901 	add.w	r9, r9, #1
 801002e:	4606      	mov	r6, r0
 8010030:	460f      	mov	r7, r1
 8010032:	e7e4      	b.n	800fffe <__kernel_rem_pio2+0x3c6>
 8010034:	3d01      	subs	r5, #1
 8010036:	e748      	b.n	800feca <__kernel_rem_pio2+0x292>
 8010038:	ec47 6b10 	vmov	d0, r6, r7
 801003c:	f1ca 0000 	rsb	r0, sl, #0
 8010040:	f000 fa92 	bl	8010568 <scalbn>
 8010044:	ec57 6b10 	vmov	r6, r7, d0
 8010048:	4ba0      	ldr	r3, [pc, #640]	; (80102cc <__kernel_rem_pio2+0x694>)
 801004a:	ee10 0a10 	vmov	r0, s0
 801004e:	2200      	movs	r2, #0
 8010050:	4639      	mov	r1, r7
 8010052:	f7f0 fd77 	bl	8000b44 <__aeabi_dcmpge>
 8010056:	b1f8      	cbz	r0, 8010098 <__kernel_rem_pio2+0x460>
 8010058:	4b9d      	ldr	r3, [pc, #628]	; (80102d0 <__kernel_rem_pio2+0x698>)
 801005a:	2200      	movs	r2, #0
 801005c:	4630      	mov	r0, r6
 801005e:	4639      	mov	r1, r7
 8010060:	f7f0 faea 	bl	8000638 <__aeabi_dmul>
 8010064:	f7f0 fd98 	bl	8000b98 <__aeabi_d2iz>
 8010068:	4680      	mov	r8, r0
 801006a:	f7f0 fa7b 	bl	8000564 <__aeabi_i2d>
 801006e:	4b97      	ldr	r3, [pc, #604]	; (80102cc <__kernel_rem_pio2+0x694>)
 8010070:	2200      	movs	r2, #0
 8010072:	f7f0 fae1 	bl	8000638 <__aeabi_dmul>
 8010076:	460b      	mov	r3, r1
 8010078:	4602      	mov	r2, r0
 801007a:	4639      	mov	r1, r7
 801007c:	4630      	mov	r0, r6
 801007e:	f7f0 f923 	bl	80002c8 <__aeabi_dsub>
 8010082:	f7f0 fd89 	bl	8000b98 <__aeabi_d2iz>
 8010086:	1c65      	adds	r5, r4, #1
 8010088:	ab0e      	add	r3, sp, #56	; 0x38
 801008a:	f10a 0a18 	add.w	sl, sl, #24
 801008e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010092:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010096:	e720      	b.n	800feda <__kernel_rem_pio2+0x2a2>
 8010098:	4630      	mov	r0, r6
 801009a:	4639      	mov	r1, r7
 801009c:	f7f0 fd7c 	bl	8000b98 <__aeabi_d2iz>
 80100a0:	ab0e      	add	r3, sp, #56	; 0x38
 80100a2:	4625      	mov	r5, r4
 80100a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80100a8:	e717      	b.n	800feda <__kernel_rem_pio2+0x2a2>
 80100aa:	ab0e      	add	r3, sp, #56	; 0x38
 80100ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80100b0:	f7f0 fa58 	bl	8000564 <__aeabi_i2d>
 80100b4:	4632      	mov	r2, r6
 80100b6:	463b      	mov	r3, r7
 80100b8:	f7f0 fabe 	bl	8000638 <__aeabi_dmul>
 80100bc:	4b84      	ldr	r3, [pc, #528]	; (80102d0 <__kernel_rem_pio2+0x698>)
 80100be:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80100c2:	2200      	movs	r2, #0
 80100c4:	4630      	mov	r0, r6
 80100c6:	4639      	mov	r1, r7
 80100c8:	f7f0 fab6 	bl	8000638 <__aeabi_dmul>
 80100cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80100d0:	4606      	mov	r6, r0
 80100d2:	460f      	mov	r7, r1
 80100d4:	e70f      	b.n	800fef6 <__kernel_rem_pio2+0x2be>
 80100d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80100da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80100de:	f7f0 faab 	bl	8000638 <__aeabi_dmul>
 80100e2:	4602      	mov	r2, r0
 80100e4:	460b      	mov	r3, r1
 80100e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100ea:	f7f0 f8ef 	bl	80002cc <__adddf3>
 80100ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100f2:	f108 0801 	add.w	r8, r8, #1
 80100f6:	9b02      	ldr	r3, [sp, #8]
 80100f8:	4598      	cmp	r8, r3
 80100fa:	dc01      	bgt.n	8010100 <__kernel_rem_pio2+0x4c8>
 80100fc:	45b8      	cmp	r8, r7
 80100fe:	ddea      	ble.n	80100d6 <__kernel_rem_pio2+0x49e>
 8010100:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010104:	ab4a      	add	r3, sp, #296	; 0x128
 8010106:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801010a:	ed87 7b00 	vstr	d7, [r7]
 801010e:	3e01      	subs	r6, #1
 8010110:	e6f8      	b.n	800ff04 <__kernel_rem_pio2+0x2cc>
 8010112:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010114:	2b02      	cmp	r3, #2
 8010116:	dc0b      	bgt.n	8010130 <__kernel_rem_pio2+0x4f8>
 8010118:	2b00      	cmp	r3, #0
 801011a:	dc35      	bgt.n	8010188 <__kernel_rem_pio2+0x550>
 801011c:	d059      	beq.n	80101d2 <__kernel_rem_pio2+0x59a>
 801011e:	9b04      	ldr	r3, [sp, #16]
 8010120:	f003 0007 	and.w	r0, r3, #7
 8010124:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010128:	ecbd 8b02 	vpop	{d8}
 801012c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010130:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010132:	2b03      	cmp	r3, #3
 8010134:	d1f3      	bne.n	801011e <__kernel_rem_pio2+0x4e6>
 8010136:	ab4a      	add	r3, sp, #296	; 0x128
 8010138:	4423      	add	r3, r4
 801013a:	9306      	str	r3, [sp, #24]
 801013c:	461c      	mov	r4, r3
 801013e:	469a      	mov	sl, r3
 8010140:	9502      	str	r5, [sp, #8]
 8010142:	9b02      	ldr	r3, [sp, #8]
 8010144:	2b00      	cmp	r3, #0
 8010146:	f1aa 0a08 	sub.w	sl, sl, #8
 801014a:	dc6b      	bgt.n	8010224 <__kernel_rem_pio2+0x5ec>
 801014c:	46aa      	mov	sl, r5
 801014e:	f1ba 0f01 	cmp.w	sl, #1
 8010152:	f1a4 0408 	sub.w	r4, r4, #8
 8010156:	f300 8085 	bgt.w	8010264 <__kernel_rem_pio2+0x62c>
 801015a:	9c06      	ldr	r4, [sp, #24]
 801015c:	2000      	movs	r0, #0
 801015e:	3408      	adds	r4, #8
 8010160:	2100      	movs	r1, #0
 8010162:	2d01      	cmp	r5, #1
 8010164:	f300 809d 	bgt.w	80102a2 <__kernel_rem_pio2+0x66a>
 8010168:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801016c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010170:	f1bb 0f00 	cmp.w	fp, #0
 8010174:	f040 809b 	bne.w	80102ae <__kernel_rem_pio2+0x676>
 8010178:	9b01      	ldr	r3, [sp, #4]
 801017a:	e9c3 5600 	strd	r5, r6, [r3]
 801017e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010182:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010186:	e7ca      	b.n	801011e <__kernel_rem_pio2+0x4e6>
 8010188:	3408      	adds	r4, #8
 801018a:	ab4a      	add	r3, sp, #296	; 0x128
 801018c:	441c      	add	r4, r3
 801018e:	462e      	mov	r6, r5
 8010190:	2000      	movs	r0, #0
 8010192:	2100      	movs	r1, #0
 8010194:	2e00      	cmp	r6, #0
 8010196:	da36      	bge.n	8010206 <__kernel_rem_pio2+0x5ce>
 8010198:	f1bb 0f00 	cmp.w	fp, #0
 801019c:	d039      	beq.n	8010212 <__kernel_rem_pio2+0x5da>
 801019e:	4602      	mov	r2, r0
 80101a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101a4:	9c01      	ldr	r4, [sp, #4]
 80101a6:	e9c4 2300 	strd	r2, r3, [r4]
 80101aa:	4602      	mov	r2, r0
 80101ac:	460b      	mov	r3, r1
 80101ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80101b2:	f7f0 f889 	bl	80002c8 <__aeabi_dsub>
 80101b6:	ae4c      	add	r6, sp, #304	; 0x130
 80101b8:	2401      	movs	r4, #1
 80101ba:	42a5      	cmp	r5, r4
 80101bc:	da2c      	bge.n	8010218 <__kernel_rem_pio2+0x5e0>
 80101be:	f1bb 0f00 	cmp.w	fp, #0
 80101c2:	d002      	beq.n	80101ca <__kernel_rem_pio2+0x592>
 80101c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101c8:	4619      	mov	r1, r3
 80101ca:	9b01      	ldr	r3, [sp, #4]
 80101cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80101d0:	e7a5      	b.n	801011e <__kernel_rem_pio2+0x4e6>
 80101d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80101d6:	eb0d 0403 	add.w	r4, sp, r3
 80101da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80101de:	2000      	movs	r0, #0
 80101e0:	2100      	movs	r1, #0
 80101e2:	2d00      	cmp	r5, #0
 80101e4:	da09      	bge.n	80101fa <__kernel_rem_pio2+0x5c2>
 80101e6:	f1bb 0f00 	cmp.w	fp, #0
 80101ea:	d002      	beq.n	80101f2 <__kernel_rem_pio2+0x5ba>
 80101ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101f0:	4619      	mov	r1, r3
 80101f2:	9b01      	ldr	r3, [sp, #4]
 80101f4:	e9c3 0100 	strd	r0, r1, [r3]
 80101f8:	e791      	b.n	801011e <__kernel_rem_pio2+0x4e6>
 80101fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80101fe:	f7f0 f865 	bl	80002cc <__adddf3>
 8010202:	3d01      	subs	r5, #1
 8010204:	e7ed      	b.n	80101e2 <__kernel_rem_pio2+0x5aa>
 8010206:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801020a:	f7f0 f85f 	bl	80002cc <__adddf3>
 801020e:	3e01      	subs	r6, #1
 8010210:	e7c0      	b.n	8010194 <__kernel_rem_pio2+0x55c>
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	e7c5      	b.n	80101a4 <__kernel_rem_pio2+0x56c>
 8010218:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801021c:	f7f0 f856 	bl	80002cc <__adddf3>
 8010220:	3401      	adds	r4, #1
 8010222:	e7ca      	b.n	80101ba <__kernel_rem_pio2+0x582>
 8010224:	e9da 8900 	ldrd	r8, r9, [sl]
 8010228:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801022c:	9b02      	ldr	r3, [sp, #8]
 801022e:	3b01      	subs	r3, #1
 8010230:	9302      	str	r3, [sp, #8]
 8010232:	4632      	mov	r2, r6
 8010234:	463b      	mov	r3, r7
 8010236:	4640      	mov	r0, r8
 8010238:	4649      	mov	r1, r9
 801023a:	f7f0 f847 	bl	80002cc <__adddf3>
 801023e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010242:	4602      	mov	r2, r0
 8010244:	460b      	mov	r3, r1
 8010246:	4640      	mov	r0, r8
 8010248:	4649      	mov	r1, r9
 801024a:	f7f0 f83d 	bl	80002c8 <__aeabi_dsub>
 801024e:	4632      	mov	r2, r6
 8010250:	463b      	mov	r3, r7
 8010252:	f7f0 f83b 	bl	80002cc <__adddf3>
 8010256:	ed9d 7b08 	vldr	d7, [sp, #32]
 801025a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801025e:	ed8a 7b00 	vstr	d7, [sl]
 8010262:	e76e      	b.n	8010142 <__kernel_rem_pio2+0x50a>
 8010264:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010268:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801026c:	4640      	mov	r0, r8
 801026e:	4632      	mov	r2, r6
 8010270:	463b      	mov	r3, r7
 8010272:	4649      	mov	r1, r9
 8010274:	f7f0 f82a 	bl	80002cc <__adddf3>
 8010278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801027c:	4602      	mov	r2, r0
 801027e:	460b      	mov	r3, r1
 8010280:	4640      	mov	r0, r8
 8010282:	4649      	mov	r1, r9
 8010284:	f7f0 f820 	bl	80002c8 <__aeabi_dsub>
 8010288:	4632      	mov	r2, r6
 801028a:	463b      	mov	r3, r7
 801028c:	f7f0 f81e 	bl	80002cc <__adddf3>
 8010290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010294:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010298:	ed84 7b00 	vstr	d7, [r4]
 801029c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80102a0:	e755      	b.n	801014e <__kernel_rem_pio2+0x516>
 80102a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80102a6:	f7f0 f811 	bl	80002cc <__adddf3>
 80102aa:	3d01      	subs	r5, #1
 80102ac:	e759      	b.n	8010162 <__kernel_rem_pio2+0x52a>
 80102ae:	9b01      	ldr	r3, [sp, #4]
 80102b0:	9a01      	ldr	r2, [sp, #4]
 80102b2:	601d      	str	r5, [r3, #0]
 80102b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80102b8:	605c      	str	r4, [r3, #4]
 80102ba:	609f      	str	r7, [r3, #8]
 80102bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80102c0:	60d3      	str	r3, [r2, #12]
 80102c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102c6:	6110      	str	r0, [r2, #16]
 80102c8:	6153      	str	r3, [r2, #20]
 80102ca:	e728      	b.n	801011e <__kernel_rem_pio2+0x4e6>
 80102cc:	41700000 	.word	0x41700000
 80102d0:	3e700000 	.word	0x3e700000
 80102d4:	00000000 	.word	0x00000000

080102d8 <__kernel_sin>:
 80102d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102dc:	ed2d 8b04 	vpush	{d8-d9}
 80102e0:	eeb0 8a41 	vmov.f32	s16, s2
 80102e4:	eef0 8a61 	vmov.f32	s17, s3
 80102e8:	ec55 4b10 	vmov	r4, r5, d0
 80102ec:	b083      	sub	sp, #12
 80102ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80102f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80102f6:	9001      	str	r0, [sp, #4]
 80102f8:	da06      	bge.n	8010308 <__kernel_sin+0x30>
 80102fa:	ee10 0a10 	vmov	r0, s0
 80102fe:	4629      	mov	r1, r5
 8010300:	f7f0 fc4a 	bl	8000b98 <__aeabi_d2iz>
 8010304:	2800      	cmp	r0, #0
 8010306:	d051      	beq.n	80103ac <__kernel_sin+0xd4>
 8010308:	4622      	mov	r2, r4
 801030a:	462b      	mov	r3, r5
 801030c:	4620      	mov	r0, r4
 801030e:	4629      	mov	r1, r5
 8010310:	f7f0 f992 	bl	8000638 <__aeabi_dmul>
 8010314:	4682      	mov	sl, r0
 8010316:	468b      	mov	fp, r1
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	4620      	mov	r0, r4
 801031e:	4629      	mov	r1, r5
 8010320:	f7f0 f98a 	bl	8000638 <__aeabi_dmul>
 8010324:	a341      	add	r3, pc, #260	; (adr r3, 801042c <__kernel_sin+0x154>)
 8010326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032a:	4680      	mov	r8, r0
 801032c:	4689      	mov	r9, r1
 801032e:	4650      	mov	r0, sl
 8010330:	4659      	mov	r1, fp
 8010332:	f7f0 f981 	bl	8000638 <__aeabi_dmul>
 8010336:	a33f      	add	r3, pc, #252	; (adr r3, 8010434 <__kernel_sin+0x15c>)
 8010338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033c:	f7ef ffc4 	bl	80002c8 <__aeabi_dsub>
 8010340:	4652      	mov	r2, sl
 8010342:	465b      	mov	r3, fp
 8010344:	f7f0 f978 	bl	8000638 <__aeabi_dmul>
 8010348:	a33c      	add	r3, pc, #240	; (adr r3, 801043c <__kernel_sin+0x164>)
 801034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034e:	f7ef ffbd 	bl	80002cc <__adddf3>
 8010352:	4652      	mov	r2, sl
 8010354:	465b      	mov	r3, fp
 8010356:	f7f0 f96f 	bl	8000638 <__aeabi_dmul>
 801035a:	a33a      	add	r3, pc, #232	; (adr r3, 8010444 <__kernel_sin+0x16c>)
 801035c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010360:	f7ef ffb2 	bl	80002c8 <__aeabi_dsub>
 8010364:	4652      	mov	r2, sl
 8010366:	465b      	mov	r3, fp
 8010368:	f7f0 f966 	bl	8000638 <__aeabi_dmul>
 801036c:	a337      	add	r3, pc, #220	; (adr r3, 801044c <__kernel_sin+0x174>)
 801036e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010372:	f7ef ffab 	bl	80002cc <__adddf3>
 8010376:	9b01      	ldr	r3, [sp, #4]
 8010378:	4606      	mov	r6, r0
 801037a:	460f      	mov	r7, r1
 801037c:	b9eb      	cbnz	r3, 80103ba <__kernel_sin+0xe2>
 801037e:	4602      	mov	r2, r0
 8010380:	460b      	mov	r3, r1
 8010382:	4650      	mov	r0, sl
 8010384:	4659      	mov	r1, fp
 8010386:	f7f0 f957 	bl	8000638 <__aeabi_dmul>
 801038a:	a325      	add	r3, pc, #148	; (adr r3, 8010420 <__kernel_sin+0x148>)
 801038c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010390:	f7ef ff9a 	bl	80002c8 <__aeabi_dsub>
 8010394:	4642      	mov	r2, r8
 8010396:	464b      	mov	r3, r9
 8010398:	f7f0 f94e 	bl	8000638 <__aeabi_dmul>
 801039c:	4602      	mov	r2, r0
 801039e:	460b      	mov	r3, r1
 80103a0:	4620      	mov	r0, r4
 80103a2:	4629      	mov	r1, r5
 80103a4:	f7ef ff92 	bl	80002cc <__adddf3>
 80103a8:	4604      	mov	r4, r0
 80103aa:	460d      	mov	r5, r1
 80103ac:	ec45 4b10 	vmov	d0, r4, r5
 80103b0:	b003      	add	sp, #12
 80103b2:	ecbd 8b04 	vpop	{d8-d9}
 80103b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ba:	4b1b      	ldr	r3, [pc, #108]	; (8010428 <__kernel_sin+0x150>)
 80103bc:	ec51 0b18 	vmov	r0, r1, d8
 80103c0:	2200      	movs	r2, #0
 80103c2:	f7f0 f939 	bl	8000638 <__aeabi_dmul>
 80103c6:	4632      	mov	r2, r6
 80103c8:	ec41 0b19 	vmov	d9, r0, r1
 80103cc:	463b      	mov	r3, r7
 80103ce:	4640      	mov	r0, r8
 80103d0:	4649      	mov	r1, r9
 80103d2:	f7f0 f931 	bl	8000638 <__aeabi_dmul>
 80103d6:	4602      	mov	r2, r0
 80103d8:	460b      	mov	r3, r1
 80103da:	ec51 0b19 	vmov	r0, r1, d9
 80103de:	f7ef ff73 	bl	80002c8 <__aeabi_dsub>
 80103e2:	4652      	mov	r2, sl
 80103e4:	465b      	mov	r3, fp
 80103e6:	f7f0 f927 	bl	8000638 <__aeabi_dmul>
 80103ea:	ec53 2b18 	vmov	r2, r3, d8
 80103ee:	f7ef ff6b 	bl	80002c8 <__aeabi_dsub>
 80103f2:	a30b      	add	r3, pc, #44	; (adr r3, 8010420 <__kernel_sin+0x148>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	4606      	mov	r6, r0
 80103fa:	460f      	mov	r7, r1
 80103fc:	4640      	mov	r0, r8
 80103fe:	4649      	mov	r1, r9
 8010400:	f7f0 f91a 	bl	8000638 <__aeabi_dmul>
 8010404:	4602      	mov	r2, r0
 8010406:	460b      	mov	r3, r1
 8010408:	4630      	mov	r0, r6
 801040a:	4639      	mov	r1, r7
 801040c:	f7ef ff5e 	bl	80002cc <__adddf3>
 8010410:	4602      	mov	r2, r0
 8010412:	460b      	mov	r3, r1
 8010414:	4620      	mov	r0, r4
 8010416:	4629      	mov	r1, r5
 8010418:	f7ef ff56 	bl	80002c8 <__aeabi_dsub>
 801041c:	e7c4      	b.n	80103a8 <__kernel_sin+0xd0>
 801041e:	bf00      	nop
 8010420:	55555549 	.word	0x55555549
 8010424:	3fc55555 	.word	0x3fc55555
 8010428:	3fe00000 	.word	0x3fe00000
 801042c:	5acfd57c 	.word	0x5acfd57c
 8010430:	3de5d93a 	.word	0x3de5d93a
 8010434:	8a2b9ceb 	.word	0x8a2b9ceb
 8010438:	3e5ae5e6 	.word	0x3e5ae5e6
 801043c:	57b1fe7d 	.word	0x57b1fe7d
 8010440:	3ec71de3 	.word	0x3ec71de3
 8010444:	19c161d5 	.word	0x19c161d5
 8010448:	3f2a01a0 	.word	0x3f2a01a0
 801044c:	1110f8a6 	.word	0x1110f8a6
 8010450:	3f811111 	.word	0x3f811111

08010454 <fabs>:
 8010454:	ec51 0b10 	vmov	r0, r1, d0
 8010458:	ee10 2a10 	vmov	r2, s0
 801045c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010460:	ec43 2b10 	vmov	d0, r2, r3
 8010464:	4770      	bx	lr
	...

08010468 <floor>:
 8010468:	ec51 0b10 	vmov	r0, r1, d0
 801046c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010470:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010474:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010478:	2e13      	cmp	r6, #19
 801047a:	ee10 5a10 	vmov	r5, s0
 801047e:	ee10 8a10 	vmov	r8, s0
 8010482:	460c      	mov	r4, r1
 8010484:	dc32      	bgt.n	80104ec <floor+0x84>
 8010486:	2e00      	cmp	r6, #0
 8010488:	da14      	bge.n	80104b4 <floor+0x4c>
 801048a:	a333      	add	r3, pc, #204	; (adr r3, 8010558 <floor+0xf0>)
 801048c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010490:	f7ef ff1c 	bl	80002cc <__adddf3>
 8010494:	2200      	movs	r2, #0
 8010496:	2300      	movs	r3, #0
 8010498:	f7f0 fb5e 	bl	8000b58 <__aeabi_dcmpgt>
 801049c:	b138      	cbz	r0, 80104ae <floor+0x46>
 801049e:	2c00      	cmp	r4, #0
 80104a0:	da57      	bge.n	8010552 <floor+0xea>
 80104a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80104a6:	431d      	orrs	r5, r3
 80104a8:	d001      	beq.n	80104ae <floor+0x46>
 80104aa:	4c2d      	ldr	r4, [pc, #180]	; (8010560 <floor+0xf8>)
 80104ac:	2500      	movs	r5, #0
 80104ae:	4621      	mov	r1, r4
 80104b0:	4628      	mov	r0, r5
 80104b2:	e025      	b.n	8010500 <floor+0x98>
 80104b4:	4f2b      	ldr	r7, [pc, #172]	; (8010564 <floor+0xfc>)
 80104b6:	4137      	asrs	r7, r6
 80104b8:	ea01 0307 	and.w	r3, r1, r7
 80104bc:	4303      	orrs	r3, r0
 80104be:	d01f      	beq.n	8010500 <floor+0x98>
 80104c0:	a325      	add	r3, pc, #148	; (adr r3, 8010558 <floor+0xf0>)
 80104c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c6:	f7ef ff01 	bl	80002cc <__adddf3>
 80104ca:	2200      	movs	r2, #0
 80104cc:	2300      	movs	r3, #0
 80104ce:	f7f0 fb43 	bl	8000b58 <__aeabi_dcmpgt>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	d0eb      	beq.n	80104ae <floor+0x46>
 80104d6:	2c00      	cmp	r4, #0
 80104d8:	bfbe      	ittt	lt
 80104da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80104de:	fa43 f606 	asrlt.w	r6, r3, r6
 80104e2:	19a4      	addlt	r4, r4, r6
 80104e4:	ea24 0407 	bic.w	r4, r4, r7
 80104e8:	2500      	movs	r5, #0
 80104ea:	e7e0      	b.n	80104ae <floor+0x46>
 80104ec:	2e33      	cmp	r6, #51	; 0x33
 80104ee:	dd0b      	ble.n	8010508 <floor+0xa0>
 80104f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80104f4:	d104      	bne.n	8010500 <floor+0x98>
 80104f6:	ee10 2a10 	vmov	r2, s0
 80104fa:	460b      	mov	r3, r1
 80104fc:	f7ef fee6 	bl	80002cc <__adddf3>
 8010500:	ec41 0b10 	vmov	d0, r0, r1
 8010504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010508:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801050c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010510:	fa23 f707 	lsr.w	r7, r3, r7
 8010514:	4207      	tst	r7, r0
 8010516:	d0f3      	beq.n	8010500 <floor+0x98>
 8010518:	a30f      	add	r3, pc, #60	; (adr r3, 8010558 <floor+0xf0>)
 801051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051e:	f7ef fed5 	bl	80002cc <__adddf3>
 8010522:	2200      	movs	r2, #0
 8010524:	2300      	movs	r3, #0
 8010526:	f7f0 fb17 	bl	8000b58 <__aeabi_dcmpgt>
 801052a:	2800      	cmp	r0, #0
 801052c:	d0bf      	beq.n	80104ae <floor+0x46>
 801052e:	2c00      	cmp	r4, #0
 8010530:	da02      	bge.n	8010538 <floor+0xd0>
 8010532:	2e14      	cmp	r6, #20
 8010534:	d103      	bne.n	801053e <floor+0xd6>
 8010536:	3401      	adds	r4, #1
 8010538:	ea25 0507 	bic.w	r5, r5, r7
 801053c:	e7b7      	b.n	80104ae <floor+0x46>
 801053e:	2301      	movs	r3, #1
 8010540:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010544:	fa03 f606 	lsl.w	r6, r3, r6
 8010548:	4435      	add	r5, r6
 801054a:	4545      	cmp	r5, r8
 801054c:	bf38      	it	cc
 801054e:	18e4      	addcc	r4, r4, r3
 8010550:	e7f2      	b.n	8010538 <floor+0xd0>
 8010552:	2500      	movs	r5, #0
 8010554:	462c      	mov	r4, r5
 8010556:	e7aa      	b.n	80104ae <floor+0x46>
 8010558:	8800759c 	.word	0x8800759c
 801055c:	7e37e43c 	.word	0x7e37e43c
 8010560:	bff00000 	.word	0xbff00000
 8010564:	000fffff 	.word	0x000fffff

08010568 <scalbn>:
 8010568:	b570      	push	{r4, r5, r6, lr}
 801056a:	ec55 4b10 	vmov	r4, r5, d0
 801056e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010572:	4606      	mov	r6, r0
 8010574:	462b      	mov	r3, r5
 8010576:	b99a      	cbnz	r2, 80105a0 <scalbn+0x38>
 8010578:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801057c:	4323      	orrs	r3, r4
 801057e:	d036      	beq.n	80105ee <scalbn+0x86>
 8010580:	4b39      	ldr	r3, [pc, #228]	; (8010668 <scalbn+0x100>)
 8010582:	4629      	mov	r1, r5
 8010584:	ee10 0a10 	vmov	r0, s0
 8010588:	2200      	movs	r2, #0
 801058a:	f7f0 f855 	bl	8000638 <__aeabi_dmul>
 801058e:	4b37      	ldr	r3, [pc, #220]	; (801066c <scalbn+0x104>)
 8010590:	429e      	cmp	r6, r3
 8010592:	4604      	mov	r4, r0
 8010594:	460d      	mov	r5, r1
 8010596:	da10      	bge.n	80105ba <scalbn+0x52>
 8010598:	a32b      	add	r3, pc, #172	; (adr r3, 8010648 <scalbn+0xe0>)
 801059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059e:	e03a      	b.n	8010616 <scalbn+0xae>
 80105a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80105a4:	428a      	cmp	r2, r1
 80105a6:	d10c      	bne.n	80105c2 <scalbn+0x5a>
 80105a8:	ee10 2a10 	vmov	r2, s0
 80105ac:	4620      	mov	r0, r4
 80105ae:	4629      	mov	r1, r5
 80105b0:	f7ef fe8c 	bl	80002cc <__adddf3>
 80105b4:	4604      	mov	r4, r0
 80105b6:	460d      	mov	r5, r1
 80105b8:	e019      	b.n	80105ee <scalbn+0x86>
 80105ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80105be:	460b      	mov	r3, r1
 80105c0:	3a36      	subs	r2, #54	; 0x36
 80105c2:	4432      	add	r2, r6
 80105c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80105c8:	428a      	cmp	r2, r1
 80105ca:	dd08      	ble.n	80105de <scalbn+0x76>
 80105cc:	2d00      	cmp	r5, #0
 80105ce:	a120      	add	r1, pc, #128	; (adr r1, 8010650 <scalbn+0xe8>)
 80105d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105d4:	da1c      	bge.n	8010610 <scalbn+0xa8>
 80105d6:	a120      	add	r1, pc, #128	; (adr r1, 8010658 <scalbn+0xf0>)
 80105d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105dc:	e018      	b.n	8010610 <scalbn+0xa8>
 80105de:	2a00      	cmp	r2, #0
 80105e0:	dd08      	ble.n	80105f4 <scalbn+0x8c>
 80105e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80105e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80105ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105ee:	ec45 4b10 	vmov	d0, r4, r5
 80105f2:	bd70      	pop	{r4, r5, r6, pc}
 80105f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80105f8:	da19      	bge.n	801062e <scalbn+0xc6>
 80105fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80105fe:	429e      	cmp	r6, r3
 8010600:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010604:	dd0a      	ble.n	801061c <scalbn+0xb4>
 8010606:	a112      	add	r1, pc, #72	; (adr r1, 8010650 <scalbn+0xe8>)
 8010608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1e2      	bne.n	80105d6 <scalbn+0x6e>
 8010610:	a30f      	add	r3, pc, #60	; (adr r3, 8010650 <scalbn+0xe8>)
 8010612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010616:	f7f0 f80f 	bl	8000638 <__aeabi_dmul>
 801061a:	e7cb      	b.n	80105b4 <scalbn+0x4c>
 801061c:	a10a      	add	r1, pc, #40	; (adr r1, 8010648 <scalbn+0xe0>)
 801061e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d0b8      	beq.n	8010598 <scalbn+0x30>
 8010626:	a10e      	add	r1, pc, #56	; (adr r1, 8010660 <scalbn+0xf8>)
 8010628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801062c:	e7b4      	b.n	8010598 <scalbn+0x30>
 801062e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010632:	3236      	adds	r2, #54	; 0x36
 8010634:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010638:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801063c:	4620      	mov	r0, r4
 801063e:	4b0c      	ldr	r3, [pc, #48]	; (8010670 <scalbn+0x108>)
 8010640:	2200      	movs	r2, #0
 8010642:	e7e8      	b.n	8010616 <scalbn+0xae>
 8010644:	f3af 8000 	nop.w
 8010648:	c2f8f359 	.word	0xc2f8f359
 801064c:	01a56e1f 	.word	0x01a56e1f
 8010650:	8800759c 	.word	0x8800759c
 8010654:	7e37e43c 	.word	0x7e37e43c
 8010658:	8800759c 	.word	0x8800759c
 801065c:	fe37e43c 	.word	0xfe37e43c
 8010660:	c2f8f359 	.word	0xc2f8f359
 8010664:	81a56e1f 	.word	0x81a56e1f
 8010668:	43500000 	.word	0x43500000
 801066c:	ffff3cb0 	.word	0xffff3cb0
 8010670:	3c900000 	.word	0x3c900000

08010674 <_init>:
 8010674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010676:	bf00      	nop
 8010678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801067a:	bc08      	pop	{r3}
 801067c:	469e      	mov	lr, r3
 801067e:	4770      	bx	lr

08010680 <_fini>:
 8010680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010682:	bf00      	nop
 8010684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010686:	bc08      	pop	{r3}
 8010688:	469e      	mov	lr, r3
 801068a:	4770      	bx	lr
