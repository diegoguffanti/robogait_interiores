
TEST_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003acc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb0  08003cb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  2000000c  08003cc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08003cc4  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f038  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002238  00000000  00000000  0002f074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  00031e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022321  00000000  00000000  000328b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5e3  00000000  00000000  00054bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3534  00000000  00000000  000631bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001366f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  00136740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003c78 	.word	0x08003c78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003c78 	.word	0x08003c78

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
    AD_RES = HAL_ADC_GetValue(&hadc1);
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_ADC_ConvCpltCallback+0x20>)
 8000512:	f000 fe53 	bl	80011bc <HAL_ADC_GetValue>
 8000516:	4603      	mov	r3, r0
 8000518:	b29a      	uxth	r2, r3
 800051a:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_ADC_ConvCpltCallback+0x24>)
 800051c:	801a      	strh	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028
 800052c:	200005c0 	.word	0x200005c0

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fb7a 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f812 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f926 	bl	800078c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000540:	f000 f8cc 	bl	80006dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000544:	f000 f8f4 	bl	8000730 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000548:	f000 f876 	bl	8000638 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_IT(&hadc1);
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <main+0x2c>)
 800054e:	f000 fc47 	bl	8000de0 <HAL_ADC_Start_IT>
	  HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f000 fbdc 	bl	8000d10 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 8000558:	e7f8      	b.n	800054c <main+0x1c>
 800055a:	bf00      	nop
 800055c:	20000028 	.word	0x20000028

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fb7a 	bl	8003c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <SystemClock_Config+0xd0>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <SystemClock_Config+0xd4>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d4:	23a8      	movs	r3, #168	; 0xa8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fabd 	bl	8002b68 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 f978 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fc32 	bl	8001e80 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000622:	f000 f961 	bl	80008e8 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x98>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_ADC1_Init+0x98>)
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xa0>)
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000694:	2201      	movs	r2, #1
 8000696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_ADC1_Init+0x98>)
 800069a:	f000 fb5d 	bl	8000d58 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a4:	f000 f920 	bl	80008e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a8:	2303      	movs	r3, #3
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_ADC1_Init+0x98>)
 80006ba:	f000 fda1 	bl	8001200 <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c4:	f000 f910 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000028 	.word	0x20000028
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART3_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000714:	f002 fcc6 	bl	80030a4 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f8e3 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000070 	.word	0x20000070
 800072c:	40004800 	.word	0x40004800

08000730 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800073a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	2206      	movs	r2, #6
 8000740:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000744:	2202      	movs	r2, #2
 8000746:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2202      	movs	r2, #2
 8000752:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2201      	movs	r2, #1
 8000758:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	2201      	movs	r2, #1
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	f001 fa3b 	bl	8001bee <HAL_PCD_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f8b3 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000b4 	.word	0x200000b4

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b4c      	ldr	r3, [pc, #304]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a4b      	ldr	r2, [pc, #300]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b45      	ldr	r3, [pc, #276]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a44      	ldr	r2, [pc, #272]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a3d      	ldr	r2, [pc, #244]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b3b      	ldr	r3, [pc, #236]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b37      	ldr	r3, [pc, #220]	; (80008d8 <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a36      	ldr	r2, [pc, #216]	; (80008d8 <MX_GPIO_Init+0x14c>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <MX_GPIO_Init+0x14c>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <MX_GPIO_Init+0x14c>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000850:	4822      	ldr	r0, [pc, #136]	; (80008dc <MX_GPIO_Init+0x150>)
 8000852:	f001 f9b3 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	4821      	ldr	r0, [pc, #132]	; (80008e0 <MX_GPIO_Init+0x154>)
 800085c:	f001 f9ae 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	481b      	ldr	r0, [pc, #108]	; (80008e4 <MX_GPIO_Init+0x158>)
 8000878:	f001 f80c 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800087c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_GPIO_Init+0x150>)
 8000896:	f000 fffd 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <MX_GPIO_Init+0x154>)
 80008b2:	f000 ffef 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_GPIO_Init+0x154>)
 80008ca:	f000 ffe3 	bl	8001894 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020400 	.word	0x40020400
 80008e0:	40021800 	.word	0x40021800
 80008e4:	40020800 	.word	0x40020800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <HAL_ADC_MspInit+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12f      	bne.n	80009c6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <HAL_ADC_MspInit+0x90>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_ADC_MspInit+0x90>)
 8000970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_ADC_MspInit+0x90>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <HAL_ADC_MspInit+0x90>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <HAL_ADC_MspInit+0x90>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_ADC_MspInit+0x90>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800099e:	2308      	movs	r3, #8
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a2:	2303      	movs	r3, #3
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <HAL_ADC_MspInit+0x94>)
 80009b2:	f000 ff6f 	bl	8001894 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2012      	movs	r0, #18
 80009bc:	f000 ff33 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009c0:	2012      	movs	r0, #18
 80009c2:	f000 ff4c 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012000 	.word	0x40012000
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_UART_MspInit+0x84>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12c      	bne.n	8000a58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_UART_MspInit+0x8c>)
 8000a54:	f000 ff1e 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004800 	.word	0x40004800
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020c00 	.word	0x40020c00

08000a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0a0      	sub	sp, #128	; 0x80
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	225c      	movs	r2, #92	; 0x5c
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 f8eb 	bl	8003c68 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a9a:	d14e      	bne.n	8000b3a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fb02 	bl	80020b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000ab6:	f7ff ff17 	bl	80008e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <HAL_PCD_MspInit+0xd8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <HAL_PCD_MspInit+0xd8>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <HAL_PCD_MspInit+0xd8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ad6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ada:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4815      	ldr	r0, [pc, #84]	; (8000b48 <HAL_PCD_MspInit+0xdc>)
 8000af4:	f000 fece 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480e      	ldr	r0, [pc, #56]	; (8000b48 <HAL_PCD_MspInit+0xdc>)
 8000b0e:	f000 fec1 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_PCD_MspInit+0xd8>)
 8000b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_PCD_MspInit+0xd8>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	6353      	str	r3, [r2, #52]	; 0x34
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_PCD_MspInit+0xd8>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_PCD_MspInit+0xd8>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_PCD_MspInit+0xd8>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3780      	adds	r7, #128	; 0x80
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f89a 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <ADC_IRQHandler+0x10>)
 8000ba6:	f000 f9f9 	bl	8000f9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000028 	.word	0x20000028

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c02:	f7ff ffd7 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f003 f80b 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fc91 	bl	8000530 <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c1c:	08003cb8 	.word	0x08003cb8
  ldr r2, =_sbss
 8000c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c24:	200005c8 	.word	0x200005c8

08000c28 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <CAN1_RX0_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_Init+0x40>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_Init+0x40>)
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x40>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 fddb 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe48 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fdf3 	bl	800187a <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 fdbb 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	200005c4 	.word	0x200005c4

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200005c4 	.word	0x200005c4

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e033      	b.n	8000dd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d109      	bne.n	8000d8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fde4 	bl	8000944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d118      	bne.n	8000dc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d9e:	f023 0302 	bic.w	r3, r3, #2
 8000da2:	f043 0202 	orr.w	r2, r3, #2
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 fb5a 	bl	8001464 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc6:	e001      	b.n	8000dcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d101      	bne.n	8000dfa <HAL_ADC_Start_IT+0x1a>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e0bd      	b.n	8000f76 <HAL_ADC_Start_IT+0x196>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d018      	beq.n	8000e42 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e20:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <HAL_ADC_Start_IT+0x1a4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a58      	ldr	r2, [pc, #352]	; (8000f88 <HAL_ADC_Start_IT+0x1a8>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9a      	lsrs	r2, r3, #18
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e34:	e002      	b.n	8000e3c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	f040 8085 	bne.w	8000f5c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e5a:	f023 0301 	bic.w	r3, r3, #1
 8000e5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e90:	d106      	bne.n	8000ea0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f023 0206 	bic.w	r2, r3, #6
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
 8000e9e:	e002      	b.n	8000ea6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <HAL_ADC_Start_IT+0x1ac>)
 8000eb0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000eba:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d12a      	bne.n	8000f32 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2b      	ldr	r2, [pc, #172]	; (8000f90 <HAL_ADC_Start_IT+0x1b0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d015      	beq.n	8000f12 <HAL_ADC_Start_IT+0x132>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2a      	ldr	r2, [pc, #168]	; (8000f94 <HAL_ADC_Start_IT+0x1b4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d105      	bne.n	8000efc <HAL_ADC_Start_IT+0x11c>
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <HAL_ADC_Start_IT+0x1ac>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00a      	beq.n	8000f12 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <HAL_ADC_Start_IT+0x1b8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d136      	bne.n	8000f74 <HAL_ADC_Start_IT+0x194>
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <HAL_ADC_Start_IT+0x1ac>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d130      	bne.n	8000f74 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d129      	bne.n	8000f74 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	e020      	b.n	8000f74 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <HAL_ADC_Start_IT+0x1b0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d11b      	bne.n	8000f74 <HAL_ADC_Start_IT+0x194>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d114      	bne.n	8000f74 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	e00b      	b.n	8000f74 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f043 0210 	orr.w	r2, r3, #16
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000000 	.word	0x20000000
 8000f88:	431bde83 	.word	0x431bde83
 8000f8c:	40012300 	.word	0x40012300
 8000f90:	40012000 	.word	0x40012000
 8000f94:	40012100 	.word	0x40012100
 8000f98:	40012200 	.word	0x40012200

08000f9c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f003 0320 	and.w	r3, r3, #32
 8000fca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d049      	beq.n	8001066 <HAL_ADC_IRQHandler+0xca>
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d046      	beq.n	8001066 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d105      	bne.n	8000ff0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d12b      	bne.n	8001056 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001002:	2b00      	cmp	r3, #0
 8001004:	d127      	bne.n	8001056 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800101e:	2b00      	cmp	r3, #0
 8001020:	d119      	bne.n	8001056 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0220 	bic.w	r2, r2, #32
 8001030:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d105      	bne.n	8001056 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f043 0201 	orr.w	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fa56 	bl	8000508 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f06f 0212 	mvn.w	r2, #18
 8001064:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001074:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d057      	beq.n	800112c <HAL_ADC_IRQHandler+0x190>
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d054      	beq.n	800112c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	d105      	bne.n	800109a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d139      	bne.n	800111c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d12b      	bne.n	800111c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d124      	bne.n	800111c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d11d      	bne.n	800111c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d119      	bne.n	800111c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d105      	bne.n	800111c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f043 0201 	orr.w	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fa9d 	bl	800165c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f06f 020c 	mvn.w	r2, #12
 800112a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d017      	beq.n	8001172 <HAL_ADC_IRQHandler+0x1d6>
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d014      	beq.n	8001172 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d10d      	bne.n	8001172 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f837 	bl	80011d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0201 	mvn.w	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001180:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d015      	beq.n	80011b4 <HAL_ADC_IRQHandler+0x218>
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d012      	beq.n	80011b4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f043 0202 	orr.w	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f06f 0220 	mvn.w	r2, #32
 80011a2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f820 	bl	80011ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f06f 0220 	mvn.w	r2, #32
 80011b2:	601a      	str	r2, [r3, #0]
  }
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1c>
 8001218:	2302      	movs	r3, #2
 800121a:	e113      	b.n	8001444 <HAL_ADC_ConfigChannel+0x244>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d925      	bls.n	8001278 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68d9      	ldr	r1, [r3, #12]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3b1e      	subs	r3, #30
 8001242:	2207      	movs	r2, #7
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43da      	mvns	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	400a      	ands	r2, r1
 8001250:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68d9      	ldr	r1, [r3, #12]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	4603      	mov	r3, r0
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4403      	add	r3, r0
 800126a:	3b1e      	subs	r3, #30
 800126c:	409a      	lsls	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	e022      	b.n	80012be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	2207      	movs	r2, #7
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	400a      	ands	r2, r1
 800129a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6919      	ldr	r1, [r3, #16]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4403      	add	r3, r0
 80012b4:	409a      	lsls	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d824      	bhi.n	8001310 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b05      	subs	r3, #5
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	400a      	ands	r2, r1
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3b05      	subs	r3, #5
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
 800130e:	e04c      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b0c      	cmp	r3, #12
 8001316:	d824      	bhi.n	8001362 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3b23      	subs	r3, #35	; 0x23
 800132a:	221f      	movs	r2, #31
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43da      	mvns	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b23      	subs	r3, #35	; 0x23
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
 8001360:	e023      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	3b41      	subs	r3, #65	; 0x41
 8001374:	221f      	movs	r2, #31
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3b41      	subs	r3, #65	; 0x41
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_ADC_ConfigChannel+0x250>)
 80013ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a28      	ldr	r2, [pc, #160]	; (8001454 <HAL_ADC_ConfigChannel+0x254>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d10f      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1d8>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b12      	cmp	r3, #18
 80013be:	d10b      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_ADC_ConfigChannel+0x254>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12b      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_ADC_ConfigChannel+0x258>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d003      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x1f4>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b11      	cmp	r3, #17
 80013f2:	d122      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_ADC_ConfigChannel+0x258>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d111      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_ADC_ConfigChannel+0x25c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_ADC_ConfigChannel+0x260>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9a      	lsrs	r2, r3, #18
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800142c:	e002      	b.n	8001434 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3b01      	subs	r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40012300 	.word	0x40012300
 8001454:	40012000 	.word	0x40012000
 8001458:	10000012 	.word	0x10000012
 800145c:	20000000 	.word	0x20000000
 8001460:	431bde83 	.word	0x431bde83

08001464 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800146c:	4b79      	ldr	r3, [pc, #484]	; (8001654 <ADC_Init+0x1f0>)
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	021a      	lsls	r2, r3, #8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6899      	ldr	r1, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <ADC_Init+0x1f4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d022      	beq.n	8001542 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800150a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800152c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6899      	ldr	r1, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	e00f      	b.n	8001562 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001560:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0202 	bic.w	r2, r2, #2
 8001570:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7e1b      	ldrb	r3, [r3, #24]
 800157c:	005a      	lsls	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01b      	beq.n	80015c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800159e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	3b01      	subs	r3, #1
 80015bc:	035a      	lsls	r2, r3, #13
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	e007      	b.n	80015d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	051a      	lsls	r2, r3, #20
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800160c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6899      	ldr	r1, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800161a:	025a      	lsls	r2, r3, #9
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	029a      	lsls	r2, r3, #10
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40012300 	.word	0x40012300
 8001658:	0f000001 	.word	0x0f000001

0800165c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff29 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff3e 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff8e 	bl	8001764 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff31 	bl	80016d4 <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e165      	b.n	8001b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8154 	bne.w	8001b76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80ae 	beq.w	8001b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_GPIO_Init+0x300>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a5c      	ldr	r2, [pc, #368]	; (8001b94 <HAL_GPIO_Init+0x300>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_GPIO_Init+0x300>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a36:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_GPIO_Init+0x308>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x21a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4e      	ldr	r2, [pc, #312]	; (8001ba0 <HAL_GPIO_Init+0x30c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x216>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ba4 <HAL_GPIO_Init+0x310>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x212>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_GPIO_Init+0x314>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x20e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <HAL_GPIO_Init+0x318>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x20a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <HAL_GPIO_Init+0x31c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x206>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a49      	ldr	r2, [pc, #292]	; (8001bb4 <HAL_GPIO_Init+0x320>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x202>
 8001a92:	2306      	movs	r3, #6
 8001a94:	e00c      	b.n	8001ab0 <HAL_GPIO_Init+0x21c>
 8001a96:	2307      	movs	r3, #7
 8001a98:	e00a      	b.n	8001ab0 <HAL_GPIO_Init+0x21c>
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	e008      	b.n	8001ab0 <HAL_GPIO_Init+0x21c>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x21c>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x21c>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x21c>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x21c>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f002 0203 	and.w	r2, r2, #3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac0:	4935      	ldr	r1, [pc, #212]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af2:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b1c:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b0f      	cmp	r3, #15
 8001b80:	f67f ae96 	bls.w	80018b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40021400 	.word	0x40021400
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40013c00 	.word	0x40013c00

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd8:	e003      	b.n	8001be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	041a      	lsls	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	619a      	str	r2, [r3, #24]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf0:	b08f      	sub	sp, #60	; 0x3c
 8001bf2:	af0a      	add	r7, sp, #40	; 0x28
 8001bf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e116      	b.n	8001e2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe ff26 	bl	8000a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 fd53 	bl	80036ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	687e      	ldr	r6, [r7, #4]
 8001c4c:	466d      	mov	r5, sp
 8001c4e:	f106 0410 	add.w	r4, r6, #16
 8001c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c62:	1d33      	adds	r3, r6, #4
 8001c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c66:	6838      	ldr	r0, [r7, #0]
 8001c68:	f001 fcde 	bl	8003628 <USB_CoreInit>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2202      	movs	r2, #2
 8001c76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0d7      	b.n	8001e2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fd41 	bl	800370c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e04a      	b.n	8001d26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	333d      	adds	r3, #61	; 0x3d
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	333c      	adds	r3, #60	; 0x3c
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	b298      	uxth	r0, r3
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3344      	adds	r3, #68	; 0x44
 8001ccc:	4602      	mov	r2, r0
 8001cce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3340      	adds	r3, #64	; 0x40
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3348      	adds	r3, #72	; 0x48
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	334c      	adds	r3, #76	; 0x4c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3354      	adds	r3, #84	; 0x54
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	3301      	adds	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d3af      	bcc.n	8001c90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e044      	b.n	8001dc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3b5      	bcc.n	8001d36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	687e      	ldr	r6, [r7, #4]
 8001dd2:	466d      	mov	r5, sp
 8001dd4:	f106 0410 	add.w	r4, r6, #16
 8001dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de8:	1d33      	adds	r3, r6, #4
 8001dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dec:	6838      	ldr	r0, [r7, #0]
 8001dee:	f001 fcd9 	bl	80037a4 <USB_DevInit>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e014      	b.n	8001e2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d102      	bne.n	8001e22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f80a 	bl	8001e36 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 fe97 	bl	8003b5a <USB_DevDisconnect>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e36 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	f043 0303 	orr.w	r3, r3, #3
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0cc      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d90c      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b8      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	494d      	ldr	r1, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d044      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e067      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4934      	ldr	r1, [pc, #208]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7fe fec2 	bl	8000cf8 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7fe febe 	bl	8000cf8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e04f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d20c      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e032      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4916      	ldr	r1, [pc, #88]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002006:	f000 fb7f 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	490a      	ldr	r1, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fe22 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00
 800203c:	40023800 	.word	0x40023800
 8002040:	08003c90 	.word	0x08003c90
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_RCC_GetHCLKFreq+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000

08002064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002068:	f7ff fff0 	bl	800204c <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0a9b      	lsrs	r3, r3, #10
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	08003ca0 	.word	0x08003ca0

0800208c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002090:	f7ff ffdc 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0b5b      	lsrs	r3, r3, #13
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4903      	ldr	r1, [pc, #12]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	08003ca0 	.word	0x08003ca0

080020b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	; 0x30
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d010      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80020ec:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	496c      	ldr	r1, [pc, #432]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800210a:	2301      	movs	r3, #1
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800211a:	4b64      	ldr	r3, [pc, #400]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800211c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002120:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	4960      	ldr	r1, [pc, #384]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002138:	2301      	movs	r3, #1
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d017      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002148:	4b58      	ldr	r3, [pc, #352]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800214a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4955      	ldr	r1, [pc, #340]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002166:	d101      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002168:	2301      	movs	r3, #1
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002174:	2301      	movs	r3, #1
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d017      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002184:	4b49      	ldr	r3, [pc, #292]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800218a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002192:	4946      	ldr	r1, [pc, #280]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a2:	d101      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 808a 	beq.w	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a38      	ldr	r2, [pc, #224]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a33      	ldr	r2, [pc, #204]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021ea:	f7fe fd85 	bl	8000cf8 <HAL_GetTick>
 80021ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7fe fd81 	bl	8000cf8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e278      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002210:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002218:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02f      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002228:	6a3a      	ldr	r2, [r7, #32]
 800222a:	429a      	cmp	r2, r3
 800222c:	d028      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002236:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002244:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d114      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fd4f 	bl	8000cf8 <HAL_GetTick>
 800225a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe fd4b 	bl	8000cf8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e240      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ee      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800228c:	d114      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800229e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a2:	4902      	ldr	r1, [pc, #8]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
 80022a8:	e00c      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000
 80022b4:	42470e40 	.word	0x42470e40
 80022b8:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a49      	ldr	r2, [pc, #292]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022c2:	6093      	str	r3, [r2, #8]
 80022c4:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	4944      	ldr	r1, [pc, #272]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80022ea:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	4937      	ldr	r1, [pc, #220]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800231a:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002320:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	492e      	ldr	r1, [pc, #184]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d011      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002342:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	4926      	ldr	r1, [pc, #152]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235a:	d101      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800235c:	2301      	movs	r3, #1
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800236e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002372:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	491a      	ldr	r1, [pc, #104]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238a:	2b00      	cmp	r3, #0
 800238c:	d011      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002394:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239c:	4911      	ldr	r1, [pc, #68]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023ac:	d101      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80023ae:	2301      	movs	r3, #1
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d005      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c0:	f040 80ff 	bne.w	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023ca:	f7fe fc95 	bl	8000cf8 <HAL_GetTick>
 80023ce:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023d0:	e00e      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023d2:	f7fe fc91 	bl	8000cf8 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d907      	bls.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e188      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80023e4:	40023800 	.word	0x40023800
 80023e8:	424711e0 	.word	0x424711e0
 80023ec:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023f0:	4b7e      	ldr	r3, [pc, #504]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ea      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002418:	2b00      	cmp	r3, #0
 800241a:	d028      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d124      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002424:	4b71      	ldr	r3, [pc, #452]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	3301      	adds	r3, #1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002436:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800243c:	0e1b      	lsrs	r3, r3, #24
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	431a      	orrs	r2, r3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	431a      	orrs	r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	4961      	ldr	r1, [pc, #388]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800248c:	2b00      	cmp	r3, #0
 800248e:	d035      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002498:	d130      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800249c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	3301      	adds	r3, #1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024ac:	4b4f      	ldr	r3, [pc, #316]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b2:	0f1b      	lsrs	r3, r3, #28
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	019b      	lsls	r3, r3, #6
 80024c4:	431a      	orrs	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	085b      	lsrs	r3, r3, #1
 80024ca:	3b01      	subs	r3, #1
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	431a      	orrs	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	071b      	lsls	r3, r3, #28
 80024dc:	4943      	ldr	r1, [pc, #268]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ea:	f023 021f 	bic.w	r2, r3, #31
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	3b01      	subs	r3, #1
 80024f4:	493d      	ldr	r1, [pc, #244]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d029      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002510:	d124      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252a:	0f1b      	lsrs	r3, r3, #28
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	019b      	lsls	r3, r3, #6
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	3b01      	subs	r3, #1
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	431a      	orrs	r2, r3
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	431a      	orrs	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	071b      	lsls	r3, r3, #28
 8002554:	4925      	ldr	r1, [pc, #148]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002564:	2b00      	cmp	r3, #0
 8002566:	d016      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	3b01      	subs	r3, #1
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	071b      	lsls	r3, r3, #28
 800258e:	4917      	ldr	r1, [pc, #92]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800259c:	f7fe fbac 	bl	8000cf8 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025a4:	f7fe fba8 	bl	8000cf8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e09f      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 8095 	bne.w	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fb92 	bl	8000cf8 <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025d6:	e00f      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80025d8:	f7fe fb8e 	bl	8000cf8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d908      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e085      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	42470068 	.word	0x42470068
 80025f4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025f8:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002604:	d0e8      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d02b      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262a:	2b00      	cmp	r3, #0
 800262c:	d127      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800262e:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	431a      	orrs	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4928      	ldr	r1, [pc, #160]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800266a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	3b01      	subs	r3, #1
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	4922      	ldr	r1, [pc, #136]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01d      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002692:	d118      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	0e1b      	lsrs	r3, r3, #24
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	019b      	lsls	r3, r3, #6
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	3b01      	subs	r3, #1
 80026b6:	041b      	lsls	r3, r3, #16
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4910      	ldr	r1, [pc, #64]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026cc:	f7fe fb14 	bl	8000cf8 <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80026d4:	f7fe fb10 	bl	8000cf8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e007      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f2:	d1ef      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3730      	adds	r7, #48	; 0x30
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	42470070 	.word	0x42470070

08002708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800270c:	b0ae      	sub	sp, #184	; 0xb8
 800270e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800272e:	4bcb      	ldr	r3, [pc, #812]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b0c      	cmp	r3, #12
 8002738:	f200 8206 	bhi.w	8002b48 <HAL_RCC_GetSysClockFreq+0x440>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <HAL_RCC_GetSysClockFreq+0x3c>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002779 	.word	0x08002779
 8002748:	08002b49 	.word	0x08002b49
 800274c:	08002b49 	.word	0x08002b49
 8002750:	08002b49 	.word	0x08002b49
 8002754:	08002781 	.word	0x08002781
 8002758:	08002b49 	.word	0x08002b49
 800275c:	08002b49 	.word	0x08002b49
 8002760:	08002b49 	.word	0x08002b49
 8002764:	08002789 	.word	0x08002789
 8002768:	08002b49 	.word	0x08002b49
 800276c:	08002b49 	.word	0x08002b49
 8002770:	08002b49 	.word	0x08002b49
 8002774:	08002979 	.word	0x08002979
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4bb9      	ldr	r3, [pc, #740]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x358>)
 800277a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800277e:	e1e7      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002780:	4bb8      	ldr	r3, [pc, #736]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002786:	e1e3      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002788:	4bb4      	ldr	r3, [pc, #720]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002794:	4bb1      	ldr	r3, [pc, #708]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d071      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a0:	4bae      	ldr	r3, [pc, #696]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027c6:	4622      	mov	r2, r4
 80027c8:	462b      	mov	r3, r5
 80027ca:	f04f 0000 	mov.w	r0, #0
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	0159      	lsls	r1, r3, #5
 80027d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d8:	0150      	lsls	r0, r2, #5
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4621      	mov	r1, r4
 80027e0:	1a51      	subs	r1, r2, r1
 80027e2:	6439      	str	r1, [r7, #64]	; 0x40
 80027e4:	4629      	mov	r1, r5
 80027e6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ea:	647b      	str	r3, [r7, #68]	; 0x44
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80027f8:	4649      	mov	r1, r9
 80027fa:	018b      	lsls	r3, r1, #6
 80027fc:	4641      	mov	r1, r8
 80027fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002802:	4641      	mov	r1, r8
 8002804:	018a      	lsls	r2, r1, #6
 8002806:	4641      	mov	r1, r8
 8002808:	1a51      	subs	r1, r2, r1
 800280a:	63b9      	str	r1, [r7, #56]	; 0x38
 800280c:	4649      	mov	r1, r9
 800280e:	eb63 0301 	sbc.w	r3, r3, r1
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002820:	4649      	mov	r1, r9
 8002822:	00cb      	lsls	r3, r1, #3
 8002824:	4641      	mov	r1, r8
 8002826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800282a:	4641      	mov	r1, r8
 800282c:	00ca      	lsls	r2, r1, #3
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	4603      	mov	r3, r0
 8002834:	4622      	mov	r2, r4
 8002836:	189b      	adds	r3, r3, r2
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
 800283a:	462b      	mov	r3, r5
 800283c:	460a      	mov	r2, r1
 800283e:	eb42 0303 	adc.w	r3, r2, r3
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002850:	4629      	mov	r1, r5
 8002852:	024b      	lsls	r3, r1, #9
 8002854:	4621      	mov	r1, r4
 8002856:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800285a:	4621      	mov	r1, r4
 800285c:	024a      	lsls	r2, r1, #9
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002866:	2200      	movs	r2, #0
 8002868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800286c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002870:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002874:	f7fd fcc6 	bl	8000204 <__aeabi_uldivmod>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4613      	mov	r3, r2
 800287e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002882:	e067      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002884:	4b75      	ldr	r3, [pc, #468]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	2200      	movs	r2, #0
 800288c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002890:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002894:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289c:	67bb      	str	r3, [r7, #120]	; 0x78
 800289e:	2300      	movs	r3, #0
 80028a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80028a6:	4622      	mov	r2, r4
 80028a8:	462b      	mov	r3, r5
 80028aa:	f04f 0000 	mov.w	r0, #0
 80028ae:	f04f 0100 	mov.w	r1, #0
 80028b2:	0159      	lsls	r1, r3, #5
 80028b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b8:	0150      	lsls	r0, r2, #5
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4621      	mov	r1, r4
 80028c0:	1a51      	subs	r1, r2, r1
 80028c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80028c4:	4629      	mov	r1, r5
 80028c6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80028d8:	4649      	mov	r1, r9
 80028da:	018b      	lsls	r3, r1, #6
 80028dc:	4641      	mov	r1, r8
 80028de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028e2:	4641      	mov	r1, r8
 80028e4:	018a      	lsls	r2, r1, #6
 80028e6:	4641      	mov	r1, r8
 80028e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ec:	4649      	mov	r1, r9
 80028ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002906:	4692      	mov	sl, r2
 8002908:	469b      	mov	fp, r3
 800290a:	4623      	mov	r3, r4
 800290c:	eb1a 0303 	adds.w	r3, sl, r3
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	462b      	mov	r3, r5
 8002914:	eb4b 0303 	adc.w	r3, fp, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002926:	4629      	mov	r1, r5
 8002928:	028b      	lsls	r3, r1, #10
 800292a:	4621      	mov	r1, r4
 800292c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002930:	4621      	mov	r1, r4
 8002932:	028a      	lsls	r2, r1, #10
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800293c:	2200      	movs	r2, #0
 800293e:	673b      	str	r3, [r7, #112]	; 0x70
 8002940:	677a      	str	r2, [r7, #116]	; 0x74
 8002942:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002946:	f7fd fc5d 	bl	8000204 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4613      	mov	r3, r2
 8002950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002954:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800296a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002976:	e0eb      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002978:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d06b      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	2200      	movs	r2, #0
 8002998:	66bb      	str	r3, [r7, #104]	; 0x68
 800299a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800299c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800299e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a2:	663b      	str	r3, [r7, #96]	; 0x60
 80029a4:	2300      	movs	r3, #0
 80029a6:	667b      	str	r3, [r7, #100]	; 0x64
 80029a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029ac:	4622      	mov	r2, r4
 80029ae:	462b      	mov	r3, r5
 80029b0:	f04f 0000 	mov.w	r0, #0
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	0159      	lsls	r1, r3, #5
 80029ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029be:	0150      	lsls	r0, r2, #5
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4621      	mov	r1, r4
 80029c6:	1a51      	subs	r1, r2, r1
 80029c8:	61b9      	str	r1, [r7, #24]
 80029ca:	4629      	mov	r1, r5
 80029cc:	eb63 0301 	sbc.w	r3, r3, r1
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029de:	4659      	mov	r1, fp
 80029e0:	018b      	lsls	r3, r1, #6
 80029e2:	4651      	mov	r1, sl
 80029e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029e8:	4651      	mov	r1, sl
 80029ea:	018a      	lsls	r2, r1, #6
 80029ec:	4651      	mov	r1, sl
 80029ee:	ebb2 0801 	subs.w	r8, r2, r1
 80029f2:	4659      	mov	r1, fp
 80029f4:	eb63 0901 	sbc.w	r9, r3, r1
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a0c:	4690      	mov	r8, r2
 8002a0e:	4699      	mov	r9, r3
 8002a10:	4623      	mov	r3, r4
 8002a12:	eb18 0303 	adds.w	r3, r8, r3
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	462b      	mov	r3, r5
 8002a1a:	eb49 0303 	adc.w	r3, r9, r3
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	024b      	lsls	r3, r1, #9
 8002a30:	4621      	mov	r1, r4
 8002a32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a36:	4621      	mov	r1, r4
 8002a38:	024a      	lsls	r2, r1, #9
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a42:	2200      	movs	r2, #0
 8002a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a4c:	f7fd fbda 	bl	8000204 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a5a:	e065      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x420>
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a68:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	4611      	mov	r1, r2
 8002a74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a78:	653b      	str	r3, [r7, #80]	; 0x50
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	657b      	str	r3, [r7, #84]	; 0x54
 8002a7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a82:	4642      	mov	r2, r8
 8002a84:	464b      	mov	r3, r9
 8002a86:	f04f 0000 	mov.w	r0, #0
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	0159      	lsls	r1, r3, #5
 8002a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a94:	0150      	lsls	r0, r2, #5
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	1a51      	subs	r1, r2, r1
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	018b      	lsls	r3, r1, #6
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002abe:	4651      	mov	r1, sl
 8002ac0:	018a      	lsls	r2, r1, #6
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	1a54      	subs	r4, r2, r1
 8002ac6:	4659      	mov	r1, fp
 8002ac8:	eb63 0501 	sbc.w	r5, r3, r1
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	00eb      	lsls	r3, r5, #3
 8002ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ada:	00e2      	lsls	r2, r4, #3
 8002adc:	4614      	mov	r4, r2
 8002ade:	461d      	mov	r5, r3
 8002ae0:	4643      	mov	r3, r8
 8002ae2:	18e3      	adds	r3, r4, r3
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	eb45 0303 	adc.w	r3, r5, r3
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002afa:	4629      	mov	r1, r5
 8002afc:	028b      	lsls	r3, r1, #10
 8002afe:	4621      	mov	r1, r4
 8002b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b04:	4621      	mov	r1, r4
 8002b06:	028a      	lsls	r2, r1, #10
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b10:	2200      	movs	r2, #0
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b1a:	f7fd fb73 	bl	8000204 <__aeabi_uldivmod>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4613      	mov	r3, r2
 8002b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	0f1b      	lsrs	r3, r3, #28
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b46:	e003      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	37b8      	adds	r7, #184	; 0xb8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800
 8002b64:	00f42400 	.word	0x00f42400

08002b68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e28d      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8083 	beq.w	8002c8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b88:	4b94      	ldr	r3, [pc, #592]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d019      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b94:	4b91      	ldr	r3, [pc, #580]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ba0:	4b8e      	ldr	r3, [pc, #568]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bac:	d00c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bae:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d112      	bne.n	8002be0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bba:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	4b84      	ldr	r3, [pc, #528]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05b      	beq.n	8002c8c <HAL_RCC_OscConfig+0x124>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d157      	bne.n	8002c8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e25a      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x90>
 8002bea:	4b7c      	ldr	r3, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7b      	ldr	r2, [pc, #492]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e01d      	b.n	8002c34 <HAL_RCC_OscConfig+0xcc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0xb4>
 8002c02:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a75      	ldr	r2, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a72      	ldr	r2, [pc, #456]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0xcc>
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6e      	ldr	r2, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b6c      	ldr	r3, [pc, #432]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6b      	ldr	r2, [pc, #428]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f85c 	bl	8000cf8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe f858 	bl	8000cf8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e21f      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0xdc>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe f848 	bl	8000cf8 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe f844 	bl	8000cf8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e20b      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x104>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d06f      	beq.n	8002d7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c9a:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d017      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ca6:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cca:	4b44      	ldr	r3, [pc, #272]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x186>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1d3      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4937      	ldr	r1, [pc, #220]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e03a      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HAL_RCC_OscConfig+0x278>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fd fff1 	bl	8000cf8 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fd ffed 	bl	8000cf8 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1b4      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4925      	ldr	r1, [pc, #148]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCC_OscConfig+0x278>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fd ffd0 	bl	8000cf8 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fd ffcc 	bl	8000cf8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e193      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d036      	beq.n	8002df4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fd ffb0 	bl	8000cf8 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9c:	f7fd ffac 	bl	8000cf8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e173      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x234>
 8002dba:	e01b      	b.n	8002df4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fd ff99 	bl	8000cf8 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	e00e      	b.n	8002de8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fd ff95 	bl	8000cf8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d907      	bls.n	8002de8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e15c      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470000 	.word	0x42470000
 8002de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de8:	4b8a      	ldr	r3, [pc, #552]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ea      	bne.n	8002dca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8097 	beq.w	8002f30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e06:	4b83      	ldr	r3, [pc, #524]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	4b7f      	ldr	r3, [pc, #508]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a7e      	ldr	r2, [pc, #504]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b7c      	ldr	r3, [pc, #496]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e32:	4b79      	ldr	r3, [pc, #484]	; (8003018 <HAL_RCC_OscConfig+0x4b0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d118      	bne.n	8002e70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3e:	4b76      	ldr	r3, [pc, #472]	; (8003018 <HAL_RCC_OscConfig+0x4b0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a75      	ldr	r2, [pc, #468]	; (8003018 <HAL_RCC_OscConfig+0x4b0>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7fd ff55 	bl	8000cf8 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7fd ff51 	bl	8000cf8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e118      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b6c      	ldr	r3, [pc, #432]	; (8003018 <HAL_RCC_OscConfig+0x4b0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x31e>
 8002e78:	4b66      	ldr	r3, [pc, #408]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a65      	ldr	r2, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	e01c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x358>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x340>
 8002e8e:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	4a60      	ldr	r2, [pc, #384]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e94:	f043 0304 	orr.w	r3, r3, #4
 8002e98:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9a:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a5d      	ldr	r2, [pc, #372]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x358>
 8002ea8:	4b5a      	ldr	r3, [pc, #360]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a59      	ldr	r2, [pc, #356]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	4b57      	ldr	r3, [pc, #348]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a56      	ldr	r2, [pc, #344]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002eba:	f023 0304 	bic.w	r3, r3, #4
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d015      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fd ff16 	bl	8000cf8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fd ff12 	bl	8000cf8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0d7      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0ee      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x368>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fd ff00 	bl	8000cf8 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fd fefc 	bl	8000cf8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0c1      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f12:	4b40      	ldr	r3, [pc, #256]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ee      	bne.n	8002efc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f24:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	4a3a      	ldr	r2, [pc, #232]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80ad 	beq.w	8003094 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3a:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d060      	beq.n	8003008 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d145      	bne.n	8002fda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCC_OscConfig+0x4b4>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fd fed0 	bl	8000cf8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fd fecc 	bl	8000cf8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e093      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	019b      	lsls	r3, r3, #6
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	3b01      	subs	r3, #1
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	071b      	lsls	r3, r3, #28
 8002fa6:	491b      	ldr	r1, [pc, #108]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x4b4>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fd fea1 	bl	8000cf8 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fd fe9d 	bl	8000cf8 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e064      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x452>
 8002fd8:	e05c      	b.n	8003094 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <HAL_RCC_OscConfig+0x4b4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fd fe8a 	bl	8000cf8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fd fe86 	bl	8000cf8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e04d      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x480>
 8003006:	e045      	b.n	8003094 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e040      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000
 800301c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <HAL_RCC_OscConfig+0x538>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d030      	beq.n	8003090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d129      	bne.n	8003090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d122      	bne.n	8003090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003058:	4293      	cmp	r3, r2
 800305a:	d119      	bne.n	8003090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d10f      	bne.n	8003090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d107      	bne.n	8003090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800

080030a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e03f      	b.n	8003136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fc86 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f829 	bl	8003140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800310c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800311c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003144:	b0c0      	sub	sp, #256	; 0x100
 8003146:	af00      	add	r7, sp, #0
 8003148:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	68d9      	ldr	r1, [r3, #12]
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	ea40 0301 	orr.w	r3, r0, r1
 8003168:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	431a      	orrs	r2, r3
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	431a      	orrs	r2, r3
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003198:	f021 010c 	bic.w	r1, r1, #12
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031a6:	430b      	orrs	r3, r1
 80031a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	6999      	ldr	r1, [r3, #24]
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	ea40 0301 	orr.w	r3, r0, r1
 80031c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b8f      	ldr	r3, [pc, #572]	; (800340c <UART_SetConfig+0x2cc>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d005      	beq.n	80031e0 <UART_SetConfig+0xa0>
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b8d      	ldr	r3, [pc, #564]	; (8003410 <UART_SetConfig+0x2d0>)
 80031dc:	429a      	cmp	r2, r3
 80031de:	d104      	bne.n	80031ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031e0:	f7fe ff54 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 80031e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031e8:	e003      	b.n	80031f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ea:	f7fe ff3b 	bl	8002064 <HAL_RCC_GetPCLK1Freq>
 80031ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031fc:	f040 810c 	bne.w	8003418 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003204:	2200      	movs	r2, #0
 8003206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800320a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800320e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003212:	4622      	mov	r2, r4
 8003214:	462b      	mov	r3, r5
 8003216:	1891      	adds	r1, r2, r2
 8003218:	65b9      	str	r1, [r7, #88]	; 0x58
 800321a:	415b      	adcs	r3, r3
 800321c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800321e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003222:	4621      	mov	r1, r4
 8003224:	eb12 0801 	adds.w	r8, r2, r1
 8003228:	4629      	mov	r1, r5
 800322a:	eb43 0901 	adc.w	r9, r3, r1
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800323a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003242:	4690      	mov	r8, r2
 8003244:	4699      	mov	r9, r3
 8003246:	4623      	mov	r3, r4
 8003248:	eb18 0303 	adds.w	r3, r8, r3
 800324c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003250:	462b      	mov	r3, r5
 8003252:	eb49 0303 	adc.w	r3, r9, r3
 8003256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800325a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003266:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800326a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800326e:	460b      	mov	r3, r1
 8003270:	18db      	adds	r3, r3, r3
 8003272:	653b      	str	r3, [r7, #80]	; 0x50
 8003274:	4613      	mov	r3, r2
 8003276:	eb42 0303 	adc.w	r3, r2, r3
 800327a:	657b      	str	r3, [r7, #84]	; 0x54
 800327c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003280:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003284:	f7fc ffbe 	bl	8000204 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4b61      	ldr	r3, [pc, #388]	; (8003414 <UART_SetConfig+0x2d4>)
 800328e:	fba3 2302 	umull	r2, r3, r3, r2
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	011c      	lsls	r4, r3, #4
 8003296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80032b0:	415b      	adcs	r3, r3
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032b8:	4641      	mov	r1, r8
 80032ba:	eb12 0a01 	adds.w	sl, r2, r1
 80032be:	4649      	mov	r1, r9
 80032c0:	eb43 0b01 	adc.w	fp, r3, r1
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032d8:	4692      	mov	sl, r2
 80032da:	469b      	mov	fp, r3
 80032dc:	4643      	mov	r3, r8
 80032de:	eb1a 0303 	adds.w	r3, sl, r3
 80032e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032e6:	464b      	mov	r3, r9
 80032e8:	eb4b 0303 	adc.w	r3, fp, r3
 80032ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003300:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003304:	460b      	mov	r3, r1
 8003306:	18db      	adds	r3, r3, r3
 8003308:	643b      	str	r3, [r7, #64]	; 0x40
 800330a:	4613      	mov	r3, r2
 800330c:	eb42 0303 	adc.w	r3, r2, r3
 8003310:	647b      	str	r3, [r7, #68]	; 0x44
 8003312:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003316:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800331a:	f7fc ff73 	bl	8000204 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4611      	mov	r1, r2
 8003324:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <UART_SetConfig+0x2d4>)
 8003326:	fba3 2301 	umull	r2, r3, r3, r1
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2264      	movs	r2, #100	; 0x64
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	1acb      	subs	r3, r1, r3
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800333a:	4b36      	ldr	r3, [pc, #216]	; (8003414 <UART_SetConfig+0x2d4>)
 800333c:	fba3 2302 	umull	r2, r3, r3, r2
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003348:	441c      	add	r4, r3
 800334a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003354:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003358:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800335c:	4642      	mov	r2, r8
 800335e:	464b      	mov	r3, r9
 8003360:	1891      	adds	r1, r2, r2
 8003362:	63b9      	str	r1, [r7, #56]	; 0x38
 8003364:	415b      	adcs	r3, r3
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800336c:	4641      	mov	r1, r8
 800336e:	1851      	adds	r1, r2, r1
 8003370:	6339      	str	r1, [r7, #48]	; 0x30
 8003372:	4649      	mov	r1, r9
 8003374:	414b      	adcs	r3, r1
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003384:	4659      	mov	r1, fp
 8003386:	00cb      	lsls	r3, r1, #3
 8003388:	4651      	mov	r1, sl
 800338a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800338e:	4651      	mov	r1, sl
 8003390:	00ca      	lsls	r2, r1, #3
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	4603      	mov	r3, r0
 8003398:	4642      	mov	r2, r8
 800339a:	189b      	adds	r3, r3, r2
 800339c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033a0:	464b      	mov	r3, r9
 80033a2:	460a      	mov	r2, r1
 80033a4:	eb42 0303 	adc.w	r3, r2, r3
 80033a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033c0:	460b      	mov	r3, r1
 80033c2:	18db      	adds	r3, r3, r3
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c6:	4613      	mov	r3, r2
 80033c8:	eb42 0303 	adc.w	r3, r2, r3
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033d6:	f7fc ff15 	bl	8000204 <__aeabi_uldivmod>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <UART_SetConfig+0x2d4>)
 80033e0:	fba3 1302 	umull	r1, r3, r3, r2
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	2164      	movs	r1, #100	; 0x64
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	3332      	adds	r3, #50	; 0x32
 80033f2:	4a08      	ldr	r2, [pc, #32]	; (8003414 <UART_SetConfig+0x2d4>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	f003 0207 	and.w	r2, r3, #7
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4422      	add	r2, r4
 8003406:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003408:	e105      	b.n	8003616 <UART_SetConfig+0x4d6>
 800340a:	bf00      	nop
 800340c:	40011000 	.word	0x40011000
 8003410:	40011400 	.word	0x40011400
 8003414:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341c:	2200      	movs	r2, #0
 800341e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003422:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003426:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800342a:	4642      	mov	r2, r8
 800342c:	464b      	mov	r3, r9
 800342e:	1891      	adds	r1, r2, r2
 8003430:	6239      	str	r1, [r7, #32]
 8003432:	415b      	adcs	r3, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800343a:	4641      	mov	r1, r8
 800343c:	1854      	adds	r4, r2, r1
 800343e:	4649      	mov	r1, r9
 8003440:	eb43 0501 	adc.w	r5, r3, r1
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	00eb      	lsls	r3, r5, #3
 800344e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003452:	00e2      	lsls	r2, r4, #3
 8003454:	4614      	mov	r4, r2
 8003456:	461d      	mov	r5, r3
 8003458:	4643      	mov	r3, r8
 800345a:	18e3      	adds	r3, r4, r3
 800345c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003460:	464b      	mov	r3, r9
 8003462:	eb45 0303 	adc.w	r3, r5, r3
 8003466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003486:	4629      	mov	r1, r5
 8003488:	008b      	lsls	r3, r1, #2
 800348a:	4621      	mov	r1, r4
 800348c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003490:	4621      	mov	r1, r4
 8003492:	008a      	lsls	r2, r1, #2
 8003494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003498:	f7fc feb4 	bl	8000204 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4b60      	ldr	r3, [pc, #384]	; (8003624 <UART_SetConfig+0x4e4>)
 80034a2:	fba3 2302 	umull	r2, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	011c      	lsls	r4, r3, #4
 80034aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	61b9      	str	r1, [r7, #24]
 80034c4:	415b      	adcs	r3, r3
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034cc:	4641      	mov	r1, r8
 80034ce:	1851      	adds	r1, r2, r1
 80034d0:	6139      	str	r1, [r7, #16]
 80034d2:	4649      	mov	r1, r9
 80034d4:	414b      	adcs	r3, r1
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034e4:	4659      	mov	r1, fp
 80034e6:	00cb      	lsls	r3, r1, #3
 80034e8:	4651      	mov	r1, sl
 80034ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ee:	4651      	mov	r1, sl
 80034f0:	00ca      	lsls	r2, r1, #3
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	4642      	mov	r2, r8
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003500:	464b      	mov	r3, r9
 8003502:	460a      	mov	r2, r1
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	67bb      	str	r3, [r7, #120]	; 0x78
 8003516:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003524:	4649      	mov	r1, r9
 8003526:	008b      	lsls	r3, r1, #2
 8003528:	4641      	mov	r1, r8
 800352a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800352e:	4641      	mov	r1, r8
 8003530:	008a      	lsls	r2, r1, #2
 8003532:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003536:	f7fc fe65 	bl	8000204 <__aeabi_uldivmod>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4b39      	ldr	r3, [pc, #228]	; (8003624 <UART_SetConfig+0x4e4>)
 8003540:	fba3 1302 	umull	r1, r3, r3, r2
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	2164      	movs	r1, #100	; 0x64
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	3332      	adds	r3, #50	; 0x32
 8003552:	4a34      	ldr	r2, [pc, #208]	; (8003624 <UART_SetConfig+0x4e4>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355e:	441c      	add	r4, r3
 8003560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003564:	2200      	movs	r2, #0
 8003566:	673b      	str	r3, [r7, #112]	; 0x70
 8003568:	677a      	str	r2, [r7, #116]	; 0x74
 800356a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800356e:	4642      	mov	r2, r8
 8003570:	464b      	mov	r3, r9
 8003572:	1891      	adds	r1, r2, r2
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	415b      	adcs	r3, r3
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800357e:	4641      	mov	r1, r8
 8003580:	1851      	adds	r1, r2, r1
 8003582:	6039      	str	r1, [r7, #0]
 8003584:	4649      	mov	r1, r9
 8003586:	414b      	adcs	r3, r1
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003596:	4659      	mov	r1, fp
 8003598:	00cb      	lsls	r3, r1, #3
 800359a:	4651      	mov	r1, sl
 800359c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a0:	4651      	mov	r1, sl
 80035a2:	00ca      	lsls	r2, r1, #3
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	4603      	mov	r3, r0
 80035aa:	4642      	mov	r2, r8
 80035ac:	189b      	adds	r3, r3, r2
 80035ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80035b0:	464b      	mov	r3, r9
 80035b2:	460a      	mov	r2, r1
 80035b4:	eb42 0303 	adc.w	r3, r2, r3
 80035b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	663b      	str	r3, [r7, #96]	; 0x60
 80035c4:	667a      	str	r2, [r7, #100]	; 0x64
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035d2:	4649      	mov	r1, r9
 80035d4:	008b      	lsls	r3, r1, #2
 80035d6:	4641      	mov	r1, r8
 80035d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035dc:	4641      	mov	r1, r8
 80035de:	008a      	lsls	r2, r1, #2
 80035e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035e4:	f7fc fe0e 	bl	8000204 <__aeabi_uldivmod>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <UART_SetConfig+0x4e4>)
 80035ee:	fba3 1302 	umull	r1, r3, r3, r2
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2164      	movs	r1, #100	; 0x64
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	3332      	adds	r3, #50	; 0x32
 8003600:	4a08      	ldr	r2, [pc, #32]	; (8003624 <UART_SetConfig+0x4e4>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	f003 020f 	and.w	r2, r3, #15
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4422      	add	r2, r4
 8003614:	609a      	str	r2, [r3, #8]
}
 8003616:	bf00      	nop
 8003618:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	51eb851f 	.word	0x51eb851f

08003628 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003628:	b084      	sub	sp, #16
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	f107 001c 	add.w	r0, r7, #28
 8003636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	2b01      	cmp	r3, #1
 800363e:	d122      	bne.n	8003686 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa9c 	bl	8003bb8 <USB_CoreReset>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e01a      	b.n	80036bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa90 	bl	8003bb8 <USB_CoreReset>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800369c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
 80036ae:	e005      	b.n	80036bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10b      	bne.n	80036da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f043 0206 	orr.w	r2, r3, #6
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036e6:	b004      	add	sp, #16
 80036e8:	4770      	bx	lr

080036ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f023 0201 	bic.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d115      	bne.n	800375a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800373a:	2001      	movs	r0, #1
 800373c:	f7fd fae8 	bl	8000d10 <HAL_Delay>
      ms++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3301      	adds	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa28 	bl	8003b9c <USB_GetMode>
 800374c:	4603      	mov	r3, r0
 800374e:	2b01      	cmp	r3, #1
 8003750:	d01e      	beq.n	8003790 <USB_SetCurrentMode+0x84>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b31      	cmp	r3, #49	; 0x31
 8003756:	d9f0      	bls.n	800373a <USB_SetCurrentMode+0x2e>
 8003758:	e01a      	b.n	8003790 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d115      	bne.n	800378c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800376c:	2001      	movs	r0, #1
 800376e:	f7fd facf 	bl	8000d10 <HAL_Delay>
      ms++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3301      	adds	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa0f 	bl	8003b9c <USB_GetMode>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <USB_SetCurrentMode+0x84>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b31      	cmp	r3, #49	; 0x31
 8003788:	d9f0      	bls.n	800376c <USB_SetCurrentMode+0x60>
 800378a:	e001      	b.n	8003790 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e005      	b.n	800379c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b32      	cmp	r3, #50	; 0x32
 8003794:	d101      	bne.n	800379a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a4:	b084      	sub	sp, #16
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	e009      	b.n	80037d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	3340      	adds	r3, #64	; 0x40
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	2200      	movs	r2, #0
 80037d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3301      	adds	r3, #1
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b0e      	cmp	r3, #14
 80037dc:	d9f2      	bls.n	80037c4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d11c      	bne.n	800381e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e005      	b.n	800382a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003830:	461a      	mov	r2, r3
 8003832:	2300      	movs	r3, #0
 8003834:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383c:	4619      	mov	r1, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003844:	461a      	mov	r2, r3
 8003846:	680b      	ldr	r3, [r1, #0]
 8003848:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10c      	bne.n	800386a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003856:	2100      	movs	r1, #0
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f965 	bl	8003b28 <USB_SetDevSpeed>
 800385e:	e008      	b.n	8003872 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003860:	2101      	movs	r1, #1
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f960 	bl	8003b28 <USB_SetDevSpeed>
 8003868:	e003      	b.n	8003872 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800386a:	2103      	movs	r1, #3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f95b 	bl	8003b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003872:	2110      	movs	r1, #16
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f8f3 	bl	8003a60 <USB_FlushTxFifo>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f91f 	bl	8003ac8 <USB_FlushRxFifo>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389a:	461a      	mov	r2, r3
 800389c:	2300      	movs	r3, #0
 800389e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	461a      	mov	r2, r3
 80038a8:	2300      	movs	r3, #0
 80038aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	461a      	mov	r2, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e043      	b.n	8003946 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038d4:	d118      	bne.n	8003908 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e8:	461a      	mov	r2, r3
 80038ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e013      	b.n	800391a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fe:	461a      	mov	r2, r3
 8003900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e008      	b.n	800391a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	461a      	mov	r2, r3
 8003916:	2300      	movs	r3, #0
 8003918:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003926:	461a      	mov	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003938:	461a      	mov	r2, r3
 800393a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800393e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	3301      	adds	r3, #1
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	429a      	cmp	r2, r3
 800394c:	d3b7      	bcc.n	80038be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e043      	b.n	80039dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800396a:	d118      	bne.n	800399e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e013      	b.n	80039b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	461a      	mov	r2, r3
 8003996:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e008      	b.n	80039b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	461a      	mov	r2, r3
 80039ac:	2300      	movs	r3, #0
 80039ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3301      	adds	r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3b7      	bcc.n	8003954 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f043 0210 	orr.w	r2, r3, #16
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <USB_DevInit+0x2b8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f043 0208 	orr.w	r2, r3, #8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a58:	b004      	add	sp, #16
 8003a5a:	4770      	bx	lr
 8003a5c:	803c3800 	.word	0x803c3800

08003a60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3301      	adds	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <USB_FlushTxFifo+0x64>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e01b      	b.n	8003ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	daf2      	bge.n	8003a6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	019b      	lsls	r3, r3, #6
 8003a90:	f043 0220 	orr.w	r2, r3, #32
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <USB_FlushTxFifo+0x64>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e006      	b.n	8003ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d0f0      	beq.n	8003a98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	00030d40 	.word	0x00030d40

08003ac8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a11      	ldr	r2, [pc, #68]	; (8003b24 <USB_FlushRxFifo+0x5c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e018      	b.n	8003b18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	daf2      	bge.n	8003ad4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2210      	movs	r2, #16
 8003af6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3301      	adds	r3, #1
 8003afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <USB_FlushRxFifo+0x5c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e006      	b.n	8003b18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d0f0      	beq.n	8003af8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	00030d40 	.word	0x00030d40

08003b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003b74:	f023 0303 	bic.w	r3, r3, #3
 8003b78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <USB_CoreReset+0x64>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e01b      	b.n	8003c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	daf2      	bge.n	8003bc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <USB_CoreReset+0x64>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e006      	b.n	8003c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d0f0      	beq.n	8003bee <USB_CoreReset+0x36>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	00030d40 	.word	0x00030d40

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4d0d      	ldr	r5, [pc, #52]	; (8003c58 <__libc_init_array+0x38>)
 8003c24:	4c0d      	ldr	r4, [pc, #52]	; (8003c5c <__libc_init_array+0x3c>)
 8003c26:	1b64      	subs	r4, r4, r5
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	42a6      	cmp	r6, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	4d0b      	ldr	r5, [pc, #44]	; (8003c60 <__libc_init_array+0x40>)
 8003c32:	4c0c      	ldr	r4, [pc, #48]	; (8003c64 <__libc_init_array+0x44>)
 8003c34:	f000 f820 	bl	8003c78 <_init>
 8003c38:	1b64      	subs	r4, r4, r5
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	42a6      	cmp	r6, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c48:	4798      	blx	r3
 8003c4a:	3601      	adds	r6, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c52:	4798      	blx	r3
 8003c54:	3601      	adds	r6, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	08003cb0 	.word	0x08003cb0
 8003c5c:	08003cb0 	.word	0x08003cb0
 8003c60:	08003cb0 	.word	0x08003cb0
 8003c64:	08003cb4 	.word	0x08003cb4

08003c68 <memset>:
 8003c68:	4402      	add	r2, r0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <memset+0xa>
 8003c70:	4770      	bx	lr
 8003c72:	f803 1b01 	strb.w	r1, [r3], #1
 8003c76:	e7f9      	b.n	8003c6c <memset+0x4>

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
