
firmware_interiores_v2_nucleo_f446ze.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001052c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08010700  08010700  00020700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d18  08010d18  00030304  2**0
                  CONTENTS
  4 .ARM          00000008  08010d18  08010d18  00020d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d20  08010d20  00030304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d20  08010d20  00020d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d24  08010d24  00020d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000304  20000000  08010d28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fc8  20000304  0801102c  00030304  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022cc  0801102c  000322cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffef  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041cb  00000000  00000000  00050323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  000544f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f8  00000000  00000000  00055e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000746e  00000000  00000000  00057670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020dd3  00000000  00000000  0005eade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6998  00000000  00000000  0007f8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f10  00000000  00000000  0016629c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000304 	.word	0x20000304
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080106e4 	.word	0x080106e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000308 	.word	0x20000308
 800020c:	080106e4 	.word	0x080106e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <wt901c_init>:
//Variable global declarada en main.c
extern wt901c imu;

//Inicializador de "objeto" imu
HAL_StatusTypeDef wt901c_init(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	//Asignacion de handler UART
	imu.port = huart;
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <wt901c_init+0x48>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]

	//Iniciar alimentacion para resetear referencias
	HAL_GPIO_WritePin(PIN_IMU, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <wt901c_init+0x4c>)
 8000fa2:	f003 f8cb 	bl	800413c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000faa:	f002 faf9 	bl	80035a0 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_IMU, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <wt901c_init+0x4c>)
 8000fb6:	f003 f8c1 	bl	800413c <HAL_GPIO_WritePin>

	//Primera recepcion
	return HAL_UART_Receive_IT(imu.port, imu.rx_buf, 11);
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <wt901c_init+0x48>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	220b      	movs	r2, #11
 8000fc0:	4906      	ldr	r1, [pc, #24]	; (8000fdc <wt901c_init+0x50>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 fc0f 	bl	80077e6 <HAL_UART_Receive_IT>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000568 	.word	0x20000568
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	2000056c 	.word	0x2000056c

08000fe0 <wt901c_callback>:

//Callback de recepcion UART, llamar en HAL_UART_RxCpltCallback
void wt901c_callback()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	//Decodificar los 11 bytes de cada paquete
	for (int i = 0; i < 11; i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e00a      	b.n	8001002 <wt901c_callback+0x22>
		wt901c_parse(imu.rx_buf[i]);
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <wt901c_callback+0x44>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f818 	bl	800102c <wt901c_parse>
	for (int i = 0; i < 11; i++)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0a      	cmp	r3, #10
 8001006:	ddf1      	ble.n	8000fec <wt901c_callback+0xc>

	//Calcular nuevos valores de salida
	wt901c_calculate();
 8001008:	f000 f87a 	bl	8001100 <wt901c_calculate>

	//Nueva recepcion
	HAL_UART_Receive_IT(imu.port, imu.rx_buf, 11);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <wt901c_callback+0x44>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	220b      	movs	r2, #11
 8001012:	4905      	ldr	r1, [pc, #20]	; (8001028 <wt901c_callback+0x48>)
 8001014:	4618      	mov	r0, r3
 8001016:	f006 fbe6 	bl	80077e6 <HAL_UART_Receive_IT>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000568 	.word	0x20000568
 8001028:	2000056c 	.word	0x2000056c

0800102c <wt901c_parse>:

//Decodificacion de los bytes entrantes
void wt901c_parse(unsigned char byte)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	static unsigned char data_buffer[11];
	static unsigned char index = 0;

	data_buffer[index++] = byte;
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <wt901c_parse+0xb8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	b2d1      	uxtb	r1, r2
 800103e:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <wt901c_parse+0xb8>)
 8001040:	7011      	strb	r1, [r2, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <wt901c_parse+0xbc>)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	5453      	strb	r3, [r2, r1]

	if (data_buffer[0] != 0x55) //Primer byte erroneo
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <wt901c_parse+0xbc>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b55      	cmp	r3, #85	; 0x55
 8001050:	d003      	beq.n	800105a <wt901c_parse+0x2e>
	{
		index = 0;
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <wt901c_parse+0xb8>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		return;
 8001058:	e041      	b.n	80010de <wt901c_parse+0xb2>
	}

	if (index < 11) { return; } //Aun no se ha recibido el paquete completo
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <wt901c_parse+0xb8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b0a      	cmp	r3, #10
 8001060:	d93c      	bls.n	80010dc <wt901c_parse+0xb0>

	else
	{
		switch (data_buffer[1]) //El segundo byte indica a que se corresponde el paquete de 11
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <wt901c_parse+0xbc>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	3b50      	subs	r3, #80	; 0x50
 8001068:	2b09      	cmp	r3, #9
 800106a:	d833      	bhi.n	80010d4 <wt901c_parse+0xa8>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <wt901c_parse+0x48>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	080010d5 	.word	0x080010d5
 8001078:	0800109d 	.word	0x0800109d
 800107c:	080010ab 	.word	0x080010ab
 8001080:	080010b9 	.word	0x080010b9
 8001084:	080010d5 	.word	0x080010d5
 8001088:	080010d5 	.word	0x080010d5
 800108c:	080010d5 	.word	0x080010d5
 8001090:	080010d5 	.word	0x080010d5
 8001094:	080010d5 	.word	0x080010d5
 8001098:	080010c7 	.word	0x080010c7
		{
		case 0x50:	break; //Tiempo
		case 0x51:	memcpy(imu.raw_a, data_buffer + 2, 6); break; //Acelerometro
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <wt901c_parse+0xc0>)
 800109e:	2206      	movs	r2, #6
 80010a0:	4619      	mov	r1, r3
 80010a2:	4813      	ldr	r0, [pc, #76]	; (80010f0 <wt901c_parse+0xc4>)
 80010a4:	f00b fd60 	bl	800cb68 <memcpy>
 80010a8:	e014      	b.n	80010d4 <wt901c_parse+0xa8>
		case 0x52:	memcpy(imu.raw_w, data_buffer + 2, 6); break; //Giroscopio
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <wt901c_parse+0xc0>)
 80010ac:	2206      	movs	r2, #6
 80010ae:	4619      	mov	r1, r3
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <wt901c_parse+0xc8>)
 80010b2:	f00b fd59 	bl	800cb68 <memcpy>
 80010b6:	e00d      	b.n	80010d4 <wt901c_parse+0xa8>
		case 0x53:	memcpy(imu.raw_ang, data_buffer + 2, 6); break; //Angulos inclinacion
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <wt901c_parse+0xc0>)
 80010ba:	2206      	movs	r2, #6
 80010bc:	4619      	mov	r1, r3
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <wt901c_parse+0xcc>)
 80010c0:	f00b fd52 	bl	800cb68 <memcpy>
 80010c4:	e006      	b.n	80010d4 <wt901c_parse+0xa8>
		case 0x54:	break; //Magnetometro (no utilizado)
		case 0x55:	break; //Status (no disponible en este modelo)
		case 0x56:	break; //Presion y altitud (no disponible en este modelo)
		case 0x57:	break; //GPS (no disponible en este modelo)
		case 0x58:	break; //GPSV (no disponible en este modelo)
		case 0x59:	memcpy(imu.raw_q, data_buffer + 2, 8); break; //Cuaternio orientacion
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <wt901c_parse+0xc0>)
 80010c8:	2208      	movs	r2, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <wt901c_parse+0xd0>)
 80010ce:	f00b fd4b 	bl	800cb68 <memcpy>
 80010d2:	bf00      	nop
		}
		index = 0;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <wt901c_parse+0xb8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e000      	b.n	80010de <wt901c_parse+0xb2>
	if (index < 11) { return; } //Aun no se ha recibido el paquete completo
 80010dc:	bf00      	nop
	}
}
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000320 	.word	0x20000320
 80010e8:	20000324 	.word	0x20000324
 80010ec:	20000326 	.word	0x20000326
 80010f0:	20000578 	.word	0x20000578
 80010f4:	2000057e 	.word	0x2000057e
 80010f8:	20000584 	.word	0x20000584
 80010fc:	2000058a 	.word	0x2000058a

08001100 <wt901c_calculate>:

//Calculo de los valores de salida a partir de los raw
void wt901c_calculate()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) imu.a[i] = (float)imu.raw_a[i] / 32768 * 16 * G; //Aceleracion lineal en m/s2
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e02a      	b.n	8001162 <wt901c_calculate+0x62>
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <wt901c_calculate+0x148>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3308      	adds	r3, #8
 8001112:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800124c <wt901c_calculate+0x14c>
 8001122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001126:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800112a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112e:	ee17 0a90 	vmov	r0, s15
 8001132:	f7ff fa29 	bl	8000588 <__aeabi_f2d>
 8001136:	a342      	add	r3, pc, #264	; (adr r3, 8001240 <wt901c_calculate+0x140>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa7c 	bl	8000638 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd4e 	bl	8000be8 <__aeabi_d2f>
 800114c:	4602      	mov	r2, r0
 800114e:	493e      	ldr	r1, [pc, #248]	; (8001248 <wt901c_calculate+0x148>)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	330a      	adds	r3, #10
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	3304      	adds	r3, #4
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b02      	cmp	r3, #2
 8001166:	ddd1      	ble.n	800110c <wt901c_calculate+0xc>
	for (int i = 0; i < 3; i++) imu.w[i] = (float)imu.raw_w[i] / 32768 * 2000; //Velocidad angular en grad/s
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	e01c      	b.n	80011a8 <wt901c_calculate+0xa8>
 800116e:	4a36      	ldr	r2, [pc, #216]	; (8001248 <wt901c_calculate+0x148>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3308      	adds	r3, #8
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001184:	eddf 6a31 	vldr	s13, [pc, #196]	; 800124c <wt901c_calculate+0x14c>
 8001188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001250 <wt901c_calculate+0x150>
 8001190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001194:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <wt901c_calculate+0x148>)
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	330e      	adds	r3, #14
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	edc3 7a00 	vstr	s15, [r3]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	dddf      	ble.n	800116e <wt901c_calculate+0x6e>
	for (int i = 0; i < 3; i++) imu.ang[i] = (float)imu.raw_ang[i] / 32768 * 180; //Angulo inclinacion en grados
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e01d      	b.n	80011f0 <wt901c_calculate+0xf0>
 80011b4:	4a24      	ldr	r2, [pc, #144]	; (8001248 <wt901c_calculate+0x148>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	330c      	adds	r3, #12
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	eddf 6a20 	vldr	s13, [pc, #128]	; 800124c <wt901c_calculate+0x14c>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001254 <wt901c_calculate+0x154>
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <wt901c_calculate+0x148>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3310      	adds	r3, #16
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3304      	adds	r3, #4
 80011e6:	edc3 7a00 	vstr	s15, [r3]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	ddde      	ble.n	80011b4 <wt901c_calculate+0xb4>
	for (int i = 0; i < 4; i++) imu.q[i] = (float)imu.raw_q[i] / 32768; //Cuaternio de orientacion
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	e018      	b.n	800122e <wt901c_calculate+0x12e>
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <wt901c_calculate+0x148>)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3310      	adds	r3, #16
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800124c <wt901c_calculate+0x14c>
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <wt901c_calculate+0x148>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3314      	adds	r3, #20
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	edc3 7a00 	vstr	s15, [r3]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b03      	cmp	r3, #3
 8001232:	dde3      	ble.n	80011fc <wt901c_calculate+0xfc>
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	3a92a305 	.word	0x3a92a305
 8001244:	40239d01 	.word	0x40239d01
 8001248:	20000568 	.word	0x20000568
 800124c:	47000000 	.word	0x47000000
 8001250:	44fa0000 	.word	0x44fa0000
 8001254:	43340000 	.word	0x43340000

08001258 <HAL_UART_RxCpltCallback>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

//callback it
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
//		parse_data(rx_buf[i]);
//
//	    calculate();
//
//	HAL_UART_Receive_IT(&huart2, rx_buf, 11);
	wt901c_callback();
 8001260:	f7ff febe 	bl	8000fe0 <wt901c_callback>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
	status_button=true;
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	20000684 	.word	0x20000684

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001290:	f002 f914 	bl	80034bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001294:	f000 f8ae 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001298:	f000 fa62 	bl	8001760 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800129c:	f000 fa0c 	bl	80016b8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80012a0:	f000 f994 	bl	80015cc <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80012a4:	f000 fa32 	bl	800170c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80012a8:	f000 f910 	bl	80014cc <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80012ac:	f00a fe6e 	bl	800bf8c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80012b0:	f000 f95e 	bl	8001570 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80012b4:	f000 f9d6 	bl	8001664 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80012b8:	4837      	ldr	r0, [pc, #220]	; (8001398 <main+0x10c>)
 80012ba:	f005 fce1 	bl	8006c80 <HAL_TIM_Base_Start_IT>
//  theta_ant=theta_imu[2]+180;
//  HAL_UART_Receive_IT(&huart2, rx_buf, 11);
//  HAL_Delay(200);
//  theta_curr=theta_imu[2]+180;
//  imu_ready=true;
  wt901c_init(&huart2);
 80012be:	4837      	ldr	r0, [pc, #220]	; (800139c <main+0x110>)
 80012c0:	f7ff fe64 	bl	8000f8c <wt901c_init>



  status_init_rw1=roboclaw1_init(address_huart1,(uint8_t) address_roboclaw1);
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <main+0x114>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fca4 	bl	8002c18 <roboclaw1_init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <main+0x118>)
 80012d6:	701a      	strb	r2, [r3, #0]
  status_init_rw2=roboclaw2_init(address_huart2,(uint8_t) address_roboclaw2);
 80012d8:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <main+0x11c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fcec 	bl	8002cbc <roboclaw2_init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <main+0x120>)
 80012ea:	701a      	strb	r2, [r3, #0]
		  }*/




		  setSpeed(v_in, w_in);
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <main+0x124>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <main+0x128>)
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	eef0 0a47 	vmov.f32	s1, s14
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	f000 ffea 	bl	80022d8 <setSpeed>
		  status_speedM1=Read_Encoder_Speed(address_huart1,(uint8_t)address_roboclaw1,(uint8_t)1,&speedM1_roboclaw);
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <main+0x114>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <main+0x12c>)
 800130a:	2201      	movs	r2, #1
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	f001 fae1 	bl	80028d4 <Read_Encoder_Speed>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <main+0x130>)
 8001318:	701a      	strb	r2, [r3, #0]
		  status_speedM2=Read_Encoder_Speed(address_huart1,(uint8_t)address_roboclaw1,(uint8_t)2,&speedM2_roboclaw);
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <main+0x114>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <main+0x134>)
 8001320:	2202      	movs	r2, #2
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	f001 fad6 	bl	80028d4 <Read_Encoder_Speed>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <main+0x138>)
 800132e:	701a      	strb	r2, [r3, #0]
		  status_speedM3=Read_Encoder_Speed(address_huart2,(uint8_t)address_roboclaw2,(uint8_t)1,&speedM3_roboclaw);
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <main+0x11c>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <main+0x13c>)
 8001336:	2201      	movs	r2, #1
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	f001 facb 	bl	80028d4 <Read_Encoder_Speed>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <main+0x140>)
 8001344:	701a      	strb	r2, [r3, #0]
		  status_speedM4=Read_Encoder_Speed(address_huart2,(uint8_t)address_roboclaw2,(uint8_t)2,&speedM4_roboclaw);
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <main+0x11c>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <main+0x144>)
 800134c:	2202      	movs	r2, #2
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	f001 fac0 	bl	80028d4 <Read_Encoder_Speed>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <main+0x148>)
 800135a:	701a      	strb	r2, [r3, #0]
		  status_Counters_rw1=Read_Both_Encoder_Counts(address_huart1,(uint8_t)address_roboclaw1,&countsM1_roboclaw,&countsM2_roboclaw);
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <main+0x114>)
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <main+0x14c>)
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <main+0x150>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	f001 fb10 	bl	800298a <Read_Both_Encoder_Counts>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <main+0x154>)
 8001370:	701a      	strb	r2, [r3, #0]
		  status_Counters_rw2=Read_Both_Encoder_Counts(address_huart2,(uint8_t)address_roboclaw2,&countsM3_roboclaw,&countsM4_roboclaw);
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <main+0x11c>)
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <main+0x158>)
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <main+0x15c>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	f001 fb05 	bl	800298a <Read_Both_Encoder_Counts>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <main+0x160>)
 8001386:	701a      	strb	r2, [r3, #0]
		  //status_button=HAL_GPIO_ReadPin(B1_reset_odom_GPIO_Port, B1_reset_odom_Pin);
		  if(status_button==true){
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <main+0x164>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ad      	beq.n	80012ec <main+0x60>
			  reset_Odometry();
 8001390:	f000 fb2c 	bl	80019ec <reset_Odometry>
		  setSpeed(v_in, w_in);
 8001394:	e7aa      	b.n	80012ec <main+0x60>
 8001396:	bf00      	nop
 8001398:	200003d8 	.word	0x200003d8
 800139c:	20000420 	.word	0x20000420
 80013a0:	20000000 	.word	0x20000000
 80013a4:	2000063e 	.word	0x2000063e
 80013a8:	20000004 	.word	0x20000004
 80013ac:	2000063f 	.word	0x2000063f
 80013b0:	20000610 	.word	0x20000610
 80013b4:	20000614 	.word	0x20000614
 80013b8:	20000628 	.word	0x20000628
 80013bc:	2000063a 	.word	0x2000063a
 80013c0:	2000062c 	.word	0x2000062c
 80013c4:	2000063b 	.word	0x2000063b
 80013c8:	20000630 	.word	0x20000630
 80013cc:	2000063c 	.word	0x2000063c
 80013d0:	20000634 	.word	0x20000634
 80013d4:	2000063d 	.word	0x2000063d
 80013d8:	2000061c 	.word	0x2000061c
 80013dc:	20000618 	.word	0x20000618
 80013e0:	20000638 	.word	0x20000638
 80013e4:	20000624 	.word	0x20000624
 80013e8:	20000620 	.word	0x20000620
 80013ec:	20000639 	.word	0x20000639
 80013f0:	20000684 	.word	0x20000684

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	; 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2234      	movs	r2, #52	; 0x34
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00b fbbe 	bl	800cb84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <SystemClock_Config+0xd0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <SystemClock_Config+0xd0>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <SystemClock_Config+0xd0>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <SystemClock_Config+0xd4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <SystemClock_Config+0xd4>)
 800143e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <SystemClock_Config+0xd4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001454:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001458:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145a:	2302      	movs	r3, #2
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001462:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001468:	23a8      	movs	r3, #168	; 0xa8
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001470:	2307      	movs	r3, #7
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001474:	2302      	movs	r3, #2
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4618      	mov	r0, r3
 800147e:	f005 f911 	bl	80066a4 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001488:	f001 fca6 	bl	8002dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001498:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800149c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	2105      	movs	r1, #5
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fa86 	bl	80059bc <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014b6:	f001 fc8f 	bl	8002dd8 <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3750      	adds	r7, #80	; 0x50
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_ADC1_Init+0x98>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <MX_ADC1_Init+0x9c>)
 80014e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_ADC1_Init+0x98>)
 80014e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_ADC1_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_ADC1_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_ADC1_Init+0x98>)
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <MX_ADC1_Init+0xa0>)
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_ADC1_Init+0x98>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_ADC1_Init+0x98>)
 8001528:	2201      	movs	r2, #1
 800152a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_ADC1_Init+0x98>)
 800152e:	f002 f85b 	bl	80035e8 <HAL_ADC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001538:	f001 fc4e 	bl	8002dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800153c:	2304      	movs	r3, #4
 800153e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_ADC1_Init+0x98>)
 800154e:	f002 f88f 	bl	8003670 <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001558:	f001 fc3e 	bl	8002dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000033c 	.word	0x2000033c
 8001568:	40012000 	.word	0x40012000
 800156c:	0f000001 	.word	0x0f000001

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <MX_I2C1_Init+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_I2C1_Init+0x50>)
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x58>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_I2C1_Init+0x50>)
 800158e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015ae:	f002 fdf7 	bl	80041a0 <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f001 fc0e 	bl	8002dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000384 	.word	0x20000384
 80015c4:	40005400 	.word	0x40005400
 80015c8:	000186a0 	.word	0x000186a0

080015cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_TIM2_Init+0x94>)
 80015ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_TIM2_Init+0x94>)
 80015f2:	223b      	movs	r2, #59	; 0x3b
 80015f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_TIM2_Init+0x94>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1400;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_TIM2_Init+0x94>)
 80015fe:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001602:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_TIM2_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_TIM2_Init+0x94>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001610:	4813      	ldr	r0, [pc, #76]	; (8001660 <MX_TIM2_Init+0x94>)
 8001612:	f005 fae5 	bl	8006be0 <HAL_TIM_Base_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800161c:	f001 fbdc 	bl	8002dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <MX_TIM2_Init+0x94>)
 800162e:	f005 fc9f 	bl	8006f70 <HAL_TIM_ConfigClockSource>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001638:	f001 fbce 	bl	8002dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_TIM2_Init+0x94>)
 800164a:	f005 febb 	bl	80073c4 <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001654:	f001 fbc0 	bl	8002dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200003d8 	.word	0x200003d8

08001664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_USART2_UART_Init+0x50>)
 800166c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001670:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART2_UART_Init+0x4c>)
 800169c:	f005 ff22 	bl	80074e4 <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016a6:	f001 fb97 	bl	8002dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000420 	.word	0x20000420
 80016b4:	40004400 	.word	0x40004400

080016b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_USART3_UART_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80016c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_USART3_UART_Init+0x4c>)
 80016f0:	f005 fef8 	bl	80074e4 <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016fa:	f001 fb6d 	bl	8002dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000464 	.word	0x20000464
 8001708:	40004800 	.word	0x40004800

0800170c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART6_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001718:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800171c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART6_UART_Init+0x4c>)
 8001744:	f005 fece 	bl	80074e4 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f001 fb43 	bl	8002dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200004a8 	.word	0x200004a8
 800175c:	40011400 	.word	0x40011400

08001760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	4b60      	ldr	r3, [pc, #384]	; (80018fc <MX_GPIO_Init+0x19c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a5f      	ldr	r2, [pc, #380]	; (80018fc <MX_GPIO_Init+0x19c>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <MX_GPIO_Init+0x19c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	4b59      	ldr	r3, [pc, #356]	; (80018fc <MX_GPIO_Init+0x19c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a58      	ldr	r2, [pc, #352]	; (80018fc <MX_GPIO_Init+0x19c>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b56      	ldr	r3, [pc, #344]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b52      	ldr	r3, [pc, #328]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a51      	ldr	r2, [pc, #324]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a4a      	ldr	r2, [pc, #296]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b48      	ldr	r3, [pc, #288]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a43      	ldr	r2, [pc, #268]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <MX_GPIO_Init+0x19c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <MX_GPIO_Init+0x19c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <MX_GPIO_Init+0x19c>)
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <MX_GPIO_Init+0x19c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2140      	movs	r1, #64	; 0x40
 8001822:	4837      	ldr	r0, [pc, #220]	; (8001900 <MX_GPIO_Init+0x1a0>)
 8001824:	f002 fc8a 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182e:	4835      	ldr	r0, [pc, #212]	; (8001904 <MX_GPIO_Init+0x1a4>)
 8001830:	f002 fc84 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	482e      	ldr	r0, [pc, #184]	; (8001904 <MX_GPIO_Init+0x1a4>)
 800184c:	f002 fae2 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001850:	2303      	movs	r3, #3
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001860:	2302      	movs	r3, #2
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	4827      	ldr	r0, [pc, #156]	; (8001908 <MX_GPIO_Init+0x1a8>)
 800186c:	f002 fad2 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001870:	2301      	movs	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001880:	2302      	movs	r3, #2
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4820      	ldr	r0, [pc, #128]	; (800190c <MX_GPIO_Init+0x1ac>)
 800188c:	f002 fac2 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001890:	2340      	movs	r3, #64	; 0x40
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4816      	ldr	r0, [pc, #88]	; (8001900 <MX_GPIO_Init+0x1a0>)
 80018a8:	f002 fab4 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4810      	ldr	r0, [pc, #64]	; (8001900 <MX_GPIO_Init+0x1a0>)
 80018c0:	f002 faa8 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <MX_GPIO_Init+0x1a4>)
 80018de:	f002 fa99 	bl	8003e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2028      	movs	r0, #40	; 0x28
 80018e8:	f002 f9cb 	bl	8003c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ec:	2028      	movs	r0, #40	; 0x28
 80018ee:	f002 f9e4 	bl	8003cba <HAL_NVIC_EnableIRQ>

}
 80018f2:	bf00      	nop
 80018f4:	3730      	adds	r7, #48	; 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40021800 	.word	0x40021800
 8001904:	40020800 	.word	0x40020800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400

08001910 <HAL_TIM_PeriodElapsedCallback>:

//----ODOMETRY---------------------------------------------------


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	af04      	add	r7, sp, #16
 8001916:	6078      	str	r0, [r7, #4]
	  if(htim->Instance==TIM2){
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001920:	d146      	bne.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0xa0>
		  timer_indoor_system+=0.001;
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe2e 	bl	8000588 <__aeabi_f2d>
 800192c:	a322      	add	r3, pc, #136	; (adr r3, 80019b8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fccb 	bl	80002cc <__adddf3>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff f953 	bl	8000be8 <__aeabi_d2f>
 8001942:	4603      	mov	r3, r0
 8001944:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001946:	6013      	str	r3, [r2, #0]
		  indx_odom++;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001958:	edc3 7a00 	vstr	s15, [r3]
		  if(indx_odom==sampling_time){
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800195e:	ed93 7a00 	vldr	s14, [r3]
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	eeb4 7a67 	vcmp.f32	s14, s15
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d11e      	bne.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0xa0>
			  //if(imu_ready==true)
			  //{
				  odometryUpdater(countsM1_roboclaw,countsM2_roboclaw,countsM3_roboclaw,countsM4_roboclaw,speedM1_roboclaw,speedM2_roboclaw,speedM3_roboclaw,speedM4_roboclaw);
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001974:	681c      	ldr	r4, [r3, #0]
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001978:	681d      	ldr	r5, [r3, #0]
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800197c:	681e      	ldr	r6, [r3, #0]
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	4915      	ldr	r1, [pc, #84]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800198e:	6809      	ldr	r1, [r1, #0]
 8001990:	4815      	ldr	r0, [pc, #84]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001992:	6800      	ldr	r0, [r0, #0]
 8001994:	9003      	str	r0, [sp, #12]
 8001996:	9102      	str	r1, [sp, #8]
 8001998:	9201      	str	r2, [sp, #4]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4632      	mov	r2, r6
 80019a0:	4629      	mov	r1, r5
 80019a2:	4620      	mov	r0, r4
 80019a4:	f000 f89c 	bl	8001ae0 <odometryUpdater>
			  //}
			  indx_odom=0;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019bc:	3f50624d 	.word	0x3f50624d
 80019c0:	20000688 	.word	0x20000688
 80019c4:	20000518 	.word	0x20000518
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000618 	.word	0x20000618
 80019d0:	2000061c 	.word	0x2000061c
 80019d4:	20000620 	.word	0x20000620
 80019d8:	20000624 	.word	0x20000624
 80019dc:	20000628 	.word	0x20000628
 80019e0:	2000062c 	.word	0x2000062c
 80019e4:	20000630 	.word	0x20000630
 80019e8:	20000634 	.word	0x20000634

080019ec <reset_Odometry>:

void reset_Odometry()
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
	bool set_1=Drive_M1_M2_With_Signed_Speed(address_huart1,(uint8_t)address_roboclaw1, 0, 0);
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <reset_Odometry+0xb8>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	2200      	movs	r2, #0
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	f001 f825 	bl	8002a4a <Drive_M1_M2_With_Signed_Speed>
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
	bool set_2=Drive_M1_M2_With_Signed_Speed(address_huart2,(uint8_t)address_roboclaw2, 0, 0);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <reset_Odometry+0xbc>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	f001 f81c 	bl	8002a4a <Drive_M1_M2_With_Signed_Speed>
 8001a12:	4603      	mov	r3, r0
 8001a14:	71bb      	strb	r3, [r7, #6]
	bool set_3=Reset_Encoder_Counters(address_huart1,(uint8_t)address_roboclaw1);
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <reset_Odometry+0xb8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 f8c8 	bl	8002bb2 <Reset_Encoder_Counters>
 8001a22:	4603      	mov	r3, r0
 8001a24:	717b      	strb	r3, [r7, #5]
	bool set_4=Reset_Encoder_Counters(address_huart2,(uint8_t)address_roboclaw2);
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <reset_Odometry+0xbc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 f8c0 	bl	8002bb2 <Reset_Encoder_Counters>
 8001a32:	4603      	mov	r3, r0
 8001a34:	713b      	strb	r3, [r7, #4]

	wt901c_init(&huart2);
 8001a36:	481d      	ldr	r0, [pc, #116]	; (8001aac <reset_Odometry+0xc0>)
 8001a38:	f7ff faa8 	bl	8000f8c <wt901c_init>
//	  HAL_Delay(200);
//	  theta_curr=theta_imu[2]+180;
//	  imu_ready=true;


	robot_x_pos=0;
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <reset_Odometry+0xc4>)
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
	robot_y_pos=0;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <reset_Odometry+0xc8>)
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	robot_angular_pos=0;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <reset_Odometry+0xcc>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
	robot_angular_pos_aux=0;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <reset_Odometry+0xd0>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
	theta_ant=0;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <reset_Odometry+0xd4>)
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
	theta_curr=0;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <reset_Odometry+0xd8>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
	delta_theta=0;
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <reset_Odometry+0xdc>)
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
	robot_linear_vel=0;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <reset_Odometry+0xe0>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
	robot_x_vel=0;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <reset_Odometry+0xe4>)
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
	robot_y_vel=0;
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <reset_Odometry+0xe8>)
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
	robot_angular_vel=0;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <reset_Odometry+0xec>)
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
	status_button=false;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <reset_Odometry+0xf0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]


}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	20000420 	.word	0x20000420
 8001ab0:	200005f4 	.word	0x200005f4
 8001ab4:	200005f8 	.word	0x200005f8
 8001ab8:	200005e4 	.word	0x200005e4
 8001abc:	200005e8 	.word	0x200005e8
 8001ac0:	20000694 	.word	0x20000694
 8001ac4:	2000068c 	.word	0x2000068c
 8001ac8:	20000690 	.word	0x20000690
 8001acc:	200005fc 	.word	0x200005fc
 8001ad0:	200005ec 	.word	0x200005ec
 8001ad4:	200005f0 	.word	0x200005f0
 8001ad8:	200005e0 	.word	0x200005e0
 8001adc:	20000684 	.word	0x20000684

08001ae0 <odometryUpdater>:

void odometryUpdater(int32_t enc_FL, int32_t enc_FR, int32_t enc_RL, int32_t enc_RR, int32_t w_FL, int32_t w_FR, int32_t w_RL, int32_t w_RR)
{
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
	float enc_res=979.2;
 8001aee:	4bc8      	ldr	r3, [pc, #800]	; (8001e10 <odometryUpdater+0x330>)
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
	t_curr=timer_indoor_system;
 8001af2:	4bc8      	ldr	r3, [pc, #800]	; (8001e14 <odometryUpdater+0x334>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4ac8      	ldr	r2, [pc, #800]	; (8001e18 <odometryUpdater+0x338>)
 8001af8:	6013      	str	r3, [r2, #0]


	counter_test1++;
 8001afa:	4bc8      	ldr	r3, [pc, #800]	; (8001e1c <odometryUpdater+0x33c>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b08:	4bc4      	ldr	r3, [pc, #784]	; (8001e1c <odometryUpdater+0x33c>)
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
	wheel_FL_ang_pos = 2 * 3.14 * enc_FL / enc_res;
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7fe fd28 	bl	8000564 <__aeabi_i2d>
 8001b14:	a3b8      	add	r3, pc, #736	; (adr r3, 8001df8 <odometryUpdater+0x318>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f7fe fd8d 	bl	8000638 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4614      	mov	r4, r2
 8001b24:	461d      	mov	r5, r3
 8001b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b28:	f7fe fd2e 	bl	8000588 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe feaa 	bl	800088c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f852 	bl	8000be8 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4ab6      	ldr	r2, [pc, #728]	; (8001e20 <odometryUpdater+0x340>)
 8001b48:	6013      	str	r3, [r2, #0]
    wheel_FR_ang_pos = 2 * 3.14 * enc_FR / enc_res;
 8001b4a:	68b8      	ldr	r0, [r7, #8]
 8001b4c:	f7fe fd0a 	bl	8000564 <__aeabi_i2d>
 8001b50:	a3a9      	add	r3, pc, #676	; (adr r3, 8001df8 <odometryUpdater+0x318>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fd6f 	bl	8000638 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b64:	f7fe fd10 	bl	8000588 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fe8c 	bl	800088c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f834 	bl	8000be8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4aa8      	ldr	r2, [pc, #672]	; (8001e24 <odometryUpdater+0x344>)
 8001b84:	6013      	str	r3, [r2, #0]
    wheel_RL_ang_pos = 2 * 3.14 * enc_RL / enc_res;
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fcec 	bl	8000564 <__aeabi_i2d>
 8001b8c:	a39a      	add	r3, pc, #616	; (adr r3, 8001df8 <odometryUpdater+0x318>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fd51 	bl	8000638 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4614      	mov	r4, r2
 8001b9c:	461d      	mov	r5, r3
 8001b9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ba0:	f7fe fcf2 	bl	8000588 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fe6e 	bl	800088c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7ff f816 	bl	8000be8 <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a9a      	ldr	r2, [pc, #616]	; (8001e28 <odometryUpdater+0x348>)
 8001bc0:	6013      	str	r3, [r2, #0]
    wheel_RR_ang_pos = 2 * 3.14 * enc_RR / enc_res;
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f7fe fcce 	bl	8000564 <__aeabi_i2d>
 8001bc8:	a38b      	add	r3, pc, #556	; (adr r3, 8001df8 <odometryUpdater+0x318>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fd33 	bl	8000638 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	461d      	mov	r5, r3
 8001bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bdc:	f7fe fcd4 	bl	8000588 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fe50 	bl	800088c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe fff8 	bl	8000be8 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4a8c      	ldr	r2, [pc, #560]	; (8001e2c <odometryUpdater+0x34c>)
 8001bfc:	6013      	str	r3, [r2, #0]


    testvar1=w_FL;
 8001bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c08:	4b89      	ldr	r3, [pc, #548]	; (8001e30 <odometryUpdater+0x350>)
 8001c0a:	edc3 7a00 	vstr	s15, [r3]





    enc_L = (enc_FL+enc_RL) / (2 * tyre_deflection);
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c1c:	4b85      	ldr	r3, [pc, #532]	; (8001e34 <odometryUpdater+0x354>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2a:	4b83      	ldr	r3, [pc, #524]	; (8001e38 <odometryUpdater+0x358>)
 8001c2c:	edc3 7a00 	vstr	s15, [r3]
    enc_R = (enc_FR+enc_RR) / (2 * tyre_deflection);
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c3e:	4b7d      	ldr	r3, [pc, #500]	; (8001e34 <odometryUpdater+0x354>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4c:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <odometryUpdater+0x35c>)
 8001c4e:	edc3 7a00 	vstr	s15, [r3]

    wheel_L_ang_vel=(((w_FL+w_RL)/2)/979.2)*(2*M_PI);
 8001c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c56:	4413      	add	r3, r2
 8001c58:	0fda      	lsrs	r2, r3, #31
 8001c5a:	4413      	add	r3, r2
 8001c5c:	105b      	asrs	r3, r3, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc80 	bl	8000564 <__aeabi_i2d>
 8001c64:	a366      	add	r3, pc, #408	; (adr r3, 8001e00 <odometryUpdater+0x320>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fe0f 	bl	800088c <__aeabi_ddiv>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	a364      	add	r3, pc, #400	; (adr r3, 8001e08 <odometryUpdater+0x328>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fcdc 	bl	8000638 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ffae 	bl	8000be8 <__aeabi_d2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a6c      	ldr	r2, [pc, #432]	; (8001e40 <odometryUpdater+0x360>)
 8001c90:	6013      	str	r3, [r2, #0]
    wheel_R_ang_vel=(((w_FR+w_RR)/2)/979.2)*(2*M_PI);
 8001c92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c96:	4413      	add	r3, r2
 8001c98:	0fda      	lsrs	r2, r3, #31
 8001c9a:	4413      	add	r3, r2
 8001c9c:	105b      	asrs	r3, r3, #1
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc60 	bl	8000564 <__aeabi_i2d>
 8001ca4:	a356      	add	r3, pc, #344	; (adr r3, 8001e00 <odometryUpdater+0x320>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fdef 	bl	800088c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	a354      	add	r3, pc, #336	; (adr r3, 8001e08 <odometryUpdater+0x328>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fcbc 	bl	8000638 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff8e 	bl	8000be8 <__aeabi_d2f>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <odometryUpdater+0x364>)
 8001cd0:	6013      	str	r3, [r2, #0]

    wheel_L_linear_vel=wheel_L_ang_vel*wheel_radius;
 8001cd2:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <odometryUpdater+0x360>)
 8001cd4:	ed93 7a00 	vldr	s14, [r3]
 8001cd8:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <odometryUpdater+0x368>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <odometryUpdater+0x36c>)
 8001ce4:	edc3 7a00 	vstr	s15, [r3]
	wheel_R_linear_vel=wheel_R_ang_vel*wheel_radius;
 8001ce8:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <odometryUpdater+0x364>)
 8001cea:	ed93 7a00 	vldr	s14, [r3]
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <odometryUpdater+0x368>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf8:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <odometryUpdater+0x370>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
//    }




    float cur_wheel_L_ang_pos = 2 * M_PI * enc_L / 979.2;
 8001cfe:	4b4e      	ldr	r3, [pc, #312]	; (8001e38 <odometryUpdater+0x358>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc40 	bl	8000588 <__aeabi_f2d>
 8001d08:	a33f      	add	r3, pc, #252	; (adr r3, 8001e08 <odometryUpdater+0x328>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fc93 	bl	8000638 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	a339      	add	r3, pc, #228	; (adr r3, 8001e00 <odometryUpdater+0x320>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fdb4 	bl	800088c <__aeabi_ddiv>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe ff5c 	bl	8000be8 <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	623b      	str	r3, [r7, #32]
    float cur_wheel_R_ang_pos = 2 * M_PI * enc_R / 979.2;
 8001d34:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <odometryUpdater+0x35c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc25 	bl	8000588 <__aeabi_f2d>
 8001d3e:	a332      	add	r3, pc, #200	; (adr r3, 8001e08 <odometryUpdater+0x328>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fc78 	bl	8000638 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	a32b      	add	r3, pc, #172	; (adr r3, 8001e00 <odometryUpdater+0x320>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fd99 	bl	800088c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe ff41 	bl	8000be8 <__aeabi_d2f>
 8001d66:	4603      	mov	r3, r0
 8001d68:	61fb      	str	r3, [r7, #28]

    if(((wheel_L_ang_vel>=0) & (wheel_R_ang_vel>=0))||((wheel_L_ang_vel<=0) & (wheel_R_ang_vel<=0))){
 8001d6a:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <odometryUpdater+0x360>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	bfac      	ite	ge
 8001d7a:	2301      	movge	r3, #1
 8001d7c:	2300      	movlt	r3, #0
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <odometryUpdater+0x364>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	bfac      	ite	ge
 8001d90:	2301      	movge	r3, #1
 8001d92:	2300      	movlt	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4013      	ands	r3, r2
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d119      	bne.n	8001dd2 <odometryUpdater+0x2f2>
 8001d9e:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <odometryUpdater+0x360>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	bf94      	ite	ls
 8001dae:	2301      	movls	r3, #1
 8001db0:	2300      	movhi	r3, #0
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <odometryUpdater+0x364>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d046      	beq.n	8001e60 <odometryUpdater+0x380>
    	robot_angular_vel=((wheel_R_ang_vel-wheel_L_ang_vel)*wheel_radius)/robot_width;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <odometryUpdater+0x364>)
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <odometryUpdater+0x360>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <odometryUpdater+0x368>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <odometryUpdater+0x374>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df6:	e02f      	b.n	8001e58 <odometryUpdater+0x378>
 8001df8:	51eb851f 	.word	0x51eb851f
 8001dfc:	40191eb8 	.word	0x40191eb8
 8001e00:	9999999a 	.word	0x9999999a
 8001e04:	408e9999 	.word	0x408e9999
 8001e08:	54442d18 	.word	0x54442d18
 8001e0c:	401921fb 	.word	0x401921fb
 8001e10:	4474cccd 	.word	0x4474cccd
 8001e14:	20000688 	.word	0x20000688
 8001e18:	20000564 	.word	0x20000564
 8001e1c:	2000051c 	.word	0x2000051c
 8001e20:	200005c8 	.word	0x200005c8
 8001e24:	200005cc 	.word	0x200005cc
 8001e28:	200005d0 	.word	0x200005d0
 8001e2c:	200005d4 	.word	0x200005d4
 8001e30:	20000640 	.word	0x20000640
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	200005d8 	.word	0x200005d8
 8001e3c:	200005dc 	.word	0x200005dc
 8001e40:	2000054c 	.word	0x2000054c
 8001e44:	20000550 	.word	0x20000550
 8001e48:	20000010 	.word	0x20000010
 8001e4c:	20000554 	.word	0x20000554
 8001e50:	20000558 	.word	0x20000558
 8001e54:	20000014 	.word	0x20000014
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <odometryUpdater+0x4c8>)
 8001e5a:	edc3 7a00 	vstr	s15, [r3]
 8001e5e:	e018      	b.n	8001e92 <odometryUpdater+0x3b2>

    }else{
    	robot_angular_vel=(((wheel_R_ang_vel-wheel_L_ang_vel)/2)*wheel_radius)/robot_width;
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <odometryUpdater+0x4cc>)
 8001e62:	ed93 7a00 	vldr	s14, [r3]
 8001e66:	4b52      	ldr	r3, [pc, #328]	; (8001fb0 <odometryUpdater+0x4d0>)
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e78:	4b4e      	ldr	r3, [pc, #312]	; (8001fb4 <odometryUpdater+0x4d4>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e82:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <odometryUpdater+0x4d8>)
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <odometryUpdater+0x4c8>)
 8001e8e:	edc3 7a00 	vstr	s15, [r3]

    }

    float delta_wheel_L_ang_pos=cur_wheel_L_ang_pos-ant_wheel_L_ang_pos;
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <odometryUpdater+0x4dc>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea0:	edc7 7a06 	vstr	s15, [r7, #24]
    ant_wheel_L_ang_pos=cur_wheel_L_ang_pos;
 8001ea4:	4a45      	ldr	r2, [pc, #276]	; (8001fbc <odometryUpdater+0x4dc>)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	6013      	str	r3, [r2, #0]

    float delta_wheel_R_ang_pos=cur_wheel_R_ang_pos-ant_wheel_R_ang_pos;
 8001eaa:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <odometryUpdater+0x4e0>)
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb8:	edc7 7a05 	vstr	s15, [r7, #20]
    ant_wheel_R_ang_pos=cur_wheel_R_ang_pos;
 8001ebc:	4a40      	ldr	r2, [pc, #256]	; (8001fc0 <odometryUpdater+0x4e0>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	6013      	str	r3, [r2, #0]





    theta_curr=theta_imu[2]+180;
 8001ec2:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <odometryUpdater+0x4e4>)
 8001ec4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ec8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001fc8 <odometryUpdater+0x4e8>
 8001ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <odometryUpdater+0x4ec>)
 8001ed2:	edc3 7a00 	vstr	s15, [r3]
    delta_theta=theta_curr-theta_ant;
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <odometryUpdater+0x4ec>)
 8001ed8:	ed93 7a00 	vldr	s14, [r3]
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <odometryUpdater+0x4f0>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <odometryUpdater+0x4f4>)
 8001ee8:	edc3 7a00 	vstr	s15, [r3]


    if(abs(delta_theta)>=50)
 8001eec:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <odometryUpdater+0x4f4>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef6:	ee17 3a90 	vmov	r3, s15
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bfb8      	it	lt
 8001efe:	425b      	neglt	r3, r3
 8001f00:	2b31      	cmp	r3, #49	; 0x31
 8001f02:	dd03      	ble.n	8001f0c <odometryUpdater+0x42c>
    {
    	delta_theta=0;
 8001f04:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <odometryUpdater+0x4f4>)
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    robot_angular_pos_aux=robot_angular_pos_aux+delta_theta;
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001f0e:	ed93 7a00 	vldr	s14, [r3]
 8001f12:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <odometryUpdater+0x4f4>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001f1e:	edc3 7a00 	vstr	s15, [r3]
    if(abs(robot_angular_pos_aux)>=360){
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2c:	ee17 3a90 	vmov	r3, s15
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bfb8      	it	lt
 8001f34:	425b      	neglt	r3, r3
 8001f36:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001f3a:	db03      	blt.n	8001f44 <odometryUpdater+0x464>
    	robot_angular_pos_aux=0;
 8001f3c:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
    }
    if(abs(robot_angular_pos_aux)<=-360){
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4e:	ee17 3a90 	vmov	r3, s15
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bfb8      	it	lt
 8001f56:	425b      	neglt	r3, r3
 8001f58:	f513 7fb4 	cmn.w	r3, #360	; 0x168
 8001f5c:	dc03      	bgt.n	8001f66 <odometryUpdater+0x486>
        	robot_angular_pos_aux=0;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    }
    if(robot_angular_pos_aux>=0 & robot_angular_pos_aux<=180){
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	bfac      	ite	ge
 8001f76:	2301      	movge	r3, #1
 8001f78:	2300      	movlt	r3, #0
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001fc8 <odometryUpdater+0x4e8>
 8001f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	bf94      	ite	ls
 8001f90:	2301      	movls	r3, #1
 8001f92:	2300      	movhi	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	4013      	ands	r3, r2
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d020      	beq.n	8001fe0 <odometryUpdater+0x500>
    	robot_angular_pos=robot_angular_pos_aux;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <odometryUpdater+0x4f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <odometryUpdater+0x4fc>)
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e039      	b.n	800201c <odometryUpdater+0x53c>
 8001fa8:	200005e0 	.word	0x200005e0
 8001fac:	20000550 	.word	0x20000550
 8001fb0:	2000054c 	.word	0x2000054c
 8001fb4:	20000010 	.word	0x20000010
 8001fb8:	20000014 	.word	0x20000014
 8001fbc:	20000648 	.word	0x20000648
 8001fc0:	20000644 	.word	0x20000644
 8001fc4:	20000330 	.word	0x20000330
 8001fc8:	43340000 	.word	0x43340000
 8001fcc:	2000068c 	.word	0x2000068c
 8001fd0:	20000694 	.word	0x20000694
 8001fd4:	20000690 	.word	0x20000690
 8001fd8:	200005e8 	.word	0x200005e8
 8001fdc:	200005e4 	.word	0x200005e4
    }else{
    	robot_angular_pos=(robot_angular_pos_aux-360);
 8001fe0:	4ba5      	ldr	r3, [pc, #660]	; (8002278 <odometryUpdater+0x798>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800227c <odometryUpdater+0x79c>
 8001fea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fee:	4ba4      	ldr	r3, [pc, #656]	; (8002280 <odometryUpdater+0x7a0>)
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
    	if(robot_angular_pos<=-360)
 8001ff4:	4ba2      	ldr	r3, [pc, #648]	; (8002280 <odometryUpdater+0x7a0>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002284 <odometryUpdater+0x7a4>
 8001ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002006:	d809      	bhi.n	800201c <odometryUpdater+0x53c>
    	{
    		robot_angular_pos+=360;
 8002008:	4b9d      	ldr	r3, [pc, #628]	; (8002280 <odometryUpdater+0x7a0>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800227c <odometryUpdater+0x79c>
 8002012:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002016:	4b9a      	ldr	r3, [pc, #616]	; (8002280 <odometryUpdater+0x7a0>)
 8002018:	edc3 7a00 	vstr	s15, [r3]
    	}

    }
    if(robot_angular_pos<=-180)
 800201c:	4b98      	ldr	r3, [pc, #608]	; (8002280 <odometryUpdater+0x7a0>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002288 <odometryUpdater+0x7a8>
 8002026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202e:	d816      	bhi.n	800205e <odometryUpdater+0x57e>
        	{
        		robot_angular_pos=180-abs(robot_angular_pos+180);
 8002030:	4b93      	ldr	r3, [pc, #588]	; (8002280 <odometryUpdater+0x7a0>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800228c <odometryUpdater+0x7ac>
 800203a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800203e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002042:	ee17 3a90 	vmov	r3, s15
 8002046:	2b00      	cmp	r3, #0
 8002048:	bfb8      	it	lt
 800204a:	425b      	neglt	r3, r3
 800204c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002058:	4b89      	ldr	r3, [pc, #548]	; (8002280 <odometryUpdater+0x7a0>)
 800205a:	edc3 7a00 	vstr	s15, [r3]
        	}

    robot_angular_pos=robot_angular_pos*M_PI/180;
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <odometryUpdater+0x7a0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa90 	bl	8000588 <__aeabi_f2d>
 8002068:	a381      	add	r3, pc, #516	; (adr r3, 8002270 <odometryUpdater+0x790>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe fae3 	bl	8000638 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b84      	ldr	r3, [pc, #528]	; (8002290 <odometryUpdater+0x7b0>)
 8002080:	f7fe fc04 	bl	800088c <__aeabi_ddiv>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f7fe fdac 	bl	8000be8 <__aeabi_d2f>
 8002090:	4603      	mov	r3, r0
 8002092:	4a7b      	ldr	r2, [pc, #492]	; (8002280 <odometryUpdater+0x7a0>)
 8002094:	6013      	str	r3, [r2, #0]
    theta_ant=theta_curr;
 8002096:	4b7f      	ldr	r3, [pc, #508]	; (8002294 <odometryUpdater+0x7b4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <odometryUpdater+0x7b8>)
 800209c:	6013      	str	r3, [r2, #0]


    sampling_time_odom=t_curr-t_ant;
 800209e:	4b7f      	ldr	r3, [pc, #508]	; (800229c <odometryUpdater+0x7bc>)
 80020a0:	ed93 7a00 	vldr	s14, [r3]
 80020a4:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <odometryUpdater+0x7c0>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ae:	4b7d      	ldr	r3, [pc, #500]	; (80022a4 <odometryUpdater+0x7c4>)
 80020b0:	edc3 7a00 	vstr	s15, [r3]
    //robot_angular_pos=robot_angular_pos+robot_angular_vel*0.02;
    //robot_angular_pos1=(theta_imu[2]);
    //robot_angular_pos=(theta_imu[2]-offset_theta);

    //robot_linear_vel=(wheel_L_ang_vel * wheel_radius+(robot_angular_vel*robot_width));
    robot_linear_vel=(wheel_L_linear_vel+wheel_R_linear_vel)/2;
 80020b4:	4b7c      	ldr	r3, [pc, #496]	; (80022a8 <odometryUpdater+0x7c8>)
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	4b7c      	ldr	r3, [pc, #496]	; (80022ac <odometryUpdater+0x7cc>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020cc:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <odometryUpdater+0x7d0>)
 80020ce:	edc3 7a00 	vstr	s15, [r3]
    robot_x_vel = robot_linear_vel * cos(robot_angular_pos);
 80020d2:	4b77      	ldr	r3, [pc, #476]	; (80022b0 <odometryUpdater+0x7d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa56 	bl	8000588 <__aeabi_f2d>
 80020dc:	4604      	mov	r4, r0
 80020de:	460d      	mov	r5, r1
 80020e0:	4b67      	ldr	r3, [pc, #412]	; (8002280 <odometryUpdater+0x7a0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fa4f 	bl	8000588 <__aeabi_f2d>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	ec43 2b10 	vmov	d0, r2, r3
 80020f2:	f00d fa59 	bl	800f5a8 <cos>
 80020f6:	ec53 2b10 	vmov	r2, r3, d0
 80020fa:	4620      	mov	r0, r4
 80020fc:	4629      	mov	r1, r5
 80020fe:	f7fe fa9b 	bl	8000638 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fd6d 	bl	8000be8 <__aeabi_d2f>
 800210e:	4603      	mov	r3, r0
 8002110:	4a68      	ldr	r2, [pc, #416]	; (80022b4 <odometryUpdater+0x7d4>)
 8002112:	6013      	str	r3, [r2, #0]
    robot_y_vel = robot_linear_vel * sin(robot_angular_pos);
 8002114:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <odometryUpdater+0x7d0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fa35 	bl	8000588 <__aeabi_f2d>
 800211e:	4604      	mov	r4, r0
 8002120:	460d      	mov	r5, r1
 8002122:	4b57      	ldr	r3, [pc, #348]	; (8002280 <odometryUpdater+0x7a0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fa2e 	bl	8000588 <__aeabi_f2d>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	ec43 2b10 	vmov	d0, r2, r3
 8002134:	f00d fa8c 	bl	800f650 <sin>
 8002138:	ec53 2b10 	vmov	r2, r3, d0
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe fa7a 	bl	8000638 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd4c 	bl	8000be8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a59      	ldr	r2, [pc, #356]	; (80022b8 <odometryUpdater+0x7d8>)
 8002154:	6013      	str	r3, [r2, #0]
    robot_x_pos = robot_x_pos + robot_x_vel * (sampling_time_odom);
 8002156:	4b57      	ldr	r3, [pc, #348]	; (80022b4 <odometryUpdater+0x7d4>)
 8002158:	ed93 7a00 	vldr	s14, [r3]
 800215c:	4b51      	ldr	r3, [pc, #324]	; (80022a4 <odometryUpdater+0x7c4>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002166:	4b55      	ldr	r3, [pc, #340]	; (80022bc <odometryUpdater+0x7dc>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002170:	4b52      	ldr	r3, [pc, #328]	; (80022bc <odometryUpdater+0x7dc>)
 8002172:	edc3 7a00 	vstr	s15, [r3]
    robot_y_pos = robot_y_pos + robot_y_vel * (sampling_time_odom);
 8002176:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <odometryUpdater+0x7d8>)
 8002178:	ed93 7a00 	vldr	s14, [r3]
 800217c:	4b49      	ldr	r3, [pc, #292]	; (80022a4 <odometryUpdater+0x7c4>)
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002186:	4b4e      	ldr	r3, [pc, #312]	; (80022c0 <odometryUpdater+0x7e0>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002190:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <odometryUpdater+0x7e0>)
 8002192:	edc3 7a00 	vstr	s15, [r3]



    t_ant=t_curr;
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <odometryUpdater+0x7bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a41      	ldr	r2, [pc, #260]	; (80022a0 <odometryUpdater+0x7c0>)
 800219c:	6013      	str	r3, [r2, #0]

	//accel_x=imu.acc[0];//x-linear acceleration
	//accel_y=imu.acc[1];
	//accel_z=imu.acc[2];

    mag_y=0;
 800219e:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <odometryUpdater+0x7e4>)
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
    gyro_z=0;
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <odometryUpdater+0x7e8>)
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
    accel_x=0;
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <odometryUpdater+0x7ec>)
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]


    buffer_txt[0]=robot_x_pos;
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <odometryUpdater+0x7dc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a45      	ldr	r2, [pc, #276]	; (80022d0 <odometryUpdater+0x7f0>)
 80021bc:	6013      	str	r3, [r2, #0]
    buffer_txt[1]=robot_y_pos;
 80021be:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <odometryUpdater+0x7e0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <odometryUpdater+0x7f0>)
 80021c4:	6053      	str	r3, [r2, #4]
    buffer_txt[2]=imu.ang[2]*M_PI/180;//theta_imu[2]-offset_theta;
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <odometryUpdater+0x7f4>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9dc 	bl	8000588 <__aeabi_f2d>
 80021d0:	a327      	add	r3, pc, #156	; (adr r3, 8002270 <odometryUpdater+0x790>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe fa2f 	bl	8000638 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <odometryUpdater+0x7b0>)
 80021e8:	f7fe fb50 	bl	800088c <__aeabi_ddiv>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fcf8 	bl	8000be8 <__aeabi_d2f>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a35      	ldr	r2, [pc, #212]	; (80022d0 <odometryUpdater+0x7f0>)
 80021fc:	6093      	str	r3, [r2, #8]
    buffer_txt[3]=robot_linear_vel;
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <odometryUpdater+0x7d0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <odometryUpdater+0x7f0>)
 8002204:	60d3      	str	r3, [r2, #12]
    buffer_txt[4]=0;
 8002206:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <odometryUpdater+0x7f0>)
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
    buffer_txt[5]=imu.w[2]*M_PI/180;//robot_angular_vel
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <odometryUpdater+0x7f4>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f9b8 	bl	8000588 <__aeabi_f2d>
 8002218:	a315      	add	r3, pc, #84	; (adr r3, 8002270 <odometryUpdater+0x790>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f7fe fa0b 	bl	8000638 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <odometryUpdater+0x7b0>)
 8002230:	f7fe fb2c 	bl	800088c <__aeabi_ddiv>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f7fe fcd4 	bl	8000be8 <__aeabi_d2f>
 8002240:	4603      	mov	r3, r0
 8002242:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <odometryUpdater+0x7f0>)
 8002244:	6153      	str	r3, [r2, #20]
    buffer_txt[6]=mag_y;
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <odometryUpdater+0x7e4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <odometryUpdater+0x7f0>)
 800224c:	6193      	str	r3, [r2, #24]
    buffer_txt[7]=gyro_z;
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <odometryUpdater+0x7e8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <odometryUpdater+0x7f0>)
 8002254:	61d3      	str	r3, [r2, #28]
    buffer_txt[8]=accel_x;
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <odometryUpdater+0x7ec>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <odometryUpdater+0x7f0>)
 800225c:	6213      	str	r3, [r2, #32]
    CDC_Transmit_FS(&buffer_txt, 9 * sizeof(float));
 800225e:	2124      	movs	r1, #36	; 0x24
 8002260:	481b      	ldr	r0, [pc, #108]	; (80022d0 <odometryUpdater+0x7f0>)
 8002262:	f009 ff77 	bl	800c154 <CDC_Transmit_FS>



}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bdb0      	pop	{r4, r5, r7, pc}
 800226e:	bf00      	nop
 8002270:	54442d18 	.word	0x54442d18
 8002274:	400921fb 	.word	0x400921fb
 8002278:	200005e8 	.word	0x200005e8
 800227c:	43b40000 	.word	0x43b40000
 8002280:	200005e4 	.word	0x200005e4
 8002284:	c3b40000 	.word	0xc3b40000
 8002288:	c3340000 	.word	0xc3340000
 800228c:	43340000 	.word	0x43340000
 8002290:	40668000 	.word	0x40668000
 8002294:	2000068c 	.word	0x2000068c
 8002298:	20000694 	.word	0x20000694
 800229c:	20000564 	.word	0x20000564
 80022a0:	20000560 	.word	0x20000560
 80022a4:	2000055c 	.word	0x2000055c
 80022a8:	20000554 	.word	0x20000554
 80022ac:	20000558 	.word	0x20000558
 80022b0:	200005fc 	.word	0x200005fc
 80022b4:	200005ec 	.word	0x200005ec
 80022b8:	200005f0 	.word	0x200005f0
 80022bc:	200005f4 	.word	0x200005f4
 80022c0:	200005f8 	.word	0x200005f8
 80022c4:	200006a0 	.word	0x200006a0
 80022c8:	2000069c 	.word	0x2000069c
 80022cc:	20000698 	.word	0x20000698
 80022d0:	200004ec 	.word	0x200004ec
 80022d4:	20000568 	.word	0x20000568

080022d8 <setSpeed>:



void setSpeed(float linear, float angular)
{
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	ed87 0a01 	vstr	s0, [r7, #4]
 80022e2:	edc7 0a00 	vstr	s1, [r7]
    float enc_res=979.2;
 80022e6:	4bba      	ldr	r3, [pc, #744]	; (80025d0 <setSpeed+0x2f8>)
 80022e8:	60fb      	str	r3, [r7, #12]

	bool set_0,set_1;
	lin = linear;
 80022ea:	4aba      	ldr	r2, [pc, #744]	; (80025d4 <setSpeed+0x2fc>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6013      	str	r3, [r2, #0]
    ang = angular;
 80022f0:	4ab9      	ldr	r2, [pc, #740]	; (80025d8 <setSpeed+0x300>)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6013      	str	r3, [r2, #0]
    if(fabs(lin)>1.5386) 	lin=(linear/fabs(linear))*1.5386;
 80022f6:	4bb7      	ldr	r3, [pc, #732]	; (80025d4 <setSpeed+0x2fc>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	eef0 7ae7 	vabs.f32	s15, s15
 8002300:	ee17 0a90 	vmov	r0, s15
 8002304:	f7fe f940 	bl	8000588 <__aeabi_f2d>
 8002308:	a3ab      	add	r3, pc, #684	; (adr r3, 80025b8 <setSpeed+0x2e0>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe fc23 	bl	8000b58 <__aeabi_dcmpgt>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d024      	beq.n	8002362 <setSpeed+0x8a>
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7fe f935 	bl	8000588 <__aeabi_f2d>
 800231e:	4604      	mov	r4, r0
 8002320:	460d      	mov	r5, r1
 8002322:	edd7 7a01 	vldr	s15, [r7, #4]
 8002326:	eef0 7ae7 	vabs.f32	s15, s15
 800232a:	ee17 0a90 	vmov	r0, s15
 800232e:	f7fe f92b 	bl	8000588 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f7fe faa7 	bl	800088c <__aeabi_ddiv>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	a39c      	add	r3, pc, #624	; (adr r3, 80025b8 <setSpeed+0x2e0>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f974 	bl	8000638 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fc46 	bl	8000be8 <__aeabi_d2f>
 800235c:	4603      	mov	r3, r0
 800235e:	4a9d      	ldr	r2, [pc, #628]	; (80025d4 <setSpeed+0x2fc>)
 8002360:	6013      	str	r3, [r2, #0]
    if(fabs(ang)>14.65) 	ang=(angular/fabs(angular))*14.65;
 8002362:	4b9d      	ldr	r3, [pc, #628]	; (80025d8 <setSpeed+0x300>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	eef0 7ae7 	vabs.f32	s15, s15
 800236c:	ee17 0a90 	vmov	r0, s15
 8002370:	f7fe f90a 	bl	8000588 <__aeabi_f2d>
 8002374:	a392      	add	r3, pc, #584	; (adr r3, 80025c0 <setSpeed+0x2e8>)
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	f7fe fbed 	bl	8000b58 <__aeabi_dcmpgt>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d024      	beq.n	80023ce <setSpeed+0xf6>
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	f7fe f8ff 	bl	8000588 <__aeabi_f2d>
 800238a:	4604      	mov	r4, r0
 800238c:	460d      	mov	r5, r1
 800238e:	edd7 7a00 	vldr	s15, [r7]
 8002392:	eef0 7ae7 	vabs.f32	s15, s15
 8002396:	ee17 0a90 	vmov	r0, s15
 800239a:	f7fe f8f5 	bl	8000588 <__aeabi_f2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe fa71 	bl	800088c <__aeabi_ddiv>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	a383      	add	r3, pc, #524	; (adr r3, 80025c0 <setSpeed+0x2e8>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f93e 	bl	8000638 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fc10 	bl	8000be8 <__aeabi_d2f>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4a83      	ldr	r2, [pc, #524]	; (80025d8 <setSpeed+0x300>)
 80023cc:	6013      	str	r3, [r2, #0]



    L_wheel_lin_speed = lin - (ang * robot_width);
 80023ce:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <setSpeed+0x2fc>)
 80023d0:	ed93 7a00 	vldr	s14, [r3]
 80023d4:	4b80      	ldr	r3, [pc, #512]	; (80025d8 <setSpeed+0x300>)
 80023d6:	edd3 6a00 	vldr	s13, [r3]
 80023da:	4b80      	ldr	r3, [pc, #512]	; (80025dc <setSpeed+0x304>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e8:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <setSpeed+0x308>)
 80023ea:	edc3 7a00 	vstr	s15, [r3]
    R_wheel_lin_speed = lin + (ang * robot_width);
 80023ee:	4b7a      	ldr	r3, [pc, #488]	; (80025d8 <setSpeed+0x300>)
 80023f0:	ed93 7a00 	vldr	s14, [r3]
 80023f4:	4b79      	ldr	r3, [pc, #484]	; (80025dc <setSpeed+0x304>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fe:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <setSpeed+0x2fc>)
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <setSpeed+0x30c>)
 800240a:	edc3 7a00 	vstr	s15, [r3]
    L_wheel_angular_velocity = L_wheel_lin_speed / wheel_radius;
 800240e:	4b74      	ldr	r3, [pc, #464]	; (80025e0 <setSpeed+0x308>)
 8002410:	edd3 6a00 	vldr	s13, [r3]
 8002414:	4b74      	ldr	r3, [pc, #464]	; (80025e8 <setSpeed+0x310>)
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800241e:	4b73      	ldr	r3, [pc, #460]	; (80025ec <setSpeed+0x314>)
 8002420:	edc3 7a00 	vstr	s15, [r3]
    R_wheel_angular_velocity = R_wheel_lin_speed / wheel_radius;
 8002424:	4b6f      	ldr	r3, [pc, #444]	; (80025e4 <setSpeed+0x30c>)
 8002426:	edd3 6a00 	vldr	s13, [r3]
 800242a:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <setSpeed+0x310>)
 800242c:	ed93 7a00 	vldr	s14, [r3]
 8002430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002434:	4b6e      	ldr	r3, [pc, #440]	; (80025f0 <setSpeed+0x318>)
 8002436:	edc3 7a00 	vstr	s15, [r3]
    L_enc_speed = enc_res * L_wheel_angular_velocity / (2 * M_PI);
 800243a:	4b6c      	ldr	r3, [pc, #432]	; (80025ec <setSpeed+0x314>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	edd7 7a03 	vldr	s15, [r7, #12]
 8002444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002448:	ee17 0a90 	vmov	r0, s15
 800244c:	f7fe f89c 	bl	8000588 <__aeabi_f2d>
 8002450:	a35d      	add	r3, pc, #372	; (adr r3, 80025c8 <setSpeed+0x2f0>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe fa19 	bl	800088c <__aeabi_ddiv>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fbc1 	bl	8000be8 <__aeabi_d2f>
 8002466:	4603      	mov	r3, r0
 8002468:	4a62      	ldr	r2, [pc, #392]	; (80025f4 <setSpeed+0x31c>)
 800246a:	6013      	str	r3, [r2, #0]
    R_enc_speed = enc_res * R_wheel_angular_velocity / (2 * M_PI);
 800246c:	4b60      	ldr	r3, [pc, #384]	; (80025f0 <setSpeed+0x318>)
 800246e:	ed93 7a00 	vldr	s14, [r3]
 8002472:	edd7 7a03 	vldr	s15, [r7, #12]
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	ee17 0a90 	vmov	r0, s15
 800247e:	f7fe f883 	bl	8000588 <__aeabi_f2d>
 8002482:	a351      	add	r3, pc, #324	; (adr r3, 80025c8 <setSpeed+0x2f0>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fe fa00 	bl	800088c <__aeabi_ddiv>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f7fe fba8 	bl	8000be8 <__aeabi_d2f>
 8002498:	4603      	mov	r3, r0
 800249a:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <setSpeed+0x320>)
 800249c:	6013      	str	r3, [r2, #0]



    if(abs(L_enc_speed)>max_speed || abs(R_enc_speed)>max_speed)
 800249e:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <setSpeed+0x31c>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a8:	ee17 3a90 	vmov	r3, s15
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bfb8      	it	lt
 80024b0:	425b      	neglt	r3, r3
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ba:	4b50      	ldr	r3, [pc, #320]	; (80025fc <setSpeed+0x324>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	dc16      	bgt.n	80024f8 <setSpeed+0x220>
 80024ca:	4b4b      	ldr	r3, [pc, #300]	; (80025f8 <setSpeed+0x320>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d4:	ee17 3a90 	vmov	r3, s15
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bfb8      	it	lt
 80024dc:	425b      	neglt	r3, r3
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e6:	4b45      	ldr	r3, [pc, #276]	; (80025fc <setSpeed+0x324>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	f340 80e7 	ble.w	80026c6 <setSpeed+0x3ee>
    {
    	if(abs(R_enc_speed)>abs(L_enc_speed))
 80024f8:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <setSpeed+0x320>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002502:	ee17 3a90 	vmov	r3, s15
 8002506:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800250a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800250e:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <setSpeed+0x31c>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002518:	ee17 3a90 	vmov	r3, s15
 800251c:	2b00      	cmp	r3, #0
 800251e:	bfb8      	it	lt
 8002520:	425b      	neglt	r3, r3
 8002522:	429a      	cmp	r2, r3
 8002524:	dd72      	ble.n	800260c <setSpeed+0x334>
    	{
    		rot_radio= fabs(R_enc_speed/max_speed);
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <setSpeed+0x320>)
 8002528:	edd3 6a00 	vldr	s13, [r3]
 800252c:	4b33      	ldr	r3, [pc, #204]	; (80025fc <setSpeed+0x324>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002536:	eef0 7ae7 	vabs.f32	s15, s15
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <setSpeed+0x328>)
 800253c:	edc3 7a00 	vstr	s15, [r3]
    		new_R_enc_speed=(R_enc_speed/fabs(R_enc_speed))*max_speed;  //(R_enc_speed/fabs(R_enc_speed)) is to get the sign of the original command
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <setSpeed+0x320>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe f81f 	bl	8000588 <__aeabi_f2d>
 800254a:	4604      	mov	r4, r0
 800254c:	460d      	mov	r5, r1
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <setSpeed+0x320>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eef0 7ae7 	vabs.f32	s15, s15
 8002558:	ee17 0a90 	vmov	r0, s15
 800255c:	f7fe f814 	bl	8000588 <__aeabi_f2d>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fe f990 	bl	800088c <__aeabi_ddiv>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4614      	mov	r4, r2
 8002572:	461d      	mov	r5, r3
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <setSpeed+0x324>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe f805 	bl	8000588 <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fe f857 	bl	8000638 <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fb29 	bl	8000be8 <__aeabi_d2f>
 8002596:	4603      	mov	r3, r0
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <setSpeed+0x32c>)
 800259a:	6013      	str	r3, [r2, #0]
    		new_L_enc_speed=L_enc_speed/rot_radio;
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <setSpeed+0x31c>)
 800259e:	edd3 6a00 	vldr	s13, [r3]
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <setSpeed+0x328>)
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <setSpeed+0x330>)
 80025ae:	edc3 7a00 	vstr	s15, [r3]
 80025b2:	e071      	b.n	8002698 <setSpeed+0x3c0>
 80025b4:	f3af 8000 	nop.w
 80025b8:	089a0275 	.word	0x089a0275
 80025bc:	3ff89e1b 	.word	0x3ff89e1b
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	402d4ccc 	.word	0x402d4ccc
 80025c8:	54442d18 	.word	0x54442d18
 80025cc:	401921fb 	.word	0x401921fb
 80025d0:	4474cccd 	.word	0x4474cccd
 80025d4:	20000520 	.word	0x20000520
 80025d8:	20000524 	.word	0x20000524
 80025dc:	20000014 	.word	0x20000014
 80025e0:	20000528 	.word	0x20000528
 80025e4:	2000052c 	.word	0x2000052c
 80025e8:	20000010 	.word	0x20000010
 80025ec:	20000530 	.word	0x20000530
 80025f0:	20000534 	.word	0x20000534
 80025f4:	20000538 	.word	0x20000538
 80025f8:	2000053c 	.word	0x2000053c
 80025fc:	20000018 	.word	0x20000018
 8002600:	20000540 	.word	0x20000540
 8002604:	20000548 	.word	0x20000548
 8002608:	20000544 	.word	0x20000544
    	}else{
    		rot_radio= fabs(L_enc_speed/max_speed);
 800260c:	4b45      	ldr	r3, [pc, #276]	; (8002724 <setSpeed+0x44c>)
 800260e:	edd3 6a00 	vldr	s13, [r3]
 8002612:	4b45      	ldr	r3, [pc, #276]	; (8002728 <setSpeed+0x450>)
 8002614:	ed93 7a00 	vldr	s14, [r3]
 8002618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261c:	eef0 7ae7 	vabs.f32	s15, s15
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <setSpeed+0x454>)
 8002622:	edc3 7a00 	vstr	s15, [r3]
    		new_L_enc_speed=(R_enc_speed/fabs(R_enc_speed))*max_speed;
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <setSpeed+0x458>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd ffac 	bl	8000588 <__aeabi_f2d>
 8002630:	4604      	mov	r4, r0
 8002632:	460d      	mov	r5, r1
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <setSpeed+0x458>)
 8002636:	edd3 7a00 	vldr	s15, [r3]
 800263a:	eef0 7ae7 	vabs.f32	s15, s15
 800263e:	ee17 0a90 	vmov	r0, s15
 8002642:	f7fd ffa1 	bl	8000588 <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4620      	mov	r0, r4
 800264c:	4629      	mov	r1, r5
 800264e:	f7fe f91d 	bl	800088c <__aeabi_ddiv>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4614      	mov	r4, r2
 8002658:	461d      	mov	r5, r3
 800265a:	4b33      	ldr	r3, [pc, #204]	; (8002728 <setSpeed+0x450>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff92 	bl	8000588 <__aeabi_f2d>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4620      	mov	r0, r4
 800266a:	4629      	mov	r1, r5
 800266c:	f7fd ffe4 	bl	8000638 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fab6 	bl	8000be8 <__aeabi_d2f>
 800267c:	4603      	mov	r3, r0
 800267e:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <setSpeed+0x45c>)
 8002680:	6013      	str	r3, [r2, #0]
    		new_R_enc_speed=R_enc_speed/rot_radio;
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <setSpeed+0x458>)
 8002684:	edd3 6a00 	vldr	s13, [r3]
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <setSpeed+0x454>)
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <setSpeed+0x460>)
 8002694:	edc3 7a00 	vstr	s15, [r3]
    	}



    	setPower(new_L_enc_speed, new_R_enc_speed, new_R_enc_speed, new_L_enc_speed);  //M1-M2-M3-M4
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <setSpeed+0x45c>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <setSpeed+0x460>)
 80026a0:	ed93 7a00 	vldr	s14, [r3]
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <setSpeed+0x460>)
 80026a6:	edd3 6a00 	vldr	s13, [r3]
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <setSpeed+0x45c>)
 80026ac:	ed93 6a00 	vldr	s12, [r3]
 80026b0:	eef0 1a46 	vmov.f32	s3, s12
 80026b4:	eeb0 1a66 	vmov.f32	s2, s13
 80026b8:	eef0 0a47 	vmov.f32	s1, s14
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	f000 f874 	bl	80027ac <setPower>
 80026c4:	e02a      	b.n	800271c <setSpeed+0x444>
    }else
    {



    	set_0=Drive_M1_M2_With_Signed_Speed(address_huart1,(uint8_t)address_roboclaw1, L_enc_speed, R_enc_speed);
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <setSpeed+0x464>)
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <setSpeed+0x44c>)
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <setSpeed+0x458>)
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026de:	ee17 3a90 	vmov	r3, s15
 80026e2:	ee17 2a10 	vmov	r2, s14
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	f000 f9af 	bl	8002a4a <Drive_M1_M2_With_Signed_Speed>
 80026ec:	4603      	mov	r3, r0
 80026ee:	72fb      	strb	r3, [r7, #11]
    	set_1=Drive_M1_M2_With_Signed_Speed(address_huart2,(uint8_t)address_roboclaw2, L_enc_speed, R_enc_speed);
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <setSpeed+0x468>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <setSpeed+0x44c>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <setSpeed+0x458>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002708:	ee17 3a90 	vmov	r3, s15
 800270c:	ee17 2a10 	vmov	r2, s14
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	f000 f99a 	bl	8002a4a <Drive_M1_M2_With_Signed_Speed>
 8002716:	4603      	mov	r3, r0
 8002718:	72bb      	strb	r3, [r7, #10]
    }

}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bdb0      	pop	{r4, r5, r7, pc}
 8002724:	20000538 	.word	0x20000538
 8002728:	20000018 	.word	0x20000018
 800272c:	20000540 	.word	0x20000540
 8002730:	2000053c 	.word	0x2000053c
 8002734:	20000544 	.word	0x20000544
 8002738:	20000548 	.word	0x20000548
 800273c:	20000000 	.word	0x20000000
 8002740:	20000004 	.word	0x20000004

08002744 <map>:
//----------------------------------------------------



float map(float value, float in_low, float in_high, float out_low, float out_high)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	ed87 0a05 	vstr	s0, [r7, #20]
 800274e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002752:	ed87 1a03 	vstr	s2, [r7, #12]
 8002756:	edc7 1a02 	vstr	s3, [r7, #8]
 800275a:	ed87 2a01 	vstr	s4, [r7, #4]
    float outgoing = out_low + (out_high - out_low) * ((value - in_low) / (in_high - in_low));
 800275e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002762:	edd7 7a02 	vldr	s15, [r7, #8]
 8002766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800276a:	edd7 6a05 	vldr	s13, [r7, #20]
 800276e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002772:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002776:	edd7 6a03 	vldr	s13, [r7, #12]
 800277a:	edd7 7a04 	vldr	s15, [r7, #16]
 800277e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002782:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	ed97 7a02 	vldr	s14, [r7, #8]
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	edc7 7a07 	vstr	s15, [r7, #28]
    return outgoing;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	ee07 3a90 	vmov	s15, r3
  }
 800279c:	eeb0 0a67 	vmov.f32	s0, s15
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <setPower>:

void setPower(float power_M1, float power_M2, float power_M3, float power_M4)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80027b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80027ba:	ed87 1a01 	vstr	s2, [r7, #4]
 80027be:	edc7 1a00 	vstr	s3, [r7]
	M1_pwm = map(power_M1,min_speed,max_speed,min_pwm,max_pwm);
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <setPower+0x108>)
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <setPower+0x10c>)
 80027ca:	ed93 7a00 	vldr	s14, [r3]
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <setPower+0x110>)
 80027d0:	edd3 6a00 	vldr	s13, [r3]
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <setPower+0x114>)
 80027d6:	ed93 6a00 	vldr	s12, [r3]
 80027da:	eeb0 2a46 	vmov.f32	s4, s12
 80027de:	eef0 1a66 	vmov.f32	s3, s13
 80027e2:	eeb0 1a47 	vmov.f32	s2, s14
 80027e6:	eef0 0a67 	vmov.f32	s1, s15
 80027ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80027ee:	f7ff ffa9 	bl	8002744 <map>
 80027f2:	eef0 7a40 	vmov.f32	s15, s0
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <setPower+0x118>)
 80027f8:	edc3 7a00 	vstr	s15, [r3]
	M2_pwm = map(power_M2,min_speed,max_speed,min_pwm,max_pwm);
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <setPower+0x108>)
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <setPower+0x10c>)
 8002804:	ed93 7a00 	vldr	s14, [r3]
 8002808:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <setPower+0x110>)
 800280a:	edd3 6a00 	vldr	s13, [r3]
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <setPower+0x114>)
 8002810:	ed93 6a00 	vldr	s12, [r3]
 8002814:	eeb0 2a46 	vmov.f32	s4, s12
 8002818:	eef0 1a66 	vmov.f32	s3, s13
 800281c:	eeb0 1a47 	vmov.f32	s2, s14
 8002820:	eef0 0a67 	vmov.f32	s1, s15
 8002824:	ed97 0a02 	vldr	s0, [r7, #8]
 8002828:	f7ff ff8c 	bl	8002744 <map>
 800282c:	eef0 7a40 	vmov.f32	s15, s0
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <setPower+0x11c>)
 8002832:	edc3 7a00 	vstr	s15, [r3]
	M3_pwm = map(power_M3,min_speed,max_speed,min_pwm,max_pwm);
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <setPower+0x108>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <setPower+0x10c>)
 800283e:	ed93 7a00 	vldr	s14, [r3]
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <setPower+0x110>)
 8002844:	edd3 6a00 	vldr	s13, [r3]
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <setPower+0x114>)
 800284a:	ed93 6a00 	vldr	s12, [r3]
 800284e:	eeb0 2a46 	vmov.f32	s4, s12
 8002852:	eef0 1a66 	vmov.f32	s3, s13
 8002856:	eeb0 1a47 	vmov.f32	s2, s14
 800285a:	eef0 0a67 	vmov.f32	s1, s15
 800285e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002862:	f7ff ff6f 	bl	8002744 <map>
 8002866:	eef0 7a40 	vmov.f32	s15, s0
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <setPower+0x120>)
 800286c:	edc3 7a00 	vstr	s15, [r3]
	M4_pwm = map(power_M4,min_speed,max_speed,min_pwm,max_pwm);
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <setPower+0x108>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <setPower+0x10c>)
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <setPower+0x110>)
 800287e:	edd3 6a00 	vldr	s13, [r3]
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <setPower+0x114>)
 8002884:	ed93 6a00 	vldr	s12, [r3]
 8002888:	eeb0 2a46 	vmov.f32	s4, s12
 800288c:	eef0 1a66 	vmov.f32	s3, s13
 8002890:	eeb0 1a47 	vmov.f32	s2, s14
 8002894:	eef0 0a67 	vmov.f32	s1, s15
 8002898:	ed97 0a00 	vldr	s0, [r7]
 800289c:	f7ff ff52 	bl	8002744 <map>
 80028a0:	eef0 7a40 	vmov.f32	s15, s0
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <setPower+0x124>)
 80028a6:	edc3 7a00 	vstr	s15, [r3]
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, M2_pwm);
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, M3_pwm);
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, M4_pwm);


}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000001c 	.word	0x2000001c
 80028b8:	20000018 	.word	0x20000018
 80028bc:	20000020 	.word	0x20000020
 80028c0:	20000024 	.word	0x20000024
 80028c4:	20000600 	.word	0x20000600
 80028c8:	20000604 	.word	0x20000604
 80028cc:	20000608 	.word	0x20000608
 80028d0:	2000060c 	.word	0x2000060c

080028d4 <Read_Encoder_Speed>:
	  HAL_UART_Receive(address_huart, rxBuff, 7,100);
	  return (int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
}

bool Read_Encoder_Speed(UART_HandleTypeDef* address_huart, uint8_t address_roboclaw, int motor, int32_t *speedMX_roboclaw)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	460b      	mov	r3, r1
 80028e2:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd_motor;
	if (motor==1) cmd_motor=18;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <Read_Encoder_Speed+0x1c>
 80028ea:	2312      	movs	r3, #18
 80028ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (motor==2) cmd_motor=19;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d102      	bne.n	80028fc <Read_Encoder_Speed+0x28>
 80028f6:	2313      	movs	r3, #19
 80028f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t txBuff[2]; // two bytes for address and cmd, two for value
	txBuff[0] = address_roboclaw; //first to write is address
 80028fc:	7afb      	ldrb	r3, [r7, #11]
 80028fe:	f887 3020 	strb.w	r3, [r7, #32]
	txBuff[1] = cmd_motor; // second is cmd
 8002902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002906:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 100);
 800290a:	f107 0120 	add.w	r1, r7, #32
 800290e:	2364      	movs	r3, #100	; 0x64
 8002910:	2202      	movs	r2, #2
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f004 fe33 	bl	800757e <HAL_UART_Transmit>

	uint8_t rxBuff[7];
	HAL_UART_Receive(address_huart, rxBuff, 7,100);
 8002918:	f107 0118 	add.w	r1, r7, #24
 800291c:	2364      	movs	r3, #100	; 0x64
 800291e:	2207      	movs	r2, #7
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f004 febe 	bl	80076a2 <HAL_UART_Receive>
 8002926:	8c3b      	ldrh	r3, [r7, #32]


	//CHECK THE CHK REGISTER-----------------
	uint8_t chk[7];
	memcpy(&chk[0],&txBuff[0],2);
 8002928:	823b      	strh	r3, [r7, #16]
	memcpy(&chk[2],&rxBuff[0],5);
 800292a:	f107 0118 	add.w	r1, r7, #24
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	3302      	adds	r3, #2
 8002934:	2205      	movs	r2, #5
 8002936:	4618      	mov	r0, r3
 8002938:	f00a f916 	bl	800cb68 <memcpy>
	uint16_t crc_tx= crc16((unsigned char *)chk,7);
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	2107      	movs	r1, #7
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fa0c 	bl	8002d60 <crc16>
 8002948:	4603      	mov	r3, r0
 800294a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t crc_rx= (rxBuff[5]<<8 | rxBuff[6]);
 800294c:	7f7b      	ldrb	r3, [r7, #29]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	b21a      	sxth	r2, r3
 8002952:	7fbb      	ldrb	r3, [r7, #30]
 8002954:	b21b      	sxth	r3, r3
 8002956:	4313      	orrs	r3, r2
 8002958:	b21b      	sxth	r3, r3
 800295a:	847b      	strh	r3, [r7, #34]	; 0x22
	//---------------------------------------

	if(crc_tx==crc_rx){
 800295c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800295e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002960:	429a      	cmp	r2, r3
 8002962:	d10d      	bne.n	8002980 <Read_Encoder_Speed+0xac>
		*speedMX_roboclaw=(int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
 8002964:	7e3b      	ldrb	r3, [r7, #24]
 8002966:	061a      	lsls	r2, r3, #24
 8002968:	7e7b      	ldrb	r3, [r7, #25]
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	431a      	orrs	r2, r3
 800296e:	7ebb      	ldrb	r3, [r7, #26]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	4313      	orrs	r3, r2
 8002974:	7efa      	ldrb	r2, [r7, #27]
 8002976:	431a      	orrs	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	601a      	str	r2, [r3, #0]
		return true;
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <Read_Encoder_Speed+0xae>
	}
	else{
		return false;
 8002980:	2300      	movs	r3, #0
	}
}
 8002982:	4618      	mov	r0, r3
 8002984:	3728      	adds	r7, #40	; 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <Read_Both_Encoder_Counts>:
	}

}


bool Read_Both_Encoder_Counts(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw, int32_t *countsM1_roboclaw, int32_t *countsM2_roboclaw){
 800298a:	b580      	push	{r7, lr}
 800298c:	b08c      	sub	sp, #48	; 0x30
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	460b      	mov	r3, r1
 8002998:	72fb      	strb	r3, [r7, #11]
	uint8_t txBuff[2]; // two bytes for address and cmd, two for value
	txBuff[0] = address_roboclaw; //first to write is address
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	txBuff[1] = (uint8_t)78; // second is cmd
 80029a0:	234e      	movs	r3, #78	; 0x4e
 80029a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 100);
 80029a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80029aa:	2364      	movs	r3, #100	; 0x64
 80029ac:	2202      	movs	r2, #2
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f004 fde5 	bl	800757e <HAL_UART_Transmit>

	uint8_t rxBuff[10];
	HAL_UART_Receive(address_huart, rxBuff, 10,100);
 80029b4:	f107 011c 	add.w	r1, r7, #28
 80029b8:	2364      	movs	r3, #100	; 0x64
 80029ba:	220a      	movs	r2, #10
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f004 fe70 	bl	80076a2 <HAL_UART_Receive>
 80029c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

	//CHECK THE CHK REGISTER-----------------
	uint8_t chk[10];
	memcpy(chk,txBuff,2);
 80029c4:	823b      	strh	r3, [r7, #16]
	memcpy(chk+2,rxBuff,8);
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	3302      	adds	r3, #2
 80029cc:	f107 011c 	add.w	r1, r7, #28
 80029d0:	2208      	movs	r2, #8
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00a f8c8 	bl	800cb68 <memcpy>
	uint16_t crc_tx= crc16((unsigned char *)chk,10);
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	210a      	movs	r1, #10
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f9be 	bl	8002d60 <crc16>
 80029e4:	4603      	mov	r3, r0
 80029e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t crc_rx= (rxBuff[8]<<8 | rxBuff[9]);
 80029e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	b21b      	sxth	r3, r3
 80029fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
	//---------------------------------------

	if(crc_tx==crc_rx){
 80029fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80029fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d11d      	bne.n	8002a40 <Read_Both_Encoder_Counts+0xb6>
		*countsM1_roboclaw=(int32_t) ((uint32_t)((rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | rxBuff[3]));
 8002a04:	7f3b      	ldrb	r3, [r7, #28]
 8002a06:	061a      	lsls	r2, r3, #24
 8002a08:	7f7b      	ldrb	r3, [r7, #29]
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	7fbb      	ldrb	r3, [r7, #30]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	4313      	orrs	r3, r2
 8002a14:	7ffa      	ldrb	r2, [r7, #31]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	601a      	str	r2, [r3, #0]
		*countsM2_roboclaw=(int32_t) ((uint32_t)((rxBuff[4] << 24) | (rxBuff[5] << 16) | (rxBuff[6] << 8) | rxBuff[7]));
 8002a1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a20:	061a      	lsls	r2, r3, #24
 8002a22:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a36:	431a      	orrs	r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	601a      	str	r2, [r3, #0]
		return true;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <Read_Both_Encoder_Counts+0xb8>
	}
	else{
		return false;
 8002a40:	2300      	movs	r3, #0
	}

}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3730      	adds	r7, #48	; 0x30
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <Drive_M1_M2_With_Signed_Speed>:
		for(int i=0;i<=7;i++){
			chk[i+2]=*(rxBuff_dir+i);
		}
*/

bool Drive_M1_M2_With_Signed_Speed(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw, int32_t SpeedM1, int32_t SpeedM2){
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08a      	sub	sp, #40	; 0x28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	460b      	mov	r3, r1
 8002a58:	72fb      	strb	r3, [r7, #11]

	  uint8_t txBuff[12];
	  txBuff[0] = address_roboclaw;
 8002a5a:	7afb      	ldrb	r3, [r7, #11]
 8002a5c:	763b      	strb	r3, [r7, #24]
	  txBuff[1] = (uint8_t)37;
 8002a5e:	2325      	movs	r3, #37	; 0x25
 8002a60:	767b      	strb	r3, [r7, #25]
	  txBuff[2] = SpeedM1>>24;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	161b      	asrs	r3, r3, #24
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	76bb      	strb	r3, [r7, #26]
	  txBuff[3] = SpeedM1>>16;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	141b      	asrs	r3, r3, #16
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	76fb      	strb	r3, [r7, #27]
	  txBuff[4] = SpeedM1>>8;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	121b      	asrs	r3, r3, #8
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	773b      	strb	r3, [r7, #28]
	  txBuff[5] = SpeedM1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	777b      	strb	r3, [r7, #29]

	  txBuff[6] = SpeedM2>>24;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	161b      	asrs	r3, r3, #24
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	77bb      	strb	r3, [r7, #30]
	  txBuff[7] = SpeedM2>>16;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	141b      	asrs	r3, r3, #16
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	77fb      	strb	r3, [r7, #31]
	  txBuff[8] = SpeedM2>>8;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	121b      	asrs	r3, r3, #8
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f887 3020 	strb.w	r3, [r7, #32]
	  txBuff[9] = SpeedM2;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  uint16_t crc_chk = crc16(txBuff, 10);
 8002aa2:	f107 0318 	add.w	r3, r7, #24
 8002aa6:	210a      	movs	r1, #10
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f959 	bl	8002d60 <crc16>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
  	  txBuff[10] = crc_chk >> 8; // high value byte
 8002ab2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  	  txBuff[11] = crc_chk; // low value byte
 8002abe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   	  HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff),200);
 8002ac6:	f107 0118 	add.w	r1, r7, #24
 8002aca:	23c8      	movs	r3, #200	; 0xc8
 8002acc:	220c      	movs	r2, #12
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f004 fd55 	bl	800757e <HAL_UART_Transmit>

   	  uint8_t rxBuff[1];
   	  HAL_UART_Receive(address_huart, rxBuff, 1,200);
 8002ad4:	f107 0114 	add.w	r1, r7, #20
 8002ad8:	23c8      	movs	r3, #200	; 0xc8
 8002ada:	2201      	movs	r2, #1
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f004 fde0 	bl	80076a2 <HAL_UART_Receive>

   	  if(rxBuff[0]==(uint8_t)255){
 8002ae2:	7d3b      	ldrb	r3, [r7, #20]
 8002ae4:	2bff      	cmp	r3, #255	; 0xff
 8002ae6:	d101      	bne.n	8002aec <Drive_M1_M2_With_Signed_Speed+0xa2>
   		  return true;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <Drive_M1_M2_With_Signed_Speed+0xa4>
   	  }
   	  else{
   		  return false;
 8002aec:	2300      	movs	r3, #0
   	  }

}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3728      	adds	r7, #40	; 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <Set_Max_Motor_Current>:

bool Set_Max_Motor_Current(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw, int motor, int32_t max_current_value){
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b08a      	sub	sp, #40	; 0x28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	460b      	mov	r3, r1
 8002b04:	72fb      	strb	r3, [r7, #11]

	  uint8_t cmd_motor;
	  if (motor==1) cmd_motor=133;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d102      	bne.n	8002b12 <Set_Max_Motor_Current+0x1c>
 8002b0c:	2385      	movs	r3, #133	; 0x85
 8002b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if (motor==2) cmd_motor=134;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d102      	bne.n	8002b1e <Set_Max_Motor_Current+0x28>
 8002b18:	2386      	movs	r3, #134	; 0x86
 8002b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  uint8_t txBuff[12];
	  txBuff[0] = address_roboclaw;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	763b      	strb	r3, [r7, #24]
	  txBuff[1] = (uint8_t)cmd_motor;
 8002b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b26:	767b      	strb	r3, [r7, #25]
	  txBuff[2] = max_current_value>>24;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	161b      	asrs	r3, r3, #24
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	76bb      	strb	r3, [r7, #26]
	  txBuff[3] = max_current_value>>16;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	141b      	asrs	r3, r3, #16
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	76fb      	strb	r3, [r7, #27]
	  txBuff[4] = max_current_value>>8;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	121b      	asrs	r3, r3, #8
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	773b      	strb	r3, [r7, #28]
	  txBuff[5] = max_current_value;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	777b      	strb	r3, [r7, #29]

	  txBuff[6] = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	77bb      	strb	r3, [r7, #30]
	  txBuff[7] = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	77fb      	strb	r3, [r7, #31]
	  txBuff[8] = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3020 	strb.w	r3, [r7, #32]
	  txBuff[9] = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  uint16_t crc_chk = crc16(txBuff, 10);
 8002b5a:	f107 0318 	add.w	r3, r7, #24
 8002b5e:	210a      	movs	r1, #10
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f8fd 	bl	8002d60 <crc16>
 8002b66:	4603      	mov	r3, r0
 8002b68:	84bb      	strh	r3, [r7, #36]	; 0x24
  	  txBuff[10] = crc_chk >> 8; // high value byte
 8002b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  	  txBuff[11] = crc_chk; // low value byte
 8002b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   	  HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 10);
 8002b7e:	f107 0118 	add.w	r1, r7, #24
 8002b82:	230a      	movs	r3, #10
 8002b84:	220c      	movs	r2, #12
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f004 fcf9 	bl	800757e <HAL_UART_Transmit>

   	  uint8_t rxBuff=0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	75fb      	strb	r3, [r7, #23]
   	  HAL_UART_Receive(address_huart, &rxBuff, 1,10);
 8002b90:	f107 0117 	add.w	r1, r7, #23
 8002b94:	230a      	movs	r3, #10
 8002b96:	2201      	movs	r2, #1
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f004 fd82 	bl	80076a2 <HAL_UART_Receive>

   	  if(rxBuff==(uint8_t)255){
 8002b9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ba0:	2bff      	cmp	r3, #255	; 0xff
 8002ba2:	d101      	bne.n	8002ba8 <Set_Max_Motor_Current+0xb2>
   		  return true;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <Set_Max_Motor_Current+0xb4>
   	  }
   	  else{
   		  return false;
 8002ba8:	2300      	movs	r3, #0
   	  }

}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <Reset_Encoder_Counters>:
		return false;
	}

}

bool Reset_Encoder_Counters(UART_HandleTypeDef* address_huart,uint8_t address_roboclaw){
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70fb      	strb	r3, [r7, #3]
	  uint8_t txBuff[4];
	  txBuff[0] = address_roboclaw;
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	743b      	strb	r3, [r7, #16]
	  txBuff[1] = (uint8_t)20;
 8002bc2:	2314      	movs	r3, #20
 8002bc4:	747b      	strb	r3, [r7, #17]


	  uint16_t crc_chk = crc16(txBuff, 2);
 8002bc6:	f107 0310 	add.w	r3, r7, #16
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f8c7 	bl	8002d60 <crc16>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	82fb      	strh	r3, [r7, #22]
	  txBuff[2] = crc_chk >> 8; // high value byte
 8002bd6:	8afb      	ldrh	r3, [r7, #22]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	74bb      	strb	r3, [r7, #18]
	  txBuff[3] = crc_chk; // low value byte
 8002be0:	8afb      	ldrh	r3, [r7, #22]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	74fb      	strb	r3, [r7, #19]
 	  HAL_UART_Transmit(address_huart, txBuff, sizeof(txBuff), 10);
 8002be6:	f107 0110 	add.w	r1, r7, #16
 8002bea:	230a      	movs	r3, #10
 8002bec:	2204      	movs	r2, #4
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f004 fcc5 	bl	800757e <HAL_UART_Transmit>

 	  uint8_t rxBuff[1];
 	  HAL_UART_Receive(address_huart, rxBuff, 1,10);
 8002bf4:	f107 010c 	add.w	r1, r7, #12
 8002bf8:	230a      	movs	r3, #10
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f004 fd50 	bl	80076a2 <HAL_UART_Receive>

 	  if(rxBuff[0]==(uint8_t)255){
 8002c02:	7b3b      	ldrb	r3, [r7, #12]
 8002c04:	2bff      	cmp	r3, #255	; 0xff
 8002c06:	d101      	bne.n	8002c0c <Reset_Encoder_Counters+0x5a>
 		  return true;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <Reset_Encoder_Counters+0x5c>
 	  }
 	  else{
 		  return false;
 8002c0c:	2300      	movs	r3, #0
 	  }

}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <roboclaw1_init>:

bool roboclaw1_init(UART_HandleTypeDef* address_huart_roboclaw,uint8_t address_roboclaw){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]
		flag_status_register_rw1[0]=0;
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <roboclaw1_init+0xa0>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
		flag_status_register_rw1[1]=0;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <roboclaw1_init+0xa0>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
		flag_status_register_rw1[2]=0;
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <roboclaw1_init+0xa0>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
		flag_status_register_rw1[3]=0;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <roboclaw1_init+0xa0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
		flag_status_register_rw1[4]=0;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <roboclaw1_init+0xa0>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
		flag_status_register_rw1[5]=0;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <roboclaw1_init+0xa0>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
		flag_status_register_rw1[6]=0;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <roboclaw1_init+0xa0>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]

	  	bool set_1=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,1,3000);
 8002c4e:	78f9      	ldrb	r1, [r7, #3]
 8002c50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002c54:	2201      	movs	r2, #1
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ff4d 	bl	8002af6 <Set_Max_Motor_Current>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73fb      	strb	r3, [r7, #15]
	  	bool set_2=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,2,3000);
 8002c60:	78f9      	ldrb	r1, [r7, #3]
 8002c62:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002c66:	2202      	movs	r2, #2
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff44 	bl	8002af6 <Set_Max_Motor_Current>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	73bb      	strb	r3, [r7, #14]
	  	bool set_3=Drive_M1_M2_With_Signed_Speed(address_huart_roboclaw,(uint8_t)address_roboclaw, 0, 0);
 8002c72:	78f9      	ldrb	r1, [r7, #3]
 8002c74:	2300      	movs	r3, #0
 8002c76:	2200      	movs	r2, #0
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fee6 	bl	8002a4a <Drive_M1_M2_With_Signed_Speed>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	737b      	strb	r3, [r7, #13]
	  	bool set_4=Reset_Encoder_Counters(address_huart_roboclaw,(uint8_t)address_roboclaw);
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff93 	bl	8002bb2 <Reset_Encoder_Counters>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	733b      	strb	r3, [r7, #12]

	  	if((set_1*set_2*set_3*set_4)==true){
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	7bba      	ldrb	r2, [r7, #14]
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	7b7a      	ldrb	r2, [r7, #13]
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	7b3a      	ldrb	r2, [r7, #12]
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <roboclaw1_init+0x94>
	  	   		  return true;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <roboclaw1_init+0x96>
	  	}
	  	else{
	  		return false;
 8002cac:	2300      	movs	r3, #0
	  	}

}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000668 	.word	0x20000668

08002cbc <roboclaw2_init>:
bool roboclaw2_init(UART_HandleTypeDef* address_huart_roboclaw,uint8_t address_roboclaw){
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
		flag_status_register_rw2[0]=0;
 8002cc8:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <roboclaw2_init+0xa0>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
		flag_status_register_rw2[1]=0;
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <roboclaw2_init+0xa0>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
		flag_status_register_rw2[2]=0;
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <roboclaw2_init+0xa0>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
		flag_status_register_rw2[3]=0;
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <roboclaw2_init+0xa0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
		flag_status_register_rw2[4]=0;
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <roboclaw2_init+0xa0>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
		flag_status_register_rw2[5]=0;
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <roboclaw2_init+0xa0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	615a      	str	r2, [r3, #20]
		flag_status_register_rw2[6]=0;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <roboclaw2_init+0xa0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]

	  	bool set_1=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,1,3000);
 8002cf2:	78f9      	ldrb	r1, [r7, #3]
 8002cf4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fefb 	bl	8002af6 <Set_Max_Motor_Current>
 8002d00:	4603      	mov	r3, r0
 8002d02:	73fb      	strb	r3, [r7, #15]
	  	bool set_2=Set_Max_Motor_Current(address_huart_roboclaw,(uint8_t)address_roboclaw,2,3000);
 8002d04:	78f9      	ldrb	r1, [r7, #3]
 8002d06:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fef2 	bl	8002af6 <Set_Max_Motor_Current>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73bb      	strb	r3, [r7, #14]
	  	bool set_3=Drive_M1_M2_With_Signed_Speed(address_huart_roboclaw,(uint8_t)address_roboclaw, 0, 0);
 8002d16:	78f9      	ldrb	r1, [r7, #3]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fe94 	bl	8002a4a <Drive_M1_M2_With_Signed_Speed>
 8002d22:	4603      	mov	r3, r0
 8002d24:	737b      	strb	r3, [r7, #13]
	  	bool set_4=Reset_Encoder_Counters(address_huart_roboclaw,(uint8_t)address_roboclaw);
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ff41 	bl	8002bb2 <Reset_Encoder_Counters>
 8002d30:	4603      	mov	r3, r0
 8002d32:	733b      	strb	r3, [r7, #12]

	  	if((set_1*set_2*set_3*set_4)==true){
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	7bba      	ldrb	r2, [r7, #14]
 8002d38:	fb02 f303 	mul.w	r3, r2, r3
 8002d3c:	7b7a      	ldrb	r2, [r7, #13]
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	7b3a      	ldrb	r2, [r7, #12]
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <roboclaw2_init+0x94>
	  	   		  return true;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <roboclaw2_init+0x96>
	  	}
	  	else{
	  		return false;
 8002d50:	2300      	movs	r3, #0
	  	}

}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000064c 	.word	0x2000064c

08002d60 <crc16>:

uint16_t crc16(unsigned char *packet, int nBytes) {
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint16_t crc=0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	82fb      	strh	r3, [r7, #22]
  for (int byte = 0; byte < nBytes; byte++) {
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	e026      	b.n	8002dc2 <crc16+0x62>
    crc = crc ^ ((unsigned int)packet[byte] << 8);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	4053      	eors	r3, r2
 8002d86:	82fb      	strh	r3, [r7, #22]
    for (unsigned char bit = 0; bit < 8; bit++) {
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e013      	b.n	8002db6 <crc16+0x56>
      if (crc & 0x8000) {
 8002d8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da09      	bge.n	8002daa <crc16+0x4a>
        crc = (crc << 1) ^ 0x1021;
 8002d96:	8afb      	ldrh	r3, [r7, #22]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b21b      	sxth	r3, r3
 8002da6:	82fb      	strh	r3, [r7, #22]
 8002da8:	e002      	b.n	8002db0 <crc16+0x50>
      } else {
        crc = crc << 1;
 8002daa:	8afb      	ldrh	r3, [r7, #22]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	82fb      	strh	r3, [r7, #22]
    for (unsigned char bit = 0; bit < 8; bit++) {
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	3301      	adds	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b07      	cmp	r3, #7
 8002dba:	d9e8      	bls.n	8002d8e <crc16+0x2e>
  for (int byte = 0; byte < nBytes; byte++) {
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	dbd4      	blt.n	8002d74 <crc16+0x14>
      }
    }
  }
  return crc;
 8002dca:	8afb      	ldrh	r3, [r7, #22]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ddc:	b672      	cpsid	i
}
 8002dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <Error_Handler+0x8>
	...

08002de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_MspInit+0x4c>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_MspInit+0x4c>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_MspInit+0x4c>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_MspInit+0x4c>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <HAL_MspInit+0x4c>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_MspInit+0x4c>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <HAL_ADC_MspInit+0x7c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d127      	bne.n	8002ea6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_ADC_MspInit+0x80>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <HAL_ADC_MspInit+0x80>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_ADC_MspInit+0x80>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_ADC_MspInit+0x80>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_ADC_MspInit+0x80>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_ADC_MspInit+0x80>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e8e:	2310      	movs	r3, #16
 8002e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e92:	2303      	movs	r3, #3
 8002e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <HAL_ADC_MspInit+0x84>)
 8002ea2:	f000 ffb7 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40012000 	.word	0x40012000
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020000 	.word	0x40020000

08002ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a19      	ldr	r2, [pc, #100]	; (8002f40 <HAL_I2C_MspInit+0x84>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d12b      	bne.n	8002f36 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_I2C_MspInit+0x88>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_I2C_MspInit+0x88>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	6313      	str	r3, [r2, #48]	; 0x30
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_I2C_MspInit+0x88>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002efa:	23c0      	movs	r3, #192	; 0xc0
 8002efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efe:	2312      	movs	r3, #18
 8002f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f06:	2303      	movs	r3, #3
 8002f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	480c      	ldr	r0, [pc, #48]	; (8002f48 <HAL_I2C_MspInit+0x8c>)
 8002f16:	f000 ff7d 	bl	8003e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_I2C_MspInit+0x88>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <HAL_I2C_MspInit+0x88>)
 8002f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_I2C_MspInit+0x88>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40005400 	.word	0x40005400
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020400 	.word	0x40020400

08002f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d134      	bne.n	8002fd8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_TIM_Base_MspInit+0x94>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <HAL_TIM_Base_MspInit+0x94>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_TIM_Base_MspInit+0x94>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <HAL_TIM_Base_MspInit+0x94>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <HAL_TIM_Base_MspInit+0x94>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_TIM_Base_MspInit+0x94>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <HAL_TIM_Base_MspInit+0x98>)
 8002fc4:	f000 ff26 	bl	8003e14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	201c      	movs	r0, #28
 8002fce:	f000 fe58 	bl	8003c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fd2:	201c      	movs	r0, #28
 8002fd4:	f000 fe71 	bl	8003cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40020400 	.word	0x40020400

08002fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	; 0x38
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a66      	ldr	r2, [pc, #408]	; (80031a0 <HAL_UART_MspInit+0x1b8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d134      	bne.n	8003074 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a64      	ldr	r2, [pc, #400]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b62      	ldr	r3, [pc, #392]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	4b5e      	ldr	r3, [pc, #376]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003042:	230c      	movs	r3, #12
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304e:	2303      	movs	r3, #3
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003052:	2307      	movs	r3, #7
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305a:	4619      	mov	r1, r3
 800305c:	4852      	ldr	r0, [pc, #328]	; (80031a8 <HAL_UART_MspInit+0x1c0>)
 800305e:	f000 fed9 	bl	8003e14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2026      	movs	r0, #38	; 0x26
 8003068:	f000 fe0b 	bl	8003c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800306c:	2026      	movs	r0, #38	; 0x26
 800306e:	f000 fe24 	bl	8003cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003072:	e091      	b.n	8003198 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4c      	ldr	r2, [pc, #304]	; (80031ac <HAL_UART_MspInit+0x1c4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d153      	bne.n	8003126 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a47      	ldr	r2, [pc, #284]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a40      	ldr	r2, [pc, #256]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a39      	ldr	r2, [pc, #228]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030d2:	2320      	movs	r3, #32
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030de:	2303      	movs	r3, #3
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030e2:	2307      	movs	r3, #7
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ea:	4619      	mov	r1, r3
 80030ec:	4830      	ldr	r0, [pc, #192]	; (80031b0 <HAL_UART_MspInit+0x1c8>)
 80030ee:	f000 fe91 	bl	8003e14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f8:	2302      	movs	r3, #2
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003100:	2303      	movs	r3, #3
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003104:	2307      	movs	r3, #7
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310c:	4619      	mov	r1, r3
 800310e:	4829      	ldr	r0, [pc, #164]	; (80031b4 <HAL_UART_MspInit+0x1cc>)
 8003110:	f000 fe80 	bl	8003e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	2027      	movs	r0, #39	; 0x27
 800311a:	f000 fdb2 	bl	8003c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800311e:	2027      	movs	r0, #39	; 0x27
 8003120:	f000 fdcb 	bl	8003cba <HAL_NVIC_EnableIRQ>
}
 8003124:	e038      	b.n	8003198 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_UART_MspInit+0x1d0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d133      	bne.n	8003198 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 800313a:	f043 0320 	orr.w	r3, r3, #32
 800313e:	6453      	str	r3, [r2, #68]	; 0x44
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	6313      	str	r3, [r2, #48]	; 0x30
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_UART_MspInit+0x1bc>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003168:	23c0      	movs	r3, #192	; 0xc0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003178:	2308      	movs	r3, #8
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800317c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003180:	4619      	mov	r1, r3
 8003182:	480b      	ldr	r0, [pc, #44]	; (80031b0 <HAL_UART_MspInit+0x1c8>)
 8003184:	f000 fe46 	bl	8003e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003188:	2200      	movs	r2, #0
 800318a:	2100      	movs	r1, #0
 800318c:	2047      	movs	r0, #71	; 0x47
 800318e:	f000 fd78 	bl	8003c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003192:	2047      	movs	r0, #71	; 0x47
 8003194:	f000 fd91 	bl	8003cba <HAL_NVIC_EnableIRQ>
}
 8003198:	bf00      	nop
 800319a:	3738      	adds	r7, #56	; 0x38
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40004400 	.word	0x40004400
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40011400 	.word	0x40011400

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <NMI_Handler+0x4>

080031c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <HardFault_Handler+0x4>

080031c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031cc:	e7fe      	b.n	80031cc <MemManage_Handler+0x4>

080031ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d2:	e7fe      	b.n	80031d2 <BusFault_Handler+0x4>

080031d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <UsageFault_Handler+0x4>

080031da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <SysTick_Handler+0x38>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <SysTick_Handler+0x38>)
 8003210:	6013      	str	r3, [r2, #0]
	if(indx==sampling_time){
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <SysTick_Handler+0x38>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <SysTick_Handler+0x3c>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	eeb4 7a67 	vcmp.f32	s14, s15
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	d102      	bne.n	8003234 <SysTick_Handler+0x30>

		indx=0;
 800322e:	4b03      	ldr	r3, [pc, #12]	; (800323c <SysTick_Handler+0x38>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003234:	f000 f994 	bl	8003560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200006a4 	.word	0x200006a4
 8003240:	20000008 	.word	0x20000008

08003244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <TIM2_IRQHandler+0x10>)
 800324a:	f003 fd89 	bl	8006d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	200003d8 	.word	0x200003d8

08003258 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <USART2_IRQHandler+0x10>)
 800325e:	f004 faf3 	bl	8007848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000420 	.word	0x20000420

0800326c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <USART3_IRQHandler+0x10>)
 8003272:	f004 fae9 	bl	8007848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000464 	.word	0x20000464

08003280 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003284:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003288:	f000 ff72 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}

08003290 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003294:	4802      	ldr	r0, [pc, #8]	; (80032a0 <OTG_FS_IRQHandler+0x10>)
 8003296:	f001 fa1e 	bl	80046d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20001b90 	.word	0x20001b90

080032a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <USART6_IRQHandler+0x10>)
 80032aa:	f004 facd 	bl	8007848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200004a8 	.word	0x200004a8

080032b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
	return 1;
 80032bc:	2301      	movs	r3, #1
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <_kill>:

int _kill(int pid, int sig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032d2:	f009 fc1f 	bl	800cb14 <__errno>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2216      	movs	r2, #22
 80032da:	601a      	str	r2, [r3, #0]
	return -1;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_exit>:

void _exit (int status)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffe7 	bl	80032c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032fa:	e7fe      	b.n	80032fa <_exit+0x12>

080032fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e00a      	b.n	8003324 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800330e:	f3af 8000 	nop.w
 8003312:	4601      	mov	r1, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	60ba      	str	r2, [r7, #8]
 800331a:	b2ca      	uxtb	r2, r1
 800331c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	dbf0      	blt.n	800330e <_read+0x12>
	}

return len;
 800332c:	687b      	ldr	r3, [r7, #4]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e009      	b.n	800335c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	60ba      	str	r2, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3301      	adds	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	dbf1      	blt.n	8003348 <_write+0x12>
	}
	return len;
 8003364:	687b      	ldr	r3, [r7, #4]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <_close>:

int _close(int file)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
	return -1;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003396:	605a      	str	r2, [r3, #4]
	return 0;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <_isatty>:

int _isatty(int file)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	return 1;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
	return 0;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <_sbrk+0x5c>)
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <_sbrk+0x60>)
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <_sbrk+0x64>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <_sbrk+0x64>)
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <_sbrk+0x68>)
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <_sbrk+0x64>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	429a      	cmp	r2, r3
 8003406:	d207      	bcs.n	8003418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003408:	f009 fb84 	bl	800cb14 <__errno>
 800340c:	4603      	mov	r3, r0
 800340e:	220c      	movs	r2, #12
 8003410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003416:	e009      	b.n	800342c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <_sbrk+0x64>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800341e:	4b07      	ldr	r3, [pc, #28]	; (800343c <_sbrk+0x64>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <_sbrk+0x64>)
 8003428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20020000 	.word	0x20020000
 8003438:	00000400 	.word	0x00000400
 800343c:	200006a8 	.word	0x200006a8
 8003440:	200022d0 	.word	0x200022d0

08003444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <SystemInit+0x20>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <SystemInit+0x20>)
 8003450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800346c:	480d      	ldr	r0, [pc, #52]	; (80034a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800346e:	490e      	ldr	r1, [pc, #56]	; (80034a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003470:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003474:	e002      	b.n	800347c <LoopCopyDataInit>

08003476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347a:	3304      	adds	r3, #4

0800347c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800347c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800347e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003480:	d3f9      	bcc.n	8003476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003482:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003484:	4c0b      	ldr	r4, [pc, #44]	; (80034b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003488:	e001      	b.n	800348e <LoopFillZerobss>

0800348a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800348c:	3204      	adds	r2, #4

0800348e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800348e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003490:	d3fb      	bcc.n	800348a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003492:	f7ff ffd7 	bl	8003444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003496:	f009 fb43 	bl	800cb20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800349a:	f7fd fef7 	bl	800128c <main>
  bx  lr    
 800349e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a8:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 80034ac:	08010d28 	.word	0x08010d28
  ldr r2, =_sbss
 80034b0:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 80034b4:	200022cc 	.word	0x200022cc

080034b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034b8:	e7fe      	b.n	80034b8 <ADC_IRQHandler>
	...

080034bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_Init+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <HAL_Init+0x40>)
 80034c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_Init+0x40>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <HAL_Init+0x40>)
 80034d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_Init+0x40>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a07      	ldr	r2, [pc, #28]	; (80034fc <HAL_Init+0x40>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e4:	2003      	movs	r0, #3
 80034e6:	f000 fbc1 	bl	8003c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f000 f808 	bl	8003500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f0:	f7ff fc78 	bl	8002de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00

08003500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_InitTick+0x54>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_InitTick+0x58>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003516:	fbb3 f3f1 	udiv	r3, r3, r1
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fbd9 	bl	8003cd6 <HAL_SYSTICK_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e00e      	b.n	800354c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b0f      	cmp	r3, #15
 8003532:	d80a      	bhi.n	800354a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003534:	2200      	movs	r2, #0
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800353c:	f000 fba1 	bl	8003c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003540:	4a06      	ldr	r2, [pc, #24]	; (800355c <HAL_InitTick+0x5c>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000028 	.word	0x20000028
 8003558:	20000030 	.word	0x20000030
 800355c:	2000002c 	.word	0x2000002c

08003560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_IncTick+0x20>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_IncTick+0x24>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4413      	add	r3, r2
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_IncTick+0x24>)
 8003572:	6013      	str	r3, [r2, #0]
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000030 	.word	0x20000030
 8003584:	200006ac 	.word	0x200006ac

08003588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return uwTick;
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_GetTick+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	200006ac 	.word	0x200006ac

080035a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff ffee 	bl	8003588 <HAL_GetTick>
 80035ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b8:	d005      	beq.n	80035c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_Delay+0x44>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035c6:	bf00      	nop
 80035c8:	f7ff ffde 	bl	8003588 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d8f7      	bhi.n	80035c8 <HAL_Delay+0x28>
  {
  }
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000030 	.word	0x20000030

080035e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e033      	b.n	8003666 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fc14 	bl	8002e34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800362e:	f023 0302 	bic.w	r3, r3, #2
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f94a 	bl	80038d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
 8003656:	e001      	b.n	800365c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003664:	7bfb      	ldrb	r3, [r7, #15]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1c>
 8003688:	2302      	movs	r3, #2
 800368a:	e113      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x244>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b09      	cmp	r3, #9
 800369a:	d925      	bls.n	80036e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	3b1e      	subs	r3, #30
 80036b2:	2207      	movs	r2, #7
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43da      	mvns	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	400a      	ands	r2, r1
 80036c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68d9      	ldr	r1, [r3, #12]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4403      	add	r3, r0
 80036da:	3b1e      	subs	r3, #30
 80036dc:	409a      	lsls	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e022      	b.n	800372e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6919      	ldr	r1, [r3, #16]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	2207      	movs	r2, #7
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	400a      	ands	r2, r1
 800370a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6919      	ldr	r1, [r3, #16]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	4618      	mov	r0, r3
 800371e:	4603      	mov	r3, r0
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4403      	add	r3, r0
 8003724:	409a      	lsls	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d824      	bhi.n	8003780 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	3b05      	subs	r3, #5
 8003748:	221f      	movs	r2, #31
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	400a      	ands	r2, r1
 8003756:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	4618      	mov	r0, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b05      	subs	r3, #5
 8003772:	fa00 f203 	lsl.w	r2, r0, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	635a      	str	r2, [r3, #52]	; 0x34
 800377e:	e04c      	b.n	800381a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d824      	bhi.n	80037d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	3b23      	subs	r3, #35	; 0x23
 800379a:	221f      	movs	r2, #31
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43da      	mvns	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	400a      	ands	r2, r1
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4618      	mov	r0, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	3b23      	subs	r3, #35	; 0x23
 80037c4:	fa00 f203 	lsl.w	r2, r0, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
 80037d0:	e023      	b.n	800381a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	3b41      	subs	r3, #65	; 0x41
 80037e4:	221f      	movs	r2, #31
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	400a      	ands	r2, r1
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	3b41      	subs	r3, #65	; 0x41
 800380e:	fa00 f203 	lsl.w	r2, r0, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <HAL_ADC_ConfigChannel+0x250>)
 800381c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <HAL_ADC_ConfigChannel+0x254>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10f      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x1d8>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b12      	cmp	r3, #18
 800382e:	d10b      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <HAL_ADC_ConfigChannel+0x254>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d12b      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x23a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <HAL_ADC_ConfigChannel+0x258>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x1f4>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b11      	cmp	r3, #17
 8003862:	d122      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a11      	ldr	r2, [pc, #68]	; (80038c8 <HAL_ADC_ConfigChannel+0x258>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d111      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_ADC_ConfigChannel+0x25c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a11      	ldr	r2, [pc, #68]	; (80038d0 <HAL_ADC_ConfigChannel+0x260>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	0c9a      	lsrs	r2, r3, #18
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800389c:	e002      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f9      	bne.n	800389e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40012300 	.word	0x40012300
 80038c4:	40012000 	.word	0x40012000
 80038c8:	10000012 	.word	0x10000012
 80038cc:	20000028 	.word	0x20000028
 80038d0:	431bde83 	.word	0x431bde83

080038d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <ADC_Init+0x1f0>)
 80038de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	021a      	lsls	r2, r3, #8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800392c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800394e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	4a58      	ldr	r2, [pc, #352]	; (8003ac8 <ADC_Init+0x1f4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d022      	beq.n	80039b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800397a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800399c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6899      	ldr	r1, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	e00f      	b.n	80039d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0202 	bic.w	r2, r2, #2
 80039e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7e1b      	ldrb	r3, [r3, #24]
 80039ec:	005a      	lsls	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	035a      	lsls	r2, r3, #13
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	e007      	b.n	8003a48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	051a      	lsls	r2, r3, #20
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a8a:	025a      	lsls	r2, r3, #9
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6899      	ldr	r1, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	029a      	lsls	r2, r3, #10
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40012300 	.word	0x40012300
 8003ac8:	0f000001 	.word	0x0f000001

08003acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	60d3      	str	r3, [r2, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <__NVIC_GetPriorityGrouping+0x18>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	f003 0307 	and.w	r3, r3, #7
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	db0b      	blt.n	8003b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	f003 021f 	and.w	r2, r3, #31
 8003b48:	4907      	ldr	r1, [pc, #28]	; (8003b68 <__NVIC_EnableIRQ+0x38>)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2001      	movs	r0, #1
 8003b52:	fa00 f202 	lsl.w	r2, r0, r2
 8003b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000e100 	.word	0xe000e100

08003b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	db0a      	blt.n	8003b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	490c      	ldr	r1, [pc, #48]	; (8003bb8 <__NVIC_SetPriority+0x4c>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	0112      	lsls	r2, r2, #4
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b94:	e00a      	b.n	8003bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4908      	ldr	r1, [pc, #32]	; (8003bbc <__NVIC_SetPriority+0x50>)
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3b04      	subs	r3, #4
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	440b      	add	r3, r1
 8003baa:	761a      	strb	r2, [r3, #24]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000e100 	.word	0xe000e100
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f1c3 0307 	rsb	r3, r3, #7
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	bf28      	it	cs
 8003bde:	2304      	movcs	r3, #4
 8003be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d902      	bls.n	8003bf0 <NVIC_EncodePriority+0x30>
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3b03      	subs	r3, #3
 8003bee:	e000      	b.n	8003bf2 <NVIC_EncodePriority+0x32>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	401a      	ands	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	43d9      	mvns	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c18:	4313      	orrs	r3, r2
         );
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3724      	adds	r7, #36	; 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c38:	d301      	bcc.n	8003c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e00f      	b.n	8003c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <SysTick_Config+0x40>)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c46:	210f      	movs	r1, #15
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c4c:	f7ff ff8e 	bl	8003b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <SysTick_Config+0x40>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c56:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <SysTick_Config+0x40>)
 8003c58:	2207      	movs	r2, #7
 8003c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	e000e010 	.word	0xe000e010

08003c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff ff29 	bl	8003acc <__NVIC_SetPriorityGrouping>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b086      	sub	sp, #24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	4603      	mov	r3, r0
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c94:	f7ff ff3e 	bl	8003b14 <__NVIC_GetPriorityGrouping>
 8003c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f7ff ff8e 	bl	8003bc0 <NVIC_EncodePriority>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff ff5d 	bl	8003b6c <__NVIC_SetPriority>
}
 8003cb2:	bf00      	nop
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff31 	bl	8003b30 <__NVIC_EnableIRQ>
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff ffa2 	bl	8003c28 <SysTick_Config>
 8003ce4:	4603      	mov	r3, r0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cfc:	f7ff fc44 	bl	8003588 <HAL_GetTick>
 8003d00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d008      	beq.n	8003d20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2280      	movs	r2, #128	; 0x80
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e052      	b.n	8003dc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0216 	bic.w	r2, r2, #22
 8003d2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <HAL_DMA_Abort+0x62>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0208 	bic.w	r2, r2, #8
 8003d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d70:	e013      	b.n	8003d9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d72:	f7ff fc09 	bl	8003588 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d90c      	bls.n	8003d9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e015      	b.n	8003dc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e4      	bne.n	8003d72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	223f      	movs	r2, #63	; 0x3f
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d004      	beq.n	8003dec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e00c      	b.n	8003e06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2205      	movs	r2, #5
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e165      	b.n	80040fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	f040 8154 	bne.w	80040f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d005      	beq.n	8003e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d130      	bne.n	8003ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 0201 	and.w	r2, r3, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d017      	beq.n	8003f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d123      	bne.n	8003f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	69b9      	ldr	r1, [r7, #24]
 8003f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0203 	and.w	r2, r3, #3
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80ae 	beq.w	80040f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	4b5d      	ldr	r3, [pc, #372]	; (8004114 <HAL_GPIO_Init+0x300>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	4a5c      	ldr	r2, [pc, #368]	; (8004114 <HAL_GPIO_Init+0x300>)
 8003fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003faa:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <HAL_GPIO_Init+0x300>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb6:	4a58      	ldr	r2, [pc, #352]	; (8004118 <HAL_GPIO_Init+0x304>)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a4f      	ldr	r2, [pc, #316]	; (800411c <HAL_GPIO_Init+0x308>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d025      	beq.n	800402e <HAL_GPIO_Init+0x21a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <HAL_GPIO_Init+0x30c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01f      	beq.n	800402a <HAL_GPIO_Init+0x216>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4d      	ldr	r2, [pc, #308]	; (8004124 <HAL_GPIO_Init+0x310>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d019      	beq.n	8004026 <HAL_GPIO_Init+0x212>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4c      	ldr	r2, [pc, #304]	; (8004128 <HAL_GPIO_Init+0x314>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_GPIO_Init+0x20e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_GPIO_Init+0x318>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00d      	beq.n	800401e <HAL_GPIO_Init+0x20a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4a      	ldr	r2, [pc, #296]	; (8004130 <HAL_GPIO_Init+0x31c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <HAL_GPIO_Init+0x206>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a49      	ldr	r2, [pc, #292]	; (8004134 <HAL_GPIO_Init+0x320>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_GPIO_Init+0x202>
 8004012:	2306      	movs	r3, #6
 8004014:	e00c      	b.n	8004030 <HAL_GPIO_Init+0x21c>
 8004016:	2307      	movs	r3, #7
 8004018:	e00a      	b.n	8004030 <HAL_GPIO_Init+0x21c>
 800401a:	2305      	movs	r3, #5
 800401c:	e008      	b.n	8004030 <HAL_GPIO_Init+0x21c>
 800401e:	2304      	movs	r3, #4
 8004020:	e006      	b.n	8004030 <HAL_GPIO_Init+0x21c>
 8004022:	2303      	movs	r3, #3
 8004024:	e004      	b.n	8004030 <HAL_GPIO_Init+0x21c>
 8004026:	2302      	movs	r3, #2
 8004028:	e002      	b.n	8004030 <HAL_GPIO_Init+0x21c>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_GPIO_Init+0x21c>
 800402e:	2300      	movs	r3, #0
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	f002 0203 	and.w	r2, r2, #3
 8004036:	0092      	lsls	r2, r2, #2
 8004038:	4093      	lsls	r3, r2
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004040:	4935      	ldr	r1, [pc, #212]	; (8004118 <HAL_GPIO_Init+0x304>)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	3302      	adds	r3, #2
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800404e:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_GPIO_Init+0x324>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004072:	4a31      	ldr	r2, [pc, #196]	; (8004138 <HAL_GPIO_Init+0x324>)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004078:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <HAL_GPIO_Init+0x324>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800409c:	4a26      	ldr	r2, [pc, #152]	; (8004138 <HAL_GPIO_Init+0x324>)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040a2:	4b25      	ldr	r3, [pc, #148]	; (8004138 <HAL_GPIO_Init+0x324>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040c6:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <HAL_GPIO_Init+0x324>)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <HAL_GPIO_Init+0x324>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f0:	4a11      	ldr	r2, [pc, #68]	; (8004138 <HAL_GPIO_Init+0x324>)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3301      	adds	r3, #1
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b0f      	cmp	r3, #15
 8004100:	f67f ae96 	bls.w	8003e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800
 8004118:	40013800 	.word	0x40013800
 800411c:	40020000 	.word	0x40020000
 8004120:	40020400 	.word	0x40020400
 8004124:	40020800 	.word	0x40020800
 8004128:	40020c00 	.word	0x40020c00
 800412c:	40021000 	.word	0x40021000
 8004130:	40021400 	.word	0x40021400
 8004134:	40021800 	.word	0x40021800
 8004138:	40013c00 	.word	0x40013c00

0800413c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800414c:	787b      	ldrb	r3, [r7, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004158:	e003      	b.n	8004162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	041a      	lsls	r2, r3, #16
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	619a      	str	r2, [r3, #24]
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800417a:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004186:	4a05      	ldr	r2, [pc, #20]	; (800419c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd f86c 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40013c00 	.word	0x40013c00

080041a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e12b      	b.n	800440a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fe78 	bl	8002ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	; 0x24
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004204:	f001 fccc 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8004208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4a81      	ldr	r2, [pc, #516]	; (8004414 <HAL_I2C_Init+0x274>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d807      	bhi.n	8004224 <HAL_I2C_Init+0x84>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a80      	ldr	r2, [pc, #512]	; (8004418 <HAL_I2C_Init+0x278>)
 8004218:	4293      	cmp	r3, r2
 800421a:	bf94      	ite	ls
 800421c:	2301      	movls	r3, #1
 800421e:	2300      	movhi	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e006      	b.n	8004232 <HAL_I2C_Init+0x92>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a7d      	ldr	r2, [pc, #500]	; (800441c <HAL_I2C_Init+0x27c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	bf94      	ite	ls
 800422c:	2301      	movls	r3, #1
 800422e:	2300      	movhi	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0e7      	b.n	800440a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a78      	ldr	r2, [pc, #480]	; (8004420 <HAL_I2C_Init+0x280>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	0c9b      	lsrs	r3, r3, #18
 8004244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_I2C_Init+0x274>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d802      	bhi.n	8004274 <HAL_I2C_Init+0xd4>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	3301      	adds	r3, #1
 8004272:	e009      	b.n	8004288 <HAL_I2C_Init+0xe8>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	4a69      	ldr	r2, [pc, #420]	; (8004424 <HAL_I2C_Init+0x284>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	3301      	adds	r3, #1
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	430b      	orrs	r3, r1
 800428e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800429a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	495c      	ldr	r1, [pc, #368]	; (8004414 <HAL_I2C_Init+0x274>)
 80042a4:	428b      	cmp	r3, r1
 80042a6:	d819      	bhi.n	80042dc <HAL_I2C_Init+0x13c>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	1e59      	subs	r1, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b6:	1c59      	adds	r1, r3, #1
 80042b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042bc:	400b      	ands	r3, r1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_I2C_Init+0x138>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1e59      	subs	r1, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80042d0:	3301      	adds	r3, #1
 80042d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d6:	e051      	b.n	800437c <HAL_I2C_Init+0x1dc>
 80042d8:	2304      	movs	r3, #4
 80042da:	e04f      	b.n	800437c <HAL_I2C_Init+0x1dc>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d111      	bne.n	8004308 <HAL_I2C_Init+0x168>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e58      	subs	r0, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	440b      	add	r3, r1
 80042f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e012      	b.n	800432e <HAL_I2C_Init+0x18e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1e58      	subs	r0, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	0099      	lsls	r1, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	fbb0 f3f3 	udiv	r3, r0, r3
 800431e:	3301      	adds	r3, #1
 8004320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Init+0x196>
 8004332:	2301      	movs	r3, #1
 8004334:	e022      	b.n	800437c <HAL_I2C_Init+0x1dc>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10e      	bne.n	800435c <HAL_I2C_Init+0x1bc>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1e58      	subs	r0, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	440b      	add	r3, r1
 800434c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004350:	3301      	adds	r3, #1
 8004352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435a:	e00f      	b.n	800437c <HAL_I2C_Init+0x1dc>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e58      	subs	r0, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	0099      	lsls	r1, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004372:	3301      	adds	r3, #1
 8004374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	6809      	ldr	r1, [r1, #0]
 8004380:	4313      	orrs	r3, r2
 8004382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6911      	ldr	r1, [r2, #16]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68d2      	ldr	r2, [r2, #12]
 80043b6:	4311      	orrs	r1, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	430b      	orrs	r3, r1
 80043be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	000186a0 	.word	0x000186a0
 8004418:	001e847f 	.word	0x001e847f
 800441c:	003d08ff 	.word	0x003d08ff
 8004420:	431bde83 	.word	0x431bde83
 8004424:	10624dd3 	.word	0x10624dd3

08004428 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442a:	b08f      	sub	sp, #60	; 0x3c
 800442c:	af0a      	add	r7, sp, #40	; 0x28
 800442e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e116      	b.n	8004668 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f007 ffd7 	bl	800c408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f004 fa62 	bl	8008942 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	687e      	ldr	r6, [r7, #4]
 8004486:	466d      	mov	r5, sp
 8004488:	f106 0410 	add.w	r4, r6, #16
 800448c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800448e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004498:	e885 0003 	stmia.w	r5, {r0, r1}
 800449c:	1d33      	adds	r3, r6, #4
 800449e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a0:	6838      	ldr	r0, [r7, #0]
 80044a2:	f004 f939 	bl	8008718 <USB_CoreInit>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0d7      	b.n	8004668 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 fa50 	bl	8008964 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	e04a      	b.n	8004560 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044ca:	7bfa      	ldrb	r2, [r7, #15]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	333d      	adds	r3, #61	; 0x3d
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	333c      	adds	r3, #60	; 0x3c
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044f2:	7bfa      	ldrb	r2, [r7, #15]
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	b298      	uxth	r0, r3
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3344      	adds	r3, #68	; 0x44
 8004506:	4602      	mov	r2, r0
 8004508:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800450a:	7bfa      	ldrb	r2, [r7, #15]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	3340      	adds	r3, #64	; 0x40
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800451e:	7bfa      	ldrb	r2, [r7, #15]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	3348      	adds	r3, #72	; 0x48
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004532:	7bfa      	ldrb	r2, [r7, #15]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334c      	adds	r3, #76	; 0x4c
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004546:	7bfa      	ldrb	r2, [r7, #15]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3354      	adds	r3, #84	; 0x54
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	3301      	adds	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d3af      	bcc.n	80044ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
 800456e:	e044      	b.n	80045fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004570:	7bfa      	ldrb	r2, [r7, #15]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004586:	7bfa      	ldrb	r2, [r7, #15]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045b2:	7bfa      	ldrb	r2, [r7, #15]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045de:	7bfa      	ldrb	r2, [r7, #15]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	3301      	adds	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d3b5      	bcc.n	8004570 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	687e      	ldr	r6, [r7, #4]
 800460c:	466d      	mov	r5, sp
 800460e:	f106 0410 	add.w	r4, r6, #16
 8004612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800461e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004622:	1d33      	adds	r3, r6, #4
 8004624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004626:	6838      	ldr	r0, [r7, #0]
 8004628:	f004 f9e8 	bl	80089fc <USB_DevInit>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e014      	b.n	8004668 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b01      	cmp	r3, #1
 8004654:	d102      	bne.n	800465c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f001 f98c 	bl	8005974 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f005 fb2a 	bl	8009cba <USB_DevDisconnect>

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004670 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_PCD_Start+0x1c>
 8004688:	2302      	movs	r3, #2
 800468a:	e020      	b.n	80046ce <HAL_PCD_Start+0x5e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	2b01      	cmp	r3, #1
 800469a:	d109      	bne.n	80046b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d005      	beq.n	80046b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f004 f933 	bl	8008920 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f005 fada 	bl	8009c78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046d6:	b590      	push	{r4, r7, lr}
 80046d8:	b08d      	sub	sp, #52	; 0x34
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f005 fb98 	bl	8009e22 <USB_GetMode>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 84b7 	bne.w	8005068 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f005 fafc 	bl	8009cfc <USB_ReadInterrupts>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 84ad 	beq.w	8005066 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f005 fae9 	bl	8009cfc <USB_ReadInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d107      	bne.n	8004744 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f002 0202 	and.w	r2, r2, #2
 8004742:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f005 fad7 	bl	8009cfc <USB_ReadInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b10      	cmp	r3, #16
 8004756:	d161      	bne.n	800481c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0210 	bic.w	r2, r2, #16
 8004766:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	0c5b      	lsrs	r3, r3, #17
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	2b02      	cmp	r3, #2
 8004792:	d124      	bne.n	80047de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d035      	beq.n	800480c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6a38      	ldr	r0, [r7, #32]
 80047b4:	f005 f90e 	bl	80099d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047c4:	441a      	add	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d6:	441a      	add	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
 80047dc:	e016      	b.n	800480c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	0c5b      	lsrs	r3, r3, #17
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d110      	bne.n	800480c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047f0:	2208      	movs	r2, #8
 80047f2:	4619      	mov	r1, r3
 80047f4:	6a38      	ldr	r0, [r7, #32]
 80047f6:	f005 f8ed 	bl	80099d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004806:	441a      	add	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0210 	orr.w	r2, r2, #16
 800481a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f005 fa6b 	bl	8009cfc <USB_ReadInterrupts>
 8004826:	4603      	mov	r3, r0
 8004828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004830:	f040 80a7 	bne.w	8004982 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f005 fa70 	bl	8009d22 <USB_ReadDevAllOutEpInterrupt>
 8004842:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004844:	e099      	b.n	800497a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 808e 	beq.w	800496e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f005 fa94 	bl	8009d8a <USB_ReadDevOutEPInterrupt>
 8004862:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	461a      	mov	r2, r3
 800487c:	2301      	movs	r3, #1
 800487e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fef0 	bl	8005668 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	461a      	mov	r2, r3
 80048a0:	2308      	movs	r3, #8
 80048a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 ffc6 	bl	8005838 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	461a      	mov	r2, r3
 80048c4:	2310      	movs	r3, #16
 80048c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d030      	beq.n	8004934 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d109      	bne.n	80048f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	3304      	adds	r3, #4
 8004906:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	78db      	ldrb	r3, [r3, #3]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d108      	bne.n	8004922 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2200      	movs	r2, #0
 8004914:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	b2db      	uxtb	r3, r3
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f007 fe9d 	bl	800c65c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	2302      	movs	r3, #2
 8004932:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	461a      	mov	r2, r3
 800494c:	2320      	movs	r3, #32
 800494e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	461a      	mov	r2, r3
 8004968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800496c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	3301      	adds	r3, #1
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f af62 	bne.w	8004846 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f005 f9b8 	bl	8009cfc <USB_ReadInterrupts>
 800498c:	4603      	mov	r3, r0
 800498e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004996:	f040 80db 	bne.w	8004b50 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f005 f9d9 	bl	8009d56 <USB_ReadDevAllInEpInterrupt>
 80049a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80049aa:	e0cd      	b.n	8004b48 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80c2 	beq.w	8004b3c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f005 f9ff 	bl	8009dc6 <USB_ReadDevInEPInterrupt>
 80049c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d057      	beq.n	8004a84 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	2201      	movs	r2, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69f9      	ldr	r1, [r7, #28]
 80049f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f4:	4013      	ands	r3, r2
 80049f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	461a      	mov	r2, r3
 8004a06:	2301      	movs	r3, #1
 8004a08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d132      	bne.n	8004a78 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	334c      	adds	r3, #76	; 0x4c
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4403      	add	r3, r0
 8004a32:	3348      	adds	r3, #72	; 0x48
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4419      	add	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4403      	add	r3, r0
 8004a46:	334c      	adds	r3, #76	; 0x4c
 8004a48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d113      	bne.n	8004a78 <HAL_PCD_IRQHandler+0x3a2>
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a54:	4613      	mov	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	3354      	adds	r3, #84	; 0x54
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a70:	461a      	mov	r2, r3
 8004a72:	2101      	movs	r1, #1
 8004a74:	f005 fa06 	bl	8009e84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f007 fd67 	bl	800c552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2310      	movs	r3, #16
 8004aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2340      	movs	r3, #64	; 0x40
 8004ad6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d023      	beq.n	8004b2a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ae4:	6a38      	ldr	r0, [r7, #32]
 8004ae6:	f004 f8e7 	bl	8008cb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	3338      	adds	r3, #56	; 0x38
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	3304      	adds	r3, #4
 8004afc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	78db      	ldrb	r3, [r3, #3]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d108      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f007 fdb4 	bl	800c680 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	461a      	mov	r2, r3
 8004b26:	2302      	movs	r3, #2
 8004b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fd08 	bl	800554c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	3301      	adds	r3, #1
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f47f af2e 	bne.w	80049ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f005 f8d1 	bl	8009cfc <USB_ReadInterrupts>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b64:	d122      	bne.n	8004bac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d108      	bne.n	8004b96 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f007 ff2e 	bl	800c9f0 <HAL_PCDEx_LPM_Callback>
 8004b94:	e002      	b.n	8004b9c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f007 fd52 	bl	800c640 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695a      	ldr	r2, [r3, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f005 f8a3 	bl	8009cfc <USB_ReadInterrupts>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc0:	d112      	bne.n	8004be8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d102      	bne.n	8004bd8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f007 fd0e 	bl	800c5f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004be6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f005 f885 	bl	8009cfc <USB_ReadInterrupts>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfc:	d121      	bne.n	8004c42 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004c0c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d111      	bne.n	8004c3c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	f003 020f 	and.w	r2, r3, #15
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c32:	2101      	movs	r1, #1
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f007 fedb 	bl	800c9f0 <HAL_PCDEx_LPM_Callback>
 8004c3a:	e002      	b.n	8004c42 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f007 fcd9 	bl	800c5f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f005 f858 	bl	8009cfc <USB_ReadInterrupts>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	f040 80b7 	bne.w	8004dc8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2110      	movs	r1, #16
 8004c74:	4618      	mov	r0, r3
 8004c76:	f004 f81f 	bl	8008cb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7e:	e046      	b.n	8004d0e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ce6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d3b3      	bcc.n	8004c80 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d26:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d2a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d016      	beq.n	8004d62 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d44:	f043 030b 	orr.w	r3, r3, #11
 8004d48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5a:	f043 030b 	orr.w	r3, r3, #11
 8004d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8004d60:	e015      	b.n	8004d8e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d74:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d78:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d88:	f043 030b 	orr.w	r3, r3, #11
 8004d8c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004da0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004db2:	461a      	mov	r2, r3
 8004db4:	f005 f866 	bl	8009e84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f004 ff95 	bl	8009cfc <USB_ReadInterrupts>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	d124      	bne.n	8004e28 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f005 f82b 	bl	8009e3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f003 ffe0 	bl	8008db2 <USB_GetDevSpeed>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681c      	ldr	r4, [r3, #0]
 8004dfe:	f000 fec3 	bl	8005b88 <HAL_RCC_GetHCLKFreq>
 8004e02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f003 fce5 	bl	80087dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f007 fbc5 	bl	800c5a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f004 ff65 	bl	8009cfc <USB_ReadInterrupts>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d10a      	bne.n	8004e52 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f007 fba2 	bl	800c586 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f002 0208 	and.w	r2, r2, #8
 8004e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f004 ff50 	bl	8009cfc <USB_ReadInterrupts>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d122      	bne.n	8004eac <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e72:	2301      	movs	r3, #1
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
 8004e76:	e014      	b.n	8004ea2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fb27 	bl	80054ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3e5      	bcc.n	8004e78 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f004 ff23 	bl	8009cfc <USB_ReadInterrupts>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec0:	d13b      	bne.n	8004f3a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec6:	e02b      	b.n	8004f20 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3340      	adds	r3, #64	; 0x40
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d115      	bne.n	8004f1a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004eee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da12      	bge.n	8004f1a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	333f      	adds	r3, #63	; 0x3f
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fae8 	bl	80054ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d3ce      	bcc.n	8004ec8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f004 fedc 	bl	8009cfc <USB_ReadInterrupts>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f4e:	d155      	bne.n	8004ffc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f50:	2301      	movs	r3, #1
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
 8004f54:	e045      	b.n	8004fe2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d12e      	bne.n	8004fdc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da2b      	bge.n	8004fdc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004f90:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d121      	bne.n	8004fdc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fd8:	6053      	str	r3, [r2, #4]
            break;
 8004fda:	e007      	b.n	8004fec <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	3301      	adds	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d3b4      	bcc.n	8004f56 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f004 fe7b 	bl	8009cfc <USB_ReadInterrupts>
 8005006:	4603      	mov	r3, r0
 8005008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005010:	d10a      	bne.n	8005028 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f007 fb46 	bl	800c6a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005026:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f004 fe65 	bl	8009cfc <USB_ReadInterrupts>
 8005032:	4603      	mov	r3, r0
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b04      	cmp	r3, #4
 800503a:	d115      	bne.n	8005068 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f007 fb36 	bl	800c6c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	e000      	b.n	8005068 <HAL_PCD_IRQHandler+0x992>
      return;
 8005066:	bf00      	nop
    }
  }
}
 8005068:	3734      	adds	r7, #52	; 0x34
 800506a:	46bd      	mov	sp, r7
 800506c:	bd90      	pop	{r4, r7, pc}

0800506e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_PCD_SetAddress+0x1a>
 8005084:	2302      	movs	r3, #2
 8005086:	e013      	b.n	80050b0 <HAL_PCD_SetAddress+0x42>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f004 fdc3 	bl	8009c2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	70fb      	strb	r3, [r7, #3]
 80050ca:	460b      	mov	r3, r1
 80050cc:	803b      	strh	r3, [r7, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da0f      	bge.n	80050fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	f003 020f 	and.w	r2, r3, #15
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	3338      	adds	r3, #56	; 0x38
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	3304      	adds	r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	705a      	strb	r2, [r3, #1]
 80050fc:	e00f      	b.n	800511e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	f003 020f 	and.w	r2, r3, #15
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	3304      	adds	r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	b2da      	uxtb	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800512a:	883a      	ldrh	r2, [r7, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	78ba      	ldrb	r2, [r7, #2]
 8005134:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005148:	78bb      	ldrb	r3, [r7, #2]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d102      	bne.n	8005154 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_PCD_EP_Open+0xaa>
 800515e:	2302      	movs	r3, #2
 8005160:	e00e      	b.n	8005180 <HAL_PCD_EP_Open+0xc8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	4618      	mov	r0, r3
 8005172:	f003 fe43 	bl	8008dfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800517e:	7afb      	ldrb	r3, [r7, #11]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005198:	2b00      	cmp	r3, #0
 800519a:	da0f      	bge.n	80051bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	4613      	mov	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	3338      	adds	r3, #56	; 0x38
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	3304      	adds	r3, #4
 80051b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	705a      	strb	r2, [r3, #1]
 80051ba:	e00f      	b.n	80051dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_PCD_EP_Close+0x6e>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e00e      	b.n	8005214 <HAL_PCD_EP_Close+0x8c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	4618      	mov	r0, r3
 8005206:	f003 fe81 	bl	8008f0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	460b      	mov	r3, r1
 800522a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800522c:	7afb      	ldrb	r3, [r7, #11]
 800522e:	f003 020f 	and.w	r2, r3, #15
 8005232:	4613      	mov	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	3304      	adds	r3, #4
 8005244:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2200      	movs	r2, #0
 800525c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800525e:	7afb      	ldrb	r3, [r7, #11]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	b2da      	uxtb	r2, r3
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d102      	bne.n	8005278 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005278:	7afb      	ldrb	r3, [r7, #11]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	6979      	ldr	r1, [r7, #20]
 8005290:	f004 f960 	bl	8009554 <USB_EP0StartXfer>
 8005294:	e008      	b.n	80052a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	6979      	ldr	r1, [r7, #20]
 80052a4:	f003 ff0e 	bl	80090c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80052d4:	681b      	ldr	r3, [r3, #0]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	460b      	mov	r3, r1
 80052f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052f2:	7afb      	ldrb	r3, [r7, #11]
 80052f4:	f003 020f 	and.w	r2, r3, #15
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	3338      	adds	r3, #56	; 0x38
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	3304      	adds	r3, #4
 8005308:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2201      	movs	r2, #1
 8005320:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005322:	7afb      	ldrb	r3, [r7, #11]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	b2da      	uxtb	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d102      	bne.n	800533c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800533c:	7afb      	ldrb	r3, [r7, #11]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	6979      	ldr	r1, [r7, #20]
 8005354:	f004 f8fe 	bl	8009554 <USB_EP0StartXfer>
 8005358:	e008      	b.n	800536c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	6979      	ldr	r1, [r7, #20]
 8005368:	f003 feac 	bl	80090c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d901      	bls.n	8005394 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e050      	b.n	8005436 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005398:	2b00      	cmp	r3, #0
 800539a:	da0f      	bge.n	80053bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	f003 020f 	and.w	r2, r3, #15
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	3338      	adds	r3, #56	; 0x38
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	3304      	adds	r3, #4
 80053b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	705a      	strb	r2, [r3, #1]
 80053ba:	e00d      	b.n	80053d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053bc:	78fa      	ldrb	r2, [r7, #3]
 80053be:	4613      	mov	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	3304      	adds	r3, #4
 80053d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_PCD_EP_SetStall+0x82>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e01e      	b.n	8005436 <HAL_PCD_EP_SetStall+0xc0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68f9      	ldr	r1, [r7, #12]
 8005406:	4618      	mov	r0, r3
 8005408:	f004 fb3c 	bl	8009a84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	b2d9      	uxtb	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005426:	461a      	mov	r2, r3
 8005428:	f004 fd2c 	bl	8009e84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d901      	bls.n	800545c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e042      	b.n	80054e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800545c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005460:	2b00      	cmp	r3, #0
 8005462:	da0f      	bge.n	8005484 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	f003 020f 	and.w	r2, r3, #15
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	3338      	adds	r3, #56	; 0x38
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4413      	add	r3, r2
 8005478:	3304      	adds	r3, #4
 800547a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	705a      	strb	r2, [r3, #1]
 8005482:	e00f      	b.n	80054a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	f003 020f 	and.w	r2, r3, #15
 800548a:	4613      	mov	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	3304      	adds	r3, #4
 800549c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_PCD_EP_ClrStall+0x86>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e00e      	b.n	80054e2 <HAL_PCD_EP_ClrStall+0xa4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f004 fb44 	bl	8009b60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	460b      	mov	r3, r1
 80054f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80054f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	da0c      	bge.n	8005518 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	f003 020f 	and.w	r2, r3, #15
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	3338      	adds	r3, #56	; 0x38
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	3304      	adds	r3, #4
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e00c      	b.n	8005532 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	f003 020f 	and.w	r2, r3, #15
 800551e:	4613      	mov	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	3304      	adds	r3, #4
 8005530:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	4618      	mov	r0, r3
 800553a:	f004 f963 	bl	8009804 <USB_EPStopXfer>
 800553e:	4603      	mov	r3, r0
 8005540:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005542:	7afb      	ldrb	r3, [r7, #11]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af02      	add	r7, sp, #8
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	4613      	mov	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	3338      	adds	r3, #56	; 0x38
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	4413      	add	r3, r2
 8005570:	3304      	adds	r3, #4
 8005572:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	429a      	cmp	r2, r3
 800557e:	d901      	bls.n	8005584 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e06c      	b.n	800565e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	699a      	ldr	r2, [r3, #24]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	429a      	cmp	r2, r3
 8005598:	d902      	bls.n	80055a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3303      	adds	r3, #3
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055a8:	e02b      	b.n	8005602 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d902      	bls.n	80055c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3303      	adds	r3, #3
 80055ca:	089b      	lsrs	r3, r3, #2
 80055cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6919      	ldr	r1, [r3, #16]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	4603      	mov	r3, r0
 80055e4:	6978      	ldr	r0, [r7, #20]
 80055e6:	f004 f9b7 	bl	8009958 <USB_WritePacket>

    ep->xfer_buff  += len;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	441a      	add	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	441a      	add	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	b29b      	uxth	r3, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	429a      	cmp	r2, r3
 8005616:	d809      	bhi.n	800562c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005620:	429a      	cmp	r2, r3
 8005622:	d203      	bcs.n	800562c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1be      	bne.n	80055aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	429a      	cmp	r2, r3
 8005636:	d811      	bhi.n	800565c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	2201      	movs	r2, #1
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	43db      	mvns	r3, r3
 8005652:	6939      	ldr	r1, [r7, #16]
 8005654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005658:	4013      	ands	r3, r2
 800565a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	333c      	adds	r3, #60	; 0x3c
 8005680:	3304      	adds	r3, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d17b      	bne.n	8005796 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4a61      	ldr	r2, [pc, #388]	; (8005830 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	f240 80b9 	bls.w	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80b3 	beq.w	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	461a      	mov	r2, r3
 80056cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d0:	6093      	str	r3, [r2, #8]
 80056d2:	e0a7      	b.n	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ea:	461a      	mov	r2, r3
 80056ec:	2320      	movs	r3, #32
 80056ee:	6093      	str	r3, [r2, #8]
 80056f0:	e098      	b.n	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 8093 	bne.w	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4a4b      	ldr	r2, [pc, #300]	; (8005830 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d90f      	bls.n	8005726 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	461a      	mov	r2, r3
 800571e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005722:	6093      	str	r3, [r2, #8]
 8005724:	e07e      	b.n	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	3304      	adds	r3, #4
 800573a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	0159      	lsls	r1, r3, #5
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	440b      	add	r3, r1
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005752:	1ad2      	subs	r2, r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d114      	bne.n	8005788 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005770:	461a      	mov	r2, r3
 8005772:	2101      	movs	r1, #1
 8005774:	f004 fb86 	bl	8009e84 <USB_EP0_OutStart>
 8005778:	e006      	b.n	8005788 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	441a      	add	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f006 fec4 	bl	800c51c <HAL_PCD_DataOutStageCallback>
 8005794:	e046      	b.n	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4a26      	ldr	r2, [pc, #152]	; (8005834 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d124      	bne.n	80057e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	6093      	str	r3, [r2, #8]
 80057bc:	e032      	b.n	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	461a      	mov	r2, r3
 80057d6:	2320      	movs	r3, #32
 80057d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f006 fe9b 	bl	800c51c <HAL_PCD_DataOutStageCallback>
 80057e6:	e01d      	b.n	8005824 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d114      	bne.n	8005818 <PCD_EP_OutXfrComplete_int+0x1b0>
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005810:	461a      	mov	r2, r3
 8005812:	2100      	movs	r1, #0
 8005814:	f004 fb36 	bl	8009e84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f006 fe7c 	bl	800c51c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	4f54300a 	.word	0x4f54300a
 8005834:	4f54310a 	.word	0x4f54310a

08005838 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	333c      	adds	r3, #60	; 0x3c
 8005850:	3304      	adds	r3, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d90e      	bls.n	800588c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f006 fe33 	bl	800c4f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a0a      	ldr	r2, [pc, #40]	; (80058c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d90c      	bls.n	80058b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d108      	bne.n	80058b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058ac:	461a      	mov	r2, r3
 80058ae:	2101      	movs	r1, #1
 80058b0:	f004 fae8 	bl	8009e84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	4f54300a 	.word	0x4f54300a

080058c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
 80058d0:	4613      	mov	r3, r2
 80058d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d107      	bne.n	80058f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058e2:	883b      	ldrh	r3, [r7, #0]
 80058e4:	0419      	lsls	r1, r3, #16
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
 80058f0:	e028      	b.n	8005944 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4413      	add	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	e00d      	b.n	8005922 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	3340      	adds	r3, #64	; 0x40
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4413      	add	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	3301      	adds	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
 8005922:	7bfa      	ldrb	r2, [r7, #15]
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	3b01      	subs	r3, #1
 8005928:	429a      	cmp	r2, r3
 800592a:	d3ec      	bcc.n	8005906 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800592c:	883b      	ldrh	r3, [r7, #0]
 800592e:	0418      	lsls	r0, r3, #16
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	3b01      	subs	r3, #1
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	4302      	orrs	r2, r0
 800593c:	3340      	adds	r3, #64	; 0x40
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	460b      	mov	r3, r1
 800595c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a6:	f043 0303 	orr.w	r3, r3, #3
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0cc      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d0:	4b68      	ldr	r3, [pc, #416]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d90c      	bls.n	80059f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059de:	4b65      	ldr	r3, [pc, #404]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b63      	ldr	r3, [pc, #396]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0b8      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d020      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a10:	4b59      	ldr	r3, [pc, #356]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4a58      	ldr	r2, [pc, #352]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a28:	4b53      	ldr	r3, [pc, #332]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4a52      	ldr	r2, [pc, #328]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a34:	4b50      	ldr	r3, [pc, #320]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	494d      	ldr	r1, [pc, #308]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d044      	beq.n	8005adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d107      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5a:	4b47      	ldr	r3, [pc, #284]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d119      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e07f      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d003      	beq.n	8005a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d107      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7a:	4b3f      	ldr	r3, [pc, #252]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e06f      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8a:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e067      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a9a:	4b37      	ldr	r3, [pc, #220]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 0203 	bic.w	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4934      	ldr	r1, [pc, #208]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aac:	f7fd fd6c 	bl	8003588 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	e00a      	b.n	8005aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab4:	f7fd fd68 	bl	8003588 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e04f      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 020c 	and.w	r2, r3, #12
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d1eb      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005adc:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d20c      	bcs.n	8005b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aea:	4b22      	ldr	r3, [pc, #136]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af2:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d001      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e032      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b10:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4916      	ldr	r1, [pc, #88]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b2e:	4b12      	ldr	r3, [pc, #72]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	490e      	ldr	r1, [pc, #56]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b42:	f000 fb7f 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 8005b46:	4602      	mov	r2, r0
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	490a      	ldr	r1, [pc, #40]	; (8005b7c <HAL_RCC_ClockConfig+0x1c0>)
 8005b54:	5ccb      	ldrb	r3, [r1, r3]
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <HAL_RCC_ClockConfig+0x1c8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd fccc 	bl	8003500 <HAL_InitTick>

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40023c00 	.word	0x40023c00
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	08010748 	.word	0x08010748
 8005b80:	20000028 	.word	0x20000028
 8005b84:	2000002c 	.word	0x2000002c

08005b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000028 	.word	0x20000028

08005ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ba4:	f7ff fff0 	bl	8005b88 <HAL_RCC_GetHCLKFreq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0a9b      	lsrs	r3, r3, #10
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	4903      	ldr	r1, [pc, #12]	; (8005bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb6:	5ccb      	ldrb	r3, [r1, r3]
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	08010758 	.word	0x08010758

08005bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bcc:	f7ff ffdc 	bl	8005b88 <HAL_RCC_GetHCLKFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	0b5b      	lsrs	r3, r3, #13
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	4903      	ldr	r1, [pc, #12]	; (8005bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40023800 	.word	0x40023800
 8005bec:	08010758 	.word	0x08010758

08005bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08c      	sub	sp, #48	; 0x30
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005c28:	4b6f      	ldr	r3, [pc, #444]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	496c      	ldr	r1, [pc, #432]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005c46:	2301      	movs	r3, #1
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d010      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005c56:	4b64      	ldr	r3, [pc, #400]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c5c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c64:	4960      	ldr	r1, [pc, #384]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005c74:	2301      	movs	r3, #1
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d017      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c84:	4b58      	ldr	r3, [pc, #352]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	4955      	ldr	r1, [pc, #340]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d017      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005cc0:	4b49      	ldr	r3, [pc, #292]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	4946      	ldr	r1, [pc, #280]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005cec:	2301      	movs	r3, #1
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 808a 	beq.w	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]
 8005d02:	4b39      	ldr	r3, [pc, #228]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	4a38      	ldr	r2, [pc, #224]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0e:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	60bb      	str	r3, [r7, #8]
 8005d18:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d1a:	4b34      	ldr	r3, [pc, #208]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a33      	ldr	r2, [pc, #204]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d26:	f7fd fc2f 	bl	8003588 <HAL_GetTick>
 8005d2a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d2e:	f7fd fc2b 	bl	8003588 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e278      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d40:	4b2a      	ldr	r3, [pc, #168]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d4c:	4b26      	ldr	r3, [pc, #152]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d54:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02f      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d028      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d6a:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d72:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d80:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d86:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d114      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d92:	f7fd fbf9 	bl	8003588 <HAL_GetTick>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fd fbf5 	bl	8003588 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e240      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ee      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc8:	d114      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dde:	4902      	ldr	r1, [pc, #8]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	608b      	str	r3, [r1, #8]
 8005de4:	e00c      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005de6:	bf00      	nop
 8005de8:	40023800 	.word	0x40023800
 8005dec:	40007000 	.word	0x40007000
 8005df0:	42470e40 	.word	0x42470e40
 8005df4:	4b4a      	ldr	r3, [pc, #296]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	4a49      	ldr	r2, [pc, #292]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005dfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dfe:	6093      	str	r3, [r2, #8]
 8005e00:	4b47      	ldr	r3, [pc, #284]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0c:	4944      	ldr	r1, [pc, #272]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d004      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005e24:	4b3f      	ldr	r3, [pc, #252]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005e26:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005e34:	4b3a      	ldr	r3, [pc, #232]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e42:	4937      	ldr	r1, [pc, #220]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e56:	4b32      	ldr	r3, [pc, #200]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e5c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e64:	492e      	ldr	r1, [pc, #184]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d011      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e78:	4b29      	ldr	r3, [pc, #164]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e7e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	4926      	ldr	r1, [pc, #152]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e96:	d101      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	491a      	ldr	r1, [pc, #104]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d011      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	4911      	ldr	r1, [pc, #68]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee8:	d101      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005eea:	2301      	movs	r3, #1
 8005eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efc:	f040 80ff 	bne.w	80060fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f06:	f7fd fb3f 	bl	8003588 <HAL_GetTick>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f0c:	e00e      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f0e:	f7fd fb3b 	bl	8003588 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d907      	bls.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e188      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005f20:	40023800 	.word	0x40023800
 8005f24:	424711e0 	.word	0x424711e0
 8005f28:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f2c:	4b7e      	ldr	r3, [pc, #504]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1ea      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d009      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d028      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d124      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005f60:	4b71      	ldr	r3, [pc, #452]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f72:	4b6d      	ldr	r3, [pc, #436]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f78:	0e1b      	lsrs	r3, r3, #24
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	019b      	lsls	r3, r3, #6
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	3b01      	subs	r3, #1
 8005f92:	041b      	lsls	r3, r3, #16
 8005f94:	431a      	orrs	r2, r3
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	061b      	lsls	r3, r3, #24
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	071b      	lsls	r3, r3, #28
 8005fa2:	4961      	ldr	r1, [pc, #388]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fbe:	d00a      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d035      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fd4:	d130      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005fd6:	4b54      	ldr	r3, [pc, #336]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fdc:	0c1b      	lsrs	r3, r3, #16
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fe8:	4b4f      	ldr	r3, [pc, #316]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fee:	0f1b      	lsrs	r3, r3, #28
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	019b      	lsls	r3, r3, #6
 8006000:	431a      	orrs	r2, r3
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	3b01      	subs	r3, #1
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	431a      	orrs	r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	071b      	lsls	r3, r3, #28
 8006018:	4943      	ldr	r1, [pc, #268]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006020:	4b41      	ldr	r3, [pc, #260]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006026:	f023 021f 	bic.w	r2, r3, #31
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	3b01      	subs	r3, #1
 8006030:	493d      	ldr	r1, [pc, #244]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006040:	2b00      	cmp	r3, #0
 8006042:	d029      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604c:	d124      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800604e:	4b36      	ldr	r3, [pc, #216]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	3301      	adds	r3, #1
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006060:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006066:	0f1b      	lsrs	r3, r3, #28
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	019b      	lsls	r3, r3, #6
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	3b01      	subs	r3, #1
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	431a      	orrs	r2, r3
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	431a      	orrs	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	071b      	lsls	r3, r3, #28
 8006090:	4925      	ldr	r1, [pc, #148]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d016      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	019b      	lsls	r3, r3, #6
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	3b01      	subs	r3, #1
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	061b      	lsls	r3, r3, #24
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	071b      	lsls	r3, r3, #28
 80060ca:	4917      	ldr	r1, [pc, #92]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060d2:	4b16      	ldr	r3, [pc, #88]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060d8:	f7fd fa56 	bl	8003588 <HAL_GetTick>
 80060dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060e0:	f7fd fa52 	bl	8003588 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e09f      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060f2:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f0      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	2b01      	cmp	r3, #1
 8006102:	f040 8095 	bne.w	8006230 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800610c:	f7fd fa3c 	bl	8003588 <HAL_GetTick>
 8006110:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006112:	e00f      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006114:	f7fd fa38 	bl	8003588 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d908      	bls.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e085      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800
 800612c:	42470068 	.word	0x42470068
 8006130:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006134:	4b41      	ldr	r3, [pc, #260]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800613c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006140:	d0e8      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800615e:	2b00      	cmp	r3, #0
 8006160:	d02b      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	2b00      	cmp	r3, #0
 8006168:	d127      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800616a:	4b34      	ldr	r3, [pc, #208]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006170:	0c1b      	lsrs	r3, r3, #16
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	3301      	adds	r3, #1
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	019b      	lsls	r3, r3, #6
 8006186:	431a      	orrs	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	3b01      	subs	r3, #1
 800618e:	041b      	lsls	r3, r3, #16
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	061b      	lsls	r3, r3, #24
 8006198:	4928      	ldr	r1, [pc, #160]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061a0:	4b26      	ldr	r3, [pc, #152]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	3b01      	subs	r3, #1
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	4922      	ldr	r1, [pc, #136]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01d      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ce:	d118      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	0e1b      	lsrs	r3, r3, #24
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	019b      	lsls	r3, r3, #6
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	3b01      	subs	r3, #1
 80061f2:	041b      	lsls	r3, r3, #16
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	061b      	lsls	r3, r3, #24
 80061fa:	4910      	ldr	r1, [pc, #64]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006202:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006204:	2201      	movs	r2, #1
 8006206:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006208:	f7fd f9be 	bl	8003588 <HAL_GetTick>
 800620c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006210:	f7fd f9ba 	bl	8003588 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e007      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006222:	4b06      	ldr	r3, [pc, #24]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800622a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800622e:	d1ef      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3730      	adds	r7, #48	; 0x30
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40023800 	.word	0x40023800
 8006240:	42470070 	.word	0x42470070

08006244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006248:	b0ae      	sub	sp, #184	; 0xb8
 800624a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800626a:	4bcb      	ldr	r3, [pc, #812]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 030c 	and.w	r3, r3, #12
 8006272:	2b0c      	cmp	r3, #12
 8006274:	f200 8206 	bhi.w	8006684 <HAL_RCC_GetSysClockFreq+0x440>
 8006278:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <HAL_RCC_GetSysClockFreq+0x3c>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	080062b5 	.word	0x080062b5
 8006284:	08006685 	.word	0x08006685
 8006288:	08006685 	.word	0x08006685
 800628c:	08006685 	.word	0x08006685
 8006290:	080062bd 	.word	0x080062bd
 8006294:	08006685 	.word	0x08006685
 8006298:	08006685 	.word	0x08006685
 800629c:	08006685 	.word	0x08006685
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	08006685 	.word	0x08006685
 80062a8:	08006685 	.word	0x08006685
 80062ac:	08006685 	.word	0x08006685
 80062b0:	080064b5 	.word	0x080064b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b4:	4bb9      	ldr	r3, [pc, #740]	; (800659c <HAL_RCC_GetSysClockFreq+0x358>)
 80062b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80062ba:	e1e7      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062bc:	4bb8      	ldr	r3, [pc, #736]	; (80065a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80062be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80062c2:	e1e3      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c4:	4bb4      	ldr	r3, [pc, #720]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062d0:	4bb1      	ldr	r3, [pc, #708]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d071      	beq.n	80063c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062dc:	4bae      	ldr	r3, [pc, #696]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	099b      	lsrs	r3, r3, #6
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80062ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062f8:	2300      	movs	r3, #0
 80062fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006302:	4622      	mov	r2, r4
 8006304:	462b      	mov	r3, r5
 8006306:	f04f 0000 	mov.w	r0, #0
 800630a:	f04f 0100 	mov.w	r1, #0
 800630e:	0159      	lsls	r1, r3, #5
 8006310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006314:	0150      	lsls	r0, r2, #5
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4621      	mov	r1, r4
 800631c:	1a51      	subs	r1, r2, r1
 800631e:	6439      	str	r1, [r7, #64]	; 0x40
 8006320:	4629      	mov	r1, r5
 8006322:	eb63 0301 	sbc.w	r3, r3, r1
 8006326:	647b      	str	r3, [r7, #68]	; 0x44
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006334:	4649      	mov	r1, r9
 8006336:	018b      	lsls	r3, r1, #6
 8006338:	4641      	mov	r1, r8
 800633a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800633e:	4641      	mov	r1, r8
 8006340:	018a      	lsls	r2, r1, #6
 8006342:	4641      	mov	r1, r8
 8006344:	1a51      	subs	r1, r2, r1
 8006346:	63b9      	str	r1, [r7, #56]	; 0x38
 8006348:	4649      	mov	r1, r9
 800634a:	eb63 0301 	sbc.w	r3, r3, r1
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800635c:	4649      	mov	r1, r9
 800635e:	00cb      	lsls	r3, r1, #3
 8006360:	4641      	mov	r1, r8
 8006362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006366:	4641      	mov	r1, r8
 8006368:	00ca      	lsls	r2, r1, #3
 800636a:	4610      	mov	r0, r2
 800636c:	4619      	mov	r1, r3
 800636e:	4603      	mov	r3, r0
 8006370:	4622      	mov	r2, r4
 8006372:	189b      	adds	r3, r3, r2
 8006374:	633b      	str	r3, [r7, #48]	; 0x30
 8006376:	462b      	mov	r3, r5
 8006378:	460a      	mov	r2, r1
 800637a:	eb42 0303 	adc.w	r3, r2, r3
 800637e:	637b      	str	r3, [r7, #52]	; 0x34
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800638c:	4629      	mov	r1, r5
 800638e:	024b      	lsls	r3, r1, #9
 8006390:	4621      	mov	r1, r4
 8006392:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006396:	4621      	mov	r1, r4
 8006398:	024a      	lsls	r2, r1, #9
 800639a:	4610      	mov	r0, r2
 800639c:	4619      	mov	r1, r3
 800639e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80063b0:	f7fa fc6a 	bl	8000c88 <__aeabi_uldivmod>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4613      	mov	r3, r2
 80063ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063be:	e067      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c0:	4b75      	ldr	r3, [pc, #468]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	099b      	lsrs	r3, r3, #6
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80063d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80063da:	2300      	movs	r3, #0
 80063dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80063e2:	4622      	mov	r2, r4
 80063e4:	462b      	mov	r3, r5
 80063e6:	f04f 0000 	mov.w	r0, #0
 80063ea:	f04f 0100 	mov.w	r1, #0
 80063ee:	0159      	lsls	r1, r3, #5
 80063f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063f4:	0150      	lsls	r0, r2, #5
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4621      	mov	r1, r4
 80063fc:	1a51      	subs	r1, r2, r1
 80063fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8006400:	4629      	mov	r1, r5
 8006402:	eb63 0301 	sbc.w	r3, r3, r1
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006414:	4649      	mov	r1, r9
 8006416:	018b      	lsls	r3, r1, #6
 8006418:	4641      	mov	r1, r8
 800641a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800641e:	4641      	mov	r1, r8
 8006420:	018a      	lsls	r2, r1, #6
 8006422:	4641      	mov	r1, r8
 8006424:	ebb2 0a01 	subs.w	sl, r2, r1
 8006428:	4649      	mov	r1, r9
 800642a:	eb63 0b01 	sbc.w	fp, r3, r1
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800643a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800643e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006442:	4692      	mov	sl, r2
 8006444:	469b      	mov	fp, r3
 8006446:	4623      	mov	r3, r4
 8006448:	eb1a 0303 	adds.w	r3, sl, r3
 800644c:	623b      	str	r3, [r7, #32]
 800644e:	462b      	mov	r3, r5
 8006450:	eb4b 0303 	adc.w	r3, fp, r3
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006462:	4629      	mov	r1, r5
 8006464:	028b      	lsls	r3, r1, #10
 8006466:	4621      	mov	r1, r4
 8006468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800646c:	4621      	mov	r1, r4
 800646e:	028a      	lsls	r2, r1, #10
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006478:	2200      	movs	r2, #0
 800647a:	673b      	str	r3, [r7, #112]	; 0x70
 800647c:	677a      	str	r2, [r7, #116]	; 0x74
 800647e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006482:	f7fa fc01 	bl	8000c88 <__aeabi_uldivmod>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4613      	mov	r3, r2
 800648c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006490:	4b41      	ldr	r3, [pc, #260]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	0c1b      	lsrs	r3, r3, #16
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	3301      	adds	r3, #1
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80064a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80064b2:	e0eb      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064b4:	4b38      	ldr	r3, [pc, #224]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064c0:	4b35      	ldr	r3, [pc, #212]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d06b      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064cc:	4b32      	ldr	r3, [pc, #200]	; (8006598 <HAL_RCC_GetSysClockFreq+0x354>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	099b      	lsrs	r3, r3, #6
 80064d2:	2200      	movs	r2, #0
 80064d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064de:	663b      	str	r3, [r7, #96]	; 0x60
 80064e0:	2300      	movs	r3, #0
 80064e2:	667b      	str	r3, [r7, #100]	; 0x64
 80064e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80064e8:	4622      	mov	r2, r4
 80064ea:	462b      	mov	r3, r5
 80064ec:	f04f 0000 	mov.w	r0, #0
 80064f0:	f04f 0100 	mov.w	r1, #0
 80064f4:	0159      	lsls	r1, r3, #5
 80064f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064fa:	0150      	lsls	r0, r2, #5
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4621      	mov	r1, r4
 8006502:	1a51      	subs	r1, r2, r1
 8006504:	61b9      	str	r1, [r7, #24]
 8006506:	4629      	mov	r1, r5
 8006508:	eb63 0301 	sbc.w	r3, r3, r1
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800651a:	4659      	mov	r1, fp
 800651c:	018b      	lsls	r3, r1, #6
 800651e:	4651      	mov	r1, sl
 8006520:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006524:	4651      	mov	r1, sl
 8006526:	018a      	lsls	r2, r1, #6
 8006528:	4651      	mov	r1, sl
 800652a:	ebb2 0801 	subs.w	r8, r2, r1
 800652e:	4659      	mov	r1, fp
 8006530:	eb63 0901 	sbc.w	r9, r3, r1
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006540:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006544:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006548:	4690      	mov	r8, r2
 800654a:	4699      	mov	r9, r3
 800654c:	4623      	mov	r3, r4
 800654e:	eb18 0303 	adds.w	r3, r8, r3
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	462b      	mov	r3, r5
 8006556:	eb49 0303 	adc.w	r3, r9, r3
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006568:	4629      	mov	r1, r5
 800656a:	024b      	lsls	r3, r1, #9
 800656c:	4621      	mov	r1, r4
 800656e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006572:	4621      	mov	r1, r4
 8006574:	024a      	lsls	r2, r1, #9
 8006576:	4610      	mov	r0, r2
 8006578:	4619      	mov	r1, r3
 800657a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800657e:	2200      	movs	r2, #0
 8006580:	65bb      	str	r3, [r7, #88]	; 0x58
 8006582:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006584:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006588:	f7fa fb7e 	bl	8000c88 <__aeabi_uldivmod>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4613      	mov	r3, r2
 8006592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006596:	e065      	b.n	8006664 <HAL_RCC_GetSysClockFreq+0x420>
 8006598:	40023800 	.word	0x40023800
 800659c:	00f42400 	.word	0x00f42400
 80065a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a4:	4b3d      	ldr	r3, [pc, #244]	; (800669c <HAL_RCC_GetSysClockFreq+0x458>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	099b      	lsrs	r3, r3, #6
 80065aa:	2200      	movs	r2, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	4611      	mov	r1, r2
 80065b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065b4:	653b      	str	r3, [r7, #80]	; 0x50
 80065b6:	2300      	movs	r3, #0
 80065b8:	657b      	str	r3, [r7, #84]	; 0x54
 80065ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80065be:	4642      	mov	r2, r8
 80065c0:	464b      	mov	r3, r9
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	0159      	lsls	r1, r3, #5
 80065cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065d0:	0150      	lsls	r0, r2, #5
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4641      	mov	r1, r8
 80065d8:	1a51      	subs	r1, r2, r1
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	4649      	mov	r1, r9
 80065de:	eb63 0301 	sbc.w	r3, r3, r1
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80065f0:	4659      	mov	r1, fp
 80065f2:	018b      	lsls	r3, r1, #6
 80065f4:	4651      	mov	r1, sl
 80065f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065fa:	4651      	mov	r1, sl
 80065fc:	018a      	lsls	r2, r1, #6
 80065fe:	4651      	mov	r1, sl
 8006600:	1a54      	subs	r4, r2, r1
 8006602:	4659      	mov	r1, fp
 8006604:	eb63 0501 	sbc.w	r5, r3, r1
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	00eb      	lsls	r3, r5, #3
 8006612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006616:	00e2      	lsls	r2, r4, #3
 8006618:	4614      	mov	r4, r2
 800661a:	461d      	mov	r5, r3
 800661c:	4643      	mov	r3, r8
 800661e:	18e3      	adds	r3, r4, r3
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	464b      	mov	r3, r9
 8006624:	eb45 0303 	adc.w	r3, r5, r3
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006636:	4629      	mov	r1, r5
 8006638:	028b      	lsls	r3, r1, #10
 800663a:	4621      	mov	r1, r4
 800663c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006640:	4621      	mov	r1, r4
 8006642:	028a      	lsls	r2, r1, #10
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800664c:	2200      	movs	r2, #0
 800664e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006650:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006652:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006656:	f7fa fb17 	bl	8000c88 <__aeabi_uldivmod>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4613      	mov	r3, r2
 8006660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <HAL_RCC_GetSysClockFreq+0x458>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	0f1b      	lsrs	r3, r3, #28
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006676:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800667a:	fbb2 f3f3 	udiv	r3, r2, r3
 800667e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006682:	e003      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006684:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800668a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006690:	4618      	mov	r0, r3
 8006692:	37b8      	adds	r7, #184	; 0xb8
 8006694:	46bd      	mov	sp, r7
 8006696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800669a:	bf00      	nop
 800669c:	40023800 	.word	0x40023800
 80066a0:	00f42400 	.word	0x00f42400

080066a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e28d      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8083 	beq.w	80067ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80066c4:	4b94      	ldr	r3, [pc, #592]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 030c 	and.w	r3, r3, #12
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d019      	beq.n	8006704 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80066d0:	4b91      	ldr	r3, [pc, #580]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d106      	bne.n	80066ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80066dc:	4b8e      	ldr	r3, [pc, #568]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e8:	d00c      	beq.n	8006704 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ea:	4b8b      	ldr	r3, [pc, #556]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d112      	bne.n	800671c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f6:	4b88      	ldr	r3, [pc, #544]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006702:	d10b      	bne.n	800671c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	4b84      	ldr	r3, [pc, #528]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d05b      	beq.n	80067c8 <HAL_RCC_OscConfig+0x124>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d157      	bne.n	80067c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e25a      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006724:	d106      	bne.n	8006734 <HAL_RCC_OscConfig+0x90>
 8006726:	4b7c      	ldr	r3, [pc, #496]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a7b      	ldr	r2, [pc, #492]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 800672c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e01d      	b.n	8006770 <HAL_RCC_OscConfig+0xcc>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800673c:	d10c      	bne.n	8006758 <HAL_RCC_OscConfig+0xb4>
 800673e:	4b76      	ldr	r3, [pc, #472]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a75      	ldr	r2, [pc, #468]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4b73      	ldr	r3, [pc, #460]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a72      	ldr	r2, [pc, #456]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e00b      	b.n	8006770 <HAL_RCC_OscConfig+0xcc>
 8006758:	4b6f      	ldr	r3, [pc, #444]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a6e      	ldr	r2, [pc, #440]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 800675e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4b6c      	ldr	r3, [pc, #432]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6b      	ldr	r2, [pc, #428]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 800676a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800676e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d013      	beq.n	80067a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fc ff06 	bl	8003588 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006780:	f7fc ff02 	bl	8003588 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b64      	cmp	r3, #100	; 0x64
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e21f      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006792:	4b61      	ldr	r3, [pc, #388]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <HAL_RCC_OscConfig+0xdc>
 800679e:	e014      	b.n	80067ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fc fef2 	bl	8003588 <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a8:	f7fc feee 	bl	8003588 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	; 0x64
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e20b      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ba:	4b57      	ldr	r3, [pc, #348]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f0      	bne.n	80067a8 <HAL_RCC_OscConfig+0x104>
 80067c6:	e000      	b.n	80067ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d06f      	beq.n	80068b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80067d6:	4b50      	ldr	r3, [pc, #320]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d017      	beq.n	8006812 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80067e2:	4b4d      	ldr	r3, [pc, #308]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d105      	bne.n	80067fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80067ee:	4b4a      	ldr	r3, [pc, #296]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067fa:	4b47      	ldr	r3, [pc, #284]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006802:	2b0c      	cmp	r3, #12
 8006804:	d11c      	bne.n	8006840 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006806:	4b44      	ldr	r3, [pc, #272]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d116      	bne.n	8006840 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006812:	4b41      	ldr	r3, [pc, #260]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_RCC_OscConfig+0x186>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d001      	beq.n	800682a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e1d3      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800682a:	4b3b      	ldr	r3, [pc, #236]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	4937      	ldr	r1, [pc, #220]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 800683a:	4313      	orrs	r3, r2
 800683c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800683e:	e03a      	b.n	80068b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006848:	4b34      	ldr	r3, [pc, #208]	; (800691c <HAL_RCC_OscConfig+0x278>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684e:	f7fc fe9b 	bl	8003588 <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006854:	e008      	b.n	8006868 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006856:	f7fc fe97 	bl	8003588 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e1b4      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006868:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f0      	beq.n	8006856 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006874:	4b28      	ldr	r3, [pc, #160]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4925      	ldr	r1, [pc, #148]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 8006884:	4313      	orrs	r3, r2
 8006886:	600b      	str	r3, [r1, #0]
 8006888:	e015      	b.n	80068b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800688a:	4b24      	ldr	r3, [pc, #144]	; (800691c <HAL_RCC_OscConfig+0x278>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006890:	f7fc fe7a 	bl	8003588 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006898:	f7fc fe76 	bl	8003588 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e193      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068aa:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f0      	bne.n	8006898 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d036      	beq.n	8006930 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d016      	beq.n	80068f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ca:	4b15      	ldr	r3, [pc, #84]	; (8006920 <HAL_RCC_OscConfig+0x27c>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d0:	f7fc fe5a 	bl	8003588 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d8:	f7fc fe56 	bl	8003588 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e173      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80068ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0x234>
 80068f6:	e01b      	b.n	8006930 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_OscConfig+0x27c>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fe:	f7fc fe43 	bl	8003588 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006904:	e00e      	b.n	8006924 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006906:	f7fc fe3f 	bl	8003588 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d907      	bls.n	8006924 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e15c      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
 8006918:	40023800 	.word	0x40023800
 800691c:	42470000 	.word	0x42470000
 8006920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006924:	4b8a      	ldr	r3, [pc, #552]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1ea      	bne.n	8006906 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8097 	beq.w	8006a6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006942:	4b83      	ldr	r3, [pc, #524]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10f      	bne.n	800696e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	4b7f      	ldr	r3, [pc, #508]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	4a7e      	ldr	r2, [pc, #504]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695c:	6413      	str	r3, [r2, #64]	; 0x40
 800695e:	4b7c      	ldr	r3, [pc, #496]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006966:	60bb      	str	r3, [r7, #8]
 8006968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800696a:	2301      	movs	r3, #1
 800696c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696e:	4b79      	ldr	r3, [pc, #484]	; (8006b54 <HAL_RCC_OscConfig+0x4b0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	2b00      	cmp	r3, #0
 8006978:	d118      	bne.n	80069ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800697a:	4b76      	ldr	r3, [pc, #472]	; (8006b54 <HAL_RCC_OscConfig+0x4b0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a75      	ldr	r2, [pc, #468]	; (8006b54 <HAL_RCC_OscConfig+0x4b0>)
 8006980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006986:	f7fc fdff 	bl	8003588 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698e:	f7fc fdfb 	bl	8003588 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e118      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a0:	4b6c      	ldr	r3, [pc, #432]	; (8006b54 <HAL_RCC_OscConfig+0x4b0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d106      	bne.n	80069c2 <HAL_RCC_OscConfig+0x31e>
 80069b4:	4b66      	ldr	r3, [pc, #408]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	4a65      	ldr	r2, [pc, #404]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	6713      	str	r3, [r2, #112]	; 0x70
 80069c0:	e01c      	b.n	80069fc <HAL_RCC_OscConfig+0x358>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCC_OscConfig+0x340>
 80069ca:	4b61      	ldr	r3, [pc, #388]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	4a60      	ldr	r2, [pc, #384]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069d0:	f043 0304 	orr.w	r3, r3, #4
 80069d4:	6713      	str	r3, [r2, #112]	; 0x70
 80069d6:	4b5e      	ldr	r3, [pc, #376]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069da:	4a5d      	ldr	r2, [pc, #372]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069dc:	f043 0301 	orr.w	r3, r3, #1
 80069e0:	6713      	str	r3, [r2, #112]	; 0x70
 80069e2:	e00b      	b.n	80069fc <HAL_RCC_OscConfig+0x358>
 80069e4:	4b5a      	ldr	r3, [pc, #360]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	4a59      	ldr	r2, [pc, #356]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069ea:	f023 0301 	bic.w	r3, r3, #1
 80069ee:	6713      	str	r3, [r2, #112]	; 0x70
 80069f0:	4b57      	ldr	r3, [pc, #348]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f4:	4a56      	ldr	r2, [pc, #344]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 80069f6:	f023 0304 	bic.w	r3, r3, #4
 80069fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d015      	beq.n	8006a30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a04:	f7fc fdc0 	bl	8003588 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0a:	e00a      	b.n	8006a22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a0c:	f7fc fdbc 	bl	8003588 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e0d7      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a22:	4b4b      	ldr	r3, [pc, #300]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0ee      	beq.n	8006a0c <HAL_RCC_OscConfig+0x368>
 8006a2e:	e014      	b.n	8006a5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a30:	f7fc fdaa 	bl	8003588 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a36:	e00a      	b.n	8006a4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a38:	f7fc fda6 	bl	8003588 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e0c1      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a4e:	4b40      	ldr	r3, [pc, #256]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1ee      	bne.n	8006a38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d105      	bne.n	8006a6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a60:	4b3b      	ldr	r3, [pc, #236]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	4a3a      	ldr	r2, [pc, #232]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80ad 	beq.w	8006bd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a76:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d060      	beq.n	8006b44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d145      	bne.n	8006b16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8a:	4b33      	ldr	r3, [pc, #204]	; (8006b58 <HAL_RCC_OscConfig+0x4b4>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a90:	f7fc fd7a 	bl	8003588 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a98:	f7fc fd76 	bl	8003588 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e093      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aaa:	4b29      	ldr	r3, [pc, #164]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69da      	ldr	r2, [r3, #28]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	019b      	lsls	r3, r3, #6
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	061b      	lsls	r3, r3, #24
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	071b      	lsls	r3, r3, #28
 8006ae2:	491b      	ldr	r1, [pc, #108]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <HAL_RCC_OscConfig+0x4b4>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aee:	f7fc fd4b 	bl	8003588 <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006af6:	f7fc fd47 	bl	8003588 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e064      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b08:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f0      	beq.n	8006af6 <HAL_RCC_OscConfig+0x452>
 8006b14:	e05c      	b.n	8006bd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <HAL_RCC_OscConfig+0x4b4>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fc fd34 	bl	8003588 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b24:	f7fc fd30 	bl	8003588 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e04d      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b36:	4b06      	ldr	r3, [pc, #24]	; (8006b50 <HAL_RCC_OscConfig+0x4ac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x480>
 8006b42:	e045      	b.n	8006bd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e040      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
 8006b50:	40023800 	.word	0x40023800
 8006b54:	40007000 	.word	0x40007000
 8006b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b5c:	4b1f      	ldr	r3, [pc, #124]	; (8006bdc <HAL_RCC_OscConfig+0x538>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d030      	beq.n	8006bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d129      	bne.n	8006bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d122      	bne.n	8006bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d119      	bne.n	8006bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d10f      	bne.n	8006bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d107      	bne.n	8006bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d001      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	40023800 	.word	0x40023800

08006be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e041      	b.n	8006c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d106      	bne.n	8006c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fc f9a0 	bl	8002f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f000 fa96 	bl	8007150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d001      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e04e      	b.n	8006d36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a23      	ldr	r2, [pc, #140]	; (8006d44 <HAL_TIM_Base_Start_IT+0xc4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d022      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc2:	d01d      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1f      	ldr	r2, [pc, #124]	; (8006d48 <HAL_TIM_Base_Start_IT+0xc8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <HAL_TIM_Base_Start_IT+0xcc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1c      	ldr	r2, [pc, #112]	; (8006d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a19      	ldr	r2, [pc, #100]	; (8006d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a18      	ldr	r2, [pc, #96]	; (8006d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d111      	bne.n	8006d24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d010      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	e007      	b.n	8006d34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	40010400 	.word	0x40010400
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40001800 	.word	0x40001800

08006d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d122      	bne.n	8006dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d11b      	bne.n	8006dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0202 	mvn.w	r2, #2
 8006d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f9b5 	bl	8007112 <HAL_TIM_IC_CaptureCallback>
 8006da8:	e005      	b.n	8006db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9a7 	bl	80070fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f9b8 	bl	8007126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d122      	bne.n	8006e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d11b      	bne.n	8006e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f06f 0204 	mvn.w	r2, #4
 8006de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f98b 	bl	8007112 <HAL_TIM_IC_CaptureCallback>
 8006dfc:	e005      	b.n	8006e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f97d 	bl	80070fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f98e 	bl	8007126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d122      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d11b      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0208 	mvn.w	r2, #8
 8006e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f961 	bl	8007112 <HAL_TIM_IC_CaptureCallback>
 8006e50:	e005      	b.n	8006e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f953 	bl	80070fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f964 	bl	8007126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0310 	and.w	r3, r3, #16
 8006e6e:	2b10      	cmp	r3, #16
 8006e70:	d122      	bne.n	8006eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d11b      	bne.n	8006eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0210 	mvn.w	r2, #16
 8006e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f937 	bl	8007112 <HAL_TIM_IC_CaptureCallback>
 8006ea4:	e005      	b.n	8006eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f929 	bl	80070fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f93a 	bl	8007126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d10e      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d107      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f06f 0201 	mvn.w	r2, #1
 8006edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fa fd16 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eee:	2b80      	cmp	r3, #128	; 0x80
 8006ef0:	d10e      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efc:	2b80      	cmp	r3, #128	; 0x80
 8006efe:	d107      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fae0 	bl	80074d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1a:	2b40      	cmp	r3, #64	; 0x40
 8006f1c:	d10e      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d107      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8ff 	bl	800713a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d10e      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d107      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0220 	mvn.w	r2, #32
 8006f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 faaa 	bl	80074bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f68:	bf00      	nop
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_TIM_ConfigClockSource+0x1c>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e0b4      	b.n	80070f6 <HAL_TIM_ConfigClockSource+0x186>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc4:	d03e      	beq.n	8007044 <HAL_TIM_ConfigClockSource+0xd4>
 8006fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fca:	f200 8087 	bhi.w	80070dc <HAL_TIM_ConfigClockSource+0x16c>
 8006fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd2:	f000 8086 	beq.w	80070e2 <HAL_TIM_ConfigClockSource+0x172>
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fda:	d87f      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x16c>
 8006fdc:	2b70      	cmp	r3, #112	; 0x70
 8006fde:	d01a      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0xa6>
 8006fe0:	2b70      	cmp	r3, #112	; 0x70
 8006fe2:	d87b      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x16c>
 8006fe4:	2b60      	cmp	r3, #96	; 0x60
 8006fe6:	d050      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x11a>
 8006fe8:	2b60      	cmp	r3, #96	; 0x60
 8006fea:	d877      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x16c>
 8006fec:	2b50      	cmp	r3, #80	; 0x50
 8006fee:	d03c      	beq.n	800706a <HAL_TIM_ConfigClockSource+0xfa>
 8006ff0:	2b50      	cmp	r3, #80	; 0x50
 8006ff2:	d873      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x16c>
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d058      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x13a>
 8006ff8:	2b40      	cmp	r3, #64	; 0x40
 8006ffa:	d86f      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x16c>
 8006ffc:	2b30      	cmp	r3, #48	; 0x30
 8006ffe:	d064      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x15a>
 8007000:	2b30      	cmp	r3, #48	; 0x30
 8007002:	d86b      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x16c>
 8007004:	2b20      	cmp	r3, #32
 8007006:	d060      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x15a>
 8007008:	2b20      	cmp	r3, #32
 800700a:	d867      	bhi.n	80070dc <HAL_TIM_ConfigClockSource+0x16c>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d05c      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x15a>
 8007010:	2b10      	cmp	r3, #16
 8007012:	d05a      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x15a>
 8007014:	e062      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6899      	ldr	r1, [r3, #8]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f000 f9ad 	bl	8007384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	609a      	str	r2, [r3, #8]
      break;
 8007042:	e04f      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6899      	ldr	r1, [r3, #8]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f000 f996 	bl	8007384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007066:	609a      	str	r2, [r3, #8]
      break;
 8007068:	e03c      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6859      	ldr	r1, [r3, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	461a      	mov	r2, r3
 8007078:	f000 f90a 	bl	8007290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2150      	movs	r1, #80	; 0x50
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f963 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 8007088:	e02c      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6859      	ldr	r1, [r3, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	461a      	mov	r2, r3
 8007098:	f000 f929 	bl	80072ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2160      	movs	r1, #96	; 0x60
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f953 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 80070a8:	e01c      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6859      	ldr	r1, [r3, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f000 f8ea 	bl	8007290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2140      	movs	r1, #64	; 0x40
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f943 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 80070c8:	e00c      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4619      	mov	r1, r3
 80070d4:	4610      	mov	r0, r2
 80070d6:	f000 f93a 	bl	800734e <TIM_ITRx_SetConfig>
      break;
 80070da:	e003      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
      break;
 80070e0:	e000      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a40      	ldr	r2, [pc, #256]	; (8007264 <TIM_Base_SetConfig+0x114>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d013      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716e:	d00f      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a3d      	ldr	r2, [pc, #244]	; (8007268 <TIM_Base_SetConfig+0x118>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00b      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a3c      	ldr	r2, [pc, #240]	; (800726c <TIM_Base_SetConfig+0x11c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d007      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a3b      	ldr	r2, [pc, #236]	; (8007270 <TIM_Base_SetConfig+0x120>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a3a      	ldr	r2, [pc, #232]	; (8007274 <TIM_Base_SetConfig+0x124>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d108      	bne.n	80071a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2f      	ldr	r2, [pc, #188]	; (8007264 <TIM_Base_SetConfig+0x114>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d02b      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b0:	d027      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a2c      	ldr	r2, [pc, #176]	; (8007268 <TIM_Base_SetConfig+0x118>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d023      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a2b      	ldr	r2, [pc, #172]	; (800726c <TIM_Base_SetConfig+0x11c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01f      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a2a      	ldr	r2, [pc, #168]	; (8007270 <TIM_Base_SetConfig+0x120>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01b      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a29      	ldr	r2, [pc, #164]	; (8007274 <TIM_Base_SetConfig+0x124>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d017      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a28      	ldr	r2, [pc, #160]	; (8007278 <TIM_Base_SetConfig+0x128>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a27      	ldr	r2, [pc, #156]	; (800727c <TIM_Base_SetConfig+0x12c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00f      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a26      	ldr	r2, [pc, #152]	; (8007280 <TIM_Base_SetConfig+0x130>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00b      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a25      	ldr	r2, [pc, #148]	; (8007284 <TIM_Base_SetConfig+0x134>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d007      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a24      	ldr	r2, [pc, #144]	; (8007288 <TIM_Base_SetConfig+0x138>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a23      	ldr	r2, [pc, #140]	; (800728c <TIM_Base_SetConfig+0x13c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <TIM_Base_SetConfig+0x114>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_Base_SetConfig+0xf8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a0c      	ldr	r2, [pc, #48]	; (8007274 <TIM_Base_SetConfig+0x124>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d103      	bne.n	8007250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	615a      	str	r2, [r3, #20]
}
 8007256:	bf00      	nop
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40010000 	.word	0x40010000
 8007268:	40000400 	.word	0x40000400
 800726c:	40000800 	.word	0x40000800
 8007270:	40000c00 	.word	0x40000c00
 8007274:	40010400 	.word	0x40010400
 8007278:	40014000 	.word	0x40014000
 800727c:	40014400 	.word	0x40014400
 8007280:	40014800 	.word	0x40014800
 8007284:	40001800 	.word	0x40001800
 8007288:	40001c00 	.word	0x40001c00
 800728c:	40002000 	.word	0x40002000

08007290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f023 0201 	bic.w	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f023 030a 	bic.w	r3, r3, #10
 80072cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b087      	sub	sp, #28
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f023 0210 	bic.w	r2, r3, #16
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	031b      	lsls	r3, r3, #12
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800732a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	f043 0307 	orr.w	r3, r3, #7
 8007370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	609a      	str	r2, [r3, #8]
}
 8007378:	bf00      	nop
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800739e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	021a      	lsls	r2, r3, #8
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	431a      	orrs	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	609a      	str	r2, [r3, #8]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073d8:	2302      	movs	r3, #2
 80073da:	e05a      	b.n	8007492 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d022      	beq.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007428:	d01d      	beq.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d018      	beq.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1a      	ldr	r2, [pc, #104]	; (80074ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00e      	beq.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a18      	ldr	r2, [pc, #96]	; (80074b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d009      	beq.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a17      	ldr	r2, [pc, #92]	; (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d004      	beq.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d10c      	bne.n	8007480 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	4313      	orrs	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40000400 	.word	0x40000400
 80074a8:	40000800 	.word	0x40000800
 80074ac:	40000c00 	.word	0x40000c00
 80074b0:	40010400 	.word	0x40010400
 80074b4:	40014000 	.word	0x40014000
 80074b8:	40001800 	.word	0x40001800

080074bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e03f      	b.n	8007576 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fb fd6c 	bl	8002fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2224      	movs	r2, #36	; 0x24
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fe81 	bl	8008230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800753c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695a      	ldr	r2, [r3, #20]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800754c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800755c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b08a      	sub	sp, #40	; 0x28
 8007582:	af02      	add	r7, sp, #8
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	603b      	str	r3, [r7, #0]
 800758a:	4613      	mov	r3, r2
 800758c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b20      	cmp	r3, #32
 800759c:	d17c      	bne.n	8007698 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <HAL_UART_Transmit+0x2c>
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e075      	b.n	800769a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_UART_Transmit+0x3e>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e06e      	b.n	800769a <HAL_UART_Transmit+0x11c>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2221      	movs	r2, #33	; 0x21
 80075ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075d2:	f7fb ffd9 	bl	8003588 <HAL_GetTick>
 80075d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	88fa      	ldrh	r2, [r7, #6]
 80075e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d108      	bne.n	8007600 <HAL_UART_Transmit+0x82>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	e003      	b.n	8007608 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007604:	2300      	movs	r3, #0
 8007606:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007610:	e02a      	b.n	8007668 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	2180      	movs	r1, #128	; 0x80
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fbc1 	bl	8007da4 <UART_WaitOnFlagUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e036      	b.n	800769a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10b      	bne.n	800764a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	3302      	adds	r3, #2
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	e007      	b.n	800765a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	3301      	adds	r3, #1
 8007658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1cf      	bne.n	8007612 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	2140      	movs	r1, #64	; 0x40
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fb91 	bl	8007da4 <UART_WaitOnFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e006      	b.n	800769a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	e000      	b.n	800769a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007698:	2302      	movs	r3, #2
  }
}
 800769a:	4618      	mov	r0, r3
 800769c:	3720      	adds	r7, #32
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b08a      	sub	sp, #40	; 0x28
 80076a6:	af02      	add	r7, sp, #8
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b20      	cmp	r3, #32
 80076c0:	f040 808c 	bne.w	80077dc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <HAL_UART_Receive+0x2e>
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e084      	b.n	80077de <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_UART_Receive+0x40>
 80076de:	2302      	movs	r3, #2
 80076e0:	e07d      	b.n	80077de <HAL_UART_Receive+0x13c>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2222      	movs	r2, #34	; 0x22
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076fe:	f7fb ff43 	bl	8003588 <HAL_GetTick>
 8007702:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	88fa      	ldrh	r2, [r7, #6]
 800770e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d108      	bne.n	800772c <HAL_UART_Receive+0x8a>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	e003      	b.n	8007734 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800773c:	e043      	b.n	80077c6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2200      	movs	r2, #0
 8007746:	2120      	movs	r1, #32
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fb2b 	bl	8007da4 <UART_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e042      	b.n	80077de <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10c      	bne.n	8007778 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	b29a      	uxth	r2, r3
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	3302      	adds	r3, #2
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	e01f      	b.n	80077b8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007780:	d007      	beq.n	8007792 <HAL_UART_Receive+0xf0>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <HAL_UART_Receive+0xfe>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	b2da      	uxtb	r2, r3
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	e008      	b.n	80077b2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	3301      	adds	r3, #1
 80077b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1b6      	bne.n	800773e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80077dc:	2302      	movs	r3, #2
  }
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3720      	adds	r7, #32
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	4613      	mov	r3, r2
 80077f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d11d      	bne.n	800783c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_UART_Receive_IT+0x26>
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e016      	b.n	800783e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_UART_Receive_IT+0x38>
 800781a:	2302      	movs	r3, #2
 800781c:	e00f      	b.n	800783e <HAL_UART_Receive_IT+0x58>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	461a      	mov	r2, r3
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fb24 	bl	8007e80 <UART_Start_Receive_IT>
 8007838:	4603      	mov	r3, r0
 800783a:	e000      	b.n	800783e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800783c:	2302      	movs	r3, #2
  }
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b0ba      	sub	sp, #232	; 0xe8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800786e:	2300      	movs	r3, #0
 8007870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007874:	2300      	movs	r3, #0
 8007876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10f      	bne.n	80078ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <HAL_UART_IRQHandler+0x66>
 800789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc07 	bl	80080ba <UART_Receive_IT>
      return;
 80078ac:	e256      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 80de 	beq.w	8007a74 <HAL_UART_IRQHandler+0x22c>
 80078b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 80d1 	beq.w	8007a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <HAL_UART_IRQHandler+0xae>
 80078de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0201 	orr.w	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <HAL_UART_IRQHandler+0xd2>
 8007902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	f043 0202 	orr.w	r2, r3, #2
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <HAL_UART_IRQHandler+0xf6>
 8007926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	f043 0204 	orr.w	r2, r3, #4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800793e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d011      	beq.n	800796e <HAL_UART_IRQHandler+0x126>
 800794a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d105      	bne.n	8007962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	f043 0208 	orr.w	r2, r3, #8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 81ed 	beq.w	8007d52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <HAL_UART_IRQHandler+0x14e>
 8007984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fb92 	bl	80080ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b40      	cmp	r3, #64	; 0x40
 80079a2:	bf0c      	ite	eq
 80079a4:	2301      	moveq	r3, #1
 80079a6:	2300      	movne	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 0308 	and.w	r3, r3, #8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d103      	bne.n	80079c2 <HAL_UART_IRQHandler+0x17a>
 80079ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d04f      	beq.n	8007a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa9a 	bl	8007efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d141      	bne.n	8007a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3314      	adds	r3, #20
 80079dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3314      	adds	r3, #20
 80079fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1d9      	bne.n	80079d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d013      	beq.n	8007a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	4a7d      	ldr	r2, [pc, #500]	; (8007c24 <HAL_UART_IRQHandler+0x3dc>)
 8007a30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fc f9c9 	bl	8003dce <HAL_DMA_Abort_IT>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d016      	beq.n	8007a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e00e      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f990 	bl	8007d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	e00a      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f98c 	bl	8007d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	e006      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f988 	bl	8007d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a6e:	e170      	b.n	8007d52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a70:	bf00      	nop
    return;
 8007a72:	e16e      	b.n	8007d52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	f040 814a 	bne.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 8143 	beq.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 813c 	beq.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60bb      	str	r3, [r7, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	f040 80b4 	bne.w	8007c28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8140 	beq.w	8007d56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	f080 8139 	bcs.w	8007d56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af6:	f000 8088 	beq.w	8007c0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d9      	bne.n	8007afa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3314      	adds	r3, #20
 8007b4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e1      	bne.n	8007b46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3314      	adds	r3, #20
 8007b88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ba6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ba8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e3      	bne.n	8007b82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bec:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e3      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fc f872 	bl	8003cee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8b6 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c20:	e099      	b.n	8007d56 <HAL_UART_IRQHandler+0x50e>
 8007c22:	bf00      	nop
 8007c24:	08007fc3 	.word	0x08007fc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 808b 	beq.w	8007d5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8086 	beq.w	8007d5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c72:	647a      	str	r2, [r7, #68]	; 0x44
 8007c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e3      	bne.n	8007c4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3314      	adds	r3, #20
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	623b      	str	r3, [r7, #32]
   return(result);
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007caa:	633a      	str	r2, [r7, #48]	; 0x30
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e3      	bne.n	8007c86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	330c      	adds	r3, #12
 8007cec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cf0:	61fa      	str	r2, [r7, #28]
 8007cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	69b9      	ldr	r1, [r7, #24]
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e3      	bne.n	8007ccc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f83e 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d10:	e023      	b.n	8007d5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <HAL_UART_IRQHandler+0x4ea>
 8007d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f95d 	bl	8007fea <UART_Transmit_IT>
    return;
 8007d30:	e014      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <HAL_UART_IRQHandler+0x514>
 8007d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f99d 	bl	800808a <UART_EndTransmit_IT>
    return;
 8007d50:	e004      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
    return;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
      return;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
      return;
 8007d5a:	bf00      	nop
  }
}
 8007d5c:	37e8      	adds	r7, #232	; 0xe8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b090      	sub	sp, #64	; 0x40
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db4:	e050      	b.n	8007e58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dbc:	d04c      	beq.n	8007e58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc4:	f7fb fbe0 	bl	8003588 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d241      	bcs.n	8007e58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	330c      	adds	r3, #12
 8007df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007df4:	637a      	str	r2, [r7, #52]	; 0x34
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e5      	bne.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	613b      	str	r3, [r7, #16]
   return(result);
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f023 0301 	bic.w	r3, r3, #1
 8007e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3314      	adds	r3, #20
 8007e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e28:	623a      	str	r2, [r7, #32]
 8007e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	69f9      	ldr	r1, [r7, #28]
 8007e2e:	6a3a      	ldr	r2, [r7, #32]
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e5      	bne.n	8007e08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e00f      	b.n	8007e78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	4013      	ands	r3, r2
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	bf0c      	ite	eq
 8007e68:	2301      	moveq	r3, #1
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d09f      	beq.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3740      	adds	r7, #64	; 0x40
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	88fa      	ldrh	r2, [r7, #6]
 8007e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2222      	movs	r2, #34	; 0x22
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ecc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	695a      	ldr	r2, [r3, #20]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0201 	orr.w	r2, r2, #1
 8007edc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 0220 	orr.w	r2, r2, #32
 8007eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b095      	sub	sp, #84	; 0x54
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f24:	643a      	str	r2, [r7, #64]	; 0x40
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e5      	bne.n	8007f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f023 0301 	bic.w	r3, r3, #1
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3314      	adds	r3, #20
 8007f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f60:	e841 2300 	strex	r3, r2, [r1]
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e5      	bne.n	8007f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d119      	bne.n	8007fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	330c      	adds	r3, #12
 8007f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f023 0310 	bic.w	r3, r3, #16
 8007f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f94:	61ba      	str	r2, [r7, #24]
 8007f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6979      	ldr	r1, [r7, #20]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e5      	bne.n	8007f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fb6:	bf00      	nop
 8007fb8:	3754      	adds	r7, #84	; 0x54
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff fecb 	bl	8007d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b21      	cmp	r3, #33	; 0x21
 8007ffc:	d13e      	bne.n	800807c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008006:	d114      	bne.n	8008032 <UART_Transmit_IT+0x48>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d110      	bne.n	8008032 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008024:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	1c9a      	adds	r2, r3, #2
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	621a      	str	r2, [r3, #32]
 8008030:	e008      	b.n	8008044 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	1c59      	adds	r1, r3, #1
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6211      	str	r1, [r2, #32]
 800803c:	781a      	ldrb	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29b      	uxth	r3, r3
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4619      	mov	r1, r3
 8008052:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10f      	bne.n	8008078 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008066:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008076:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	e000      	b.n	800807e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800807c:	2302      	movs	r3, #2
  }
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff fe5a 	bl	8007d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b08c      	sub	sp, #48	; 0x30
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b22      	cmp	r3, #34	; 0x22
 80080cc:	f040 80ab 	bne.w	8008226 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d8:	d117      	bne.n	800810a <UART_Receive_IT+0x50>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d113      	bne.n	800810a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	1c9a      	adds	r2, r3, #2
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	629a      	str	r2, [r3, #40]	; 0x28
 8008108:	e026      	b.n	8008158 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811c:	d007      	beq.n	800812e <UART_Receive_IT+0x74>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <UART_Receive_IT+0x82>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	b2da      	uxtb	r2, r3
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	e008      	b.n	800814e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008148:	b2da      	uxtb	r2, r3
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4619      	mov	r1, r3
 8008166:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008168:	2b00      	cmp	r3, #0
 800816a:	d15a      	bne.n	8008222 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0220 	bic.w	r2, r2, #32
 800817a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800818a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d135      	bne.n	8008218 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	330c      	adds	r3, #12
 80081b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	613b      	str	r3, [r7, #16]
   return(result);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f023 0310 	bic.w	r3, r3, #16
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	330c      	adds	r3, #12
 80081d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d2:	623a      	str	r2, [r7, #32]
 80081d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	69f9      	ldr	r1, [r7, #28]
 80081d8:	6a3a      	ldr	r2, [r7, #32]
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e5      	bne.n	80081b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b10      	cmp	r3, #16
 80081f2:	d10a      	bne.n	800820a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fdbb 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
 8008216:	e002      	b.n	800821e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7f9 f81d 	bl	8001258 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	e002      	b.n	8008228 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	e000      	b.n	8008228 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008226:	2302      	movs	r3, #2
  }
}
 8008228:	4618      	mov	r0, r3
 800822a:	3730      	adds	r7, #48	; 0x30
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008234:	b0c0      	sub	sp, #256	; 0x100
 8008236:	af00      	add	r7, sp, #0
 8008238:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	68d9      	ldr	r1, [r3, #12]
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	ea40 0301 	orr.w	r3, r0, r1
 8008258:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	431a      	orrs	r2, r3
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	431a      	orrs	r2, r3
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	4313      	orrs	r3, r2
 8008278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800827c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008288:	f021 010c 	bic.w	r1, r1, #12
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008296:	430b      	orrs	r3, r1
 8008298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800829a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082aa:	6999      	ldr	r1, [r3, #24]
 80082ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	ea40 0301 	orr.w	r3, r0, r1
 80082b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b8f      	ldr	r3, [pc, #572]	; (80084fc <UART_SetConfig+0x2cc>)
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d005      	beq.n	80082d0 <UART_SetConfig+0xa0>
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	4b8d      	ldr	r3, [pc, #564]	; (8008500 <UART_SetConfig+0x2d0>)
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d104      	bne.n	80082da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082d0:	f7fd fc7a 	bl	8005bc8 <HAL_RCC_GetPCLK2Freq>
 80082d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082d8:	e003      	b.n	80082e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082da:	f7fd fc61 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 80082de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ec:	f040 810c 	bne.w	8008508 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008302:	4622      	mov	r2, r4
 8008304:	462b      	mov	r3, r5
 8008306:	1891      	adds	r1, r2, r2
 8008308:	65b9      	str	r1, [r7, #88]	; 0x58
 800830a:	415b      	adcs	r3, r3
 800830c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800830e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008312:	4621      	mov	r1, r4
 8008314:	eb12 0801 	adds.w	r8, r2, r1
 8008318:	4629      	mov	r1, r5
 800831a:	eb43 0901 	adc.w	r9, r3, r1
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800832a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800832e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008332:	4690      	mov	r8, r2
 8008334:	4699      	mov	r9, r3
 8008336:	4623      	mov	r3, r4
 8008338:	eb18 0303 	adds.w	r3, r8, r3
 800833c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008340:	462b      	mov	r3, r5
 8008342:	eb49 0303 	adc.w	r3, r9, r3
 8008346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800834a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008356:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800835a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800835e:	460b      	mov	r3, r1
 8008360:	18db      	adds	r3, r3, r3
 8008362:	653b      	str	r3, [r7, #80]	; 0x50
 8008364:	4613      	mov	r3, r2
 8008366:	eb42 0303 	adc.w	r3, r2, r3
 800836a:	657b      	str	r3, [r7, #84]	; 0x54
 800836c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008370:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008374:	f7f8 fc88 	bl	8000c88 <__aeabi_uldivmod>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4b61      	ldr	r3, [pc, #388]	; (8008504 <UART_SetConfig+0x2d4>)
 800837e:	fba3 2302 	umull	r2, r3, r3, r2
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	011c      	lsls	r4, r3, #4
 8008386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800838a:	2200      	movs	r2, #0
 800838c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008390:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008394:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008398:	4642      	mov	r2, r8
 800839a:	464b      	mov	r3, r9
 800839c:	1891      	adds	r1, r2, r2
 800839e:	64b9      	str	r1, [r7, #72]	; 0x48
 80083a0:	415b      	adcs	r3, r3
 80083a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083a8:	4641      	mov	r1, r8
 80083aa:	eb12 0a01 	adds.w	sl, r2, r1
 80083ae:	4649      	mov	r1, r9
 80083b0:	eb43 0b01 	adc.w	fp, r3, r1
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083c8:	4692      	mov	sl, r2
 80083ca:	469b      	mov	fp, r3
 80083cc:	4643      	mov	r3, r8
 80083ce:	eb1a 0303 	adds.w	r3, sl, r3
 80083d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083d6:	464b      	mov	r3, r9
 80083d8:	eb4b 0303 	adc.w	r3, fp, r3
 80083dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083f4:	460b      	mov	r3, r1
 80083f6:	18db      	adds	r3, r3, r3
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
 80083fa:	4613      	mov	r3, r2
 80083fc:	eb42 0303 	adc.w	r3, r2, r3
 8008400:	647b      	str	r3, [r7, #68]	; 0x44
 8008402:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008406:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800840a:	f7f8 fc3d 	bl	8000c88 <__aeabi_uldivmod>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4611      	mov	r1, r2
 8008414:	4b3b      	ldr	r3, [pc, #236]	; (8008504 <UART_SetConfig+0x2d4>)
 8008416:	fba3 2301 	umull	r2, r3, r3, r1
 800841a:	095b      	lsrs	r3, r3, #5
 800841c:	2264      	movs	r2, #100	; 0x64
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	1acb      	subs	r3, r1, r3
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800842a:	4b36      	ldr	r3, [pc, #216]	; (8008504 <UART_SetConfig+0x2d4>)
 800842c:	fba3 2302 	umull	r2, r3, r3, r2
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008438:	441c      	add	r4, r3
 800843a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800843e:	2200      	movs	r2, #0
 8008440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008444:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008448:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800844c:	4642      	mov	r2, r8
 800844e:	464b      	mov	r3, r9
 8008450:	1891      	adds	r1, r2, r2
 8008452:	63b9      	str	r1, [r7, #56]	; 0x38
 8008454:	415b      	adcs	r3, r3
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800845c:	4641      	mov	r1, r8
 800845e:	1851      	adds	r1, r2, r1
 8008460:	6339      	str	r1, [r7, #48]	; 0x30
 8008462:	4649      	mov	r1, r9
 8008464:	414b      	adcs	r3, r1
 8008466:	637b      	str	r3, [r7, #52]	; 0x34
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008474:	4659      	mov	r1, fp
 8008476:	00cb      	lsls	r3, r1, #3
 8008478:	4651      	mov	r1, sl
 800847a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800847e:	4651      	mov	r1, sl
 8008480:	00ca      	lsls	r2, r1, #3
 8008482:	4610      	mov	r0, r2
 8008484:	4619      	mov	r1, r3
 8008486:	4603      	mov	r3, r0
 8008488:	4642      	mov	r2, r8
 800848a:	189b      	adds	r3, r3, r2
 800848c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008490:	464b      	mov	r3, r9
 8008492:	460a      	mov	r2, r1
 8008494:	eb42 0303 	adc.w	r3, r2, r3
 8008498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084b0:	460b      	mov	r3, r1
 80084b2:	18db      	adds	r3, r3, r3
 80084b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b6:	4613      	mov	r3, r2
 80084b8:	eb42 0303 	adc.w	r3, r2, r3
 80084bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084c6:	f7f8 fbdf 	bl	8000c88 <__aeabi_uldivmod>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <UART_SetConfig+0x2d4>)
 80084d0:	fba3 1302 	umull	r1, r3, r3, r2
 80084d4:	095b      	lsrs	r3, r3, #5
 80084d6:	2164      	movs	r1, #100	; 0x64
 80084d8:	fb01 f303 	mul.w	r3, r1, r3
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	3332      	adds	r3, #50	; 0x32
 80084e2:	4a08      	ldr	r2, [pc, #32]	; (8008504 <UART_SetConfig+0x2d4>)
 80084e4:	fba2 2303 	umull	r2, r3, r2, r3
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	f003 0207 	and.w	r2, r3, #7
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4422      	add	r2, r4
 80084f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084f8:	e105      	b.n	8008706 <UART_SetConfig+0x4d6>
 80084fa:	bf00      	nop
 80084fc:	40011000 	.word	0x40011000
 8008500:	40011400 	.word	0x40011400
 8008504:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800850c:	2200      	movs	r2, #0
 800850e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008512:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008516:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	1891      	adds	r1, r2, r2
 8008520:	6239      	str	r1, [r7, #32]
 8008522:	415b      	adcs	r3, r3
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
 8008526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800852a:	4641      	mov	r1, r8
 800852c:	1854      	adds	r4, r2, r1
 800852e:	4649      	mov	r1, r9
 8008530:	eb43 0501 	adc.w	r5, r3, r1
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	00eb      	lsls	r3, r5, #3
 800853e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008542:	00e2      	lsls	r2, r4, #3
 8008544:	4614      	mov	r4, r2
 8008546:	461d      	mov	r5, r3
 8008548:	4643      	mov	r3, r8
 800854a:	18e3      	adds	r3, r4, r3
 800854c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008550:	464b      	mov	r3, r9
 8008552:	eb45 0303 	adc.w	r3, r5, r3
 8008556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800855a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008566:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008576:	4629      	mov	r1, r5
 8008578:	008b      	lsls	r3, r1, #2
 800857a:	4621      	mov	r1, r4
 800857c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008580:	4621      	mov	r1, r4
 8008582:	008a      	lsls	r2, r1, #2
 8008584:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008588:	f7f8 fb7e 	bl	8000c88 <__aeabi_uldivmod>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4b60      	ldr	r3, [pc, #384]	; (8008714 <UART_SetConfig+0x4e4>)
 8008592:	fba3 2302 	umull	r2, r3, r3, r2
 8008596:	095b      	lsrs	r3, r3, #5
 8008598:	011c      	lsls	r4, r3, #4
 800859a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085ac:	4642      	mov	r2, r8
 80085ae:	464b      	mov	r3, r9
 80085b0:	1891      	adds	r1, r2, r2
 80085b2:	61b9      	str	r1, [r7, #24]
 80085b4:	415b      	adcs	r3, r3
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085bc:	4641      	mov	r1, r8
 80085be:	1851      	adds	r1, r2, r1
 80085c0:	6139      	str	r1, [r7, #16]
 80085c2:	4649      	mov	r1, r9
 80085c4:	414b      	adcs	r3, r1
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085d4:	4659      	mov	r1, fp
 80085d6:	00cb      	lsls	r3, r1, #3
 80085d8:	4651      	mov	r1, sl
 80085da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085de:	4651      	mov	r1, sl
 80085e0:	00ca      	lsls	r2, r1, #3
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	4642      	mov	r2, r8
 80085ea:	189b      	adds	r3, r3, r2
 80085ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085f0:	464b      	mov	r3, r9
 80085f2:	460a      	mov	r2, r1
 80085f4:	eb42 0303 	adc.w	r3, r2, r3
 80085f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	67bb      	str	r3, [r7, #120]	; 0x78
 8008606:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008614:	4649      	mov	r1, r9
 8008616:	008b      	lsls	r3, r1, #2
 8008618:	4641      	mov	r1, r8
 800861a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800861e:	4641      	mov	r1, r8
 8008620:	008a      	lsls	r2, r1, #2
 8008622:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008626:	f7f8 fb2f 	bl	8000c88 <__aeabi_uldivmod>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4b39      	ldr	r3, [pc, #228]	; (8008714 <UART_SetConfig+0x4e4>)
 8008630:	fba3 1302 	umull	r1, r3, r3, r2
 8008634:	095b      	lsrs	r3, r3, #5
 8008636:	2164      	movs	r1, #100	; 0x64
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	3332      	adds	r3, #50	; 0x32
 8008642:	4a34      	ldr	r2, [pc, #208]	; (8008714 <UART_SetConfig+0x4e4>)
 8008644:	fba2 2303 	umull	r2, r3, r2, r3
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800864e:	441c      	add	r4, r3
 8008650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008654:	2200      	movs	r2, #0
 8008656:	673b      	str	r3, [r7, #112]	; 0x70
 8008658:	677a      	str	r2, [r7, #116]	; 0x74
 800865a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800865e:	4642      	mov	r2, r8
 8008660:	464b      	mov	r3, r9
 8008662:	1891      	adds	r1, r2, r2
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	415b      	adcs	r3, r3
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800866e:	4641      	mov	r1, r8
 8008670:	1851      	adds	r1, r2, r1
 8008672:	6039      	str	r1, [r7, #0]
 8008674:	4649      	mov	r1, r9
 8008676:	414b      	adcs	r3, r1
 8008678:	607b      	str	r3, [r7, #4]
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	f04f 0300 	mov.w	r3, #0
 8008682:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008686:	4659      	mov	r1, fp
 8008688:	00cb      	lsls	r3, r1, #3
 800868a:	4651      	mov	r1, sl
 800868c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008690:	4651      	mov	r1, sl
 8008692:	00ca      	lsls	r2, r1, #3
 8008694:	4610      	mov	r0, r2
 8008696:	4619      	mov	r1, r3
 8008698:	4603      	mov	r3, r0
 800869a:	4642      	mov	r2, r8
 800869c:	189b      	adds	r3, r3, r2
 800869e:	66bb      	str	r3, [r7, #104]	; 0x68
 80086a0:	464b      	mov	r3, r9
 80086a2:	460a      	mov	r2, r1
 80086a4:	eb42 0303 	adc.w	r3, r2, r3
 80086a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	663b      	str	r3, [r7, #96]	; 0x60
 80086b4:	667a      	str	r2, [r7, #100]	; 0x64
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086c2:	4649      	mov	r1, r9
 80086c4:	008b      	lsls	r3, r1, #2
 80086c6:	4641      	mov	r1, r8
 80086c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086cc:	4641      	mov	r1, r8
 80086ce:	008a      	lsls	r2, r1, #2
 80086d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086d4:	f7f8 fad8 	bl	8000c88 <__aeabi_uldivmod>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <UART_SetConfig+0x4e4>)
 80086de:	fba3 1302 	umull	r1, r3, r3, r2
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	2164      	movs	r1, #100	; 0x64
 80086e6:	fb01 f303 	mul.w	r3, r1, r3
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	3332      	adds	r3, #50	; 0x32
 80086f0:	4a08      	ldr	r2, [pc, #32]	; (8008714 <UART_SetConfig+0x4e4>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	095b      	lsrs	r3, r3, #5
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4422      	add	r2, r4
 8008704:	609a      	str	r2, [r3, #8]
}
 8008706:	bf00      	nop
 8008708:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800870c:	46bd      	mov	sp, r7
 800870e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008712:	bf00      	nop
 8008714:	51eb851f 	.word	0x51eb851f

08008718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008718:	b084      	sub	sp, #16
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	f107 001c 	add.w	r0, r7, #28
 8008726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	2b01      	cmp	r3, #1
 800872e:	d122      	bne.n	8008776 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875a:	2b01      	cmp	r3, #1
 800875c:	d105      	bne.n	800876a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 fbe8 	bl	8009f40 <USB_CoreReset>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
 8008774:	e01a      	b.n	80087ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fbdc 	bl	8009f40 <USB_CoreReset>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800878c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d106      	bne.n	80087a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
 800879e:	e005      	b.n	80087ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d10b      	bne.n	80087ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f043 0206 	orr.w	r2, r3, #6
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f043 0220 	orr.w	r2, r3, #32
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087d6:	b004      	add	sp, #16
 80087d8:	4770      	bx	lr
	...

080087dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d165      	bne.n	80088bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4a41      	ldr	r2, [pc, #260]	; (80088f8 <USB_SetTurnaroundTime+0x11c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d906      	bls.n	8008806 <USB_SetTurnaroundTime+0x2a>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	4a40      	ldr	r2, [pc, #256]	; (80088fc <USB_SetTurnaroundTime+0x120>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d202      	bcs.n	8008806 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008800:	230f      	movs	r3, #15
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	e062      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4a3c      	ldr	r2, [pc, #240]	; (80088fc <USB_SetTurnaroundTime+0x120>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d306      	bcc.n	800881c <USB_SetTurnaroundTime+0x40>
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4a3b      	ldr	r2, [pc, #236]	; (8008900 <USB_SetTurnaroundTime+0x124>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d202      	bcs.n	800881c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008816:	230e      	movs	r3, #14
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e057      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	4a38      	ldr	r2, [pc, #224]	; (8008900 <USB_SetTurnaroundTime+0x124>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d306      	bcc.n	8008832 <USB_SetTurnaroundTime+0x56>
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4a37      	ldr	r2, [pc, #220]	; (8008904 <USB_SetTurnaroundTime+0x128>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d202      	bcs.n	8008832 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800882c:	230d      	movs	r3, #13
 800882e:	617b      	str	r3, [r7, #20]
 8008830:	e04c      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	4a33      	ldr	r2, [pc, #204]	; (8008904 <USB_SetTurnaroundTime+0x128>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d306      	bcc.n	8008848 <USB_SetTurnaroundTime+0x6c>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4a32      	ldr	r2, [pc, #200]	; (8008908 <USB_SetTurnaroundTime+0x12c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d802      	bhi.n	8008848 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008842:	230c      	movs	r3, #12
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	e041      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	4a2f      	ldr	r2, [pc, #188]	; (8008908 <USB_SetTurnaroundTime+0x12c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d906      	bls.n	800885e <USB_SetTurnaroundTime+0x82>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	4a2e      	ldr	r2, [pc, #184]	; (800890c <USB_SetTurnaroundTime+0x130>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d802      	bhi.n	800885e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008858:	230b      	movs	r3, #11
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e036      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	4a2a      	ldr	r2, [pc, #168]	; (800890c <USB_SetTurnaroundTime+0x130>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d906      	bls.n	8008874 <USB_SetTurnaroundTime+0x98>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	4a29      	ldr	r2, [pc, #164]	; (8008910 <USB_SetTurnaroundTime+0x134>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d802      	bhi.n	8008874 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800886e:	230a      	movs	r3, #10
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	e02b      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4a26      	ldr	r2, [pc, #152]	; (8008910 <USB_SetTurnaroundTime+0x134>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d906      	bls.n	800888a <USB_SetTurnaroundTime+0xae>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4a25      	ldr	r2, [pc, #148]	; (8008914 <USB_SetTurnaroundTime+0x138>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d202      	bcs.n	800888a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008884:	2309      	movs	r3, #9
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e020      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4a21      	ldr	r2, [pc, #132]	; (8008914 <USB_SetTurnaroundTime+0x138>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d306      	bcc.n	80088a0 <USB_SetTurnaroundTime+0xc4>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	4a20      	ldr	r2, [pc, #128]	; (8008918 <USB_SetTurnaroundTime+0x13c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d802      	bhi.n	80088a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800889a:	2308      	movs	r3, #8
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e015      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4a1d      	ldr	r2, [pc, #116]	; (8008918 <USB_SetTurnaroundTime+0x13c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d906      	bls.n	80088b6 <USB_SetTurnaroundTime+0xda>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4a1c      	ldr	r2, [pc, #112]	; (800891c <USB_SetTurnaroundTime+0x140>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d202      	bcs.n	80088b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80088b0:	2307      	movs	r3, #7
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e00a      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80088b6:	2306      	movs	r3, #6
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	e007      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80088c2:	2309      	movs	r3, #9
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e001      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80088c8:	2309      	movs	r3, #9
 80088ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	029b      	lsls	r3, r3, #10
 80088e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80088e4:	431a      	orrs	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	00d8acbf 	.word	0x00d8acbf
 80088fc:	00e4e1c0 	.word	0x00e4e1c0
 8008900:	00f42400 	.word	0x00f42400
 8008904:	01067380 	.word	0x01067380
 8008908:	011a499f 	.word	0x011a499f
 800890c:	01312cff 	.word	0x01312cff
 8008910:	014ca43f 	.word	0x014ca43f
 8008914:	016e3600 	.word	0x016e3600
 8008918:	01a6ab1f 	.word	0x01a6ab1f
 800891c:	01e84800 	.word	0x01e84800

08008920 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f043 0201 	orr.w	r2, r3, #1
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f023 0201 	bic.w	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008980:	78fb      	ldrb	r3, [r7, #3]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d115      	bne.n	80089b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008992:	2001      	movs	r0, #1
 8008994:	f7fa fe04 	bl	80035a0 <HAL_Delay>
      ms++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3301      	adds	r3, #1
 800899c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fa3f 	bl	8009e22 <USB_GetMode>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d01e      	beq.n	80089e8 <USB_SetCurrentMode+0x84>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b31      	cmp	r3, #49	; 0x31
 80089ae:	d9f0      	bls.n	8008992 <USB_SetCurrentMode+0x2e>
 80089b0:	e01a      	b.n	80089e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d115      	bne.n	80089e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089c4:	2001      	movs	r0, #1
 80089c6:	f7fa fdeb 	bl	80035a0 <HAL_Delay>
      ms++;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3301      	adds	r3, #1
 80089ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 fa26 	bl	8009e22 <USB_GetMode>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <USB_SetCurrentMode+0x84>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b31      	cmp	r3, #49	; 0x31
 80089e0:	d9f0      	bls.n	80089c4 <USB_SetCurrentMode+0x60>
 80089e2:	e001      	b.n	80089e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e005      	b.n	80089f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b32      	cmp	r3, #50	; 0x32
 80089ec:	d101      	bne.n	80089f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089fc:	b084      	sub	sp, #16
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b086      	sub	sp, #24
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	e009      	b.n	8008a30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	3340      	adds	r3, #64	; 0x40
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b0e      	cmp	r3, #14
 8008a34:	d9f2      	bls.n	8008a1c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11c      	bne.n	8008a76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a4a:	f043 0302 	orr.w	r3, r3, #2
 8008a4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	e005      	b.n	8008a82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a88:	461a      	mov	r2, r3
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a94:	4619      	mov	r1, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	680b      	ldr	r3, [r1, #0]
 8008aa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d10c      	bne.n	8008ac2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d104      	bne.n	8008ab8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008aae:	2100      	movs	r1, #0
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f965 	bl	8008d80 <USB_SetDevSpeed>
 8008ab6:	e008      	b.n	8008aca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ab8:	2101      	movs	r1, #1
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f960 	bl	8008d80 <USB_SetDevSpeed>
 8008ac0:	e003      	b.n	8008aca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ac2:	2103      	movs	r1, #3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f95b 	bl	8008d80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008aca:	2110      	movs	r1, #16
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f8f3 	bl	8008cb8 <USB_FlushTxFifo>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f91f 	bl	8008d20 <USB_FlushRxFifo>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af2:	461a      	mov	r2, r3
 8008af4:	2300      	movs	r3, #0
 8008af6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	461a      	mov	r2, r3
 8008b00:	2300      	movs	r3, #0
 8008b02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b10:	2300      	movs	r3, #0
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	e043      	b.n	8008b9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b2c:	d118      	bne.n	8008b60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b40:	461a      	mov	r2, r3
 8008b42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	e013      	b.n	8008b72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b56:	461a      	mov	r2, r3
 8008b58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	e008      	b.n	8008b72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	2300      	movs	r3, #0
 8008b70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7e:	461a      	mov	r2, r3
 8008b80:	2300      	movs	r3, #0
 8008b82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b90:	461a      	mov	r2, r3
 8008b92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	613b      	str	r3, [r7, #16]
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d3b7      	bcc.n	8008b16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	613b      	str	r3, [r7, #16]
 8008baa:	e043      	b.n	8008c34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bc2:	d118      	bne.n	8008bf6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	e013      	b.n	8008c08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bec:	461a      	mov	r2, r3
 8008bee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	e008      	b.n	8008c08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c02:	461a      	mov	r2, r3
 8008c04:	2300      	movs	r3, #0
 8008c06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c14:	461a      	mov	r2, r3
 8008c16:	2300      	movs	r3, #0
 8008c18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c26:	461a      	mov	r2, r3
 8008c28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	3301      	adds	r3, #1
 8008c32:	613b      	str	r3, [r7, #16]
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d3b7      	bcc.n	8008bac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d105      	bne.n	8008c70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	f043 0210 	orr.w	r2, r3, #16
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <USB_DevInit+0x2b8>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	f043 0208 	orr.w	r2, r3, #8
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d107      	bne.n	8008ca4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c9c:	f043 0304 	orr.w	r3, r3, #4
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cb0:	b004      	add	sp, #16
 8008cb2:	4770      	bx	lr
 8008cb4:	803c3800 	.word	0x803c3800

08008cb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4a13      	ldr	r2, [pc, #76]	; (8008d1c <USB_FlushTxFifo+0x64>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d901      	bls.n	8008cd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e01b      	b.n	8008d10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	daf2      	bge.n	8008cc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	019b      	lsls	r3, r3, #6
 8008ce8:	f043 0220 	orr.w	r2, r3, #32
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <USB_FlushTxFifo+0x64>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d901      	bls.n	8008d02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e006      	b.n	8008d10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d0f0      	beq.n	8008cf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	00030d40 	.word	0x00030d40

08008d20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4a11      	ldr	r2, [pc, #68]	; (8008d7c <USB_FlushRxFifo+0x5c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d901      	bls.n	8008d3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e018      	b.n	8008d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	daf2      	bge.n	8008d2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2210      	movs	r2, #16
 8008d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3301      	adds	r3, #1
 8008d54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4a08      	ldr	r2, [pc, #32]	; (8008d7c <USB_FlushRxFifo+0x5c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d901      	bls.n	8008d62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e006      	b.n	8008d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	f003 0310 	and.w	r3, r3, #16
 8008d6a:	2b10      	cmp	r3, #16
 8008d6c:	d0f0      	beq.n	8008d50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	00030d40 	.word	0x00030d40

08008d80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	68f9      	ldr	r1, [r7, #12]
 8008d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008da0:	4313      	orrs	r3, r2
 8008da2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b087      	sub	sp, #28
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f003 0306 	and.w	r3, r3, #6
 8008dca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	75fb      	strb	r3, [r7, #23]
 8008dd6:	e00a      	b.n	8008dee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d002      	beq.n	8008de4 <USB_GetDevSpeed+0x32>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b06      	cmp	r3, #6
 8008de2:	d102      	bne.n	8008dea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008de4:	2302      	movs	r3, #2
 8008de6:	75fb      	strb	r3, [r7, #23]
 8008de8:	e001      	b.n	8008dee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008dea:	230f      	movs	r3, #15
 8008dec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	371c      	adds	r7, #28
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	785b      	ldrb	r3, [r3, #1]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d13a      	bne.n	8008e8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1e:	69da      	ldr	r2, [r3, #28]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	2101      	movs	r1, #1
 8008e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	68f9      	ldr	r1, [r7, #12]
 8008e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e36:	4313      	orrs	r3, r2
 8008e38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d155      	bne.n	8008efc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	791b      	ldrb	r3, [r3, #4]
 8008e6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	059b      	lsls	r3, r3, #22
 8008e72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e74:	4313      	orrs	r3, r2
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	e036      	b.n	8008efc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e94:	69da      	ldr	r2, [r3, #28]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	f003 030f 	and.w	r3, r3, #15
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea4:	041b      	lsls	r3, r3, #16
 8008ea6:	68f9      	ldr	r1, [r7, #12]
 8008ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eac:	4313      	orrs	r3, r2
 8008eae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d11a      	bne.n	8008efc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	791b      	ldrb	r3, [r3, #4]
 8008ee0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ee2:	430b      	orrs	r3, r1
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	0151      	lsls	r1, r2, #5
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	440a      	add	r2, r1
 8008eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
	...

08008f0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d161      	bne.n	8008fec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f3e:	d11f      	bne.n	8008f80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	0151      	lsls	r1, r2, #5
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	440a      	add	r2, r1
 8008f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	2101      	movs	r1, #1
 8008f92:	fa01 f303 	lsl.w	r3, r1, r3
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	43db      	mvns	r3, r3
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	0159      	lsls	r1, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	440b      	add	r3, r1
 8008fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4b35      	ldr	r3, [pc, #212]	; (80090bc <USB_DeactivateEndpoint+0x1b0>)
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	600b      	str	r3, [r1, #0]
 8008fea:	e060      	b.n	80090ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009002:	d11f      	bne.n	8009044 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800901e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009022:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	0151      	lsls	r1, r2, #5
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	440a      	add	r2, r1
 800903a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800903e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009042:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f003 030f 	and.w	r3, r3, #15
 8009054:	2101      	movs	r1, #1
 8009056:	fa01 f303 	lsl.w	r3, r1, r3
 800905a:	041b      	lsls	r3, r3, #16
 800905c:	43db      	mvns	r3, r3
 800905e:	68f9      	ldr	r1, [r7, #12]
 8009060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009064:	4013      	ands	r3, r2
 8009066:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906e:	69da      	ldr	r2, [r3, #28]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	f003 030f 	and.w	r3, r3, #15
 8009078:	2101      	movs	r1, #1
 800907a:	fa01 f303 	lsl.w	r3, r1, r3
 800907e:	041b      	lsls	r3, r3, #16
 8009080:	43db      	mvns	r3, r3
 8009082:	68f9      	ldr	r1, [r7, #12]
 8009084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009088:	4013      	ands	r3, r2
 800908a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	0159      	lsls	r1, r3, #5
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	440b      	add	r3, r1
 80090a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a6:	4619      	mov	r1, r3
 80090a8:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <USB_DeactivateEndpoint+0x1b4>)
 80090aa:	4013      	ands	r3, r2
 80090ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	ec337800 	.word	0xec337800
 80090c0:	eff37800 	.word	0xeff37800

080090c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08a      	sub	sp, #40	; 0x28
 80090c8:	af02      	add	r7, sp, #8
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	f040 815c 	bne.w	800939e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d132      	bne.n	8009154 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	0151      	lsls	r1, r2, #5
 8009100:	69fa      	ldr	r2, [r7, #28]
 8009102:	440a      	add	r2, r1
 8009104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009108:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800910c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	0151      	lsls	r1, r2, #5
 8009124:	69fa      	ldr	r2, [r7, #28]
 8009126:	440a      	add	r2, r1
 8009128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009130:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	0151      	lsls	r1, r2, #5
 8009144:	69fa      	ldr	r2, [r7, #28]
 8009146:	440a      	add	r2, r1
 8009148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800914c:	0cdb      	lsrs	r3, r3, #19
 800914e:	04db      	lsls	r3, r3, #19
 8009150:	6113      	str	r3, [r2, #16]
 8009152:	e074      	b.n	800923e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	0151      	lsls	r1, r2, #5
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	440a      	add	r2, r1
 800916a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800916e:	0cdb      	lsrs	r3, r3, #19
 8009170:	04db      	lsls	r3, r3, #19
 8009172:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	440a      	add	r2, r1
 800918a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009192:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009196:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6999      	ldr	r1, [r3, #24]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	440b      	add	r3, r1
 80091b0:	1e59      	subs	r1, r3, #1
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80091ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80091bc:	4b9d      	ldr	r3, [pc, #628]	; (8009434 <USB_EPStartXfer+0x370>)
 80091be:	400b      	ands	r3, r1
 80091c0:	69b9      	ldr	r1, [r7, #24]
 80091c2:	0148      	lsls	r0, r1, #5
 80091c4:	69f9      	ldr	r1, [r7, #28]
 80091c6:	4401      	add	r1, r0
 80091c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091cc:	4313      	orrs	r3, r2
 80091ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091dc:	691a      	ldr	r2, [r3, #16]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091e6:	69b9      	ldr	r1, [r7, #24]
 80091e8:	0148      	lsls	r0, r1, #5
 80091ea:	69f9      	ldr	r1, [r7, #28]
 80091ec:	4401      	add	r1, r0
 80091ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091f2:	4313      	orrs	r3, r2
 80091f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	791b      	ldrb	r3, [r3, #4]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d11f      	bne.n	800923e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	0151      	lsls	r1, r2, #5
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	440a      	add	r2, r1
 8009214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009218:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800921c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800923c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d14b      	bne.n	80092dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d009      	beq.n	8009260 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	461a      	mov	r2, r3
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	791b      	ldrb	r3, [r3, #4]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d128      	bne.n	80092ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009274:	2b00      	cmp	r3, #0
 8009276:	d110      	bne.n	800929a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	0151      	lsls	r1, r2, #5
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	440a      	add	r2, r1
 800928e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	e00f      	b.n	80092ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	0151      	lsls	r1, r2, #5
 80092ac:	69fa      	ldr	r2, [r7, #28]
 80092ae:	440a      	add	r2, r1
 80092b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	69fa      	ldr	r2, [r7, #28]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	e133      	b.n	8009544 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	0151      	lsls	r1, r2, #5
 80092ee:	69fa      	ldr	r2, [r7, #28]
 80092f0:	440a      	add	r2, r1
 80092f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	791b      	ldrb	r3, [r3, #4]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d015      	beq.n	8009330 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 811b 	beq.w	8009544 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	2101      	movs	r1, #1
 8009320:	fa01 f303 	lsl.w	r3, r1, r3
 8009324:	69f9      	ldr	r1, [r7, #28]
 8009326:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800932a:	4313      	orrs	r3, r2
 800932c:	634b      	str	r3, [r1, #52]	; 0x34
 800932e:	e109      	b.n	8009544 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800933c:	2b00      	cmp	r3, #0
 800933e:	d110      	bne.n	8009362 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	69fa      	ldr	r2, [r7, #28]
 8009354:	440a      	add	r2, r1
 8009356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	e00f      	b.n	8009382 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	0151      	lsls	r1, r2, #5
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	440a      	add	r2, r1
 8009378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800937c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009380:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6919      	ldr	r1, [r3, #16]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	781a      	ldrb	r2, [r3, #0]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	b298      	uxth	r0, r3
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	4603      	mov	r3, r0
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 fade 	bl	8009958 <USB_WritePacket>
 800939c:	e0d2      	b.n	8009544 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	0151      	lsls	r1, r2, #5
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	440a      	add	r2, r1
 80093b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b8:	0cdb      	lsrs	r3, r3, #19
 80093ba:	04db      	lsls	r3, r3, #19
 80093bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d126      	bne.n	8009438 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009400:	69b9      	ldr	r1, [r7, #24]
 8009402:	0148      	lsls	r0, r1, #5
 8009404:	69f9      	ldr	r1, [r7, #28]
 8009406:	4401      	add	r1, r0
 8009408:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800940c:	4313      	orrs	r3, r2
 800940e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	440a      	add	r2, r1
 8009426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800942a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800942e:	6113      	str	r3, [r2, #16]
 8009430:	e03a      	b.n	80094a8 <USB_EPStartXfer+0x3e4>
 8009432:	bf00      	nop
 8009434:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	699a      	ldr	r2, [r3, #24]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	4413      	add	r3, r2
 8009442:	1e5a      	subs	r2, r3, #1
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	fbb2 f3f3 	udiv	r3, r2, r3
 800944c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	8afa      	ldrh	r2, [r7, #22]
 8009454:	fb03 f202 	mul.w	r2, r3, r2
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009468:	691a      	ldr	r2, [r3, #16]
 800946a:	8afb      	ldrh	r3, [r7, #22]
 800946c:	04d9      	lsls	r1, r3, #19
 800946e:	4b38      	ldr	r3, [pc, #224]	; (8009550 <USB_EPStartXfer+0x48c>)
 8009470:	400b      	ands	r3, r1
 8009472:	69b9      	ldr	r1, [r7, #24]
 8009474:	0148      	lsls	r0, r1, #5
 8009476:	69f9      	ldr	r1, [r7, #28]
 8009478:	4401      	add	r1, r0
 800947a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800947e:	4313      	orrs	r3, r2
 8009480:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948e:	691a      	ldr	r2, [r3, #16]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009498:	69b9      	ldr	r1, [r7, #24]
 800949a:	0148      	lsls	r0, r1, #5
 800949c:	69f9      	ldr	r1, [r7, #28]
 800949e:	4401      	add	r1, r0
 80094a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094a4:	4313      	orrs	r3, r2
 80094a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d10d      	bne.n	80094ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d009      	beq.n	80094ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6919      	ldr	r1, [r3, #16]
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c6:	460a      	mov	r2, r1
 80094c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	791b      	ldrb	r3, [r3, #4]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d128      	bne.n	8009524 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d110      	bne.n	8009504 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	e00f      	b.n	8009524 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800951e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009522:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800953e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	1ff80000 	.word	0x1ff80000

08009554 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	4613      	mov	r3, r2
 8009560:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	785b      	ldrb	r3, [r3, #1]
 8009570:	2b01      	cmp	r3, #1
 8009572:	f040 80ce 	bne.w	8009712 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d132      	bne.n	80095e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009598:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800959c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	0151      	lsls	r1, r2, #5
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	440a      	add	r2, r1
 80095d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095dc:	0cdb      	lsrs	r3, r3, #19
 80095de:	04db      	lsls	r3, r3, #19
 80095e0:	6113      	str	r3, [r2, #16]
 80095e2:	e04e      	b.n	8009682 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	0151      	lsls	r1, r2, #5
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	440a      	add	r2, r1
 80095fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095fe:	0cdb      	lsrs	r3, r3, #19
 8009600:	04db      	lsls	r3, r3, #19
 8009602:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800961e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009622:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009626:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	699a      	ldr	r2, [r3, #24]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	429a      	cmp	r2, r3
 8009632:	d903      	bls.n	800963c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	0151      	lsls	r1, r2, #5
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	440a      	add	r2, r1
 8009652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800965a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009668:	691a      	ldr	r2, [r3, #16]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009672:	6939      	ldr	r1, [r7, #16]
 8009674:	0148      	lsls	r0, r1, #5
 8009676:	6979      	ldr	r1, [r7, #20]
 8009678:	4401      	add	r1, r0
 800967a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800967e:	4313      	orrs	r3, r2
 8009680:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d11e      	bne.n	80096c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969c:	461a      	mov	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	0151      	lsls	r1, r2, #5
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	440a      	add	r2, r1
 80096ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	e097      	b.n	80097f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	0151      	lsls	r1, r2, #5
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	440a      	add	r2, r1
 80096dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 8083 	beq.w	80097f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f003 030f 	and.w	r3, r3, #15
 8009700:	2101      	movs	r1, #1
 8009702:	fa01 f303 	lsl.w	r3, r1, r3
 8009706:	6979      	ldr	r1, [r7, #20]
 8009708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800970c:	4313      	orrs	r3, r2
 800970e:	634b      	str	r3, [r1, #52]	; 0x34
 8009710:	e071      	b.n	80097f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	0151      	lsls	r1, r2, #5
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	440a      	add	r2, r1
 8009728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972c:	0cdb      	lsrs	r3, r3, #19
 800972e:	04db      	lsls	r3, r3, #19
 8009730:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009750:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009754:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	4413      	add	r3, r2
 8009776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	0151      	lsls	r1, r2, #5
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	440a      	add	r2, r1
 8009784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800978c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979a:	691a      	ldr	r2, [r3, #16]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097a4:	6939      	ldr	r1, [r7, #16]
 80097a6:	0148      	lsls	r0, r1, #5
 80097a8:	6979      	ldr	r1, [r7, #20]
 80097aa:	4401      	add	r1, r0
 80097ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097b0:	4313      	orrs	r3, r2
 80097b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d10d      	bne.n	80097d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	6919      	ldr	r1, [r3, #16]
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d2:	460a      	mov	r2, r1
 80097d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800980e:	2300      	movs	r3, #0
 8009810:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d14a      	bne.n	80098b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800983a:	f040 8086 	bne.w	800994a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	7812      	ldrb	r2, [r2, #0]
 8009852:	0151      	lsls	r1, r2, #5
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	440a      	add	r2, r1
 8009858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800985c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009860:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	7812      	ldrb	r2, [r2, #0]
 8009876:	0151      	lsls	r1, r2, #5
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	440a      	add	r2, r1
 800987c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009884:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009892:	4293      	cmp	r3, r2
 8009894:	d902      	bls.n	800989c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	75fb      	strb	r3, [r7, #23]
          break;
 800989a:	e056      	b.n	800994a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098b4:	d0e7      	beq.n	8009886 <USB_EPStopXfer+0x82>
 80098b6:	e048      	b.n	800994a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d0:	d13b      	bne.n	800994a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	7812      	ldrb	r2, [r2, #0]
 80098e6:	0151      	lsls	r1, r2, #5
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	440a      	add	r2, r1
 80098ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	7812      	ldrb	r2, [r2, #0]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009918:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3301      	adds	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f242 7210 	movw	r2, #10000	; 0x2710
 8009926:	4293      	cmp	r3, r2
 8009928:	d902      	bls.n	8009930 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	75fb      	strb	r3, [r7, #23]
          break;
 800992e:	e00c      	b.n	800994a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009948:	d0e7      	beq.n	800991a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
}
 800994c:	4618      	mov	r0, r3
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009958:	b480      	push	{r7}
 800995a:	b089      	sub	sp, #36	; 0x24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4611      	mov	r1, r2
 8009964:	461a      	mov	r2, r3
 8009966:	460b      	mov	r3, r1
 8009968:	71fb      	strb	r3, [r7, #7]
 800996a:	4613      	mov	r3, r2
 800996c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800997a:	2b00      	cmp	r3, #0
 800997c:	d123      	bne.n	80099c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800997e:	88bb      	ldrh	r3, [r7, #4]
 8009980:	3303      	adds	r3, #3
 8009982:	089b      	lsrs	r3, r3, #2
 8009984:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009986:	2300      	movs	r3, #0
 8009988:	61bb      	str	r3, [r7, #24]
 800998a:	e018      	b.n	80099be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	031a      	lsls	r2, r3, #12
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	4413      	add	r3, r2
 8009994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009998:	461a      	mov	r2, r3
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	3301      	adds	r3, #1
 80099a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	3301      	adds	r3, #1
 80099aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	3301      	adds	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	3301      	adds	r3, #1
 80099b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	3301      	adds	r3, #1
 80099bc:	61bb      	str	r3, [r7, #24]
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d3e2      	bcc.n	800998c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3724      	adds	r7, #36	; 0x24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b08b      	sub	sp, #44	; 0x2c
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099ea:	88fb      	ldrh	r3, [r7, #6]
 80099ec:	089b      	lsrs	r3, r3, #2
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099fa:	2300      	movs	r3, #0
 80099fc:	623b      	str	r3, [r7, #32]
 80099fe:	e014      	b.n	8009a2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	3301      	adds	r3, #1
 8009a10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	3301      	adds	r3, #1
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	3301      	adds	r3, #1
 8009a22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	3301      	adds	r3, #1
 8009a28:	623b      	str	r3, [r7, #32]
 8009a2a:	6a3a      	ldr	r2, [r7, #32]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d3e6      	bcc.n	8009a00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a32:	8bfb      	ldrh	r3, [r7, #30]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01e      	beq.n	8009a76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a42:	461a      	mov	r2, r3
 8009a44:	f107 0310 	add.w	r3, r7, #16
 8009a48:	6812      	ldr	r2, [r2, #0]
 8009a4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	fa22 f303 	lsr.w	r3, r2, r3
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	701a      	strb	r2, [r3, #0]
      i++;
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	3301      	adds	r3, #1
 8009a62:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	3301      	adds	r3, #1
 8009a68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a6a:	8bfb      	ldrh	r3, [r7, #30]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a70:	8bfb      	ldrh	r3, [r7, #30]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1ea      	bne.n	8009a4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	372c      	adds	r7, #44	; 0x2c
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d12c      	bne.n	8009afa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	db12      	blt.n	8009ad8 <USB_EPSetStall+0x54>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00f      	beq.n	8009ad8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	0151      	lsls	r1, r2, #5
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	440a      	add	r2, r1
 8009ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ad2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ad6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	0151      	lsls	r1, r2, #5
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	440a      	add	r2, r1
 8009aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	e02b      	b.n	8009b52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	db12      	blt.n	8009b32 <USB_EPSetStall+0xae>
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00f      	beq.n	8009b32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	0151      	lsls	r1, r2, #5
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	440a      	add	r2, r1
 8009b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	0151      	lsls	r1, r2, #5
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	440a      	add	r2, r1
 8009b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d128      	bne.n	8009bce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	0151      	lsls	r1, r2, #5
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	440a      	add	r2, r1
 8009b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	791b      	ldrb	r3, [r3, #4]
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d003      	beq.n	8009bac <USB_EPClearStall+0x4c>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	791b      	ldrb	r3, [r3, #4]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d138      	bne.n	8009c1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	0151      	lsls	r1, r2, #5
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	e027      	b.n	8009c1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	0151      	lsls	r1, r2, #5
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	440a      	add	r2, r1
 8009be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	791b      	ldrb	r3, [r3, #4]
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d003      	beq.n	8009bfe <USB_EPClearStall+0x9e>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	791b      	ldrb	r3, [r3, #4]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d10f      	bne.n	8009c1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	0151      	lsls	r1, r2, #5
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	440a      	add	r2, r1
 8009c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	011b      	lsls	r3, r3, #4
 8009c5c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c60:	68f9      	ldr	r1, [r7, #12]
 8009c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c66:	4313      	orrs	r3, r2
 8009c68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ca6:	f023 0302 	bic.w	r3, r3, #2
 8009caa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cd4:	f023 0303 	bic.w	r3, r3, #3
 8009cd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ce8:	f043 0302 	orr.w	r3, r3, #2
 8009cec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4013      	ands	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d14:	68fb      	ldr	r3, [r7, #12]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	4013      	ands	r3, r2
 8009d44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	0c1b      	lsrs	r3, r3, #16
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	4013      	ands	r3, r2
 8009d78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	b29b      	uxth	r3, r3
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d9a:	78fb      	ldrb	r3, [r7, #3]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	4013      	ands	r3, r2
 8009db6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009db8:	68bb      	ldr	r3, [r7, #8]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b087      	sub	sp, #28
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009dea:	78fb      	ldrb	r3, [r7, #3]
 8009dec:	f003 030f 	and.w	r3, r3, #15
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	fa22 f303 	lsr.w	r3, r2, r3
 8009df6:	01db      	lsls	r3, r3, #7
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4013      	ands	r3, r2
 8009e12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e14:	68bb      	ldr	r3, [r7, #8]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	371c      	adds	r7, #28
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	f003 0301 	and.w	r3, r3, #1
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e5c:	f023 0307 	bic.w	r3, r3, #7
 8009e60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	333c      	adds	r3, #60	; 0x3c
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	4a26      	ldr	r2, [pc, #152]	; (8009f3c <USB_EP0_OutStart+0xb8>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d90a      	bls.n	8009ebe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009eb8:	d101      	bne.n	8009ebe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e037      	b.n	8009f2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ed8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eec:	f043 0318 	orr.w	r3, r3, #24
 8009ef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f06:	7afb      	ldrb	r3, [r7, #11]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d10f      	bne.n	8009f2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f12:	461a      	mov	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	4f54300a 	.word	0x4f54300a

08009f40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4a13      	ldr	r2, [pc, #76]	; (8009fa4 <USB_CoreReset+0x64>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d901      	bls.n	8009f5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e01b      	b.n	8009f96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	daf2      	bge.n	8009f4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	f043 0201 	orr.w	r2, r3, #1
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4a09      	ldr	r2, [pc, #36]	; (8009fa4 <USB_CoreReset+0x64>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d901      	bls.n	8009f88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e006      	b.n	8009f96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d0f0      	beq.n	8009f76 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	00030d40 	.word	0x00030d40

08009fa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009fb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009fb8:	f002 fd68 	bl	800ca8c <USBD_static_malloc>
 8009fbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d109      	bne.n	8009fd8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	32b0      	adds	r2, #176	; 0xb0
 8009fce:	2100      	movs	r1, #0
 8009fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e0d4      	b.n	800a182 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009fd8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009fdc:	2100      	movs	r1, #0
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f002 fdd0 	bl	800cb84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	32b0      	adds	r2, #176	; 0xb0
 8009fee:	68f9      	ldr	r1, [r7, #12]
 8009ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	32b0      	adds	r2, #176	; 0xb0
 8009ffe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	7c1b      	ldrb	r3, [r3, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d138      	bne.n	800a082 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a010:	4b5e      	ldr	r3, [pc, #376]	; (800a18c <USBD_CDC_Init+0x1e4>)
 800a012:	7819      	ldrb	r1, [r3, #0]
 800a014:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a018:	2202      	movs	r2, #2
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f002 fbc5 	bl	800c7aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a020:	4b5a      	ldr	r3, [pc, #360]	; (800a18c <USBD_CDC_Init+0x1e4>)
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	f003 020f 	and.w	r2, r3, #15
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4613      	mov	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	3324      	adds	r3, #36	; 0x24
 800a036:	2201      	movs	r2, #1
 800a038:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a03a:	4b55      	ldr	r3, [pc, #340]	; (800a190 <USBD_CDC_Init+0x1e8>)
 800a03c:	7819      	ldrb	r1, [r3, #0]
 800a03e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a042:	2202      	movs	r2, #2
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f002 fbb0 	bl	800c7aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a04a:	4b51      	ldr	r3, [pc, #324]	; (800a190 <USBD_CDC_Init+0x1e8>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	f003 020f 	and.w	r2, r3, #15
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	440b      	add	r3, r1
 800a05e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a062:	2201      	movs	r2, #1
 800a064:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a066:	4b4b      	ldr	r3, [pc, #300]	; (800a194 <USBD_CDC_Init+0x1ec>)
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	f003 020f 	and.w	r2, r3, #15
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	3326      	adds	r3, #38	; 0x26
 800a07c:	2210      	movs	r2, #16
 800a07e:	801a      	strh	r2, [r3, #0]
 800a080:	e035      	b.n	800a0ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a082:	4b42      	ldr	r3, [pc, #264]	; (800a18c <USBD_CDC_Init+0x1e4>)
 800a084:	7819      	ldrb	r1, [r3, #0]
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	2202      	movs	r2, #2
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f002 fb8d 	bl	800c7aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a090:	4b3e      	ldr	r3, [pc, #248]	; (800a18c <USBD_CDC_Init+0x1e4>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	f003 020f 	and.w	r2, r3, #15
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	4613      	mov	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4413      	add	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	440b      	add	r3, r1
 800a0a4:	3324      	adds	r3, #36	; 0x24
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0aa:	4b39      	ldr	r3, [pc, #228]	; (800a190 <USBD_CDC_Init+0x1e8>)
 800a0ac:	7819      	ldrb	r1, [r3, #0]
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f002 fb79 	bl	800c7aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a0b8:	4b35      	ldr	r3, [pc, #212]	; (800a190 <USBD_CDC_Init+0x1e8>)
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	f003 020f 	and.w	r2, r3, #15
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	440b      	add	r3, r1
 800a0cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a0d4:	4b2f      	ldr	r3, [pc, #188]	; (800a194 <USBD_CDC_Init+0x1ec>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	f003 020f 	and.w	r2, r3, #15
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	440b      	add	r3, r1
 800a0e8:	3326      	adds	r3, #38	; 0x26
 800a0ea:	2210      	movs	r2, #16
 800a0ec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a0ee:	4b29      	ldr	r3, [pc, #164]	; (800a194 <USBD_CDC_Init+0x1ec>)
 800a0f0:	7819      	ldrb	r1, [r3, #0]
 800a0f2:	2308      	movs	r3, #8
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f002 fb57 	bl	800c7aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a0fc:	4b25      	ldr	r3, [pc, #148]	; (800a194 <USBD_CDC_Init+0x1ec>)
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	f003 020f 	and.w	r2, r3, #15
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	4613      	mov	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	440b      	add	r3, r1
 800a110:	3324      	adds	r3, #36	; 0x24
 800a112:	2201      	movs	r2, #1
 800a114:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	33b0      	adds	r3, #176	; 0xb0
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a14c:	2302      	movs	r3, #2
 800a14e:	e018      	b.n	800a182 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	7c1b      	ldrb	r3, [r3, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10a      	bne.n	800a16e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a158:	4b0d      	ldr	r3, [pc, #52]	; (800a190 <USBD_CDC_Init+0x1e8>)
 800a15a:	7819      	ldrb	r1, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a162:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f002 fc0e 	bl	800c988 <USBD_LL_PrepareReceive>
 800a16c:	e008      	b.n	800a180 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a16e:	4b08      	ldr	r3, [pc, #32]	; (800a190 <USBD_CDC_Init+0x1e8>)
 800a170:	7819      	ldrb	r1, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a178:	2340      	movs	r3, #64	; 0x40
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f002 fc04 	bl	800c988 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	200000bb 	.word	0x200000bb
 800a190:	200000bc 	.word	0x200000bc
 800a194:	200000bd 	.word	0x200000bd

0800a198 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a1a4:	4b3a      	ldr	r3, [pc, #232]	; (800a290 <USBD_CDC_DeInit+0xf8>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f002 fb23 	bl	800c7f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a1b0:	4b37      	ldr	r3, [pc, #220]	; (800a290 <USBD_CDC_DeInit+0xf8>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	f003 020f 	and.w	r2, r3, #15
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3324      	adds	r3, #36	; 0x24
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a1ca:	4b32      	ldr	r3, [pc, #200]	; (800a294 <USBD_CDC_DeInit+0xfc>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f002 fb10 	bl	800c7f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a1d6:	4b2f      	ldr	r3, [pc, #188]	; (800a294 <USBD_CDC_DeInit+0xfc>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	f003 020f 	and.w	r2, r3, #15
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a1f2:	4b29      	ldr	r3, [pc, #164]	; (800a298 <USBD_CDC_DeInit+0x100>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f002 fafc 	bl	800c7f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a1fe:	4b26      	ldr	r3, [pc, #152]	; (800a298 <USBD_CDC_DeInit+0x100>)
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	f003 020f 	and.w	r2, r3, #15
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	440b      	add	r3, r1
 800a212:	3324      	adds	r3, #36	; 0x24
 800a214:	2200      	movs	r2, #0
 800a216:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a218:	4b1f      	ldr	r3, [pc, #124]	; (800a298 <USBD_CDC_DeInit+0x100>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	f003 020f 	and.w	r2, r3, #15
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	4613      	mov	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	3326      	adds	r3, #38	; 0x26
 800a22e:	2200      	movs	r2, #0
 800a230:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	32b0      	adds	r2, #176	; 0xb0
 800a23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01f      	beq.n	800a284 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	33b0      	adds	r3, #176	; 0xb0
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	32b0      	adds	r2, #176	; 0xb0
 800a262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a266:	4618      	mov	r0, r3
 800a268:	f002 fc1e 	bl	800caa8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	32b0      	adds	r2, #176	; 0xb0
 800a276:	2100      	movs	r1, #0
 800a278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	200000bb 	.word	0x200000bb
 800a294:	200000bc 	.word	0x200000bc
 800a298:	200000bd 	.word	0x200000bd

0800a29c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	32b0      	adds	r2, #176	; 0xb0
 800a2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e0bf      	b.n	800a44c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d050      	beq.n	800a37a <USBD_CDC_Setup+0xde>
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	f040 80af 	bne.w	800a43c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	88db      	ldrh	r3, [r3, #6]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d03a      	beq.n	800a35c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	b25b      	sxtb	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	da1b      	bge.n	800a328 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	33b0      	adds	r3, #176	; 0xb0
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a306:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	88d2      	ldrh	r2, [r2, #6]
 800a30c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	88db      	ldrh	r3, [r3, #6]
 800a312:	2b07      	cmp	r3, #7
 800a314:	bf28      	it	cs
 800a316:	2307      	movcs	r3, #7
 800a318:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	89fa      	ldrh	r2, [r7, #14]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 fdb3 	bl	800be8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a326:	e090      	b.n	800a44a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	785a      	ldrb	r2, [r3, #1]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	88db      	ldrh	r3, [r3, #6]
 800a336:	2b3f      	cmp	r3, #63	; 0x3f
 800a338:	d803      	bhi.n	800a342 <USBD_CDC_Setup+0xa6>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	88db      	ldrh	r3, [r3, #6]
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	e000      	b.n	800a344 <USBD_CDC_Setup+0xa8>
 800a342:	2240      	movs	r2, #64	; 0x40
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a34a:	6939      	ldr	r1, [r7, #16]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a352:	461a      	mov	r2, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f001 fdc5 	bl	800bee4 <USBD_CtlPrepareRx>
      break;
 800a35a:	e076      	b.n	800a44a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	33b0      	adds	r3, #176	; 0xb0
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	7850      	ldrb	r0, [r2, #1]
 800a372:	2200      	movs	r2, #0
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	4798      	blx	r3
      break;
 800a378:	e067      	b.n	800a44a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	785b      	ldrb	r3, [r3, #1]
 800a37e:	2b0b      	cmp	r3, #11
 800a380:	d851      	bhi.n	800a426 <USBD_CDC_Setup+0x18a>
 800a382:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <USBD_CDC_Setup+0xec>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3b9 	.word	0x0800a3b9
 800a38c:	0800a435 	.word	0x0800a435
 800a390:	0800a427 	.word	0x0800a427
 800a394:	0800a427 	.word	0x0800a427
 800a398:	0800a427 	.word	0x0800a427
 800a39c:	0800a427 	.word	0x0800a427
 800a3a0:	0800a427 	.word	0x0800a427
 800a3a4:	0800a427 	.word	0x0800a427
 800a3a8:	0800a427 	.word	0x0800a427
 800a3ac:	0800a427 	.word	0x0800a427
 800a3b0:	0800a3e3 	.word	0x0800a3e3
 800a3b4:	0800a40d 	.word	0x0800a40d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d107      	bne.n	800a3d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a3c4:	f107 030a 	add.w	r3, r7, #10
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 fd5d 	bl	800be8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3d2:	e032      	b.n	800a43a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f001 fce7 	bl	800bdaa <USBD_CtlError>
            ret = USBD_FAIL;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	75fb      	strb	r3, [r7, #23]
          break;
 800a3e0:	e02b      	b.n	800a43a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d107      	bne.n	800a3fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3ee:	f107 030d 	add.w	r3, r7, #13
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f001 fd48 	bl	800be8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3fc:	e01d      	b.n	800a43a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 fcd2 	bl	800bdaa <USBD_CtlError>
            ret = USBD_FAIL;
 800a406:	2303      	movs	r3, #3
 800a408:	75fb      	strb	r3, [r7, #23]
          break;
 800a40a:	e016      	b.n	800a43a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b03      	cmp	r3, #3
 800a416:	d00f      	beq.n	800a438 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f001 fcc5 	bl	800bdaa <USBD_CtlError>
            ret = USBD_FAIL;
 800a420:	2303      	movs	r3, #3
 800a422:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a424:	e008      	b.n	800a438 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 fcbe 	bl	800bdaa <USBD_CtlError>
          ret = USBD_FAIL;
 800a42e:	2303      	movs	r3, #3
 800a430:	75fb      	strb	r3, [r7, #23]
          break;
 800a432:	e002      	b.n	800a43a <USBD_CDC_Setup+0x19e>
          break;
 800a434:	bf00      	nop
 800a436:	e008      	b.n	800a44a <USBD_CDC_Setup+0x1ae>
          break;
 800a438:	bf00      	nop
      }
      break;
 800a43a:	e006      	b.n	800a44a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 fcb3 	bl	800bdaa <USBD_CtlError>
      ret = USBD_FAIL;
 800a444:	2303      	movs	r3, #3
 800a446:	75fb      	strb	r3, [r7, #23]
      break;
 800a448:	bf00      	nop
  }

  return (uint8_t)ret;
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a466:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	32b0      	adds	r2, #176	; 0xb0
 800a472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e065      	b.n	800a54a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	32b0      	adds	r2, #176	; 0xb0
 800a488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a48c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a48e:	78fb      	ldrb	r3, [r7, #3]
 800a490:	f003 020f 	and.w	r2, r3, #15
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	4613      	mov	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	440b      	add	r3, r1
 800a4a0:	3318      	adds	r3, #24
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d02f      	beq.n	800a508 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	f003 020f 	and.w	r2, r3, #15
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	440b      	add	r3, r1
 800a4ba:	3318      	adds	r3, #24
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	78fb      	ldrb	r3, [r7, #3]
 800a4c0:	f003 010f 	and.w	r1, r3, #15
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	440b      	add	r3, r1
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4403      	add	r3, r0
 800a4d0:	3348      	adds	r3, #72	; 0x48
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4d8:	fb01 f303 	mul.w	r3, r1, r3
 800a4dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d112      	bne.n	800a508 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	f003 020f 	and.w	r2, r3, #15
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	440b      	add	r3, r1
 800a4f4:	3318      	adds	r3, #24
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a4fa:	78f9      	ldrb	r1, [r7, #3]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	2200      	movs	r2, #0
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f002 fa20 	bl	800c946 <USBD_LL_Transmit>
 800a506:	e01f      	b.n	800a548 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	33b0      	adds	r3, #176	; 0xb0
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d010      	beq.n	800a548 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	33b0      	adds	r3, #176	; 0xb0
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a544:	78fa      	ldrb	r2, [r7, #3]
 800a546:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	460b      	mov	r3, r1
 800a55c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	32b0      	adds	r2, #176	; 0xb0
 800a568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	32b0      	adds	r2, #176	; 0xb0
 800a578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a580:	2303      	movs	r3, #3
 800a582:	e01a      	b.n	800a5ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f002 fa1e 	bl	800c9ca <USBD_LL_GetRxDataSize>
 800a58e:	4602      	mov	r2, r0
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	33b0      	adds	r3, #176	; 0xb0
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	32b0      	adds	r2, #176	; 0xb0
 800a5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e025      	b.n	800a630 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	33b0      	adds	r3, #176	; 0xb0
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d01a      	beq.n	800a62e <USBD_CDC_EP0_RxReady+0x6c>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a5fe:	2bff      	cmp	r3, #255	; 0xff
 800a600:	d015      	beq.n	800a62e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	33b0      	adds	r3, #176	; 0xb0
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4413      	add	r3, r2
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a61a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a622:	b292      	uxth	r2, r2
 800a624:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	22ff      	movs	r2, #255	; 0xff
 800a62a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a640:	2182      	movs	r1, #130	; 0x82
 800a642:	4818      	ldr	r0, [pc, #96]	; (800a6a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a644:	f000 fd4f 	bl	800b0e6 <USBD_GetEpDesc>
 800a648:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a64a:	2101      	movs	r1, #1
 800a64c:	4815      	ldr	r0, [pc, #84]	; (800a6a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a64e:	f000 fd4a 	bl	800b0e6 <USBD_GetEpDesc>
 800a652:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a654:	2181      	movs	r1, #129	; 0x81
 800a656:	4813      	ldr	r0, [pc, #76]	; (800a6a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a658:	f000 fd45 	bl	800b0e6 <USBD_GetEpDesc>
 800a65c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2210      	movs	r2, #16
 800a668:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d006      	beq.n	800a67e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2200      	movs	r2, #0
 800a674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a678:	711a      	strb	r2, [r3, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d006      	beq.n	800a692 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a68c:	711a      	strb	r2, [r3, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2243      	movs	r2, #67	; 0x43
 800a696:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000078 	.word	0x20000078

0800a6a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6b0:	2182      	movs	r1, #130	; 0x82
 800a6b2:	4818      	ldr	r0, [pc, #96]	; (800a714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6b4:	f000 fd17 	bl	800b0e6 <USBD_GetEpDesc>
 800a6b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	4815      	ldr	r0, [pc, #84]	; (800a714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6be:	f000 fd12 	bl	800b0e6 <USBD_GetEpDesc>
 800a6c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a6c4:	2181      	movs	r1, #129	; 0x81
 800a6c6:	4813      	ldr	r0, [pc, #76]	; (800a714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6c8:	f000 fd0d 	bl	800b0e6 <USBD_GetEpDesc>
 800a6cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2210      	movs	r2, #16
 800a6d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d006      	beq.n	800a6ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	711a      	strb	r2, [r3, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f042 0202 	orr.w	r2, r2, #2
 800a6ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d006      	beq.n	800a702 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	711a      	strb	r2, [r3, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f042 0202 	orr.w	r2, r2, #2
 800a700:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2243      	movs	r2, #67	; 0x43
 800a706:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a708:	4b02      	ldr	r3, [pc, #8]	; (800a714 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20000078 	.word	0x20000078

0800a718 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a720:	2182      	movs	r1, #130	; 0x82
 800a722:	4818      	ldr	r0, [pc, #96]	; (800a784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a724:	f000 fcdf 	bl	800b0e6 <USBD_GetEpDesc>
 800a728:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a72a:	2101      	movs	r1, #1
 800a72c:	4815      	ldr	r0, [pc, #84]	; (800a784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a72e:	f000 fcda 	bl	800b0e6 <USBD_GetEpDesc>
 800a732:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a734:	2181      	movs	r1, #129	; 0x81
 800a736:	4813      	ldr	r0, [pc, #76]	; (800a784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a738:	f000 fcd5 	bl	800b0e6 <USBD_GetEpDesc>
 800a73c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2210      	movs	r2, #16
 800a748:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d006      	beq.n	800a75e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	2200      	movs	r2, #0
 800a754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a758:	711a      	strb	r2, [r3, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d006      	beq.n	800a772 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a76c:	711a      	strb	r2, [r3, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2243      	movs	r2, #67	; 0x43
 800a776:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3718      	adds	r7, #24
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20000078 	.word	0x20000078

0800a788 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	220a      	movs	r2, #10
 800a794:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a796:	4b03      	ldr	r3, [pc, #12]	; (800a7a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a798:	4618      	mov	r0, r3
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	20000034 	.word	0x20000034

0800a7a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	e009      	b.n	800a7d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	33b0      	adds	r3, #176	; 0xb0
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	32b0      	adds	r2, #176	; 0xb0
 800a7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e008      	b.n	800a814 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	371c      	adds	r7, #28
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	32b0      	adds	r2, #176	; 0xb0
 800a834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a838:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	e004      	b.n	800a84e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
	...

0800a85c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	32b0      	adds	r2, #176	; 0xb0
 800a86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a872:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a874:	2301      	movs	r3, #1
 800a876:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	32b0      	adds	r2, #176	; 0xb0
 800a882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e025      	b.n	800a8da <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a894:	2b00      	cmp	r3, #0
 800a896:	d11f      	bne.n	800a8d8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a8a0:	4b10      	ldr	r3, [pc, #64]	; (800a8e4 <USBD_CDC_TransmitPacket+0x88>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 020f 	and.w	r2, r3, #15
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4403      	add	r3, r0
 800a8ba:	3318      	adds	r3, #24
 800a8bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a8be:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <USBD_CDC_TransmitPacket+0x88>)
 800a8c0:	7819      	ldrb	r1, [r3, #0]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f002 f839 	bl	800c946 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200000bb 	.word	0x200000bb

0800a8e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32b0      	adds	r2, #176	; 0xb0
 800a8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	32b0      	adds	r2, #176	; 0xb0
 800a90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a912:	2303      	movs	r3, #3
 800a914:	e018      	b.n	800a948 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	7c1b      	ldrb	r3, [r3, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10a      	bne.n	800a934 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a91e:	4b0c      	ldr	r3, [pc, #48]	; (800a950 <USBD_CDC_ReceivePacket+0x68>)
 800a920:	7819      	ldrb	r1, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f002 f82b 	bl	800c988 <USBD_LL_PrepareReceive>
 800a932:	e008      	b.n	800a946 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a934:	4b06      	ldr	r3, [pc, #24]	; (800a950 <USBD_CDC_ReceivePacket+0x68>)
 800a936:	7819      	ldrb	r1, [r3, #0]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a93e:	2340      	movs	r3, #64	; 0x40
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f002 f821 	bl	800c988 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	200000bc 	.word	0x200000bc

0800a954 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	4613      	mov	r3, r2
 800a960:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a968:	2303      	movs	r3, #3
 800a96a:	e01f      	b.n	800a9ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	79fa      	ldrb	r2, [r7, #7]
 800a99e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f001 fe9b 	bl	800c6dc <USBD_LL_Init>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d101      	bne.n	800a9cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e025      	b.n	800aa18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	32ae      	adds	r2, #174	; 0xae
 800a9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00f      	beq.n	800aa08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	32ae      	adds	r2, #174	; 0xae
 800a9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	f107 020e 	add.w	r2, r7, #14
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
 800aa00:	4602      	mov	r2, r0
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f001 fea3 	bl	800c774 <USBD_LL_Start>
 800aa2e:	4603      	mov	r3, r0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b084      	sub	sp, #16
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d009      	beq.n	800aa7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	78fa      	ldrb	r2, [r7, #3]
 800aa72:	4611      	mov	r1, r2
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	4798      	blx	r3
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	78fa      	ldrb	r2, [r7, #3]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	4798      	blx	r3
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aaac:	2303      	movs	r3, #3
 800aaae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	4618      	mov	r0, r3
 800aace:	f001 f932 	bl	800bd36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aae0:	461a      	mov	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aaee:	f003 031f 	and.w	r3, r3, #31
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d01a      	beq.n	800ab2c <USBD_LL_SetupStage+0x72>
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d822      	bhi.n	800ab40 <USBD_LL_SetupStage+0x86>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <USBD_LL_SetupStage+0x4a>
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d00a      	beq.n	800ab18 <USBD_LL_SetupStage+0x5e>
 800ab02:	e01d      	b.n	800ab40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fb5f 	bl	800b1d0 <USBD_StdDevReq>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73fb      	strb	r3, [r7, #15]
      break;
 800ab16:	e020      	b.n	800ab5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fbc7 	bl	800b2b4 <USBD_StdItfReq>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
      break;
 800ab2a:	e016      	b.n	800ab5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fc29 	bl	800b38c <USBD_StdEPReq>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab3e:	e00c      	b.n	800ab5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 fe70 	bl	800c834 <USBD_LL_StallEP>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
      break;
 800ab58:	bf00      	nop
  }

  return ret;
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ab76:	7afb      	ldrb	r3, [r7, #11]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d16e      	bne.n	800ac5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	f040 8098 	bne.w	800acc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d913      	bls.n	800abc4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	1ad2      	subs	r2, r2, r3
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	4293      	cmp	r3, r2
 800abb4:	bf28      	it	cs
 800abb6:	4613      	movcs	r3, r2
 800abb8:	461a      	mov	r2, r3
 800abba:	6879      	ldr	r1, [r7, #4]
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f001 f9ae 	bl	800bf1e <USBD_CtlContinueRx>
 800abc2:	e07d      	b.n	800acc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abca:	f003 031f 	and.w	r3, r3, #31
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d014      	beq.n	800abfc <USBD_LL_DataOutStage+0x98>
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d81d      	bhi.n	800ac12 <USBD_LL_DataOutStage+0xae>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <USBD_LL_DataOutStage+0x7c>
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d003      	beq.n	800abe6 <USBD_LL_DataOutStage+0x82>
 800abde:	e018      	b.n	800ac12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	75bb      	strb	r3, [r7, #22]
            break;
 800abe4:	e018      	b.n	800ac18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800abec:	b2db      	uxtb	r3, r3
 800abee:	4619      	mov	r1, r3
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fa5e 	bl	800b0b2 <USBD_CoreFindIF>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75bb      	strb	r3, [r7, #22]
            break;
 800abfa:	e00d      	b.n	800ac18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	4619      	mov	r1, r3
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f000 fa60 	bl	800b0cc <USBD_CoreFindEP>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	75bb      	strb	r3, [r7, #22]
            break;
 800ac10:	e002      	b.n	800ac18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	75bb      	strb	r3, [r7, #22]
            break;
 800ac16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ac18:	7dbb      	ldrb	r3, [r7, #22]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d119      	bne.n	800ac52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d113      	bne.n	800ac52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ac2a:	7dba      	ldrb	r2, [r7, #22]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	32ae      	adds	r2, #174	; 0xae
 800ac30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00b      	beq.n	800ac52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ac3a:	7dba      	ldrb	r2, [r7, #22]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ac42:	7dba      	ldrb	r2, [r7, #22]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	32ae      	adds	r2, #174	; 0xae
 800ac48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f001 f974 	bl	800bf40 <USBD_CtlSendStatus>
 800ac58:	e032      	b.n	800acc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ac5a:	7afb      	ldrb	r3, [r7, #11]
 800ac5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	4619      	mov	r1, r3
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 fa31 	bl	800b0cc <USBD_CoreFindEP>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac6e:	7dbb      	ldrb	r3, [r7, #22]
 800ac70:	2bff      	cmp	r3, #255	; 0xff
 800ac72:	d025      	beq.n	800acc0 <USBD_LL_DataOutStage+0x15c>
 800ac74:	7dbb      	ldrb	r3, [r7, #22]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d122      	bne.n	800acc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d117      	bne.n	800acb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ac86:	7dba      	ldrb	r2, [r7, #22]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	32ae      	adds	r2, #174	; 0xae
 800ac8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00f      	beq.n	800acb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ac96:	7dba      	ldrb	r2, [r7, #22]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ac9e:	7dba      	ldrb	r2, [r7, #22]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	32ae      	adds	r2, #174	; 0xae
 800aca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	7afa      	ldrb	r2, [r7, #11]
 800acac:	4611      	mov	r1, r2
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	4798      	blx	r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	e000      	b.n	800acc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b086      	sub	sp, #24
 800acce:	af00      	add	r7, sp, #0
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	460b      	mov	r3, r1
 800acd4:	607a      	str	r2, [r7, #4]
 800acd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800acd8:	7afb      	ldrb	r3, [r7, #11]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d16f      	bne.n	800adbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3314      	adds	r3, #20
 800ace2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acea:	2b02      	cmp	r3, #2
 800acec:	d15a      	bne.n	800ada4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	689a      	ldr	r2, [r3, #8]
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d914      	bls.n	800ad24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	1ad2      	subs	r2, r2, r3
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f001 f8d6 	bl	800bec2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad16:	2300      	movs	r3, #0
 800ad18:	2200      	movs	r2, #0
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f001 fe33 	bl	800c988 <USBD_LL_PrepareReceive>
 800ad22:	e03f      	b.n	800ada4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	68da      	ldr	r2, [r3, #12]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d11c      	bne.n	800ad6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d316      	bcc.n	800ad6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d20f      	bcs.n	800ad6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f001 f8b7 	bl	800bec2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2100      	movs	r1, #0
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f001 fe10 	bl	800c988 <USBD_LL_PrepareReceive>
 800ad68:	e01c      	b.n	800ada4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d10f      	bne.n	800ad96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d009      	beq.n	800ad96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad96:	2180      	movs	r1, #128	; 0x80
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f001 fd4b 	bl	800c834 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f001 f8e1 	bl	800bf66 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d03a      	beq.n	800ae24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f7ff fe42 	bl	800aa38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800adbc:	e032      	b.n	800ae24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800adbe:	7afb      	ldrb	r3, [r7, #11]
 800adc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	4619      	mov	r1, r3
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f97f 	bl	800b0cc <USBD_CoreFindEP>
 800adce:	4603      	mov	r3, r0
 800add0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	2bff      	cmp	r3, #255	; 0xff
 800add6:	d025      	beq.n	800ae24 <USBD_LL_DataInStage+0x15a>
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d122      	bne.n	800ae24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d11c      	bne.n	800ae24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800adea:	7dfa      	ldrb	r2, [r7, #23]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	32ae      	adds	r2, #174	; 0xae
 800adf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d014      	beq.n	800ae24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800adfa:	7dfa      	ldrb	r2, [r7, #23]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ae02:	7dfa      	ldrb	r2, [r7, #23]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	32ae      	adds	r2, #174	; 0xae
 800ae08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	7afa      	ldrb	r2, [r7, #11]
 800ae10:	4611      	mov	r1, r2
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	4798      	blx	r3
 800ae16:	4603      	mov	r3, r0
 800ae18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ae1a:	7dbb      	ldrb	r3, [r7, #22]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ae20:	7dbb      	ldrb	r3, [r7, #22]
 800ae22:	e000      	b.n	800ae26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d014      	beq.n	800ae94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00e      	beq.n	800ae94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	6852      	ldr	r2, [r2, #4]
 800ae82:	b2d2      	uxtb	r2, r2
 800ae84:	4611      	mov	r1, r2
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	4798      	blx	r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d001      	beq.n	800ae94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae94:	2340      	movs	r3, #64	; 0x40
 800ae96:	2200      	movs	r2, #0
 800ae98:	2100      	movs	r1, #0
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f001 fc85 	bl	800c7aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2240      	movs	r2, #64	; 0x40
 800aeac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aeb0:	2340      	movs	r3, #64	; 0x40
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2180      	movs	r1, #128	; 0x80
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f001 fc77 	bl	800c7aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2240      	movs	r2, #64	; 0x40
 800aec6:	621a      	str	r2, [r3, #32]

  return ret;
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	460b      	mov	r3, r1
 800aedc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	78fa      	ldrb	r2, [r7, #3]
 800aee2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b083      	sub	sp, #12
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af00:	b2da      	uxtb	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2204      	movs	r2, #4
 800af0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr

0800af1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af1e:	b480      	push	{r7}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b04      	cmp	r3, #4
 800af30:	d106      	bne.n	800af40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d110      	bne.n	800af84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00b      	beq.n	800af84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af72:	69db      	ldr	r3, [r3, #28]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	460b      	mov	r3, r1
 800af98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	32ae      	adds	r2, #174	; 0xae
 800afa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800afac:	2303      	movs	r3, #3
 800afae:	e01c      	b.n	800afea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d115      	bne.n	800afe8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	32ae      	adds	r2, #174	; 0xae
 800afc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afca:	6a1b      	ldr	r3, [r3, #32]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00b      	beq.n	800afe8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	32ae      	adds	r2, #174	; 0xae
 800afda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	78fa      	ldrb	r2, [r7, #3]
 800afe2:	4611      	mov	r1, r2
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b082      	sub	sp, #8
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	460b      	mov	r3, r1
 800affc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	32ae      	adds	r2, #174	; 0xae
 800b008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b010:	2303      	movs	r3, #3
 800b012:	e01c      	b.n	800b04e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d115      	bne.n	800b04c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	32ae      	adds	r2, #174	; 0xae
 800b02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00b      	beq.n	800b04c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	32ae      	adds	r2, #174	; 0xae
 800b03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	78fa      	ldrb	r2, [r7, #3]
 800b046:	4611      	mov	r1, r2
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00e      	beq.n	800b0a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	6852      	ldr	r2, [r2, #4]
 800b096:	b2d2      	uxtb	r2, r2
 800b098:	4611      	mov	r1, r2
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	4798      	blx	r3
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b083      	sub	sp, #12
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b086      	sub	sp, #24
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	885b      	ldrh	r3, [r3, #2]
 800b102:	b29a      	uxth	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d920      	bls.n	800b150 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b29b      	uxth	r3, r3
 800b114:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b116:	e013      	b.n	800b140 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b118:	f107 030a 	add.w	r3, r7, #10
 800b11c:	4619      	mov	r1, r3
 800b11e:	6978      	ldr	r0, [r7, #20]
 800b120:	f000 f81b 	bl	800b15a <USBD_GetNextDesc>
 800b124:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	785b      	ldrb	r3, [r3, #1]
 800b12a:	2b05      	cmp	r3, #5
 800b12c:	d108      	bne.n	800b140 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	789b      	ldrb	r3, [r3, #2]
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d008      	beq.n	800b14e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b13c:	2300      	movs	r3, #0
 800b13e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	885b      	ldrh	r3, [r3, #2]
 800b144:	b29a      	uxth	r2, r3
 800b146:	897b      	ldrh	r3, [r7, #10]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d8e5      	bhi.n	800b118 <USBD_GetEpDesc+0x32>
 800b14c:	e000      	b.n	800b150 <USBD_GetEpDesc+0x6a>
          break;
 800b14e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b150:	693b      	ldr	r3, [r7, #16]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3718      	adds	r7, #24
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b085      	sub	sp, #20
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	881a      	ldrh	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	b29b      	uxth	r3, r3
 800b172:	4413      	add	r3, r2
 800b174:	b29a      	uxth	r2, r3
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4413      	add	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b186:	68fb      	ldr	r3, [r7, #12]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b194:	b480      	push	{r7}
 800b196:	b087      	sub	sp, #28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1b2:	8a3b      	ldrh	r3, [r7, #16]
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	b21a      	sxth	r2, r3
 800b1b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	b21b      	sxth	r3, r3
 800b1c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b1c2:	89fb      	ldrh	r3, [r7, #14]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	371c      	adds	r7, #28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1e6:	2b40      	cmp	r3, #64	; 0x40
 800b1e8:	d005      	beq.n	800b1f6 <USBD_StdDevReq+0x26>
 800b1ea:	2b40      	cmp	r3, #64	; 0x40
 800b1ec:	d857      	bhi.n	800b29e <USBD_StdDevReq+0xce>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00f      	beq.n	800b212 <USBD_StdDevReq+0x42>
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	d153      	bne.n	800b29e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	32ae      	adds	r2, #174	; 0xae
 800b200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	4798      	blx	r3
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
      break;
 800b210:	e04a      	b.n	800b2a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	2b09      	cmp	r3, #9
 800b218:	d83b      	bhi.n	800b292 <USBD_StdDevReq+0xc2>
 800b21a:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <USBD_StdDevReq+0x50>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b275 	.word	0x0800b275
 800b224:	0800b289 	.word	0x0800b289
 800b228:	0800b293 	.word	0x0800b293
 800b22c:	0800b27f 	.word	0x0800b27f
 800b230:	0800b293 	.word	0x0800b293
 800b234:	0800b253 	.word	0x0800b253
 800b238:	0800b249 	.word	0x0800b249
 800b23c:	0800b293 	.word	0x0800b293
 800b240:	0800b26b 	.word	0x0800b26b
 800b244:	0800b25d 	.word	0x0800b25d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fa3c 	bl	800b6c8 <USBD_GetDescriptor>
          break;
 800b250:	e024      	b.n	800b29c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fbcb 	bl	800b9f0 <USBD_SetAddress>
          break;
 800b25a:	e01f      	b.n	800b29c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fc0a 	bl	800ba78 <USBD_SetConfig>
 800b264:	4603      	mov	r3, r0
 800b266:	73fb      	strb	r3, [r7, #15]
          break;
 800b268:	e018      	b.n	800b29c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fcad 	bl	800bbcc <USBD_GetConfig>
          break;
 800b272:	e013      	b.n	800b29c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fcde 	bl	800bc38 <USBD_GetStatus>
          break;
 800b27c:	e00e      	b.n	800b29c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fd0d 	bl	800bca0 <USBD_SetFeature>
          break;
 800b286:	e009      	b.n	800b29c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fd31 	bl	800bcf2 <USBD_ClrFeature>
          break;
 800b290:	e004      	b.n	800b29c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fd88 	bl	800bdaa <USBD_CtlError>
          break;
 800b29a:	bf00      	nop
      }
      break;
 800b29c:	e004      	b.n	800b2a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fd82 	bl	800bdaa <USBD_CtlError>
      break;
 800b2a6:	bf00      	nop
  }

  return ret;
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop

0800b2b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2ca:	2b40      	cmp	r3, #64	; 0x40
 800b2cc:	d005      	beq.n	800b2da <USBD_StdItfReq+0x26>
 800b2ce:	2b40      	cmp	r3, #64	; 0x40
 800b2d0:	d852      	bhi.n	800b378 <USBD_StdItfReq+0xc4>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <USBD_StdItfReq+0x26>
 800b2d6:	2b20      	cmp	r3, #32
 800b2d8:	d14e      	bne.n	800b378 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d840      	bhi.n	800b36a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	889b      	ldrh	r3, [r3, #4]
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d836      	bhi.n	800b360 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	889b      	ldrh	r3, [r3, #4]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff fed9 	bl	800b0b2 <USBD_CoreFindIF>
 800b300:	4603      	mov	r3, r0
 800b302:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b304:	7bbb      	ldrb	r3, [r7, #14]
 800b306:	2bff      	cmp	r3, #255	; 0xff
 800b308:	d01d      	beq.n	800b346 <USBD_StdItfReq+0x92>
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d11a      	bne.n	800b346 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b310:	7bba      	ldrb	r2, [r7, #14]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	32ae      	adds	r2, #174	; 0xae
 800b316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00f      	beq.n	800b340 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b320:	7bba      	ldrb	r2, [r7, #14]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b328:	7bba      	ldrb	r2, [r7, #14]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	32ae      	adds	r2, #174	; 0xae
 800b32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	4798      	blx	r3
 800b33a:	4603      	mov	r3, r0
 800b33c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b33e:	e004      	b.n	800b34a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b340:	2303      	movs	r3, #3
 800b342:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b344:	e001      	b.n	800b34a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b346:	2303      	movs	r3, #3
 800b348:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	88db      	ldrh	r3, [r3, #6]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d110      	bne.n	800b374 <USBD_StdItfReq+0xc0>
 800b352:	7bfb      	ldrb	r3, [r7, #15]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10d      	bne.n	800b374 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 fdf1 	bl	800bf40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b35e:	e009      	b.n	800b374 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fd21 	bl	800bdaa <USBD_CtlError>
          break;
 800b368:	e004      	b.n	800b374 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fd1c 	bl	800bdaa <USBD_CtlError>
          break;
 800b372:	e000      	b.n	800b376 <USBD_StdItfReq+0xc2>
          break;
 800b374:	bf00      	nop
      }
      break;
 800b376:	e004      	b.n	800b382 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fd15 	bl	800bdaa <USBD_CtlError>
      break;
 800b380:	bf00      	nop
  }

  return ret;
 800b382:	7bfb      	ldrb	r3, [r7, #15]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	889b      	ldrh	r3, [r3, #4]
 800b39e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3a8:	2b40      	cmp	r3, #64	; 0x40
 800b3aa:	d007      	beq.n	800b3bc <USBD_StdEPReq+0x30>
 800b3ac:	2b40      	cmp	r3, #64	; 0x40
 800b3ae:	f200 817f 	bhi.w	800b6b0 <USBD_StdEPReq+0x324>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d02a      	beq.n	800b40c <USBD_StdEPReq+0x80>
 800b3b6:	2b20      	cmp	r3, #32
 800b3b8:	f040 817a 	bne.w	800b6b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff fe83 	bl	800b0cc <USBD_CoreFindEP>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3ca:	7b7b      	ldrb	r3, [r7, #13]
 800b3cc:	2bff      	cmp	r3, #255	; 0xff
 800b3ce:	f000 8174 	beq.w	800b6ba <USBD_StdEPReq+0x32e>
 800b3d2:	7b7b      	ldrb	r3, [r7, #13]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f040 8170 	bne.w	800b6ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b3da:	7b7a      	ldrb	r2, [r7, #13]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b3e2:	7b7a      	ldrb	r2, [r7, #13]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	32ae      	adds	r2, #174	; 0xae
 800b3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 8163 	beq.w	800b6ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b3f4:	7b7a      	ldrb	r2, [r7, #13]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	32ae      	adds	r2, #174	; 0xae
 800b3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
 800b406:	4603      	mov	r3, r0
 800b408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b40a:	e156      	b.n	800b6ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	785b      	ldrb	r3, [r3, #1]
 800b410:	2b03      	cmp	r3, #3
 800b412:	d008      	beq.n	800b426 <USBD_StdEPReq+0x9a>
 800b414:	2b03      	cmp	r3, #3
 800b416:	f300 8145 	bgt.w	800b6a4 <USBD_StdEPReq+0x318>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f000 809b 	beq.w	800b556 <USBD_StdEPReq+0x1ca>
 800b420:	2b01      	cmp	r3, #1
 800b422:	d03c      	beq.n	800b49e <USBD_StdEPReq+0x112>
 800b424:	e13e      	b.n	800b6a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d002      	beq.n	800b438 <USBD_StdEPReq+0xac>
 800b432:	2b03      	cmp	r3, #3
 800b434:	d016      	beq.n	800b464 <USBD_StdEPReq+0xd8>
 800b436:	e02c      	b.n	800b492 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b438:	7bbb      	ldrb	r3, [r7, #14]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00d      	beq.n	800b45a <USBD_StdEPReq+0xce>
 800b43e:	7bbb      	ldrb	r3, [r7, #14]
 800b440:	2b80      	cmp	r3, #128	; 0x80
 800b442:	d00a      	beq.n	800b45a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b444:	7bbb      	ldrb	r3, [r7, #14]
 800b446:	4619      	mov	r1, r3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f001 f9f3 	bl	800c834 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b44e:	2180      	movs	r1, #128	; 0x80
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 f9ef 	bl	800c834 <USBD_LL_StallEP>
 800b456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b458:	e020      	b.n	800b49c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fca4 	bl	800bdaa <USBD_CtlError>
              break;
 800b462:	e01b      	b.n	800b49c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	885b      	ldrh	r3, [r3, #2]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10e      	bne.n	800b48a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00b      	beq.n	800b48a <USBD_StdEPReq+0xfe>
 800b472:	7bbb      	ldrb	r3, [r7, #14]
 800b474:	2b80      	cmp	r3, #128	; 0x80
 800b476:	d008      	beq.n	800b48a <USBD_StdEPReq+0xfe>
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	88db      	ldrh	r3, [r3, #6]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d104      	bne.n	800b48a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f001 f9d5 	bl	800c834 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fd58 	bl	800bf40 <USBD_CtlSendStatus>

              break;
 800b490:	e004      	b.n	800b49c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fc88 	bl	800bdaa <USBD_CtlError>
              break;
 800b49a:	bf00      	nop
          }
          break;
 800b49c:	e107      	b.n	800b6ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d002      	beq.n	800b4b0 <USBD_StdEPReq+0x124>
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d016      	beq.n	800b4dc <USBD_StdEPReq+0x150>
 800b4ae:	e04b      	b.n	800b548 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00d      	beq.n	800b4d2 <USBD_StdEPReq+0x146>
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	2b80      	cmp	r3, #128	; 0x80
 800b4ba:	d00a      	beq.n	800b4d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 f9b7 	bl	800c834 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4c6:	2180      	movs	r1, #128	; 0x80
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 f9b3 	bl	800c834 <USBD_LL_StallEP>
 800b4ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4d0:	e040      	b.n	800b554 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fc68 	bl	800bdaa <USBD_CtlError>
              break;
 800b4da:	e03b      	b.n	800b554 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	885b      	ldrh	r3, [r3, #2]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d136      	bne.n	800b552 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d004      	beq.n	800b4f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f001 f9bd 	bl	800c872 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fd21 	bl	800bf40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff fde2 	bl	800b0cc <USBD_CoreFindEP>
 800b508:	4603      	mov	r3, r0
 800b50a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b50c:	7b7b      	ldrb	r3, [r7, #13]
 800b50e:	2bff      	cmp	r3, #255	; 0xff
 800b510:	d01f      	beq.n	800b552 <USBD_StdEPReq+0x1c6>
 800b512:	7b7b      	ldrb	r3, [r7, #13]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d11c      	bne.n	800b552 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b518:	7b7a      	ldrb	r2, [r7, #13]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b520:	7b7a      	ldrb	r2, [r7, #13]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	32ae      	adds	r2, #174	; 0xae
 800b526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d010      	beq.n	800b552 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b530:	7b7a      	ldrb	r2, [r7, #13]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	32ae      	adds	r2, #174	; 0xae
 800b536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	6839      	ldr	r1, [r7, #0]
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	4798      	blx	r3
 800b542:	4603      	mov	r3, r0
 800b544:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b546:	e004      	b.n	800b552 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fc2d 	bl	800bdaa <USBD_CtlError>
              break;
 800b550:	e000      	b.n	800b554 <USBD_StdEPReq+0x1c8>
              break;
 800b552:	bf00      	nop
          }
          break;
 800b554:	e0ab      	b.n	800b6ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d002      	beq.n	800b568 <USBD_StdEPReq+0x1dc>
 800b562:	2b03      	cmp	r3, #3
 800b564:	d032      	beq.n	800b5cc <USBD_StdEPReq+0x240>
 800b566:	e097      	b.n	800b698 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d007      	beq.n	800b57e <USBD_StdEPReq+0x1f2>
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	2b80      	cmp	r3, #128	; 0x80
 800b572:	d004      	beq.n	800b57e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fc17 	bl	800bdaa <USBD_CtlError>
                break;
 800b57c:	e091      	b.n	800b6a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b57e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b582:	2b00      	cmp	r3, #0
 800b584:	da0b      	bge.n	800b59e <USBD_StdEPReq+0x212>
 800b586:	7bbb      	ldrb	r3, [r7, #14]
 800b588:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b58c:	4613      	mov	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4413      	add	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	3310      	adds	r3, #16
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	4413      	add	r3, r2
 800b59a:	3304      	adds	r3, #4
 800b59c:	e00b      	b.n	800b5b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fc61 	bl	800be8c <USBD_CtlSendData>
              break;
 800b5ca:	e06a      	b.n	800b6a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da11      	bge.n	800b5f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5d4:	7bbb      	ldrb	r3, [r7, #14]
 800b5d6:	f003 020f 	and.w	r2, r3, #15
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	3324      	adds	r3, #36	; 0x24
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d117      	bne.n	800b61e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fbda 	bl	800bdaa <USBD_CtlError>
                  break;
 800b5f6:	e054      	b.n	800b6a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	f003 020f 	and.w	r2, r3, #15
 800b5fe:	6879      	ldr	r1, [r7, #4]
 800b600:	4613      	mov	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	440b      	add	r3, r1
 800b60a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d104      	bne.n	800b61e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fbc7 	bl	800bdaa <USBD_CtlError>
                  break;
 800b61c:	e041      	b.n	800b6a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b61e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b622:	2b00      	cmp	r3, #0
 800b624:	da0b      	bge.n	800b63e <USBD_StdEPReq+0x2b2>
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	3310      	adds	r3, #16
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	4413      	add	r3, r2
 800b63a:	3304      	adds	r3, #4
 800b63c:	e00b      	b.n	800b656 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b63e:	7bbb      	ldrb	r3, [r7, #14]
 800b640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b644:	4613      	mov	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	4413      	add	r3, r2
 800b654:	3304      	adds	r3, #4
 800b656:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b658:	7bbb      	ldrb	r3, [r7, #14]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <USBD_StdEPReq+0x2d8>
 800b65e:	7bbb      	ldrb	r3, [r7, #14]
 800b660:	2b80      	cmp	r3, #128	; 0x80
 800b662:	d103      	bne.n	800b66c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2200      	movs	r2, #0
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	e00e      	b.n	800b68a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b66c:	7bbb      	ldrb	r3, [r7, #14]
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 f91d 	bl	800c8b0 <USBD_LL_IsStallEP>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2201      	movs	r2, #1
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	e002      	b.n	800b68a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2200      	movs	r2, #0
 800b688:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	2202      	movs	r2, #2
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fbfb 	bl	800be8c <USBD_CtlSendData>
              break;
 800b696:	e004      	b.n	800b6a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fb85 	bl	800bdaa <USBD_CtlError>
              break;
 800b6a0:	bf00      	nop
          }
          break;
 800b6a2:	e004      	b.n	800b6ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fb7f 	bl	800bdaa <USBD_CtlError>
          break;
 800b6ac:	bf00      	nop
      }
      break;
 800b6ae:	e005      	b.n	800b6bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fb79 	bl	800bdaa <USBD_CtlError>
      break;
 800b6b8:	e000      	b.n	800b6bc <USBD_StdEPReq+0x330>
      break;
 800b6ba:	bf00      	nop
  }

  return ret;
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
	...

0800b6c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	885b      	ldrh	r3, [r3, #2]
 800b6e2:	0a1b      	lsrs	r3, r3, #8
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	2b0e      	cmp	r3, #14
 800b6ea:	f200 8152 	bhi.w	800b992 <USBD_GetDescriptor+0x2ca>
 800b6ee:	a201      	add	r2, pc, #4	; (adr r2, 800b6f4 <USBD_GetDescriptor+0x2c>)
 800b6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f4:	0800b765 	.word	0x0800b765
 800b6f8:	0800b77d 	.word	0x0800b77d
 800b6fc:	0800b7bd 	.word	0x0800b7bd
 800b700:	0800b993 	.word	0x0800b993
 800b704:	0800b993 	.word	0x0800b993
 800b708:	0800b933 	.word	0x0800b933
 800b70c:	0800b95f 	.word	0x0800b95f
 800b710:	0800b993 	.word	0x0800b993
 800b714:	0800b993 	.word	0x0800b993
 800b718:	0800b993 	.word	0x0800b993
 800b71c:	0800b993 	.word	0x0800b993
 800b720:	0800b993 	.word	0x0800b993
 800b724:	0800b993 	.word	0x0800b993
 800b728:	0800b993 	.word	0x0800b993
 800b72c:	0800b731 	.word	0x0800b731
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b736:	69db      	ldr	r3, [r3, #28]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00b      	beq.n	800b754 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	7c12      	ldrb	r2, [r2, #16]
 800b748:	f107 0108 	add.w	r1, r7, #8
 800b74c:	4610      	mov	r0, r2
 800b74e:	4798      	blx	r3
 800b750:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b752:	e126      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fb27 	bl	800bdaa <USBD_CtlError>
        err++;
 800b75c:	7afb      	ldrb	r3, [r7, #11]
 800b75e:	3301      	adds	r3, #1
 800b760:	72fb      	strb	r3, [r7, #11]
      break;
 800b762:	e11e      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	7c12      	ldrb	r2, [r2, #16]
 800b770:	f107 0108 	add.w	r1, r7, #8
 800b774:	4610      	mov	r0, r2
 800b776:	4798      	blx	r3
 800b778:	60f8      	str	r0, [r7, #12]
      break;
 800b77a:	e112      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	7c1b      	ldrb	r3, [r3, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10d      	bne.n	800b7a0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78c:	f107 0208 	add.w	r2, r7, #8
 800b790:	4610      	mov	r0, r2
 800b792:	4798      	blx	r3
 800b794:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3301      	adds	r3, #1
 800b79a:	2202      	movs	r2, #2
 800b79c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b79e:	e100      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a8:	f107 0208 	add.w	r2, r7, #8
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4798      	blx	r3
 800b7b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	2202      	movs	r2, #2
 800b7b8:	701a      	strb	r2, [r3, #0]
      break;
 800b7ba:	e0f2      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	885b      	ldrh	r3, [r3, #2]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b05      	cmp	r3, #5
 800b7c4:	f200 80ac 	bhi.w	800b920 <USBD_GetDescriptor+0x258>
 800b7c8:	a201      	add	r2, pc, #4	; (adr r2, 800b7d0 <USBD_GetDescriptor+0x108>)
 800b7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ce:	bf00      	nop
 800b7d0:	0800b7e9 	.word	0x0800b7e9
 800b7d4:	0800b81d 	.word	0x0800b81d
 800b7d8:	0800b851 	.word	0x0800b851
 800b7dc:	0800b885 	.word	0x0800b885
 800b7e0:	0800b8b9 	.word	0x0800b8b9
 800b7e4:	0800b8ed 	.word	0x0800b8ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00b      	beq.n	800b80c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	7c12      	ldrb	r2, [r2, #16]
 800b800:	f107 0108 	add.w	r1, r7, #8
 800b804:	4610      	mov	r0, r2
 800b806:	4798      	blx	r3
 800b808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b80a:	e091      	b.n	800b930 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 facb 	bl	800bdaa <USBD_CtlError>
            err++;
 800b814:	7afb      	ldrb	r3, [r7, #11]
 800b816:	3301      	adds	r3, #1
 800b818:	72fb      	strb	r3, [r7, #11]
          break;
 800b81a:	e089      	b.n	800b930 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00b      	beq.n	800b840 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	7c12      	ldrb	r2, [r2, #16]
 800b834:	f107 0108 	add.w	r1, r7, #8
 800b838:	4610      	mov	r0, r2
 800b83a:	4798      	blx	r3
 800b83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b83e:	e077      	b.n	800b930 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fab1 	bl	800bdaa <USBD_CtlError>
            err++;
 800b848:	7afb      	ldrb	r3, [r7, #11]
 800b84a:	3301      	adds	r3, #1
 800b84c:	72fb      	strb	r3, [r7, #11]
          break;
 800b84e:	e06f      	b.n	800b930 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00b      	beq.n	800b874 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	7c12      	ldrb	r2, [r2, #16]
 800b868:	f107 0108 	add.w	r1, r7, #8
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
 800b870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b872:	e05d      	b.n	800b930 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fa97 	bl	800bdaa <USBD_CtlError>
            err++;
 800b87c:	7afb      	ldrb	r3, [r7, #11]
 800b87e:	3301      	adds	r3, #1
 800b880:	72fb      	strb	r3, [r7, #11]
          break;
 800b882:	e055      	b.n	800b930 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	7c12      	ldrb	r2, [r2, #16]
 800b89c:	f107 0108 	add.w	r1, r7, #8
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
 800b8a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8a6:	e043      	b.n	800b930 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fa7d 	bl	800bdaa <USBD_CtlError>
            err++;
 800b8b0:	7afb      	ldrb	r3, [r7, #11]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8b6:	e03b      	b.n	800b930 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8be:	695b      	ldr	r3, [r3, #20]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00b      	beq.n	800b8dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ca:	695b      	ldr	r3, [r3, #20]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	7c12      	ldrb	r2, [r2, #16]
 800b8d0:	f107 0108 	add.w	r1, r7, #8
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	4798      	blx	r3
 800b8d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8da:	e029      	b.n	800b930 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fa63 	bl	800bdaa <USBD_CtlError>
            err++;
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ea:	e021      	b.n	800b930 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00b      	beq.n	800b910 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	7c12      	ldrb	r2, [r2, #16]
 800b904:	f107 0108 	add.w	r1, r7, #8
 800b908:	4610      	mov	r0, r2
 800b90a:	4798      	blx	r3
 800b90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b90e:	e00f      	b.n	800b930 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fa49 	bl	800bdaa <USBD_CtlError>
            err++;
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	3301      	adds	r3, #1
 800b91c:	72fb      	strb	r3, [r7, #11]
          break;
 800b91e:	e007      	b.n	800b930 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fa41 	bl	800bdaa <USBD_CtlError>
          err++;
 800b928:	7afb      	ldrb	r3, [r7, #11]
 800b92a:	3301      	adds	r3, #1
 800b92c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b92e:	bf00      	nop
      }
      break;
 800b930:	e037      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	7c1b      	ldrb	r3, [r3, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d109      	bne.n	800b94e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b942:	f107 0208 	add.w	r2, r7, #8
 800b946:	4610      	mov	r0, r2
 800b948:	4798      	blx	r3
 800b94a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b94c:	e029      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fa2a 	bl	800bdaa <USBD_CtlError>
        err++;
 800b956:	7afb      	ldrb	r3, [r7, #11]
 800b958:	3301      	adds	r3, #1
 800b95a:	72fb      	strb	r3, [r7, #11]
      break;
 800b95c:	e021      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	7c1b      	ldrb	r3, [r3, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10d      	bne.n	800b982 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96e:	f107 0208 	add.w	r2, r7, #8
 800b972:	4610      	mov	r0, r2
 800b974:	4798      	blx	r3
 800b976:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3301      	adds	r3, #1
 800b97c:	2207      	movs	r2, #7
 800b97e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b980:	e00f      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fa10 	bl	800bdaa <USBD_CtlError>
        err++;
 800b98a:	7afb      	ldrb	r3, [r7, #11]
 800b98c:	3301      	adds	r3, #1
 800b98e:	72fb      	strb	r3, [r7, #11]
      break;
 800b990:	e007      	b.n	800b9a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fa08 	bl	800bdaa <USBD_CtlError>
      err++;
 800b99a:	7afb      	ldrb	r3, [r7, #11]
 800b99c:	3301      	adds	r3, #1
 800b99e:	72fb      	strb	r3, [r7, #11]
      break;
 800b9a0:	bf00      	nop
  }

  if (err != 0U)
 800b9a2:	7afb      	ldrb	r3, [r7, #11]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d11e      	bne.n	800b9e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	88db      	ldrh	r3, [r3, #6]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d016      	beq.n	800b9de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b9b0:	893b      	ldrh	r3, [r7, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00e      	beq.n	800b9d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	88da      	ldrh	r2, [r3, #6]
 800b9ba:	893b      	ldrh	r3, [r7, #8]
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	bf28      	it	cs
 800b9c0:	4613      	movcs	r3, r2
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b9c6:	893b      	ldrh	r3, [r7, #8]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	68f9      	ldr	r1, [r7, #12]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fa5d 	bl	800be8c <USBD_CtlSendData>
 800b9d2:	e009      	b.n	800b9e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f9e7 	bl	800bdaa <USBD_CtlError>
 800b9dc:	e004      	b.n	800b9e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 faae 	bl	800bf40 <USBD_CtlSendStatus>
 800b9e4:	e000      	b.n	800b9e8 <USBD_GetDescriptor+0x320>
    return;
 800b9e6:	bf00      	nop
  }
}
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop

0800b9f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	889b      	ldrh	r3, [r3, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d131      	bne.n	800ba66 <USBD_SetAddress+0x76>
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	88db      	ldrh	r3, [r3, #6]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d12d      	bne.n	800ba66 <USBD_SetAddress+0x76>
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	885b      	ldrh	r3, [r3, #2]
 800ba0e:	2b7f      	cmp	r3, #127	; 0x7f
 800ba10:	d829      	bhi.n	800ba66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	885b      	ldrh	r3, [r3, #2]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	d104      	bne.n	800ba34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f9bc 	bl	800bdaa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba32:	e01d      	b.n	800ba70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	7bfa      	ldrb	r2, [r7, #15]
 800ba38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 ff61 	bl	800c908 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fa7a 	bl	800bf40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d004      	beq.n	800ba5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2202      	movs	r2, #2
 800ba56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba5a:	e009      	b.n	800ba70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba64:	e004      	b.n	800ba70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f99e 	bl	800bdaa <USBD_CtlError>
  }
}
 800ba6e:	bf00      	nop
 800ba70:	bf00      	nop
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	885b      	ldrh	r3, [r3, #2]
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	4b4e      	ldr	r3, [pc, #312]	; (800bbc8 <USBD_SetConfig+0x150>)
 800ba8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba90:	4b4d      	ldr	r3, [pc, #308]	; (800bbc8 <USBD_SetConfig+0x150>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d905      	bls.n	800baa4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f985 	bl	800bdaa <USBD_CtlError>
    return USBD_FAIL;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e08c      	b.n	800bbbe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b02      	cmp	r3, #2
 800baae:	d002      	beq.n	800bab6 <USBD_SetConfig+0x3e>
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d029      	beq.n	800bb08 <USBD_SetConfig+0x90>
 800bab4:	e075      	b.n	800bba2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bab6:	4b44      	ldr	r3, [pc, #272]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d020      	beq.n	800bb00 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800babe:	4b42      	ldr	r3, [pc, #264]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bac8:	4b3f      	ldr	r3, [pc, #252]	; (800bbc8 <USBD_SetConfig+0x150>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7fe ffbd 	bl	800aa4e <USBD_SetClassConfig>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d008      	beq.n	800baf0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f962 	bl	800bdaa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2202      	movs	r2, #2
 800baea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800baee:	e065      	b.n	800bbbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fa25 	bl	800bf40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2203      	movs	r2, #3
 800bafa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bafe:	e05d      	b.n	800bbbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fa1d 	bl	800bf40 <USBD_CtlSendStatus>
      break;
 800bb06:	e059      	b.n	800bbbc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb08:	4b2f      	ldr	r3, [pc, #188]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d112      	bne.n	800bb36 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb18:	4b2b      	ldr	r3, [pc, #172]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb22:	4b29      	ldr	r3, [pc, #164]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7fe ffac 	bl	800aa86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa06 	bl	800bf40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb34:	e042      	b.n	800bbbc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bb36:	4b24      	ldr	r3, [pc, #144]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d02a      	beq.n	800bb9a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7fe ff9a 	bl	800aa86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb52:	4b1d      	ldr	r3, [pc, #116]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb5c:	4b1a      	ldr	r3, [pc, #104]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	4619      	mov	r1, r3
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f7fe ff73 	bl	800aa4e <USBD_SetClassConfig>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00f      	beq.n	800bb92 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bb72:	6839      	ldr	r1, [r7, #0]
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 f918 	bl	800bdaa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	4619      	mov	r1, r3
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7fe ff7f 	bl	800aa86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb90:	e014      	b.n	800bbbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f9d4 	bl	800bf40 <USBD_CtlSendStatus>
      break;
 800bb98:	e010      	b.n	800bbbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f9d0 	bl	800bf40 <USBD_CtlSendStatus>
      break;
 800bba0:	e00c      	b.n	800bbbc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f900 	bl	800bdaa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbaa:	4b07      	ldr	r3, [pc, #28]	; (800bbc8 <USBD_SetConfig+0x150>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7fe ff68 	bl	800aa86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbba:	bf00      	nop
  }

  return ret;
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	200006b0 	.word	0x200006b0

0800bbcc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	88db      	ldrh	r3, [r3, #6]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d004      	beq.n	800bbe8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f8e2 	bl	800bdaa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bbe6:	e023      	b.n	800bc30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	dc02      	bgt.n	800bbfa <USBD_GetConfig+0x2e>
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	dc03      	bgt.n	800bc00 <USBD_GetConfig+0x34>
 800bbf8:	e015      	b.n	800bc26 <USBD_GetConfig+0x5a>
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d00b      	beq.n	800bc16 <USBD_GetConfig+0x4a>
 800bbfe:	e012      	b.n	800bc26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3308      	adds	r3, #8
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f93c 	bl	800be8c <USBD_CtlSendData>
        break;
 800bc14:	e00c      	b.n	800bc30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f934 	bl	800be8c <USBD_CtlSendData>
        break;
 800bc24:	e004      	b.n	800bc30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc26:	6839      	ldr	r1, [r7, #0]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f8be 	bl	800bdaa <USBD_CtlError>
        break;
 800bc2e:	bf00      	nop
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d81e      	bhi.n	800bc8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	88db      	ldrh	r3, [r3, #6]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d004      	beq.n	800bc62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f8a5 	bl	800bdaa <USBD_CtlError>
        break;
 800bc60:	e01a      	b.n	800bc98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d005      	beq.n	800bc7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	f043 0202 	orr.w	r2, r3, #2
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	330c      	adds	r3, #12
 800bc82:	2202      	movs	r2, #2
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f900 	bl	800be8c <USBD_CtlSendData>
      break;
 800bc8c:	e004      	b.n	800bc98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f88a 	bl	800bdaa <USBD_CtlError>
      break;
 800bc96:	bf00      	nop
  }
}
 800bc98:	bf00      	nop
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	885b      	ldrh	r3, [r3, #2]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d107      	bne.n	800bcc2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f940 	bl	800bf40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bcc0:	e013      	b.n	800bcea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	885b      	ldrh	r3, [r3, #2]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d10b      	bne.n	800bce2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	889b      	ldrh	r3, [r3, #4]
 800bcce:	0a1b      	lsrs	r3, r3, #8
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f930 	bl	800bf40 <USBD_CtlSendStatus>
}
 800bce0:	e003      	b.n	800bcea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f860 	bl	800bdaa <USBD_CtlError>
}
 800bcea:	bf00      	nop
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	3b01      	subs	r3, #1
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d80b      	bhi.n	800bd22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	885b      	ldrh	r3, [r3, #2]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d10c      	bne.n	800bd2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f910 	bl	800bf40 <USBD_CtlSendStatus>
      }
      break;
 800bd20:	e004      	b.n	800bd2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f840 	bl	800bdaa <USBD_CtlError>
      break;
 800bd2a:	e000      	b.n	800bd2e <USBD_ClrFeature+0x3c>
      break;
 800bd2c:	bf00      	nop
  }
}
 800bd2e:	bf00      	nop
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b084      	sub	sp, #16
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	781a      	ldrb	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	781a      	ldrb	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f7ff fa17 	bl	800b194 <SWAPBYTE>
 800bd66:	4603      	mov	r3, r0
 800bd68:	461a      	mov	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3301      	adds	r3, #1
 800bd72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3301      	adds	r3, #1
 800bd78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f7ff fa0a 	bl	800b194 <SWAPBYTE>
 800bd80:	4603      	mov	r3, r0
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3301      	adds	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff f9fd 	bl	800b194 <SWAPBYTE>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	80da      	strh	r2, [r3, #6]
}
 800bda2:	bf00      	nop
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdb4:	2180      	movs	r1, #128	; 0x80
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fd3c 	bl	800c834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fd38 	bl	800c834 <USBD_LL_StallEP>
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d036      	beq.n	800be50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bde6:	6938      	ldr	r0, [r7, #16]
 800bde8:	f000 f836 	bl	800be58 <USBD_GetLen>
 800bdec:	4603      	mov	r3, r0
 800bdee:	3301      	adds	r3, #1
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	4413      	add	r3, r2
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	7812      	ldrb	r2, [r2, #0]
 800be04:	701a      	strb	r2, [r3, #0]
  idx++;
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	3301      	adds	r3, #1
 800be0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	4413      	add	r3, r2
 800be12:	2203      	movs	r2, #3
 800be14:	701a      	strb	r2, [r3, #0]
  idx++;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	3301      	adds	r3, #1
 800be1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be1c:	e013      	b.n	800be46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	4413      	add	r3, r2
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	7812      	ldrb	r2, [r2, #0]
 800be28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	3301      	adds	r3, #1
 800be2e:	613b      	str	r3, [r7, #16]
    idx++;
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	3301      	adds	r3, #1
 800be34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	4413      	add	r3, r2
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
    idx++;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	3301      	adds	r3, #1
 800be44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e7      	bne.n	800be1e <USBD_GetString+0x52>
 800be4e:	e000      	b.n	800be52 <USBD_GetString+0x86>
    return;
 800be50:	bf00      	nop
  }
}
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be60:	2300      	movs	r3, #0
 800be62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be68:	e005      	b.n	800be76 <USBD_GetLen+0x1e>
  {
    len++;
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	3301      	adds	r3, #1
 800be6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	3301      	adds	r3, #1
 800be74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1f5      	bne.n	800be6a <USBD_GetLen+0x12>
  }

  return len;
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	2100      	movs	r1, #0
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f000 fd47 	bl	800c946 <USBD_LL_Transmit>

  return USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	60f8      	str	r0, [r7, #12]
 800beca:	60b9      	str	r1, [r7, #8]
 800becc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	2100      	movs	r1, #0
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 fd36 	bl	800c946 <USBD_LL_Transmit>

  return USBD_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2203      	movs	r2, #3
 800bef4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 fd3a 	bl	800c988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	60b9      	str	r1, [r7, #8]
 800bf28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	2100      	movs	r1, #0
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 fd29 	bl	800c988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2204      	movs	r2, #4
 800bf4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf50:	2300      	movs	r3, #0
 800bf52:	2200      	movs	r2, #0
 800bf54:	2100      	movs	r1, #0
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fcf5 	bl	800c946 <USBD_LL_Transmit>

  return USBD_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2205      	movs	r2, #5
 800bf72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf76:	2300      	movs	r3, #0
 800bf78:	2200      	movs	r2, #0
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fd03 	bl	800c988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf90:	2200      	movs	r2, #0
 800bf92:	4912      	ldr	r1, [pc, #72]	; (800bfdc <MX_USB_DEVICE_Init+0x50>)
 800bf94:	4812      	ldr	r0, [pc, #72]	; (800bfe0 <MX_USB_DEVICE_Init+0x54>)
 800bf96:	f7fe fcdd 	bl	800a954 <USBD_Init>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bfa0:	f7f6 ff1a 	bl	8002dd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bfa4:	490f      	ldr	r1, [pc, #60]	; (800bfe4 <MX_USB_DEVICE_Init+0x58>)
 800bfa6:	480e      	ldr	r0, [pc, #56]	; (800bfe0 <MX_USB_DEVICE_Init+0x54>)
 800bfa8:	f7fe fd04 	bl	800a9b4 <USBD_RegisterClass>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfb2:	f7f6 ff11 	bl	8002dd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bfb6:	490c      	ldr	r1, [pc, #48]	; (800bfe8 <MX_USB_DEVICE_Init+0x5c>)
 800bfb8:	4809      	ldr	r0, [pc, #36]	; (800bfe0 <MX_USB_DEVICE_Init+0x54>)
 800bfba:	f7fe fbf5 	bl	800a7a8 <USBD_CDC_RegisterInterface>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfc4:	f7f6 ff08 	bl	8002dd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfc8:	4805      	ldr	r0, [pc, #20]	; (800bfe0 <MX_USB_DEVICE_Init+0x54>)
 800bfca:	f7fe fd29 	bl	800aa20 <USBD_Start>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bfd4:	f7f6 ff00 	bl	8002dd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bfd8:	bf00      	nop
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	200000d4 	.word	0x200000d4
 800bfe0:	200006b4 	.word	0x200006b4
 800bfe4:	20000040 	.word	0x20000040
 800bfe8:	200000c0 	.word	0x200000c0

0800bfec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bff0:	2200      	movs	r2, #0
 800bff2:	4905      	ldr	r1, [pc, #20]	; (800c008 <CDC_Init_FS+0x1c>)
 800bff4:	4805      	ldr	r0, [pc, #20]	; (800c00c <CDC_Init_FS+0x20>)
 800bff6:	f7fe fbf1 	bl	800a7dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bffa:	4905      	ldr	r1, [pc, #20]	; (800c010 <CDC_Init_FS+0x24>)
 800bffc:	4803      	ldr	r0, [pc, #12]	; (800c00c <CDC_Init_FS+0x20>)
 800bffe:	f7fe fc0f 	bl	800a820 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c002:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c004:	4618      	mov	r0, r3
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20001190 	.word	0x20001190
 800c00c:	200006b4 	.word	0x200006b4
 800c010:	20000990 	.word	0x20000990

0800c014 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c014:	b480      	push	{r7}
 800c016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c018:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	6039      	str	r1, [r7, #0]
 800c02e:	71fb      	strb	r3, [r7, #7]
 800c030:	4613      	mov	r3, r2
 800c032:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c034:	79fb      	ldrb	r3, [r7, #7]
 800c036:	2b23      	cmp	r3, #35	; 0x23
 800c038:	d84a      	bhi.n	800c0d0 <CDC_Control_FS+0xac>
 800c03a:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <CDC_Control_FS+0x1c>)
 800c03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c040:	0800c0d1 	.word	0x0800c0d1
 800c044:	0800c0d1 	.word	0x0800c0d1
 800c048:	0800c0d1 	.word	0x0800c0d1
 800c04c:	0800c0d1 	.word	0x0800c0d1
 800c050:	0800c0d1 	.word	0x0800c0d1
 800c054:	0800c0d1 	.word	0x0800c0d1
 800c058:	0800c0d1 	.word	0x0800c0d1
 800c05c:	0800c0d1 	.word	0x0800c0d1
 800c060:	0800c0d1 	.word	0x0800c0d1
 800c064:	0800c0d1 	.word	0x0800c0d1
 800c068:	0800c0d1 	.word	0x0800c0d1
 800c06c:	0800c0d1 	.word	0x0800c0d1
 800c070:	0800c0d1 	.word	0x0800c0d1
 800c074:	0800c0d1 	.word	0x0800c0d1
 800c078:	0800c0d1 	.word	0x0800c0d1
 800c07c:	0800c0d1 	.word	0x0800c0d1
 800c080:	0800c0d1 	.word	0x0800c0d1
 800c084:	0800c0d1 	.word	0x0800c0d1
 800c088:	0800c0d1 	.word	0x0800c0d1
 800c08c:	0800c0d1 	.word	0x0800c0d1
 800c090:	0800c0d1 	.word	0x0800c0d1
 800c094:	0800c0d1 	.word	0x0800c0d1
 800c098:	0800c0d1 	.word	0x0800c0d1
 800c09c:	0800c0d1 	.word	0x0800c0d1
 800c0a0:	0800c0d1 	.word	0x0800c0d1
 800c0a4:	0800c0d1 	.word	0x0800c0d1
 800c0a8:	0800c0d1 	.word	0x0800c0d1
 800c0ac:	0800c0d1 	.word	0x0800c0d1
 800c0b0:	0800c0d1 	.word	0x0800c0d1
 800c0b4:	0800c0d1 	.word	0x0800c0d1
 800c0b8:	0800c0d1 	.word	0x0800c0d1
 800c0bc:	0800c0d1 	.word	0x0800c0d1
 800c0c0:	0800c0d1 	.word	0x0800c0d1
 800c0c4:	0800c0d1 	.word	0x0800c0d1
 800c0c8:	0800c0d1 	.word	0x0800c0d1
 800c0cc:	0800c0d1 	.word	0x0800c0d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c0d0:	bf00      	nop
  }

  return (USBD_OK);
 800c0d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	4815      	ldr	r0, [pc, #84]	; (800c144 <CDC_Receive_FS+0x64>)
 800c0ee:	f7fe fb97 	bl	800a820 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0f2:	4814      	ldr	r0, [pc, #80]	; (800c144 <CDC_Receive_FS+0x64>)
 800c0f4:	f7fe fbf8 	bl	800a8e8 <USBD_CDC_ReceivePacket>



	  uint8_t len=(uint8_t)*Len;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	73fb      	strb	r3, [r7, #15]
	  memset(&buffer[0],0,8);
 800c0fe:	2208      	movs	r2, #8
 800c100:	2100      	movs	r1, #0
 800c102:	4811      	ldr	r0, [pc, #68]	; (800c148 <CDC_Receive_FS+0x68>)
 800c104:	f000 fd3e 	bl	800cb84 <memset>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	461a      	mov	r2, r3
	  memcpy(&buffer[0],&Buf[0],4);
 800c10e:	4b0e      	ldr	r3, [pc, #56]	; (800c148 <CDC_Receive_FS+0x68>)
 800c110:	601a      	str	r2, [r3, #0]
	  memcpy(&buffer[1],&Buf[0]+4,4);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	3304      	adds	r3, #4
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	461a      	mov	r2, r3
 800c11a:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <CDC_Receive_FS+0x68>)
 800c11c:	605a      	str	r2, [r3, #4]
	  memset(Buf,'\0',len);
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	461a      	mov	r2, r3
 800c122:	2100      	movs	r1, #0
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fd2d 	bl	800cb84 <memset>

	  v_in=buffer[0];
 800c12a:	4b07      	ldr	r3, [pc, #28]	; (800c148 <CDC_Receive_FS+0x68>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a07      	ldr	r2, [pc, #28]	; (800c14c <CDC_Receive_FS+0x6c>)
 800c130:	6013      	str	r3, [r2, #0]
	  w_in=buffer[1];
 800c132:	4b05      	ldr	r3, [pc, #20]	; (800c148 <CDC_Receive_FS+0x68>)
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	4a06      	ldr	r2, [pc, #24]	; (800c150 <CDC_Receive_FS+0x70>)
 800c138:	6013      	str	r3, [r2, #0]

	  //setSpeed(buffer[0], buffer[1]);//buffer[0] is v_linear, buffer[1] is w_angular

	  //CDC_Transmit_FS(Buf, *Len);
	  return (USBD_OK);
 800c13a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	200006b4 	.word	0x200006b4
 800c148:	20000510 	.word	0x20000510
 800c14c:	20000610 	.word	0x20000610
 800c150:	20000614 	.word	0x20000614

0800c154 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c164:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <CDC_Transmit_FS+0x48>)
 800c166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c16a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c176:	2301      	movs	r3, #1
 800c178:	e00b      	b.n	800c192 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c17a:	887b      	ldrh	r3, [r7, #2]
 800c17c:	461a      	mov	r2, r3
 800c17e:	6879      	ldr	r1, [r7, #4]
 800c180:	4806      	ldr	r0, [pc, #24]	; (800c19c <CDC_Transmit_FS+0x48>)
 800c182:	f7fe fb2b 	bl	800a7dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c186:	4805      	ldr	r0, [pc, #20]	; (800c19c <CDC_Transmit_FS+0x48>)
 800c188:	f7fe fb68 	bl	800a85c <USBD_CDC_TransmitPacket>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]


  /* USER CODE END 7 */
  return result;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	200006b4 	.word	0x200006b4

0800c1a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c1b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	371c      	adds	r7, #28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
	...

0800c1c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	6039      	str	r1, [r7, #0]
 800c1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2212      	movs	r2, #18
 800c1d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1d6:	4b03      	ldr	r3, [pc, #12]	; (800c1e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	200000f4 	.word	0x200000f4

0800c1e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	6039      	str	r1, [r7, #0]
 800c1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1fa:	4b03      	ldr	r3, [pc, #12]	; (800c208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	20000114 	.word	0x20000114

0800c20c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	6039      	str	r1, [r7, #0]
 800c216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d105      	bne.n	800c22a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	4907      	ldr	r1, [pc, #28]	; (800c240 <USBD_FS_ProductStrDescriptor+0x34>)
 800c222:	4808      	ldr	r0, [pc, #32]	; (800c244 <USBD_FS_ProductStrDescriptor+0x38>)
 800c224:	f7ff fdd2 	bl	800bdcc <USBD_GetString>
 800c228:	e004      	b.n	800c234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	4904      	ldr	r1, [pc, #16]	; (800c240 <USBD_FS_ProductStrDescriptor+0x34>)
 800c22e:	4805      	ldr	r0, [pc, #20]	; (800c244 <USBD_FS_ProductStrDescriptor+0x38>)
 800c230:	f7ff fdcc 	bl	800bdcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c234:	4b02      	ldr	r3, [pc, #8]	; (800c240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20001990 	.word	0x20001990
 800c244:	08010700 	.word	0x08010700

0800c248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	6039      	str	r1, [r7, #0]
 800c252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	4904      	ldr	r1, [pc, #16]	; (800c268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c258:	4804      	ldr	r0, [pc, #16]	; (800c26c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c25a:	f7ff fdb7 	bl	800bdcc <USBD_GetString>
  return USBD_StrDesc;
 800c25e:	4b02      	ldr	r3, [pc, #8]	; (800c268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	20001990 	.word	0x20001990
 800c26c:	08010718 	.word	0x08010718

0800c270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	221a      	movs	r2, #26
 800c280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c282:	f000 f855 	bl	800c330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c286:	4b02      	ldr	r3, [pc, #8]	; (800c290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	20000118 	.word	0x20000118

0800c294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	4603      	mov	r3, r0
 800c29c:	6039      	str	r1, [r7, #0]
 800c29e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2a0:	79fb      	ldrb	r3, [r7, #7]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d105      	bne.n	800c2b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	4907      	ldr	r1, [pc, #28]	; (800c2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2aa:	4808      	ldr	r0, [pc, #32]	; (800c2cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2ac:	f7ff fd8e 	bl	800bdcc <USBD_GetString>
 800c2b0:	e004      	b.n	800c2bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	4904      	ldr	r1, [pc, #16]	; (800c2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2b6:	4805      	ldr	r0, [pc, #20]	; (800c2cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2b8:	f7ff fd88 	bl	800bdcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2bc:	4b02      	ldr	r3, [pc, #8]	; (800c2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20001990 	.word	0x20001990
 800c2cc:	0801072c 	.word	0x0801072c

0800c2d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d105      	bne.n	800c2ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	4907      	ldr	r1, [pc, #28]	; (800c304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2e6:	4808      	ldr	r0, [pc, #32]	; (800c308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2e8:	f7ff fd70 	bl	800bdcc <USBD_GetString>
 800c2ec:	e004      	b.n	800c2f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	4904      	ldr	r1, [pc, #16]	; (800c304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2f2:	4805      	ldr	r0, [pc, #20]	; (800c308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2f4:	f7ff fd6a 	bl	800bdcc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20001990 	.word	0x20001990
 800c308:	08010738 	.word	0x08010738

0800c30c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	4603      	mov	r3, r0
 800c314:	6039      	str	r1, [r7, #0]
 800c316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	220c      	movs	r2, #12
 800c31c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c31e:	4b03      	ldr	r3, [pc, #12]	; (800c32c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	20000108 	.word	0x20000108

0800c330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c336:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <Get_SerialNum+0x44>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c33c:	4b0e      	ldr	r3, [pc, #56]	; (800c378 <Get_SerialNum+0x48>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c342:	4b0e      	ldr	r3, [pc, #56]	; (800c37c <Get_SerialNum+0x4c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4413      	add	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d009      	beq.n	800c36a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c356:	2208      	movs	r2, #8
 800c358:	4909      	ldr	r1, [pc, #36]	; (800c380 <Get_SerialNum+0x50>)
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f814 	bl	800c388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c360:	2204      	movs	r2, #4
 800c362:	4908      	ldr	r1, [pc, #32]	; (800c384 <Get_SerialNum+0x54>)
 800c364:	68b8      	ldr	r0, [r7, #8]
 800c366:	f000 f80f 	bl	800c388 <IntToUnicode>
  }
}
 800c36a:	bf00      	nop
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	1fff7a10 	.word	0x1fff7a10
 800c378:	1fff7a14 	.word	0x1fff7a14
 800c37c:	1fff7a18 	.word	0x1fff7a18
 800c380:	2000011a 	.word	0x2000011a
 800c384:	2000012a 	.word	0x2000012a

0800c388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c388:	b480      	push	{r7}
 800c38a:	b087      	sub	sp, #28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c39a:	2300      	movs	r3, #0
 800c39c:	75fb      	strb	r3, [r7, #23]
 800c39e:	e027      	b.n	800c3f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	0f1b      	lsrs	r3, r3, #28
 800c3a4:	2b09      	cmp	r3, #9
 800c3a6:	d80b      	bhi.n	800c3c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	0f1b      	lsrs	r3, r3, #28
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	440b      	add	r3, r1
 800c3b8:	3230      	adds	r2, #48	; 0x30
 800c3ba:	b2d2      	uxtb	r2, r2
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	e00a      	b.n	800c3d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	0f1b      	lsrs	r3, r3, #28
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	440b      	add	r3, r1
 800c3d0:	3237      	adds	r2, #55	; 0x37
 800c3d2:	b2d2      	uxtb	r2, r2
 800c3d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	011b      	lsls	r3, r3, #4
 800c3da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3dc:	7dfb      	ldrb	r3, [r7, #23]
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	75fb      	strb	r3, [r7, #23]
 800c3f0:	7dfa      	ldrb	r2, [r7, #23]
 800c3f2:	79fb      	ldrb	r3, [r7, #7]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d3d3      	bcc.n	800c3a0 <IntToUnicode+0x18>
  }
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
	...

0800c408 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b0a0      	sub	sp, #128	; 0x80
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c410:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	605a      	str	r2, [r3, #4]
 800c41a:	609a      	str	r2, [r3, #8]
 800c41c:	60da      	str	r2, [r3, #12]
 800c41e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c420:	f107 0310 	add.w	r3, r7, #16
 800c424:	225c      	movs	r2, #92	; 0x5c
 800c426:	2100      	movs	r1, #0
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 fbab 	bl	800cb84 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c436:	d156      	bne.n	800c4e6 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c43c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c43e:	2300      	movs	r3, #0
 800c440:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c442:	f107 0310 	add.w	r3, r7, #16
 800c446:	4618      	mov	r0, r3
 800c448:	f7f9 fbd2 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c452:	f7f6 fcc1 	bl	8002dd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c456:	2300      	movs	r3, #0
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	4b25      	ldr	r3, [pc, #148]	; (800c4f0 <HAL_PCD_MspInit+0xe8>)
 800c45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45e:	4a24      	ldr	r2, [pc, #144]	; (800c4f0 <HAL_PCD_MspInit+0xe8>)
 800c460:	f043 0301 	orr.w	r3, r3, #1
 800c464:	6313      	str	r3, [r2, #48]	; 0x30
 800c466:	4b22      	ldr	r3, [pc, #136]	; (800c4f0 <HAL_PCD_MspInit+0xe8>)
 800c468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800c472:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c476:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c478:	2302      	movs	r3, #2
 800c47a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c47c:	2300      	movs	r3, #0
 800c47e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c480:	2303      	movs	r3, #3
 800c482:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c484:	230a      	movs	r3, #10
 800c486:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c488:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c48c:	4619      	mov	r1, r3
 800c48e:	4819      	ldr	r0, [pc, #100]	; (800c4f4 <HAL_PCD_MspInit+0xec>)
 800c490:	f7f7 fcc0 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c494:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c498:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c49a:	2300      	movs	r3, #0
 800c49c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c4a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4812      	ldr	r0, [pc, #72]	; (800c4f4 <HAL_PCD_MspInit+0xec>)
 800c4aa:	f7f7 fcb3 	bl	8003e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4ae:	4b10      	ldr	r3, [pc, #64]	; (800c4f0 <HAL_PCD_MspInit+0xe8>)
 800c4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b2:	4a0f      	ldr	r2, [pc, #60]	; (800c4f0 <HAL_PCD_MspInit+0xe8>)
 800c4b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b8:	6353      	str	r3, [r2, #52]	; 0x34
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	60bb      	str	r3, [r7, #8]
 800c4be:	4b0c      	ldr	r3, [pc, #48]	; (800c4f0 <HAL_PCD_MspInit+0xe8>)
 800c4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c2:	4a0b      	ldr	r2, [pc, #44]	; (800c4f0 <HAL_PCD_MspInit+0xe8>)
 800c4c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4c8:	6453      	str	r3, [r2, #68]	; 0x44
 800c4ca:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <HAL_PCD_MspInit+0xe8>)
 800c4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4d2:	60bb      	str	r3, [r7, #8]
 800c4d4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	2100      	movs	r1, #0
 800c4da:	2043      	movs	r0, #67	; 0x43
 800c4dc:	f7f7 fbd1 	bl	8003c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4e0:	2043      	movs	r0, #67	; 0x43
 800c4e2:	f7f7 fbea 	bl	8003cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c4e6:	bf00      	nop
 800c4e8:	3780      	adds	r7, #128	; 0x80
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	40023800 	.word	0x40023800
 800c4f4:	40020000 	.word	0x40020000

0800c4f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c50c:	4619      	mov	r1, r3
 800c50e:	4610      	mov	r0, r2
 800c510:	f7fe fad3 	bl	800aaba <USBD_LL_SetupStage>
}
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c52e:	78fa      	ldrb	r2, [r7, #3]
 800c530:	6879      	ldr	r1, [r7, #4]
 800c532:	4613      	mov	r3, r2
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	4413      	add	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	440b      	add	r3, r1
 800c53c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	78fb      	ldrb	r3, [r7, #3]
 800c544:	4619      	mov	r1, r3
 800c546:	f7fe fb0d 	bl	800ab64 <USBD_LL_DataOutStage>
}
 800c54a:	bf00      	nop
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c564:	78fa      	ldrb	r2, [r7, #3]
 800c566:	6879      	ldr	r1, [r7, #4]
 800c568:	4613      	mov	r3, r2
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	4413      	add	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	440b      	add	r3, r1
 800c572:	334c      	adds	r3, #76	; 0x4c
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	78fb      	ldrb	r3, [r7, #3]
 800c578:	4619      	mov	r1, r3
 800c57a:	f7fe fba6 	bl	800acca <USBD_LL_DataInStage>
}
 800c57e:	bf00      	nop
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c594:	4618      	mov	r0, r3
 800c596:	f7fe fcda 	bl	800af4e <USBD_LL_SOF>
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b084      	sub	sp, #16
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]
 800c5ba:	e008      	b.n	800c5ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	d102      	bne.n	800c5ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	73fb      	strb	r3, [r7, #15]
 800c5c8:	e001      	b.n	800c5ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c5ca:	f7f6 fc05 	bl	8002dd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5d4:	7bfa      	ldrb	r2, [r7, #15]
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fe fc7a 	bl	800aed2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fe fc22 	bl	800ae2e <USBD_LL_Reset>
}
 800c5ea:	bf00      	nop
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe fc75 	bl	800aef2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	6812      	ldr	r2, [r2, #0]
 800c616:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c61a:	f043 0301 	orr.w	r3, r3, #1
 800c61e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d005      	beq.n	800c634 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c628:	4b04      	ldr	r3, [pc, #16]	; (800c63c <HAL_PCD_SuspendCallback+0x48>)
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	4a03      	ldr	r2, [pc, #12]	; (800c63c <HAL_PCD_SuspendCallback+0x48>)
 800c62e:	f043 0306 	orr.w	r3, r3, #6
 800c632:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c634:	bf00      	nop
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	e000ed00 	.word	0xe000ed00

0800c640 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fe fc65 	bl	800af1e <USBD_LL_Resume>
}
 800c654:	bf00      	nop
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	460b      	mov	r3, r1
 800c666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c66e:	78fa      	ldrb	r2, [r7, #3]
 800c670:	4611      	mov	r1, r2
 800c672:	4618      	mov	r0, r3
 800c674:	f7fe fcbd 	bl	800aff2 <USBD_LL_IsoOUTIncomplete>
}
 800c678:	bf00      	nop
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c692:	78fa      	ldrb	r2, [r7, #3]
 800c694:	4611      	mov	r1, r2
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fc79 	bl	800af8e <USBD_LL_IsoINIncomplete>
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fe fccf 	bl	800b056 <USBD_LL_DevConnected>
}
 800c6b8:	bf00      	nop
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fe fccc 	bl	800b06c <USBD_LL_DevDisconnected>
}
 800c6d4:	bf00      	nop
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d13c      	bne.n	800c766 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c6ec:	4a20      	ldr	r2, [pc, #128]	; (800c770 <USBD_LL_Init+0x94>)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a1e      	ldr	r2, [pc, #120]	; (800c770 <USBD_LL_Init+0x94>)
 800c6f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6fc:	4b1c      	ldr	r3, [pc, #112]	; (800c770 <USBD_LL_Init+0x94>)
 800c6fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c702:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c704:	4b1a      	ldr	r3, [pc, #104]	; (800c770 <USBD_LL_Init+0x94>)
 800c706:	2206      	movs	r2, #6
 800c708:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c70a:	4b19      	ldr	r3, [pc, #100]	; (800c770 <USBD_LL_Init+0x94>)
 800c70c:	2202      	movs	r2, #2
 800c70e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c710:	4b17      	ldr	r3, [pc, #92]	; (800c770 <USBD_LL_Init+0x94>)
 800c712:	2200      	movs	r2, #0
 800c714:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c716:	4b16      	ldr	r3, [pc, #88]	; (800c770 <USBD_LL_Init+0x94>)
 800c718:	2202      	movs	r2, #2
 800c71a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c71c:	4b14      	ldr	r3, [pc, #80]	; (800c770 <USBD_LL_Init+0x94>)
 800c71e:	2200      	movs	r2, #0
 800c720:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c722:	4b13      	ldr	r3, [pc, #76]	; (800c770 <USBD_LL_Init+0x94>)
 800c724:	2200      	movs	r2, #0
 800c726:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c728:	4b11      	ldr	r3, [pc, #68]	; (800c770 <USBD_LL_Init+0x94>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c72e:	4b10      	ldr	r3, [pc, #64]	; (800c770 <USBD_LL_Init+0x94>)
 800c730:	2200      	movs	r2, #0
 800c732:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c734:	4b0e      	ldr	r3, [pc, #56]	; (800c770 <USBD_LL_Init+0x94>)
 800c736:	2200      	movs	r2, #0
 800c738:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c73a:	480d      	ldr	r0, [pc, #52]	; (800c770 <USBD_LL_Init+0x94>)
 800c73c:	f7f7 fe74 	bl	8004428 <HAL_PCD_Init>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c746:	f7f6 fb47 	bl	8002dd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c74a:	2180      	movs	r1, #128	; 0x80
 800c74c:	4808      	ldr	r0, [pc, #32]	; (800c770 <USBD_LL_Init+0x94>)
 800c74e:	f7f9 f900 	bl	8005952 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c752:	2240      	movs	r2, #64	; 0x40
 800c754:	2100      	movs	r1, #0
 800c756:	4806      	ldr	r0, [pc, #24]	; (800c770 <USBD_LL_Init+0x94>)
 800c758:	f7f9 f8b4 	bl	80058c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c75c:	2280      	movs	r2, #128	; 0x80
 800c75e:	2101      	movs	r1, #1
 800c760:	4803      	ldr	r0, [pc, #12]	; (800c770 <USBD_LL_Init+0x94>)
 800c762:	f7f9 f8af 	bl	80058c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	20001b90 	.word	0x20001b90

0800c774 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7f7 ff70 	bl	8004670 <HAL_PCD_Start>
 800c790:	4603      	mov	r3, r0
 800c792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	4618      	mov	r0, r3
 800c798:	f000 f990 	bl	800cabc <USBD_Get_USB_Status>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	4608      	mov	r0, r1
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	70fb      	strb	r3, [r7, #3]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70bb      	strb	r3, [r7, #2]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c7d2:	78bb      	ldrb	r3, [r7, #2]
 800c7d4:	883a      	ldrh	r2, [r7, #0]
 800c7d6:	78f9      	ldrb	r1, [r7, #3]
 800c7d8:	f7f8 fc6e 	bl	80050b8 <HAL_PCD_EP_Open>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 f96a 	bl	800cabc <USBD_Get_USB_Status>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	460b      	mov	r3, r1
 800c800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c810:	78fa      	ldrb	r2, [r7, #3]
 800c812:	4611      	mov	r1, r2
 800c814:	4618      	mov	r0, r3
 800c816:	f7f8 fcb7 	bl	8005188 <HAL_PCD_EP_Close>
 800c81a:	4603      	mov	r3, r0
 800c81c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
 800c820:	4618      	mov	r0, r3
 800c822:	f000 f94b 	bl	800cabc <USBD_Get_USB_Status>
 800c826:	4603      	mov	r3, r0
 800c828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	460b      	mov	r3, r1
 800c83e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c840:	2300      	movs	r3, #0
 800c842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c844:	2300      	movs	r3, #0
 800c846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c84e:	78fa      	ldrb	r2, [r7, #3]
 800c850:	4611      	mov	r1, r2
 800c852:	4618      	mov	r0, r3
 800c854:	f7f8 fd8f 	bl	8005376 <HAL_PCD_EP_SetStall>
 800c858:	4603      	mov	r3, r0
 800c85a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 f92c 	bl	800cabc <USBD_Get_USB_Status>
 800c864:	4603      	mov	r3, r0
 800c866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c868:	7bbb      	ldrb	r3, [r7, #14]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	460b      	mov	r3, r1
 800c87c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c88c:	78fa      	ldrb	r2, [r7, #3]
 800c88e:	4611      	mov	r1, r2
 800c890:	4618      	mov	r0, r3
 800c892:	f7f8 fdd4 	bl	800543e <HAL_PCD_EP_ClrStall>
 800c896:	4603      	mov	r3, r0
 800c898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c89a:	7bfb      	ldrb	r3, [r7, #15]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 f90d 	bl	800cabc <USBD_Get_USB_Status>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	da0b      	bge.n	800c8e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c8cc:	78fb      	ldrb	r3, [r7, #3]
 800c8ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8d2:	68f9      	ldr	r1, [r7, #12]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	00db      	lsls	r3, r3, #3
 800c8d8:	4413      	add	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	440b      	add	r3, r1
 800c8de:	333e      	adds	r3, #62	; 0x3e
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	e00b      	b.n	800c8fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8e4:	78fb      	ldrb	r3, [r7, #3]
 800c8e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8ea:	68f9      	ldr	r1, [r7, #12]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	00db      	lsls	r3, r3, #3
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	440b      	add	r3, r1
 800c8f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c8fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c914:	2300      	movs	r3, #0
 800c916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c922:	78fa      	ldrb	r2, [r7, #3]
 800c924:	4611      	mov	r1, r2
 800c926:	4618      	mov	r0, r3
 800c928:	f7f8 fba1 	bl	800506e <HAL_PCD_SetAddress>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c930:	7bfb      	ldrb	r3, [r7, #15]
 800c932:	4618      	mov	r0, r3
 800c934:	f000 f8c2 	bl	800cabc <USBD_Get_USB_Status>
 800c938:	4603      	mov	r3, r0
 800c93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b086      	sub	sp, #24
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]
 800c952:	460b      	mov	r3, r1
 800c954:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c964:	7af9      	ldrb	r1, [r7, #11]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	f7f8 fcba 	bl	80052e2 <HAL_PCD_EP_Transmit>
 800c96e:	4603      	mov	r3, r0
 800c970:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	4618      	mov	r0, r3
 800c976:	f000 f8a1 	bl	800cabc <USBD_Get_USB_Status>
 800c97a:	4603      	mov	r3, r0
 800c97c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c97e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	607a      	str	r2, [r7, #4]
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	460b      	mov	r3, r1
 800c996:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c998:	2300      	movs	r3, #0
 800c99a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9a6:	7af9      	ldrb	r1, [r7, #11]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	f7f8 fc36 	bl	800521c <HAL_PCD_EP_Receive>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 f880 	bl	800cabc <USBD_Get_USB_Status>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3718      	adds	r7, #24
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c9dc:	78fa      	ldrb	r2, [r7, #3]
 800c9de:	4611      	mov	r1, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7f8 fc66 	bl	80052b2 <HAL_PCD_EP_GetRxCount>
 800c9e6:	4603      	mov	r3, r0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <HAL_PCDEx_LPM_Callback+0x18>
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d01f      	beq.n	800ca46 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ca06:	e03b      	b.n	800ca80 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a1b      	ldr	r3, [r3, #32]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d007      	beq.n	800ca20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800ca10:	f7f4 fcf0 	bl	80013f4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca14:	4b1c      	ldr	r3, [pc, #112]	; (800ca88 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	4a1b      	ldr	r2, [pc, #108]	; (800ca88 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca1a:	f023 0306 	bic.w	r3, r3, #6
 800ca1e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	6812      	ldr	r2, [r2, #0]
 800ca2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca32:	f023 0301 	bic.w	r3, r3, #1
 800ca36:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe fa6d 	bl	800af1e <USBD_LL_Resume>
    break;
 800ca44:	e01c      	b.n	800ca80 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	6812      	ldr	r2, [r2, #0]
 800ca54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca58:	f043 0301 	orr.w	r3, r3, #1
 800ca5c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fe fa44 	bl	800aef2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d005      	beq.n	800ca7e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca72:	4b05      	ldr	r3, [pc, #20]	; (800ca88 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	4a04      	ldr	r2, [pc, #16]	; (800ca88 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca78:	f043 0306 	orr.w	r3, r3, #6
 800ca7c:	6113      	str	r3, [r2, #16]
    break;
 800ca7e:	bf00      	nop
}
 800ca80:	bf00      	nop
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	e000ed00 	.word	0xe000ed00

0800ca8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca94:	4b03      	ldr	r3, [pc, #12]	; (800caa4 <USBD_static_malloc+0x18>)
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	2000209c 	.word	0x2000209c

0800caa8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]

}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	4603      	mov	r3, r0
 800cac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800caca:	79fb      	ldrb	r3, [r7, #7]
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d817      	bhi.n	800cb00 <USBD_Get_USB_Status+0x44>
 800cad0:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <USBD_Get_USB_Status+0x1c>)
 800cad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad6:	bf00      	nop
 800cad8:	0800cae9 	.word	0x0800cae9
 800cadc:	0800caef 	.word	0x0800caef
 800cae0:	0800caf5 	.word	0x0800caf5
 800cae4:	0800cafb 	.word	0x0800cafb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	73fb      	strb	r3, [r7, #15]
    break;
 800caec:	e00b      	b.n	800cb06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800caee:	2303      	movs	r3, #3
 800caf0:	73fb      	strb	r3, [r7, #15]
    break;
 800caf2:	e008      	b.n	800cb06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800caf4:	2301      	movs	r3, #1
 800caf6:	73fb      	strb	r3, [r7, #15]
    break;
 800caf8:	e005      	b.n	800cb06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cafa:	2303      	movs	r3, #3
 800cafc:	73fb      	strb	r3, [r7, #15]
    break;
 800cafe:	e002      	b.n	800cb06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb00:	2303      	movs	r3, #3
 800cb02:	73fb      	strb	r3, [r7, #15]
    break;
 800cb04:	bf00      	nop
  }
  return usb_status;
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <__errno>:
 800cb14:	4b01      	ldr	r3, [pc, #4]	; (800cb1c <__errno+0x8>)
 800cb16:	6818      	ldr	r0, [r3, #0]
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	20000134 	.word	0x20000134

0800cb20 <__libc_init_array>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	4d0d      	ldr	r5, [pc, #52]	; (800cb58 <__libc_init_array+0x38>)
 800cb24:	4c0d      	ldr	r4, [pc, #52]	; (800cb5c <__libc_init_array+0x3c>)
 800cb26:	1b64      	subs	r4, r4, r5
 800cb28:	10a4      	asrs	r4, r4, #2
 800cb2a:	2600      	movs	r6, #0
 800cb2c:	42a6      	cmp	r6, r4
 800cb2e:	d109      	bne.n	800cb44 <__libc_init_array+0x24>
 800cb30:	4d0b      	ldr	r5, [pc, #44]	; (800cb60 <__libc_init_array+0x40>)
 800cb32:	4c0c      	ldr	r4, [pc, #48]	; (800cb64 <__libc_init_array+0x44>)
 800cb34:	f003 fdd6 	bl	80106e4 <_init>
 800cb38:	1b64      	subs	r4, r4, r5
 800cb3a:	10a4      	asrs	r4, r4, #2
 800cb3c:	2600      	movs	r6, #0
 800cb3e:	42a6      	cmp	r6, r4
 800cb40:	d105      	bne.n	800cb4e <__libc_init_array+0x2e>
 800cb42:	bd70      	pop	{r4, r5, r6, pc}
 800cb44:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb48:	4798      	blx	r3
 800cb4a:	3601      	adds	r6, #1
 800cb4c:	e7ee      	b.n	800cb2c <__libc_init_array+0xc>
 800cb4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb52:	4798      	blx	r3
 800cb54:	3601      	adds	r6, #1
 800cb56:	e7f2      	b.n	800cb3e <__libc_init_array+0x1e>
 800cb58:	08010d20 	.word	0x08010d20
 800cb5c:	08010d20 	.word	0x08010d20
 800cb60:	08010d20 	.word	0x08010d20
 800cb64:	08010d24 	.word	0x08010d24

0800cb68 <memcpy>:
 800cb68:	440a      	add	r2, r1
 800cb6a:	4291      	cmp	r1, r2
 800cb6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cb70:	d100      	bne.n	800cb74 <memcpy+0xc>
 800cb72:	4770      	bx	lr
 800cb74:	b510      	push	{r4, lr}
 800cb76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb7e:	4291      	cmp	r1, r2
 800cb80:	d1f9      	bne.n	800cb76 <memcpy+0xe>
 800cb82:	bd10      	pop	{r4, pc}

0800cb84 <memset>:
 800cb84:	4402      	add	r2, r0
 800cb86:	4603      	mov	r3, r0
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d100      	bne.n	800cb8e <memset+0xa>
 800cb8c:	4770      	bx	lr
 800cb8e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb92:	e7f9      	b.n	800cb88 <memset+0x4>

0800cb94 <__cvt>:
 800cb94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb98:	ec55 4b10 	vmov	r4, r5, d0
 800cb9c:	2d00      	cmp	r5, #0
 800cb9e:	460e      	mov	r6, r1
 800cba0:	4619      	mov	r1, r3
 800cba2:	462b      	mov	r3, r5
 800cba4:	bfbb      	ittet	lt
 800cba6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cbaa:	461d      	movlt	r5, r3
 800cbac:	2300      	movge	r3, #0
 800cbae:	232d      	movlt	r3, #45	; 0x2d
 800cbb0:	700b      	strb	r3, [r1, #0]
 800cbb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cbb8:	4691      	mov	r9, r2
 800cbba:	f023 0820 	bic.w	r8, r3, #32
 800cbbe:	bfbc      	itt	lt
 800cbc0:	4622      	movlt	r2, r4
 800cbc2:	4614      	movlt	r4, r2
 800cbc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cbc8:	d005      	beq.n	800cbd6 <__cvt+0x42>
 800cbca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cbce:	d100      	bne.n	800cbd2 <__cvt+0x3e>
 800cbd0:	3601      	adds	r6, #1
 800cbd2:	2102      	movs	r1, #2
 800cbd4:	e000      	b.n	800cbd8 <__cvt+0x44>
 800cbd6:	2103      	movs	r1, #3
 800cbd8:	ab03      	add	r3, sp, #12
 800cbda:	9301      	str	r3, [sp, #4]
 800cbdc:	ab02      	add	r3, sp, #8
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	ec45 4b10 	vmov	d0, r4, r5
 800cbe4:	4653      	mov	r3, sl
 800cbe6:	4632      	mov	r2, r6
 800cbe8:	f000 fcca 	bl	800d580 <_dtoa_r>
 800cbec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cbf0:	4607      	mov	r7, r0
 800cbf2:	d102      	bne.n	800cbfa <__cvt+0x66>
 800cbf4:	f019 0f01 	tst.w	r9, #1
 800cbf8:	d022      	beq.n	800cc40 <__cvt+0xac>
 800cbfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cbfe:	eb07 0906 	add.w	r9, r7, r6
 800cc02:	d110      	bne.n	800cc26 <__cvt+0x92>
 800cc04:	783b      	ldrb	r3, [r7, #0]
 800cc06:	2b30      	cmp	r3, #48	; 0x30
 800cc08:	d10a      	bne.n	800cc20 <__cvt+0x8c>
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	4620      	mov	r0, r4
 800cc10:	4629      	mov	r1, r5
 800cc12:	f7f3 ff79 	bl	8000b08 <__aeabi_dcmpeq>
 800cc16:	b918      	cbnz	r0, 800cc20 <__cvt+0x8c>
 800cc18:	f1c6 0601 	rsb	r6, r6, #1
 800cc1c:	f8ca 6000 	str.w	r6, [sl]
 800cc20:	f8da 3000 	ldr.w	r3, [sl]
 800cc24:	4499      	add	r9, r3
 800cc26:	2200      	movs	r2, #0
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	f7f3 ff6b 	bl	8000b08 <__aeabi_dcmpeq>
 800cc32:	b108      	cbz	r0, 800cc38 <__cvt+0xa4>
 800cc34:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc38:	2230      	movs	r2, #48	; 0x30
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	454b      	cmp	r3, r9
 800cc3e:	d307      	bcc.n	800cc50 <__cvt+0xbc>
 800cc40:	9b03      	ldr	r3, [sp, #12]
 800cc42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc44:	1bdb      	subs	r3, r3, r7
 800cc46:	4638      	mov	r0, r7
 800cc48:	6013      	str	r3, [r2, #0]
 800cc4a:	b004      	add	sp, #16
 800cc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc50:	1c59      	adds	r1, r3, #1
 800cc52:	9103      	str	r1, [sp, #12]
 800cc54:	701a      	strb	r2, [r3, #0]
 800cc56:	e7f0      	b.n	800cc3a <__cvt+0xa6>

0800cc58 <__exponent>:
 800cc58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2900      	cmp	r1, #0
 800cc5e:	bfb8      	it	lt
 800cc60:	4249      	neglt	r1, r1
 800cc62:	f803 2b02 	strb.w	r2, [r3], #2
 800cc66:	bfb4      	ite	lt
 800cc68:	222d      	movlt	r2, #45	; 0x2d
 800cc6a:	222b      	movge	r2, #43	; 0x2b
 800cc6c:	2909      	cmp	r1, #9
 800cc6e:	7042      	strb	r2, [r0, #1]
 800cc70:	dd2a      	ble.n	800ccc8 <__exponent+0x70>
 800cc72:	f10d 0407 	add.w	r4, sp, #7
 800cc76:	46a4      	mov	ip, r4
 800cc78:	270a      	movs	r7, #10
 800cc7a:	46a6      	mov	lr, r4
 800cc7c:	460a      	mov	r2, r1
 800cc7e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cc82:	fb07 1516 	mls	r5, r7, r6, r1
 800cc86:	3530      	adds	r5, #48	; 0x30
 800cc88:	2a63      	cmp	r2, #99	; 0x63
 800cc8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cc8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cc92:	4631      	mov	r1, r6
 800cc94:	dcf1      	bgt.n	800cc7a <__exponent+0x22>
 800cc96:	3130      	adds	r1, #48	; 0x30
 800cc98:	f1ae 0502 	sub.w	r5, lr, #2
 800cc9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cca0:	1c44      	adds	r4, r0, #1
 800cca2:	4629      	mov	r1, r5
 800cca4:	4561      	cmp	r1, ip
 800cca6:	d30a      	bcc.n	800ccbe <__exponent+0x66>
 800cca8:	f10d 0209 	add.w	r2, sp, #9
 800ccac:	eba2 020e 	sub.w	r2, r2, lr
 800ccb0:	4565      	cmp	r5, ip
 800ccb2:	bf88      	it	hi
 800ccb4:	2200      	movhi	r2, #0
 800ccb6:	4413      	add	r3, r2
 800ccb8:	1a18      	subs	r0, r3, r0
 800ccba:	b003      	add	sp, #12
 800ccbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ccc6:	e7ed      	b.n	800cca4 <__exponent+0x4c>
 800ccc8:	2330      	movs	r3, #48	; 0x30
 800ccca:	3130      	adds	r1, #48	; 0x30
 800cccc:	7083      	strb	r3, [r0, #2]
 800ccce:	70c1      	strb	r1, [r0, #3]
 800ccd0:	1d03      	adds	r3, r0, #4
 800ccd2:	e7f1      	b.n	800ccb8 <__exponent+0x60>

0800ccd4 <_printf_float>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	ed2d 8b02 	vpush	{d8}
 800ccdc:	b08d      	sub	sp, #52	; 0x34
 800ccde:	460c      	mov	r4, r1
 800cce0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cce4:	4616      	mov	r6, r2
 800cce6:	461f      	mov	r7, r3
 800cce8:	4605      	mov	r5, r0
 800ccea:	f001 fa37 	bl	800e15c <_localeconv_r>
 800ccee:	f8d0 a000 	ldr.w	sl, [r0]
 800ccf2:	4650      	mov	r0, sl
 800ccf4:	f7f3 fa8c 	bl	8000210 <strlen>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	930a      	str	r3, [sp, #40]	; 0x28
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	9305      	str	r3, [sp, #20]
 800cd00:	f8d8 3000 	ldr.w	r3, [r8]
 800cd04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cd08:	3307      	adds	r3, #7
 800cd0a:	f023 0307 	bic.w	r3, r3, #7
 800cd0e:	f103 0208 	add.w	r2, r3, #8
 800cd12:	f8c8 2000 	str.w	r2, [r8]
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cd22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd26:	9307      	str	r3, [sp, #28]
 800cd28:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd2c:	ee08 0a10 	vmov	s16, r0
 800cd30:	4b9f      	ldr	r3, [pc, #636]	; (800cfb0 <_printf_float+0x2dc>)
 800cd32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd3a:	f7f3 ff17 	bl	8000b6c <__aeabi_dcmpun>
 800cd3e:	bb88      	cbnz	r0, 800cda4 <_printf_float+0xd0>
 800cd40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd44:	4b9a      	ldr	r3, [pc, #616]	; (800cfb0 <_printf_float+0x2dc>)
 800cd46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd4a:	f7f3 fef1 	bl	8000b30 <__aeabi_dcmple>
 800cd4e:	bb48      	cbnz	r0, 800cda4 <_printf_float+0xd0>
 800cd50:	2200      	movs	r2, #0
 800cd52:	2300      	movs	r3, #0
 800cd54:	4640      	mov	r0, r8
 800cd56:	4649      	mov	r1, r9
 800cd58:	f7f3 fee0 	bl	8000b1c <__aeabi_dcmplt>
 800cd5c:	b110      	cbz	r0, 800cd64 <_printf_float+0x90>
 800cd5e:	232d      	movs	r3, #45	; 0x2d
 800cd60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd64:	4b93      	ldr	r3, [pc, #588]	; (800cfb4 <_printf_float+0x2e0>)
 800cd66:	4894      	ldr	r0, [pc, #592]	; (800cfb8 <_printf_float+0x2e4>)
 800cd68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cd6c:	bf94      	ite	ls
 800cd6e:	4698      	movls	r8, r3
 800cd70:	4680      	movhi	r8, r0
 800cd72:	2303      	movs	r3, #3
 800cd74:	6123      	str	r3, [r4, #16]
 800cd76:	9b05      	ldr	r3, [sp, #20]
 800cd78:	f023 0204 	bic.w	r2, r3, #4
 800cd7c:	6022      	str	r2, [r4, #0]
 800cd7e:	f04f 0900 	mov.w	r9, #0
 800cd82:	9700      	str	r7, [sp, #0]
 800cd84:	4633      	mov	r3, r6
 800cd86:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	f000 f9d8 	bl	800d140 <_printf_common>
 800cd90:	3001      	adds	r0, #1
 800cd92:	f040 8090 	bne.w	800ceb6 <_printf_float+0x1e2>
 800cd96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd9a:	b00d      	add	sp, #52	; 0x34
 800cd9c:	ecbd 8b02 	vpop	{d8}
 800cda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda4:	4642      	mov	r2, r8
 800cda6:	464b      	mov	r3, r9
 800cda8:	4640      	mov	r0, r8
 800cdaa:	4649      	mov	r1, r9
 800cdac:	f7f3 fede 	bl	8000b6c <__aeabi_dcmpun>
 800cdb0:	b140      	cbz	r0, 800cdc4 <_printf_float+0xf0>
 800cdb2:	464b      	mov	r3, r9
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	bfbc      	itt	lt
 800cdb8:	232d      	movlt	r3, #45	; 0x2d
 800cdba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cdbe:	487f      	ldr	r0, [pc, #508]	; (800cfbc <_printf_float+0x2e8>)
 800cdc0:	4b7f      	ldr	r3, [pc, #508]	; (800cfc0 <_printf_float+0x2ec>)
 800cdc2:	e7d1      	b.n	800cd68 <_printf_float+0x94>
 800cdc4:	6863      	ldr	r3, [r4, #4]
 800cdc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cdca:	9206      	str	r2, [sp, #24]
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	d13f      	bne.n	800ce50 <_printf_float+0x17c>
 800cdd0:	2306      	movs	r3, #6
 800cdd2:	6063      	str	r3, [r4, #4]
 800cdd4:	9b05      	ldr	r3, [sp, #20]
 800cdd6:	6861      	ldr	r1, [r4, #4]
 800cdd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cddc:	2300      	movs	r3, #0
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	ab0a      	add	r3, sp, #40	; 0x28
 800cde2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cde6:	ab09      	add	r3, sp, #36	; 0x24
 800cde8:	ec49 8b10 	vmov	d0, r8, r9
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	6022      	str	r2, [r4, #0]
 800cdf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f7ff fecd 	bl	800cb94 <__cvt>
 800cdfa:	9b06      	ldr	r3, [sp, #24]
 800cdfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdfe:	2b47      	cmp	r3, #71	; 0x47
 800ce00:	4680      	mov	r8, r0
 800ce02:	d108      	bne.n	800ce16 <_printf_float+0x142>
 800ce04:	1cc8      	adds	r0, r1, #3
 800ce06:	db02      	blt.n	800ce0e <_printf_float+0x13a>
 800ce08:	6863      	ldr	r3, [r4, #4]
 800ce0a:	4299      	cmp	r1, r3
 800ce0c:	dd41      	ble.n	800ce92 <_printf_float+0x1be>
 800ce0e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ce12:	fa5f fb8b 	uxtb.w	fp, fp
 800ce16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce1a:	d820      	bhi.n	800ce5e <_printf_float+0x18a>
 800ce1c:	3901      	subs	r1, #1
 800ce1e:	465a      	mov	r2, fp
 800ce20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce24:	9109      	str	r1, [sp, #36]	; 0x24
 800ce26:	f7ff ff17 	bl	800cc58 <__exponent>
 800ce2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce2c:	1813      	adds	r3, r2, r0
 800ce2e:	2a01      	cmp	r2, #1
 800ce30:	4681      	mov	r9, r0
 800ce32:	6123      	str	r3, [r4, #16]
 800ce34:	dc02      	bgt.n	800ce3c <_printf_float+0x168>
 800ce36:	6822      	ldr	r2, [r4, #0]
 800ce38:	07d2      	lsls	r2, r2, #31
 800ce3a:	d501      	bpl.n	800ce40 <_printf_float+0x16c>
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	6123      	str	r3, [r4, #16]
 800ce40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d09c      	beq.n	800cd82 <_printf_float+0xae>
 800ce48:	232d      	movs	r3, #45	; 0x2d
 800ce4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce4e:	e798      	b.n	800cd82 <_printf_float+0xae>
 800ce50:	9a06      	ldr	r2, [sp, #24]
 800ce52:	2a47      	cmp	r2, #71	; 0x47
 800ce54:	d1be      	bne.n	800cdd4 <_printf_float+0x100>
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1bc      	bne.n	800cdd4 <_printf_float+0x100>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e7b9      	b.n	800cdd2 <_printf_float+0xfe>
 800ce5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ce62:	d118      	bne.n	800ce96 <_printf_float+0x1c2>
 800ce64:	2900      	cmp	r1, #0
 800ce66:	6863      	ldr	r3, [r4, #4]
 800ce68:	dd0b      	ble.n	800ce82 <_printf_float+0x1ae>
 800ce6a:	6121      	str	r1, [r4, #16]
 800ce6c:	b913      	cbnz	r3, 800ce74 <_printf_float+0x1a0>
 800ce6e:	6822      	ldr	r2, [r4, #0]
 800ce70:	07d0      	lsls	r0, r2, #31
 800ce72:	d502      	bpl.n	800ce7a <_printf_float+0x1a6>
 800ce74:	3301      	adds	r3, #1
 800ce76:	440b      	add	r3, r1
 800ce78:	6123      	str	r3, [r4, #16]
 800ce7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ce7c:	f04f 0900 	mov.w	r9, #0
 800ce80:	e7de      	b.n	800ce40 <_printf_float+0x16c>
 800ce82:	b913      	cbnz	r3, 800ce8a <_printf_float+0x1b6>
 800ce84:	6822      	ldr	r2, [r4, #0]
 800ce86:	07d2      	lsls	r2, r2, #31
 800ce88:	d501      	bpl.n	800ce8e <_printf_float+0x1ba>
 800ce8a:	3302      	adds	r3, #2
 800ce8c:	e7f4      	b.n	800ce78 <_printf_float+0x1a4>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e7f2      	b.n	800ce78 <_printf_float+0x1a4>
 800ce92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce98:	4299      	cmp	r1, r3
 800ce9a:	db05      	blt.n	800cea8 <_printf_float+0x1d4>
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	6121      	str	r1, [r4, #16]
 800cea0:	07d8      	lsls	r0, r3, #31
 800cea2:	d5ea      	bpl.n	800ce7a <_printf_float+0x1a6>
 800cea4:	1c4b      	adds	r3, r1, #1
 800cea6:	e7e7      	b.n	800ce78 <_printf_float+0x1a4>
 800cea8:	2900      	cmp	r1, #0
 800ceaa:	bfd4      	ite	le
 800ceac:	f1c1 0202 	rsble	r2, r1, #2
 800ceb0:	2201      	movgt	r2, #1
 800ceb2:	4413      	add	r3, r2
 800ceb4:	e7e0      	b.n	800ce78 <_printf_float+0x1a4>
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	055a      	lsls	r2, r3, #21
 800ceba:	d407      	bmi.n	800cecc <_printf_float+0x1f8>
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	4642      	mov	r2, r8
 800cec0:	4631      	mov	r1, r6
 800cec2:	4628      	mov	r0, r5
 800cec4:	47b8      	blx	r7
 800cec6:	3001      	adds	r0, #1
 800cec8:	d12c      	bne.n	800cf24 <_printf_float+0x250>
 800ceca:	e764      	b.n	800cd96 <_printf_float+0xc2>
 800cecc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ced0:	f240 80e0 	bls.w	800d094 <_printf_float+0x3c0>
 800ced4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ced8:	2200      	movs	r2, #0
 800ceda:	2300      	movs	r3, #0
 800cedc:	f7f3 fe14 	bl	8000b08 <__aeabi_dcmpeq>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d034      	beq.n	800cf4e <_printf_float+0x27a>
 800cee4:	4a37      	ldr	r2, [pc, #220]	; (800cfc4 <_printf_float+0x2f0>)
 800cee6:	2301      	movs	r3, #1
 800cee8:	4631      	mov	r1, r6
 800ceea:	4628      	mov	r0, r5
 800ceec:	47b8      	blx	r7
 800ceee:	3001      	adds	r0, #1
 800cef0:	f43f af51 	beq.w	800cd96 <_printf_float+0xc2>
 800cef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cef8:	429a      	cmp	r2, r3
 800cefa:	db02      	blt.n	800cf02 <_printf_float+0x22e>
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	07d8      	lsls	r0, r3, #31
 800cf00:	d510      	bpl.n	800cf24 <_printf_float+0x250>
 800cf02:	ee18 3a10 	vmov	r3, s16
 800cf06:	4652      	mov	r2, sl
 800cf08:	4631      	mov	r1, r6
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	47b8      	blx	r7
 800cf0e:	3001      	adds	r0, #1
 800cf10:	f43f af41 	beq.w	800cd96 <_printf_float+0xc2>
 800cf14:	f04f 0800 	mov.w	r8, #0
 800cf18:	f104 091a 	add.w	r9, r4, #26
 800cf1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	4543      	cmp	r3, r8
 800cf22:	dc09      	bgt.n	800cf38 <_printf_float+0x264>
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	079b      	lsls	r3, r3, #30
 800cf28:	f100 8105 	bmi.w	800d136 <_printf_float+0x462>
 800cf2c:	68e0      	ldr	r0, [r4, #12]
 800cf2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf30:	4298      	cmp	r0, r3
 800cf32:	bfb8      	it	lt
 800cf34:	4618      	movlt	r0, r3
 800cf36:	e730      	b.n	800cd9a <_printf_float+0xc6>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	464a      	mov	r2, r9
 800cf3c:	4631      	mov	r1, r6
 800cf3e:	4628      	mov	r0, r5
 800cf40:	47b8      	blx	r7
 800cf42:	3001      	adds	r0, #1
 800cf44:	f43f af27 	beq.w	800cd96 <_printf_float+0xc2>
 800cf48:	f108 0801 	add.w	r8, r8, #1
 800cf4c:	e7e6      	b.n	800cf1c <_printf_float+0x248>
 800cf4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	dc39      	bgt.n	800cfc8 <_printf_float+0x2f4>
 800cf54:	4a1b      	ldr	r2, [pc, #108]	; (800cfc4 <_printf_float+0x2f0>)
 800cf56:	2301      	movs	r3, #1
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	47b8      	blx	r7
 800cf5e:	3001      	adds	r0, #1
 800cf60:	f43f af19 	beq.w	800cd96 <_printf_float+0xc2>
 800cf64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	d102      	bne.n	800cf72 <_printf_float+0x29e>
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	07d9      	lsls	r1, r3, #31
 800cf70:	d5d8      	bpl.n	800cf24 <_printf_float+0x250>
 800cf72:	ee18 3a10 	vmov	r3, s16
 800cf76:	4652      	mov	r2, sl
 800cf78:	4631      	mov	r1, r6
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	47b8      	blx	r7
 800cf7e:	3001      	adds	r0, #1
 800cf80:	f43f af09 	beq.w	800cd96 <_printf_float+0xc2>
 800cf84:	f04f 0900 	mov.w	r9, #0
 800cf88:	f104 0a1a 	add.w	sl, r4, #26
 800cf8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf8e:	425b      	negs	r3, r3
 800cf90:	454b      	cmp	r3, r9
 800cf92:	dc01      	bgt.n	800cf98 <_printf_float+0x2c4>
 800cf94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf96:	e792      	b.n	800cebe <_printf_float+0x1ea>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	4652      	mov	r2, sl
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	47b8      	blx	r7
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	f43f aef7 	beq.w	800cd96 <_printf_float+0xc2>
 800cfa8:	f109 0901 	add.w	r9, r9, #1
 800cfac:	e7ee      	b.n	800cf8c <_printf_float+0x2b8>
 800cfae:	bf00      	nop
 800cfb0:	7fefffff 	.word	0x7fefffff
 800cfb4:	08010764 	.word	0x08010764
 800cfb8:	08010768 	.word	0x08010768
 800cfbc:	08010770 	.word	0x08010770
 800cfc0:	0801076c 	.word	0x0801076c
 800cfc4:	08010774 	.word	0x08010774
 800cfc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	bfa8      	it	ge
 800cfd0:	461a      	movge	r2, r3
 800cfd2:	2a00      	cmp	r2, #0
 800cfd4:	4691      	mov	r9, r2
 800cfd6:	dc37      	bgt.n	800d048 <_printf_float+0x374>
 800cfd8:	f04f 0b00 	mov.w	fp, #0
 800cfdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfe0:	f104 021a 	add.w	r2, r4, #26
 800cfe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfe6:	9305      	str	r3, [sp, #20]
 800cfe8:	eba3 0309 	sub.w	r3, r3, r9
 800cfec:	455b      	cmp	r3, fp
 800cfee:	dc33      	bgt.n	800d058 <_printf_float+0x384>
 800cff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cff4:	429a      	cmp	r2, r3
 800cff6:	db3b      	blt.n	800d070 <_printf_float+0x39c>
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	07da      	lsls	r2, r3, #31
 800cffc:	d438      	bmi.n	800d070 <_printf_float+0x39c>
 800cffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d000:	9a05      	ldr	r2, [sp, #20]
 800d002:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d004:	1a9a      	subs	r2, r3, r2
 800d006:	eba3 0901 	sub.w	r9, r3, r1
 800d00a:	4591      	cmp	r9, r2
 800d00c:	bfa8      	it	ge
 800d00e:	4691      	movge	r9, r2
 800d010:	f1b9 0f00 	cmp.w	r9, #0
 800d014:	dc35      	bgt.n	800d082 <_printf_float+0x3ae>
 800d016:	f04f 0800 	mov.w	r8, #0
 800d01a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d01e:	f104 0a1a 	add.w	sl, r4, #26
 800d022:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d026:	1a9b      	subs	r3, r3, r2
 800d028:	eba3 0309 	sub.w	r3, r3, r9
 800d02c:	4543      	cmp	r3, r8
 800d02e:	f77f af79 	ble.w	800cf24 <_printf_float+0x250>
 800d032:	2301      	movs	r3, #1
 800d034:	4652      	mov	r2, sl
 800d036:	4631      	mov	r1, r6
 800d038:	4628      	mov	r0, r5
 800d03a:	47b8      	blx	r7
 800d03c:	3001      	adds	r0, #1
 800d03e:	f43f aeaa 	beq.w	800cd96 <_printf_float+0xc2>
 800d042:	f108 0801 	add.w	r8, r8, #1
 800d046:	e7ec      	b.n	800d022 <_printf_float+0x34e>
 800d048:	4613      	mov	r3, r2
 800d04a:	4631      	mov	r1, r6
 800d04c:	4642      	mov	r2, r8
 800d04e:	4628      	mov	r0, r5
 800d050:	47b8      	blx	r7
 800d052:	3001      	adds	r0, #1
 800d054:	d1c0      	bne.n	800cfd8 <_printf_float+0x304>
 800d056:	e69e      	b.n	800cd96 <_printf_float+0xc2>
 800d058:	2301      	movs	r3, #1
 800d05a:	4631      	mov	r1, r6
 800d05c:	4628      	mov	r0, r5
 800d05e:	9205      	str	r2, [sp, #20]
 800d060:	47b8      	blx	r7
 800d062:	3001      	adds	r0, #1
 800d064:	f43f ae97 	beq.w	800cd96 <_printf_float+0xc2>
 800d068:	9a05      	ldr	r2, [sp, #20]
 800d06a:	f10b 0b01 	add.w	fp, fp, #1
 800d06e:	e7b9      	b.n	800cfe4 <_printf_float+0x310>
 800d070:	ee18 3a10 	vmov	r3, s16
 800d074:	4652      	mov	r2, sl
 800d076:	4631      	mov	r1, r6
 800d078:	4628      	mov	r0, r5
 800d07a:	47b8      	blx	r7
 800d07c:	3001      	adds	r0, #1
 800d07e:	d1be      	bne.n	800cffe <_printf_float+0x32a>
 800d080:	e689      	b.n	800cd96 <_printf_float+0xc2>
 800d082:	9a05      	ldr	r2, [sp, #20]
 800d084:	464b      	mov	r3, r9
 800d086:	4442      	add	r2, r8
 800d088:	4631      	mov	r1, r6
 800d08a:	4628      	mov	r0, r5
 800d08c:	47b8      	blx	r7
 800d08e:	3001      	adds	r0, #1
 800d090:	d1c1      	bne.n	800d016 <_printf_float+0x342>
 800d092:	e680      	b.n	800cd96 <_printf_float+0xc2>
 800d094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d096:	2a01      	cmp	r2, #1
 800d098:	dc01      	bgt.n	800d09e <_printf_float+0x3ca>
 800d09a:	07db      	lsls	r3, r3, #31
 800d09c:	d538      	bpl.n	800d110 <_printf_float+0x43c>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	4642      	mov	r2, r8
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	47b8      	blx	r7
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	f43f ae74 	beq.w	800cd96 <_printf_float+0xc2>
 800d0ae:	ee18 3a10 	vmov	r3, s16
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	4631      	mov	r1, r6
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	47b8      	blx	r7
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	f43f ae6b 	beq.w	800cd96 <_printf_float+0xc2>
 800d0c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	f7f3 fd1e 	bl	8000b08 <__aeabi_dcmpeq>
 800d0cc:	b9d8      	cbnz	r0, 800d106 <_printf_float+0x432>
 800d0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d0:	f108 0201 	add.w	r2, r8, #1
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	4631      	mov	r1, r6
 800d0d8:	4628      	mov	r0, r5
 800d0da:	47b8      	blx	r7
 800d0dc:	3001      	adds	r0, #1
 800d0de:	d10e      	bne.n	800d0fe <_printf_float+0x42a>
 800d0e0:	e659      	b.n	800cd96 <_printf_float+0xc2>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	4652      	mov	r2, sl
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b8      	blx	r7
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	f43f ae52 	beq.w	800cd96 <_printf_float+0xc2>
 800d0f2:	f108 0801 	add.w	r8, r8, #1
 800d0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	4543      	cmp	r3, r8
 800d0fc:	dcf1      	bgt.n	800d0e2 <_printf_float+0x40e>
 800d0fe:	464b      	mov	r3, r9
 800d100:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d104:	e6dc      	b.n	800cec0 <_printf_float+0x1ec>
 800d106:	f04f 0800 	mov.w	r8, #0
 800d10a:	f104 0a1a 	add.w	sl, r4, #26
 800d10e:	e7f2      	b.n	800d0f6 <_printf_float+0x422>
 800d110:	2301      	movs	r3, #1
 800d112:	4642      	mov	r2, r8
 800d114:	e7df      	b.n	800d0d6 <_printf_float+0x402>
 800d116:	2301      	movs	r3, #1
 800d118:	464a      	mov	r2, r9
 800d11a:	4631      	mov	r1, r6
 800d11c:	4628      	mov	r0, r5
 800d11e:	47b8      	blx	r7
 800d120:	3001      	adds	r0, #1
 800d122:	f43f ae38 	beq.w	800cd96 <_printf_float+0xc2>
 800d126:	f108 0801 	add.w	r8, r8, #1
 800d12a:	68e3      	ldr	r3, [r4, #12]
 800d12c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d12e:	1a5b      	subs	r3, r3, r1
 800d130:	4543      	cmp	r3, r8
 800d132:	dcf0      	bgt.n	800d116 <_printf_float+0x442>
 800d134:	e6fa      	b.n	800cf2c <_printf_float+0x258>
 800d136:	f04f 0800 	mov.w	r8, #0
 800d13a:	f104 0919 	add.w	r9, r4, #25
 800d13e:	e7f4      	b.n	800d12a <_printf_float+0x456>

0800d140 <_printf_common>:
 800d140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d144:	4616      	mov	r6, r2
 800d146:	4699      	mov	r9, r3
 800d148:	688a      	ldr	r2, [r1, #8]
 800d14a:	690b      	ldr	r3, [r1, #16]
 800d14c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d150:	4293      	cmp	r3, r2
 800d152:	bfb8      	it	lt
 800d154:	4613      	movlt	r3, r2
 800d156:	6033      	str	r3, [r6, #0]
 800d158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d15c:	4607      	mov	r7, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	b10a      	cbz	r2, 800d166 <_printf_common+0x26>
 800d162:	3301      	adds	r3, #1
 800d164:	6033      	str	r3, [r6, #0]
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	0699      	lsls	r1, r3, #26
 800d16a:	bf42      	ittt	mi
 800d16c:	6833      	ldrmi	r3, [r6, #0]
 800d16e:	3302      	addmi	r3, #2
 800d170:	6033      	strmi	r3, [r6, #0]
 800d172:	6825      	ldr	r5, [r4, #0]
 800d174:	f015 0506 	ands.w	r5, r5, #6
 800d178:	d106      	bne.n	800d188 <_printf_common+0x48>
 800d17a:	f104 0a19 	add.w	sl, r4, #25
 800d17e:	68e3      	ldr	r3, [r4, #12]
 800d180:	6832      	ldr	r2, [r6, #0]
 800d182:	1a9b      	subs	r3, r3, r2
 800d184:	42ab      	cmp	r3, r5
 800d186:	dc26      	bgt.n	800d1d6 <_printf_common+0x96>
 800d188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d18c:	1e13      	subs	r3, r2, #0
 800d18e:	6822      	ldr	r2, [r4, #0]
 800d190:	bf18      	it	ne
 800d192:	2301      	movne	r3, #1
 800d194:	0692      	lsls	r2, r2, #26
 800d196:	d42b      	bmi.n	800d1f0 <_printf_common+0xb0>
 800d198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d19c:	4649      	mov	r1, r9
 800d19e:	4638      	mov	r0, r7
 800d1a0:	47c0      	blx	r8
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	d01e      	beq.n	800d1e4 <_printf_common+0xa4>
 800d1a6:	6823      	ldr	r3, [r4, #0]
 800d1a8:	68e5      	ldr	r5, [r4, #12]
 800d1aa:	6832      	ldr	r2, [r6, #0]
 800d1ac:	f003 0306 	and.w	r3, r3, #6
 800d1b0:	2b04      	cmp	r3, #4
 800d1b2:	bf08      	it	eq
 800d1b4:	1aad      	subeq	r5, r5, r2
 800d1b6:	68a3      	ldr	r3, [r4, #8]
 800d1b8:	6922      	ldr	r2, [r4, #16]
 800d1ba:	bf0c      	ite	eq
 800d1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1c0:	2500      	movne	r5, #0
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	bfc4      	itt	gt
 800d1c6:	1a9b      	subgt	r3, r3, r2
 800d1c8:	18ed      	addgt	r5, r5, r3
 800d1ca:	2600      	movs	r6, #0
 800d1cc:	341a      	adds	r4, #26
 800d1ce:	42b5      	cmp	r5, r6
 800d1d0:	d11a      	bne.n	800d208 <_printf_common+0xc8>
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	e008      	b.n	800d1e8 <_printf_common+0xa8>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	4652      	mov	r2, sl
 800d1da:	4649      	mov	r1, r9
 800d1dc:	4638      	mov	r0, r7
 800d1de:	47c0      	blx	r8
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	d103      	bne.n	800d1ec <_printf_common+0xac>
 800d1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ec:	3501      	adds	r5, #1
 800d1ee:	e7c6      	b.n	800d17e <_printf_common+0x3e>
 800d1f0:	18e1      	adds	r1, r4, r3
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	2030      	movs	r0, #48	; 0x30
 800d1f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1fa:	4422      	add	r2, r4
 800d1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d204:	3302      	adds	r3, #2
 800d206:	e7c7      	b.n	800d198 <_printf_common+0x58>
 800d208:	2301      	movs	r3, #1
 800d20a:	4622      	mov	r2, r4
 800d20c:	4649      	mov	r1, r9
 800d20e:	4638      	mov	r0, r7
 800d210:	47c0      	blx	r8
 800d212:	3001      	adds	r0, #1
 800d214:	d0e6      	beq.n	800d1e4 <_printf_common+0xa4>
 800d216:	3601      	adds	r6, #1
 800d218:	e7d9      	b.n	800d1ce <_printf_common+0x8e>
	...

0800d21c <_printf_i>:
 800d21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d220:	7e0f      	ldrb	r7, [r1, #24]
 800d222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d224:	2f78      	cmp	r7, #120	; 0x78
 800d226:	4691      	mov	r9, r2
 800d228:	4680      	mov	r8, r0
 800d22a:	460c      	mov	r4, r1
 800d22c:	469a      	mov	sl, r3
 800d22e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d232:	d807      	bhi.n	800d244 <_printf_i+0x28>
 800d234:	2f62      	cmp	r7, #98	; 0x62
 800d236:	d80a      	bhi.n	800d24e <_printf_i+0x32>
 800d238:	2f00      	cmp	r7, #0
 800d23a:	f000 80d8 	beq.w	800d3ee <_printf_i+0x1d2>
 800d23e:	2f58      	cmp	r7, #88	; 0x58
 800d240:	f000 80a3 	beq.w	800d38a <_printf_i+0x16e>
 800d244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d24c:	e03a      	b.n	800d2c4 <_printf_i+0xa8>
 800d24e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d252:	2b15      	cmp	r3, #21
 800d254:	d8f6      	bhi.n	800d244 <_printf_i+0x28>
 800d256:	a101      	add	r1, pc, #4	; (adr r1, 800d25c <_printf_i+0x40>)
 800d258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d25c:	0800d2b5 	.word	0x0800d2b5
 800d260:	0800d2c9 	.word	0x0800d2c9
 800d264:	0800d245 	.word	0x0800d245
 800d268:	0800d245 	.word	0x0800d245
 800d26c:	0800d245 	.word	0x0800d245
 800d270:	0800d245 	.word	0x0800d245
 800d274:	0800d2c9 	.word	0x0800d2c9
 800d278:	0800d245 	.word	0x0800d245
 800d27c:	0800d245 	.word	0x0800d245
 800d280:	0800d245 	.word	0x0800d245
 800d284:	0800d245 	.word	0x0800d245
 800d288:	0800d3d5 	.word	0x0800d3d5
 800d28c:	0800d2f9 	.word	0x0800d2f9
 800d290:	0800d3b7 	.word	0x0800d3b7
 800d294:	0800d245 	.word	0x0800d245
 800d298:	0800d245 	.word	0x0800d245
 800d29c:	0800d3f7 	.word	0x0800d3f7
 800d2a0:	0800d245 	.word	0x0800d245
 800d2a4:	0800d2f9 	.word	0x0800d2f9
 800d2a8:	0800d245 	.word	0x0800d245
 800d2ac:	0800d245 	.word	0x0800d245
 800d2b0:	0800d3bf 	.word	0x0800d3bf
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	1d1a      	adds	r2, r3, #4
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	602a      	str	r2, [r5, #0]
 800d2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e0a3      	b.n	800d410 <_printf_i+0x1f4>
 800d2c8:	6820      	ldr	r0, [r4, #0]
 800d2ca:	6829      	ldr	r1, [r5, #0]
 800d2cc:	0606      	lsls	r6, r0, #24
 800d2ce:	f101 0304 	add.w	r3, r1, #4
 800d2d2:	d50a      	bpl.n	800d2ea <_printf_i+0xce>
 800d2d4:	680e      	ldr	r6, [r1, #0]
 800d2d6:	602b      	str	r3, [r5, #0]
 800d2d8:	2e00      	cmp	r6, #0
 800d2da:	da03      	bge.n	800d2e4 <_printf_i+0xc8>
 800d2dc:	232d      	movs	r3, #45	; 0x2d
 800d2de:	4276      	negs	r6, r6
 800d2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e4:	485e      	ldr	r0, [pc, #376]	; (800d460 <_printf_i+0x244>)
 800d2e6:	230a      	movs	r3, #10
 800d2e8:	e019      	b.n	800d31e <_printf_i+0x102>
 800d2ea:	680e      	ldr	r6, [r1, #0]
 800d2ec:	602b      	str	r3, [r5, #0]
 800d2ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2f2:	bf18      	it	ne
 800d2f4:	b236      	sxthne	r6, r6
 800d2f6:	e7ef      	b.n	800d2d8 <_printf_i+0xbc>
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	6820      	ldr	r0, [r4, #0]
 800d2fc:	1d19      	adds	r1, r3, #4
 800d2fe:	6029      	str	r1, [r5, #0]
 800d300:	0601      	lsls	r1, r0, #24
 800d302:	d501      	bpl.n	800d308 <_printf_i+0xec>
 800d304:	681e      	ldr	r6, [r3, #0]
 800d306:	e002      	b.n	800d30e <_printf_i+0xf2>
 800d308:	0646      	lsls	r6, r0, #25
 800d30a:	d5fb      	bpl.n	800d304 <_printf_i+0xe8>
 800d30c:	881e      	ldrh	r6, [r3, #0]
 800d30e:	4854      	ldr	r0, [pc, #336]	; (800d460 <_printf_i+0x244>)
 800d310:	2f6f      	cmp	r7, #111	; 0x6f
 800d312:	bf0c      	ite	eq
 800d314:	2308      	moveq	r3, #8
 800d316:	230a      	movne	r3, #10
 800d318:	2100      	movs	r1, #0
 800d31a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d31e:	6865      	ldr	r5, [r4, #4]
 800d320:	60a5      	str	r5, [r4, #8]
 800d322:	2d00      	cmp	r5, #0
 800d324:	bfa2      	ittt	ge
 800d326:	6821      	ldrge	r1, [r4, #0]
 800d328:	f021 0104 	bicge.w	r1, r1, #4
 800d32c:	6021      	strge	r1, [r4, #0]
 800d32e:	b90e      	cbnz	r6, 800d334 <_printf_i+0x118>
 800d330:	2d00      	cmp	r5, #0
 800d332:	d04d      	beq.n	800d3d0 <_printf_i+0x1b4>
 800d334:	4615      	mov	r5, r2
 800d336:	fbb6 f1f3 	udiv	r1, r6, r3
 800d33a:	fb03 6711 	mls	r7, r3, r1, r6
 800d33e:	5dc7      	ldrb	r7, [r0, r7]
 800d340:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d344:	4637      	mov	r7, r6
 800d346:	42bb      	cmp	r3, r7
 800d348:	460e      	mov	r6, r1
 800d34a:	d9f4      	bls.n	800d336 <_printf_i+0x11a>
 800d34c:	2b08      	cmp	r3, #8
 800d34e:	d10b      	bne.n	800d368 <_printf_i+0x14c>
 800d350:	6823      	ldr	r3, [r4, #0]
 800d352:	07de      	lsls	r6, r3, #31
 800d354:	d508      	bpl.n	800d368 <_printf_i+0x14c>
 800d356:	6923      	ldr	r3, [r4, #16]
 800d358:	6861      	ldr	r1, [r4, #4]
 800d35a:	4299      	cmp	r1, r3
 800d35c:	bfde      	ittt	le
 800d35e:	2330      	movle	r3, #48	; 0x30
 800d360:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d364:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d368:	1b52      	subs	r2, r2, r5
 800d36a:	6122      	str	r2, [r4, #16]
 800d36c:	f8cd a000 	str.w	sl, [sp]
 800d370:	464b      	mov	r3, r9
 800d372:	aa03      	add	r2, sp, #12
 800d374:	4621      	mov	r1, r4
 800d376:	4640      	mov	r0, r8
 800d378:	f7ff fee2 	bl	800d140 <_printf_common>
 800d37c:	3001      	adds	r0, #1
 800d37e:	d14c      	bne.n	800d41a <_printf_i+0x1fe>
 800d380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d384:	b004      	add	sp, #16
 800d386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d38a:	4835      	ldr	r0, [pc, #212]	; (800d460 <_printf_i+0x244>)
 800d38c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d390:	6829      	ldr	r1, [r5, #0]
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	f851 6b04 	ldr.w	r6, [r1], #4
 800d398:	6029      	str	r1, [r5, #0]
 800d39a:	061d      	lsls	r5, r3, #24
 800d39c:	d514      	bpl.n	800d3c8 <_printf_i+0x1ac>
 800d39e:	07df      	lsls	r7, r3, #31
 800d3a0:	bf44      	itt	mi
 800d3a2:	f043 0320 	orrmi.w	r3, r3, #32
 800d3a6:	6023      	strmi	r3, [r4, #0]
 800d3a8:	b91e      	cbnz	r6, 800d3b2 <_printf_i+0x196>
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	f023 0320 	bic.w	r3, r3, #32
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	2310      	movs	r3, #16
 800d3b4:	e7b0      	b.n	800d318 <_printf_i+0xfc>
 800d3b6:	6823      	ldr	r3, [r4, #0]
 800d3b8:	f043 0320 	orr.w	r3, r3, #32
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	2378      	movs	r3, #120	; 0x78
 800d3c0:	4828      	ldr	r0, [pc, #160]	; (800d464 <_printf_i+0x248>)
 800d3c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3c6:	e7e3      	b.n	800d390 <_printf_i+0x174>
 800d3c8:	0659      	lsls	r1, r3, #25
 800d3ca:	bf48      	it	mi
 800d3cc:	b2b6      	uxthmi	r6, r6
 800d3ce:	e7e6      	b.n	800d39e <_printf_i+0x182>
 800d3d0:	4615      	mov	r5, r2
 800d3d2:	e7bb      	b.n	800d34c <_printf_i+0x130>
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	6826      	ldr	r6, [r4, #0]
 800d3d8:	6961      	ldr	r1, [r4, #20]
 800d3da:	1d18      	adds	r0, r3, #4
 800d3dc:	6028      	str	r0, [r5, #0]
 800d3de:	0635      	lsls	r5, r6, #24
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	d501      	bpl.n	800d3e8 <_printf_i+0x1cc>
 800d3e4:	6019      	str	r1, [r3, #0]
 800d3e6:	e002      	b.n	800d3ee <_printf_i+0x1d2>
 800d3e8:	0670      	lsls	r0, r6, #25
 800d3ea:	d5fb      	bpl.n	800d3e4 <_printf_i+0x1c8>
 800d3ec:	8019      	strh	r1, [r3, #0]
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	6123      	str	r3, [r4, #16]
 800d3f2:	4615      	mov	r5, r2
 800d3f4:	e7ba      	b.n	800d36c <_printf_i+0x150>
 800d3f6:	682b      	ldr	r3, [r5, #0]
 800d3f8:	1d1a      	adds	r2, r3, #4
 800d3fa:	602a      	str	r2, [r5, #0]
 800d3fc:	681d      	ldr	r5, [r3, #0]
 800d3fe:	6862      	ldr	r2, [r4, #4]
 800d400:	2100      	movs	r1, #0
 800d402:	4628      	mov	r0, r5
 800d404:	f7f2 ff0c 	bl	8000220 <memchr>
 800d408:	b108      	cbz	r0, 800d40e <_printf_i+0x1f2>
 800d40a:	1b40      	subs	r0, r0, r5
 800d40c:	6060      	str	r0, [r4, #4]
 800d40e:	6863      	ldr	r3, [r4, #4]
 800d410:	6123      	str	r3, [r4, #16]
 800d412:	2300      	movs	r3, #0
 800d414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d418:	e7a8      	b.n	800d36c <_printf_i+0x150>
 800d41a:	6923      	ldr	r3, [r4, #16]
 800d41c:	462a      	mov	r2, r5
 800d41e:	4649      	mov	r1, r9
 800d420:	4640      	mov	r0, r8
 800d422:	47d0      	blx	sl
 800d424:	3001      	adds	r0, #1
 800d426:	d0ab      	beq.n	800d380 <_printf_i+0x164>
 800d428:	6823      	ldr	r3, [r4, #0]
 800d42a:	079b      	lsls	r3, r3, #30
 800d42c:	d413      	bmi.n	800d456 <_printf_i+0x23a>
 800d42e:	68e0      	ldr	r0, [r4, #12]
 800d430:	9b03      	ldr	r3, [sp, #12]
 800d432:	4298      	cmp	r0, r3
 800d434:	bfb8      	it	lt
 800d436:	4618      	movlt	r0, r3
 800d438:	e7a4      	b.n	800d384 <_printf_i+0x168>
 800d43a:	2301      	movs	r3, #1
 800d43c:	4632      	mov	r2, r6
 800d43e:	4649      	mov	r1, r9
 800d440:	4640      	mov	r0, r8
 800d442:	47d0      	blx	sl
 800d444:	3001      	adds	r0, #1
 800d446:	d09b      	beq.n	800d380 <_printf_i+0x164>
 800d448:	3501      	adds	r5, #1
 800d44a:	68e3      	ldr	r3, [r4, #12]
 800d44c:	9903      	ldr	r1, [sp, #12]
 800d44e:	1a5b      	subs	r3, r3, r1
 800d450:	42ab      	cmp	r3, r5
 800d452:	dcf2      	bgt.n	800d43a <_printf_i+0x21e>
 800d454:	e7eb      	b.n	800d42e <_printf_i+0x212>
 800d456:	2500      	movs	r5, #0
 800d458:	f104 0619 	add.w	r6, r4, #25
 800d45c:	e7f5      	b.n	800d44a <_printf_i+0x22e>
 800d45e:	bf00      	nop
 800d460:	08010776 	.word	0x08010776
 800d464:	08010787 	.word	0x08010787

0800d468 <quorem>:
 800d468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	6903      	ldr	r3, [r0, #16]
 800d46e:	690c      	ldr	r4, [r1, #16]
 800d470:	42a3      	cmp	r3, r4
 800d472:	4607      	mov	r7, r0
 800d474:	f2c0 8081 	blt.w	800d57a <quorem+0x112>
 800d478:	3c01      	subs	r4, #1
 800d47a:	f101 0814 	add.w	r8, r1, #20
 800d47e:	f100 0514 	add.w	r5, r0, #20
 800d482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d486:	9301      	str	r3, [sp, #4]
 800d488:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d48c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d490:	3301      	adds	r3, #1
 800d492:	429a      	cmp	r2, r3
 800d494:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d498:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d49c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4a0:	d331      	bcc.n	800d506 <quorem+0x9e>
 800d4a2:	f04f 0e00 	mov.w	lr, #0
 800d4a6:	4640      	mov	r0, r8
 800d4a8:	46ac      	mov	ip, r5
 800d4aa:	46f2      	mov	sl, lr
 800d4ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4b0:	b293      	uxth	r3, r2
 800d4b2:	fb06 e303 	mla	r3, r6, r3, lr
 800d4b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	ebaa 0303 	sub.w	r3, sl, r3
 800d4c0:	f8dc a000 	ldr.w	sl, [ip]
 800d4c4:	0c12      	lsrs	r2, r2, #16
 800d4c6:	fa13 f38a 	uxtah	r3, r3, sl
 800d4ca:	fb06 e202 	mla	r2, r6, r2, lr
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	9b00      	ldr	r3, [sp, #0]
 800d4d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d4d6:	b292      	uxth	r2, r2
 800d4d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d4dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d4e4:	4581      	cmp	r9, r0
 800d4e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4ea:	f84c 3b04 	str.w	r3, [ip], #4
 800d4ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d4f2:	d2db      	bcs.n	800d4ac <quorem+0x44>
 800d4f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d4f8:	b92b      	cbnz	r3, 800d506 <quorem+0x9e>
 800d4fa:	9b01      	ldr	r3, [sp, #4]
 800d4fc:	3b04      	subs	r3, #4
 800d4fe:	429d      	cmp	r5, r3
 800d500:	461a      	mov	r2, r3
 800d502:	d32e      	bcc.n	800d562 <quorem+0xfa>
 800d504:	613c      	str	r4, [r7, #16]
 800d506:	4638      	mov	r0, r7
 800d508:	f001 f8b6 	bl	800e678 <__mcmp>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	db24      	blt.n	800d55a <quorem+0xf2>
 800d510:	3601      	adds	r6, #1
 800d512:	4628      	mov	r0, r5
 800d514:	f04f 0c00 	mov.w	ip, #0
 800d518:	f858 2b04 	ldr.w	r2, [r8], #4
 800d51c:	f8d0 e000 	ldr.w	lr, [r0]
 800d520:	b293      	uxth	r3, r2
 800d522:	ebac 0303 	sub.w	r3, ip, r3
 800d526:	0c12      	lsrs	r2, r2, #16
 800d528:	fa13 f38e 	uxtah	r3, r3, lr
 800d52c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d530:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d534:	b29b      	uxth	r3, r3
 800d536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d53a:	45c1      	cmp	r9, r8
 800d53c:	f840 3b04 	str.w	r3, [r0], #4
 800d540:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d544:	d2e8      	bcs.n	800d518 <quorem+0xb0>
 800d546:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d54a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d54e:	b922      	cbnz	r2, 800d55a <quorem+0xf2>
 800d550:	3b04      	subs	r3, #4
 800d552:	429d      	cmp	r5, r3
 800d554:	461a      	mov	r2, r3
 800d556:	d30a      	bcc.n	800d56e <quorem+0x106>
 800d558:	613c      	str	r4, [r7, #16]
 800d55a:	4630      	mov	r0, r6
 800d55c:	b003      	add	sp, #12
 800d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d562:	6812      	ldr	r2, [r2, #0]
 800d564:	3b04      	subs	r3, #4
 800d566:	2a00      	cmp	r2, #0
 800d568:	d1cc      	bne.n	800d504 <quorem+0x9c>
 800d56a:	3c01      	subs	r4, #1
 800d56c:	e7c7      	b.n	800d4fe <quorem+0x96>
 800d56e:	6812      	ldr	r2, [r2, #0]
 800d570:	3b04      	subs	r3, #4
 800d572:	2a00      	cmp	r2, #0
 800d574:	d1f0      	bne.n	800d558 <quorem+0xf0>
 800d576:	3c01      	subs	r4, #1
 800d578:	e7eb      	b.n	800d552 <quorem+0xea>
 800d57a:	2000      	movs	r0, #0
 800d57c:	e7ee      	b.n	800d55c <quorem+0xf4>
	...

0800d580 <_dtoa_r>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	ed2d 8b04 	vpush	{d8-d9}
 800d588:	ec57 6b10 	vmov	r6, r7, d0
 800d58c:	b093      	sub	sp, #76	; 0x4c
 800d58e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d590:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d594:	9106      	str	r1, [sp, #24]
 800d596:	ee10 aa10 	vmov	sl, s0
 800d59a:	4604      	mov	r4, r0
 800d59c:	9209      	str	r2, [sp, #36]	; 0x24
 800d59e:	930c      	str	r3, [sp, #48]	; 0x30
 800d5a0:	46bb      	mov	fp, r7
 800d5a2:	b975      	cbnz	r5, 800d5c2 <_dtoa_r+0x42>
 800d5a4:	2010      	movs	r0, #16
 800d5a6:	f000 fddd 	bl	800e164 <malloc>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	6260      	str	r0, [r4, #36]	; 0x24
 800d5ae:	b920      	cbnz	r0, 800d5ba <_dtoa_r+0x3a>
 800d5b0:	4ba7      	ldr	r3, [pc, #668]	; (800d850 <_dtoa_r+0x2d0>)
 800d5b2:	21ea      	movs	r1, #234	; 0xea
 800d5b4:	48a7      	ldr	r0, [pc, #668]	; (800d854 <_dtoa_r+0x2d4>)
 800d5b6:	f001 fa67 	bl	800ea88 <__assert_func>
 800d5ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5be:	6005      	str	r5, [r0, #0]
 800d5c0:	60c5      	str	r5, [r0, #12]
 800d5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5c4:	6819      	ldr	r1, [r3, #0]
 800d5c6:	b151      	cbz	r1, 800d5de <_dtoa_r+0x5e>
 800d5c8:	685a      	ldr	r2, [r3, #4]
 800d5ca:	604a      	str	r2, [r1, #4]
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	4093      	lsls	r3, r2
 800d5d0:	608b      	str	r3, [r1, #8]
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fe0e 	bl	800e1f4 <_Bfree>
 800d5d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5da:	2200      	movs	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	1e3b      	subs	r3, r7, #0
 800d5e0:	bfaa      	itet	ge
 800d5e2:	2300      	movge	r3, #0
 800d5e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d5e8:	f8c8 3000 	strge.w	r3, [r8]
 800d5ec:	4b9a      	ldr	r3, [pc, #616]	; (800d858 <_dtoa_r+0x2d8>)
 800d5ee:	bfbc      	itt	lt
 800d5f0:	2201      	movlt	r2, #1
 800d5f2:	f8c8 2000 	strlt.w	r2, [r8]
 800d5f6:	ea33 030b 	bics.w	r3, r3, fp
 800d5fa:	d11b      	bne.n	800d634 <_dtoa_r+0xb4>
 800d5fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d608:	4333      	orrs	r3, r6
 800d60a:	f000 8592 	beq.w	800e132 <_dtoa_r+0xbb2>
 800d60e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d610:	b963      	cbnz	r3, 800d62c <_dtoa_r+0xac>
 800d612:	4b92      	ldr	r3, [pc, #584]	; (800d85c <_dtoa_r+0x2dc>)
 800d614:	e022      	b.n	800d65c <_dtoa_r+0xdc>
 800d616:	4b92      	ldr	r3, [pc, #584]	; (800d860 <_dtoa_r+0x2e0>)
 800d618:	9301      	str	r3, [sp, #4]
 800d61a:	3308      	adds	r3, #8
 800d61c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d61e:	6013      	str	r3, [r2, #0]
 800d620:	9801      	ldr	r0, [sp, #4]
 800d622:	b013      	add	sp, #76	; 0x4c
 800d624:	ecbd 8b04 	vpop	{d8-d9}
 800d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62c:	4b8b      	ldr	r3, [pc, #556]	; (800d85c <_dtoa_r+0x2dc>)
 800d62e:	9301      	str	r3, [sp, #4]
 800d630:	3303      	adds	r3, #3
 800d632:	e7f3      	b.n	800d61c <_dtoa_r+0x9c>
 800d634:	2200      	movs	r2, #0
 800d636:	2300      	movs	r3, #0
 800d638:	4650      	mov	r0, sl
 800d63a:	4659      	mov	r1, fp
 800d63c:	f7f3 fa64 	bl	8000b08 <__aeabi_dcmpeq>
 800d640:	ec4b ab19 	vmov	d9, sl, fp
 800d644:	4680      	mov	r8, r0
 800d646:	b158      	cbz	r0, 800d660 <_dtoa_r+0xe0>
 800d648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d64a:	2301      	movs	r3, #1
 800d64c:	6013      	str	r3, [r2, #0]
 800d64e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d650:	2b00      	cmp	r3, #0
 800d652:	f000 856b 	beq.w	800e12c <_dtoa_r+0xbac>
 800d656:	4883      	ldr	r0, [pc, #524]	; (800d864 <_dtoa_r+0x2e4>)
 800d658:	6018      	str	r0, [r3, #0]
 800d65a:	1e43      	subs	r3, r0, #1
 800d65c:	9301      	str	r3, [sp, #4]
 800d65e:	e7df      	b.n	800d620 <_dtoa_r+0xa0>
 800d660:	ec4b ab10 	vmov	d0, sl, fp
 800d664:	aa10      	add	r2, sp, #64	; 0x40
 800d666:	a911      	add	r1, sp, #68	; 0x44
 800d668:	4620      	mov	r0, r4
 800d66a:	f001 f8ab 	bl	800e7c4 <__d2b>
 800d66e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d672:	ee08 0a10 	vmov	s16, r0
 800d676:	2d00      	cmp	r5, #0
 800d678:	f000 8084 	beq.w	800d784 <_dtoa_r+0x204>
 800d67c:	ee19 3a90 	vmov	r3, s19
 800d680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d684:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d688:	4656      	mov	r6, sl
 800d68a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d68e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d692:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d696:	4b74      	ldr	r3, [pc, #464]	; (800d868 <_dtoa_r+0x2e8>)
 800d698:	2200      	movs	r2, #0
 800d69a:	4630      	mov	r0, r6
 800d69c:	4639      	mov	r1, r7
 800d69e:	f7f2 fe13 	bl	80002c8 <__aeabi_dsub>
 800d6a2:	a365      	add	r3, pc, #404	; (adr r3, 800d838 <_dtoa_r+0x2b8>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	f7f2 ffc6 	bl	8000638 <__aeabi_dmul>
 800d6ac:	a364      	add	r3, pc, #400	; (adr r3, 800d840 <_dtoa_r+0x2c0>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	f7f2 fe0b 	bl	80002cc <__adddf3>
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	460f      	mov	r7, r1
 800d6bc:	f7f2 ff52 	bl	8000564 <__aeabi_i2d>
 800d6c0:	a361      	add	r3, pc, #388	; (adr r3, 800d848 <_dtoa_r+0x2c8>)
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	f7f2 ffb7 	bl	8000638 <__aeabi_dmul>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	4639      	mov	r1, r7
 800d6d2:	f7f2 fdfb 	bl	80002cc <__adddf3>
 800d6d6:	4606      	mov	r6, r0
 800d6d8:	460f      	mov	r7, r1
 800d6da:	f7f3 fa5d 	bl	8000b98 <__aeabi_d2iz>
 800d6de:	2200      	movs	r2, #0
 800d6e0:	9000      	str	r0, [sp, #0]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	f7f3 fa18 	bl	8000b1c <__aeabi_dcmplt>
 800d6ec:	b150      	cbz	r0, 800d704 <_dtoa_r+0x184>
 800d6ee:	9800      	ldr	r0, [sp, #0]
 800d6f0:	f7f2 ff38 	bl	8000564 <__aeabi_i2d>
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	f7f3 fa06 	bl	8000b08 <__aeabi_dcmpeq>
 800d6fc:	b910      	cbnz	r0, 800d704 <_dtoa_r+0x184>
 800d6fe:	9b00      	ldr	r3, [sp, #0]
 800d700:	3b01      	subs	r3, #1
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	9b00      	ldr	r3, [sp, #0]
 800d706:	2b16      	cmp	r3, #22
 800d708:	d85a      	bhi.n	800d7c0 <_dtoa_r+0x240>
 800d70a:	9a00      	ldr	r2, [sp, #0]
 800d70c:	4b57      	ldr	r3, [pc, #348]	; (800d86c <_dtoa_r+0x2ec>)
 800d70e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	ec51 0b19 	vmov	r0, r1, d9
 800d71a:	f7f3 f9ff 	bl	8000b1c <__aeabi_dcmplt>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d050      	beq.n	800d7c4 <_dtoa_r+0x244>
 800d722:	9b00      	ldr	r3, [sp, #0]
 800d724:	3b01      	subs	r3, #1
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	2300      	movs	r3, #0
 800d72a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d72c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d72e:	1b5d      	subs	r5, r3, r5
 800d730:	1e6b      	subs	r3, r5, #1
 800d732:	9305      	str	r3, [sp, #20]
 800d734:	bf45      	ittet	mi
 800d736:	f1c5 0301 	rsbmi	r3, r5, #1
 800d73a:	9304      	strmi	r3, [sp, #16]
 800d73c:	2300      	movpl	r3, #0
 800d73e:	2300      	movmi	r3, #0
 800d740:	bf4c      	ite	mi
 800d742:	9305      	strmi	r3, [sp, #20]
 800d744:	9304      	strpl	r3, [sp, #16]
 800d746:	9b00      	ldr	r3, [sp, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	db3d      	blt.n	800d7c8 <_dtoa_r+0x248>
 800d74c:	9b05      	ldr	r3, [sp, #20]
 800d74e:	9a00      	ldr	r2, [sp, #0]
 800d750:	920a      	str	r2, [sp, #40]	; 0x28
 800d752:	4413      	add	r3, r2
 800d754:	9305      	str	r3, [sp, #20]
 800d756:	2300      	movs	r3, #0
 800d758:	9307      	str	r3, [sp, #28]
 800d75a:	9b06      	ldr	r3, [sp, #24]
 800d75c:	2b09      	cmp	r3, #9
 800d75e:	f200 8089 	bhi.w	800d874 <_dtoa_r+0x2f4>
 800d762:	2b05      	cmp	r3, #5
 800d764:	bfc4      	itt	gt
 800d766:	3b04      	subgt	r3, #4
 800d768:	9306      	strgt	r3, [sp, #24]
 800d76a:	9b06      	ldr	r3, [sp, #24]
 800d76c:	f1a3 0302 	sub.w	r3, r3, #2
 800d770:	bfcc      	ite	gt
 800d772:	2500      	movgt	r5, #0
 800d774:	2501      	movle	r5, #1
 800d776:	2b03      	cmp	r3, #3
 800d778:	f200 8087 	bhi.w	800d88a <_dtoa_r+0x30a>
 800d77c:	e8df f003 	tbb	[pc, r3]
 800d780:	59383a2d 	.word	0x59383a2d
 800d784:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d788:	441d      	add	r5, r3
 800d78a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d78e:	2b20      	cmp	r3, #32
 800d790:	bfc1      	itttt	gt
 800d792:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d796:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d79a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d79e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d7a2:	bfda      	itte	le
 800d7a4:	f1c3 0320 	rsble	r3, r3, #32
 800d7a8:	fa06 f003 	lslle.w	r0, r6, r3
 800d7ac:	4318      	orrgt	r0, r3
 800d7ae:	f7f2 fec9 	bl	8000544 <__aeabi_ui2d>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d7ba:	3d01      	subs	r5, #1
 800d7bc:	930e      	str	r3, [sp, #56]	; 0x38
 800d7be:	e76a      	b.n	800d696 <_dtoa_r+0x116>
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e7b2      	b.n	800d72a <_dtoa_r+0x1aa>
 800d7c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d7c6:	e7b1      	b.n	800d72c <_dtoa_r+0x1ac>
 800d7c8:	9b04      	ldr	r3, [sp, #16]
 800d7ca:	9a00      	ldr	r2, [sp, #0]
 800d7cc:	1a9b      	subs	r3, r3, r2
 800d7ce:	9304      	str	r3, [sp, #16]
 800d7d0:	4253      	negs	r3, r2
 800d7d2:	9307      	str	r3, [sp, #28]
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d7d8:	e7bf      	b.n	800d75a <_dtoa_r+0x1da>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	9308      	str	r3, [sp, #32]
 800d7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	dc55      	bgt.n	800d890 <_dtoa_r+0x310>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d7ee:	e00c      	b.n	800d80a <_dtoa_r+0x28a>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e7f3      	b.n	800d7dc <_dtoa_r+0x25c>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f8:	9308      	str	r3, [sp, #32]
 800d7fa:	9b00      	ldr	r3, [sp, #0]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	9302      	str	r3, [sp, #8]
 800d800:	3301      	adds	r3, #1
 800d802:	2b01      	cmp	r3, #1
 800d804:	9303      	str	r3, [sp, #12]
 800d806:	bfb8      	it	lt
 800d808:	2301      	movlt	r3, #1
 800d80a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d80c:	2200      	movs	r2, #0
 800d80e:	6042      	str	r2, [r0, #4]
 800d810:	2204      	movs	r2, #4
 800d812:	f102 0614 	add.w	r6, r2, #20
 800d816:	429e      	cmp	r6, r3
 800d818:	6841      	ldr	r1, [r0, #4]
 800d81a:	d93d      	bls.n	800d898 <_dtoa_r+0x318>
 800d81c:	4620      	mov	r0, r4
 800d81e:	f000 fca9 	bl	800e174 <_Balloc>
 800d822:	9001      	str	r0, [sp, #4]
 800d824:	2800      	cmp	r0, #0
 800d826:	d13b      	bne.n	800d8a0 <_dtoa_r+0x320>
 800d828:	4b11      	ldr	r3, [pc, #68]	; (800d870 <_dtoa_r+0x2f0>)
 800d82a:	4602      	mov	r2, r0
 800d82c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d830:	e6c0      	b.n	800d5b4 <_dtoa_r+0x34>
 800d832:	2301      	movs	r3, #1
 800d834:	e7df      	b.n	800d7f6 <_dtoa_r+0x276>
 800d836:	bf00      	nop
 800d838:	636f4361 	.word	0x636f4361
 800d83c:	3fd287a7 	.word	0x3fd287a7
 800d840:	8b60c8b3 	.word	0x8b60c8b3
 800d844:	3fc68a28 	.word	0x3fc68a28
 800d848:	509f79fb 	.word	0x509f79fb
 800d84c:	3fd34413 	.word	0x3fd34413
 800d850:	080107a5 	.word	0x080107a5
 800d854:	080107bc 	.word	0x080107bc
 800d858:	7ff00000 	.word	0x7ff00000
 800d85c:	080107a1 	.word	0x080107a1
 800d860:	08010798 	.word	0x08010798
 800d864:	08010775 	.word	0x08010775
 800d868:	3ff80000 	.word	0x3ff80000
 800d86c:	080108b0 	.word	0x080108b0
 800d870:	08010817 	.word	0x08010817
 800d874:	2501      	movs	r5, #1
 800d876:	2300      	movs	r3, #0
 800d878:	9306      	str	r3, [sp, #24]
 800d87a:	9508      	str	r5, [sp, #32]
 800d87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d880:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d884:	2200      	movs	r2, #0
 800d886:	2312      	movs	r3, #18
 800d888:	e7b0      	b.n	800d7ec <_dtoa_r+0x26c>
 800d88a:	2301      	movs	r3, #1
 800d88c:	9308      	str	r3, [sp, #32]
 800d88e:	e7f5      	b.n	800d87c <_dtoa_r+0x2fc>
 800d890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d892:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d896:	e7b8      	b.n	800d80a <_dtoa_r+0x28a>
 800d898:	3101      	adds	r1, #1
 800d89a:	6041      	str	r1, [r0, #4]
 800d89c:	0052      	lsls	r2, r2, #1
 800d89e:	e7b8      	b.n	800d812 <_dtoa_r+0x292>
 800d8a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8a2:	9a01      	ldr	r2, [sp, #4]
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	9b03      	ldr	r3, [sp, #12]
 800d8a8:	2b0e      	cmp	r3, #14
 800d8aa:	f200 809d 	bhi.w	800d9e8 <_dtoa_r+0x468>
 800d8ae:	2d00      	cmp	r5, #0
 800d8b0:	f000 809a 	beq.w	800d9e8 <_dtoa_r+0x468>
 800d8b4:	9b00      	ldr	r3, [sp, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	dd32      	ble.n	800d920 <_dtoa_r+0x3a0>
 800d8ba:	4ab7      	ldr	r2, [pc, #732]	; (800db98 <_dtoa_r+0x618>)
 800d8bc:	f003 030f 	and.w	r3, r3, #15
 800d8c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d8c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8c8:	9b00      	ldr	r3, [sp, #0]
 800d8ca:	05d8      	lsls	r0, r3, #23
 800d8cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d8d0:	d516      	bpl.n	800d900 <_dtoa_r+0x380>
 800d8d2:	4bb2      	ldr	r3, [pc, #712]	; (800db9c <_dtoa_r+0x61c>)
 800d8d4:	ec51 0b19 	vmov	r0, r1, d9
 800d8d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d8dc:	f7f2 ffd6 	bl	800088c <__aeabi_ddiv>
 800d8e0:	f007 070f 	and.w	r7, r7, #15
 800d8e4:	4682      	mov	sl, r0
 800d8e6:	468b      	mov	fp, r1
 800d8e8:	2503      	movs	r5, #3
 800d8ea:	4eac      	ldr	r6, [pc, #688]	; (800db9c <_dtoa_r+0x61c>)
 800d8ec:	b957      	cbnz	r7, 800d904 <_dtoa_r+0x384>
 800d8ee:	4642      	mov	r2, r8
 800d8f0:	464b      	mov	r3, r9
 800d8f2:	4650      	mov	r0, sl
 800d8f4:	4659      	mov	r1, fp
 800d8f6:	f7f2 ffc9 	bl	800088c <__aeabi_ddiv>
 800d8fa:	4682      	mov	sl, r0
 800d8fc:	468b      	mov	fp, r1
 800d8fe:	e028      	b.n	800d952 <_dtoa_r+0x3d2>
 800d900:	2502      	movs	r5, #2
 800d902:	e7f2      	b.n	800d8ea <_dtoa_r+0x36a>
 800d904:	07f9      	lsls	r1, r7, #31
 800d906:	d508      	bpl.n	800d91a <_dtoa_r+0x39a>
 800d908:	4640      	mov	r0, r8
 800d90a:	4649      	mov	r1, r9
 800d90c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d910:	f7f2 fe92 	bl	8000638 <__aeabi_dmul>
 800d914:	3501      	adds	r5, #1
 800d916:	4680      	mov	r8, r0
 800d918:	4689      	mov	r9, r1
 800d91a:	107f      	asrs	r7, r7, #1
 800d91c:	3608      	adds	r6, #8
 800d91e:	e7e5      	b.n	800d8ec <_dtoa_r+0x36c>
 800d920:	f000 809b 	beq.w	800da5a <_dtoa_r+0x4da>
 800d924:	9b00      	ldr	r3, [sp, #0]
 800d926:	4f9d      	ldr	r7, [pc, #628]	; (800db9c <_dtoa_r+0x61c>)
 800d928:	425e      	negs	r6, r3
 800d92a:	4b9b      	ldr	r3, [pc, #620]	; (800db98 <_dtoa_r+0x618>)
 800d92c:	f006 020f 	and.w	r2, r6, #15
 800d930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	ec51 0b19 	vmov	r0, r1, d9
 800d93c:	f7f2 fe7c 	bl	8000638 <__aeabi_dmul>
 800d940:	1136      	asrs	r6, r6, #4
 800d942:	4682      	mov	sl, r0
 800d944:	468b      	mov	fp, r1
 800d946:	2300      	movs	r3, #0
 800d948:	2502      	movs	r5, #2
 800d94a:	2e00      	cmp	r6, #0
 800d94c:	d17a      	bne.n	800da44 <_dtoa_r+0x4c4>
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1d3      	bne.n	800d8fa <_dtoa_r+0x37a>
 800d952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 8082 	beq.w	800da5e <_dtoa_r+0x4de>
 800d95a:	4b91      	ldr	r3, [pc, #580]	; (800dba0 <_dtoa_r+0x620>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	4650      	mov	r0, sl
 800d960:	4659      	mov	r1, fp
 800d962:	f7f3 f8db 	bl	8000b1c <__aeabi_dcmplt>
 800d966:	2800      	cmp	r0, #0
 800d968:	d079      	beq.n	800da5e <_dtoa_r+0x4de>
 800d96a:	9b03      	ldr	r3, [sp, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d076      	beq.n	800da5e <_dtoa_r+0x4de>
 800d970:	9b02      	ldr	r3, [sp, #8]
 800d972:	2b00      	cmp	r3, #0
 800d974:	dd36      	ble.n	800d9e4 <_dtoa_r+0x464>
 800d976:	9b00      	ldr	r3, [sp, #0]
 800d978:	4650      	mov	r0, sl
 800d97a:	4659      	mov	r1, fp
 800d97c:	1e5f      	subs	r7, r3, #1
 800d97e:	2200      	movs	r2, #0
 800d980:	4b88      	ldr	r3, [pc, #544]	; (800dba4 <_dtoa_r+0x624>)
 800d982:	f7f2 fe59 	bl	8000638 <__aeabi_dmul>
 800d986:	9e02      	ldr	r6, [sp, #8]
 800d988:	4682      	mov	sl, r0
 800d98a:	468b      	mov	fp, r1
 800d98c:	3501      	adds	r5, #1
 800d98e:	4628      	mov	r0, r5
 800d990:	f7f2 fde8 	bl	8000564 <__aeabi_i2d>
 800d994:	4652      	mov	r2, sl
 800d996:	465b      	mov	r3, fp
 800d998:	f7f2 fe4e 	bl	8000638 <__aeabi_dmul>
 800d99c:	4b82      	ldr	r3, [pc, #520]	; (800dba8 <_dtoa_r+0x628>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f7f2 fc94 	bl	80002cc <__adddf3>
 800d9a4:	46d0      	mov	r8, sl
 800d9a6:	46d9      	mov	r9, fp
 800d9a8:	4682      	mov	sl, r0
 800d9aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d9ae:	2e00      	cmp	r6, #0
 800d9b0:	d158      	bne.n	800da64 <_dtoa_r+0x4e4>
 800d9b2:	4b7e      	ldr	r3, [pc, #504]	; (800dbac <_dtoa_r+0x62c>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	4640      	mov	r0, r8
 800d9b8:	4649      	mov	r1, r9
 800d9ba:	f7f2 fc85 	bl	80002c8 <__aeabi_dsub>
 800d9be:	4652      	mov	r2, sl
 800d9c0:	465b      	mov	r3, fp
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	4689      	mov	r9, r1
 800d9c6:	f7f3 f8c7 	bl	8000b58 <__aeabi_dcmpgt>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	f040 8295 	bne.w	800defa <_dtoa_r+0x97a>
 800d9d0:	4652      	mov	r2, sl
 800d9d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d9d6:	4640      	mov	r0, r8
 800d9d8:	4649      	mov	r1, r9
 800d9da:	f7f3 f89f 	bl	8000b1c <__aeabi_dcmplt>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	f040 8289 	bne.w	800def6 <_dtoa_r+0x976>
 800d9e4:	ec5b ab19 	vmov	sl, fp, d9
 800d9e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f2c0 8148 	blt.w	800dc80 <_dtoa_r+0x700>
 800d9f0:	9a00      	ldr	r2, [sp, #0]
 800d9f2:	2a0e      	cmp	r2, #14
 800d9f4:	f300 8144 	bgt.w	800dc80 <_dtoa_r+0x700>
 800d9f8:	4b67      	ldr	r3, [pc, #412]	; (800db98 <_dtoa_r+0x618>)
 800d9fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da04:	2b00      	cmp	r3, #0
 800da06:	f280 80d5 	bge.w	800dbb4 <_dtoa_r+0x634>
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f300 80d1 	bgt.w	800dbb4 <_dtoa_r+0x634>
 800da12:	f040 826f 	bne.w	800def4 <_dtoa_r+0x974>
 800da16:	4b65      	ldr	r3, [pc, #404]	; (800dbac <_dtoa_r+0x62c>)
 800da18:	2200      	movs	r2, #0
 800da1a:	4640      	mov	r0, r8
 800da1c:	4649      	mov	r1, r9
 800da1e:	f7f2 fe0b 	bl	8000638 <__aeabi_dmul>
 800da22:	4652      	mov	r2, sl
 800da24:	465b      	mov	r3, fp
 800da26:	f7f3 f88d 	bl	8000b44 <__aeabi_dcmpge>
 800da2a:	9e03      	ldr	r6, [sp, #12]
 800da2c:	4637      	mov	r7, r6
 800da2e:	2800      	cmp	r0, #0
 800da30:	f040 8245 	bne.w	800debe <_dtoa_r+0x93e>
 800da34:	9d01      	ldr	r5, [sp, #4]
 800da36:	2331      	movs	r3, #49	; 0x31
 800da38:	f805 3b01 	strb.w	r3, [r5], #1
 800da3c:	9b00      	ldr	r3, [sp, #0]
 800da3e:	3301      	adds	r3, #1
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	e240      	b.n	800dec6 <_dtoa_r+0x946>
 800da44:	07f2      	lsls	r2, r6, #31
 800da46:	d505      	bpl.n	800da54 <_dtoa_r+0x4d4>
 800da48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da4c:	f7f2 fdf4 	bl	8000638 <__aeabi_dmul>
 800da50:	3501      	adds	r5, #1
 800da52:	2301      	movs	r3, #1
 800da54:	1076      	asrs	r6, r6, #1
 800da56:	3708      	adds	r7, #8
 800da58:	e777      	b.n	800d94a <_dtoa_r+0x3ca>
 800da5a:	2502      	movs	r5, #2
 800da5c:	e779      	b.n	800d952 <_dtoa_r+0x3d2>
 800da5e:	9f00      	ldr	r7, [sp, #0]
 800da60:	9e03      	ldr	r6, [sp, #12]
 800da62:	e794      	b.n	800d98e <_dtoa_r+0x40e>
 800da64:	9901      	ldr	r1, [sp, #4]
 800da66:	4b4c      	ldr	r3, [pc, #304]	; (800db98 <_dtoa_r+0x618>)
 800da68:	4431      	add	r1, r6
 800da6a:	910d      	str	r1, [sp, #52]	; 0x34
 800da6c:	9908      	ldr	r1, [sp, #32]
 800da6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800da72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da76:	2900      	cmp	r1, #0
 800da78:	d043      	beq.n	800db02 <_dtoa_r+0x582>
 800da7a:	494d      	ldr	r1, [pc, #308]	; (800dbb0 <_dtoa_r+0x630>)
 800da7c:	2000      	movs	r0, #0
 800da7e:	f7f2 ff05 	bl	800088c <__aeabi_ddiv>
 800da82:	4652      	mov	r2, sl
 800da84:	465b      	mov	r3, fp
 800da86:	f7f2 fc1f 	bl	80002c8 <__aeabi_dsub>
 800da8a:	9d01      	ldr	r5, [sp, #4]
 800da8c:	4682      	mov	sl, r0
 800da8e:	468b      	mov	fp, r1
 800da90:	4649      	mov	r1, r9
 800da92:	4640      	mov	r0, r8
 800da94:	f7f3 f880 	bl	8000b98 <__aeabi_d2iz>
 800da98:	4606      	mov	r6, r0
 800da9a:	f7f2 fd63 	bl	8000564 <__aeabi_i2d>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	4640      	mov	r0, r8
 800daa4:	4649      	mov	r1, r9
 800daa6:	f7f2 fc0f 	bl	80002c8 <__aeabi_dsub>
 800daaa:	3630      	adds	r6, #48	; 0x30
 800daac:	f805 6b01 	strb.w	r6, [r5], #1
 800dab0:	4652      	mov	r2, sl
 800dab2:	465b      	mov	r3, fp
 800dab4:	4680      	mov	r8, r0
 800dab6:	4689      	mov	r9, r1
 800dab8:	f7f3 f830 	bl	8000b1c <__aeabi_dcmplt>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d163      	bne.n	800db88 <_dtoa_r+0x608>
 800dac0:	4642      	mov	r2, r8
 800dac2:	464b      	mov	r3, r9
 800dac4:	4936      	ldr	r1, [pc, #216]	; (800dba0 <_dtoa_r+0x620>)
 800dac6:	2000      	movs	r0, #0
 800dac8:	f7f2 fbfe 	bl	80002c8 <__aeabi_dsub>
 800dacc:	4652      	mov	r2, sl
 800dace:	465b      	mov	r3, fp
 800dad0:	f7f3 f824 	bl	8000b1c <__aeabi_dcmplt>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	f040 80b5 	bne.w	800dc44 <_dtoa_r+0x6c4>
 800dada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dadc:	429d      	cmp	r5, r3
 800dade:	d081      	beq.n	800d9e4 <_dtoa_r+0x464>
 800dae0:	4b30      	ldr	r3, [pc, #192]	; (800dba4 <_dtoa_r+0x624>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	4650      	mov	r0, sl
 800dae6:	4659      	mov	r1, fp
 800dae8:	f7f2 fda6 	bl	8000638 <__aeabi_dmul>
 800daec:	4b2d      	ldr	r3, [pc, #180]	; (800dba4 <_dtoa_r+0x624>)
 800daee:	4682      	mov	sl, r0
 800daf0:	468b      	mov	fp, r1
 800daf2:	4640      	mov	r0, r8
 800daf4:	4649      	mov	r1, r9
 800daf6:	2200      	movs	r2, #0
 800daf8:	f7f2 fd9e 	bl	8000638 <__aeabi_dmul>
 800dafc:	4680      	mov	r8, r0
 800dafe:	4689      	mov	r9, r1
 800db00:	e7c6      	b.n	800da90 <_dtoa_r+0x510>
 800db02:	4650      	mov	r0, sl
 800db04:	4659      	mov	r1, fp
 800db06:	f7f2 fd97 	bl	8000638 <__aeabi_dmul>
 800db0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db0c:	9d01      	ldr	r5, [sp, #4]
 800db0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db10:	4682      	mov	sl, r0
 800db12:	468b      	mov	fp, r1
 800db14:	4649      	mov	r1, r9
 800db16:	4640      	mov	r0, r8
 800db18:	f7f3 f83e 	bl	8000b98 <__aeabi_d2iz>
 800db1c:	4606      	mov	r6, r0
 800db1e:	f7f2 fd21 	bl	8000564 <__aeabi_i2d>
 800db22:	3630      	adds	r6, #48	; 0x30
 800db24:	4602      	mov	r2, r0
 800db26:	460b      	mov	r3, r1
 800db28:	4640      	mov	r0, r8
 800db2a:	4649      	mov	r1, r9
 800db2c:	f7f2 fbcc 	bl	80002c8 <__aeabi_dsub>
 800db30:	f805 6b01 	strb.w	r6, [r5], #1
 800db34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db36:	429d      	cmp	r5, r3
 800db38:	4680      	mov	r8, r0
 800db3a:	4689      	mov	r9, r1
 800db3c:	f04f 0200 	mov.w	r2, #0
 800db40:	d124      	bne.n	800db8c <_dtoa_r+0x60c>
 800db42:	4b1b      	ldr	r3, [pc, #108]	; (800dbb0 <_dtoa_r+0x630>)
 800db44:	4650      	mov	r0, sl
 800db46:	4659      	mov	r1, fp
 800db48:	f7f2 fbc0 	bl	80002cc <__adddf3>
 800db4c:	4602      	mov	r2, r0
 800db4e:	460b      	mov	r3, r1
 800db50:	4640      	mov	r0, r8
 800db52:	4649      	mov	r1, r9
 800db54:	f7f3 f800 	bl	8000b58 <__aeabi_dcmpgt>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d173      	bne.n	800dc44 <_dtoa_r+0x6c4>
 800db5c:	4652      	mov	r2, sl
 800db5e:	465b      	mov	r3, fp
 800db60:	4913      	ldr	r1, [pc, #76]	; (800dbb0 <_dtoa_r+0x630>)
 800db62:	2000      	movs	r0, #0
 800db64:	f7f2 fbb0 	bl	80002c8 <__aeabi_dsub>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	f7f2 ffd4 	bl	8000b1c <__aeabi_dcmplt>
 800db74:	2800      	cmp	r0, #0
 800db76:	f43f af35 	beq.w	800d9e4 <_dtoa_r+0x464>
 800db7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800db7c:	1e6b      	subs	r3, r5, #1
 800db7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db84:	2b30      	cmp	r3, #48	; 0x30
 800db86:	d0f8      	beq.n	800db7a <_dtoa_r+0x5fa>
 800db88:	9700      	str	r7, [sp, #0]
 800db8a:	e049      	b.n	800dc20 <_dtoa_r+0x6a0>
 800db8c:	4b05      	ldr	r3, [pc, #20]	; (800dba4 <_dtoa_r+0x624>)
 800db8e:	f7f2 fd53 	bl	8000638 <__aeabi_dmul>
 800db92:	4680      	mov	r8, r0
 800db94:	4689      	mov	r9, r1
 800db96:	e7bd      	b.n	800db14 <_dtoa_r+0x594>
 800db98:	080108b0 	.word	0x080108b0
 800db9c:	08010888 	.word	0x08010888
 800dba0:	3ff00000 	.word	0x3ff00000
 800dba4:	40240000 	.word	0x40240000
 800dba8:	401c0000 	.word	0x401c0000
 800dbac:	40140000 	.word	0x40140000
 800dbb0:	3fe00000 	.word	0x3fe00000
 800dbb4:	9d01      	ldr	r5, [sp, #4]
 800dbb6:	4656      	mov	r6, sl
 800dbb8:	465f      	mov	r7, fp
 800dbba:	4642      	mov	r2, r8
 800dbbc:	464b      	mov	r3, r9
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	4639      	mov	r1, r7
 800dbc2:	f7f2 fe63 	bl	800088c <__aeabi_ddiv>
 800dbc6:	f7f2 ffe7 	bl	8000b98 <__aeabi_d2iz>
 800dbca:	4682      	mov	sl, r0
 800dbcc:	f7f2 fcca 	bl	8000564 <__aeabi_i2d>
 800dbd0:	4642      	mov	r2, r8
 800dbd2:	464b      	mov	r3, r9
 800dbd4:	f7f2 fd30 	bl	8000638 <__aeabi_dmul>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	460b      	mov	r3, r1
 800dbdc:	4630      	mov	r0, r6
 800dbde:	4639      	mov	r1, r7
 800dbe0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dbe4:	f7f2 fb70 	bl	80002c8 <__aeabi_dsub>
 800dbe8:	f805 6b01 	strb.w	r6, [r5], #1
 800dbec:	9e01      	ldr	r6, [sp, #4]
 800dbee:	9f03      	ldr	r7, [sp, #12]
 800dbf0:	1bae      	subs	r6, r5, r6
 800dbf2:	42b7      	cmp	r7, r6
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	d135      	bne.n	800dc66 <_dtoa_r+0x6e6>
 800dbfa:	f7f2 fb67 	bl	80002cc <__adddf3>
 800dbfe:	4642      	mov	r2, r8
 800dc00:	464b      	mov	r3, r9
 800dc02:	4606      	mov	r6, r0
 800dc04:	460f      	mov	r7, r1
 800dc06:	f7f2 ffa7 	bl	8000b58 <__aeabi_dcmpgt>
 800dc0a:	b9d0      	cbnz	r0, 800dc42 <_dtoa_r+0x6c2>
 800dc0c:	4642      	mov	r2, r8
 800dc0e:	464b      	mov	r3, r9
 800dc10:	4630      	mov	r0, r6
 800dc12:	4639      	mov	r1, r7
 800dc14:	f7f2 ff78 	bl	8000b08 <__aeabi_dcmpeq>
 800dc18:	b110      	cbz	r0, 800dc20 <_dtoa_r+0x6a0>
 800dc1a:	f01a 0f01 	tst.w	sl, #1
 800dc1e:	d110      	bne.n	800dc42 <_dtoa_r+0x6c2>
 800dc20:	4620      	mov	r0, r4
 800dc22:	ee18 1a10 	vmov	r1, s16
 800dc26:	f000 fae5 	bl	800e1f4 <_Bfree>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	9800      	ldr	r0, [sp, #0]
 800dc2e:	702b      	strb	r3, [r5, #0]
 800dc30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc32:	3001      	adds	r0, #1
 800dc34:	6018      	str	r0, [r3, #0]
 800dc36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f43f acf1 	beq.w	800d620 <_dtoa_r+0xa0>
 800dc3e:	601d      	str	r5, [r3, #0]
 800dc40:	e4ee      	b.n	800d620 <_dtoa_r+0xa0>
 800dc42:	9f00      	ldr	r7, [sp, #0]
 800dc44:	462b      	mov	r3, r5
 800dc46:	461d      	mov	r5, r3
 800dc48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc4c:	2a39      	cmp	r2, #57	; 0x39
 800dc4e:	d106      	bne.n	800dc5e <_dtoa_r+0x6de>
 800dc50:	9a01      	ldr	r2, [sp, #4]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d1f7      	bne.n	800dc46 <_dtoa_r+0x6c6>
 800dc56:	9901      	ldr	r1, [sp, #4]
 800dc58:	2230      	movs	r2, #48	; 0x30
 800dc5a:	3701      	adds	r7, #1
 800dc5c:	700a      	strb	r2, [r1, #0]
 800dc5e:	781a      	ldrb	r2, [r3, #0]
 800dc60:	3201      	adds	r2, #1
 800dc62:	701a      	strb	r2, [r3, #0]
 800dc64:	e790      	b.n	800db88 <_dtoa_r+0x608>
 800dc66:	4ba6      	ldr	r3, [pc, #664]	; (800df00 <_dtoa_r+0x980>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f7f2 fce5 	bl	8000638 <__aeabi_dmul>
 800dc6e:	2200      	movs	r2, #0
 800dc70:	2300      	movs	r3, #0
 800dc72:	4606      	mov	r6, r0
 800dc74:	460f      	mov	r7, r1
 800dc76:	f7f2 ff47 	bl	8000b08 <__aeabi_dcmpeq>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d09d      	beq.n	800dbba <_dtoa_r+0x63a>
 800dc7e:	e7cf      	b.n	800dc20 <_dtoa_r+0x6a0>
 800dc80:	9a08      	ldr	r2, [sp, #32]
 800dc82:	2a00      	cmp	r2, #0
 800dc84:	f000 80d7 	beq.w	800de36 <_dtoa_r+0x8b6>
 800dc88:	9a06      	ldr	r2, [sp, #24]
 800dc8a:	2a01      	cmp	r2, #1
 800dc8c:	f300 80ba 	bgt.w	800de04 <_dtoa_r+0x884>
 800dc90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc92:	2a00      	cmp	r2, #0
 800dc94:	f000 80b2 	beq.w	800ddfc <_dtoa_r+0x87c>
 800dc98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dc9c:	9e07      	ldr	r6, [sp, #28]
 800dc9e:	9d04      	ldr	r5, [sp, #16]
 800dca0:	9a04      	ldr	r2, [sp, #16]
 800dca2:	441a      	add	r2, r3
 800dca4:	9204      	str	r2, [sp, #16]
 800dca6:	9a05      	ldr	r2, [sp, #20]
 800dca8:	2101      	movs	r1, #1
 800dcaa:	441a      	add	r2, r3
 800dcac:	4620      	mov	r0, r4
 800dcae:	9205      	str	r2, [sp, #20]
 800dcb0:	f000 fb58 	bl	800e364 <__i2b>
 800dcb4:	4607      	mov	r7, r0
 800dcb6:	2d00      	cmp	r5, #0
 800dcb8:	dd0c      	ble.n	800dcd4 <_dtoa_r+0x754>
 800dcba:	9b05      	ldr	r3, [sp, #20]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dd09      	ble.n	800dcd4 <_dtoa_r+0x754>
 800dcc0:	42ab      	cmp	r3, r5
 800dcc2:	9a04      	ldr	r2, [sp, #16]
 800dcc4:	bfa8      	it	ge
 800dcc6:	462b      	movge	r3, r5
 800dcc8:	1ad2      	subs	r2, r2, r3
 800dcca:	9204      	str	r2, [sp, #16]
 800dccc:	9a05      	ldr	r2, [sp, #20]
 800dcce:	1aed      	subs	r5, r5, r3
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	9305      	str	r3, [sp, #20]
 800dcd4:	9b07      	ldr	r3, [sp, #28]
 800dcd6:	b31b      	cbz	r3, 800dd20 <_dtoa_r+0x7a0>
 800dcd8:	9b08      	ldr	r3, [sp, #32]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f000 80af 	beq.w	800de3e <_dtoa_r+0x8be>
 800dce0:	2e00      	cmp	r6, #0
 800dce2:	dd13      	ble.n	800dd0c <_dtoa_r+0x78c>
 800dce4:	4639      	mov	r1, r7
 800dce6:	4632      	mov	r2, r6
 800dce8:	4620      	mov	r0, r4
 800dcea:	f000 fbfb 	bl	800e4e4 <__pow5mult>
 800dcee:	ee18 2a10 	vmov	r2, s16
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	4607      	mov	r7, r0
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f000 fb4a 	bl	800e390 <__multiply>
 800dcfc:	ee18 1a10 	vmov	r1, s16
 800dd00:	4680      	mov	r8, r0
 800dd02:	4620      	mov	r0, r4
 800dd04:	f000 fa76 	bl	800e1f4 <_Bfree>
 800dd08:	ee08 8a10 	vmov	s16, r8
 800dd0c:	9b07      	ldr	r3, [sp, #28]
 800dd0e:	1b9a      	subs	r2, r3, r6
 800dd10:	d006      	beq.n	800dd20 <_dtoa_r+0x7a0>
 800dd12:	ee18 1a10 	vmov	r1, s16
 800dd16:	4620      	mov	r0, r4
 800dd18:	f000 fbe4 	bl	800e4e4 <__pow5mult>
 800dd1c:	ee08 0a10 	vmov	s16, r0
 800dd20:	2101      	movs	r1, #1
 800dd22:	4620      	mov	r0, r4
 800dd24:	f000 fb1e 	bl	800e364 <__i2b>
 800dd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	f340 8088 	ble.w	800de42 <_dtoa_r+0x8c2>
 800dd32:	461a      	mov	r2, r3
 800dd34:	4601      	mov	r1, r0
 800dd36:	4620      	mov	r0, r4
 800dd38:	f000 fbd4 	bl	800e4e4 <__pow5mult>
 800dd3c:	9b06      	ldr	r3, [sp, #24]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	4606      	mov	r6, r0
 800dd42:	f340 8081 	ble.w	800de48 <_dtoa_r+0x8c8>
 800dd46:	f04f 0800 	mov.w	r8, #0
 800dd4a:	6933      	ldr	r3, [r6, #16]
 800dd4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dd50:	6918      	ldr	r0, [r3, #16]
 800dd52:	f000 fab7 	bl	800e2c4 <__hi0bits>
 800dd56:	f1c0 0020 	rsb	r0, r0, #32
 800dd5a:	9b05      	ldr	r3, [sp, #20]
 800dd5c:	4418      	add	r0, r3
 800dd5e:	f010 001f 	ands.w	r0, r0, #31
 800dd62:	f000 8092 	beq.w	800de8a <_dtoa_r+0x90a>
 800dd66:	f1c0 0320 	rsb	r3, r0, #32
 800dd6a:	2b04      	cmp	r3, #4
 800dd6c:	f340 808a 	ble.w	800de84 <_dtoa_r+0x904>
 800dd70:	f1c0 001c 	rsb	r0, r0, #28
 800dd74:	9b04      	ldr	r3, [sp, #16]
 800dd76:	4403      	add	r3, r0
 800dd78:	9304      	str	r3, [sp, #16]
 800dd7a:	9b05      	ldr	r3, [sp, #20]
 800dd7c:	4403      	add	r3, r0
 800dd7e:	4405      	add	r5, r0
 800dd80:	9305      	str	r3, [sp, #20]
 800dd82:	9b04      	ldr	r3, [sp, #16]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	dd07      	ble.n	800dd98 <_dtoa_r+0x818>
 800dd88:	ee18 1a10 	vmov	r1, s16
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f000 fc02 	bl	800e598 <__lshift>
 800dd94:	ee08 0a10 	vmov	s16, r0
 800dd98:	9b05      	ldr	r3, [sp, #20]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	dd05      	ble.n	800ddaa <_dtoa_r+0x82a>
 800dd9e:	4631      	mov	r1, r6
 800dda0:	461a      	mov	r2, r3
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 fbf8 	bl	800e598 <__lshift>
 800dda8:	4606      	mov	r6, r0
 800ddaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d06e      	beq.n	800de8e <_dtoa_r+0x90e>
 800ddb0:	ee18 0a10 	vmov	r0, s16
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	f000 fc5f 	bl	800e678 <__mcmp>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	da67      	bge.n	800de8e <_dtoa_r+0x90e>
 800ddbe:	9b00      	ldr	r3, [sp, #0]
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	ee18 1a10 	vmov	r1, s16
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	220a      	movs	r2, #10
 800ddca:	2300      	movs	r3, #0
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f000 fa33 	bl	800e238 <__multadd>
 800ddd2:	9b08      	ldr	r3, [sp, #32]
 800ddd4:	ee08 0a10 	vmov	s16, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f000 81b1 	beq.w	800e140 <_dtoa_r+0xbc0>
 800ddde:	2300      	movs	r3, #0
 800dde0:	4639      	mov	r1, r7
 800dde2:	220a      	movs	r2, #10
 800dde4:	4620      	mov	r0, r4
 800dde6:	f000 fa27 	bl	800e238 <__multadd>
 800ddea:	9b02      	ldr	r3, [sp, #8]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	4607      	mov	r7, r0
 800ddf0:	f300 808e 	bgt.w	800df10 <_dtoa_r+0x990>
 800ddf4:	9b06      	ldr	r3, [sp, #24]
 800ddf6:	2b02      	cmp	r3, #2
 800ddf8:	dc51      	bgt.n	800de9e <_dtoa_r+0x91e>
 800ddfa:	e089      	b.n	800df10 <_dtoa_r+0x990>
 800ddfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ddfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de02:	e74b      	b.n	800dc9c <_dtoa_r+0x71c>
 800de04:	9b03      	ldr	r3, [sp, #12]
 800de06:	1e5e      	subs	r6, r3, #1
 800de08:	9b07      	ldr	r3, [sp, #28]
 800de0a:	42b3      	cmp	r3, r6
 800de0c:	bfbf      	itttt	lt
 800de0e:	9b07      	ldrlt	r3, [sp, #28]
 800de10:	9607      	strlt	r6, [sp, #28]
 800de12:	1af2      	sublt	r2, r6, r3
 800de14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800de16:	bfb6      	itet	lt
 800de18:	189b      	addlt	r3, r3, r2
 800de1a:	1b9e      	subge	r6, r3, r6
 800de1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	bfb8      	it	lt
 800de22:	2600      	movlt	r6, #0
 800de24:	2b00      	cmp	r3, #0
 800de26:	bfb7      	itett	lt
 800de28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800de2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800de30:	1a9d      	sublt	r5, r3, r2
 800de32:	2300      	movlt	r3, #0
 800de34:	e734      	b.n	800dca0 <_dtoa_r+0x720>
 800de36:	9e07      	ldr	r6, [sp, #28]
 800de38:	9d04      	ldr	r5, [sp, #16]
 800de3a:	9f08      	ldr	r7, [sp, #32]
 800de3c:	e73b      	b.n	800dcb6 <_dtoa_r+0x736>
 800de3e:	9a07      	ldr	r2, [sp, #28]
 800de40:	e767      	b.n	800dd12 <_dtoa_r+0x792>
 800de42:	9b06      	ldr	r3, [sp, #24]
 800de44:	2b01      	cmp	r3, #1
 800de46:	dc18      	bgt.n	800de7a <_dtoa_r+0x8fa>
 800de48:	f1ba 0f00 	cmp.w	sl, #0
 800de4c:	d115      	bne.n	800de7a <_dtoa_r+0x8fa>
 800de4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de52:	b993      	cbnz	r3, 800de7a <_dtoa_r+0x8fa>
 800de54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de58:	0d1b      	lsrs	r3, r3, #20
 800de5a:	051b      	lsls	r3, r3, #20
 800de5c:	b183      	cbz	r3, 800de80 <_dtoa_r+0x900>
 800de5e:	9b04      	ldr	r3, [sp, #16]
 800de60:	3301      	adds	r3, #1
 800de62:	9304      	str	r3, [sp, #16]
 800de64:	9b05      	ldr	r3, [sp, #20]
 800de66:	3301      	adds	r3, #1
 800de68:	9305      	str	r3, [sp, #20]
 800de6a:	f04f 0801 	mov.w	r8, #1
 800de6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de70:	2b00      	cmp	r3, #0
 800de72:	f47f af6a 	bne.w	800dd4a <_dtoa_r+0x7ca>
 800de76:	2001      	movs	r0, #1
 800de78:	e76f      	b.n	800dd5a <_dtoa_r+0x7da>
 800de7a:	f04f 0800 	mov.w	r8, #0
 800de7e:	e7f6      	b.n	800de6e <_dtoa_r+0x8ee>
 800de80:	4698      	mov	r8, r3
 800de82:	e7f4      	b.n	800de6e <_dtoa_r+0x8ee>
 800de84:	f43f af7d 	beq.w	800dd82 <_dtoa_r+0x802>
 800de88:	4618      	mov	r0, r3
 800de8a:	301c      	adds	r0, #28
 800de8c:	e772      	b.n	800dd74 <_dtoa_r+0x7f4>
 800de8e:	9b03      	ldr	r3, [sp, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	dc37      	bgt.n	800df04 <_dtoa_r+0x984>
 800de94:	9b06      	ldr	r3, [sp, #24]
 800de96:	2b02      	cmp	r3, #2
 800de98:	dd34      	ble.n	800df04 <_dtoa_r+0x984>
 800de9a:	9b03      	ldr	r3, [sp, #12]
 800de9c:	9302      	str	r3, [sp, #8]
 800de9e:	9b02      	ldr	r3, [sp, #8]
 800dea0:	b96b      	cbnz	r3, 800debe <_dtoa_r+0x93e>
 800dea2:	4631      	mov	r1, r6
 800dea4:	2205      	movs	r2, #5
 800dea6:	4620      	mov	r0, r4
 800dea8:	f000 f9c6 	bl	800e238 <__multadd>
 800deac:	4601      	mov	r1, r0
 800deae:	4606      	mov	r6, r0
 800deb0:	ee18 0a10 	vmov	r0, s16
 800deb4:	f000 fbe0 	bl	800e678 <__mcmp>
 800deb8:	2800      	cmp	r0, #0
 800deba:	f73f adbb 	bgt.w	800da34 <_dtoa_r+0x4b4>
 800debe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dec0:	9d01      	ldr	r5, [sp, #4]
 800dec2:	43db      	mvns	r3, r3
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	f04f 0800 	mov.w	r8, #0
 800deca:	4631      	mov	r1, r6
 800decc:	4620      	mov	r0, r4
 800dece:	f000 f991 	bl	800e1f4 <_Bfree>
 800ded2:	2f00      	cmp	r7, #0
 800ded4:	f43f aea4 	beq.w	800dc20 <_dtoa_r+0x6a0>
 800ded8:	f1b8 0f00 	cmp.w	r8, #0
 800dedc:	d005      	beq.n	800deea <_dtoa_r+0x96a>
 800dede:	45b8      	cmp	r8, r7
 800dee0:	d003      	beq.n	800deea <_dtoa_r+0x96a>
 800dee2:	4641      	mov	r1, r8
 800dee4:	4620      	mov	r0, r4
 800dee6:	f000 f985 	bl	800e1f4 <_Bfree>
 800deea:	4639      	mov	r1, r7
 800deec:	4620      	mov	r0, r4
 800deee:	f000 f981 	bl	800e1f4 <_Bfree>
 800def2:	e695      	b.n	800dc20 <_dtoa_r+0x6a0>
 800def4:	2600      	movs	r6, #0
 800def6:	4637      	mov	r7, r6
 800def8:	e7e1      	b.n	800debe <_dtoa_r+0x93e>
 800defa:	9700      	str	r7, [sp, #0]
 800defc:	4637      	mov	r7, r6
 800defe:	e599      	b.n	800da34 <_dtoa_r+0x4b4>
 800df00:	40240000 	.word	0x40240000
 800df04:	9b08      	ldr	r3, [sp, #32]
 800df06:	2b00      	cmp	r3, #0
 800df08:	f000 80ca 	beq.w	800e0a0 <_dtoa_r+0xb20>
 800df0c:	9b03      	ldr	r3, [sp, #12]
 800df0e:	9302      	str	r3, [sp, #8]
 800df10:	2d00      	cmp	r5, #0
 800df12:	dd05      	ble.n	800df20 <_dtoa_r+0x9a0>
 800df14:	4639      	mov	r1, r7
 800df16:	462a      	mov	r2, r5
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 fb3d 	bl	800e598 <__lshift>
 800df1e:	4607      	mov	r7, r0
 800df20:	f1b8 0f00 	cmp.w	r8, #0
 800df24:	d05b      	beq.n	800dfde <_dtoa_r+0xa5e>
 800df26:	6879      	ldr	r1, [r7, #4]
 800df28:	4620      	mov	r0, r4
 800df2a:	f000 f923 	bl	800e174 <_Balloc>
 800df2e:	4605      	mov	r5, r0
 800df30:	b928      	cbnz	r0, 800df3e <_dtoa_r+0x9be>
 800df32:	4b87      	ldr	r3, [pc, #540]	; (800e150 <_dtoa_r+0xbd0>)
 800df34:	4602      	mov	r2, r0
 800df36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df3a:	f7ff bb3b 	b.w	800d5b4 <_dtoa_r+0x34>
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	3202      	adds	r2, #2
 800df42:	0092      	lsls	r2, r2, #2
 800df44:	f107 010c 	add.w	r1, r7, #12
 800df48:	300c      	adds	r0, #12
 800df4a:	f7fe fe0d 	bl	800cb68 <memcpy>
 800df4e:	2201      	movs	r2, #1
 800df50:	4629      	mov	r1, r5
 800df52:	4620      	mov	r0, r4
 800df54:	f000 fb20 	bl	800e598 <__lshift>
 800df58:	9b01      	ldr	r3, [sp, #4]
 800df5a:	f103 0901 	add.w	r9, r3, #1
 800df5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800df62:	4413      	add	r3, r2
 800df64:	9305      	str	r3, [sp, #20]
 800df66:	f00a 0301 	and.w	r3, sl, #1
 800df6a:	46b8      	mov	r8, r7
 800df6c:	9304      	str	r3, [sp, #16]
 800df6e:	4607      	mov	r7, r0
 800df70:	4631      	mov	r1, r6
 800df72:	ee18 0a10 	vmov	r0, s16
 800df76:	f7ff fa77 	bl	800d468 <quorem>
 800df7a:	4641      	mov	r1, r8
 800df7c:	9002      	str	r0, [sp, #8]
 800df7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df82:	ee18 0a10 	vmov	r0, s16
 800df86:	f000 fb77 	bl	800e678 <__mcmp>
 800df8a:	463a      	mov	r2, r7
 800df8c:	9003      	str	r0, [sp, #12]
 800df8e:	4631      	mov	r1, r6
 800df90:	4620      	mov	r0, r4
 800df92:	f000 fb8d 	bl	800e6b0 <__mdiff>
 800df96:	68c2      	ldr	r2, [r0, #12]
 800df98:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800df9c:	4605      	mov	r5, r0
 800df9e:	bb02      	cbnz	r2, 800dfe2 <_dtoa_r+0xa62>
 800dfa0:	4601      	mov	r1, r0
 800dfa2:	ee18 0a10 	vmov	r0, s16
 800dfa6:	f000 fb67 	bl	800e678 <__mcmp>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	4629      	mov	r1, r5
 800dfae:	4620      	mov	r0, r4
 800dfb0:	9207      	str	r2, [sp, #28]
 800dfb2:	f000 f91f 	bl	800e1f4 <_Bfree>
 800dfb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dfba:	ea43 0102 	orr.w	r1, r3, r2
 800dfbe:	9b04      	ldr	r3, [sp, #16]
 800dfc0:	430b      	orrs	r3, r1
 800dfc2:	464d      	mov	r5, r9
 800dfc4:	d10f      	bne.n	800dfe6 <_dtoa_r+0xa66>
 800dfc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dfca:	d02a      	beq.n	800e022 <_dtoa_r+0xaa2>
 800dfcc:	9b03      	ldr	r3, [sp, #12]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	dd02      	ble.n	800dfd8 <_dtoa_r+0xa58>
 800dfd2:	9b02      	ldr	r3, [sp, #8]
 800dfd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dfd8:	f88b a000 	strb.w	sl, [fp]
 800dfdc:	e775      	b.n	800deca <_dtoa_r+0x94a>
 800dfde:	4638      	mov	r0, r7
 800dfe0:	e7ba      	b.n	800df58 <_dtoa_r+0x9d8>
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	e7e2      	b.n	800dfac <_dtoa_r+0xa2c>
 800dfe6:	9b03      	ldr	r3, [sp, #12]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	db04      	blt.n	800dff6 <_dtoa_r+0xa76>
 800dfec:	9906      	ldr	r1, [sp, #24]
 800dfee:	430b      	orrs	r3, r1
 800dff0:	9904      	ldr	r1, [sp, #16]
 800dff2:	430b      	orrs	r3, r1
 800dff4:	d122      	bne.n	800e03c <_dtoa_r+0xabc>
 800dff6:	2a00      	cmp	r2, #0
 800dff8:	ddee      	ble.n	800dfd8 <_dtoa_r+0xa58>
 800dffa:	ee18 1a10 	vmov	r1, s16
 800dffe:	2201      	movs	r2, #1
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fac9 	bl	800e598 <__lshift>
 800e006:	4631      	mov	r1, r6
 800e008:	ee08 0a10 	vmov	s16, r0
 800e00c:	f000 fb34 	bl	800e678 <__mcmp>
 800e010:	2800      	cmp	r0, #0
 800e012:	dc03      	bgt.n	800e01c <_dtoa_r+0xa9c>
 800e014:	d1e0      	bne.n	800dfd8 <_dtoa_r+0xa58>
 800e016:	f01a 0f01 	tst.w	sl, #1
 800e01a:	d0dd      	beq.n	800dfd8 <_dtoa_r+0xa58>
 800e01c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e020:	d1d7      	bne.n	800dfd2 <_dtoa_r+0xa52>
 800e022:	2339      	movs	r3, #57	; 0x39
 800e024:	f88b 3000 	strb.w	r3, [fp]
 800e028:	462b      	mov	r3, r5
 800e02a:	461d      	mov	r5, r3
 800e02c:	3b01      	subs	r3, #1
 800e02e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e032:	2a39      	cmp	r2, #57	; 0x39
 800e034:	d071      	beq.n	800e11a <_dtoa_r+0xb9a>
 800e036:	3201      	adds	r2, #1
 800e038:	701a      	strb	r2, [r3, #0]
 800e03a:	e746      	b.n	800deca <_dtoa_r+0x94a>
 800e03c:	2a00      	cmp	r2, #0
 800e03e:	dd07      	ble.n	800e050 <_dtoa_r+0xad0>
 800e040:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e044:	d0ed      	beq.n	800e022 <_dtoa_r+0xaa2>
 800e046:	f10a 0301 	add.w	r3, sl, #1
 800e04a:	f88b 3000 	strb.w	r3, [fp]
 800e04e:	e73c      	b.n	800deca <_dtoa_r+0x94a>
 800e050:	9b05      	ldr	r3, [sp, #20]
 800e052:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e056:	4599      	cmp	r9, r3
 800e058:	d047      	beq.n	800e0ea <_dtoa_r+0xb6a>
 800e05a:	ee18 1a10 	vmov	r1, s16
 800e05e:	2300      	movs	r3, #0
 800e060:	220a      	movs	r2, #10
 800e062:	4620      	mov	r0, r4
 800e064:	f000 f8e8 	bl	800e238 <__multadd>
 800e068:	45b8      	cmp	r8, r7
 800e06a:	ee08 0a10 	vmov	s16, r0
 800e06e:	f04f 0300 	mov.w	r3, #0
 800e072:	f04f 020a 	mov.w	r2, #10
 800e076:	4641      	mov	r1, r8
 800e078:	4620      	mov	r0, r4
 800e07a:	d106      	bne.n	800e08a <_dtoa_r+0xb0a>
 800e07c:	f000 f8dc 	bl	800e238 <__multadd>
 800e080:	4680      	mov	r8, r0
 800e082:	4607      	mov	r7, r0
 800e084:	f109 0901 	add.w	r9, r9, #1
 800e088:	e772      	b.n	800df70 <_dtoa_r+0x9f0>
 800e08a:	f000 f8d5 	bl	800e238 <__multadd>
 800e08e:	4639      	mov	r1, r7
 800e090:	4680      	mov	r8, r0
 800e092:	2300      	movs	r3, #0
 800e094:	220a      	movs	r2, #10
 800e096:	4620      	mov	r0, r4
 800e098:	f000 f8ce 	bl	800e238 <__multadd>
 800e09c:	4607      	mov	r7, r0
 800e09e:	e7f1      	b.n	800e084 <_dtoa_r+0xb04>
 800e0a0:	9b03      	ldr	r3, [sp, #12]
 800e0a2:	9302      	str	r3, [sp, #8]
 800e0a4:	9d01      	ldr	r5, [sp, #4]
 800e0a6:	ee18 0a10 	vmov	r0, s16
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	f7ff f9dc 	bl	800d468 <quorem>
 800e0b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e0b4:	9b01      	ldr	r3, [sp, #4]
 800e0b6:	f805 ab01 	strb.w	sl, [r5], #1
 800e0ba:	1aea      	subs	r2, r5, r3
 800e0bc:	9b02      	ldr	r3, [sp, #8]
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	dd09      	ble.n	800e0d6 <_dtoa_r+0xb56>
 800e0c2:	ee18 1a10 	vmov	r1, s16
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	220a      	movs	r2, #10
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 f8b4 	bl	800e238 <__multadd>
 800e0d0:	ee08 0a10 	vmov	s16, r0
 800e0d4:	e7e7      	b.n	800e0a6 <_dtoa_r+0xb26>
 800e0d6:	9b02      	ldr	r3, [sp, #8]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	bfc8      	it	gt
 800e0dc:	461d      	movgt	r5, r3
 800e0de:	9b01      	ldr	r3, [sp, #4]
 800e0e0:	bfd8      	it	le
 800e0e2:	2501      	movle	r5, #1
 800e0e4:	441d      	add	r5, r3
 800e0e6:	f04f 0800 	mov.w	r8, #0
 800e0ea:	ee18 1a10 	vmov	r1, s16
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f000 fa51 	bl	800e598 <__lshift>
 800e0f6:	4631      	mov	r1, r6
 800e0f8:	ee08 0a10 	vmov	s16, r0
 800e0fc:	f000 fabc 	bl	800e678 <__mcmp>
 800e100:	2800      	cmp	r0, #0
 800e102:	dc91      	bgt.n	800e028 <_dtoa_r+0xaa8>
 800e104:	d102      	bne.n	800e10c <_dtoa_r+0xb8c>
 800e106:	f01a 0f01 	tst.w	sl, #1
 800e10a:	d18d      	bne.n	800e028 <_dtoa_r+0xaa8>
 800e10c:	462b      	mov	r3, r5
 800e10e:	461d      	mov	r5, r3
 800e110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e114:	2a30      	cmp	r2, #48	; 0x30
 800e116:	d0fa      	beq.n	800e10e <_dtoa_r+0xb8e>
 800e118:	e6d7      	b.n	800deca <_dtoa_r+0x94a>
 800e11a:	9a01      	ldr	r2, [sp, #4]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d184      	bne.n	800e02a <_dtoa_r+0xaaa>
 800e120:	9b00      	ldr	r3, [sp, #0]
 800e122:	3301      	adds	r3, #1
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	2331      	movs	r3, #49	; 0x31
 800e128:	7013      	strb	r3, [r2, #0]
 800e12a:	e6ce      	b.n	800deca <_dtoa_r+0x94a>
 800e12c:	4b09      	ldr	r3, [pc, #36]	; (800e154 <_dtoa_r+0xbd4>)
 800e12e:	f7ff ba95 	b.w	800d65c <_dtoa_r+0xdc>
 800e132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e134:	2b00      	cmp	r3, #0
 800e136:	f47f aa6e 	bne.w	800d616 <_dtoa_r+0x96>
 800e13a:	4b07      	ldr	r3, [pc, #28]	; (800e158 <_dtoa_r+0xbd8>)
 800e13c:	f7ff ba8e 	b.w	800d65c <_dtoa_r+0xdc>
 800e140:	9b02      	ldr	r3, [sp, #8]
 800e142:	2b00      	cmp	r3, #0
 800e144:	dcae      	bgt.n	800e0a4 <_dtoa_r+0xb24>
 800e146:	9b06      	ldr	r3, [sp, #24]
 800e148:	2b02      	cmp	r3, #2
 800e14a:	f73f aea8 	bgt.w	800de9e <_dtoa_r+0x91e>
 800e14e:	e7a9      	b.n	800e0a4 <_dtoa_r+0xb24>
 800e150:	08010817 	.word	0x08010817
 800e154:	08010774 	.word	0x08010774
 800e158:	08010798 	.word	0x08010798

0800e15c <_localeconv_r>:
 800e15c:	4800      	ldr	r0, [pc, #0]	; (800e160 <_localeconv_r+0x4>)
 800e15e:	4770      	bx	lr
 800e160:	20000288 	.word	0x20000288

0800e164 <malloc>:
 800e164:	4b02      	ldr	r3, [pc, #8]	; (800e170 <malloc+0xc>)
 800e166:	4601      	mov	r1, r0
 800e168:	6818      	ldr	r0, [r3, #0]
 800e16a:	f000 bc09 	b.w	800e980 <_malloc_r>
 800e16e:	bf00      	nop
 800e170:	20000134 	.word	0x20000134

0800e174 <_Balloc>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e178:	4604      	mov	r4, r0
 800e17a:	460d      	mov	r5, r1
 800e17c:	b976      	cbnz	r6, 800e19c <_Balloc+0x28>
 800e17e:	2010      	movs	r0, #16
 800e180:	f7ff fff0 	bl	800e164 <malloc>
 800e184:	4602      	mov	r2, r0
 800e186:	6260      	str	r0, [r4, #36]	; 0x24
 800e188:	b920      	cbnz	r0, 800e194 <_Balloc+0x20>
 800e18a:	4b18      	ldr	r3, [pc, #96]	; (800e1ec <_Balloc+0x78>)
 800e18c:	4818      	ldr	r0, [pc, #96]	; (800e1f0 <_Balloc+0x7c>)
 800e18e:	2166      	movs	r1, #102	; 0x66
 800e190:	f000 fc7a 	bl	800ea88 <__assert_func>
 800e194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e198:	6006      	str	r6, [r0, #0]
 800e19a:	60c6      	str	r6, [r0, #12]
 800e19c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e19e:	68f3      	ldr	r3, [r6, #12]
 800e1a0:	b183      	cbz	r3, 800e1c4 <_Balloc+0x50>
 800e1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1aa:	b9b8      	cbnz	r0, 800e1dc <_Balloc+0x68>
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	fa01 f605 	lsl.w	r6, r1, r5
 800e1b2:	1d72      	adds	r2, r6, #5
 800e1b4:	0092      	lsls	r2, r2, #2
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f000 fb60 	bl	800e87c <_calloc_r>
 800e1bc:	b160      	cbz	r0, 800e1d8 <_Balloc+0x64>
 800e1be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1c2:	e00e      	b.n	800e1e2 <_Balloc+0x6e>
 800e1c4:	2221      	movs	r2, #33	; 0x21
 800e1c6:	2104      	movs	r1, #4
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f000 fb57 	bl	800e87c <_calloc_r>
 800e1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1d0:	60f0      	str	r0, [r6, #12]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d1e4      	bne.n	800e1a2 <_Balloc+0x2e>
 800e1d8:	2000      	movs	r0, #0
 800e1da:	bd70      	pop	{r4, r5, r6, pc}
 800e1dc:	6802      	ldr	r2, [r0, #0]
 800e1de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1e8:	e7f7      	b.n	800e1da <_Balloc+0x66>
 800e1ea:	bf00      	nop
 800e1ec:	080107a5 	.word	0x080107a5
 800e1f0:	08010828 	.word	0x08010828

0800e1f4 <_Bfree>:
 800e1f4:	b570      	push	{r4, r5, r6, lr}
 800e1f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1f8:	4605      	mov	r5, r0
 800e1fa:	460c      	mov	r4, r1
 800e1fc:	b976      	cbnz	r6, 800e21c <_Bfree+0x28>
 800e1fe:	2010      	movs	r0, #16
 800e200:	f7ff ffb0 	bl	800e164 <malloc>
 800e204:	4602      	mov	r2, r0
 800e206:	6268      	str	r0, [r5, #36]	; 0x24
 800e208:	b920      	cbnz	r0, 800e214 <_Bfree+0x20>
 800e20a:	4b09      	ldr	r3, [pc, #36]	; (800e230 <_Bfree+0x3c>)
 800e20c:	4809      	ldr	r0, [pc, #36]	; (800e234 <_Bfree+0x40>)
 800e20e:	218a      	movs	r1, #138	; 0x8a
 800e210:	f000 fc3a 	bl	800ea88 <__assert_func>
 800e214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e218:	6006      	str	r6, [r0, #0]
 800e21a:	60c6      	str	r6, [r0, #12]
 800e21c:	b13c      	cbz	r4, 800e22e <_Bfree+0x3a>
 800e21e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e220:	6862      	ldr	r2, [r4, #4]
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e228:	6021      	str	r1, [r4, #0]
 800e22a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e22e:	bd70      	pop	{r4, r5, r6, pc}
 800e230:	080107a5 	.word	0x080107a5
 800e234:	08010828 	.word	0x08010828

0800e238 <__multadd>:
 800e238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23c:	690d      	ldr	r5, [r1, #16]
 800e23e:	4607      	mov	r7, r0
 800e240:	460c      	mov	r4, r1
 800e242:	461e      	mov	r6, r3
 800e244:	f101 0c14 	add.w	ip, r1, #20
 800e248:	2000      	movs	r0, #0
 800e24a:	f8dc 3000 	ldr.w	r3, [ip]
 800e24e:	b299      	uxth	r1, r3
 800e250:	fb02 6101 	mla	r1, r2, r1, r6
 800e254:	0c1e      	lsrs	r6, r3, #16
 800e256:	0c0b      	lsrs	r3, r1, #16
 800e258:	fb02 3306 	mla	r3, r2, r6, r3
 800e25c:	b289      	uxth	r1, r1
 800e25e:	3001      	adds	r0, #1
 800e260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e264:	4285      	cmp	r5, r0
 800e266:	f84c 1b04 	str.w	r1, [ip], #4
 800e26a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e26e:	dcec      	bgt.n	800e24a <__multadd+0x12>
 800e270:	b30e      	cbz	r6, 800e2b6 <__multadd+0x7e>
 800e272:	68a3      	ldr	r3, [r4, #8]
 800e274:	42ab      	cmp	r3, r5
 800e276:	dc19      	bgt.n	800e2ac <__multadd+0x74>
 800e278:	6861      	ldr	r1, [r4, #4]
 800e27a:	4638      	mov	r0, r7
 800e27c:	3101      	adds	r1, #1
 800e27e:	f7ff ff79 	bl	800e174 <_Balloc>
 800e282:	4680      	mov	r8, r0
 800e284:	b928      	cbnz	r0, 800e292 <__multadd+0x5a>
 800e286:	4602      	mov	r2, r0
 800e288:	4b0c      	ldr	r3, [pc, #48]	; (800e2bc <__multadd+0x84>)
 800e28a:	480d      	ldr	r0, [pc, #52]	; (800e2c0 <__multadd+0x88>)
 800e28c:	21b5      	movs	r1, #181	; 0xb5
 800e28e:	f000 fbfb 	bl	800ea88 <__assert_func>
 800e292:	6922      	ldr	r2, [r4, #16]
 800e294:	3202      	adds	r2, #2
 800e296:	f104 010c 	add.w	r1, r4, #12
 800e29a:	0092      	lsls	r2, r2, #2
 800e29c:	300c      	adds	r0, #12
 800e29e:	f7fe fc63 	bl	800cb68 <memcpy>
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	f7ff ffa5 	bl	800e1f4 <_Bfree>
 800e2aa:	4644      	mov	r4, r8
 800e2ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2b0:	3501      	adds	r5, #1
 800e2b2:	615e      	str	r6, [r3, #20]
 800e2b4:	6125      	str	r5, [r4, #16]
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2bc:	08010817 	.word	0x08010817
 800e2c0:	08010828 	.word	0x08010828

0800e2c4 <__hi0bits>:
 800e2c4:	0c03      	lsrs	r3, r0, #16
 800e2c6:	041b      	lsls	r3, r3, #16
 800e2c8:	b9d3      	cbnz	r3, 800e300 <__hi0bits+0x3c>
 800e2ca:	0400      	lsls	r0, r0, #16
 800e2cc:	2310      	movs	r3, #16
 800e2ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e2d2:	bf04      	itt	eq
 800e2d4:	0200      	lsleq	r0, r0, #8
 800e2d6:	3308      	addeq	r3, #8
 800e2d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e2dc:	bf04      	itt	eq
 800e2de:	0100      	lsleq	r0, r0, #4
 800e2e0:	3304      	addeq	r3, #4
 800e2e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e2e6:	bf04      	itt	eq
 800e2e8:	0080      	lsleq	r0, r0, #2
 800e2ea:	3302      	addeq	r3, #2
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	db05      	blt.n	800e2fc <__hi0bits+0x38>
 800e2f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e2f4:	f103 0301 	add.w	r3, r3, #1
 800e2f8:	bf08      	it	eq
 800e2fa:	2320      	moveq	r3, #32
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	4770      	bx	lr
 800e300:	2300      	movs	r3, #0
 800e302:	e7e4      	b.n	800e2ce <__hi0bits+0xa>

0800e304 <__lo0bits>:
 800e304:	6803      	ldr	r3, [r0, #0]
 800e306:	f013 0207 	ands.w	r2, r3, #7
 800e30a:	4601      	mov	r1, r0
 800e30c:	d00b      	beq.n	800e326 <__lo0bits+0x22>
 800e30e:	07da      	lsls	r2, r3, #31
 800e310:	d423      	bmi.n	800e35a <__lo0bits+0x56>
 800e312:	0798      	lsls	r0, r3, #30
 800e314:	bf49      	itett	mi
 800e316:	085b      	lsrmi	r3, r3, #1
 800e318:	089b      	lsrpl	r3, r3, #2
 800e31a:	2001      	movmi	r0, #1
 800e31c:	600b      	strmi	r3, [r1, #0]
 800e31e:	bf5c      	itt	pl
 800e320:	600b      	strpl	r3, [r1, #0]
 800e322:	2002      	movpl	r0, #2
 800e324:	4770      	bx	lr
 800e326:	b298      	uxth	r0, r3
 800e328:	b9a8      	cbnz	r0, 800e356 <__lo0bits+0x52>
 800e32a:	0c1b      	lsrs	r3, r3, #16
 800e32c:	2010      	movs	r0, #16
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	b90a      	cbnz	r2, 800e336 <__lo0bits+0x32>
 800e332:	3008      	adds	r0, #8
 800e334:	0a1b      	lsrs	r3, r3, #8
 800e336:	071a      	lsls	r2, r3, #28
 800e338:	bf04      	itt	eq
 800e33a:	091b      	lsreq	r3, r3, #4
 800e33c:	3004      	addeq	r0, #4
 800e33e:	079a      	lsls	r2, r3, #30
 800e340:	bf04      	itt	eq
 800e342:	089b      	lsreq	r3, r3, #2
 800e344:	3002      	addeq	r0, #2
 800e346:	07da      	lsls	r2, r3, #31
 800e348:	d403      	bmi.n	800e352 <__lo0bits+0x4e>
 800e34a:	085b      	lsrs	r3, r3, #1
 800e34c:	f100 0001 	add.w	r0, r0, #1
 800e350:	d005      	beq.n	800e35e <__lo0bits+0x5a>
 800e352:	600b      	str	r3, [r1, #0]
 800e354:	4770      	bx	lr
 800e356:	4610      	mov	r0, r2
 800e358:	e7e9      	b.n	800e32e <__lo0bits+0x2a>
 800e35a:	2000      	movs	r0, #0
 800e35c:	4770      	bx	lr
 800e35e:	2020      	movs	r0, #32
 800e360:	4770      	bx	lr
	...

0800e364 <__i2b>:
 800e364:	b510      	push	{r4, lr}
 800e366:	460c      	mov	r4, r1
 800e368:	2101      	movs	r1, #1
 800e36a:	f7ff ff03 	bl	800e174 <_Balloc>
 800e36e:	4602      	mov	r2, r0
 800e370:	b928      	cbnz	r0, 800e37e <__i2b+0x1a>
 800e372:	4b05      	ldr	r3, [pc, #20]	; (800e388 <__i2b+0x24>)
 800e374:	4805      	ldr	r0, [pc, #20]	; (800e38c <__i2b+0x28>)
 800e376:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e37a:	f000 fb85 	bl	800ea88 <__assert_func>
 800e37e:	2301      	movs	r3, #1
 800e380:	6144      	str	r4, [r0, #20]
 800e382:	6103      	str	r3, [r0, #16]
 800e384:	bd10      	pop	{r4, pc}
 800e386:	bf00      	nop
 800e388:	08010817 	.word	0x08010817
 800e38c:	08010828 	.word	0x08010828

0800e390 <__multiply>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	4691      	mov	r9, r2
 800e396:	690a      	ldr	r2, [r1, #16]
 800e398:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	bfb8      	it	lt
 800e3a0:	460b      	movlt	r3, r1
 800e3a2:	460c      	mov	r4, r1
 800e3a4:	bfbc      	itt	lt
 800e3a6:	464c      	movlt	r4, r9
 800e3a8:	4699      	movlt	r9, r3
 800e3aa:	6927      	ldr	r7, [r4, #16]
 800e3ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e3b0:	68a3      	ldr	r3, [r4, #8]
 800e3b2:	6861      	ldr	r1, [r4, #4]
 800e3b4:	eb07 060a 	add.w	r6, r7, sl
 800e3b8:	42b3      	cmp	r3, r6
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	bfb8      	it	lt
 800e3be:	3101      	addlt	r1, #1
 800e3c0:	f7ff fed8 	bl	800e174 <_Balloc>
 800e3c4:	b930      	cbnz	r0, 800e3d4 <__multiply+0x44>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	4b44      	ldr	r3, [pc, #272]	; (800e4dc <__multiply+0x14c>)
 800e3ca:	4845      	ldr	r0, [pc, #276]	; (800e4e0 <__multiply+0x150>)
 800e3cc:	f240 115d 	movw	r1, #349	; 0x15d
 800e3d0:	f000 fb5a 	bl	800ea88 <__assert_func>
 800e3d4:	f100 0514 	add.w	r5, r0, #20
 800e3d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e3dc:	462b      	mov	r3, r5
 800e3de:	2200      	movs	r2, #0
 800e3e0:	4543      	cmp	r3, r8
 800e3e2:	d321      	bcc.n	800e428 <__multiply+0x98>
 800e3e4:	f104 0314 	add.w	r3, r4, #20
 800e3e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e3ec:	f109 0314 	add.w	r3, r9, #20
 800e3f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e3f4:	9202      	str	r2, [sp, #8]
 800e3f6:	1b3a      	subs	r2, r7, r4
 800e3f8:	3a15      	subs	r2, #21
 800e3fa:	f022 0203 	bic.w	r2, r2, #3
 800e3fe:	3204      	adds	r2, #4
 800e400:	f104 0115 	add.w	r1, r4, #21
 800e404:	428f      	cmp	r7, r1
 800e406:	bf38      	it	cc
 800e408:	2204      	movcc	r2, #4
 800e40a:	9201      	str	r2, [sp, #4]
 800e40c:	9a02      	ldr	r2, [sp, #8]
 800e40e:	9303      	str	r3, [sp, #12]
 800e410:	429a      	cmp	r2, r3
 800e412:	d80c      	bhi.n	800e42e <__multiply+0x9e>
 800e414:	2e00      	cmp	r6, #0
 800e416:	dd03      	ble.n	800e420 <__multiply+0x90>
 800e418:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d05a      	beq.n	800e4d6 <__multiply+0x146>
 800e420:	6106      	str	r6, [r0, #16]
 800e422:	b005      	add	sp, #20
 800e424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e428:	f843 2b04 	str.w	r2, [r3], #4
 800e42c:	e7d8      	b.n	800e3e0 <__multiply+0x50>
 800e42e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e432:	f1ba 0f00 	cmp.w	sl, #0
 800e436:	d024      	beq.n	800e482 <__multiply+0xf2>
 800e438:	f104 0e14 	add.w	lr, r4, #20
 800e43c:	46a9      	mov	r9, r5
 800e43e:	f04f 0c00 	mov.w	ip, #0
 800e442:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e446:	f8d9 1000 	ldr.w	r1, [r9]
 800e44a:	fa1f fb82 	uxth.w	fp, r2
 800e44e:	b289      	uxth	r1, r1
 800e450:	fb0a 110b 	mla	r1, sl, fp, r1
 800e454:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e458:	f8d9 2000 	ldr.w	r2, [r9]
 800e45c:	4461      	add	r1, ip
 800e45e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e462:	fb0a c20b 	mla	r2, sl, fp, ip
 800e466:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e46a:	b289      	uxth	r1, r1
 800e46c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e470:	4577      	cmp	r7, lr
 800e472:	f849 1b04 	str.w	r1, [r9], #4
 800e476:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e47a:	d8e2      	bhi.n	800e442 <__multiply+0xb2>
 800e47c:	9a01      	ldr	r2, [sp, #4]
 800e47e:	f845 c002 	str.w	ip, [r5, r2]
 800e482:	9a03      	ldr	r2, [sp, #12]
 800e484:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e488:	3304      	adds	r3, #4
 800e48a:	f1b9 0f00 	cmp.w	r9, #0
 800e48e:	d020      	beq.n	800e4d2 <__multiply+0x142>
 800e490:	6829      	ldr	r1, [r5, #0]
 800e492:	f104 0c14 	add.w	ip, r4, #20
 800e496:	46ae      	mov	lr, r5
 800e498:	f04f 0a00 	mov.w	sl, #0
 800e49c:	f8bc b000 	ldrh.w	fp, [ip]
 800e4a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e4a4:	fb09 220b 	mla	r2, r9, fp, r2
 800e4a8:	4492      	add	sl, r2
 800e4aa:	b289      	uxth	r1, r1
 800e4ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e4b0:	f84e 1b04 	str.w	r1, [lr], #4
 800e4b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e4b8:	f8be 1000 	ldrh.w	r1, [lr]
 800e4bc:	0c12      	lsrs	r2, r2, #16
 800e4be:	fb09 1102 	mla	r1, r9, r2, r1
 800e4c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e4c6:	4567      	cmp	r7, ip
 800e4c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e4cc:	d8e6      	bhi.n	800e49c <__multiply+0x10c>
 800e4ce:	9a01      	ldr	r2, [sp, #4]
 800e4d0:	50a9      	str	r1, [r5, r2]
 800e4d2:	3504      	adds	r5, #4
 800e4d4:	e79a      	b.n	800e40c <__multiply+0x7c>
 800e4d6:	3e01      	subs	r6, #1
 800e4d8:	e79c      	b.n	800e414 <__multiply+0x84>
 800e4da:	bf00      	nop
 800e4dc:	08010817 	.word	0x08010817
 800e4e0:	08010828 	.word	0x08010828

0800e4e4 <__pow5mult>:
 800e4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e8:	4615      	mov	r5, r2
 800e4ea:	f012 0203 	ands.w	r2, r2, #3
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	460f      	mov	r7, r1
 800e4f2:	d007      	beq.n	800e504 <__pow5mult+0x20>
 800e4f4:	4c25      	ldr	r4, [pc, #148]	; (800e58c <__pow5mult+0xa8>)
 800e4f6:	3a01      	subs	r2, #1
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e4fe:	f7ff fe9b 	bl	800e238 <__multadd>
 800e502:	4607      	mov	r7, r0
 800e504:	10ad      	asrs	r5, r5, #2
 800e506:	d03d      	beq.n	800e584 <__pow5mult+0xa0>
 800e508:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e50a:	b97c      	cbnz	r4, 800e52c <__pow5mult+0x48>
 800e50c:	2010      	movs	r0, #16
 800e50e:	f7ff fe29 	bl	800e164 <malloc>
 800e512:	4602      	mov	r2, r0
 800e514:	6270      	str	r0, [r6, #36]	; 0x24
 800e516:	b928      	cbnz	r0, 800e524 <__pow5mult+0x40>
 800e518:	4b1d      	ldr	r3, [pc, #116]	; (800e590 <__pow5mult+0xac>)
 800e51a:	481e      	ldr	r0, [pc, #120]	; (800e594 <__pow5mult+0xb0>)
 800e51c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e520:	f000 fab2 	bl	800ea88 <__assert_func>
 800e524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e528:	6004      	str	r4, [r0, #0]
 800e52a:	60c4      	str	r4, [r0, #12]
 800e52c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e534:	b94c      	cbnz	r4, 800e54a <__pow5mult+0x66>
 800e536:	f240 2171 	movw	r1, #625	; 0x271
 800e53a:	4630      	mov	r0, r6
 800e53c:	f7ff ff12 	bl	800e364 <__i2b>
 800e540:	2300      	movs	r3, #0
 800e542:	f8c8 0008 	str.w	r0, [r8, #8]
 800e546:	4604      	mov	r4, r0
 800e548:	6003      	str	r3, [r0, #0]
 800e54a:	f04f 0900 	mov.w	r9, #0
 800e54e:	07eb      	lsls	r3, r5, #31
 800e550:	d50a      	bpl.n	800e568 <__pow5mult+0x84>
 800e552:	4639      	mov	r1, r7
 800e554:	4622      	mov	r2, r4
 800e556:	4630      	mov	r0, r6
 800e558:	f7ff ff1a 	bl	800e390 <__multiply>
 800e55c:	4639      	mov	r1, r7
 800e55e:	4680      	mov	r8, r0
 800e560:	4630      	mov	r0, r6
 800e562:	f7ff fe47 	bl	800e1f4 <_Bfree>
 800e566:	4647      	mov	r7, r8
 800e568:	106d      	asrs	r5, r5, #1
 800e56a:	d00b      	beq.n	800e584 <__pow5mult+0xa0>
 800e56c:	6820      	ldr	r0, [r4, #0]
 800e56e:	b938      	cbnz	r0, 800e580 <__pow5mult+0x9c>
 800e570:	4622      	mov	r2, r4
 800e572:	4621      	mov	r1, r4
 800e574:	4630      	mov	r0, r6
 800e576:	f7ff ff0b 	bl	800e390 <__multiply>
 800e57a:	6020      	str	r0, [r4, #0]
 800e57c:	f8c0 9000 	str.w	r9, [r0]
 800e580:	4604      	mov	r4, r0
 800e582:	e7e4      	b.n	800e54e <__pow5mult+0x6a>
 800e584:	4638      	mov	r0, r7
 800e586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e58a:	bf00      	nop
 800e58c:	08010978 	.word	0x08010978
 800e590:	080107a5 	.word	0x080107a5
 800e594:	08010828 	.word	0x08010828

0800e598 <__lshift>:
 800e598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e59c:	460c      	mov	r4, r1
 800e59e:	6849      	ldr	r1, [r1, #4]
 800e5a0:	6923      	ldr	r3, [r4, #16]
 800e5a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5a6:	68a3      	ldr	r3, [r4, #8]
 800e5a8:	4607      	mov	r7, r0
 800e5aa:	4691      	mov	r9, r2
 800e5ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5b0:	f108 0601 	add.w	r6, r8, #1
 800e5b4:	42b3      	cmp	r3, r6
 800e5b6:	db0b      	blt.n	800e5d0 <__lshift+0x38>
 800e5b8:	4638      	mov	r0, r7
 800e5ba:	f7ff fddb 	bl	800e174 <_Balloc>
 800e5be:	4605      	mov	r5, r0
 800e5c0:	b948      	cbnz	r0, 800e5d6 <__lshift+0x3e>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	4b2a      	ldr	r3, [pc, #168]	; (800e670 <__lshift+0xd8>)
 800e5c6:	482b      	ldr	r0, [pc, #172]	; (800e674 <__lshift+0xdc>)
 800e5c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e5cc:	f000 fa5c 	bl	800ea88 <__assert_func>
 800e5d0:	3101      	adds	r1, #1
 800e5d2:	005b      	lsls	r3, r3, #1
 800e5d4:	e7ee      	b.n	800e5b4 <__lshift+0x1c>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f100 0114 	add.w	r1, r0, #20
 800e5dc:	f100 0210 	add.w	r2, r0, #16
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	4553      	cmp	r3, sl
 800e5e4:	db37      	blt.n	800e656 <__lshift+0xbe>
 800e5e6:	6920      	ldr	r0, [r4, #16]
 800e5e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5ec:	f104 0314 	add.w	r3, r4, #20
 800e5f0:	f019 091f 	ands.w	r9, r9, #31
 800e5f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e5fc:	d02f      	beq.n	800e65e <__lshift+0xc6>
 800e5fe:	f1c9 0e20 	rsb	lr, r9, #32
 800e602:	468a      	mov	sl, r1
 800e604:	f04f 0c00 	mov.w	ip, #0
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	fa02 f209 	lsl.w	r2, r2, r9
 800e60e:	ea42 020c 	orr.w	r2, r2, ip
 800e612:	f84a 2b04 	str.w	r2, [sl], #4
 800e616:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61a:	4298      	cmp	r0, r3
 800e61c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e620:	d8f2      	bhi.n	800e608 <__lshift+0x70>
 800e622:	1b03      	subs	r3, r0, r4
 800e624:	3b15      	subs	r3, #21
 800e626:	f023 0303 	bic.w	r3, r3, #3
 800e62a:	3304      	adds	r3, #4
 800e62c:	f104 0215 	add.w	r2, r4, #21
 800e630:	4290      	cmp	r0, r2
 800e632:	bf38      	it	cc
 800e634:	2304      	movcc	r3, #4
 800e636:	f841 c003 	str.w	ip, [r1, r3]
 800e63a:	f1bc 0f00 	cmp.w	ip, #0
 800e63e:	d001      	beq.n	800e644 <__lshift+0xac>
 800e640:	f108 0602 	add.w	r6, r8, #2
 800e644:	3e01      	subs	r6, #1
 800e646:	4638      	mov	r0, r7
 800e648:	612e      	str	r6, [r5, #16]
 800e64a:	4621      	mov	r1, r4
 800e64c:	f7ff fdd2 	bl	800e1f4 <_Bfree>
 800e650:	4628      	mov	r0, r5
 800e652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e656:	f842 0f04 	str.w	r0, [r2, #4]!
 800e65a:	3301      	adds	r3, #1
 800e65c:	e7c1      	b.n	800e5e2 <__lshift+0x4a>
 800e65e:	3904      	subs	r1, #4
 800e660:	f853 2b04 	ldr.w	r2, [r3], #4
 800e664:	f841 2f04 	str.w	r2, [r1, #4]!
 800e668:	4298      	cmp	r0, r3
 800e66a:	d8f9      	bhi.n	800e660 <__lshift+0xc8>
 800e66c:	e7ea      	b.n	800e644 <__lshift+0xac>
 800e66e:	bf00      	nop
 800e670:	08010817 	.word	0x08010817
 800e674:	08010828 	.word	0x08010828

0800e678 <__mcmp>:
 800e678:	b530      	push	{r4, r5, lr}
 800e67a:	6902      	ldr	r2, [r0, #16]
 800e67c:	690c      	ldr	r4, [r1, #16]
 800e67e:	1b12      	subs	r2, r2, r4
 800e680:	d10e      	bne.n	800e6a0 <__mcmp+0x28>
 800e682:	f100 0314 	add.w	r3, r0, #20
 800e686:	3114      	adds	r1, #20
 800e688:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e68c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e690:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e694:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e698:	42a5      	cmp	r5, r4
 800e69a:	d003      	beq.n	800e6a4 <__mcmp+0x2c>
 800e69c:	d305      	bcc.n	800e6aa <__mcmp+0x32>
 800e69e:	2201      	movs	r2, #1
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	bd30      	pop	{r4, r5, pc}
 800e6a4:	4283      	cmp	r3, r0
 800e6a6:	d3f3      	bcc.n	800e690 <__mcmp+0x18>
 800e6a8:	e7fa      	b.n	800e6a0 <__mcmp+0x28>
 800e6aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6ae:	e7f7      	b.n	800e6a0 <__mcmp+0x28>

0800e6b0 <__mdiff>:
 800e6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	460c      	mov	r4, r1
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	4690      	mov	r8, r2
 800e6be:	f7ff ffdb 	bl	800e678 <__mcmp>
 800e6c2:	1e05      	subs	r5, r0, #0
 800e6c4:	d110      	bne.n	800e6e8 <__mdiff+0x38>
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	f7ff fd53 	bl	800e174 <_Balloc>
 800e6ce:	b930      	cbnz	r0, 800e6de <__mdiff+0x2e>
 800e6d0:	4b3a      	ldr	r3, [pc, #232]	; (800e7bc <__mdiff+0x10c>)
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	f240 2132 	movw	r1, #562	; 0x232
 800e6d8:	4839      	ldr	r0, [pc, #228]	; (800e7c0 <__mdiff+0x110>)
 800e6da:	f000 f9d5 	bl	800ea88 <__assert_func>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e8:	bfa4      	itt	ge
 800e6ea:	4643      	movge	r3, r8
 800e6ec:	46a0      	movge	r8, r4
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e6f4:	bfa6      	itte	ge
 800e6f6:	461c      	movge	r4, r3
 800e6f8:	2500      	movge	r5, #0
 800e6fa:	2501      	movlt	r5, #1
 800e6fc:	f7ff fd3a 	bl	800e174 <_Balloc>
 800e700:	b920      	cbnz	r0, 800e70c <__mdiff+0x5c>
 800e702:	4b2e      	ldr	r3, [pc, #184]	; (800e7bc <__mdiff+0x10c>)
 800e704:	4602      	mov	r2, r0
 800e706:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e70a:	e7e5      	b.n	800e6d8 <__mdiff+0x28>
 800e70c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e710:	6926      	ldr	r6, [r4, #16]
 800e712:	60c5      	str	r5, [r0, #12]
 800e714:	f104 0914 	add.w	r9, r4, #20
 800e718:	f108 0514 	add.w	r5, r8, #20
 800e71c:	f100 0e14 	add.w	lr, r0, #20
 800e720:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e724:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e728:	f108 0210 	add.w	r2, r8, #16
 800e72c:	46f2      	mov	sl, lr
 800e72e:	2100      	movs	r1, #0
 800e730:	f859 3b04 	ldr.w	r3, [r9], #4
 800e734:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e738:	fa1f f883 	uxth.w	r8, r3
 800e73c:	fa11 f18b 	uxtah	r1, r1, fp
 800e740:	0c1b      	lsrs	r3, r3, #16
 800e742:	eba1 0808 	sub.w	r8, r1, r8
 800e746:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e74a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e74e:	fa1f f888 	uxth.w	r8, r8
 800e752:	1419      	asrs	r1, r3, #16
 800e754:	454e      	cmp	r6, r9
 800e756:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e75a:	f84a 3b04 	str.w	r3, [sl], #4
 800e75e:	d8e7      	bhi.n	800e730 <__mdiff+0x80>
 800e760:	1b33      	subs	r3, r6, r4
 800e762:	3b15      	subs	r3, #21
 800e764:	f023 0303 	bic.w	r3, r3, #3
 800e768:	3304      	adds	r3, #4
 800e76a:	3415      	adds	r4, #21
 800e76c:	42a6      	cmp	r6, r4
 800e76e:	bf38      	it	cc
 800e770:	2304      	movcc	r3, #4
 800e772:	441d      	add	r5, r3
 800e774:	4473      	add	r3, lr
 800e776:	469e      	mov	lr, r3
 800e778:	462e      	mov	r6, r5
 800e77a:	4566      	cmp	r6, ip
 800e77c:	d30e      	bcc.n	800e79c <__mdiff+0xec>
 800e77e:	f10c 0203 	add.w	r2, ip, #3
 800e782:	1b52      	subs	r2, r2, r5
 800e784:	f022 0203 	bic.w	r2, r2, #3
 800e788:	3d03      	subs	r5, #3
 800e78a:	45ac      	cmp	ip, r5
 800e78c:	bf38      	it	cc
 800e78e:	2200      	movcc	r2, #0
 800e790:	441a      	add	r2, r3
 800e792:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e796:	b17b      	cbz	r3, 800e7b8 <__mdiff+0x108>
 800e798:	6107      	str	r7, [r0, #16]
 800e79a:	e7a3      	b.n	800e6e4 <__mdiff+0x34>
 800e79c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e7a0:	fa11 f288 	uxtah	r2, r1, r8
 800e7a4:	1414      	asrs	r4, r2, #16
 800e7a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e7aa:	b292      	uxth	r2, r2
 800e7ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e7b0:	f84e 2b04 	str.w	r2, [lr], #4
 800e7b4:	1421      	asrs	r1, r4, #16
 800e7b6:	e7e0      	b.n	800e77a <__mdiff+0xca>
 800e7b8:	3f01      	subs	r7, #1
 800e7ba:	e7ea      	b.n	800e792 <__mdiff+0xe2>
 800e7bc:	08010817 	.word	0x08010817
 800e7c0:	08010828 	.word	0x08010828

0800e7c4 <__d2b>:
 800e7c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7c8:	4689      	mov	r9, r1
 800e7ca:	2101      	movs	r1, #1
 800e7cc:	ec57 6b10 	vmov	r6, r7, d0
 800e7d0:	4690      	mov	r8, r2
 800e7d2:	f7ff fccf 	bl	800e174 <_Balloc>
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	b930      	cbnz	r0, 800e7e8 <__d2b+0x24>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	4b25      	ldr	r3, [pc, #148]	; (800e874 <__d2b+0xb0>)
 800e7de:	4826      	ldr	r0, [pc, #152]	; (800e878 <__d2b+0xb4>)
 800e7e0:	f240 310a 	movw	r1, #778	; 0x30a
 800e7e4:	f000 f950 	bl	800ea88 <__assert_func>
 800e7e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e7ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e7f0:	bb35      	cbnz	r5, 800e840 <__d2b+0x7c>
 800e7f2:	2e00      	cmp	r6, #0
 800e7f4:	9301      	str	r3, [sp, #4]
 800e7f6:	d028      	beq.n	800e84a <__d2b+0x86>
 800e7f8:	4668      	mov	r0, sp
 800e7fa:	9600      	str	r6, [sp, #0]
 800e7fc:	f7ff fd82 	bl	800e304 <__lo0bits>
 800e800:	9900      	ldr	r1, [sp, #0]
 800e802:	b300      	cbz	r0, 800e846 <__d2b+0x82>
 800e804:	9a01      	ldr	r2, [sp, #4]
 800e806:	f1c0 0320 	rsb	r3, r0, #32
 800e80a:	fa02 f303 	lsl.w	r3, r2, r3
 800e80e:	430b      	orrs	r3, r1
 800e810:	40c2      	lsrs	r2, r0
 800e812:	6163      	str	r3, [r4, #20]
 800e814:	9201      	str	r2, [sp, #4]
 800e816:	9b01      	ldr	r3, [sp, #4]
 800e818:	61a3      	str	r3, [r4, #24]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	bf14      	ite	ne
 800e81e:	2202      	movne	r2, #2
 800e820:	2201      	moveq	r2, #1
 800e822:	6122      	str	r2, [r4, #16]
 800e824:	b1d5      	cbz	r5, 800e85c <__d2b+0x98>
 800e826:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e82a:	4405      	add	r5, r0
 800e82c:	f8c9 5000 	str.w	r5, [r9]
 800e830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e834:	f8c8 0000 	str.w	r0, [r8]
 800e838:	4620      	mov	r0, r4
 800e83a:	b003      	add	sp, #12
 800e83c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e844:	e7d5      	b.n	800e7f2 <__d2b+0x2e>
 800e846:	6161      	str	r1, [r4, #20]
 800e848:	e7e5      	b.n	800e816 <__d2b+0x52>
 800e84a:	a801      	add	r0, sp, #4
 800e84c:	f7ff fd5a 	bl	800e304 <__lo0bits>
 800e850:	9b01      	ldr	r3, [sp, #4]
 800e852:	6163      	str	r3, [r4, #20]
 800e854:	2201      	movs	r2, #1
 800e856:	6122      	str	r2, [r4, #16]
 800e858:	3020      	adds	r0, #32
 800e85a:	e7e3      	b.n	800e824 <__d2b+0x60>
 800e85c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e860:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e864:	f8c9 0000 	str.w	r0, [r9]
 800e868:	6918      	ldr	r0, [r3, #16]
 800e86a:	f7ff fd2b 	bl	800e2c4 <__hi0bits>
 800e86e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e872:	e7df      	b.n	800e834 <__d2b+0x70>
 800e874:	08010817 	.word	0x08010817
 800e878:	08010828 	.word	0x08010828

0800e87c <_calloc_r>:
 800e87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e87e:	fba1 2402 	umull	r2, r4, r1, r2
 800e882:	b94c      	cbnz	r4, 800e898 <_calloc_r+0x1c>
 800e884:	4611      	mov	r1, r2
 800e886:	9201      	str	r2, [sp, #4]
 800e888:	f000 f87a 	bl	800e980 <_malloc_r>
 800e88c:	9a01      	ldr	r2, [sp, #4]
 800e88e:	4605      	mov	r5, r0
 800e890:	b930      	cbnz	r0, 800e8a0 <_calloc_r+0x24>
 800e892:	4628      	mov	r0, r5
 800e894:	b003      	add	sp, #12
 800e896:	bd30      	pop	{r4, r5, pc}
 800e898:	220c      	movs	r2, #12
 800e89a:	6002      	str	r2, [r0, #0]
 800e89c:	2500      	movs	r5, #0
 800e89e:	e7f8      	b.n	800e892 <_calloc_r+0x16>
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	f7fe f96f 	bl	800cb84 <memset>
 800e8a6:	e7f4      	b.n	800e892 <_calloc_r+0x16>

0800e8a8 <_free_r>:
 800e8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8aa:	2900      	cmp	r1, #0
 800e8ac:	d044      	beq.n	800e938 <_free_r+0x90>
 800e8ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8b2:	9001      	str	r0, [sp, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f1a1 0404 	sub.w	r4, r1, #4
 800e8ba:	bfb8      	it	lt
 800e8bc:	18e4      	addlt	r4, r4, r3
 800e8be:	f000 f925 	bl	800eb0c <__malloc_lock>
 800e8c2:	4a1e      	ldr	r2, [pc, #120]	; (800e93c <_free_r+0x94>)
 800e8c4:	9801      	ldr	r0, [sp, #4]
 800e8c6:	6813      	ldr	r3, [r2, #0]
 800e8c8:	b933      	cbnz	r3, 800e8d8 <_free_r+0x30>
 800e8ca:	6063      	str	r3, [r4, #4]
 800e8cc:	6014      	str	r4, [r2, #0]
 800e8ce:	b003      	add	sp, #12
 800e8d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8d4:	f000 b920 	b.w	800eb18 <__malloc_unlock>
 800e8d8:	42a3      	cmp	r3, r4
 800e8da:	d908      	bls.n	800e8ee <_free_r+0x46>
 800e8dc:	6825      	ldr	r5, [r4, #0]
 800e8de:	1961      	adds	r1, r4, r5
 800e8e0:	428b      	cmp	r3, r1
 800e8e2:	bf01      	itttt	eq
 800e8e4:	6819      	ldreq	r1, [r3, #0]
 800e8e6:	685b      	ldreq	r3, [r3, #4]
 800e8e8:	1949      	addeq	r1, r1, r5
 800e8ea:	6021      	streq	r1, [r4, #0]
 800e8ec:	e7ed      	b.n	800e8ca <_free_r+0x22>
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	b10b      	cbz	r3, 800e8f8 <_free_r+0x50>
 800e8f4:	42a3      	cmp	r3, r4
 800e8f6:	d9fa      	bls.n	800e8ee <_free_r+0x46>
 800e8f8:	6811      	ldr	r1, [r2, #0]
 800e8fa:	1855      	adds	r5, r2, r1
 800e8fc:	42a5      	cmp	r5, r4
 800e8fe:	d10b      	bne.n	800e918 <_free_r+0x70>
 800e900:	6824      	ldr	r4, [r4, #0]
 800e902:	4421      	add	r1, r4
 800e904:	1854      	adds	r4, r2, r1
 800e906:	42a3      	cmp	r3, r4
 800e908:	6011      	str	r1, [r2, #0]
 800e90a:	d1e0      	bne.n	800e8ce <_free_r+0x26>
 800e90c:	681c      	ldr	r4, [r3, #0]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	6053      	str	r3, [r2, #4]
 800e912:	4421      	add	r1, r4
 800e914:	6011      	str	r1, [r2, #0]
 800e916:	e7da      	b.n	800e8ce <_free_r+0x26>
 800e918:	d902      	bls.n	800e920 <_free_r+0x78>
 800e91a:	230c      	movs	r3, #12
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	e7d6      	b.n	800e8ce <_free_r+0x26>
 800e920:	6825      	ldr	r5, [r4, #0]
 800e922:	1961      	adds	r1, r4, r5
 800e924:	428b      	cmp	r3, r1
 800e926:	bf04      	itt	eq
 800e928:	6819      	ldreq	r1, [r3, #0]
 800e92a:	685b      	ldreq	r3, [r3, #4]
 800e92c:	6063      	str	r3, [r4, #4]
 800e92e:	bf04      	itt	eq
 800e930:	1949      	addeq	r1, r1, r5
 800e932:	6021      	streq	r1, [r4, #0]
 800e934:	6054      	str	r4, [r2, #4]
 800e936:	e7ca      	b.n	800e8ce <_free_r+0x26>
 800e938:	b003      	add	sp, #12
 800e93a:	bd30      	pop	{r4, r5, pc}
 800e93c:	200022bc 	.word	0x200022bc

0800e940 <sbrk_aligned>:
 800e940:	b570      	push	{r4, r5, r6, lr}
 800e942:	4e0e      	ldr	r6, [pc, #56]	; (800e97c <sbrk_aligned+0x3c>)
 800e944:	460c      	mov	r4, r1
 800e946:	6831      	ldr	r1, [r6, #0]
 800e948:	4605      	mov	r5, r0
 800e94a:	b911      	cbnz	r1, 800e952 <sbrk_aligned+0x12>
 800e94c:	f000 f88c 	bl	800ea68 <_sbrk_r>
 800e950:	6030      	str	r0, [r6, #0]
 800e952:	4621      	mov	r1, r4
 800e954:	4628      	mov	r0, r5
 800e956:	f000 f887 	bl	800ea68 <_sbrk_r>
 800e95a:	1c43      	adds	r3, r0, #1
 800e95c:	d00a      	beq.n	800e974 <sbrk_aligned+0x34>
 800e95e:	1cc4      	adds	r4, r0, #3
 800e960:	f024 0403 	bic.w	r4, r4, #3
 800e964:	42a0      	cmp	r0, r4
 800e966:	d007      	beq.n	800e978 <sbrk_aligned+0x38>
 800e968:	1a21      	subs	r1, r4, r0
 800e96a:	4628      	mov	r0, r5
 800e96c:	f000 f87c 	bl	800ea68 <_sbrk_r>
 800e970:	3001      	adds	r0, #1
 800e972:	d101      	bne.n	800e978 <sbrk_aligned+0x38>
 800e974:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e978:	4620      	mov	r0, r4
 800e97a:	bd70      	pop	{r4, r5, r6, pc}
 800e97c:	200022c0 	.word	0x200022c0

0800e980 <_malloc_r>:
 800e980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e984:	1ccd      	adds	r5, r1, #3
 800e986:	f025 0503 	bic.w	r5, r5, #3
 800e98a:	3508      	adds	r5, #8
 800e98c:	2d0c      	cmp	r5, #12
 800e98e:	bf38      	it	cc
 800e990:	250c      	movcc	r5, #12
 800e992:	2d00      	cmp	r5, #0
 800e994:	4607      	mov	r7, r0
 800e996:	db01      	blt.n	800e99c <_malloc_r+0x1c>
 800e998:	42a9      	cmp	r1, r5
 800e99a:	d905      	bls.n	800e9a8 <_malloc_r+0x28>
 800e99c:	230c      	movs	r3, #12
 800e99e:	603b      	str	r3, [r7, #0]
 800e9a0:	2600      	movs	r6, #0
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a8:	4e2e      	ldr	r6, [pc, #184]	; (800ea64 <_malloc_r+0xe4>)
 800e9aa:	f000 f8af 	bl	800eb0c <__malloc_lock>
 800e9ae:	6833      	ldr	r3, [r6, #0]
 800e9b0:	461c      	mov	r4, r3
 800e9b2:	bb34      	cbnz	r4, 800ea02 <_malloc_r+0x82>
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	4638      	mov	r0, r7
 800e9b8:	f7ff ffc2 	bl	800e940 <sbrk_aligned>
 800e9bc:	1c43      	adds	r3, r0, #1
 800e9be:	4604      	mov	r4, r0
 800e9c0:	d14d      	bne.n	800ea5e <_malloc_r+0xde>
 800e9c2:	6834      	ldr	r4, [r6, #0]
 800e9c4:	4626      	mov	r6, r4
 800e9c6:	2e00      	cmp	r6, #0
 800e9c8:	d140      	bne.n	800ea4c <_malloc_r+0xcc>
 800e9ca:	6823      	ldr	r3, [r4, #0]
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4638      	mov	r0, r7
 800e9d0:	eb04 0803 	add.w	r8, r4, r3
 800e9d4:	f000 f848 	bl	800ea68 <_sbrk_r>
 800e9d8:	4580      	cmp	r8, r0
 800e9da:	d13a      	bne.n	800ea52 <_malloc_r+0xd2>
 800e9dc:	6821      	ldr	r1, [r4, #0]
 800e9de:	3503      	adds	r5, #3
 800e9e0:	1a6d      	subs	r5, r5, r1
 800e9e2:	f025 0503 	bic.w	r5, r5, #3
 800e9e6:	3508      	adds	r5, #8
 800e9e8:	2d0c      	cmp	r5, #12
 800e9ea:	bf38      	it	cc
 800e9ec:	250c      	movcc	r5, #12
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	f7ff ffa5 	bl	800e940 <sbrk_aligned>
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	d02b      	beq.n	800ea52 <_malloc_r+0xd2>
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	442b      	add	r3, r5
 800e9fe:	6023      	str	r3, [r4, #0]
 800ea00:	e00e      	b.n	800ea20 <_malloc_r+0xa0>
 800ea02:	6822      	ldr	r2, [r4, #0]
 800ea04:	1b52      	subs	r2, r2, r5
 800ea06:	d41e      	bmi.n	800ea46 <_malloc_r+0xc6>
 800ea08:	2a0b      	cmp	r2, #11
 800ea0a:	d916      	bls.n	800ea3a <_malloc_r+0xba>
 800ea0c:	1961      	adds	r1, r4, r5
 800ea0e:	42a3      	cmp	r3, r4
 800ea10:	6025      	str	r5, [r4, #0]
 800ea12:	bf18      	it	ne
 800ea14:	6059      	strne	r1, [r3, #4]
 800ea16:	6863      	ldr	r3, [r4, #4]
 800ea18:	bf08      	it	eq
 800ea1a:	6031      	streq	r1, [r6, #0]
 800ea1c:	5162      	str	r2, [r4, r5]
 800ea1e:	604b      	str	r3, [r1, #4]
 800ea20:	4638      	mov	r0, r7
 800ea22:	f104 060b 	add.w	r6, r4, #11
 800ea26:	f000 f877 	bl	800eb18 <__malloc_unlock>
 800ea2a:	f026 0607 	bic.w	r6, r6, #7
 800ea2e:	1d23      	adds	r3, r4, #4
 800ea30:	1af2      	subs	r2, r6, r3
 800ea32:	d0b6      	beq.n	800e9a2 <_malloc_r+0x22>
 800ea34:	1b9b      	subs	r3, r3, r6
 800ea36:	50a3      	str	r3, [r4, r2]
 800ea38:	e7b3      	b.n	800e9a2 <_malloc_r+0x22>
 800ea3a:	6862      	ldr	r2, [r4, #4]
 800ea3c:	42a3      	cmp	r3, r4
 800ea3e:	bf0c      	ite	eq
 800ea40:	6032      	streq	r2, [r6, #0]
 800ea42:	605a      	strne	r2, [r3, #4]
 800ea44:	e7ec      	b.n	800ea20 <_malloc_r+0xa0>
 800ea46:	4623      	mov	r3, r4
 800ea48:	6864      	ldr	r4, [r4, #4]
 800ea4a:	e7b2      	b.n	800e9b2 <_malloc_r+0x32>
 800ea4c:	4634      	mov	r4, r6
 800ea4e:	6876      	ldr	r6, [r6, #4]
 800ea50:	e7b9      	b.n	800e9c6 <_malloc_r+0x46>
 800ea52:	230c      	movs	r3, #12
 800ea54:	603b      	str	r3, [r7, #0]
 800ea56:	4638      	mov	r0, r7
 800ea58:	f000 f85e 	bl	800eb18 <__malloc_unlock>
 800ea5c:	e7a1      	b.n	800e9a2 <_malloc_r+0x22>
 800ea5e:	6025      	str	r5, [r4, #0]
 800ea60:	e7de      	b.n	800ea20 <_malloc_r+0xa0>
 800ea62:	bf00      	nop
 800ea64:	200022bc 	.word	0x200022bc

0800ea68 <_sbrk_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4d06      	ldr	r5, [pc, #24]	; (800ea84 <_sbrk_r+0x1c>)
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	4604      	mov	r4, r0
 800ea70:	4608      	mov	r0, r1
 800ea72:	602b      	str	r3, [r5, #0]
 800ea74:	f7f4 fcb0 	bl	80033d8 <_sbrk>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_sbrk_r+0x1a>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_sbrk_r+0x1a>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	200022c4 	.word	0x200022c4

0800ea88 <__assert_func>:
 800ea88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea8a:	4614      	mov	r4, r2
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <__assert_func+0x2c>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	4605      	mov	r5, r0
 800ea94:	68d8      	ldr	r0, [r3, #12]
 800ea96:	b14c      	cbz	r4, 800eaac <__assert_func+0x24>
 800ea98:	4b07      	ldr	r3, [pc, #28]	; (800eab8 <__assert_func+0x30>)
 800ea9a:	9100      	str	r1, [sp, #0]
 800ea9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eaa0:	4906      	ldr	r1, [pc, #24]	; (800eabc <__assert_func+0x34>)
 800eaa2:	462b      	mov	r3, r5
 800eaa4:	f000 f80e 	bl	800eac4 <fiprintf>
 800eaa8:	f000 fa64 	bl	800ef74 <abort>
 800eaac:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <__assert_func+0x38>)
 800eaae:	461c      	mov	r4, r3
 800eab0:	e7f3      	b.n	800ea9a <__assert_func+0x12>
 800eab2:	bf00      	nop
 800eab4:	20000134 	.word	0x20000134
 800eab8:	08010984 	.word	0x08010984
 800eabc:	08010991 	.word	0x08010991
 800eac0:	080109bf 	.word	0x080109bf

0800eac4 <fiprintf>:
 800eac4:	b40e      	push	{r1, r2, r3}
 800eac6:	b503      	push	{r0, r1, lr}
 800eac8:	4601      	mov	r1, r0
 800eaca:	ab03      	add	r3, sp, #12
 800eacc:	4805      	ldr	r0, [pc, #20]	; (800eae4 <fiprintf+0x20>)
 800eace:	f853 2b04 	ldr.w	r2, [r3], #4
 800ead2:	6800      	ldr	r0, [r0, #0]
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	f000 f84f 	bl	800eb78 <_vfiprintf_r>
 800eada:	b002      	add	sp, #8
 800eadc:	f85d eb04 	ldr.w	lr, [sp], #4
 800eae0:	b003      	add	sp, #12
 800eae2:	4770      	bx	lr
 800eae4:	20000134 	.word	0x20000134

0800eae8 <__ascii_mbtowc>:
 800eae8:	b082      	sub	sp, #8
 800eaea:	b901      	cbnz	r1, 800eaee <__ascii_mbtowc+0x6>
 800eaec:	a901      	add	r1, sp, #4
 800eaee:	b142      	cbz	r2, 800eb02 <__ascii_mbtowc+0x1a>
 800eaf0:	b14b      	cbz	r3, 800eb06 <__ascii_mbtowc+0x1e>
 800eaf2:	7813      	ldrb	r3, [r2, #0]
 800eaf4:	600b      	str	r3, [r1, #0]
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	1e10      	subs	r0, r2, #0
 800eafa:	bf18      	it	ne
 800eafc:	2001      	movne	r0, #1
 800eafe:	b002      	add	sp, #8
 800eb00:	4770      	bx	lr
 800eb02:	4610      	mov	r0, r2
 800eb04:	e7fb      	b.n	800eafe <__ascii_mbtowc+0x16>
 800eb06:	f06f 0001 	mvn.w	r0, #1
 800eb0a:	e7f8      	b.n	800eafe <__ascii_mbtowc+0x16>

0800eb0c <__malloc_lock>:
 800eb0c:	4801      	ldr	r0, [pc, #4]	; (800eb14 <__malloc_lock+0x8>)
 800eb0e:	f000 bbf1 	b.w	800f2f4 <__retarget_lock_acquire_recursive>
 800eb12:	bf00      	nop
 800eb14:	200022c8 	.word	0x200022c8

0800eb18 <__malloc_unlock>:
 800eb18:	4801      	ldr	r0, [pc, #4]	; (800eb20 <__malloc_unlock+0x8>)
 800eb1a:	f000 bbec 	b.w	800f2f6 <__retarget_lock_release_recursive>
 800eb1e:	bf00      	nop
 800eb20:	200022c8 	.word	0x200022c8

0800eb24 <__sfputc_r>:
 800eb24:	6893      	ldr	r3, [r2, #8]
 800eb26:	3b01      	subs	r3, #1
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	b410      	push	{r4}
 800eb2c:	6093      	str	r3, [r2, #8]
 800eb2e:	da08      	bge.n	800eb42 <__sfputc_r+0x1e>
 800eb30:	6994      	ldr	r4, [r2, #24]
 800eb32:	42a3      	cmp	r3, r4
 800eb34:	db01      	blt.n	800eb3a <__sfputc_r+0x16>
 800eb36:	290a      	cmp	r1, #10
 800eb38:	d103      	bne.n	800eb42 <__sfputc_r+0x1e>
 800eb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb3e:	f000 b94b 	b.w	800edd8 <__swbuf_r>
 800eb42:	6813      	ldr	r3, [r2, #0]
 800eb44:	1c58      	adds	r0, r3, #1
 800eb46:	6010      	str	r0, [r2, #0]
 800eb48:	7019      	strb	r1, [r3, #0]
 800eb4a:	4608      	mov	r0, r1
 800eb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <__sfputs_r>:
 800eb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb54:	4606      	mov	r6, r0
 800eb56:	460f      	mov	r7, r1
 800eb58:	4614      	mov	r4, r2
 800eb5a:	18d5      	adds	r5, r2, r3
 800eb5c:	42ac      	cmp	r4, r5
 800eb5e:	d101      	bne.n	800eb64 <__sfputs_r+0x12>
 800eb60:	2000      	movs	r0, #0
 800eb62:	e007      	b.n	800eb74 <__sfputs_r+0x22>
 800eb64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb68:	463a      	mov	r2, r7
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f7ff ffda 	bl	800eb24 <__sfputc_r>
 800eb70:	1c43      	adds	r3, r0, #1
 800eb72:	d1f3      	bne.n	800eb5c <__sfputs_r+0xa>
 800eb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb78 <_vfiprintf_r>:
 800eb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb7c:	460d      	mov	r5, r1
 800eb7e:	b09d      	sub	sp, #116	; 0x74
 800eb80:	4614      	mov	r4, r2
 800eb82:	4698      	mov	r8, r3
 800eb84:	4606      	mov	r6, r0
 800eb86:	b118      	cbz	r0, 800eb90 <_vfiprintf_r+0x18>
 800eb88:	6983      	ldr	r3, [r0, #24]
 800eb8a:	b90b      	cbnz	r3, 800eb90 <_vfiprintf_r+0x18>
 800eb8c:	f000 fb14 	bl	800f1b8 <__sinit>
 800eb90:	4b89      	ldr	r3, [pc, #548]	; (800edb8 <_vfiprintf_r+0x240>)
 800eb92:	429d      	cmp	r5, r3
 800eb94:	d11b      	bne.n	800ebce <_vfiprintf_r+0x56>
 800eb96:	6875      	ldr	r5, [r6, #4]
 800eb98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb9a:	07d9      	lsls	r1, r3, #31
 800eb9c:	d405      	bmi.n	800ebaa <_vfiprintf_r+0x32>
 800eb9e:	89ab      	ldrh	r3, [r5, #12]
 800eba0:	059a      	lsls	r2, r3, #22
 800eba2:	d402      	bmi.n	800ebaa <_vfiprintf_r+0x32>
 800eba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eba6:	f000 fba5 	bl	800f2f4 <__retarget_lock_acquire_recursive>
 800ebaa:	89ab      	ldrh	r3, [r5, #12]
 800ebac:	071b      	lsls	r3, r3, #28
 800ebae:	d501      	bpl.n	800ebb4 <_vfiprintf_r+0x3c>
 800ebb0:	692b      	ldr	r3, [r5, #16]
 800ebb2:	b9eb      	cbnz	r3, 800ebf0 <_vfiprintf_r+0x78>
 800ebb4:	4629      	mov	r1, r5
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	f000 f96e 	bl	800ee98 <__swsetup_r>
 800ebbc:	b1c0      	cbz	r0, 800ebf0 <_vfiprintf_r+0x78>
 800ebbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebc0:	07dc      	lsls	r4, r3, #31
 800ebc2:	d50e      	bpl.n	800ebe2 <_vfiprintf_r+0x6a>
 800ebc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebc8:	b01d      	add	sp, #116	; 0x74
 800ebca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebce:	4b7b      	ldr	r3, [pc, #492]	; (800edbc <_vfiprintf_r+0x244>)
 800ebd0:	429d      	cmp	r5, r3
 800ebd2:	d101      	bne.n	800ebd8 <_vfiprintf_r+0x60>
 800ebd4:	68b5      	ldr	r5, [r6, #8]
 800ebd6:	e7df      	b.n	800eb98 <_vfiprintf_r+0x20>
 800ebd8:	4b79      	ldr	r3, [pc, #484]	; (800edc0 <_vfiprintf_r+0x248>)
 800ebda:	429d      	cmp	r5, r3
 800ebdc:	bf08      	it	eq
 800ebde:	68f5      	ldreq	r5, [r6, #12]
 800ebe0:	e7da      	b.n	800eb98 <_vfiprintf_r+0x20>
 800ebe2:	89ab      	ldrh	r3, [r5, #12]
 800ebe4:	0598      	lsls	r0, r3, #22
 800ebe6:	d4ed      	bmi.n	800ebc4 <_vfiprintf_r+0x4c>
 800ebe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebea:	f000 fb84 	bl	800f2f6 <__retarget_lock_release_recursive>
 800ebee:	e7e9      	b.n	800ebc4 <_vfiprintf_r+0x4c>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf4:	2320      	movs	r3, #32
 800ebf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebfe:	2330      	movs	r3, #48	; 0x30
 800ec00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800edc4 <_vfiprintf_r+0x24c>
 800ec04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec08:	f04f 0901 	mov.w	r9, #1
 800ec0c:	4623      	mov	r3, r4
 800ec0e:	469a      	mov	sl, r3
 800ec10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec14:	b10a      	cbz	r2, 800ec1a <_vfiprintf_r+0xa2>
 800ec16:	2a25      	cmp	r2, #37	; 0x25
 800ec18:	d1f9      	bne.n	800ec0e <_vfiprintf_r+0x96>
 800ec1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ec1e:	d00b      	beq.n	800ec38 <_vfiprintf_r+0xc0>
 800ec20:	465b      	mov	r3, fp
 800ec22:	4622      	mov	r2, r4
 800ec24:	4629      	mov	r1, r5
 800ec26:	4630      	mov	r0, r6
 800ec28:	f7ff ff93 	bl	800eb52 <__sfputs_r>
 800ec2c:	3001      	adds	r0, #1
 800ec2e:	f000 80aa 	beq.w	800ed86 <_vfiprintf_r+0x20e>
 800ec32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec34:	445a      	add	r2, fp
 800ec36:	9209      	str	r2, [sp, #36]	; 0x24
 800ec38:	f89a 3000 	ldrb.w	r3, [sl]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f000 80a2 	beq.w	800ed86 <_vfiprintf_r+0x20e>
 800ec42:	2300      	movs	r3, #0
 800ec44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec4c:	f10a 0a01 	add.w	sl, sl, #1
 800ec50:	9304      	str	r3, [sp, #16]
 800ec52:	9307      	str	r3, [sp, #28]
 800ec54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec58:	931a      	str	r3, [sp, #104]	; 0x68
 800ec5a:	4654      	mov	r4, sl
 800ec5c:	2205      	movs	r2, #5
 800ec5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec62:	4858      	ldr	r0, [pc, #352]	; (800edc4 <_vfiprintf_r+0x24c>)
 800ec64:	f7f1 fadc 	bl	8000220 <memchr>
 800ec68:	9a04      	ldr	r2, [sp, #16]
 800ec6a:	b9d8      	cbnz	r0, 800eca4 <_vfiprintf_r+0x12c>
 800ec6c:	06d1      	lsls	r1, r2, #27
 800ec6e:	bf44      	itt	mi
 800ec70:	2320      	movmi	r3, #32
 800ec72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec76:	0713      	lsls	r3, r2, #28
 800ec78:	bf44      	itt	mi
 800ec7a:	232b      	movmi	r3, #43	; 0x2b
 800ec7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec80:	f89a 3000 	ldrb.w	r3, [sl]
 800ec84:	2b2a      	cmp	r3, #42	; 0x2a
 800ec86:	d015      	beq.n	800ecb4 <_vfiprintf_r+0x13c>
 800ec88:	9a07      	ldr	r2, [sp, #28]
 800ec8a:	4654      	mov	r4, sl
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	f04f 0c0a 	mov.w	ip, #10
 800ec92:	4621      	mov	r1, r4
 800ec94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec98:	3b30      	subs	r3, #48	; 0x30
 800ec9a:	2b09      	cmp	r3, #9
 800ec9c:	d94e      	bls.n	800ed3c <_vfiprintf_r+0x1c4>
 800ec9e:	b1b0      	cbz	r0, 800ecce <_vfiprintf_r+0x156>
 800eca0:	9207      	str	r2, [sp, #28]
 800eca2:	e014      	b.n	800ecce <_vfiprintf_r+0x156>
 800eca4:	eba0 0308 	sub.w	r3, r0, r8
 800eca8:	fa09 f303 	lsl.w	r3, r9, r3
 800ecac:	4313      	orrs	r3, r2
 800ecae:	9304      	str	r3, [sp, #16]
 800ecb0:	46a2      	mov	sl, r4
 800ecb2:	e7d2      	b.n	800ec5a <_vfiprintf_r+0xe2>
 800ecb4:	9b03      	ldr	r3, [sp, #12]
 800ecb6:	1d19      	adds	r1, r3, #4
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	9103      	str	r1, [sp, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	bfbb      	ittet	lt
 800ecc0:	425b      	neglt	r3, r3
 800ecc2:	f042 0202 	orrlt.w	r2, r2, #2
 800ecc6:	9307      	strge	r3, [sp, #28]
 800ecc8:	9307      	strlt	r3, [sp, #28]
 800ecca:	bfb8      	it	lt
 800eccc:	9204      	strlt	r2, [sp, #16]
 800ecce:	7823      	ldrb	r3, [r4, #0]
 800ecd0:	2b2e      	cmp	r3, #46	; 0x2e
 800ecd2:	d10c      	bne.n	800ecee <_vfiprintf_r+0x176>
 800ecd4:	7863      	ldrb	r3, [r4, #1]
 800ecd6:	2b2a      	cmp	r3, #42	; 0x2a
 800ecd8:	d135      	bne.n	800ed46 <_vfiprintf_r+0x1ce>
 800ecda:	9b03      	ldr	r3, [sp, #12]
 800ecdc:	1d1a      	adds	r2, r3, #4
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	9203      	str	r2, [sp, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	bfb8      	it	lt
 800ece6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ecea:	3402      	adds	r4, #2
 800ecec:	9305      	str	r3, [sp, #20]
 800ecee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800edd4 <_vfiprintf_r+0x25c>
 800ecf2:	7821      	ldrb	r1, [r4, #0]
 800ecf4:	2203      	movs	r2, #3
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	f7f1 fa92 	bl	8000220 <memchr>
 800ecfc:	b140      	cbz	r0, 800ed10 <_vfiprintf_r+0x198>
 800ecfe:	2340      	movs	r3, #64	; 0x40
 800ed00:	eba0 000a 	sub.w	r0, r0, sl
 800ed04:	fa03 f000 	lsl.w	r0, r3, r0
 800ed08:	9b04      	ldr	r3, [sp, #16]
 800ed0a:	4303      	orrs	r3, r0
 800ed0c:	3401      	adds	r4, #1
 800ed0e:	9304      	str	r3, [sp, #16]
 800ed10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed14:	482c      	ldr	r0, [pc, #176]	; (800edc8 <_vfiprintf_r+0x250>)
 800ed16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed1a:	2206      	movs	r2, #6
 800ed1c:	f7f1 fa80 	bl	8000220 <memchr>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d03f      	beq.n	800eda4 <_vfiprintf_r+0x22c>
 800ed24:	4b29      	ldr	r3, [pc, #164]	; (800edcc <_vfiprintf_r+0x254>)
 800ed26:	bb1b      	cbnz	r3, 800ed70 <_vfiprintf_r+0x1f8>
 800ed28:	9b03      	ldr	r3, [sp, #12]
 800ed2a:	3307      	adds	r3, #7
 800ed2c:	f023 0307 	bic.w	r3, r3, #7
 800ed30:	3308      	adds	r3, #8
 800ed32:	9303      	str	r3, [sp, #12]
 800ed34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed36:	443b      	add	r3, r7
 800ed38:	9309      	str	r3, [sp, #36]	; 0x24
 800ed3a:	e767      	b.n	800ec0c <_vfiprintf_r+0x94>
 800ed3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed40:	460c      	mov	r4, r1
 800ed42:	2001      	movs	r0, #1
 800ed44:	e7a5      	b.n	800ec92 <_vfiprintf_r+0x11a>
 800ed46:	2300      	movs	r3, #0
 800ed48:	3401      	adds	r4, #1
 800ed4a:	9305      	str	r3, [sp, #20]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	f04f 0c0a 	mov.w	ip, #10
 800ed52:	4620      	mov	r0, r4
 800ed54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed58:	3a30      	subs	r2, #48	; 0x30
 800ed5a:	2a09      	cmp	r2, #9
 800ed5c:	d903      	bls.n	800ed66 <_vfiprintf_r+0x1ee>
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d0c5      	beq.n	800ecee <_vfiprintf_r+0x176>
 800ed62:	9105      	str	r1, [sp, #20]
 800ed64:	e7c3      	b.n	800ecee <_vfiprintf_r+0x176>
 800ed66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e7f0      	b.n	800ed52 <_vfiprintf_r+0x1da>
 800ed70:	ab03      	add	r3, sp, #12
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	462a      	mov	r2, r5
 800ed76:	4b16      	ldr	r3, [pc, #88]	; (800edd0 <_vfiprintf_r+0x258>)
 800ed78:	a904      	add	r1, sp, #16
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f7fd ffaa 	bl	800ccd4 <_printf_float>
 800ed80:	4607      	mov	r7, r0
 800ed82:	1c78      	adds	r0, r7, #1
 800ed84:	d1d6      	bne.n	800ed34 <_vfiprintf_r+0x1bc>
 800ed86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed88:	07d9      	lsls	r1, r3, #31
 800ed8a:	d405      	bmi.n	800ed98 <_vfiprintf_r+0x220>
 800ed8c:	89ab      	ldrh	r3, [r5, #12]
 800ed8e:	059a      	lsls	r2, r3, #22
 800ed90:	d402      	bmi.n	800ed98 <_vfiprintf_r+0x220>
 800ed92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed94:	f000 faaf 	bl	800f2f6 <__retarget_lock_release_recursive>
 800ed98:	89ab      	ldrh	r3, [r5, #12]
 800ed9a:	065b      	lsls	r3, r3, #25
 800ed9c:	f53f af12 	bmi.w	800ebc4 <_vfiprintf_r+0x4c>
 800eda0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eda2:	e711      	b.n	800ebc8 <_vfiprintf_r+0x50>
 800eda4:	ab03      	add	r3, sp, #12
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	462a      	mov	r2, r5
 800edaa:	4b09      	ldr	r3, [pc, #36]	; (800edd0 <_vfiprintf_r+0x258>)
 800edac:	a904      	add	r1, sp, #16
 800edae:	4630      	mov	r0, r6
 800edb0:	f7fe fa34 	bl	800d21c <_printf_i>
 800edb4:	e7e4      	b.n	800ed80 <_vfiprintf_r+0x208>
 800edb6:	bf00      	nop
 800edb8:	08010afc 	.word	0x08010afc
 800edbc:	08010b1c 	.word	0x08010b1c
 800edc0:	08010adc 	.word	0x08010adc
 800edc4:	080109ca 	.word	0x080109ca
 800edc8:	080109d4 	.word	0x080109d4
 800edcc:	0800ccd5 	.word	0x0800ccd5
 800edd0:	0800eb53 	.word	0x0800eb53
 800edd4:	080109d0 	.word	0x080109d0

0800edd8 <__swbuf_r>:
 800edd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edda:	460e      	mov	r6, r1
 800eddc:	4614      	mov	r4, r2
 800edde:	4605      	mov	r5, r0
 800ede0:	b118      	cbz	r0, 800edea <__swbuf_r+0x12>
 800ede2:	6983      	ldr	r3, [r0, #24]
 800ede4:	b90b      	cbnz	r3, 800edea <__swbuf_r+0x12>
 800ede6:	f000 f9e7 	bl	800f1b8 <__sinit>
 800edea:	4b21      	ldr	r3, [pc, #132]	; (800ee70 <__swbuf_r+0x98>)
 800edec:	429c      	cmp	r4, r3
 800edee:	d12b      	bne.n	800ee48 <__swbuf_r+0x70>
 800edf0:	686c      	ldr	r4, [r5, #4]
 800edf2:	69a3      	ldr	r3, [r4, #24]
 800edf4:	60a3      	str	r3, [r4, #8]
 800edf6:	89a3      	ldrh	r3, [r4, #12]
 800edf8:	071a      	lsls	r2, r3, #28
 800edfa:	d52f      	bpl.n	800ee5c <__swbuf_r+0x84>
 800edfc:	6923      	ldr	r3, [r4, #16]
 800edfe:	b36b      	cbz	r3, 800ee5c <__swbuf_r+0x84>
 800ee00:	6923      	ldr	r3, [r4, #16]
 800ee02:	6820      	ldr	r0, [r4, #0]
 800ee04:	1ac0      	subs	r0, r0, r3
 800ee06:	6963      	ldr	r3, [r4, #20]
 800ee08:	b2f6      	uxtb	r6, r6
 800ee0a:	4283      	cmp	r3, r0
 800ee0c:	4637      	mov	r7, r6
 800ee0e:	dc04      	bgt.n	800ee1a <__swbuf_r+0x42>
 800ee10:	4621      	mov	r1, r4
 800ee12:	4628      	mov	r0, r5
 800ee14:	f000 f93c 	bl	800f090 <_fflush_r>
 800ee18:	bb30      	cbnz	r0, 800ee68 <__swbuf_r+0x90>
 800ee1a:	68a3      	ldr	r3, [r4, #8]
 800ee1c:	3b01      	subs	r3, #1
 800ee1e:	60a3      	str	r3, [r4, #8]
 800ee20:	6823      	ldr	r3, [r4, #0]
 800ee22:	1c5a      	adds	r2, r3, #1
 800ee24:	6022      	str	r2, [r4, #0]
 800ee26:	701e      	strb	r6, [r3, #0]
 800ee28:	6963      	ldr	r3, [r4, #20]
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	4283      	cmp	r3, r0
 800ee2e:	d004      	beq.n	800ee3a <__swbuf_r+0x62>
 800ee30:	89a3      	ldrh	r3, [r4, #12]
 800ee32:	07db      	lsls	r3, r3, #31
 800ee34:	d506      	bpl.n	800ee44 <__swbuf_r+0x6c>
 800ee36:	2e0a      	cmp	r6, #10
 800ee38:	d104      	bne.n	800ee44 <__swbuf_r+0x6c>
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	f000 f927 	bl	800f090 <_fflush_r>
 800ee42:	b988      	cbnz	r0, 800ee68 <__swbuf_r+0x90>
 800ee44:	4638      	mov	r0, r7
 800ee46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee48:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <__swbuf_r+0x9c>)
 800ee4a:	429c      	cmp	r4, r3
 800ee4c:	d101      	bne.n	800ee52 <__swbuf_r+0x7a>
 800ee4e:	68ac      	ldr	r4, [r5, #8]
 800ee50:	e7cf      	b.n	800edf2 <__swbuf_r+0x1a>
 800ee52:	4b09      	ldr	r3, [pc, #36]	; (800ee78 <__swbuf_r+0xa0>)
 800ee54:	429c      	cmp	r4, r3
 800ee56:	bf08      	it	eq
 800ee58:	68ec      	ldreq	r4, [r5, #12]
 800ee5a:	e7ca      	b.n	800edf2 <__swbuf_r+0x1a>
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f000 f81a 	bl	800ee98 <__swsetup_r>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d0cb      	beq.n	800ee00 <__swbuf_r+0x28>
 800ee68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ee6c:	e7ea      	b.n	800ee44 <__swbuf_r+0x6c>
 800ee6e:	bf00      	nop
 800ee70:	08010afc 	.word	0x08010afc
 800ee74:	08010b1c 	.word	0x08010b1c
 800ee78:	08010adc 	.word	0x08010adc

0800ee7c <__ascii_wctomb>:
 800ee7c:	b149      	cbz	r1, 800ee92 <__ascii_wctomb+0x16>
 800ee7e:	2aff      	cmp	r2, #255	; 0xff
 800ee80:	bf85      	ittet	hi
 800ee82:	238a      	movhi	r3, #138	; 0x8a
 800ee84:	6003      	strhi	r3, [r0, #0]
 800ee86:	700a      	strbls	r2, [r1, #0]
 800ee88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ee8c:	bf98      	it	ls
 800ee8e:	2001      	movls	r0, #1
 800ee90:	4770      	bx	lr
 800ee92:	4608      	mov	r0, r1
 800ee94:	4770      	bx	lr
	...

0800ee98 <__swsetup_r>:
 800ee98:	4b32      	ldr	r3, [pc, #200]	; (800ef64 <__swsetup_r+0xcc>)
 800ee9a:	b570      	push	{r4, r5, r6, lr}
 800ee9c:	681d      	ldr	r5, [r3, #0]
 800ee9e:	4606      	mov	r6, r0
 800eea0:	460c      	mov	r4, r1
 800eea2:	b125      	cbz	r5, 800eeae <__swsetup_r+0x16>
 800eea4:	69ab      	ldr	r3, [r5, #24]
 800eea6:	b913      	cbnz	r3, 800eeae <__swsetup_r+0x16>
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f000 f985 	bl	800f1b8 <__sinit>
 800eeae:	4b2e      	ldr	r3, [pc, #184]	; (800ef68 <__swsetup_r+0xd0>)
 800eeb0:	429c      	cmp	r4, r3
 800eeb2:	d10f      	bne.n	800eed4 <__swsetup_r+0x3c>
 800eeb4:	686c      	ldr	r4, [r5, #4]
 800eeb6:	89a3      	ldrh	r3, [r4, #12]
 800eeb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eebc:	0719      	lsls	r1, r3, #28
 800eebe:	d42c      	bmi.n	800ef1a <__swsetup_r+0x82>
 800eec0:	06dd      	lsls	r5, r3, #27
 800eec2:	d411      	bmi.n	800eee8 <__swsetup_r+0x50>
 800eec4:	2309      	movs	r3, #9
 800eec6:	6033      	str	r3, [r6, #0]
 800eec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eecc:	81a3      	strh	r3, [r4, #12]
 800eece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eed2:	e03e      	b.n	800ef52 <__swsetup_r+0xba>
 800eed4:	4b25      	ldr	r3, [pc, #148]	; (800ef6c <__swsetup_r+0xd4>)
 800eed6:	429c      	cmp	r4, r3
 800eed8:	d101      	bne.n	800eede <__swsetup_r+0x46>
 800eeda:	68ac      	ldr	r4, [r5, #8]
 800eedc:	e7eb      	b.n	800eeb6 <__swsetup_r+0x1e>
 800eede:	4b24      	ldr	r3, [pc, #144]	; (800ef70 <__swsetup_r+0xd8>)
 800eee0:	429c      	cmp	r4, r3
 800eee2:	bf08      	it	eq
 800eee4:	68ec      	ldreq	r4, [r5, #12]
 800eee6:	e7e6      	b.n	800eeb6 <__swsetup_r+0x1e>
 800eee8:	0758      	lsls	r0, r3, #29
 800eeea:	d512      	bpl.n	800ef12 <__swsetup_r+0x7a>
 800eeec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeee:	b141      	cbz	r1, 800ef02 <__swsetup_r+0x6a>
 800eef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eef4:	4299      	cmp	r1, r3
 800eef6:	d002      	beq.n	800eefe <__swsetup_r+0x66>
 800eef8:	4630      	mov	r0, r6
 800eefa:	f7ff fcd5 	bl	800e8a8 <_free_r>
 800eefe:	2300      	movs	r3, #0
 800ef00:	6363      	str	r3, [r4, #52]	; 0x34
 800ef02:	89a3      	ldrh	r3, [r4, #12]
 800ef04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef08:	81a3      	strh	r3, [r4, #12]
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	6063      	str	r3, [r4, #4]
 800ef0e:	6923      	ldr	r3, [r4, #16]
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	89a3      	ldrh	r3, [r4, #12]
 800ef14:	f043 0308 	orr.w	r3, r3, #8
 800ef18:	81a3      	strh	r3, [r4, #12]
 800ef1a:	6923      	ldr	r3, [r4, #16]
 800ef1c:	b94b      	cbnz	r3, 800ef32 <__swsetup_r+0x9a>
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef28:	d003      	beq.n	800ef32 <__swsetup_r+0x9a>
 800ef2a:	4621      	mov	r1, r4
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	f000 fa09 	bl	800f344 <__smakebuf_r>
 800ef32:	89a0      	ldrh	r0, [r4, #12]
 800ef34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef38:	f010 0301 	ands.w	r3, r0, #1
 800ef3c:	d00a      	beq.n	800ef54 <__swsetup_r+0xbc>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	60a3      	str	r3, [r4, #8]
 800ef42:	6963      	ldr	r3, [r4, #20]
 800ef44:	425b      	negs	r3, r3
 800ef46:	61a3      	str	r3, [r4, #24]
 800ef48:	6923      	ldr	r3, [r4, #16]
 800ef4a:	b943      	cbnz	r3, 800ef5e <__swsetup_r+0xc6>
 800ef4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef50:	d1ba      	bne.n	800eec8 <__swsetup_r+0x30>
 800ef52:	bd70      	pop	{r4, r5, r6, pc}
 800ef54:	0781      	lsls	r1, r0, #30
 800ef56:	bf58      	it	pl
 800ef58:	6963      	ldrpl	r3, [r4, #20]
 800ef5a:	60a3      	str	r3, [r4, #8]
 800ef5c:	e7f4      	b.n	800ef48 <__swsetup_r+0xb0>
 800ef5e:	2000      	movs	r0, #0
 800ef60:	e7f7      	b.n	800ef52 <__swsetup_r+0xba>
 800ef62:	bf00      	nop
 800ef64:	20000134 	.word	0x20000134
 800ef68:	08010afc 	.word	0x08010afc
 800ef6c:	08010b1c 	.word	0x08010b1c
 800ef70:	08010adc 	.word	0x08010adc

0800ef74 <abort>:
 800ef74:	b508      	push	{r3, lr}
 800ef76:	2006      	movs	r0, #6
 800ef78:	f000 fa4c 	bl	800f414 <raise>
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	f7f4 f9b3 	bl	80032e8 <_exit>
	...

0800ef84 <__sflush_r>:
 800ef84:	898a      	ldrh	r2, [r1, #12]
 800ef86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	0710      	lsls	r0, r2, #28
 800ef8e:	460c      	mov	r4, r1
 800ef90:	d458      	bmi.n	800f044 <__sflush_r+0xc0>
 800ef92:	684b      	ldr	r3, [r1, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	dc05      	bgt.n	800efa4 <__sflush_r+0x20>
 800ef98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	dc02      	bgt.n	800efa4 <__sflush_r+0x20>
 800ef9e:	2000      	movs	r0, #0
 800efa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efa6:	2e00      	cmp	r6, #0
 800efa8:	d0f9      	beq.n	800ef9e <__sflush_r+0x1a>
 800efaa:	2300      	movs	r3, #0
 800efac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efb0:	682f      	ldr	r7, [r5, #0]
 800efb2:	602b      	str	r3, [r5, #0]
 800efb4:	d032      	beq.n	800f01c <__sflush_r+0x98>
 800efb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efb8:	89a3      	ldrh	r3, [r4, #12]
 800efba:	075a      	lsls	r2, r3, #29
 800efbc:	d505      	bpl.n	800efca <__sflush_r+0x46>
 800efbe:	6863      	ldr	r3, [r4, #4]
 800efc0:	1ac0      	subs	r0, r0, r3
 800efc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efc4:	b10b      	cbz	r3, 800efca <__sflush_r+0x46>
 800efc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efc8:	1ac0      	subs	r0, r0, r3
 800efca:	2300      	movs	r3, #0
 800efcc:	4602      	mov	r2, r0
 800efce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efd0:	6a21      	ldr	r1, [r4, #32]
 800efd2:	4628      	mov	r0, r5
 800efd4:	47b0      	blx	r6
 800efd6:	1c43      	adds	r3, r0, #1
 800efd8:	89a3      	ldrh	r3, [r4, #12]
 800efda:	d106      	bne.n	800efea <__sflush_r+0x66>
 800efdc:	6829      	ldr	r1, [r5, #0]
 800efde:	291d      	cmp	r1, #29
 800efe0:	d82c      	bhi.n	800f03c <__sflush_r+0xb8>
 800efe2:	4a2a      	ldr	r2, [pc, #168]	; (800f08c <__sflush_r+0x108>)
 800efe4:	40ca      	lsrs	r2, r1
 800efe6:	07d6      	lsls	r6, r2, #31
 800efe8:	d528      	bpl.n	800f03c <__sflush_r+0xb8>
 800efea:	2200      	movs	r2, #0
 800efec:	6062      	str	r2, [r4, #4]
 800efee:	04d9      	lsls	r1, r3, #19
 800eff0:	6922      	ldr	r2, [r4, #16]
 800eff2:	6022      	str	r2, [r4, #0]
 800eff4:	d504      	bpl.n	800f000 <__sflush_r+0x7c>
 800eff6:	1c42      	adds	r2, r0, #1
 800eff8:	d101      	bne.n	800effe <__sflush_r+0x7a>
 800effa:	682b      	ldr	r3, [r5, #0]
 800effc:	b903      	cbnz	r3, 800f000 <__sflush_r+0x7c>
 800effe:	6560      	str	r0, [r4, #84]	; 0x54
 800f000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f002:	602f      	str	r7, [r5, #0]
 800f004:	2900      	cmp	r1, #0
 800f006:	d0ca      	beq.n	800ef9e <__sflush_r+0x1a>
 800f008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f00c:	4299      	cmp	r1, r3
 800f00e:	d002      	beq.n	800f016 <__sflush_r+0x92>
 800f010:	4628      	mov	r0, r5
 800f012:	f7ff fc49 	bl	800e8a8 <_free_r>
 800f016:	2000      	movs	r0, #0
 800f018:	6360      	str	r0, [r4, #52]	; 0x34
 800f01a:	e7c1      	b.n	800efa0 <__sflush_r+0x1c>
 800f01c:	6a21      	ldr	r1, [r4, #32]
 800f01e:	2301      	movs	r3, #1
 800f020:	4628      	mov	r0, r5
 800f022:	47b0      	blx	r6
 800f024:	1c41      	adds	r1, r0, #1
 800f026:	d1c7      	bne.n	800efb8 <__sflush_r+0x34>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d0c4      	beq.n	800efb8 <__sflush_r+0x34>
 800f02e:	2b1d      	cmp	r3, #29
 800f030:	d001      	beq.n	800f036 <__sflush_r+0xb2>
 800f032:	2b16      	cmp	r3, #22
 800f034:	d101      	bne.n	800f03a <__sflush_r+0xb6>
 800f036:	602f      	str	r7, [r5, #0]
 800f038:	e7b1      	b.n	800ef9e <__sflush_r+0x1a>
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f040:	81a3      	strh	r3, [r4, #12]
 800f042:	e7ad      	b.n	800efa0 <__sflush_r+0x1c>
 800f044:	690f      	ldr	r7, [r1, #16]
 800f046:	2f00      	cmp	r7, #0
 800f048:	d0a9      	beq.n	800ef9e <__sflush_r+0x1a>
 800f04a:	0793      	lsls	r3, r2, #30
 800f04c:	680e      	ldr	r6, [r1, #0]
 800f04e:	bf08      	it	eq
 800f050:	694b      	ldreq	r3, [r1, #20]
 800f052:	600f      	str	r7, [r1, #0]
 800f054:	bf18      	it	ne
 800f056:	2300      	movne	r3, #0
 800f058:	eba6 0807 	sub.w	r8, r6, r7
 800f05c:	608b      	str	r3, [r1, #8]
 800f05e:	f1b8 0f00 	cmp.w	r8, #0
 800f062:	dd9c      	ble.n	800ef9e <__sflush_r+0x1a>
 800f064:	6a21      	ldr	r1, [r4, #32]
 800f066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f068:	4643      	mov	r3, r8
 800f06a:	463a      	mov	r2, r7
 800f06c:	4628      	mov	r0, r5
 800f06e:	47b0      	blx	r6
 800f070:	2800      	cmp	r0, #0
 800f072:	dc06      	bgt.n	800f082 <__sflush_r+0xfe>
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f07a:	81a3      	strh	r3, [r4, #12]
 800f07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f080:	e78e      	b.n	800efa0 <__sflush_r+0x1c>
 800f082:	4407      	add	r7, r0
 800f084:	eba8 0800 	sub.w	r8, r8, r0
 800f088:	e7e9      	b.n	800f05e <__sflush_r+0xda>
 800f08a:	bf00      	nop
 800f08c:	20400001 	.word	0x20400001

0800f090 <_fflush_r>:
 800f090:	b538      	push	{r3, r4, r5, lr}
 800f092:	690b      	ldr	r3, [r1, #16]
 800f094:	4605      	mov	r5, r0
 800f096:	460c      	mov	r4, r1
 800f098:	b913      	cbnz	r3, 800f0a0 <_fflush_r+0x10>
 800f09a:	2500      	movs	r5, #0
 800f09c:	4628      	mov	r0, r5
 800f09e:	bd38      	pop	{r3, r4, r5, pc}
 800f0a0:	b118      	cbz	r0, 800f0aa <_fflush_r+0x1a>
 800f0a2:	6983      	ldr	r3, [r0, #24]
 800f0a4:	b90b      	cbnz	r3, 800f0aa <_fflush_r+0x1a>
 800f0a6:	f000 f887 	bl	800f1b8 <__sinit>
 800f0aa:	4b14      	ldr	r3, [pc, #80]	; (800f0fc <_fflush_r+0x6c>)
 800f0ac:	429c      	cmp	r4, r3
 800f0ae:	d11b      	bne.n	800f0e8 <_fflush_r+0x58>
 800f0b0:	686c      	ldr	r4, [r5, #4]
 800f0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d0ef      	beq.n	800f09a <_fflush_r+0xa>
 800f0ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0bc:	07d0      	lsls	r0, r2, #31
 800f0be:	d404      	bmi.n	800f0ca <_fflush_r+0x3a>
 800f0c0:	0599      	lsls	r1, r3, #22
 800f0c2:	d402      	bmi.n	800f0ca <_fflush_r+0x3a>
 800f0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0c6:	f000 f915 	bl	800f2f4 <__retarget_lock_acquire_recursive>
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	f7ff ff59 	bl	800ef84 <__sflush_r>
 800f0d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0d4:	07da      	lsls	r2, r3, #31
 800f0d6:	4605      	mov	r5, r0
 800f0d8:	d4e0      	bmi.n	800f09c <_fflush_r+0xc>
 800f0da:	89a3      	ldrh	r3, [r4, #12]
 800f0dc:	059b      	lsls	r3, r3, #22
 800f0de:	d4dd      	bmi.n	800f09c <_fflush_r+0xc>
 800f0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0e2:	f000 f908 	bl	800f2f6 <__retarget_lock_release_recursive>
 800f0e6:	e7d9      	b.n	800f09c <_fflush_r+0xc>
 800f0e8:	4b05      	ldr	r3, [pc, #20]	; (800f100 <_fflush_r+0x70>)
 800f0ea:	429c      	cmp	r4, r3
 800f0ec:	d101      	bne.n	800f0f2 <_fflush_r+0x62>
 800f0ee:	68ac      	ldr	r4, [r5, #8]
 800f0f0:	e7df      	b.n	800f0b2 <_fflush_r+0x22>
 800f0f2:	4b04      	ldr	r3, [pc, #16]	; (800f104 <_fflush_r+0x74>)
 800f0f4:	429c      	cmp	r4, r3
 800f0f6:	bf08      	it	eq
 800f0f8:	68ec      	ldreq	r4, [r5, #12]
 800f0fa:	e7da      	b.n	800f0b2 <_fflush_r+0x22>
 800f0fc:	08010afc 	.word	0x08010afc
 800f100:	08010b1c 	.word	0x08010b1c
 800f104:	08010adc 	.word	0x08010adc

0800f108 <std>:
 800f108:	2300      	movs	r3, #0
 800f10a:	b510      	push	{r4, lr}
 800f10c:	4604      	mov	r4, r0
 800f10e:	e9c0 3300 	strd	r3, r3, [r0]
 800f112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f116:	6083      	str	r3, [r0, #8]
 800f118:	8181      	strh	r1, [r0, #12]
 800f11a:	6643      	str	r3, [r0, #100]	; 0x64
 800f11c:	81c2      	strh	r2, [r0, #14]
 800f11e:	6183      	str	r3, [r0, #24]
 800f120:	4619      	mov	r1, r3
 800f122:	2208      	movs	r2, #8
 800f124:	305c      	adds	r0, #92	; 0x5c
 800f126:	f7fd fd2d 	bl	800cb84 <memset>
 800f12a:	4b05      	ldr	r3, [pc, #20]	; (800f140 <std+0x38>)
 800f12c:	6263      	str	r3, [r4, #36]	; 0x24
 800f12e:	4b05      	ldr	r3, [pc, #20]	; (800f144 <std+0x3c>)
 800f130:	62a3      	str	r3, [r4, #40]	; 0x28
 800f132:	4b05      	ldr	r3, [pc, #20]	; (800f148 <std+0x40>)
 800f134:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f136:	4b05      	ldr	r3, [pc, #20]	; (800f14c <std+0x44>)
 800f138:	6224      	str	r4, [r4, #32]
 800f13a:	6323      	str	r3, [r4, #48]	; 0x30
 800f13c:	bd10      	pop	{r4, pc}
 800f13e:	bf00      	nop
 800f140:	0800f44d 	.word	0x0800f44d
 800f144:	0800f46f 	.word	0x0800f46f
 800f148:	0800f4a7 	.word	0x0800f4a7
 800f14c:	0800f4cb 	.word	0x0800f4cb

0800f150 <_cleanup_r>:
 800f150:	4901      	ldr	r1, [pc, #4]	; (800f158 <_cleanup_r+0x8>)
 800f152:	f000 b8af 	b.w	800f2b4 <_fwalk_reent>
 800f156:	bf00      	nop
 800f158:	0800f091 	.word	0x0800f091

0800f15c <__sfmoreglue>:
 800f15c:	b570      	push	{r4, r5, r6, lr}
 800f15e:	2268      	movs	r2, #104	; 0x68
 800f160:	1e4d      	subs	r5, r1, #1
 800f162:	4355      	muls	r5, r2
 800f164:	460e      	mov	r6, r1
 800f166:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f16a:	f7ff fc09 	bl	800e980 <_malloc_r>
 800f16e:	4604      	mov	r4, r0
 800f170:	b140      	cbz	r0, 800f184 <__sfmoreglue+0x28>
 800f172:	2100      	movs	r1, #0
 800f174:	e9c0 1600 	strd	r1, r6, [r0]
 800f178:	300c      	adds	r0, #12
 800f17a:	60a0      	str	r0, [r4, #8]
 800f17c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f180:	f7fd fd00 	bl	800cb84 <memset>
 800f184:	4620      	mov	r0, r4
 800f186:	bd70      	pop	{r4, r5, r6, pc}

0800f188 <__sfp_lock_acquire>:
 800f188:	4801      	ldr	r0, [pc, #4]	; (800f190 <__sfp_lock_acquire+0x8>)
 800f18a:	f000 b8b3 	b.w	800f2f4 <__retarget_lock_acquire_recursive>
 800f18e:	bf00      	nop
 800f190:	200022c9 	.word	0x200022c9

0800f194 <__sfp_lock_release>:
 800f194:	4801      	ldr	r0, [pc, #4]	; (800f19c <__sfp_lock_release+0x8>)
 800f196:	f000 b8ae 	b.w	800f2f6 <__retarget_lock_release_recursive>
 800f19a:	bf00      	nop
 800f19c:	200022c9 	.word	0x200022c9

0800f1a0 <__sinit_lock_acquire>:
 800f1a0:	4801      	ldr	r0, [pc, #4]	; (800f1a8 <__sinit_lock_acquire+0x8>)
 800f1a2:	f000 b8a7 	b.w	800f2f4 <__retarget_lock_acquire_recursive>
 800f1a6:	bf00      	nop
 800f1a8:	200022ca 	.word	0x200022ca

0800f1ac <__sinit_lock_release>:
 800f1ac:	4801      	ldr	r0, [pc, #4]	; (800f1b4 <__sinit_lock_release+0x8>)
 800f1ae:	f000 b8a2 	b.w	800f2f6 <__retarget_lock_release_recursive>
 800f1b2:	bf00      	nop
 800f1b4:	200022ca 	.word	0x200022ca

0800f1b8 <__sinit>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	f7ff fff0 	bl	800f1a0 <__sinit_lock_acquire>
 800f1c0:	69a3      	ldr	r3, [r4, #24]
 800f1c2:	b11b      	cbz	r3, 800f1cc <__sinit+0x14>
 800f1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1c8:	f7ff bff0 	b.w	800f1ac <__sinit_lock_release>
 800f1cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1d0:	6523      	str	r3, [r4, #80]	; 0x50
 800f1d2:	4b13      	ldr	r3, [pc, #76]	; (800f220 <__sinit+0x68>)
 800f1d4:	4a13      	ldr	r2, [pc, #76]	; (800f224 <__sinit+0x6c>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1da:	42a3      	cmp	r3, r4
 800f1dc:	bf04      	itt	eq
 800f1de:	2301      	moveq	r3, #1
 800f1e0:	61a3      	streq	r3, [r4, #24]
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f000 f820 	bl	800f228 <__sfp>
 800f1e8:	6060      	str	r0, [r4, #4]
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f000 f81c 	bl	800f228 <__sfp>
 800f1f0:	60a0      	str	r0, [r4, #8]
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 f818 	bl	800f228 <__sfp>
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	60e0      	str	r0, [r4, #12]
 800f1fc:	2104      	movs	r1, #4
 800f1fe:	6860      	ldr	r0, [r4, #4]
 800f200:	f7ff ff82 	bl	800f108 <std>
 800f204:	68a0      	ldr	r0, [r4, #8]
 800f206:	2201      	movs	r2, #1
 800f208:	2109      	movs	r1, #9
 800f20a:	f7ff ff7d 	bl	800f108 <std>
 800f20e:	68e0      	ldr	r0, [r4, #12]
 800f210:	2202      	movs	r2, #2
 800f212:	2112      	movs	r1, #18
 800f214:	f7ff ff78 	bl	800f108 <std>
 800f218:	2301      	movs	r3, #1
 800f21a:	61a3      	str	r3, [r4, #24]
 800f21c:	e7d2      	b.n	800f1c4 <__sinit+0xc>
 800f21e:	bf00      	nop
 800f220:	08010760 	.word	0x08010760
 800f224:	0800f151 	.word	0x0800f151

0800f228 <__sfp>:
 800f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22a:	4607      	mov	r7, r0
 800f22c:	f7ff ffac 	bl	800f188 <__sfp_lock_acquire>
 800f230:	4b1e      	ldr	r3, [pc, #120]	; (800f2ac <__sfp+0x84>)
 800f232:	681e      	ldr	r6, [r3, #0]
 800f234:	69b3      	ldr	r3, [r6, #24]
 800f236:	b913      	cbnz	r3, 800f23e <__sfp+0x16>
 800f238:	4630      	mov	r0, r6
 800f23a:	f7ff ffbd 	bl	800f1b8 <__sinit>
 800f23e:	3648      	adds	r6, #72	; 0x48
 800f240:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f244:	3b01      	subs	r3, #1
 800f246:	d503      	bpl.n	800f250 <__sfp+0x28>
 800f248:	6833      	ldr	r3, [r6, #0]
 800f24a:	b30b      	cbz	r3, 800f290 <__sfp+0x68>
 800f24c:	6836      	ldr	r6, [r6, #0]
 800f24e:	e7f7      	b.n	800f240 <__sfp+0x18>
 800f250:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f254:	b9d5      	cbnz	r5, 800f28c <__sfp+0x64>
 800f256:	4b16      	ldr	r3, [pc, #88]	; (800f2b0 <__sfp+0x88>)
 800f258:	60e3      	str	r3, [r4, #12]
 800f25a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f25e:	6665      	str	r5, [r4, #100]	; 0x64
 800f260:	f000 f847 	bl	800f2f2 <__retarget_lock_init_recursive>
 800f264:	f7ff ff96 	bl	800f194 <__sfp_lock_release>
 800f268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f26c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f270:	6025      	str	r5, [r4, #0]
 800f272:	61a5      	str	r5, [r4, #24]
 800f274:	2208      	movs	r2, #8
 800f276:	4629      	mov	r1, r5
 800f278:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f27c:	f7fd fc82 	bl	800cb84 <memset>
 800f280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f288:	4620      	mov	r0, r4
 800f28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f28c:	3468      	adds	r4, #104	; 0x68
 800f28e:	e7d9      	b.n	800f244 <__sfp+0x1c>
 800f290:	2104      	movs	r1, #4
 800f292:	4638      	mov	r0, r7
 800f294:	f7ff ff62 	bl	800f15c <__sfmoreglue>
 800f298:	4604      	mov	r4, r0
 800f29a:	6030      	str	r0, [r6, #0]
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d1d5      	bne.n	800f24c <__sfp+0x24>
 800f2a0:	f7ff ff78 	bl	800f194 <__sfp_lock_release>
 800f2a4:	230c      	movs	r3, #12
 800f2a6:	603b      	str	r3, [r7, #0]
 800f2a8:	e7ee      	b.n	800f288 <__sfp+0x60>
 800f2aa:	bf00      	nop
 800f2ac:	08010760 	.word	0x08010760
 800f2b0:	ffff0001 	.word	0xffff0001

0800f2b4 <_fwalk_reent>:
 800f2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	4688      	mov	r8, r1
 800f2bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2c0:	2700      	movs	r7, #0
 800f2c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2c6:	f1b9 0901 	subs.w	r9, r9, #1
 800f2ca:	d505      	bpl.n	800f2d8 <_fwalk_reent+0x24>
 800f2cc:	6824      	ldr	r4, [r4, #0]
 800f2ce:	2c00      	cmp	r4, #0
 800f2d0:	d1f7      	bne.n	800f2c2 <_fwalk_reent+0xe>
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2d8:	89ab      	ldrh	r3, [r5, #12]
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d907      	bls.n	800f2ee <_fwalk_reent+0x3a>
 800f2de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	d003      	beq.n	800f2ee <_fwalk_reent+0x3a>
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	47c0      	blx	r8
 800f2ec:	4307      	orrs	r7, r0
 800f2ee:	3568      	adds	r5, #104	; 0x68
 800f2f0:	e7e9      	b.n	800f2c6 <_fwalk_reent+0x12>

0800f2f2 <__retarget_lock_init_recursive>:
 800f2f2:	4770      	bx	lr

0800f2f4 <__retarget_lock_acquire_recursive>:
 800f2f4:	4770      	bx	lr

0800f2f6 <__retarget_lock_release_recursive>:
 800f2f6:	4770      	bx	lr

0800f2f8 <__swhatbuf_r>:
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	460e      	mov	r6, r1
 800f2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f300:	2900      	cmp	r1, #0
 800f302:	b096      	sub	sp, #88	; 0x58
 800f304:	4614      	mov	r4, r2
 800f306:	461d      	mov	r5, r3
 800f308:	da08      	bge.n	800f31c <__swhatbuf_r+0x24>
 800f30a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f30e:	2200      	movs	r2, #0
 800f310:	602a      	str	r2, [r5, #0]
 800f312:	061a      	lsls	r2, r3, #24
 800f314:	d410      	bmi.n	800f338 <__swhatbuf_r+0x40>
 800f316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f31a:	e00e      	b.n	800f33a <__swhatbuf_r+0x42>
 800f31c:	466a      	mov	r2, sp
 800f31e:	f000 f8fb 	bl	800f518 <_fstat_r>
 800f322:	2800      	cmp	r0, #0
 800f324:	dbf1      	blt.n	800f30a <__swhatbuf_r+0x12>
 800f326:	9a01      	ldr	r2, [sp, #4]
 800f328:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f32c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f330:	425a      	negs	r2, r3
 800f332:	415a      	adcs	r2, r3
 800f334:	602a      	str	r2, [r5, #0]
 800f336:	e7ee      	b.n	800f316 <__swhatbuf_r+0x1e>
 800f338:	2340      	movs	r3, #64	; 0x40
 800f33a:	2000      	movs	r0, #0
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	b016      	add	sp, #88	; 0x58
 800f340:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f344 <__smakebuf_r>:
 800f344:	898b      	ldrh	r3, [r1, #12]
 800f346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f348:	079d      	lsls	r5, r3, #30
 800f34a:	4606      	mov	r6, r0
 800f34c:	460c      	mov	r4, r1
 800f34e:	d507      	bpl.n	800f360 <__smakebuf_r+0x1c>
 800f350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	6123      	str	r3, [r4, #16]
 800f358:	2301      	movs	r3, #1
 800f35a:	6163      	str	r3, [r4, #20]
 800f35c:	b002      	add	sp, #8
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	ab01      	add	r3, sp, #4
 800f362:	466a      	mov	r2, sp
 800f364:	f7ff ffc8 	bl	800f2f8 <__swhatbuf_r>
 800f368:	9900      	ldr	r1, [sp, #0]
 800f36a:	4605      	mov	r5, r0
 800f36c:	4630      	mov	r0, r6
 800f36e:	f7ff fb07 	bl	800e980 <_malloc_r>
 800f372:	b948      	cbnz	r0, 800f388 <__smakebuf_r+0x44>
 800f374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f378:	059a      	lsls	r2, r3, #22
 800f37a:	d4ef      	bmi.n	800f35c <__smakebuf_r+0x18>
 800f37c:	f023 0303 	bic.w	r3, r3, #3
 800f380:	f043 0302 	orr.w	r3, r3, #2
 800f384:	81a3      	strh	r3, [r4, #12]
 800f386:	e7e3      	b.n	800f350 <__smakebuf_r+0xc>
 800f388:	4b0d      	ldr	r3, [pc, #52]	; (800f3c0 <__smakebuf_r+0x7c>)
 800f38a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f38c:	89a3      	ldrh	r3, [r4, #12]
 800f38e:	6020      	str	r0, [r4, #0]
 800f390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f394:	81a3      	strh	r3, [r4, #12]
 800f396:	9b00      	ldr	r3, [sp, #0]
 800f398:	6163      	str	r3, [r4, #20]
 800f39a:	9b01      	ldr	r3, [sp, #4]
 800f39c:	6120      	str	r0, [r4, #16]
 800f39e:	b15b      	cbz	r3, 800f3b8 <__smakebuf_r+0x74>
 800f3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	f000 f8c9 	bl	800f53c <_isatty_r>
 800f3aa:	b128      	cbz	r0, 800f3b8 <__smakebuf_r+0x74>
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	f023 0303 	bic.w	r3, r3, #3
 800f3b2:	f043 0301 	orr.w	r3, r3, #1
 800f3b6:	81a3      	strh	r3, [r4, #12]
 800f3b8:	89a0      	ldrh	r0, [r4, #12]
 800f3ba:	4305      	orrs	r5, r0
 800f3bc:	81a5      	strh	r5, [r4, #12]
 800f3be:	e7cd      	b.n	800f35c <__smakebuf_r+0x18>
 800f3c0:	0800f151 	.word	0x0800f151

0800f3c4 <_raise_r>:
 800f3c4:	291f      	cmp	r1, #31
 800f3c6:	b538      	push	{r3, r4, r5, lr}
 800f3c8:	4604      	mov	r4, r0
 800f3ca:	460d      	mov	r5, r1
 800f3cc:	d904      	bls.n	800f3d8 <_raise_r+0x14>
 800f3ce:	2316      	movs	r3, #22
 800f3d0:	6003      	str	r3, [r0, #0]
 800f3d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f3da:	b112      	cbz	r2, 800f3e2 <_raise_r+0x1e>
 800f3dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3e0:	b94b      	cbnz	r3, 800f3f6 <_raise_r+0x32>
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f000 f830 	bl	800f448 <_getpid_r>
 800f3e8:	462a      	mov	r2, r5
 800f3ea:	4601      	mov	r1, r0
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3f2:	f000 b817 	b.w	800f424 <_kill_r>
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d00a      	beq.n	800f410 <_raise_r+0x4c>
 800f3fa:	1c59      	adds	r1, r3, #1
 800f3fc:	d103      	bne.n	800f406 <_raise_r+0x42>
 800f3fe:	2316      	movs	r3, #22
 800f400:	6003      	str	r3, [r0, #0]
 800f402:	2001      	movs	r0, #1
 800f404:	e7e7      	b.n	800f3d6 <_raise_r+0x12>
 800f406:	2400      	movs	r4, #0
 800f408:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f40c:	4628      	mov	r0, r5
 800f40e:	4798      	blx	r3
 800f410:	2000      	movs	r0, #0
 800f412:	e7e0      	b.n	800f3d6 <_raise_r+0x12>

0800f414 <raise>:
 800f414:	4b02      	ldr	r3, [pc, #8]	; (800f420 <raise+0xc>)
 800f416:	4601      	mov	r1, r0
 800f418:	6818      	ldr	r0, [r3, #0]
 800f41a:	f7ff bfd3 	b.w	800f3c4 <_raise_r>
 800f41e:	bf00      	nop
 800f420:	20000134 	.word	0x20000134

0800f424 <_kill_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4d07      	ldr	r5, [pc, #28]	; (800f444 <_kill_r+0x20>)
 800f428:	2300      	movs	r3, #0
 800f42a:	4604      	mov	r4, r0
 800f42c:	4608      	mov	r0, r1
 800f42e:	4611      	mov	r1, r2
 800f430:	602b      	str	r3, [r5, #0]
 800f432:	f7f3 ff49 	bl	80032c8 <_kill>
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	d102      	bne.n	800f440 <_kill_r+0x1c>
 800f43a:	682b      	ldr	r3, [r5, #0]
 800f43c:	b103      	cbz	r3, 800f440 <_kill_r+0x1c>
 800f43e:	6023      	str	r3, [r4, #0]
 800f440:	bd38      	pop	{r3, r4, r5, pc}
 800f442:	bf00      	nop
 800f444:	200022c4 	.word	0x200022c4

0800f448 <_getpid_r>:
 800f448:	f7f3 bf36 	b.w	80032b8 <_getpid>

0800f44c <__sread>:
 800f44c:	b510      	push	{r4, lr}
 800f44e:	460c      	mov	r4, r1
 800f450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f454:	f000 f894 	bl	800f580 <_read_r>
 800f458:	2800      	cmp	r0, #0
 800f45a:	bfab      	itete	ge
 800f45c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f45e:	89a3      	ldrhlt	r3, [r4, #12]
 800f460:	181b      	addge	r3, r3, r0
 800f462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f466:	bfac      	ite	ge
 800f468:	6563      	strge	r3, [r4, #84]	; 0x54
 800f46a:	81a3      	strhlt	r3, [r4, #12]
 800f46c:	bd10      	pop	{r4, pc}

0800f46e <__swrite>:
 800f46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f472:	461f      	mov	r7, r3
 800f474:	898b      	ldrh	r3, [r1, #12]
 800f476:	05db      	lsls	r3, r3, #23
 800f478:	4605      	mov	r5, r0
 800f47a:	460c      	mov	r4, r1
 800f47c:	4616      	mov	r6, r2
 800f47e:	d505      	bpl.n	800f48c <__swrite+0x1e>
 800f480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f484:	2302      	movs	r3, #2
 800f486:	2200      	movs	r2, #0
 800f488:	f000 f868 	bl	800f55c <_lseek_r>
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f496:	81a3      	strh	r3, [r4, #12]
 800f498:	4632      	mov	r2, r6
 800f49a:	463b      	mov	r3, r7
 800f49c:	4628      	mov	r0, r5
 800f49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a2:	f000 b817 	b.w	800f4d4 <_write_r>

0800f4a6 <__sseek>:
 800f4a6:	b510      	push	{r4, lr}
 800f4a8:	460c      	mov	r4, r1
 800f4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ae:	f000 f855 	bl	800f55c <_lseek_r>
 800f4b2:	1c43      	adds	r3, r0, #1
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	bf15      	itete	ne
 800f4b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4c2:	81a3      	strheq	r3, [r4, #12]
 800f4c4:	bf18      	it	ne
 800f4c6:	81a3      	strhne	r3, [r4, #12]
 800f4c8:	bd10      	pop	{r4, pc}

0800f4ca <__sclose>:
 800f4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ce:	f000 b813 	b.w	800f4f8 <_close_r>
	...

0800f4d4 <_write_r>:
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	4d07      	ldr	r5, [pc, #28]	; (800f4f4 <_write_r+0x20>)
 800f4d8:	4604      	mov	r4, r0
 800f4da:	4608      	mov	r0, r1
 800f4dc:	4611      	mov	r1, r2
 800f4de:	2200      	movs	r2, #0
 800f4e0:	602a      	str	r2, [r5, #0]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	f7f3 ff27 	bl	8003336 <_write>
 800f4e8:	1c43      	adds	r3, r0, #1
 800f4ea:	d102      	bne.n	800f4f2 <_write_r+0x1e>
 800f4ec:	682b      	ldr	r3, [r5, #0]
 800f4ee:	b103      	cbz	r3, 800f4f2 <_write_r+0x1e>
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	bd38      	pop	{r3, r4, r5, pc}
 800f4f4:	200022c4 	.word	0x200022c4

0800f4f8 <_close_r>:
 800f4f8:	b538      	push	{r3, r4, r5, lr}
 800f4fa:	4d06      	ldr	r5, [pc, #24]	; (800f514 <_close_r+0x1c>)
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4604      	mov	r4, r0
 800f500:	4608      	mov	r0, r1
 800f502:	602b      	str	r3, [r5, #0]
 800f504:	f7f3 ff33 	bl	800336e <_close>
 800f508:	1c43      	adds	r3, r0, #1
 800f50a:	d102      	bne.n	800f512 <_close_r+0x1a>
 800f50c:	682b      	ldr	r3, [r5, #0]
 800f50e:	b103      	cbz	r3, 800f512 <_close_r+0x1a>
 800f510:	6023      	str	r3, [r4, #0]
 800f512:	bd38      	pop	{r3, r4, r5, pc}
 800f514:	200022c4 	.word	0x200022c4

0800f518 <_fstat_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	4d07      	ldr	r5, [pc, #28]	; (800f538 <_fstat_r+0x20>)
 800f51c:	2300      	movs	r3, #0
 800f51e:	4604      	mov	r4, r0
 800f520:	4608      	mov	r0, r1
 800f522:	4611      	mov	r1, r2
 800f524:	602b      	str	r3, [r5, #0]
 800f526:	f7f3 ff2e 	bl	8003386 <_fstat>
 800f52a:	1c43      	adds	r3, r0, #1
 800f52c:	d102      	bne.n	800f534 <_fstat_r+0x1c>
 800f52e:	682b      	ldr	r3, [r5, #0]
 800f530:	b103      	cbz	r3, 800f534 <_fstat_r+0x1c>
 800f532:	6023      	str	r3, [r4, #0]
 800f534:	bd38      	pop	{r3, r4, r5, pc}
 800f536:	bf00      	nop
 800f538:	200022c4 	.word	0x200022c4

0800f53c <_isatty_r>:
 800f53c:	b538      	push	{r3, r4, r5, lr}
 800f53e:	4d06      	ldr	r5, [pc, #24]	; (800f558 <_isatty_r+0x1c>)
 800f540:	2300      	movs	r3, #0
 800f542:	4604      	mov	r4, r0
 800f544:	4608      	mov	r0, r1
 800f546:	602b      	str	r3, [r5, #0]
 800f548:	f7f3 ff2d 	bl	80033a6 <_isatty>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	d102      	bne.n	800f556 <_isatty_r+0x1a>
 800f550:	682b      	ldr	r3, [r5, #0]
 800f552:	b103      	cbz	r3, 800f556 <_isatty_r+0x1a>
 800f554:	6023      	str	r3, [r4, #0]
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	200022c4 	.word	0x200022c4

0800f55c <_lseek_r>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	4d07      	ldr	r5, [pc, #28]	; (800f57c <_lseek_r+0x20>)
 800f560:	4604      	mov	r4, r0
 800f562:	4608      	mov	r0, r1
 800f564:	4611      	mov	r1, r2
 800f566:	2200      	movs	r2, #0
 800f568:	602a      	str	r2, [r5, #0]
 800f56a:	461a      	mov	r2, r3
 800f56c:	f7f3 ff26 	bl	80033bc <_lseek>
 800f570:	1c43      	adds	r3, r0, #1
 800f572:	d102      	bne.n	800f57a <_lseek_r+0x1e>
 800f574:	682b      	ldr	r3, [r5, #0]
 800f576:	b103      	cbz	r3, 800f57a <_lseek_r+0x1e>
 800f578:	6023      	str	r3, [r4, #0]
 800f57a:	bd38      	pop	{r3, r4, r5, pc}
 800f57c:	200022c4 	.word	0x200022c4

0800f580 <_read_r>:
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	4d07      	ldr	r5, [pc, #28]	; (800f5a0 <_read_r+0x20>)
 800f584:	4604      	mov	r4, r0
 800f586:	4608      	mov	r0, r1
 800f588:	4611      	mov	r1, r2
 800f58a:	2200      	movs	r2, #0
 800f58c:	602a      	str	r2, [r5, #0]
 800f58e:	461a      	mov	r2, r3
 800f590:	f7f3 feb4 	bl	80032fc <_read>
 800f594:	1c43      	adds	r3, r0, #1
 800f596:	d102      	bne.n	800f59e <_read_r+0x1e>
 800f598:	682b      	ldr	r3, [r5, #0]
 800f59a:	b103      	cbz	r3, 800f59e <_read_r+0x1e>
 800f59c:	6023      	str	r3, [r4, #0]
 800f59e:	bd38      	pop	{r3, r4, r5, pc}
 800f5a0:	200022c4 	.word	0x200022c4
 800f5a4:	00000000 	.word	0x00000000

0800f5a8 <cos>:
 800f5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5aa:	ec53 2b10 	vmov	r2, r3, d0
 800f5ae:	4826      	ldr	r0, [pc, #152]	; (800f648 <cos+0xa0>)
 800f5b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f5b4:	4281      	cmp	r1, r0
 800f5b6:	dc06      	bgt.n	800f5c6 <cos+0x1e>
 800f5b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f640 <cos+0x98>
 800f5bc:	b005      	add	sp, #20
 800f5be:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5c2:	f000 baa9 	b.w	800fb18 <__kernel_cos>
 800f5c6:	4821      	ldr	r0, [pc, #132]	; (800f64c <cos+0xa4>)
 800f5c8:	4281      	cmp	r1, r0
 800f5ca:	dd09      	ble.n	800f5e0 <cos+0x38>
 800f5cc:	ee10 0a10 	vmov	r0, s0
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	f7f0 fe79 	bl	80002c8 <__aeabi_dsub>
 800f5d6:	ec41 0b10 	vmov	d0, r0, r1
 800f5da:	b005      	add	sp, #20
 800f5dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5e0:	4668      	mov	r0, sp
 800f5e2:	f000 f88d 	bl	800f700 <__ieee754_rem_pio2>
 800f5e6:	f000 0003 	and.w	r0, r0, #3
 800f5ea:	2801      	cmp	r0, #1
 800f5ec:	d00b      	beq.n	800f606 <cos+0x5e>
 800f5ee:	2802      	cmp	r0, #2
 800f5f0:	d016      	beq.n	800f620 <cos+0x78>
 800f5f2:	b9e0      	cbnz	r0, 800f62e <cos+0x86>
 800f5f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5f8:	ed9d 0b00 	vldr	d0, [sp]
 800f5fc:	f000 fa8c 	bl	800fb18 <__kernel_cos>
 800f600:	ec51 0b10 	vmov	r0, r1, d0
 800f604:	e7e7      	b.n	800f5d6 <cos+0x2e>
 800f606:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f60a:	ed9d 0b00 	vldr	d0, [sp]
 800f60e:	f000 fe9b 	bl	8010348 <__kernel_sin>
 800f612:	ec53 2b10 	vmov	r2, r3, d0
 800f616:	ee10 0a10 	vmov	r0, s0
 800f61a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f61e:	e7da      	b.n	800f5d6 <cos+0x2e>
 800f620:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f624:	ed9d 0b00 	vldr	d0, [sp]
 800f628:	f000 fa76 	bl	800fb18 <__kernel_cos>
 800f62c:	e7f1      	b.n	800f612 <cos+0x6a>
 800f62e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f632:	ed9d 0b00 	vldr	d0, [sp]
 800f636:	2001      	movs	r0, #1
 800f638:	f000 fe86 	bl	8010348 <__kernel_sin>
 800f63c:	e7e0      	b.n	800f600 <cos+0x58>
 800f63e:	bf00      	nop
	...
 800f648:	3fe921fb 	.word	0x3fe921fb
 800f64c:	7fefffff 	.word	0x7fefffff

0800f650 <sin>:
 800f650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f652:	ec53 2b10 	vmov	r2, r3, d0
 800f656:	4828      	ldr	r0, [pc, #160]	; (800f6f8 <sin+0xa8>)
 800f658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f65c:	4281      	cmp	r1, r0
 800f65e:	dc07      	bgt.n	800f670 <sin+0x20>
 800f660:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f6f0 <sin+0xa0>
 800f664:	2000      	movs	r0, #0
 800f666:	b005      	add	sp, #20
 800f668:	f85d eb04 	ldr.w	lr, [sp], #4
 800f66c:	f000 be6c 	b.w	8010348 <__kernel_sin>
 800f670:	4822      	ldr	r0, [pc, #136]	; (800f6fc <sin+0xac>)
 800f672:	4281      	cmp	r1, r0
 800f674:	dd09      	ble.n	800f68a <sin+0x3a>
 800f676:	ee10 0a10 	vmov	r0, s0
 800f67a:	4619      	mov	r1, r3
 800f67c:	f7f0 fe24 	bl	80002c8 <__aeabi_dsub>
 800f680:	ec41 0b10 	vmov	d0, r0, r1
 800f684:	b005      	add	sp, #20
 800f686:	f85d fb04 	ldr.w	pc, [sp], #4
 800f68a:	4668      	mov	r0, sp
 800f68c:	f000 f838 	bl	800f700 <__ieee754_rem_pio2>
 800f690:	f000 0003 	and.w	r0, r0, #3
 800f694:	2801      	cmp	r0, #1
 800f696:	d00c      	beq.n	800f6b2 <sin+0x62>
 800f698:	2802      	cmp	r0, #2
 800f69a:	d011      	beq.n	800f6c0 <sin+0x70>
 800f69c:	b9f0      	cbnz	r0, 800f6dc <sin+0x8c>
 800f69e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6a2:	ed9d 0b00 	vldr	d0, [sp]
 800f6a6:	2001      	movs	r0, #1
 800f6a8:	f000 fe4e 	bl	8010348 <__kernel_sin>
 800f6ac:	ec51 0b10 	vmov	r0, r1, d0
 800f6b0:	e7e6      	b.n	800f680 <sin+0x30>
 800f6b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6b6:	ed9d 0b00 	vldr	d0, [sp]
 800f6ba:	f000 fa2d 	bl	800fb18 <__kernel_cos>
 800f6be:	e7f5      	b.n	800f6ac <sin+0x5c>
 800f6c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6c4:	ed9d 0b00 	vldr	d0, [sp]
 800f6c8:	2001      	movs	r0, #1
 800f6ca:	f000 fe3d 	bl	8010348 <__kernel_sin>
 800f6ce:	ec53 2b10 	vmov	r2, r3, d0
 800f6d2:	ee10 0a10 	vmov	r0, s0
 800f6d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f6da:	e7d1      	b.n	800f680 <sin+0x30>
 800f6dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6e0:	ed9d 0b00 	vldr	d0, [sp]
 800f6e4:	f000 fa18 	bl	800fb18 <__kernel_cos>
 800f6e8:	e7f1      	b.n	800f6ce <sin+0x7e>
 800f6ea:	bf00      	nop
 800f6ec:	f3af 8000 	nop.w
	...
 800f6f8:	3fe921fb 	.word	0x3fe921fb
 800f6fc:	7fefffff 	.word	0x7fefffff

0800f700 <__ieee754_rem_pio2>:
 800f700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f704:	ed2d 8b02 	vpush	{d8}
 800f708:	ec55 4b10 	vmov	r4, r5, d0
 800f70c:	4bca      	ldr	r3, [pc, #808]	; (800fa38 <__ieee754_rem_pio2+0x338>)
 800f70e:	b08b      	sub	sp, #44	; 0x2c
 800f710:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f714:	4598      	cmp	r8, r3
 800f716:	4682      	mov	sl, r0
 800f718:	9502      	str	r5, [sp, #8]
 800f71a:	dc08      	bgt.n	800f72e <__ieee754_rem_pio2+0x2e>
 800f71c:	2200      	movs	r2, #0
 800f71e:	2300      	movs	r3, #0
 800f720:	ed80 0b00 	vstr	d0, [r0]
 800f724:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f728:	f04f 0b00 	mov.w	fp, #0
 800f72c:	e028      	b.n	800f780 <__ieee754_rem_pio2+0x80>
 800f72e:	4bc3      	ldr	r3, [pc, #780]	; (800fa3c <__ieee754_rem_pio2+0x33c>)
 800f730:	4598      	cmp	r8, r3
 800f732:	dc78      	bgt.n	800f826 <__ieee754_rem_pio2+0x126>
 800f734:	9b02      	ldr	r3, [sp, #8]
 800f736:	4ec2      	ldr	r6, [pc, #776]	; (800fa40 <__ieee754_rem_pio2+0x340>)
 800f738:	2b00      	cmp	r3, #0
 800f73a:	ee10 0a10 	vmov	r0, s0
 800f73e:	a3b0      	add	r3, pc, #704	; (adr r3, 800fa00 <__ieee754_rem_pio2+0x300>)
 800f740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f744:	4629      	mov	r1, r5
 800f746:	dd39      	ble.n	800f7bc <__ieee754_rem_pio2+0xbc>
 800f748:	f7f0 fdbe 	bl	80002c8 <__aeabi_dsub>
 800f74c:	45b0      	cmp	r8, r6
 800f74e:	4604      	mov	r4, r0
 800f750:	460d      	mov	r5, r1
 800f752:	d01b      	beq.n	800f78c <__ieee754_rem_pio2+0x8c>
 800f754:	a3ac      	add	r3, pc, #688	; (adr r3, 800fa08 <__ieee754_rem_pio2+0x308>)
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	f7f0 fdb5 	bl	80002c8 <__aeabi_dsub>
 800f75e:	4602      	mov	r2, r0
 800f760:	460b      	mov	r3, r1
 800f762:	e9ca 2300 	strd	r2, r3, [sl]
 800f766:	4620      	mov	r0, r4
 800f768:	4629      	mov	r1, r5
 800f76a:	f7f0 fdad 	bl	80002c8 <__aeabi_dsub>
 800f76e:	a3a6      	add	r3, pc, #664	; (adr r3, 800fa08 <__ieee754_rem_pio2+0x308>)
 800f770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f774:	f7f0 fda8 	bl	80002c8 <__aeabi_dsub>
 800f778:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f77c:	f04f 0b01 	mov.w	fp, #1
 800f780:	4658      	mov	r0, fp
 800f782:	b00b      	add	sp, #44	; 0x2c
 800f784:	ecbd 8b02 	vpop	{d8}
 800f788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f78c:	a3a0      	add	r3, pc, #640	; (adr r3, 800fa10 <__ieee754_rem_pio2+0x310>)
 800f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f792:	f7f0 fd99 	bl	80002c8 <__aeabi_dsub>
 800f796:	a3a0      	add	r3, pc, #640	; (adr r3, 800fa18 <__ieee754_rem_pio2+0x318>)
 800f798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79c:	4604      	mov	r4, r0
 800f79e:	460d      	mov	r5, r1
 800f7a0:	f7f0 fd92 	bl	80002c8 <__aeabi_dsub>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	e9ca 2300 	strd	r2, r3, [sl]
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	4629      	mov	r1, r5
 800f7b0:	f7f0 fd8a 	bl	80002c8 <__aeabi_dsub>
 800f7b4:	a398      	add	r3, pc, #608	; (adr r3, 800fa18 <__ieee754_rem_pio2+0x318>)
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	e7db      	b.n	800f774 <__ieee754_rem_pio2+0x74>
 800f7bc:	f7f0 fd86 	bl	80002cc <__adddf3>
 800f7c0:	45b0      	cmp	r8, r6
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	d016      	beq.n	800f7f6 <__ieee754_rem_pio2+0xf6>
 800f7c8:	a38f      	add	r3, pc, #572	; (adr r3, 800fa08 <__ieee754_rem_pio2+0x308>)
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	f7f0 fd7d 	bl	80002cc <__adddf3>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	e9ca 2300 	strd	r2, r3, [sl]
 800f7da:	4620      	mov	r0, r4
 800f7dc:	4629      	mov	r1, r5
 800f7de:	f7f0 fd73 	bl	80002c8 <__aeabi_dsub>
 800f7e2:	a389      	add	r3, pc, #548	; (adr r3, 800fa08 <__ieee754_rem_pio2+0x308>)
 800f7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e8:	f7f0 fd70 	bl	80002cc <__adddf3>
 800f7ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800f7f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f7f4:	e7c4      	b.n	800f780 <__ieee754_rem_pio2+0x80>
 800f7f6:	a386      	add	r3, pc, #536	; (adr r3, 800fa10 <__ieee754_rem_pio2+0x310>)
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	f7f0 fd66 	bl	80002cc <__adddf3>
 800f800:	a385      	add	r3, pc, #532	; (adr r3, 800fa18 <__ieee754_rem_pio2+0x318>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	4604      	mov	r4, r0
 800f808:	460d      	mov	r5, r1
 800f80a:	f7f0 fd5f 	bl	80002cc <__adddf3>
 800f80e:	4602      	mov	r2, r0
 800f810:	460b      	mov	r3, r1
 800f812:	e9ca 2300 	strd	r2, r3, [sl]
 800f816:	4620      	mov	r0, r4
 800f818:	4629      	mov	r1, r5
 800f81a:	f7f0 fd55 	bl	80002c8 <__aeabi_dsub>
 800f81e:	a37e      	add	r3, pc, #504	; (adr r3, 800fa18 <__ieee754_rem_pio2+0x318>)
 800f820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f824:	e7e0      	b.n	800f7e8 <__ieee754_rem_pio2+0xe8>
 800f826:	4b87      	ldr	r3, [pc, #540]	; (800fa44 <__ieee754_rem_pio2+0x344>)
 800f828:	4598      	cmp	r8, r3
 800f82a:	f300 80d9 	bgt.w	800f9e0 <__ieee754_rem_pio2+0x2e0>
 800f82e:	f000 fe49 	bl	80104c4 <fabs>
 800f832:	ec55 4b10 	vmov	r4, r5, d0
 800f836:	ee10 0a10 	vmov	r0, s0
 800f83a:	a379      	add	r3, pc, #484	; (adr r3, 800fa20 <__ieee754_rem_pio2+0x320>)
 800f83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f840:	4629      	mov	r1, r5
 800f842:	f7f0 fef9 	bl	8000638 <__aeabi_dmul>
 800f846:	4b80      	ldr	r3, [pc, #512]	; (800fa48 <__ieee754_rem_pio2+0x348>)
 800f848:	2200      	movs	r2, #0
 800f84a:	f7f0 fd3f 	bl	80002cc <__adddf3>
 800f84e:	f7f1 f9a3 	bl	8000b98 <__aeabi_d2iz>
 800f852:	4683      	mov	fp, r0
 800f854:	f7f0 fe86 	bl	8000564 <__aeabi_i2d>
 800f858:	4602      	mov	r2, r0
 800f85a:	460b      	mov	r3, r1
 800f85c:	ec43 2b18 	vmov	d8, r2, r3
 800f860:	a367      	add	r3, pc, #412	; (adr r3, 800fa00 <__ieee754_rem_pio2+0x300>)
 800f862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f866:	f7f0 fee7 	bl	8000638 <__aeabi_dmul>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	4620      	mov	r0, r4
 800f870:	4629      	mov	r1, r5
 800f872:	f7f0 fd29 	bl	80002c8 <__aeabi_dsub>
 800f876:	a364      	add	r3, pc, #400	; (adr r3, 800fa08 <__ieee754_rem_pio2+0x308>)
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	4606      	mov	r6, r0
 800f87e:	460f      	mov	r7, r1
 800f880:	ec51 0b18 	vmov	r0, r1, d8
 800f884:	f7f0 fed8 	bl	8000638 <__aeabi_dmul>
 800f888:	f1bb 0f1f 	cmp.w	fp, #31
 800f88c:	4604      	mov	r4, r0
 800f88e:	460d      	mov	r5, r1
 800f890:	dc0d      	bgt.n	800f8ae <__ieee754_rem_pio2+0x1ae>
 800f892:	4b6e      	ldr	r3, [pc, #440]	; (800fa4c <__ieee754_rem_pio2+0x34c>)
 800f894:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800f898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f89c:	4543      	cmp	r3, r8
 800f89e:	d006      	beq.n	800f8ae <__ieee754_rem_pio2+0x1ae>
 800f8a0:	4622      	mov	r2, r4
 800f8a2:	462b      	mov	r3, r5
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	f7f0 fd0e 	bl	80002c8 <__aeabi_dsub>
 800f8ac:	e00f      	b.n	800f8ce <__ieee754_rem_pio2+0x1ce>
 800f8ae:	462b      	mov	r3, r5
 800f8b0:	4622      	mov	r2, r4
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	4639      	mov	r1, r7
 800f8b6:	f7f0 fd07 	bl	80002c8 <__aeabi_dsub>
 800f8ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f8be:	9303      	str	r3, [sp, #12]
 800f8c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f8c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f8c8:	f1b8 0f10 	cmp.w	r8, #16
 800f8cc:	dc02      	bgt.n	800f8d4 <__ieee754_rem_pio2+0x1d4>
 800f8ce:	e9ca 0100 	strd	r0, r1, [sl]
 800f8d2:	e039      	b.n	800f948 <__ieee754_rem_pio2+0x248>
 800f8d4:	a34e      	add	r3, pc, #312	; (adr r3, 800fa10 <__ieee754_rem_pio2+0x310>)
 800f8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8da:	ec51 0b18 	vmov	r0, r1, d8
 800f8de:	f7f0 feab 	bl	8000638 <__aeabi_dmul>
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	460d      	mov	r5, r1
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	4639      	mov	r1, r7
 800f8ee:	f7f0 fceb 	bl	80002c8 <__aeabi_dsub>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4689      	mov	r9, r1
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	4639      	mov	r1, r7
 800f8fe:	f7f0 fce3 	bl	80002c8 <__aeabi_dsub>
 800f902:	4622      	mov	r2, r4
 800f904:	462b      	mov	r3, r5
 800f906:	f7f0 fcdf 	bl	80002c8 <__aeabi_dsub>
 800f90a:	a343      	add	r3, pc, #268	; (adr r3, 800fa18 <__ieee754_rem_pio2+0x318>)
 800f90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f910:	4604      	mov	r4, r0
 800f912:	460d      	mov	r5, r1
 800f914:	ec51 0b18 	vmov	r0, r1, d8
 800f918:	f7f0 fe8e 	bl	8000638 <__aeabi_dmul>
 800f91c:	4622      	mov	r2, r4
 800f91e:	462b      	mov	r3, r5
 800f920:	f7f0 fcd2 	bl	80002c8 <__aeabi_dsub>
 800f924:	4602      	mov	r2, r0
 800f926:	460b      	mov	r3, r1
 800f928:	4604      	mov	r4, r0
 800f92a:	460d      	mov	r5, r1
 800f92c:	4640      	mov	r0, r8
 800f92e:	4649      	mov	r1, r9
 800f930:	f7f0 fcca 	bl	80002c8 <__aeabi_dsub>
 800f934:	9a03      	ldr	r2, [sp, #12]
 800f936:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	2b31      	cmp	r3, #49	; 0x31
 800f93e:	dc24      	bgt.n	800f98a <__ieee754_rem_pio2+0x28a>
 800f940:	e9ca 0100 	strd	r0, r1, [sl]
 800f944:	4646      	mov	r6, r8
 800f946:	464f      	mov	r7, r9
 800f948:	e9da 8900 	ldrd	r8, r9, [sl]
 800f94c:	4630      	mov	r0, r6
 800f94e:	4642      	mov	r2, r8
 800f950:	464b      	mov	r3, r9
 800f952:	4639      	mov	r1, r7
 800f954:	f7f0 fcb8 	bl	80002c8 <__aeabi_dsub>
 800f958:	462b      	mov	r3, r5
 800f95a:	4622      	mov	r2, r4
 800f95c:	f7f0 fcb4 	bl	80002c8 <__aeabi_dsub>
 800f960:	9b02      	ldr	r3, [sp, #8]
 800f962:	2b00      	cmp	r3, #0
 800f964:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f968:	f6bf af0a 	bge.w	800f780 <__ieee754_rem_pio2+0x80>
 800f96c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f970:	f8ca 3004 	str.w	r3, [sl, #4]
 800f974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f978:	f8ca 8000 	str.w	r8, [sl]
 800f97c:	f8ca 0008 	str.w	r0, [sl, #8]
 800f980:	f8ca 300c 	str.w	r3, [sl, #12]
 800f984:	f1cb 0b00 	rsb	fp, fp, #0
 800f988:	e6fa      	b.n	800f780 <__ieee754_rem_pio2+0x80>
 800f98a:	a327      	add	r3, pc, #156	; (adr r3, 800fa28 <__ieee754_rem_pio2+0x328>)
 800f98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f990:	ec51 0b18 	vmov	r0, r1, d8
 800f994:	f7f0 fe50 	bl	8000638 <__aeabi_dmul>
 800f998:	4604      	mov	r4, r0
 800f99a:	460d      	mov	r5, r1
 800f99c:	4602      	mov	r2, r0
 800f99e:	460b      	mov	r3, r1
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	4649      	mov	r1, r9
 800f9a4:	f7f0 fc90 	bl	80002c8 <__aeabi_dsub>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	460f      	mov	r7, r1
 800f9b0:	4640      	mov	r0, r8
 800f9b2:	4649      	mov	r1, r9
 800f9b4:	f7f0 fc88 	bl	80002c8 <__aeabi_dsub>
 800f9b8:	4622      	mov	r2, r4
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	f7f0 fc84 	bl	80002c8 <__aeabi_dsub>
 800f9c0:	a31b      	add	r3, pc, #108	; (adr r3, 800fa30 <__ieee754_rem_pio2+0x330>)
 800f9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	460d      	mov	r5, r1
 800f9ca:	ec51 0b18 	vmov	r0, r1, d8
 800f9ce:	f7f0 fe33 	bl	8000638 <__aeabi_dmul>
 800f9d2:	4622      	mov	r2, r4
 800f9d4:	462b      	mov	r3, r5
 800f9d6:	f7f0 fc77 	bl	80002c8 <__aeabi_dsub>
 800f9da:	4604      	mov	r4, r0
 800f9dc:	460d      	mov	r5, r1
 800f9de:	e75f      	b.n	800f8a0 <__ieee754_rem_pio2+0x1a0>
 800f9e0:	4b1b      	ldr	r3, [pc, #108]	; (800fa50 <__ieee754_rem_pio2+0x350>)
 800f9e2:	4598      	cmp	r8, r3
 800f9e4:	dd36      	ble.n	800fa54 <__ieee754_rem_pio2+0x354>
 800f9e6:	ee10 2a10 	vmov	r2, s0
 800f9ea:	462b      	mov	r3, r5
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	f7f0 fc6a 	bl	80002c8 <__aeabi_dsub>
 800f9f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f9f8:	e9ca 0100 	strd	r0, r1, [sl]
 800f9fc:	e694      	b.n	800f728 <__ieee754_rem_pio2+0x28>
 800f9fe:	bf00      	nop
 800fa00:	54400000 	.word	0x54400000
 800fa04:	3ff921fb 	.word	0x3ff921fb
 800fa08:	1a626331 	.word	0x1a626331
 800fa0c:	3dd0b461 	.word	0x3dd0b461
 800fa10:	1a600000 	.word	0x1a600000
 800fa14:	3dd0b461 	.word	0x3dd0b461
 800fa18:	2e037073 	.word	0x2e037073
 800fa1c:	3ba3198a 	.word	0x3ba3198a
 800fa20:	6dc9c883 	.word	0x6dc9c883
 800fa24:	3fe45f30 	.word	0x3fe45f30
 800fa28:	2e000000 	.word	0x2e000000
 800fa2c:	3ba3198a 	.word	0x3ba3198a
 800fa30:	252049c1 	.word	0x252049c1
 800fa34:	397b839a 	.word	0x397b839a
 800fa38:	3fe921fb 	.word	0x3fe921fb
 800fa3c:	4002d97b 	.word	0x4002d97b
 800fa40:	3ff921fb 	.word	0x3ff921fb
 800fa44:	413921fb 	.word	0x413921fb
 800fa48:	3fe00000 	.word	0x3fe00000
 800fa4c:	08010b3c 	.word	0x08010b3c
 800fa50:	7fefffff 	.word	0x7fefffff
 800fa54:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fa58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fa5c:	ee10 0a10 	vmov	r0, s0
 800fa60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fa64:	ee10 6a10 	vmov	r6, s0
 800fa68:	460f      	mov	r7, r1
 800fa6a:	f7f1 f895 	bl	8000b98 <__aeabi_d2iz>
 800fa6e:	f7f0 fd79 	bl	8000564 <__aeabi_i2d>
 800fa72:	4602      	mov	r2, r0
 800fa74:	460b      	mov	r3, r1
 800fa76:	4630      	mov	r0, r6
 800fa78:	4639      	mov	r1, r7
 800fa7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa7e:	f7f0 fc23 	bl	80002c8 <__aeabi_dsub>
 800fa82:	4b23      	ldr	r3, [pc, #140]	; (800fb10 <__ieee754_rem_pio2+0x410>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	f7f0 fdd7 	bl	8000638 <__aeabi_dmul>
 800fa8a:	460f      	mov	r7, r1
 800fa8c:	4606      	mov	r6, r0
 800fa8e:	f7f1 f883 	bl	8000b98 <__aeabi_d2iz>
 800fa92:	f7f0 fd67 	bl	8000564 <__aeabi_i2d>
 800fa96:	4602      	mov	r2, r0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	4639      	mov	r1, r7
 800fa9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800faa2:	f7f0 fc11 	bl	80002c8 <__aeabi_dsub>
 800faa6:	4b1a      	ldr	r3, [pc, #104]	; (800fb10 <__ieee754_rem_pio2+0x410>)
 800faa8:	2200      	movs	r2, #0
 800faaa:	f7f0 fdc5 	bl	8000638 <__aeabi_dmul>
 800faae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fab2:	ad04      	add	r5, sp, #16
 800fab4:	f04f 0803 	mov.w	r8, #3
 800fab8:	46a9      	mov	r9, r5
 800faba:	2600      	movs	r6, #0
 800fabc:	2700      	movs	r7, #0
 800fabe:	4632      	mov	r2, r6
 800fac0:	463b      	mov	r3, r7
 800fac2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fac6:	46c3      	mov	fp, r8
 800fac8:	3d08      	subs	r5, #8
 800faca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800face:	f7f1 f81b 	bl	8000b08 <__aeabi_dcmpeq>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d1f3      	bne.n	800fabe <__ieee754_rem_pio2+0x3be>
 800fad6:	4b0f      	ldr	r3, [pc, #60]	; (800fb14 <__ieee754_rem_pio2+0x414>)
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	2302      	movs	r3, #2
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	4622      	mov	r2, r4
 800fae0:	465b      	mov	r3, fp
 800fae2:	4651      	mov	r1, sl
 800fae4:	4648      	mov	r0, r9
 800fae6:	f000 f8df 	bl	800fca8 <__kernel_rem_pio2>
 800faea:	9b02      	ldr	r3, [sp, #8]
 800faec:	2b00      	cmp	r3, #0
 800faee:	4683      	mov	fp, r0
 800faf0:	f6bf ae46 	bge.w	800f780 <__ieee754_rem_pio2+0x80>
 800faf4:	e9da 2100 	ldrd	r2, r1, [sl]
 800faf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fafc:	e9ca 2300 	strd	r2, r3, [sl]
 800fb00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800fb04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800fb0c:	e73a      	b.n	800f984 <__ieee754_rem_pio2+0x284>
 800fb0e:	bf00      	nop
 800fb10:	41700000 	.word	0x41700000
 800fb14:	08010bbc 	.word	0x08010bbc

0800fb18 <__kernel_cos>:
 800fb18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	ec57 6b10 	vmov	r6, r7, d0
 800fb20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fb24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fb28:	ed8d 1b00 	vstr	d1, [sp]
 800fb2c:	da07      	bge.n	800fb3e <__kernel_cos+0x26>
 800fb2e:	ee10 0a10 	vmov	r0, s0
 800fb32:	4639      	mov	r1, r7
 800fb34:	f7f1 f830 	bl	8000b98 <__aeabi_d2iz>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	f000 8088 	beq.w	800fc4e <__kernel_cos+0x136>
 800fb3e:	4632      	mov	r2, r6
 800fb40:	463b      	mov	r3, r7
 800fb42:	4630      	mov	r0, r6
 800fb44:	4639      	mov	r1, r7
 800fb46:	f7f0 fd77 	bl	8000638 <__aeabi_dmul>
 800fb4a:	4b51      	ldr	r3, [pc, #324]	; (800fc90 <__kernel_cos+0x178>)
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	4604      	mov	r4, r0
 800fb50:	460d      	mov	r5, r1
 800fb52:	f7f0 fd71 	bl	8000638 <__aeabi_dmul>
 800fb56:	a340      	add	r3, pc, #256	; (adr r3, 800fc58 <__kernel_cos+0x140>)
 800fb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5c:	4682      	mov	sl, r0
 800fb5e:	468b      	mov	fp, r1
 800fb60:	4620      	mov	r0, r4
 800fb62:	4629      	mov	r1, r5
 800fb64:	f7f0 fd68 	bl	8000638 <__aeabi_dmul>
 800fb68:	a33d      	add	r3, pc, #244	; (adr r3, 800fc60 <__kernel_cos+0x148>)
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	f7f0 fbad 	bl	80002cc <__adddf3>
 800fb72:	4622      	mov	r2, r4
 800fb74:	462b      	mov	r3, r5
 800fb76:	f7f0 fd5f 	bl	8000638 <__aeabi_dmul>
 800fb7a:	a33b      	add	r3, pc, #236	; (adr r3, 800fc68 <__kernel_cos+0x150>)
 800fb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb80:	f7f0 fba2 	bl	80002c8 <__aeabi_dsub>
 800fb84:	4622      	mov	r2, r4
 800fb86:	462b      	mov	r3, r5
 800fb88:	f7f0 fd56 	bl	8000638 <__aeabi_dmul>
 800fb8c:	a338      	add	r3, pc, #224	; (adr r3, 800fc70 <__kernel_cos+0x158>)
 800fb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb92:	f7f0 fb9b 	bl	80002cc <__adddf3>
 800fb96:	4622      	mov	r2, r4
 800fb98:	462b      	mov	r3, r5
 800fb9a:	f7f0 fd4d 	bl	8000638 <__aeabi_dmul>
 800fb9e:	a336      	add	r3, pc, #216	; (adr r3, 800fc78 <__kernel_cos+0x160>)
 800fba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba4:	f7f0 fb90 	bl	80002c8 <__aeabi_dsub>
 800fba8:	4622      	mov	r2, r4
 800fbaa:	462b      	mov	r3, r5
 800fbac:	f7f0 fd44 	bl	8000638 <__aeabi_dmul>
 800fbb0:	a333      	add	r3, pc, #204	; (adr r3, 800fc80 <__kernel_cos+0x168>)
 800fbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb6:	f7f0 fb89 	bl	80002cc <__adddf3>
 800fbba:	4622      	mov	r2, r4
 800fbbc:	462b      	mov	r3, r5
 800fbbe:	f7f0 fd3b 	bl	8000638 <__aeabi_dmul>
 800fbc2:	4622      	mov	r2, r4
 800fbc4:	462b      	mov	r3, r5
 800fbc6:	f7f0 fd37 	bl	8000638 <__aeabi_dmul>
 800fbca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbce:	4604      	mov	r4, r0
 800fbd0:	460d      	mov	r5, r1
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	4639      	mov	r1, r7
 800fbd6:	f7f0 fd2f 	bl	8000638 <__aeabi_dmul>
 800fbda:	460b      	mov	r3, r1
 800fbdc:	4602      	mov	r2, r0
 800fbde:	4629      	mov	r1, r5
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	f7f0 fb71 	bl	80002c8 <__aeabi_dsub>
 800fbe6:	4b2b      	ldr	r3, [pc, #172]	; (800fc94 <__kernel_cos+0x17c>)
 800fbe8:	4598      	cmp	r8, r3
 800fbea:	4606      	mov	r6, r0
 800fbec:	460f      	mov	r7, r1
 800fbee:	dc10      	bgt.n	800fc12 <__kernel_cos+0xfa>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	4650      	mov	r0, sl
 800fbf6:	4659      	mov	r1, fp
 800fbf8:	f7f0 fb66 	bl	80002c8 <__aeabi_dsub>
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	4926      	ldr	r1, [pc, #152]	; (800fc98 <__kernel_cos+0x180>)
 800fc00:	4602      	mov	r2, r0
 800fc02:	2000      	movs	r0, #0
 800fc04:	f7f0 fb60 	bl	80002c8 <__aeabi_dsub>
 800fc08:	ec41 0b10 	vmov	d0, r0, r1
 800fc0c:	b003      	add	sp, #12
 800fc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc12:	4b22      	ldr	r3, [pc, #136]	; (800fc9c <__kernel_cos+0x184>)
 800fc14:	4920      	ldr	r1, [pc, #128]	; (800fc98 <__kernel_cos+0x180>)
 800fc16:	4598      	cmp	r8, r3
 800fc18:	bfcc      	ite	gt
 800fc1a:	4d21      	ldrgt	r5, [pc, #132]	; (800fca0 <__kernel_cos+0x188>)
 800fc1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fc20:	2400      	movs	r4, #0
 800fc22:	4622      	mov	r2, r4
 800fc24:	462b      	mov	r3, r5
 800fc26:	2000      	movs	r0, #0
 800fc28:	f7f0 fb4e 	bl	80002c8 <__aeabi_dsub>
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	4680      	mov	r8, r0
 800fc30:	4689      	mov	r9, r1
 800fc32:	462b      	mov	r3, r5
 800fc34:	4650      	mov	r0, sl
 800fc36:	4659      	mov	r1, fp
 800fc38:	f7f0 fb46 	bl	80002c8 <__aeabi_dsub>
 800fc3c:	4632      	mov	r2, r6
 800fc3e:	463b      	mov	r3, r7
 800fc40:	f7f0 fb42 	bl	80002c8 <__aeabi_dsub>
 800fc44:	4602      	mov	r2, r0
 800fc46:	460b      	mov	r3, r1
 800fc48:	4640      	mov	r0, r8
 800fc4a:	4649      	mov	r1, r9
 800fc4c:	e7da      	b.n	800fc04 <__kernel_cos+0xec>
 800fc4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fc88 <__kernel_cos+0x170>
 800fc52:	e7db      	b.n	800fc0c <__kernel_cos+0xf4>
 800fc54:	f3af 8000 	nop.w
 800fc58:	be8838d4 	.word	0xbe8838d4
 800fc5c:	bda8fae9 	.word	0xbda8fae9
 800fc60:	bdb4b1c4 	.word	0xbdb4b1c4
 800fc64:	3e21ee9e 	.word	0x3e21ee9e
 800fc68:	809c52ad 	.word	0x809c52ad
 800fc6c:	3e927e4f 	.word	0x3e927e4f
 800fc70:	19cb1590 	.word	0x19cb1590
 800fc74:	3efa01a0 	.word	0x3efa01a0
 800fc78:	16c15177 	.word	0x16c15177
 800fc7c:	3f56c16c 	.word	0x3f56c16c
 800fc80:	5555554c 	.word	0x5555554c
 800fc84:	3fa55555 	.word	0x3fa55555
 800fc88:	00000000 	.word	0x00000000
 800fc8c:	3ff00000 	.word	0x3ff00000
 800fc90:	3fe00000 	.word	0x3fe00000
 800fc94:	3fd33332 	.word	0x3fd33332
 800fc98:	3ff00000 	.word	0x3ff00000
 800fc9c:	3fe90000 	.word	0x3fe90000
 800fca0:	3fd20000 	.word	0x3fd20000
 800fca4:	00000000 	.word	0x00000000

0800fca8 <__kernel_rem_pio2>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	ed2d 8b02 	vpush	{d8}
 800fcb0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fcb4:	f112 0f14 	cmn.w	r2, #20
 800fcb8:	9308      	str	r3, [sp, #32]
 800fcba:	9101      	str	r1, [sp, #4]
 800fcbc:	4bc4      	ldr	r3, [pc, #784]	; (800ffd0 <__kernel_rem_pio2+0x328>)
 800fcbe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fcc0:	900b      	str	r0, [sp, #44]	; 0x2c
 800fcc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fcc6:	9302      	str	r3, [sp, #8]
 800fcc8:	9b08      	ldr	r3, [sp, #32]
 800fcca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fcce:	bfa8      	it	ge
 800fcd0:	1ed4      	subge	r4, r2, #3
 800fcd2:	9306      	str	r3, [sp, #24]
 800fcd4:	bfb2      	itee	lt
 800fcd6:	2400      	movlt	r4, #0
 800fcd8:	2318      	movge	r3, #24
 800fcda:	fb94 f4f3 	sdivge	r4, r4, r3
 800fcde:	f06f 0317 	mvn.w	r3, #23
 800fce2:	fb04 3303 	mla	r3, r4, r3, r3
 800fce6:	eb03 0a02 	add.w	sl, r3, r2
 800fcea:	9b02      	ldr	r3, [sp, #8]
 800fcec:	9a06      	ldr	r2, [sp, #24]
 800fcee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ffc0 <__kernel_rem_pio2+0x318>
 800fcf2:	eb03 0802 	add.w	r8, r3, r2
 800fcf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fcf8:	1aa7      	subs	r7, r4, r2
 800fcfa:	ae22      	add	r6, sp, #136	; 0x88
 800fcfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fd00:	2500      	movs	r5, #0
 800fd02:	4545      	cmp	r5, r8
 800fd04:	dd13      	ble.n	800fd2e <__kernel_rem_pio2+0x86>
 800fd06:	9b08      	ldr	r3, [sp, #32]
 800fd08:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ffc0 <__kernel_rem_pio2+0x318>
 800fd0c:	aa22      	add	r2, sp, #136	; 0x88
 800fd0e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fd12:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fd16:	f04f 0800 	mov.w	r8, #0
 800fd1a:	9b02      	ldr	r3, [sp, #8]
 800fd1c:	4598      	cmp	r8, r3
 800fd1e:	dc2f      	bgt.n	800fd80 <__kernel_rem_pio2+0xd8>
 800fd20:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fd24:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fd28:	462f      	mov	r7, r5
 800fd2a:	2600      	movs	r6, #0
 800fd2c:	e01b      	b.n	800fd66 <__kernel_rem_pio2+0xbe>
 800fd2e:	42ef      	cmn	r7, r5
 800fd30:	d407      	bmi.n	800fd42 <__kernel_rem_pio2+0x9a>
 800fd32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fd36:	f7f0 fc15 	bl	8000564 <__aeabi_i2d>
 800fd3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fd3e:	3501      	adds	r5, #1
 800fd40:	e7df      	b.n	800fd02 <__kernel_rem_pio2+0x5a>
 800fd42:	ec51 0b18 	vmov	r0, r1, d8
 800fd46:	e7f8      	b.n	800fd3a <__kernel_rem_pio2+0x92>
 800fd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fd50:	f7f0 fc72 	bl	8000638 <__aeabi_dmul>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd5c:	f7f0 fab6 	bl	80002cc <__adddf3>
 800fd60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd64:	3601      	adds	r6, #1
 800fd66:	9b06      	ldr	r3, [sp, #24]
 800fd68:	429e      	cmp	r6, r3
 800fd6a:	f1a7 0708 	sub.w	r7, r7, #8
 800fd6e:	ddeb      	ble.n	800fd48 <__kernel_rem_pio2+0xa0>
 800fd70:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fd74:	f108 0801 	add.w	r8, r8, #1
 800fd78:	ecab 7b02 	vstmia	fp!, {d7}
 800fd7c:	3508      	adds	r5, #8
 800fd7e:	e7cc      	b.n	800fd1a <__kernel_rem_pio2+0x72>
 800fd80:	9b02      	ldr	r3, [sp, #8]
 800fd82:	aa0e      	add	r2, sp, #56	; 0x38
 800fd84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd88:	930d      	str	r3, [sp, #52]	; 0x34
 800fd8a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fd8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fd90:	9c02      	ldr	r4, [sp, #8]
 800fd92:	930c      	str	r3, [sp, #48]	; 0x30
 800fd94:	00e3      	lsls	r3, r4, #3
 800fd96:	930a      	str	r3, [sp, #40]	; 0x28
 800fd98:	ab9a      	add	r3, sp, #616	; 0x268
 800fd9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd9e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fda2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fda6:	ab72      	add	r3, sp, #456	; 0x1c8
 800fda8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fdac:	46c3      	mov	fp, r8
 800fdae:	46a1      	mov	r9, r4
 800fdb0:	f1b9 0f00 	cmp.w	r9, #0
 800fdb4:	f1a5 0508 	sub.w	r5, r5, #8
 800fdb8:	dc77      	bgt.n	800feaa <__kernel_rem_pio2+0x202>
 800fdba:	ec47 6b10 	vmov	d0, r6, r7
 800fdbe:	4650      	mov	r0, sl
 800fdc0:	f000 fc0a 	bl	80105d8 <scalbn>
 800fdc4:	ec57 6b10 	vmov	r6, r7, d0
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fdce:	ee10 0a10 	vmov	r0, s0
 800fdd2:	4639      	mov	r1, r7
 800fdd4:	f7f0 fc30 	bl	8000638 <__aeabi_dmul>
 800fdd8:	ec41 0b10 	vmov	d0, r0, r1
 800fddc:	f000 fb7c 	bl	80104d8 <floor>
 800fde0:	4b7c      	ldr	r3, [pc, #496]	; (800ffd4 <__kernel_rem_pio2+0x32c>)
 800fde2:	ec51 0b10 	vmov	r0, r1, d0
 800fde6:	2200      	movs	r2, #0
 800fde8:	f7f0 fc26 	bl	8000638 <__aeabi_dmul>
 800fdec:	4602      	mov	r2, r0
 800fdee:	460b      	mov	r3, r1
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	4639      	mov	r1, r7
 800fdf4:	f7f0 fa68 	bl	80002c8 <__aeabi_dsub>
 800fdf8:	460f      	mov	r7, r1
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	f7f0 fecc 	bl	8000b98 <__aeabi_d2iz>
 800fe00:	9004      	str	r0, [sp, #16]
 800fe02:	f7f0 fbaf 	bl	8000564 <__aeabi_i2d>
 800fe06:	4602      	mov	r2, r0
 800fe08:	460b      	mov	r3, r1
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	4639      	mov	r1, r7
 800fe0e:	f7f0 fa5b 	bl	80002c8 <__aeabi_dsub>
 800fe12:	f1ba 0f00 	cmp.w	sl, #0
 800fe16:	4606      	mov	r6, r0
 800fe18:	460f      	mov	r7, r1
 800fe1a:	dd6d      	ble.n	800fef8 <__kernel_rem_pio2+0x250>
 800fe1c:	1e62      	subs	r2, r4, #1
 800fe1e:	ab0e      	add	r3, sp, #56	; 0x38
 800fe20:	9d04      	ldr	r5, [sp, #16]
 800fe22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fe26:	f1ca 0118 	rsb	r1, sl, #24
 800fe2a:	fa40 f301 	asr.w	r3, r0, r1
 800fe2e:	441d      	add	r5, r3
 800fe30:	408b      	lsls	r3, r1
 800fe32:	1ac0      	subs	r0, r0, r3
 800fe34:	ab0e      	add	r3, sp, #56	; 0x38
 800fe36:	9504      	str	r5, [sp, #16]
 800fe38:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fe3c:	f1ca 0317 	rsb	r3, sl, #23
 800fe40:	fa40 fb03 	asr.w	fp, r0, r3
 800fe44:	f1bb 0f00 	cmp.w	fp, #0
 800fe48:	dd65      	ble.n	800ff16 <__kernel_rem_pio2+0x26e>
 800fe4a:	9b04      	ldr	r3, [sp, #16]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	3301      	adds	r3, #1
 800fe50:	9304      	str	r3, [sp, #16]
 800fe52:	4615      	mov	r5, r2
 800fe54:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fe58:	4294      	cmp	r4, r2
 800fe5a:	f300 809c 	bgt.w	800ff96 <__kernel_rem_pio2+0x2ee>
 800fe5e:	f1ba 0f00 	cmp.w	sl, #0
 800fe62:	dd07      	ble.n	800fe74 <__kernel_rem_pio2+0x1cc>
 800fe64:	f1ba 0f01 	cmp.w	sl, #1
 800fe68:	f000 80c0 	beq.w	800ffec <__kernel_rem_pio2+0x344>
 800fe6c:	f1ba 0f02 	cmp.w	sl, #2
 800fe70:	f000 80c6 	beq.w	8010000 <__kernel_rem_pio2+0x358>
 800fe74:	f1bb 0f02 	cmp.w	fp, #2
 800fe78:	d14d      	bne.n	800ff16 <__kernel_rem_pio2+0x26e>
 800fe7a:	4632      	mov	r2, r6
 800fe7c:	463b      	mov	r3, r7
 800fe7e:	4956      	ldr	r1, [pc, #344]	; (800ffd8 <__kernel_rem_pio2+0x330>)
 800fe80:	2000      	movs	r0, #0
 800fe82:	f7f0 fa21 	bl	80002c8 <__aeabi_dsub>
 800fe86:	4606      	mov	r6, r0
 800fe88:	460f      	mov	r7, r1
 800fe8a:	2d00      	cmp	r5, #0
 800fe8c:	d043      	beq.n	800ff16 <__kernel_rem_pio2+0x26e>
 800fe8e:	4650      	mov	r0, sl
 800fe90:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ffc8 <__kernel_rem_pio2+0x320>
 800fe94:	f000 fba0 	bl	80105d8 <scalbn>
 800fe98:	4630      	mov	r0, r6
 800fe9a:	4639      	mov	r1, r7
 800fe9c:	ec53 2b10 	vmov	r2, r3, d0
 800fea0:	f7f0 fa12 	bl	80002c8 <__aeabi_dsub>
 800fea4:	4606      	mov	r6, r0
 800fea6:	460f      	mov	r7, r1
 800fea8:	e035      	b.n	800ff16 <__kernel_rem_pio2+0x26e>
 800feaa:	4b4c      	ldr	r3, [pc, #304]	; (800ffdc <__kernel_rem_pio2+0x334>)
 800feac:	2200      	movs	r2, #0
 800feae:	4630      	mov	r0, r6
 800feb0:	4639      	mov	r1, r7
 800feb2:	f7f0 fbc1 	bl	8000638 <__aeabi_dmul>
 800feb6:	f7f0 fe6f 	bl	8000b98 <__aeabi_d2iz>
 800feba:	f7f0 fb53 	bl	8000564 <__aeabi_i2d>
 800febe:	4602      	mov	r2, r0
 800fec0:	460b      	mov	r3, r1
 800fec2:	ec43 2b18 	vmov	d8, r2, r3
 800fec6:	4b46      	ldr	r3, [pc, #280]	; (800ffe0 <__kernel_rem_pio2+0x338>)
 800fec8:	2200      	movs	r2, #0
 800feca:	f7f0 fbb5 	bl	8000638 <__aeabi_dmul>
 800fece:	4602      	mov	r2, r0
 800fed0:	460b      	mov	r3, r1
 800fed2:	4630      	mov	r0, r6
 800fed4:	4639      	mov	r1, r7
 800fed6:	f7f0 f9f7 	bl	80002c8 <__aeabi_dsub>
 800feda:	f7f0 fe5d 	bl	8000b98 <__aeabi_d2iz>
 800fede:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fee2:	f84b 0b04 	str.w	r0, [fp], #4
 800fee6:	ec51 0b18 	vmov	r0, r1, d8
 800feea:	f7f0 f9ef 	bl	80002cc <__adddf3>
 800feee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fef2:	4606      	mov	r6, r0
 800fef4:	460f      	mov	r7, r1
 800fef6:	e75b      	b.n	800fdb0 <__kernel_rem_pio2+0x108>
 800fef8:	d106      	bne.n	800ff08 <__kernel_rem_pio2+0x260>
 800fefa:	1e63      	subs	r3, r4, #1
 800fefc:	aa0e      	add	r2, sp, #56	; 0x38
 800fefe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ff02:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ff06:	e79d      	b.n	800fe44 <__kernel_rem_pio2+0x19c>
 800ff08:	4b36      	ldr	r3, [pc, #216]	; (800ffe4 <__kernel_rem_pio2+0x33c>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f7f0 fe1a 	bl	8000b44 <__aeabi_dcmpge>
 800ff10:	2800      	cmp	r0, #0
 800ff12:	d13d      	bne.n	800ff90 <__kernel_rem_pio2+0x2e8>
 800ff14:	4683      	mov	fp, r0
 800ff16:	2200      	movs	r2, #0
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	f7f0 fdf3 	bl	8000b08 <__aeabi_dcmpeq>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	f000 80c0 	beq.w	80100a8 <__kernel_rem_pio2+0x400>
 800ff28:	1e65      	subs	r5, r4, #1
 800ff2a:	462b      	mov	r3, r5
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	9902      	ldr	r1, [sp, #8]
 800ff30:	428b      	cmp	r3, r1
 800ff32:	da6c      	bge.n	801000e <__kernel_rem_pio2+0x366>
 800ff34:	2a00      	cmp	r2, #0
 800ff36:	f000 8089 	beq.w	801004c <__kernel_rem_pio2+0x3a4>
 800ff3a:	ab0e      	add	r3, sp, #56	; 0x38
 800ff3c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ff40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f000 80ad 	beq.w	80100a4 <__kernel_rem_pio2+0x3fc>
 800ff4a:	4650      	mov	r0, sl
 800ff4c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ffc8 <__kernel_rem_pio2+0x320>
 800ff50:	f000 fb42 	bl	80105d8 <scalbn>
 800ff54:	ab9a      	add	r3, sp, #616	; 0x268
 800ff56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ff5a:	ec57 6b10 	vmov	r6, r7, d0
 800ff5e:	00ec      	lsls	r4, r5, #3
 800ff60:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ff64:	46aa      	mov	sl, r5
 800ff66:	f1ba 0f00 	cmp.w	sl, #0
 800ff6a:	f280 80d6 	bge.w	801011a <__kernel_rem_pio2+0x472>
 800ff6e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ffc0 <__kernel_rem_pio2+0x318>
 800ff72:	462e      	mov	r6, r5
 800ff74:	2e00      	cmp	r6, #0
 800ff76:	f2c0 8104 	blt.w	8010182 <__kernel_rem_pio2+0x4da>
 800ff7a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ff7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ff80:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ffe8 <__kernel_rem_pio2+0x340>
 800ff84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ff88:	f04f 0800 	mov.w	r8, #0
 800ff8c:	1baf      	subs	r7, r5, r6
 800ff8e:	e0ea      	b.n	8010166 <__kernel_rem_pio2+0x4be>
 800ff90:	f04f 0b02 	mov.w	fp, #2
 800ff94:	e759      	b.n	800fe4a <__kernel_rem_pio2+0x1a2>
 800ff96:	f8d8 3000 	ldr.w	r3, [r8]
 800ff9a:	b955      	cbnz	r5, 800ffb2 <__kernel_rem_pio2+0x30a>
 800ff9c:	b123      	cbz	r3, 800ffa8 <__kernel_rem_pio2+0x300>
 800ff9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ffa2:	f8c8 3000 	str.w	r3, [r8]
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	3201      	adds	r2, #1
 800ffaa:	f108 0804 	add.w	r8, r8, #4
 800ffae:	461d      	mov	r5, r3
 800ffb0:	e752      	b.n	800fe58 <__kernel_rem_pio2+0x1b0>
 800ffb2:	1acb      	subs	r3, r1, r3
 800ffb4:	f8c8 3000 	str.w	r3, [r8]
 800ffb8:	462b      	mov	r3, r5
 800ffba:	e7f5      	b.n	800ffa8 <__kernel_rem_pio2+0x300>
 800ffbc:	f3af 8000 	nop.w
	...
 800ffcc:	3ff00000 	.word	0x3ff00000
 800ffd0:	08010d08 	.word	0x08010d08
 800ffd4:	40200000 	.word	0x40200000
 800ffd8:	3ff00000 	.word	0x3ff00000
 800ffdc:	3e700000 	.word	0x3e700000
 800ffe0:	41700000 	.word	0x41700000
 800ffe4:	3fe00000 	.word	0x3fe00000
 800ffe8:	08010cc8 	.word	0x08010cc8
 800ffec:	1e62      	subs	r2, r4, #1
 800ffee:	ab0e      	add	r3, sp, #56	; 0x38
 800fff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fff8:	a90e      	add	r1, sp, #56	; 0x38
 800fffa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fffe:	e739      	b.n	800fe74 <__kernel_rem_pio2+0x1cc>
 8010000:	1e62      	subs	r2, r4, #1
 8010002:	ab0e      	add	r3, sp, #56	; 0x38
 8010004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010008:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801000c:	e7f4      	b.n	800fff8 <__kernel_rem_pio2+0x350>
 801000e:	a90e      	add	r1, sp, #56	; 0x38
 8010010:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010014:	3b01      	subs	r3, #1
 8010016:	430a      	orrs	r2, r1
 8010018:	e789      	b.n	800ff2e <__kernel_rem_pio2+0x286>
 801001a:	3301      	adds	r3, #1
 801001c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010020:	2900      	cmp	r1, #0
 8010022:	d0fa      	beq.n	801001a <__kernel_rem_pio2+0x372>
 8010024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010026:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801002a:	446a      	add	r2, sp
 801002c:	3a98      	subs	r2, #152	; 0x98
 801002e:	920a      	str	r2, [sp, #40]	; 0x28
 8010030:	9a08      	ldr	r2, [sp, #32]
 8010032:	18e3      	adds	r3, r4, r3
 8010034:	18a5      	adds	r5, r4, r2
 8010036:	aa22      	add	r2, sp, #136	; 0x88
 8010038:	f104 0801 	add.w	r8, r4, #1
 801003c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010040:	9304      	str	r3, [sp, #16]
 8010042:	9b04      	ldr	r3, [sp, #16]
 8010044:	4543      	cmp	r3, r8
 8010046:	da04      	bge.n	8010052 <__kernel_rem_pio2+0x3aa>
 8010048:	461c      	mov	r4, r3
 801004a:	e6a3      	b.n	800fd94 <__kernel_rem_pio2+0xec>
 801004c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801004e:	2301      	movs	r3, #1
 8010050:	e7e4      	b.n	801001c <__kernel_rem_pio2+0x374>
 8010052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010054:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010058:	f7f0 fa84 	bl	8000564 <__aeabi_i2d>
 801005c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010062:	46ab      	mov	fp, r5
 8010064:	461c      	mov	r4, r3
 8010066:	f04f 0900 	mov.w	r9, #0
 801006a:	2600      	movs	r6, #0
 801006c:	2700      	movs	r7, #0
 801006e:	9b06      	ldr	r3, [sp, #24]
 8010070:	4599      	cmp	r9, r3
 8010072:	dd06      	ble.n	8010082 <__kernel_rem_pio2+0x3da>
 8010074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010076:	e8e3 6702 	strd	r6, r7, [r3], #8
 801007a:	f108 0801 	add.w	r8, r8, #1
 801007e:	930a      	str	r3, [sp, #40]	; 0x28
 8010080:	e7df      	b.n	8010042 <__kernel_rem_pio2+0x39a>
 8010082:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010086:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801008a:	f7f0 fad5 	bl	8000638 <__aeabi_dmul>
 801008e:	4602      	mov	r2, r0
 8010090:	460b      	mov	r3, r1
 8010092:	4630      	mov	r0, r6
 8010094:	4639      	mov	r1, r7
 8010096:	f7f0 f919 	bl	80002cc <__adddf3>
 801009a:	f109 0901 	add.w	r9, r9, #1
 801009e:	4606      	mov	r6, r0
 80100a0:	460f      	mov	r7, r1
 80100a2:	e7e4      	b.n	801006e <__kernel_rem_pio2+0x3c6>
 80100a4:	3d01      	subs	r5, #1
 80100a6:	e748      	b.n	800ff3a <__kernel_rem_pio2+0x292>
 80100a8:	ec47 6b10 	vmov	d0, r6, r7
 80100ac:	f1ca 0000 	rsb	r0, sl, #0
 80100b0:	f000 fa92 	bl	80105d8 <scalbn>
 80100b4:	ec57 6b10 	vmov	r6, r7, d0
 80100b8:	4ba0      	ldr	r3, [pc, #640]	; (801033c <__kernel_rem_pio2+0x694>)
 80100ba:	ee10 0a10 	vmov	r0, s0
 80100be:	2200      	movs	r2, #0
 80100c0:	4639      	mov	r1, r7
 80100c2:	f7f0 fd3f 	bl	8000b44 <__aeabi_dcmpge>
 80100c6:	b1f8      	cbz	r0, 8010108 <__kernel_rem_pio2+0x460>
 80100c8:	4b9d      	ldr	r3, [pc, #628]	; (8010340 <__kernel_rem_pio2+0x698>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	4630      	mov	r0, r6
 80100ce:	4639      	mov	r1, r7
 80100d0:	f7f0 fab2 	bl	8000638 <__aeabi_dmul>
 80100d4:	f7f0 fd60 	bl	8000b98 <__aeabi_d2iz>
 80100d8:	4680      	mov	r8, r0
 80100da:	f7f0 fa43 	bl	8000564 <__aeabi_i2d>
 80100de:	4b97      	ldr	r3, [pc, #604]	; (801033c <__kernel_rem_pio2+0x694>)
 80100e0:	2200      	movs	r2, #0
 80100e2:	f7f0 faa9 	bl	8000638 <__aeabi_dmul>
 80100e6:	460b      	mov	r3, r1
 80100e8:	4602      	mov	r2, r0
 80100ea:	4639      	mov	r1, r7
 80100ec:	4630      	mov	r0, r6
 80100ee:	f7f0 f8eb 	bl	80002c8 <__aeabi_dsub>
 80100f2:	f7f0 fd51 	bl	8000b98 <__aeabi_d2iz>
 80100f6:	1c65      	adds	r5, r4, #1
 80100f8:	ab0e      	add	r3, sp, #56	; 0x38
 80100fa:	f10a 0a18 	add.w	sl, sl, #24
 80100fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010102:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010106:	e720      	b.n	800ff4a <__kernel_rem_pio2+0x2a2>
 8010108:	4630      	mov	r0, r6
 801010a:	4639      	mov	r1, r7
 801010c:	f7f0 fd44 	bl	8000b98 <__aeabi_d2iz>
 8010110:	ab0e      	add	r3, sp, #56	; 0x38
 8010112:	4625      	mov	r5, r4
 8010114:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010118:	e717      	b.n	800ff4a <__kernel_rem_pio2+0x2a2>
 801011a:	ab0e      	add	r3, sp, #56	; 0x38
 801011c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010120:	f7f0 fa20 	bl	8000564 <__aeabi_i2d>
 8010124:	4632      	mov	r2, r6
 8010126:	463b      	mov	r3, r7
 8010128:	f7f0 fa86 	bl	8000638 <__aeabi_dmul>
 801012c:	4b84      	ldr	r3, [pc, #528]	; (8010340 <__kernel_rem_pio2+0x698>)
 801012e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8010132:	2200      	movs	r2, #0
 8010134:	4630      	mov	r0, r6
 8010136:	4639      	mov	r1, r7
 8010138:	f7f0 fa7e 	bl	8000638 <__aeabi_dmul>
 801013c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010140:	4606      	mov	r6, r0
 8010142:	460f      	mov	r7, r1
 8010144:	e70f      	b.n	800ff66 <__kernel_rem_pio2+0x2be>
 8010146:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801014a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801014e:	f7f0 fa73 	bl	8000638 <__aeabi_dmul>
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801015a:	f7f0 f8b7 	bl	80002cc <__adddf3>
 801015e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010162:	f108 0801 	add.w	r8, r8, #1
 8010166:	9b02      	ldr	r3, [sp, #8]
 8010168:	4598      	cmp	r8, r3
 801016a:	dc01      	bgt.n	8010170 <__kernel_rem_pio2+0x4c8>
 801016c:	45b8      	cmp	r8, r7
 801016e:	ddea      	ble.n	8010146 <__kernel_rem_pio2+0x49e>
 8010170:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010174:	ab4a      	add	r3, sp, #296	; 0x128
 8010176:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801017a:	ed87 7b00 	vstr	d7, [r7]
 801017e:	3e01      	subs	r6, #1
 8010180:	e6f8      	b.n	800ff74 <__kernel_rem_pio2+0x2cc>
 8010182:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010184:	2b02      	cmp	r3, #2
 8010186:	dc0b      	bgt.n	80101a0 <__kernel_rem_pio2+0x4f8>
 8010188:	2b00      	cmp	r3, #0
 801018a:	dc35      	bgt.n	80101f8 <__kernel_rem_pio2+0x550>
 801018c:	d059      	beq.n	8010242 <__kernel_rem_pio2+0x59a>
 801018e:	9b04      	ldr	r3, [sp, #16]
 8010190:	f003 0007 	and.w	r0, r3, #7
 8010194:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010198:	ecbd 8b02 	vpop	{d8}
 801019c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80101a2:	2b03      	cmp	r3, #3
 80101a4:	d1f3      	bne.n	801018e <__kernel_rem_pio2+0x4e6>
 80101a6:	ab4a      	add	r3, sp, #296	; 0x128
 80101a8:	4423      	add	r3, r4
 80101aa:	9306      	str	r3, [sp, #24]
 80101ac:	461c      	mov	r4, r3
 80101ae:	469a      	mov	sl, r3
 80101b0:	9502      	str	r5, [sp, #8]
 80101b2:	9b02      	ldr	r3, [sp, #8]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f1aa 0a08 	sub.w	sl, sl, #8
 80101ba:	dc6b      	bgt.n	8010294 <__kernel_rem_pio2+0x5ec>
 80101bc:	46aa      	mov	sl, r5
 80101be:	f1ba 0f01 	cmp.w	sl, #1
 80101c2:	f1a4 0408 	sub.w	r4, r4, #8
 80101c6:	f300 8085 	bgt.w	80102d4 <__kernel_rem_pio2+0x62c>
 80101ca:	9c06      	ldr	r4, [sp, #24]
 80101cc:	2000      	movs	r0, #0
 80101ce:	3408      	adds	r4, #8
 80101d0:	2100      	movs	r1, #0
 80101d2:	2d01      	cmp	r5, #1
 80101d4:	f300 809d 	bgt.w	8010312 <__kernel_rem_pio2+0x66a>
 80101d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80101dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80101e0:	f1bb 0f00 	cmp.w	fp, #0
 80101e4:	f040 809b 	bne.w	801031e <__kernel_rem_pio2+0x676>
 80101e8:	9b01      	ldr	r3, [sp, #4]
 80101ea:	e9c3 5600 	strd	r5, r6, [r3]
 80101ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80101f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80101f6:	e7ca      	b.n	801018e <__kernel_rem_pio2+0x4e6>
 80101f8:	3408      	adds	r4, #8
 80101fa:	ab4a      	add	r3, sp, #296	; 0x128
 80101fc:	441c      	add	r4, r3
 80101fe:	462e      	mov	r6, r5
 8010200:	2000      	movs	r0, #0
 8010202:	2100      	movs	r1, #0
 8010204:	2e00      	cmp	r6, #0
 8010206:	da36      	bge.n	8010276 <__kernel_rem_pio2+0x5ce>
 8010208:	f1bb 0f00 	cmp.w	fp, #0
 801020c:	d039      	beq.n	8010282 <__kernel_rem_pio2+0x5da>
 801020e:	4602      	mov	r2, r0
 8010210:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010214:	9c01      	ldr	r4, [sp, #4]
 8010216:	e9c4 2300 	strd	r2, r3, [r4]
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010222:	f7f0 f851 	bl	80002c8 <__aeabi_dsub>
 8010226:	ae4c      	add	r6, sp, #304	; 0x130
 8010228:	2401      	movs	r4, #1
 801022a:	42a5      	cmp	r5, r4
 801022c:	da2c      	bge.n	8010288 <__kernel_rem_pio2+0x5e0>
 801022e:	f1bb 0f00 	cmp.w	fp, #0
 8010232:	d002      	beq.n	801023a <__kernel_rem_pio2+0x592>
 8010234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010238:	4619      	mov	r1, r3
 801023a:	9b01      	ldr	r3, [sp, #4]
 801023c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010240:	e7a5      	b.n	801018e <__kernel_rem_pio2+0x4e6>
 8010242:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8010246:	eb0d 0403 	add.w	r4, sp, r3
 801024a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801024e:	2000      	movs	r0, #0
 8010250:	2100      	movs	r1, #0
 8010252:	2d00      	cmp	r5, #0
 8010254:	da09      	bge.n	801026a <__kernel_rem_pio2+0x5c2>
 8010256:	f1bb 0f00 	cmp.w	fp, #0
 801025a:	d002      	beq.n	8010262 <__kernel_rem_pio2+0x5ba>
 801025c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010260:	4619      	mov	r1, r3
 8010262:	9b01      	ldr	r3, [sp, #4]
 8010264:	e9c3 0100 	strd	r0, r1, [r3]
 8010268:	e791      	b.n	801018e <__kernel_rem_pio2+0x4e6>
 801026a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801026e:	f7f0 f82d 	bl	80002cc <__adddf3>
 8010272:	3d01      	subs	r5, #1
 8010274:	e7ed      	b.n	8010252 <__kernel_rem_pio2+0x5aa>
 8010276:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801027a:	f7f0 f827 	bl	80002cc <__adddf3>
 801027e:	3e01      	subs	r6, #1
 8010280:	e7c0      	b.n	8010204 <__kernel_rem_pio2+0x55c>
 8010282:	4602      	mov	r2, r0
 8010284:	460b      	mov	r3, r1
 8010286:	e7c5      	b.n	8010214 <__kernel_rem_pio2+0x56c>
 8010288:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801028c:	f7f0 f81e 	bl	80002cc <__adddf3>
 8010290:	3401      	adds	r4, #1
 8010292:	e7ca      	b.n	801022a <__kernel_rem_pio2+0x582>
 8010294:	e9da 8900 	ldrd	r8, r9, [sl]
 8010298:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801029c:	9b02      	ldr	r3, [sp, #8]
 801029e:	3b01      	subs	r3, #1
 80102a0:	9302      	str	r3, [sp, #8]
 80102a2:	4632      	mov	r2, r6
 80102a4:	463b      	mov	r3, r7
 80102a6:	4640      	mov	r0, r8
 80102a8:	4649      	mov	r1, r9
 80102aa:	f7f0 f80f 	bl	80002cc <__adddf3>
 80102ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80102b2:	4602      	mov	r2, r0
 80102b4:	460b      	mov	r3, r1
 80102b6:	4640      	mov	r0, r8
 80102b8:	4649      	mov	r1, r9
 80102ba:	f7f0 f805 	bl	80002c8 <__aeabi_dsub>
 80102be:	4632      	mov	r2, r6
 80102c0:	463b      	mov	r3, r7
 80102c2:	f7f0 f803 	bl	80002cc <__adddf3>
 80102c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80102ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80102ce:	ed8a 7b00 	vstr	d7, [sl]
 80102d2:	e76e      	b.n	80101b2 <__kernel_rem_pio2+0x50a>
 80102d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80102d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80102dc:	4640      	mov	r0, r8
 80102de:	4632      	mov	r2, r6
 80102e0:	463b      	mov	r3, r7
 80102e2:	4649      	mov	r1, r9
 80102e4:	f7ef fff2 	bl	80002cc <__adddf3>
 80102e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	4640      	mov	r0, r8
 80102f2:	4649      	mov	r1, r9
 80102f4:	f7ef ffe8 	bl	80002c8 <__aeabi_dsub>
 80102f8:	4632      	mov	r2, r6
 80102fa:	463b      	mov	r3, r7
 80102fc:	f7ef ffe6 	bl	80002cc <__adddf3>
 8010300:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010308:	ed84 7b00 	vstr	d7, [r4]
 801030c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010310:	e755      	b.n	80101be <__kernel_rem_pio2+0x516>
 8010312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010316:	f7ef ffd9 	bl	80002cc <__adddf3>
 801031a:	3d01      	subs	r5, #1
 801031c:	e759      	b.n	80101d2 <__kernel_rem_pio2+0x52a>
 801031e:	9b01      	ldr	r3, [sp, #4]
 8010320:	9a01      	ldr	r2, [sp, #4]
 8010322:	601d      	str	r5, [r3, #0]
 8010324:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010328:	605c      	str	r4, [r3, #4]
 801032a:	609f      	str	r7, [r3, #8]
 801032c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010330:	60d3      	str	r3, [r2, #12]
 8010332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010336:	6110      	str	r0, [r2, #16]
 8010338:	6153      	str	r3, [r2, #20]
 801033a:	e728      	b.n	801018e <__kernel_rem_pio2+0x4e6>
 801033c:	41700000 	.word	0x41700000
 8010340:	3e700000 	.word	0x3e700000
 8010344:	00000000 	.word	0x00000000

08010348 <__kernel_sin>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	ed2d 8b04 	vpush	{d8-d9}
 8010350:	eeb0 8a41 	vmov.f32	s16, s2
 8010354:	eef0 8a61 	vmov.f32	s17, s3
 8010358:	ec55 4b10 	vmov	r4, r5, d0
 801035c:	b083      	sub	sp, #12
 801035e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010362:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010366:	9001      	str	r0, [sp, #4]
 8010368:	da06      	bge.n	8010378 <__kernel_sin+0x30>
 801036a:	ee10 0a10 	vmov	r0, s0
 801036e:	4629      	mov	r1, r5
 8010370:	f7f0 fc12 	bl	8000b98 <__aeabi_d2iz>
 8010374:	2800      	cmp	r0, #0
 8010376:	d051      	beq.n	801041c <__kernel_sin+0xd4>
 8010378:	4622      	mov	r2, r4
 801037a:	462b      	mov	r3, r5
 801037c:	4620      	mov	r0, r4
 801037e:	4629      	mov	r1, r5
 8010380:	f7f0 f95a 	bl	8000638 <__aeabi_dmul>
 8010384:	4682      	mov	sl, r0
 8010386:	468b      	mov	fp, r1
 8010388:	4602      	mov	r2, r0
 801038a:	460b      	mov	r3, r1
 801038c:	4620      	mov	r0, r4
 801038e:	4629      	mov	r1, r5
 8010390:	f7f0 f952 	bl	8000638 <__aeabi_dmul>
 8010394:	a341      	add	r3, pc, #260	; (adr r3, 801049c <__kernel_sin+0x154>)
 8010396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039a:	4680      	mov	r8, r0
 801039c:	4689      	mov	r9, r1
 801039e:	4650      	mov	r0, sl
 80103a0:	4659      	mov	r1, fp
 80103a2:	f7f0 f949 	bl	8000638 <__aeabi_dmul>
 80103a6:	a33f      	add	r3, pc, #252	; (adr r3, 80104a4 <__kernel_sin+0x15c>)
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	f7ef ff8c 	bl	80002c8 <__aeabi_dsub>
 80103b0:	4652      	mov	r2, sl
 80103b2:	465b      	mov	r3, fp
 80103b4:	f7f0 f940 	bl	8000638 <__aeabi_dmul>
 80103b8:	a33c      	add	r3, pc, #240	; (adr r3, 80104ac <__kernel_sin+0x164>)
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	f7ef ff85 	bl	80002cc <__adddf3>
 80103c2:	4652      	mov	r2, sl
 80103c4:	465b      	mov	r3, fp
 80103c6:	f7f0 f937 	bl	8000638 <__aeabi_dmul>
 80103ca:	a33a      	add	r3, pc, #232	; (adr r3, 80104b4 <__kernel_sin+0x16c>)
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	f7ef ff7a 	bl	80002c8 <__aeabi_dsub>
 80103d4:	4652      	mov	r2, sl
 80103d6:	465b      	mov	r3, fp
 80103d8:	f7f0 f92e 	bl	8000638 <__aeabi_dmul>
 80103dc:	a337      	add	r3, pc, #220	; (adr r3, 80104bc <__kernel_sin+0x174>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7ef ff73 	bl	80002cc <__adddf3>
 80103e6:	9b01      	ldr	r3, [sp, #4]
 80103e8:	4606      	mov	r6, r0
 80103ea:	460f      	mov	r7, r1
 80103ec:	b9eb      	cbnz	r3, 801042a <__kernel_sin+0xe2>
 80103ee:	4602      	mov	r2, r0
 80103f0:	460b      	mov	r3, r1
 80103f2:	4650      	mov	r0, sl
 80103f4:	4659      	mov	r1, fp
 80103f6:	f7f0 f91f 	bl	8000638 <__aeabi_dmul>
 80103fa:	a325      	add	r3, pc, #148	; (adr r3, 8010490 <__kernel_sin+0x148>)
 80103fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010400:	f7ef ff62 	bl	80002c8 <__aeabi_dsub>
 8010404:	4642      	mov	r2, r8
 8010406:	464b      	mov	r3, r9
 8010408:	f7f0 f916 	bl	8000638 <__aeabi_dmul>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	4620      	mov	r0, r4
 8010412:	4629      	mov	r1, r5
 8010414:	f7ef ff5a 	bl	80002cc <__adddf3>
 8010418:	4604      	mov	r4, r0
 801041a:	460d      	mov	r5, r1
 801041c:	ec45 4b10 	vmov	d0, r4, r5
 8010420:	b003      	add	sp, #12
 8010422:	ecbd 8b04 	vpop	{d8-d9}
 8010426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042a:	4b1b      	ldr	r3, [pc, #108]	; (8010498 <__kernel_sin+0x150>)
 801042c:	ec51 0b18 	vmov	r0, r1, d8
 8010430:	2200      	movs	r2, #0
 8010432:	f7f0 f901 	bl	8000638 <__aeabi_dmul>
 8010436:	4632      	mov	r2, r6
 8010438:	ec41 0b19 	vmov	d9, r0, r1
 801043c:	463b      	mov	r3, r7
 801043e:	4640      	mov	r0, r8
 8010440:	4649      	mov	r1, r9
 8010442:	f7f0 f8f9 	bl	8000638 <__aeabi_dmul>
 8010446:	4602      	mov	r2, r0
 8010448:	460b      	mov	r3, r1
 801044a:	ec51 0b19 	vmov	r0, r1, d9
 801044e:	f7ef ff3b 	bl	80002c8 <__aeabi_dsub>
 8010452:	4652      	mov	r2, sl
 8010454:	465b      	mov	r3, fp
 8010456:	f7f0 f8ef 	bl	8000638 <__aeabi_dmul>
 801045a:	ec53 2b18 	vmov	r2, r3, d8
 801045e:	f7ef ff33 	bl	80002c8 <__aeabi_dsub>
 8010462:	a30b      	add	r3, pc, #44	; (adr r3, 8010490 <__kernel_sin+0x148>)
 8010464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010468:	4606      	mov	r6, r0
 801046a:	460f      	mov	r7, r1
 801046c:	4640      	mov	r0, r8
 801046e:	4649      	mov	r1, r9
 8010470:	f7f0 f8e2 	bl	8000638 <__aeabi_dmul>
 8010474:	4602      	mov	r2, r0
 8010476:	460b      	mov	r3, r1
 8010478:	4630      	mov	r0, r6
 801047a:	4639      	mov	r1, r7
 801047c:	f7ef ff26 	bl	80002cc <__adddf3>
 8010480:	4602      	mov	r2, r0
 8010482:	460b      	mov	r3, r1
 8010484:	4620      	mov	r0, r4
 8010486:	4629      	mov	r1, r5
 8010488:	f7ef ff1e 	bl	80002c8 <__aeabi_dsub>
 801048c:	e7c4      	b.n	8010418 <__kernel_sin+0xd0>
 801048e:	bf00      	nop
 8010490:	55555549 	.word	0x55555549
 8010494:	3fc55555 	.word	0x3fc55555
 8010498:	3fe00000 	.word	0x3fe00000
 801049c:	5acfd57c 	.word	0x5acfd57c
 80104a0:	3de5d93a 	.word	0x3de5d93a
 80104a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80104a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80104ac:	57b1fe7d 	.word	0x57b1fe7d
 80104b0:	3ec71de3 	.word	0x3ec71de3
 80104b4:	19c161d5 	.word	0x19c161d5
 80104b8:	3f2a01a0 	.word	0x3f2a01a0
 80104bc:	1110f8a6 	.word	0x1110f8a6
 80104c0:	3f811111 	.word	0x3f811111

080104c4 <fabs>:
 80104c4:	ec51 0b10 	vmov	r0, r1, d0
 80104c8:	ee10 2a10 	vmov	r2, s0
 80104cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80104d0:	ec43 2b10 	vmov	d0, r2, r3
 80104d4:	4770      	bx	lr
	...

080104d8 <floor>:
 80104d8:	ec51 0b10 	vmov	r0, r1, d0
 80104dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80104e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80104e8:	2e13      	cmp	r6, #19
 80104ea:	ee10 5a10 	vmov	r5, s0
 80104ee:	ee10 8a10 	vmov	r8, s0
 80104f2:	460c      	mov	r4, r1
 80104f4:	dc32      	bgt.n	801055c <floor+0x84>
 80104f6:	2e00      	cmp	r6, #0
 80104f8:	da14      	bge.n	8010524 <floor+0x4c>
 80104fa:	a333      	add	r3, pc, #204	; (adr r3, 80105c8 <floor+0xf0>)
 80104fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010500:	f7ef fee4 	bl	80002cc <__adddf3>
 8010504:	2200      	movs	r2, #0
 8010506:	2300      	movs	r3, #0
 8010508:	f7f0 fb26 	bl	8000b58 <__aeabi_dcmpgt>
 801050c:	b138      	cbz	r0, 801051e <floor+0x46>
 801050e:	2c00      	cmp	r4, #0
 8010510:	da57      	bge.n	80105c2 <floor+0xea>
 8010512:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010516:	431d      	orrs	r5, r3
 8010518:	d001      	beq.n	801051e <floor+0x46>
 801051a:	4c2d      	ldr	r4, [pc, #180]	; (80105d0 <floor+0xf8>)
 801051c:	2500      	movs	r5, #0
 801051e:	4621      	mov	r1, r4
 8010520:	4628      	mov	r0, r5
 8010522:	e025      	b.n	8010570 <floor+0x98>
 8010524:	4f2b      	ldr	r7, [pc, #172]	; (80105d4 <floor+0xfc>)
 8010526:	4137      	asrs	r7, r6
 8010528:	ea01 0307 	and.w	r3, r1, r7
 801052c:	4303      	orrs	r3, r0
 801052e:	d01f      	beq.n	8010570 <floor+0x98>
 8010530:	a325      	add	r3, pc, #148	; (adr r3, 80105c8 <floor+0xf0>)
 8010532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010536:	f7ef fec9 	bl	80002cc <__adddf3>
 801053a:	2200      	movs	r2, #0
 801053c:	2300      	movs	r3, #0
 801053e:	f7f0 fb0b 	bl	8000b58 <__aeabi_dcmpgt>
 8010542:	2800      	cmp	r0, #0
 8010544:	d0eb      	beq.n	801051e <floor+0x46>
 8010546:	2c00      	cmp	r4, #0
 8010548:	bfbe      	ittt	lt
 801054a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801054e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010552:	19a4      	addlt	r4, r4, r6
 8010554:	ea24 0407 	bic.w	r4, r4, r7
 8010558:	2500      	movs	r5, #0
 801055a:	e7e0      	b.n	801051e <floor+0x46>
 801055c:	2e33      	cmp	r6, #51	; 0x33
 801055e:	dd0b      	ble.n	8010578 <floor+0xa0>
 8010560:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010564:	d104      	bne.n	8010570 <floor+0x98>
 8010566:	ee10 2a10 	vmov	r2, s0
 801056a:	460b      	mov	r3, r1
 801056c:	f7ef feae 	bl	80002cc <__adddf3>
 8010570:	ec41 0b10 	vmov	d0, r0, r1
 8010574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010578:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801057c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010580:	fa23 f707 	lsr.w	r7, r3, r7
 8010584:	4207      	tst	r7, r0
 8010586:	d0f3      	beq.n	8010570 <floor+0x98>
 8010588:	a30f      	add	r3, pc, #60	; (adr r3, 80105c8 <floor+0xf0>)
 801058a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058e:	f7ef fe9d 	bl	80002cc <__adddf3>
 8010592:	2200      	movs	r2, #0
 8010594:	2300      	movs	r3, #0
 8010596:	f7f0 fadf 	bl	8000b58 <__aeabi_dcmpgt>
 801059a:	2800      	cmp	r0, #0
 801059c:	d0bf      	beq.n	801051e <floor+0x46>
 801059e:	2c00      	cmp	r4, #0
 80105a0:	da02      	bge.n	80105a8 <floor+0xd0>
 80105a2:	2e14      	cmp	r6, #20
 80105a4:	d103      	bne.n	80105ae <floor+0xd6>
 80105a6:	3401      	adds	r4, #1
 80105a8:	ea25 0507 	bic.w	r5, r5, r7
 80105ac:	e7b7      	b.n	801051e <floor+0x46>
 80105ae:	2301      	movs	r3, #1
 80105b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80105b4:	fa03 f606 	lsl.w	r6, r3, r6
 80105b8:	4435      	add	r5, r6
 80105ba:	4545      	cmp	r5, r8
 80105bc:	bf38      	it	cc
 80105be:	18e4      	addcc	r4, r4, r3
 80105c0:	e7f2      	b.n	80105a8 <floor+0xd0>
 80105c2:	2500      	movs	r5, #0
 80105c4:	462c      	mov	r4, r5
 80105c6:	e7aa      	b.n	801051e <floor+0x46>
 80105c8:	8800759c 	.word	0x8800759c
 80105cc:	7e37e43c 	.word	0x7e37e43c
 80105d0:	bff00000 	.word	0xbff00000
 80105d4:	000fffff 	.word	0x000fffff

080105d8 <scalbn>:
 80105d8:	b570      	push	{r4, r5, r6, lr}
 80105da:	ec55 4b10 	vmov	r4, r5, d0
 80105de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80105e2:	4606      	mov	r6, r0
 80105e4:	462b      	mov	r3, r5
 80105e6:	b99a      	cbnz	r2, 8010610 <scalbn+0x38>
 80105e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80105ec:	4323      	orrs	r3, r4
 80105ee:	d036      	beq.n	801065e <scalbn+0x86>
 80105f0:	4b39      	ldr	r3, [pc, #228]	; (80106d8 <scalbn+0x100>)
 80105f2:	4629      	mov	r1, r5
 80105f4:	ee10 0a10 	vmov	r0, s0
 80105f8:	2200      	movs	r2, #0
 80105fa:	f7f0 f81d 	bl	8000638 <__aeabi_dmul>
 80105fe:	4b37      	ldr	r3, [pc, #220]	; (80106dc <scalbn+0x104>)
 8010600:	429e      	cmp	r6, r3
 8010602:	4604      	mov	r4, r0
 8010604:	460d      	mov	r5, r1
 8010606:	da10      	bge.n	801062a <scalbn+0x52>
 8010608:	a32b      	add	r3, pc, #172	; (adr r3, 80106b8 <scalbn+0xe0>)
 801060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060e:	e03a      	b.n	8010686 <scalbn+0xae>
 8010610:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010614:	428a      	cmp	r2, r1
 8010616:	d10c      	bne.n	8010632 <scalbn+0x5a>
 8010618:	ee10 2a10 	vmov	r2, s0
 801061c:	4620      	mov	r0, r4
 801061e:	4629      	mov	r1, r5
 8010620:	f7ef fe54 	bl	80002cc <__adddf3>
 8010624:	4604      	mov	r4, r0
 8010626:	460d      	mov	r5, r1
 8010628:	e019      	b.n	801065e <scalbn+0x86>
 801062a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801062e:	460b      	mov	r3, r1
 8010630:	3a36      	subs	r2, #54	; 0x36
 8010632:	4432      	add	r2, r6
 8010634:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010638:	428a      	cmp	r2, r1
 801063a:	dd08      	ble.n	801064e <scalbn+0x76>
 801063c:	2d00      	cmp	r5, #0
 801063e:	a120      	add	r1, pc, #128	; (adr r1, 80106c0 <scalbn+0xe8>)
 8010640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010644:	da1c      	bge.n	8010680 <scalbn+0xa8>
 8010646:	a120      	add	r1, pc, #128	; (adr r1, 80106c8 <scalbn+0xf0>)
 8010648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801064c:	e018      	b.n	8010680 <scalbn+0xa8>
 801064e:	2a00      	cmp	r2, #0
 8010650:	dd08      	ble.n	8010664 <scalbn+0x8c>
 8010652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801065a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801065e:	ec45 4b10 	vmov	d0, r4, r5
 8010662:	bd70      	pop	{r4, r5, r6, pc}
 8010664:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010668:	da19      	bge.n	801069e <scalbn+0xc6>
 801066a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801066e:	429e      	cmp	r6, r3
 8010670:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010674:	dd0a      	ble.n	801068c <scalbn+0xb4>
 8010676:	a112      	add	r1, pc, #72	; (adr r1, 80106c0 <scalbn+0xe8>)
 8010678:	e9d1 0100 	ldrd	r0, r1, [r1]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d1e2      	bne.n	8010646 <scalbn+0x6e>
 8010680:	a30f      	add	r3, pc, #60	; (adr r3, 80106c0 <scalbn+0xe8>)
 8010682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010686:	f7ef ffd7 	bl	8000638 <__aeabi_dmul>
 801068a:	e7cb      	b.n	8010624 <scalbn+0x4c>
 801068c:	a10a      	add	r1, pc, #40	; (adr r1, 80106b8 <scalbn+0xe0>)
 801068e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d0b8      	beq.n	8010608 <scalbn+0x30>
 8010696:	a10e      	add	r1, pc, #56	; (adr r1, 80106d0 <scalbn+0xf8>)
 8010698:	e9d1 0100 	ldrd	r0, r1, [r1]
 801069c:	e7b4      	b.n	8010608 <scalbn+0x30>
 801069e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80106a2:	3236      	adds	r2, #54	; 0x36
 80106a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80106a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80106ac:	4620      	mov	r0, r4
 80106ae:	4b0c      	ldr	r3, [pc, #48]	; (80106e0 <scalbn+0x108>)
 80106b0:	2200      	movs	r2, #0
 80106b2:	e7e8      	b.n	8010686 <scalbn+0xae>
 80106b4:	f3af 8000 	nop.w
 80106b8:	c2f8f359 	.word	0xc2f8f359
 80106bc:	01a56e1f 	.word	0x01a56e1f
 80106c0:	8800759c 	.word	0x8800759c
 80106c4:	7e37e43c 	.word	0x7e37e43c
 80106c8:	8800759c 	.word	0x8800759c
 80106cc:	fe37e43c 	.word	0xfe37e43c
 80106d0:	c2f8f359 	.word	0xc2f8f359
 80106d4:	81a56e1f 	.word	0x81a56e1f
 80106d8:	43500000 	.word	0x43500000
 80106dc:	ffff3cb0 	.word	0xffff3cb0
 80106e0:	3c900000 	.word	0x3c900000

080106e4 <_init>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	bf00      	nop
 80106e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ea:	bc08      	pop	{r3}
 80106ec:	469e      	mov	lr, r3
 80106ee:	4770      	bx	lr

080106f0 <_fini>:
 80106f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f2:	bf00      	nop
 80106f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106f6:	bc08      	pop	{r3}
 80106f8:	469e      	mov	lr, r3
 80106fa:	4770      	bx	lr
